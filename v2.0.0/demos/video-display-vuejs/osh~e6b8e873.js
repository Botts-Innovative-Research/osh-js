(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return hasValue; });\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* unused harmony export isFunction */\n/* unused harmony export assertDefined */\n/* unused harmony export assertType */\n/* unused harmony export assertBoolean */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertString; });\n/* unused harmony export assertNumber */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventMap.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is responsible for observing and firing events. It used an object as backed data structure.\n */\n\nclass EventMap_EventMap {\n  constructor() {\n    this.eventMap = {};\n  }\n\n  remove(eventName, id) {\n    if (eventName in this.eventMap) {\n      this.eventMap[eventName] = this.eventMap[eventName].filter(obj => obj.id !== id);\n    }\n  }\n\n  removeById(id) {\n    for (let eventName in this.eventMap) {\n      this.eventMap[eventName] = this.eventMap[eventName].filter(obj => obj.id !== id);\n    }\n  }\n  /**\n   * Observes any eventName and calls the callback when the event is fired.\n   * @param {String} eventName -\n   * @param {Function} fnCallback -\n   * @param {String} id - id of the div to observe\n   */\n\n\n  observe(eventName, fnCallback, id = \'any\') {\n    if (!Object(Utils["g" /* isDefined */])(eventName) || !Object(Utils["g" /* isDefined */])(fnCallback) || !Object(Utils["g" /* isDefined */])(id)) {\n      return;\n    }\n\n    if (!(eventName in this.eventMap)) {\n      this.eventMap[eventName] = [];\n    }\n\n    this.eventMap[eventName].push({\n      fn: fnCallback,\n      id: id\n    });\n  }\n  /**\n   * Fires an event\n   * @param {String} eventName -\n   * @param {Object} properties -\n   */\n\n\n  fire(eventName, properties) {\n    if (!Object(Utils["g" /* isDefined */])(eventName)) {\n      return;\n    }\n\n    if (eventName in this.eventMap) {\n      let fnCallbackArr = this.eventMap[eventName];\n\n      for (let i = 0; i < fnCallbackArr.length; i++) {\n        // callback the properties to the current callback\n        fnCallbackArr[i].fn(properties);\n      }\n    }\n  }\n\n}\n\n/* harmony default export */ var events_EventMap = (EventMap_EventMap);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventManager.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nconst eventMap = new events_EventMap();\n/**\n * This class is response for handling events and acts as an event bus.\n */\n\nclass EventManager {\n  static remove(eventName, id = \'any\') {\n    eventMap.remove(\'osh:\' + eventName, id);\n  }\n\n  static removeById(id = \'any\') {\n    eventMap.removeById(id);\n  }\n\n  static registerView(view) {\n    view.registerCallback();\n  }\n\n  static unregisterView(view) {\n    view.unregisterCallback();\n  }\n  /**\n   * Fires an event\n   * @param {String} eventName -\n   * @param {Object} properties -\n   */\n\n\n  static fire(eventName, properties) {\n    properties.name = eventName;\n    eventMap.fire(\'osh:\' + eventName, properties);\n  }\n  /**\n   * Observes any eventName and calls the callback when the event is fired.\n   * @param {String} eventName -\n   * @param {Function} fnCallback -\n   */\n\n\n  static observe(eventName, fnCallback, id = \'any\') {\n    eventMap.observe(\'osh:\' + eventName, fnCallback, id);\n  }\n  /**\n   * Observes eventName attached to a div element  and calls the callback when the event is fired.\n   * @param {String} divId -\n   * @param {String} eventName -\n   * @param {Function} fnCallback -\n   */\n\n\n  static observeDiv(divId, eventName, fnCallback) {\n    let elem = document.getElementById(divId); // use native dom event listener\n\n    elem.addEventListener(eventName, fnCallback);\n  }\n  /**\n   * This part defines the events used INTO the API\n   * @const\n   * @type {{DATA: string, SYNC_DATA: string, SELECT_VIEW: string, CONTEXT_MENU: string, SHOW_VIEW: string, CONNECT_DATASOURCE: string, DISCONNECT_DATASOURCE: string, DATASOURCE_UPDATE_TIME: string, CURRENT_MASTER_TIME: string, UAV_TAKEOFF: string, UAV_GOTO: string, UAV_LOOKAT: string, UAV_LAND: string, UAV_ORBIT: string, LOADING_START: string, LOADING_STOP: string, ADD_VIEW_ITEM: string}}\n   */\n\n\n  static get EVENT() {\n    return {\n      SELECT_VIEW: "selectView",\n      SHOW_VIEW: "showView",\n      UAV_TAKEOFF: "uav:takeoff",\n      UAV_GOTO: "uav:goto",\n      UAV_LOOKAT: "uav:lookat",\n      UAV_LAND: "uav:land",\n      UAV_ORBIT: "uav:orbit",\n      LOADING_START: "loading:start",\n      LOADING_STOP: "loading:stop",\n      ADD_VIEW_ITEM: "addViewItem",\n      RESIZE: "resize",\n      PTZ_SEND_REQUEST: "ptzSendRequest"\n    };\n  }\n\n}\n\n/* harmony default export */ var events_EventManager = __webpack_exports__["a"] = (EventManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL0NvbnN0YW50cy5qcz9kYmY3Il0sIm5hbWVzIjpbIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBTyxNQUFNQSx1QkFBdUIsR0FBRyxvQkFBaEM7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxrQkFBOUI7QUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxnQkFBakMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(25);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_resources_css_view_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n * @param {Object} parentElementDivId - The parent html element div id to attach/or create the view.\n * @param {String} viewItems - The list of view items\n * @param {String} options - The options\n */\n\n\n\n\n\nclass View {\n  /**\n   * Create a View.\n   * @param {String} parentElementDivId - The div element to attach to\n   * @param {Object[]} viewItems - The initial view items to add\n   * @param {String} viewItems.name - The name of the view item\n   * @param {Styler} viewItems.styler - The styler object representing the view item\n   * @param {Object} options - the properties of the view\n   * @param {String} options.dataSourceId - The dataSource id of the dataSource providing data to the view\n   * @param {Entity} options.entity - The entity to which the view belongs to\n   */\n  constructor(parentElementDivId, viewItems, options) {\n    // list of stylers\n\n    /** @protected @const {!Styler} */\n    this.stylers = [];\n    this.viewItems = [];\n    /** @protected @const {!String[]} */\n\n    this.names = {};\n    this.stylerToObj = {};\n    this.stylerIdToStyler = {};\n    this.lastRec = {};\n    this.selectedDataSources = [];\n    this.dataSources = [];\n    this.viewItemsBroadcastChannels = {};\n    this.entity = null; //this.divId = divId;\n\n    this.id = "view-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "h"])();\n    /** @protected {!Entity} */\n\n    this.entity = null;\n    this.dataSourceId = -1; // sets dataSourceId\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options.dataSourceId)) {\n      this.dataSourceId = options.dataSourceId;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options.entity)) {\n      this.entity = options.entity;\n    }\n\n    this.css = "";\n    this.cssSelected = "";\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options.css)) {\n      this.css = options.css;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options.cssSelected)) {\n      this.cssSelected = options.cssSelected;\n    } // inits the view before adding the viewItem\n\n\n    this.init(parentElementDivId, viewItems, options);\n  }\n  /**\n   * Inits the view component.\n   * @param parentElementDivId The parent html element object to attach/create the view\n   * @param viewItems the list of items to add\n   * @param options [TODO]\n   * @memberof View\n   */\n\n\n  init(parentElementDivId, viewItems, options) {\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let div = document.getElementById(parentElementDivId);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(options);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(viewItems)) {\n      for (let i = 0; i < viewItems.length; i++) {\n        this.addViewItem(viewItems[i]);\n      }\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options)) {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(options.show)) {\n        document.getElementById(this.divId).style.display = options.show ? "block" : "none";\n      }\n    }\n\n    this.handleEvents();\n    var that = this; // observes the event associated to the dataSourceId\n\n    this.registerCallback();\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too? You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n\n  registerCallback() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(this.dataSourceId) || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(this.entity)) {\n      const that = this;\n\n      function registerDs(dataSourceId) {\n        const broadcastChannel = new BroadcastChannel(_Constants__WEBPACK_IMPORTED_MODULE_3__[/* DATASOURCE_DATA_TOPIC */ "a"] + dataSourceId);\n\n        broadcastChannel.onmessage = event => {\n          if (event.data.message && event.data.message === \'reset\') {\n            that.reset(); // on data stream reset\n          } else {\n            that.setData(dataSourceId, event.data);\n          }\n        };\n      }\n\n      if (this.entity !== null) {\n        for (let dataSource of this.entity.getDataSources()) {\n          registerDs(dataSource.id);\n        }\n      } else {\n        registerDs(this.dataSourceId);\n      }\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  unregisterCallback() {\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].removeById(this.divId);\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {*} data - The data to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {\n    this.unregisterCallback();\n  }\n  /**\n   * Adds a viewItem to the view. A broadcastChannel is going to listen the new dataSources\n   * and EventManager.EVENT.SELECT_VIEW are then observed using the\n   * dataSource(s) contained into the styler.\n   * @param {Object} viewItem - The initial view items to add\n   * @param {String} viewItem.name - The name of the view item\n   * @param {Styler} viewItem.styler - The styler object representing the view item\n   */\n\n\n  addViewItem(viewItem) {\n    this.viewItems.push(viewItem);\n\n    if (viewItem.hasOwnProperty("styler")) {\n      let styler = viewItem.styler;\n      this.stylers.push(styler);\n\n      if (viewItem.hasOwnProperty("name")) {\n        this.names[styler.getId()] = viewItem.name;\n      }\n\n      styler.viewItem = viewItem;\n      styler.init(this);\n      this.stylerIdToStyler[styler.id] = styler; //for(let dataSourceId in styler.dataSourceToStylerMap) {\n\n      let ds = styler.getDataSourcesIds();\n\n      for (let i = 0; i < ds.length; i++) {\n        const dataSourceId = ds[i]; // observes the data come in\n\n        let self = this;\n        const broadcastChannel = new BroadcastChannel(_Constants__WEBPACK_IMPORTED_MODULE_3__[/* DATASOURCE_DATA_TOPIC */ "a"] + dataSourceId);\n        this.viewItemsBroadcastChannels[dataSourceId] = broadcastChannel;\n\n        broadcastChannel.onmessage = event => {\n          // skip data reset events for now\n          if (event.data.message && event.data.message === \'reset\') {\n            return;\n          } // we check selected dataSource only when the selected entity is not set\n\n\n          let selected = false;\n\n          if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(self.selectedEntity)) {\n            selected = viewItem.entityId === self.selectedEntity;\n          } else {\n            selected = self.selectedDataSources.indexOf(dataSourceId) > -1;\n          } //TODO: maybe done into the styler?\n\n\n          styler.setData(dataSourceId, event.data, self, {\n            selected: selected\n          });\n          self.lastRec[dataSourceId] = event.data;\n        };\n\n        _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].observe(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EVENT.SELECT_VIEW, event => {\n          // we check selected dataSource only when the selected entity is not set\n          let selected = false;\n\n          if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(event.entityId)) {\n            selected = viewItem.entityId === event.entityId;\n          } else {\n            selected = event.dataSourcesIds.indexOf(dataSourceId) > -1;\n          }\n\n          if (dataSourceId in self.lastRec) {\n            styler.setData(dataSourceId, self.lastRec[dataSourceId], self, {\n              selected: selected\n            });\n          }\n        }, this.divId);\n      }\n    }\n  }\n  /**\n   * Removes a view item from the view.\n   * @param {Object} viewItem - The initial view items to add\n   * @param {String} viewItem.name - The name of the view item\n   * @param {Styler} viewItem.styler - The styler object representing the view item\n   */\n\n\n  removeViewItem(viewItem) {\n    if (this.viewItems.includes(viewItem)) {\n      // 1) remove from STYLER fn\n      for (let ds in viewItem.styler.dataSourceToStylerMap) {\n        this.viewItemsBroadcastChannels[ds.id].close();\n        delete this.viewItemsBroadcastChannels[ds.id];\n        delete this.lastRec[ds];\n      }\n\n      this.viewItems = this.viewItems.filter(currentViewItem => currentViewItem !== viewItem);\n    }\n\n    delete this.stylerIdToStyler[viewItem.styler.id];\n    this.stylers = this.stylers.filter(currentStyler => currentStyler.id !== viewItem.styler.id);\n    delete this.names[viewItem.styler.id];\n    delete this.stylerToObj[viewItem.styler.id];\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeViewItems() {\n    for (const viewItem of this.viewItems) {\n      this.removeViewItem(viewItem);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  handleEvents() {\n    var that = this; // observes the selected event\n\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].observe(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EVENT.SELECT_VIEW, event => that.selectDataView(event.dataSourcesIds, event.entityId), this.divId); // observes the SHOW event\n\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].observe(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EVENT.SHOW_VIEW, event => that.show(event), this.divId);\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].observe(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EVENT.ADD_VIEW_ITEM, event => {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(event.viewId) && event.viewId === that.id) {\n        that.addViewItem(event.viewItem);\n      }\n    }, this.divId);\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].observe(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].EVENT.RESIZE + "-" + this.divId, event => that.onResize(), this.divId);\n  }\n  /**\n   * Selects the view by setting the current selected entity and dataSource.\n   * @param  {String} dataSourcesIds - The dataSource id\n   * @param {String} entityId - The entity id\n   */\n\n\n  selectDataView(dataSourcesIds, entityId) {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "g"])(this.dataSources)) {\n      this.selectedDataSources = dataSourcesIds; // set the selected entity even if it is undefined\n      // this is handled by the setData function\n\n      this.selectedEntity = entityId;\n\n      for (let j = 0; j < this.dataSources.length; j++) {\n        this.setData(this.dataSources[j], this.lastRec[this.dataSources[j]]);\n      }\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = [];\n\n    if (this.dataSourceId !== -1) {\n      res.push(this.dataSourceId);\n    } // check for stylers\n\n\n    for (let i = 0; i < this.viewItems.length; i++) {\n      let viewItem = this.viewItems[i];\n\n      if (viewItem.hasOwnProperty("styler")) {\n        let styler = viewItem.styler;\n        res = res.concat(styler.getDataSourcesIds());\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    console.log(\'reset view\');\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   * @param {Object} worker - DataSource worker\n   * @return {String} the full url\n   */\n  constructor(name, properties, worker) {\n    this.id = "DataSource-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "h"])();\n    this.name = name;\n    this.properties = properties;\n    this.dataSourceWorker = worker;\n    this.dataSynchronizer = null;\n    this.initDataSource(properties);\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @private\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    this.dataSourceWorker.postMessage({\n      message: \'init\',\n      id: this.id,\n      properties: JSON.stringify(properties),\n      topic: _Constants__WEBPACK_IMPORTED_MODULE_1__[/* DATASOURCE_DATA_TOPIC */ "a"] + this.id\n    });\n  }\n\n  setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: _Constants__WEBPACK_IMPORTED_MODULE_1__[/* DATA_SYNCHRONIZER_TOPIC */ "b"] + this.dataSynchronizer.id\n    });\n  }\n  /**\n   * Disconnect the dataSource then the connector will be closed as well.\n   */\n\n\n  disconnect() {\n    this.dataSourceWorker.postMessage({\n      message: \'disconnect\'\n    });\n    this.connected = false;\n  }\n  /**\n   * Connect the dataSource then the connector will be opened as well.\n   */\n\n\n  connect() {\n    this.dataSourceWorker.postMessage({\n      message: \'connect\'\n    });\n    this.connected = true;\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (DataSource);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9EYXRhU291cmNlLmpzPzE2ZWMiXSwibmFtZXMiOlsiRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJ3b3JrZXIiLCJpZCIsInJhbmRvbVVVSUQiLCJkYXRhU291cmNlV29ya2VyIiwiZGF0YVN5bmNocm9uaXplciIsImluaXREYXRhU291cmNlIiwicG9zdE1lc3NhZ2UiLCJtZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvcGljIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwic2V0RGF0YVN5bmNocm9uaXplciIsIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiZGlzY29ubmVjdCIsImNvbm5lY3RlZCIsImNvbm5lY3QiLCJnZXRJZCIsImdldE5hbWUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBO0FBQ0E7QUFFQTs7Ozs7QUFJQSxNQUFNQSxVQUFOLENBQWlCO0FBQ2I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkFDLGFBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQW1CQyxNQUFuQixFQUEyQjtBQUNsQyxTQUFLQyxFQUFMLEdBQVUsZ0JBQWdCQywwRUFBVSxFQUFwQztBQUNBLFNBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS0ksZ0JBQUwsR0FBd0JILE1BQXhCO0FBQ0EsU0FBS0ksZ0JBQUwsR0FBd0IsSUFBeEI7QUFDQSxTQUFLQyxjQUFMLENBQW9CTixVQUFwQjtBQUNIO0FBRUQ7Ozs7Ozs7QUFLQU0sZ0JBQWMsQ0FBQ04sVUFBRCxFQUFhO0FBQ3ZCLFNBQUtJLGdCQUFMLENBQXNCRyxXQUF0QixDQUFrQztBQUM5QkMsYUFBTyxFQUFFLE1BRHFCO0FBRTlCTixRQUFFLEVBQUUsS0FBS0EsRUFGcUI7QUFHOUJGLGdCQUFVLEVBQUVTLElBQUksQ0FBQ0MsU0FBTCxDQUFlVixVQUFmLENBSGtCO0FBSTlCVyxXQUFLLEVBQUVDLHdFQUFxQixHQUFDLEtBQUtWO0FBSkosS0FBbEM7QUFNSDs7QUFFRFcscUJBQW1CLENBQUNSLGdCQUFELEVBQW1CO0FBQ2xDLFNBQUtBLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDQSxTQUFLRCxnQkFBTCxDQUFzQkcsV0FBdEIsQ0FBa0M7QUFDOUJDLGFBQU8sRUFBRSxPQURxQjtBQUU5QkcsV0FBSyxFQUFFRywwRUFBdUIsR0FBQyxLQUFLVCxnQkFBTCxDQUFzQkg7QUFGdkIsS0FBbEM7QUFJSDtBQUVEOzs7OztBQUdBYSxZQUFVLEdBQUc7QUFDVCxTQUFLWCxnQkFBTCxDQUFzQkcsV0FBdEIsQ0FBa0M7QUFDOUJDLGFBQU8sRUFBRTtBQURxQixLQUFsQztBQUdBLFNBQUtRLFNBQUwsR0FBaUIsS0FBakI7QUFDSDtBQUVEOzs7OztBQUdBQyxTQUFPLEdBQUc7QUFDTixTQUFLYixnQkFBTCxDQUFzQkcsV0FBdEIsQ0FBa0M7QUFDOUJDLGFBQU8sRUFBRTtBQURxQixLQUFsQztBQUdBLFNBQUtRLFNBQUwsR0FBaUIsSUFBakI7QUFDSDtBQUVEOzs7Ozs7QUFJQUUsT0FBSyxHQUFHO0FBQ0osV0FBTyxLQUFLaEIsRUFBWjtBQUNIO0FBRUQ7Ozs7OztBQUlBaUIsU0FBTyxHQUFHO0FBQ04sV0FBTyxLQUFLcEIsSUFBWjtBQUNIOztBQXJGWTs7QUF3RkZGLG1FQUFmIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge3JhbmRvbVVVSUR9IGZyb20gJy4uL3V0aWxzL1V0aWxzLmpzJztcbmltcG9ydCB7REFUQV9TWU5DSFJPTklaRVJfVE9QSUMsIERBVEFTT1VSQ0VfREFUQV9UT1BJQ30gZnJvbSBcIi4uL0NvbnN0YW50c1wiO1xuXG4vKipcbiAqIFRoZSBEYXRhU291cmNlIGlzIHRoZSBhYnN0cmFjdCBjbGFzcyB1c2VkIHRvIGNyZWF0ZSBkaWZmZXJlbnQgZGF0YXNvdXJjZXMuXG4gKlxuICovXG5jbGFzcyBEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHByb3BlcnRpZXMudGltZVNoaWZ0IC0gZml4IHNvbWUgcHJvYmxlbSB3aXRoIHNvbWUgYW5kcm9pZCBkZXZpY2VzIHdpdGggc29tZSB0aW1lc3RhbXAgc2hpZnQgdG8gMTYgc2VjXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMuYnVmZmVyaW5nVGltZSAtIGRlZmluZXMgdGhlIHRpbWUgZHVyaW5nIHRoZSBkYXRhIGhhcyB0byBiZSBidWZmZXJlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLnRpbWVPdXQgLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCB0aGUgZW5kcG9pbnQgdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc2VydmljZSB0aGUgc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9mZmVyaW5nSUQgdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IHRoZSBvYnNlcnZlZCBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSB0aGUgc3RhcnQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRUaW1lIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvcGVydGllcy5yZXBsYXlTcGVlZCB0aGUgcmVwbGF5IGZhY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLnJlc3BvbnNlRm9ybWF0IHRoZSByZXNwb25zZSBmb3JtYXQgKGUuZyB2aWRlby9tcDQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMucmVjb25uZWN0VGltZW91dCAtIHRoZSB0aW1lb3V0IGJlZm9yZSByZWNvbm5lY3RpbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd29ya2VyIC0gRGF0YVNvdXJjZSB3b3JrZXJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBmdWxsIHVybFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMsIHdvcmtlcikge1xuICAgICAgICB0aGlzLmlkID0gXCJEYXRhU291cmNlLVwiICsgcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VXb3JrZXIgPSB3b3JrZXI7XG4gICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplciA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5pdERhdGFTb3VyY2UocHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdHMgdGhlIGRhdGFzb3VyY2Ugd2l0aCB0aGUgY29uc3RydWN0b3IgcHJvcGVydGllcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgaW5pdERhdGFTb3VyY2UocHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VXb3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgbWVzc2FnZTogJ2luaXQnLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBKU09OLnN0cmluZ2lmeShwcm9wZXJ0aWVzKSxcbiAgICAgICAgICAgIHRvcGljOiBEQVRBU09VUkNFX0RBVEFfVE9QSUMrdGhpcy5pZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXREYXRhU3luY2hyb25pemVyKGRhdGFTeW5jaHJvbml6ZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyID0gZGF0YVN5bmNocm9uaXplcjtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlV29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICd0b3BpYycsXG4gICAgICAgICAgICB0b3BpYzogREFUQV9TWU5DSFJPTklaRVJfVE9QSUMrdGhpcy5kYXRhU3luY2hyb25pemVyLmlkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3QgdGhlIGRhdGFTb3VyY2UgdGhlbiB0aGUgY29ubmVjdG9yIHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAgICovXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlV29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdkaXNjb25uZWN0J1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRoZSBkYXRhU291cmNlIHRoZW4gdGhlIGNvbm5lY3RvciB3aWxsIGJlIG9wZW5lZCBhcyB3ZWxsLlxuICAgICAqL1xuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZVdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnY29ubmVjdCdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhc291cmNlIGlkLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGRhdGFzb3VyY2UgaWRcbiAgICAgKi9cbiAgICBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YXNvdXJjZSBuYW1lLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGRhdGFzb3VyY2UgbmFtZVxuICAgICAqL1xuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhU291cmNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1);\n/* harmony import */ var leaflet__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(leaflet__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27);\n/* harmony import */ var leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(leaflet_dist_leaflet_css__WEBPACK_IMPORTED_MODULE_4__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends View\n * @example\n\n import LeafletView from \'osh/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView("",\n [{\n            styler :  pointMarker,\n            name : "Android Phone GPS",\n            entityId : androidEntity.id\n        },\n {\n     styler : new Polyline({\n         locationFunc : {\n             dataSourceIds : [androidPhoneGpsDataSource.getId()],\n             handler : function(rec) {\n                 return {\n                     x : rec.lon,\n                     y : rec.lat,\n                     z : rec.alt\n                 };\n             }\n         },\n         color : \'rgba(0,0,255,0.5)\',\n         weight : 10,\n         opacity : .5,\n         smoothFactor : 1,\n         maxPoints : 200\n     }),\n     name : "Android Phone GPS Path",\n     entityId : androidEntity.id\n }]\n );\n */\n\nclass LeafletView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {String} parentElementDivId - The div element to attach to\n   * @param {Object[]} viewItems - The initial view items to add\n   * @param {String} viewItems.name - The name of the view item\n   * @param {Styler} viewItems.styler - The styler object representing the view item\n   * @param {Object} options - the properties of the view\n   * @param {Boolean} options.autoZoomOnFirstMarker - auto zoom on the first added marker\n   * @param {Boolean} options.follow - follow the marker\n   * @param {Object} options.initialView - {lon:.., lat:..}\n   * @param {Object[]} options.overlayLayers - OpenLayers objects to use as overlay layer\n   * @param {Object[]} options.baseLayers - OpenLayers objects to use as base layer\n   *\n   */\n  constructor(parentElementDivId, viewItems, options) {\n    super(parentElementDivId, viewItems, options);\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    let initialView = {\n      location: new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.LatLng(0, 0),\n      zoom: 3\n    };\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options)) {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.initialView)) {\n        initialView = {\n          location: new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n\n    this.markers = {};\n    this.polylines = {};\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {Object} properties\n   * @param {Number} properties.lon\n   * @param {Number} properties.lat\n   * @param {String} properties.icon - the icon path\n   * @param {Integer[]} properties.iconAnchor - offset of the icon ex:[10,10]\n   * @param {String} properties.label - label of the tooltip\n   * @param {String} properties.description - description of the marker to display into the tooltip\n   * @param {String} properties.labelOffset - offset of the label of the tooltip\n   * @param {Number} properties.orientation - orientation of the icon in degree\n   * @return {string} the id of the new created marker\n   */\n\n\n  addMarker(properties) {\n    //create marker\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon\n      });\n      marker = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.marker([properties.lat, properties.lon], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.marker([properties.lat, properties.lon]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.name != null ? properties.name : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (name.length > 0 || desc.length > 0) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\');\n    }\n\n    marker.addTo(this.map);\n    marker.setRotationAngle(properties.orientation);\n    let id = "view-marker-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ "h"])();\n    this.markers[id] = marker;\n    let self = this;\n    marker._icon.id = id; // adds onclick event\n\n    marker.on(\'click\', function () {\n      let dataSourcesIds = [];\n      let entityId;\n\n      for (let stylerId in self.stylerToObj) {\n        if (self.stylerToObj[stylerId] === id) {\n          let styler = self.stylerIdToStyler[stylerId];\n          _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].fire(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EVENT.SELECT_VIEW, {\n            dataSourcesIds: dataSourcesIds.concat(styler.getDataSourcesIds()),\n            entityId: styler.viewItem.entityId\n          });\n          break;\n        }\n      }\n    });\n    return id;\n  }\n\n  removeViewItem(viewItem) {\n    const markerId = this.stylerToObj[viewItem.styler.id];\n    super.removeViewItem(viewItem);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(markerId)) {\n      let marker = this.markers[markerId];\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(marker)) {\n        this.map.removeLayer(marker);\n      }\n\n      delete this.markers[markerId];\n    }\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   * @param {Object[]} properties.locations - [{x, y}]\n   * @param {String} properties.color\n   * @param {Number} properties.weight\n   * @param {Number} properties.opacity\n   * * @param {Number} properties.smoothFactor\n   * @return {string} the id of the new created polyline\n   */\n\n\n  addPolyline(properties) {\n    let polylinePoints = [];\n\n    for (let i = 0; i < properties.locations.length; i++) {\n      polylinePoints.push(new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.LatLng(properties.locations[i].y, properties.locations[i].x));\n    } //create path\n\n\n    let polyline = new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    let id = "view-polyline-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ "h"])();\n    this.polylines[id] = polyline;\n    return id;\n  }\n  /**\n   * Updates the marker associated to the styler.\n   * @param {PointMarker} styler - The styler allowing the update of the marker\n   */\n\n\n  updateMarker(styler) {\n    let markerId = 0;\n\n    if (!(styler.getId() in this.stylerToObj)) {\n      // adds a new marker to the leaflet renderer\n      markerId = this.addMarker({\n        lat: styler.location.y,\n        lon: styler.location.x,\n        orientation: styler.orientation.heading,\n        color: styler.color,\n        icon: styler.icon,\n        iconAnchor: styler.iconAnchor,\n        label: styler.label,\n        labelColor: styler.labelColor,\n        labelSize: styler.labelSize,\n        labelOffset: styler.labelOffset,\n        name: styler.viewItem.name,\n        description: styler.viewItem.description\n      });\n      this.stylerToObj[styler.getId()] = markerId;\n    } else {\n      markerId = this.stylerToObj[styler.getId()];\n    }\n\n    let marker = this.markers[markerId]; // updates position\n\n    let lon = styler.location.x;\n    let lat = styler.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: styler.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(styler.orientation)) {\n      marker.setRotationAngle(styler.orientation.heading);\n    }\n\n    if (styler.icon !== null && marker._icon.iconUrl !== styler.icon) {\n      // updates icon\n      let markerIcon = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.icon({\n        iconAnchor: styler.iconAnchor,\n        iconUrl: styler.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n  }\n  /**\n   * Updates the polyline associated to the styler.\n   * @param {Polyline} styler - The styler allowing the update of the polyline\n   */\n\n\n  updatePolyline(styler) {\n    let polylineId = 0;\n\n    if (!(styler.getId() in this.stylerToObj)) {\n      // adds a new marker to the leaflet renderer\n      polylineId = this.addPolyline({\n        color: styler.color,\n        weight: styler.weight,\n        locations: styler.locations,\n        maxPoints: styler.maxPoints,\n        opacity: styler.opacity,\n        smoothFactor: styler.smoothFactor\n      });\n      this.stylerToObj[styler.getId()] = polylineId;\n    } else {\n      polylineId = this.stylerToObj[styler.getId()];\n    }\n\n    if (polylineId in this.polylines) {\n      let polyline = this.polylines[polylineId]; // removes the layer\n\n      this.map.removeLayer(polyline);\n      let polylinePoints = [];\n\n      for (let i = 0; i < styler.locations.length; i++) {\n        polylinePoints.push(new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.LatLng(styler.locations[i].y, styler.locations[i].x));\n      } //create path\n\n\n      polyline = new leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Polyline(polylinePoints, {\n        color: styler.color,\n        weight: styler.weight,\n        opacity: styler.opacity,\n        smoothFactor: styler.smoothFactor\n      }).addTo(this.map);\n      this.polylines[polylineId] = polyline;\n    }\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Map = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Marker.prototype._setPos;\n  let oldIE = leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet__WEBPACK_IMPORTED_MODULE_3___default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ __webpack_exports__["a"] = (LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _DataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);\n/* harmony import */ var _workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var _workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides generic parsing for JSON response.\n *\n * @extends DataSource\n * @example\n * import SweJson from \'osh/datareceiver/SweJson.js\';\n *\n * let androidPhoneGpsDataSource = new SweJson("android-GPS", {\n    protocol: "ws",\n    service: "SOS",\n    endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n    offeringID: "urn:android:device:060693280a28e015-sos",\n    observedProperty: "http://sensorml.com/ont/swe/property/Location",\n    startTime: "2015-02-16T07:58:00Z",\n    endTime: "2015-02-16T08:09:00Z",\n    replaySpeed: replayFactor+"",\n    bufferingTime: 1000,\n    timeShift: -16000\n  });\n */\n\nclass SweJson extends _DataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  constructor(name, properties) {\n    super(name, {\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SweJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9Td2VKc29uLmpzPzI4YjQiXSwibmFtZXMiOlsiU3dlSnNvbiIsIkRhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwicmVjb25uZWN0VGltZW91dCIsIlN3ZUpzb25Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkEsTUFBTUEsT0FBTixTQUFzQkMsOERBQXRCLENBQWlDO0FBQzdCQyxhQUFXLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQjtBQUMxQixVQUFNRCxJQUFOLEVBQVk7QUFDUkUsc0JBQWdCLEVBQUUsT0FBTyxDQURqQjtBQUNvQjtBQUM1QixTQUFHRDtBQUZLLEtBQVosRUFHRyxJQUFJRSxpRUFBSixFQUhIO0FBSUg7O0FBTjRCOztBQVNsQk4sZ0VBQWYiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuaW1wb3J0IERhdGFTb3VyY2UgZnJvbSAnLi9EYXRhU291cmNlLmpzJztcbmltcG9ydCBTd2VKc29uV29ya2VyIGZyb20gJy4vd29ya2Vycy9Td2VKc29uLndvcmtlci5qcyc7XG5cbi8qKlxuICogVGhpcyBkYXRhc291cmNlIHByb3ZpZGVzIGdlbmVyaWMgcGFyc2luZyBmb3IgSlNPTiByZXNwb25zZS5cbiAqXG4gKiBAZXh0ZW5kcyBEYXRhU291cmNlXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IFN3ZUpzb24gZnJvbSAnb3NoL2RhdGFyZWNlaXZlci9Td2VKc29uLmpzJztcbiAqXG4gKiBsZXQgYW5kcm9pZFBob25lR3BzRGF0YVNvdXJjZSA9IG5ldyBTd2VKc29uKFwiYW5kcm9pZC1HUFNcIiwge1xuICAgIHByb3RvY29sOiBcIndzXCIsXG4gICAgc2VydmljZTogXCJTT1NcIixcbiAgICBlbmRwb2ludFVybDogXCJzZW5zaWFzb2Z0Lm5ldDo4MTgxL3NlbnNvcmh1Yi9zb3NcIixcbiAgICBvZmZlcmluZ0lEOiBcInVybjphbmRyb2lkOmRldmljZTowNjA2OTMyODBhMjhlMDE1LXNvc1wiLFxuICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L0xvY2F0aW9uXCIsXG4gICAgc3RhcnRUaW1lOiBcIjIwMTUtMDItMTZUMDc6NTg6MDBaXCIsXG4gICAgZW5kVGltZTogXCIyMDE1LTAyLTE2VDA4OjA5OjAwWlwiLFxuICAgIHJlcGxheVNwZWVkOiByZXBsYXlGYWN0b3IrXCJcIixcbiAgICBidWZmZXJpbmdUaW1lOiAxMDAwLFxuICAgIHRpbWVTaGlmdDogLTE2MDAwXG4gIH0pO1xuICovXG5cbmNsYXNzIFN3ZUpzb24gZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHtcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgU3dlSnNvbldvcmtlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3ZUpzb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "4621193b6d6c61ed5bb9.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1N3ZUpzb24ud29ya2VyLmpzPzI4NDMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0NjIxMTkzYjZkNmM2MWVkNWJiOS53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _DataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);\n/* harmony import */ var _workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21);\n/* harmony import */ var _workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides parsing to H264 raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import Video from \'osh/datareceiver/Video.js\';\n *\n * var videoDataSource = new Video("H264 video ", {\n        protocol: "ws",\n        service: "SOS",\n        endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n        offeringID: "urn:android:device:a0e0eac2fea3f614-sos",\n        observedProperty: "http://sensorml.com/ont/swe/property/VideoFrame",\n        startTime: "2016-08-11T20:17:30.402Z",\n        endTime: "2016-08-11T20:18:05.451Z",\n        replaySpeed: 1,\n        syncMasterTime: false,\n        bufferingTime: 1000\n  });\n */\n\nclass Video extends _DataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   */\n  constructor(name, properties) {\n    super(name, {\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Video);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9WaWRlby5qcz8xYWFiIl0sIm5hbWVzIjpbIlZpZGVvIiwiRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJyZWNvbm5lY3RUaW1lb3V0IiwiVmlkZW9Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEsTUFBTUEsS0FBTixTQUFvQkMsOERBQXBCLENBQStCO0FBQzNCOzs7Ozs7OztBQVFBQyxhQUFXLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQjtBQUMxQixVQUFNRCxJQUFOLEVBQVk7QUFDUkUsc0JBQWdCLEVBQUUsT0FBTyxDQURqQjtBQUNvQjtBQUM1QixTQUFHRDtBQUZLLEtBQVosRUFHRyxJQUFJRSwrREFBSixFQUhIO0FBSUg7O0FBZDBCOztBQWlCZk4sOERBQWhCIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgRGF0YVNvdXJjZSBmcm9tICcuL0RhdGFTb3VyY2UuanMnO1xuaW1wb3J0IFZpZGVvV29ya2VyIGZyb20gXCIuL3dvcmtlcnMvVmlkZW8ud29ya2VyLmpzXCI7XG5cbi8qKlxuICogVGhpcyBkYXRhc291cmNlIHByb3ZpZGVzIHBhcnNpbmcgdG8gSDI2NCByYXcgZGF0YS5cbiAqIERhdGE6IEFycmF5QnVmZmVyXG4gKiBAZXh0ZW5kcyBEYXRhU291cmNlXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IFZpZGVvIGZyb20gJ29zaC9kYXRhcmVjZWl2ZXIvVmlkZW8uanMnO1xuICpcbiAqIHZhciB2aWRlb0RhdGFTb3VyY2UgPSBuZXcgVmlkZW8oXCJIMjY0IHZpZGVvIFwiLCB7XG4gICAgICAgIHByb3RvY29sOiBcIndzXCIsXG4gICAgICAgIHNlcnZpY2U6IFwiU09TXCIsXG4gICAgICAgIGVuZHBvaW50VXJsOiBcInNlbnNpYXNvZnQubmV0OjgxODEvc2Vuc29yaHViL3Nvc1wiLFxuICAgICAgICBvZmZlcmluZ0lEOiBcInVybjphbmRyb2lkOmRldmljZTphMGUwZWFjMmZlYTNmNjE0LXNvc1wiLFxuICAgICAgICBvYnNlcnZlZFByb3BlcnR5OiBcImh0dHA6Ly9zZW5zb3JtbC5jb20vb250L3N3ZS9wcm9wZXJ0eS9WaWRlb0ZyYW1lXCIsXG4gICAgICAgIHN0YXJ0VGltZTogXCIyMDE2LTA4LTExVDIwOjE3OjMwLjQwMlpcIixcbiAgICAgICAgZW5kVGltZTogXCIyMDE2LTA4LTExVDIwOjE4OjA1LjQ1MVpcIixcbiAgICAgICAgcmVwbGF5U3BlZWQ6IDEsXG4gICAgICAgIHN5bmNNYXN0ZXJUaW1lOiBmYWxzZSxcbiAgICAgICAgYnVmZmVyaW5nVGltZTogMTAwMFxuICB9KTtcbiAqL1xuY2xhc3MgVmlkZW8gZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHByb3BlcnRpZXMudGltZVNoaWZ0IC0gZml4IHNvbWUgcHJvYmxlbSB3aXRoIHNvbWUgYW5kcm9pZCBkZXZpY2VzIHdpdGggc29tZSB0aW1lc3RhbXAgc2hpZnQgdG8gMTYgc2VjXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMuYnVmZmVyaW5nVGltZSAtIGRlZmluZXMgdGhlIHRpbWUgZHVyaW5nIHRoZSBkYXRhIGhhcyB0byBiZSBidWZmZXJlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLnRpbWVPdXQgLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHtcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgVmlkZW9Xb3JrZXIoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAgVmlkZW87XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "5abf79a0ccd651b59a4f.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1ZpZGVvLndvcmtlci5qcz8zZTljIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLFNBQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNWFiZjc5YTBjY2Q2NTFiNTlhNGYud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * @extends View\n * @example\n *\nimport MjpegView from \'osh/ui/view/video/MjpegView.js\';\n\nvar videoView = new MjpegView("containerId", {\n    dataSourceId: datasource.id,\n    entity : entity,\n    css: "video",\n    cssSelected: "video-selected",\n    name: "Video"\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {String} parentElementDivId - The div element to attach to\n   * @param {Object} options - the properties of the view\n   * @param {String} options.dataSourceId - The dataSource id of the dataSource providing data to the view\n   * @param {String} options.entityId - The entity id to which the view belongs to\n   * @param {String} options.showTime - Display or not the time onto the view\n   * @param {String} options.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(parentElementDivId, options) {\n    super(parentElementDivId, [], options); // create timestamp slot\n\n    this.timeStamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.showTime) && options.showTime) {\n      this.timeStamp = document.createElement("div");\n      this.timeStamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timeStamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof options != "undefined" && typeof options.rotation != "undefined") {\n      this.rotation = options.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    } // adds listener\n\n\n    let self = this;\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].observeDiv(this.divId, "click", event => {\n      _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].fire(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EVENT.SELECT_VIEW, {\n        dataSourcesIds: [self.dataSourceId],\n        entityId: self.entityId\n      });\n    });\n  }\n\n  setData(dataSourceId, data) {\n    let imgBlob = new Blob([data.data.frameData]);\n    let url = window.URL.createObjectURL(imgBlob);\n    let oldBlobURL = this.imgTag.src;\n    this.imgTag.src = url;\n\n    if (this.timeStamp !== null) {\n      this.timeStamp.innerHTML = new Date(data.timeStamp).toISOString();\n    }\n\n    window.URL.revokeObjectURL(oldBlobURL);\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventManager.js + 1 modules\nvar EventManager = __webpack_require__(2);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/styler/Styler.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is in charge of defining a Styler object.\n */\n\nclass Styler_Styler {\n  /**\n   *\n   * @param {Object[]} jsonProperties - contains a list of Functions\n   */\n  constructor(jsonProperties) {\n    this.properties = jsonProperties;\n    this.id = "styler-" + Object(Utils["h" /* randomUUID */])();\n    this.dataSourceToStylerMap = {};\n    this.initEvents();\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n    let isSet = Object(Utils["f" /* hasValue */])(func);\n\n    if (isSet) {\n      Object(Utils["a" /* assertArray */])(func.dataSourceIds, funcName + ".dataSourceIds");\n      Object(Utils["b" /* assertFunction */])(func.handler, funcName + ".handler");\n    }\n\n    return isSet;\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {\n    var that = this;\n    EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.DATASOURCE_UPDATE_TIME, event => that.clear());\n  }\n  /**\n   * Clear the styler.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the styler id.\n   * @return {String} the styler id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(Utils["g" /* isDefined */])(this.dataSourceToStylerMap[dataSourceId])) {\n        this.dataSourceToStylerMap[dataSourceId] = [];\n      }\n\n      this.dataSourceToStylerMap[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param rec\n   * @param view\n   * @param options\n   * @return {Boolean}\n   */\n\n\n  setData(dataSourceId, rec, view, options) {\n    if (dataSourceId in this.dataSourceToStylerMap) {\n      let fnArr = this.dataSourceToStylerMap[dataSourceId];\n\n      for (let i = 0; i < fnArr.length; i++) {\n        fnArr[i](rec.data, rec.timeStamp, options);\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    let res = [];\n\n    for (let i in this.dataSourceToStylerMap) {\n      res.push(i);\n    }\n\n    return res;\n  }\n  /**\n   * Inits the styler.\n   */\n\n\n  init() {}\n\n}\n\n/* harmony default export */ var styler_Styler = (Styler_Styler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/styler/PointMarker.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Styler\n * @example\n *\n * import PointMarker from \'osh/ui/styler/PointMarker.js\';\n *\n * let pointMarker = new PointMarker({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        locationFunc : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        orientationFunc : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        iconFunc : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarker_PointMarker extends styler_Styler {\n  /**\n  \t* Create the PointMarker\n  \t* @param {Object} properties\n  \t* @param {Number[]} properties.location - [x,y,z]\n   \t\t* @param {Number} [properties.orientation=0] -\n  \t* @param {String} properties.icon -\n  \t* @param {Number[]} [properties.iconAnchor=[16,16]] -\n  \t* @param {Number[]} [properties.iconSize=[16,16]] -\n  \t* @param {String} properties.label -\n  \t* @param {String} [properties.labelColor="#000000"] - HTML color\n  \t* @param {Number} [properties.labelSize=16] -\n  \t* @param {Number[]} [properties.labelOffset=[0,0]] -\n  \t* @param {Function} properties.locationFunc -\n  \t* @param {Function} properties.orientationFunc -\n  \t* @param {Function} properties.iconFunc -\n  \t* @param {Function} properties.labelFunc -\n  \t* @param {Function} properties.labelColorFunc -\n  \t* @param {Function} properties.labelSizeFunc -\n   \t* @param {Number} [properties.zoomLevel=15] -\n  \t*\n  \t*/\n  constructor(properties) {\n    super(properties);\n    this.properties = properties;\n    this.location = null;\n    this.orientation = {\n      heading: 0\n    };\n    this.icon = null;\n    this.iconAnchor = [16, 16];\n    this.iconSize = [16, 16];\n    this.label = null;\n    this.labelColor = "#000000";\n    this.labelSize = 16;\n    this.labelOffset = [0, 0];\n    this.zoomLevel = 15;\n    this.color = null;\n    this.defaultToTerrainElevation = false;\n    this.options = {};\n\n    if (Object(Utils["g" /* isDefined */])(properties.defaultToTerrainElevation)) {\n      this.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.location)) {\n      Object(Utils["c" /* assertObject */])(properties.location, "location");\n      this.location = properties.location;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.orientation)) {\n      Object(Utils["c" /* assertObject */])(properties.orientation, "orientation");\n      this.orientation = properties.orientation;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.icon)) {\n      Object(Utils["e" /* assertString */])(properties.icon, "icon");\n      this.icon = properties.icon;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.iconAnchor)) {\n      Object(Utils["a" /* assertArray */])(properties.iconAnchor, "iconAnchor");\n      this.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.iconSize)) {\n      Object(Utils["a" /* assertArray */])(properties.iconSize, "iconSize");\n      this.iconSize = properties.iconSize;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.label)) {\n      Object(Utils["e" /* assertString */])(properties.label, "label");\n      this.label = properties.label;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.labelColor)) {\n      Object(Utils["e" /* assertString */])(properties.labelColor, "labelColor");\n      this.labelColor = properties.labelColor;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.labelSize)) {\n      Object(Utils["d" /* assertPositive */])(properties.labelSize, "labelSize");\n      this.labelSize = properties.labelSize;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.labelOffset)) {\n      Object(Utils["a" /* assertArray */])(properties.labelOffset, "labelOffset");\n      this.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.zoomLevel)) {\n      Object(Utils["d" /* assertPositive */])(properties.zoomLevel, "zoomLevel");\n      this.zoomLevel = properties.zoomLevel;\n    }\n\n    let that = this;\n\n    if (this.checkFn("locationFunc")) {\n      let fn = function (rec, timeStamp, options) {\n        that.location = properties.locationFunc.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.locationFunc.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("orientationFunc")) {\n      let fn = function (rec, timeStamp, options) {\n        that.orientation = properties.orientationFunc.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.orientationFunc.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("iconFunc")) {\n      let fn = function (rec, timeStamp, options) {\n        that.icon = properties.iconFunc.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.iconFunc.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("labelFunc")) {\n      let fn = function (rec, timeStamp, options) {\n        that.label = properties.labelFunc.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.labelFunc.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("labelColorFunc")) {\n      let fn = function (rec, timeStamp, options) {\n        that.labelColor = properties.labelColorFunc.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.labelColorFunc.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("labelSizeFunc")) {\n      let fn = function (rec, timeStamp, options) {\n        that.labelSize = properties.labelSizeFunc.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.labelSizeFunc.dataSourceIds, fn);\n    }\n  }\n\n  init(view) {\n    super.init(view);\n\n    if (Object(Utils["g" /* isDefined */])(view) && this.location !== null) {\n      view.updateMarker(this, 0, {});\n    }\n  }\n\n  setData(dataSourceId, rec, view, options) {\n    if (super.setData(dataSourceId, rec, view, options)) {\n      if (Object(Utils["g" /* isDefined */])(view) && this.location !== null) {\n        view.updateMarker(this, rec.timeStamp, options);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\n/* harmony default export */ var styler_PointMarker = __webpack_exports__["a"] = (PointMarker_PointMarker);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(26);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"c3cc55b4\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/OTViOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFzRztBQUM1SCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTJHO0FBQzdILCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJjM2NjNTViNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/NWEyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQWlHO0FBQzNJO0FBQ0E7QUFDQSxjQUFjLFFBQVMsY0FBYyxpQkFBaUIsbUJBQW1CLEdBQUc7QUFDNUU7QUFDQSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm9zaC12aWV3IHtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n')}]]);