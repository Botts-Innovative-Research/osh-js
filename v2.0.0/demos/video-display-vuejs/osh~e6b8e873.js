(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return hasValue; });\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* unused harmony export isFunction */\n/* unused harmony export assertDefined */\n/* unused harmony export assertType */\n/* unused harmony export assertBoolean */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertString; });\n/* unused harmony export assertNumber */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventMap.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is responsible for observing and firing events. It used an object as backed data structure.\n */\n\nclass EventMap_EventMap {\n  constructor() {\n    this.eventMap = {};\n  }\n\n  remove(eventName, id) {\n    if (eventName in this.eventMap) {\n      this.eventMap[eventName] = this.eventMap[eventName].filter(obj => obj.id !== id);\n    }\n  }\n\n  removeById(id) {\n    for (let eventName in this.eventMap) {\n      this.eventMap[eventName] = this.eventMap[eventName].filter(obj => obj.id !== id);\n    }\n  }\n  /**\n   * Observes any eventName and calls the callback when the event is fired.\n   * @param {String} eventName -\n   * @param {Function} fnCallback -\n   * @param {String} id - id of the div to observe\n   */\n\n\n  observe(eventName, fnCallback, id = \'any\') {\n    if (!Object(Utils["g" /* isDefined */])(eventName) || !Object(Utils["g" /* isDefined */])(fnCallback) || !Object(Utils["g" /* isDefined */])(id)) {\n      return;\n    }\n\n    if (!(eventName in this.eventMap)) {\n      this.eventMap[eventName] = [];\n    }\n\n    this.eventMap[eventName].push({\n      fn: fnCallback,\n      id: id\n    });\n  }\n  /**\n   * Fires an event\n   * @param {String} eventName -\n   * @param {Object} properties -\n   */\n\n\n  fire(eventName, properties) {\n    if (!Object(Utils["g" /* isDefined */])(eventName)) {\n      return;\n    }\n\n    if (eventName in this.eventMap) {\n      let fnCallbackArr = this.eventMap[eventName];\n\n      for (let i = 0; i < fnCallbackArr.length; i++) {\n        // callback the properties to the current callback\n        fnCallbackArr[i].fn(properties);\n      }\n    }\n  }\n\n}\n\n/* harmony default export */ var events_EventMap = (EventMap_EventMap);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventManager.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nconst eventMap = new events_EventMap();\n/**\n * This class is response for handling events and acts as an event bus.\n */\n\nclass EventManager {\n  static remove(eventName, id = \'any\') {\n    eventMap.remove(\'osh:\' + eventName, id);\n  }\n\n  static removeById(id = \'any\') {\n    eventMap.removeById(id);\n  }\n\n  static registerView(view) {\n    view.registerCallback();\n  }\n\n  static unregisterView(view) {\n    view.unregisterCallback();\n  }\n  /**\n   * Fires an event\n   * @param {String} eventName -\n   * @param {Object} properties -\n   */\n\n\n  static fire(eventName, properties) {\n    properties.name = eventName;\n    eventMap.fire(\'osh:\' + eventName, properties);\n  }\n  /**\n   * Observes any eventName and calls the callback when the event is fired.\n   * @param {String} eventName -\n   * @param {Function} fnCallback -\n   */\n\n\n  static observe(eventName, fnCallback, id = \'any\') {\n    eventMap.observe(\'osh:\' + eventName, fnCallback, id);\n  }\n  /**\n   * Observes eventName attached to a div element  and calls the callback when the event is fired.\n   * @param {String} divId -\n   * @param {String} eventName -\n   * @param {Function} fnCallback -\n   */\n\n\n  static observeDiv(divId, eventName, fnCallback) {\n    let elem = document.getElementById(divId); // use native dom event listener\n\n    elem.addEventListener(eventName, fnCallback);\n  }\n  /**\n   * This part defines the events used INTO the API\n   * @const\n   * @type {{DATA: string, SYNC_DATA: string, SELECT_VIEW: string, CONTEXT_MENU: string, SHOW_VIEW: string, CONNECT_DATASOURCE: string, DISCONNECT_DATASOURCE: string, DATASOURCE_UPDATE_TIME: string, CURRENT_MASTER_TIME: string, UAV_TAKEOFF: string, UAV_GOTO: string, UAV_LOOKAT: string, UAV_LAND: string, UAV_ORBIT: string, LOADING_START: string, LOADING_STOP: string, ADD_VIEW_ITEM: string}}\n   */\n\n\n  static get EVENT() {\n    return {\n      SELECT_VIEW: "selectView",\n      SHOW_VIEW: "showView",\n      UAV_TAKEOFF: "uav:takeoff",\n      UAV_GOTO: "uav:goto",\n      UAV_LOOKAT: "uav:lookat",\n      UAV_LAND: "uav:land",\n      UAV_ORBIT: "uav:orbit",\n      LOADING_START: "loading:start",\n      LOADING_STOP: "loading:stop",\n      ADD_VIEW_ITEM: "addViewItem",\n      RESIZE: "resize",\n      PTZ_SEND_REQUEST: "ptzSendRequest"\n    };\n  }\n\n}\n\n/* harmony default export */ var events_EventManager = __webpack_exports__["a"] = (EventManager);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL0NvbnN0YW50cy5qcz9kYmY3Il0sIm5hbWVzIjpbIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBTyxNQUFNQSx1QkFBdUIsR0FBRyxvQkFBaEM7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxrQkFBOUI7QUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxnQkFBakMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventManager.js + 1 modules\nvar EventManager = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/resources/css/view.css\nvar view = __webpack_require__(25);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/Constants.js\nvar Constants = __webpack_require__(6);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Status.js\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/event/EventType.js\nconst EventType = {\n  DATA: \'data\',\n  STATUS: \'status\'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/View.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n * @param {Object} parentElementDivId - The parent html element div id to attach/or create the view.\n * @param {String} viewItems - The list of view items\n * @param {String} options - The options\n */\n\n\n\n\n\n\n\nclass View_View {\n  /**\n   * Create a View.\n   * @param {String} parentElementDivId - The div element to attach to\n   * @param {Object[]}  [viewItems=[]] - The initial view items to add\n   * @param {String} [viewItems.name] - The name of the view item\n   * @param {Layer} viewItems.layer - The layer object representing the view item\n   * @param {Object} [options={}] - the properties of the view\n   * @param {String} [options.dataSourceId] - The dataSource id of the dataSource providing data to the view\n   * @param {Entity} [options.entity] - The entity to which the view belongs to\n   */\n  constructor(parentElementDivId, viewItems, options) {\n    // list of layers\n    this.layers = [];\n    this.viewItems = [];\n    this.names = {};\n    this.lastRec = {};\n    this.selectedDataSources = [];\n    this.dataSources = [];\n    this.entity = null; //this.divId = divId;\n\n    this.id = "view-" + Object(Utils["h" /* randomUUID */])();\n    this.entity = null;\n    this.dataSourceId = -1; // sets dataSourceId\n\n    if (Object(Utils["g" /* isDefined */])(options) && Object(Utils["g" /* isDefined */])(options.dataSourceId)) {\n      this.dataSourceId = options.dataSourceId;\n    }\n\n    if (Object(Utils["g" /* isDefined */])(options) && Object(Utils["g" /* isDefined */])(options.entity)) {\n      this.entity = options.entity;\n    }\n\n    this.css = "";\n    this.cssSelected = "";\n\n    if (Object(Utils["g" /* isDefined */])(options) && Object(Utils["g" /* isDefined */])(options.css)) {\n      this.css = options.css;\n    }\n\n    if (Object(Utils["g" /* isDefined */])(options) && Object(Utils["g" /* isDefined */])(options.cssSelected)) {\n      this.cssSelected = options.cssSelected;\n    } // inits the view before adding the viewItem\n\n\n    this.init(parentElementDivId, viewItems, options);\n  }\n  /**\n   * Inits the view component.\n   * @param parentElementDivId The parent html element object to attach/create the view\n   * @param viewItems the list of items to add\n   * @param options [TODO]\n   * @memberof View\n   */\n\n\n  init(parentElementDivId, viewItems, options) {\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let div = document.getElementById(parentElementDivId);\n\n    if (!Object(Utils["g" /* isDefined */])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(options);\n\n    if (Object(Utils["g" /* isDefined */])(viewItems)) {\n      for (let i = 0; i < viewItems.length; i++) {\n        this.addViewItem(viewItems[i]);\n      }\n    }\n\n    if (Object(Utils["g" /* isDefined */])(options)) {\n      if (Object(Utils["g" /* isDefined */])(options.show)) {\n        document.getElementById(this.divId).style.display = options.show ? "block" : "none";\n      }\n    }\n\n    this.handleEvents();\n    var that = this; // observes the event associated to the dataSourceId\n\n    this.registerCallback();\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too? You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(Utils["g" /* isDefined */])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n\n  registerCallback() {\n    if (Object(Utils["g" /* isDefined */])(this.dataSourceId) || Object(Utils["g" /* isDefined */])(this.entity)) {\n      const that = this;\n\n      function registerDs(dataSourceId) {\n        const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n        broadcastChannel.onmessage = event => {\n          if (event.data.message && event.data.message === \'reset\') {\n            that.reset(); // on data stream reset\n          } else {\n            if (event.data.type === EventType.DATA) {\n              that.setData(dataSourceId, event.data.values);\n            } else if (event.data.type === EventType.STATUS && event.data.status === Status.DISCONNECTED) {\n              that.reset();\n            }\n          }\n        };\n      }\n\n      if (this.entity !== null) {\n        for (let dataSource of this.entity.getDataSources()) {\n          registerDs(dataSource.id);\n        }\n      } else {\n        registerDs(this.dataSourceId);\n      }\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  unregisterCallback() {\n    EventManager["a" /* default */].removeById(this.divId);\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(Utils["g" /* isDefined */])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {\n    this.unregisterCallback();\n  }\n  /**\n   * Adds a viewItem to the view. A broadcastChannel is going to listen the new dataSources\n   * and EventManager.EVENT.SELECT_VIEW are then observed using the\n   * dataSource(s) contained into the layer.\n   * @param {Object} viewItem - The initial view items to add\n   * @param {String} viewItem.name - The name of the view item\n   * @param {Layer} viewItem.layer - The layer object representing the view item\n   */\n\n\n  addViewItem(viewItem) {\n    this.viewItems.push(viewItem);\n\n    if (viewItem.hasOwnProperty("layer")) {\n      let layer = viewItem.layer;\n      this.layers.push(layer);\n\n      if (viewItem.hasOwnProperty("name")) {\n        this.names[layer.markerId] = viewItem.name;\n      }\n\n      layer.viewItem = viewItem;\n      layer.init(this); //for(let dataSourceId in layer.dataSourceToLayerMap) {\n\n      let ds = layer.getDataSourcesIds();\n\n      for (let i = 0; i < ds.length; i++) {\n        const dataSourceId = ds[i]; // observes the data come in\n\n        let self = this;\n        const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n        broadcastChannel.onmessage = event => {\n          // skip data reset events for now\n          if (event.data.type === EventType.STATUS && event.data.status === Status.DISCONNECTED) {\n            return;\n          } // we check selected dataSource only when the selected entity is not set\n\n\n          let selected = false;\n\n          if (Object(Utils["g" /* isDefined */])(self.selectedEntity)) {\n            selected = viewItem.entityId === self.selectedEntity;\n          } else {\n            selected = self.selectedDataSources.indexOf(dataSourceId) > -1;\n          } //TODO: maybe done into the layer?\n\n\n          if (event.data.type === EventType.DATA) {\n            layer.setData(dataSourceId, event.data, self, {\n              selected: selected\n            });\n            self.lastRec[dataSourceId] = event.data;\n          }\n        };\n\n        EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.SELECT_VIEW, event => {\n          // we check selected dataSource only when the selected entity is not set\n          let selected = false;\n\n          if (Object(Utils["g" /* isDefined */])(event.entityId)) {\n            selected = viewItem.entityId === event.entityId;\n          } else {\n            selected = event.dataSourcesIds.indexOf(dataSourceId) > -1;\n          }\n\n          if (dataSourceId in self.lastRec) {\n            layer.setData(dataSourceId, self.lastRec[dataSourceId], self, {\n              selected: selected\n            });\n          }\n        }, this.divId);\n      }\n    }\n  }\n  /**\n   * Removes a view item from the view.\n   * @param {Object} viewItem - The initial view items to add\n   * @param {String} viewItem.name - The name of the view item\n   * @param {Layer} viewItem.layer - The layer object representing the view item\n   */\n\n\n  removeViewItem(viewItem) {\n    if (this.viewItems.includes(viewItem)) {\n      // 1) remove from STYLER fn\n      for (let ds in viewItem.layer.dataSourceToLayerMap) {\n        delete this.lastRec[ds];\n      }\n\n      this.viewItems = this.viewItems.filter(currentViewItem => currentViewItem !== viewItem);\n    }\n\n    this.layers = this.layers.filter(currentLayer => currentLayer.id !== viewItem.layer.id);\n    delete this.names[viewItem.layer.markerId];\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeViewItems() {\n    for (const viewItem of this.viewItems) {\n      this.removeViewItem(viewItem);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  handleEvents() {\n    var that = this; // observes the selected event\n\n    EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.SELECT_VIEW, event => that.selectDataView(event.dataSourcesIds, event.entityId), this.divId); // observes the SHOW event\n\n    EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.SHOW_VIEW, event => that.show(event), this.divId); //\n\n    EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.ADD_VIEW_ITEM, event => {\n      if (Object(Utils["g" /* isDefined */])(event.viewId) && event.viewId === that.id) {\n        that.addViewItem(event.viewItem);\n      }\n    }, this.divId);\n    EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.RESIZE + "-" + this.divId, event => that.onResize(), this.divId);\n  }\n  /**\n   * Selects the view by setting the current selected entity and dataSource.\n   * @param  {String} dataSourcesIds - The dataSource id\n   * @param {String} entityId - The entity id\n   */\n\n\n  selectDataView(dataSourcesIds, entityId) {\n    if (Object(Utils["g" /* isDefined */])(this.dataSources)) {\n      this.selectedDataSources = dataSourcesIds; // set the selected entity even if it is undefined\n      // this is handled by the setData function\n\n      this.selectedEntity = entityId;\n\n      for (let j = 0; j < this.dataSources.length; j++) {\n        this.setData(this.dataSources[j], this.lastRec[this.dataSources[j]]);\n      }\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = [];\n\n    if (this.dataSourceId !== -1) {\n      res.push(this.dataSourceId);\n    } // check for layers\n\n\n    for (let i = 0; i < this.viewItems.length; i++) {\n      let viewItem = this.viewItems[i];\n\n      if (viewItem.hasOwnProperty("layer")) {\n        let layer = viewItem.layer;\n        res = res.concat(layer.getDataSourcesIds());\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {}\n\n}\n\n/* harmony default export */ var view_View = __webpack_exports__["a"] = (View_View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    this.id = \"DataSource-\" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ \"h\"])();\n    this.name = name;\n    this.properties = {\n      fetch: 1,\n      // default value if not defined\n      ...properties\n    };\n    this.dataSourceWorker = worker;\n    this.dataSynchronizer = null;\n    this.currentRunningProperties = {};\n    this.initDataSource(properties);\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @private\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    this.dataSourceWorker.postMessage({\n      message: 'init',\n      id: this.id,\n      properties: JSON.stringify(properties),\n      topic: _Constants__WEBPACK_IMPORTED_MODULE_1__[/* DATASOURCE_DATA_TOPIC */ \"a\"] + this.id\n    });\n  }\n\n  setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    this.dataSourceWorker.postMessage({\n      message: 'topic',\n      topic: _Constants__WEBPACK_IMPORTED_MODULE_1__[/* DATA_SYNCHRONIZER_TOPIC */ \"b\"] + this.dataSynchronizer.id\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   */\n\n\n  setTimeRange(startTime, endTime, replaySpeed) {\n    this.updateUrl({ ...this.currentRunningProperties,\n      startTime: startTime,\n      endTime: endTime,\n      replaySpeed: replaySpeed\n    });\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"g\"])(this.properties.replaySpeed) ? this.properties.replaySpeed : 1;\n  }\n  /**\n   * Disconnect the dataSource then the connector will be closed as well.\n   */\n\n\n  disconnect() {\n    this.dataSourceWorker.postMessage({\n      message: 'disconnect'\n    });\n  }\n  /**\n   * Connect the dataSource then the connector will be opened as well.\n   */\n\n\n  async connect() {\n    this.dataSourceWorker.postMessage({\n      message: 'connect'\n    });\n    return this.isConnected();\n  }\n\n  async isConnected() {\n    const promise = new Promise(resolve => {\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.onmessage = event => {\n          if (event.data.message === 'is-connected') {\n            resolve(event.data.data);\n          }\n        };\n      }\n    });\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: 'is-connected'\n      });\n    }\n\n    return promise;\n  }\n\n  async getCurrentTime() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"g\"])(this.dataSynchronizer)) {\n      return this.dataSynchronizer.getCurrentTime();\n    } else {\n      const promise = new Promise(resolve => {\n        if (this.dataSourceWorker !== null) {\n          this.dataSourceWorker.onmessage = event => {\n            if (event.data.message === 'last-timestamp') {\n              resolve(event.data.data);\n            }\n          };\n        }\n      });\n\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.postMessage({\n          message: 'last-timestamp'\n        });\n      }\n\n      return promise;\n    }\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay speed\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateUrl(properties) {\n    // save current running properties\n    this.currentRunningProperties = { ...this.properties,\n      ...properties\n    };\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: 'update-url',\n        data: properties\n      });\n    }\n  }\n\n  getCurrentRunningProperties() {\n    return this.currentRunningProperties;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DataSource);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9EYXRhU291cmNlLmpzPzE2ZWMiXSwibmFtZXMiOlsiRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJ3b3JrZXIiLCJpZCIsInJhbmRvbVVVSUQiLCJmZXRjaCIsImRhdGFTb3VyY2VXb3JrZXIiLCJkYXRhU3luY2hyb25pemVyIiwiY3VycmVudFJ1bm5pbmdQcm9wZXJ0aWVzIiwiaW5pdERhdGFTb3VyY2UiLCJwb3N0TWVzc2FnZSIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwidG9waWMiLCJEQVRBU09VUkNFX0RBVEFfVE9QSUMiLCJzZXREYXRhU3luY2hyb25pemVyIiwiREFUQV9TWU5DSFJPTklaRVJfVE9QSUMiLCJzZXRUaW1lUmFuZ2UiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwicmVwbGF5U3BlZWQiLCJ1cGRhdGVVcmwiLCJnZXRTdGFydFRpbWUiLCJnZXRFbmRUaW1lIiwiZ2V0UmVwbGF5U3BlZWQiLCJpc0RlZmluZWQiLCJkaXNjb25uZWN0IiwiY29ubmVjdCIsImlzQ29ubmVjdGVkIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwib25tZXNzYWdlIiwiZXZlbnQiLCJkYXRhIiwiZ2V0Q3VycmVudFRpbWUiLCJnZXRJZCIsImdldE5hbWUiLCJnZXRDdXJyZW50UnVubmluZ1Byb3BlcnRpZXMiLCJ0ZXJtaW5hdGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsVUFBTixDQUFpQjtBQUNiO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsYUFBVyxDQUFDQyxJQUFELEVBQU9DLFVBQVAsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ2xDLFNBQUtDLEVBQUwsR0FBVSxnQkFBZ0JDLDBFQUFVLEVBQXBDO0FBQ0EsU0FBS0osSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQjtBQUNkSSxXQUFLLEVBQUUsQ0FETztBQUNKO0FBQ1YsU0FBR0o7QUFGVyxLQUFsQjtBQUlBLFNBQUtLLGdCQUFMLEdBQXdCSixNQUF4QjtBQUNBLFNBQUtLLGdCQUFMLEdBQXdCLElBQXhCO0FBQ0EsU0FBS0Msd0JBQUwsR0FBZ0MsRUFBaEM7QUFDQSxTQUFLQyxjQUFMLENBQW9CUixVQUFwQjtBQUNIO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0lRLGdCQUFjLENBQUNSLFVBQUQsRUFBYTtBQUN2QixTQUFLSyxnQkFBTCxDQUFzQkksV0FBdEIsQ0FBa0M7QUFDOUJDLGFBQU8sRUFBRSxNQURxQjtBQUU5QlIsUUFBRSxFQUFFLEtBQUtBLEVBRnFCO0FBRzlCRixnQkFBVSxFQUFFVyxJQUFJLENBQUNDLFNBQUwsQ0FBZVosVUFBZixDQUhrQjtBQUk5QmEsV0FBSyxFQUFFQyx3RUFBcUIsR0FBQyxLQUFLWjtBQUpKLEtBQWxDO0FBTUg7O0FBRURhLHFCQUFtQixDQUFDVCxnQkFBRCxFQUFtQjtBQUNsQyxTQUFLQSxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0EsU0FBS0QsZ0JBQUwsQ0FBc0JJLFdBQXRCLENBQWtDO0FBQzlCQyxhQUFPLEVBQUUsT0FEcUI7QUFFOUJHLFdBQUssRUFBRUcsMEVBQXVCLEdBQUMsS0FBS1YsZ0JBQUwsQ0FBc0JKO0FBRnZCLEtBQWxDO0FBSUg7QUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNJZSxjQUFZLENBQUNDLFNBQUQsRUFBWUMsT0FBWixFQUFxQkMsV0FBckIsRUFBa0M7QUFDMUMsU0FBS0MsU0FBTCxDQUFlLEVBQ1gsR0FBRyxLQUFLZCx3QkFERztBQUVYVyxlQUFTLEVBQUVBLFNBRkE7QUFHWEMsYUFBTyxFQUFFQSxPQUhFO0FBSVhDLGlCQUFXLEVBQUVBO0FBSkYsS0FBZjtBQU1IO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7OztBQUNJRSxjQUFZLEdBQUc7QUFDWCxXQUFPLEtBQUt0QixVQUFMLENBQWdCa0IsU0FBdkI7QUFDSDtBQUVEO0FBQ0o7QUFDQTtBQUNBOzs7QUFDSUssWUFBVSxHQUFHO0FBQ1QsV0FBTyxLQUFLdkIsVUFBTCxDQUFnQm1CLE9BQXZCO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0lLLGdCQUFjLEdBQUc7QUFDYixXQUFPQyx5RUFBUyxDQUFDLEtBQUt6QixVQUFMLENBQWdCb0IsV0FBakIsQ0FBVCxHQUF5QyxLQUFLcEIsVUFBTCxDQUFnQm9CLFdBQXpELEdBQXVFLENBQTlFO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7OztBQUNJTSxZQUFVLEdBQUc7QUFDVCxTQUFLckIsZ0JBQUwsQ0FBc0JJLFdBQXRCLENBQWtDO0FBQzlCQyxhQUFPLEVBQUU7QUFEcUIsS0FBbEM7QUFHSDtBQUVEO0FBQ0o7QUFDQTs7O0FBQ0ksUUFBTWlCLE9BQU4sR0FBZ0I7QUFDWixTQUFLdEIsZ0JBQUwsQ0FBc0JJLFdBQXRCLENBQWtDO0FBQzlCQyxhQUFPLEVBQUU7QUFEcUIsS0FBbEM7QUFHQSxXQUFPLEtBQUtrQixXQUFMLEVBQVA7QUFDSDs7QUFFRCxRQUFNQSxXQUFOLEdBQW9CO0FBQ2hCLFVBQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSTtBQUNuQyxVQUFHLEtBQUsxQixnQkFBTCxLQUEwQixJQUE3QixFQUFtQztBQUMvQixhQUFLQSxnQkFBTCxDQUFzQjJCLFNBQXRCLEdBQW1DQyxLQUFELElBQVc7QUFDekMsY0FBSUEsS0FBSyxDQUFDQyxJQUFOLENBQVd4QixPQUFYLEtBQXVCLGNBQTNCLEVBQTJDO0FBQ3ZDcUIsbUJBQU8sQ0FBQ0UsS0FBSyxDQUFDQyxJQUFOLENBQVdBLElBQVosQ0FBUDtBQUNIO0FBQ0osU0FKRDtBQUtIO0FBQ0osS0FSZSxDQUFoQjs7QUFTQSxRQUFHLEtBQUs3QixnQkFBTCxLQUEwQixJQUE3QixFQUFtQztBQUMvQixXQUFLQSxnQkFBTCxDQUFzQkksV0FBdEIsQ0FBa0M7QUFDOUJDLGVBQU8sRUFBRTtBQURxQixPQUFsQztBQUdIOztBQUVELFdBQU9tQixPQUFQO0FBQ0g7O0FBRUQsUUFBTU0sY0FBTixHQUF1QjtBQUNuQixRQUFHVix5RUFBUyxDQUFDLEtBQUtuQixnQkFBTixDQUFaLEVBQXFDO0FBQ2pDLGFBQU8sS0FBS0EsZ0JBQUwsQ0FBc0I2QixjQUF0QixFQUFQO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsWUFBTU4sT0FBTyxHQUFHLElBQUlDLE9BQUosQ0FBWUMsT0FBTyxJQUFJO0FBQ25DLFlBQUcsS0FBSzFCLGdCQUFMLEtBQTBCLElBQTdCLEVBQW1DO0FBQy9CLGVBQUtBLGdCQUFMLENBQXNCMkIsU0FBdEIsR0FBbUNDLEtBQUQsSUFBVztBQUN6QyxnQkFBSUEsS0FBSyxDQUFDQyxJQUFOLENBQVd4QixPQUFYLEtBQXVCLGdCQUEzQixFQUE2QztBQUN6Q3FCLHFCQUFPLENBQUNFLEtBQUssQ0FBQ0MsSUFBTixDQUFXQSxJQUFaLENBQVA7QUFDSDtBQUNKLFdBSkQ7QUFLSDtBQUNKLE9BUmUsQ0FBaEI7O0FBU0EsVUFBRyxLQUFLN0IsZ0JBQUwsS0FBMEIsSUFBN0IsRUFBbUM7QUFDL0IsYUFBS0EsZ0JBQUwsQ0FBc0JJLFdBQXRCLENBQWtDO0FBQzlCQyxpQkFBTyxFQUFFO0FBRHFCLFNBQWxDO0FBR0g7O0FBRUQsYUFBT21CLE9BQVA7QUFDSDtBQUNKO0FBQ0Q7QUFDSjtBQUNBO0FBQ0E7OztBQUNJTyxPQUFLLEdBQUc7QUFDSixXQUFPLEtBQUtsQyxFQUFaO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0ltQyxTQUFPLEdBQUc7QUFDTixXQUFPLEtBQUt0QyxJQUFaO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNJc0IsV0FBUyxDQUFDckIsVUFBRCxFQUFhO0FBQ2xCO0FBQ0EsU0FBS08sd0JBQUwsR0FBZ0MsRUFDNUIsR0FBRyxLQUFLUCxVQURvQjtBQUU1QixTQUFHQTtBQUZ5QixLQUFoQzs7QUFJQSxRQUFHLEtBQUtLLGdCQUFMLEtBQTBCLElBQTdCLEVBQW1DO0FBQy9CLFdBQUtBLGdCQUFMLENBQXNCSSxXQUF0QixDQUFrQztBQUM5QkMsZUFBTyxFQUFFLFlBRHFCO0FBRTlCd0IsWUFBSSxFQUFFbEM7QUFGd0IsT0FBbEM7QUFJSDtBQUNKOztBQUVEc0MsNkJBQTJCLEdBQUc7QUFDMUIsV0FBTyxLQUFLL0Isd0JBQVo7QUFDSDs7QUFFRGdDLFdBQVMsR0FBRztBQUNSLFFBQUcsS0FBS2xDLGdCQUFMLEtBQTBCLElBQTdCLEVBQW1DO0FBQy9CLFdBQUtBLGdCQUFMLENBQXNCa0MsU0FBdEI7QUFDSDtBQUNKOztBQW5OWTs7QUFzTkYxQyxtRUFBZiIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge2lzRGVmaW5lZCwgcmFuZG9tVVVJRH0gZnJvbSAnLi4vdXRpbHMvVXRpbHMuanMnO1xuaW1wb3J0IHtEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQywgREFUQVNPVVJDRV9EQVRBX1RPUElDfSBmcm9tIFwiLi4vQ29uc3RhbnRzXCI7XG5cbi8qKlxuICogVGhlIERhdGFTb3VyY2UgaXMgdGhlIGFic3RyYWN0IGNsYXNzIHVzZWQgdG8gY3JlYXRlIGRpZmZlcmVudCBkYXRhc291cmNlcy5cbiAqXG4gKi9cbmNsYXNzIERhdGFTb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIGRhdGFzb3VyY2UgbmFtZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIGRhdGFzb3VyY2UgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Byb3BlcnRpZXMudGltZVNoaWZ0PWZhbHNlXSAtIGZpeCBzb21lIHByb2JsZW0gd2l0aCBzb21lIGFuZHJvaWQgZGV2aWNlcyB3aXRoIHNvbWUgdGltZXN0YW1wIHNoaWZ0IHRvIDE2IHNlY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5idWZmZXJpbmdUaW1lPTAgLSBkZWZpbmVzIHRoZSB0aW1lIGR1cmluZyB0aGUgZGF0YSBoYXMgdG8gYmUgYnVmZmVyZWQuIFVzZWZ1bCBvbmx5IHdoZW4gdXNlZCB3aXRoIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMudGltZU91dD0wXSAtIGRlZmluZXMgdGhlIGxpbWl0IHRpbWUgYmVmb3JlIGRhdGEgaGFzIHRvIGJlIHNraXBwZWQuIFVzZWZ1bCBvbmx5IHdoZW4gdXNlZCB3aXRoIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5wcm90b2NvbCAtIGRlZmluZXMgdGhlIHByb3RvY29sIG9mIHRoZSBkYXRhc291cmNlLiBAc2VlIHtAbGluayBEYXRhQ29ubmVjdG9yfVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZHBvaW50VXJsIHRoZSBlbmRwb2ludCB1cmxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zZXJ2aWNlIHRoZSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2ZmZXJpbmdJRCB0aGUgb2ZmZXJpbmdJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9ic2VydmVkUHJvcGVydHkgdGhlIG9ic2VydmVkIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIHRoZSBzdGFydCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZFRpbWUgdGhlIGVuZCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXBsYXlTcGVlZD0xXSB0aGUgcmVwbGF5IGZhY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXNwb25zZUZvcm1hdF0gdGhlIHJlc3BvbnNlIGZvcm1hdCAoZS5nIHZpZGVvL21wNClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVjb25uZWN0VGltZW91dD0xMDAwMF0gLSB0aGUgdGltZSBiZWZvcmUgcmVjb25uZWN0aW5nIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmJhdGNoU2l6ZT0xXSAtIHRoZSBudW1iZXIgb2YgZGF0YSB0byBmZXRjaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXM9e31dIC0gY3VzdG9tIHBhcmFtZXRlcnMgYXBwZW5kZWQgdG8gdGhlIFVSTCBhcyB0aGV5IGFyZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3b3JrZXIgLSBEYXRhU291cmNlIHdvcmtlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMsIHdvcmtlcikge1xuICAgICAgICB0aGlzLmlkID0gXCJEYXRhU291cmNlLVwiICsgcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBmZXRjaDogMSwgLy8gZGVmYXVsdCB2YWx1ZSBpZiBub3QgZGVmaW5lZFxuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZVdvcmtlciA9IHdvcmtlcjtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50UnVubmluZ1Byb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5pbml0RGF0YVNvdXJjZShwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0cyB0aGUgZGF0YXNvdXJjZSB3aXRoIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0aWVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBpbml0RGF0YVNvdXJjZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZVdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnaW5pdCcsXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IEpTT04uc3RyaW5naWZ5KHByb3BlcnRpZXMpLFxuICAgICAgICAgICAgdG9waWM6IERBVEFTT1VSQ0VfREFUQV9UT1BJQyt0aGlzLmlkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldERhdGFTeW5jaHJvbml6ZXIoZGF0YVN5bmNocm9uaXplcikge1xuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIgPSBkYXRhU3luY2hyb25pemVyO1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VXb3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgbWVzc2FnZTogJ3RvcGljJyxcbiAgICAgICAgICAgIHRvcGljOiBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyt0aGlzLmRhdGFTeW5jaHJvbml6ZXIuaWRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0YSBzb3VyY2UgdGltZSByYW5nZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGFydFRpbWUgLSB0aGUgc3RhcnRUaW1lIChpbiBkYXRlIElTTylcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZW5kVGltZSAtIHRoZSBzdGFydFRpbWUgKGluIGRhdGUgSVNPKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByZXBsYXlTcGVlZCAtIHRoZSByZXBsYXkgc3BlZWRcbiAgICAgKi9cbiAgICBzZXRUaW1lUmFuZ2Uoc3RhcnRUaW1lLCBlbmRUaW1lLCByZXBsYXlTcGVlZCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVVybCh7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnJlbnRSdW5uaW5nUHJvcGVydGllcyxcbiAgICAgICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICAgICAgZW5kVGltZTogZW5kVGltZSxcbiAgICAgICAgICAgIHJlcGxheVNwZWVkOiByZXBsYXlTcGVlZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFydFRpbWVcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldFN0YXJ0VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5zdGFydFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZW5kVGltZVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gZW5kVGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldEVuZFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuZW5kVGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbmRUaW1lXG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0UmVwbGF5U3BlZWQoKSB7XG4gICAgICAgIHJldHVybiBpc0RlZmluZWQodGhpcy5wcm9wZXJ0aWVzLnJlcGxheVNwZWVkKSA/IHRoaXMucHJvcGVydGllcy5yZXBsYXlTcGVlZCA6IDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdCB0aGUgZGF0YVNvdXJjZSB0aGVuIHRoZSBjb25uZWN0b3Igd2lsbCBiZSBjbG9zZWQgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VXb3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgbWVzc2FnZTogJ2Rpc2Nvbm5lY3QnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdGhlIGRhdGFTb3VyY2UgdGhlbiB0aGUgY29ubmVjdG9yIHdpbGwgYmUgb3BlbmVkIGFzIHdlbGwuXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlV29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdjb25uZWN0J1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDb25uZWN0ZWQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgaWYodGhpcy5kYXRhU291cmNlV29ya2VyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlV29ya2VyLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YS5tZXNzYWdlID09PSAnaXMtY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShldmVudC5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmKHRoaXMuZGF0YVNvdXJjZVdvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlV29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaXMtY29ubmVjdGVkJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgICAgaWYoaXNEZWZpbmVkKHRoaXMuZGF0YVN5bmNocm9uaXplcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmRhdGFTb3VyY2VXb3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlV29ya2VyLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEubWVzc2FnZSA9PT0gJ2xhc3QtdGltZXN0YW1wJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZXZlbnQuZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmKHRoaXMuZGF0YVNvdXJjZVdvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZVdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdsYXN0LXRpbWVzdGFtcCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YXNvdXJjZSBpZC5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBkYXRhc291cmNlIGlkXG4gICAgICovXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGFzb3VyY2UgbmFtZS5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKi9cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgZGF0YXNvdXJjZSBuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgZGF0YXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBwcm9wZXJ0aWVzLnRpbWVTaGlmdCAtIGZpeCBzb21lIHByb2JsZW0gd2l0aCBzb21lIGFuZHJvaWQgZGV2aWNlcyB3aXRoIHNvbWUgdGltZXN0YW1wIHNoaWZ0IHRvIDE2IHNlY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWUgLSBkZWZpbmVzIHRoZSB0aW1lIGR1cmluZyB0aGUgZGF0YSBoYXMgdG8gYmUgYnVmZmVyZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvcGVydGllcy50aW1lT3V0IC0gZGVmaW5lcyB0aGUgbGltaXQgdGltZSBiZWZvcmUgZGF0YSBoYXMgdG8gYmUgc2tpcHBlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnByb3RvY29sIC0gZGVmaW5lcyB0aGUgcHJvdG9jb2wgb2YgdGhlIGRhdGFzb3VyY2UuIEBzZWUge0BsaW5rIERhdGFDb25uZWN0b3J9XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kcG9pbnRVcmwgdGhlIGVuZHBvaW50IHVybFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnNlcnZpY2UgdGhlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vZmZlcmluZ0lEIHRoZSBvZmZlcmluZ0lEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2JzZXJ2ZWRQcm9wZXJ0eSB0aGUgb2JzZXJ2ZWQgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zdGFydFRpbWUgdGhlIHN0YXJ0IHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kVGltZSB0aGUgZW5kIHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMucmVwbGF5U3BlZWQgdGhlIHJlcGxheSBzcGVlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLnJlc3BvbnNlRm9ybWF0IHRoZSByZXNwb25zZSBmb3JtYXQgKGUuZyB2aWRlby9tcDQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMucmVjb25uZWN0VGltZW91dCAtIHRoZSB0aW1lb3V0IGJlZm9yZSByZWNvbm5lY3RpbmdcbiAgICAgKi9cbiAgICB1cGRhdGVVcmwocHJvcGVydGllcykge1xuICAgICAgICAvLyBzYXZlIGN1cnJlbnQgcnVubmluZyBwcm9wZXJ0aWVzXG4gICAgICAgIHRoaXMuY3VycmVudFJ1bm5pbmdQcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgLi4udGhpcy5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9O1xuICAgICAgICBpZih0aGlzLmRhdGFTb3VyY2VXb3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZVdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3VwZGF0ZS11cmwnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudFJ1bm5pbmdQcm9wZXJ0aWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50UnVubmluZ1Byb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICBpZih0aGlzLmRhdGFTb3VyY2VXb3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZVdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YVNvdXJjZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _DataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);\n/* harmony import */ var _workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides generic parsing for JSON response.\n *\n * @extends DataSource\n * @example\n * import SweJson from \'osh/datareceiver/SweJson.js\';\n *\n * let androidPhoneGpsDataSource = new SweJson("android-GPS", {\n    protocol: "ws",\n    service: "SOS",\n    endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n    offeringID: "urn:android:device:060693280a28e015-sos",\n    observedProperty: "http://sensorml.com/ont/swe/property/Location",\n    startTime: "2015-02-16T07:58:00Z",\n    endTime: "2015-02-16T08:09:00Z",\n    replaySpeed: replaySpeed+"",\n    bufferingTime: 1000,\n    timeShift: -16000\n  });\n */\n\nclass SweJson extends _DataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SweJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SweJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9Td2VKc29uLmpzPzI4YjQiXSwibmFtZXMiOlsiU3dlSnNvbiIsIkRhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwidGltZVNoaWZ0IiwicmVjb25uZWN0VGltZW91dCIsIlN3ZUpzb25Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE9BQU4sU0FBc0JDLDhEQUF0QixDQUFpQztBQUM3QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQW1CO0FBQzFCLFVBQU1ELElBQU4sRUFBWTtBQUNSRSxlQUFTLEVBQUMsQ0FERjtBQUVSQyxzQkFBZ0IsRUFBRSxPQUFPLENBRmpCO0FBRW9CO0FBQzVCLFNBQUdGO0FBSEssS0FBWixFQUlHLElBQUlHLGlFQUFKLEVBSkg7QUFLSDs7QUF4QjRCOztBQTJCbEJQLGdFQUFmIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cbmltcG9ydCBEYXRhU291cmNlIGZyb20gJy4vRGF0YVNvdXJjZS5qcyc7XG5pbXBvcnQgU3dlSnNvbldvcmtlciBmcm9tICcuL3dvcmtlcnMvU3dlSnNvbi53b3JrZXIuanMnO1xuXG4vKipcbiAqIFRoaXMgZGF0YXNvdXJjZSBwcm92aWRlcyBnZW5lcmljIHBhcnNpbmcgZm9yIEpTT04gcmVzcG9uc2UuXG4gKlxuICogQGV4dGVuZHMgRGF0YVNvdXJjZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBTd2VKc29uIGZyb20gJ29zaC9kYXRhcmVjZWl2ZXIvU3dlSnNvbi5qcyc7XG4gKlxuICogbGV0IGFuZHJvaWRQaG9uZUdwc0RhdGFTb3VyY2UgPSBuZXcgU3dlSnNvbihcImFuZHJvaWQtR1BTXCIsIHtcbiAgICBwcm90b2NvbDogXCJ3c1wiLFxuICAgIHNlcnZpY2U6IFwiU09TXCIsXG4gICAgZW5kcG9pbnRVcmw6IFwic2Vuc2lhc29mdC5uZXQ6ODE4MS9zZW5zb3JodWIvc29zXCIsXG4gICAgb2ZmZXJpbmdJRDogXCJ1cm46YW5kcm9pZDpkZXZpY2U6MDYwNjkzMjgwYTI4ZTAxNS1zb3NcIixcbiAgICBvYnNlcnZlZFByb3BlcnR5OiBcImh0dHA6Ly9zZW5zb3JtbC5jb20vb250L3N3ZS9wcm9wZXJ0eS9Mb2NhdGlvblwiLFxuICAgIHN0YXJ0VGltZTogXCIyMDE1LTAyLTE2VDA3OjU4OjAwWlwiLFxuICAgIGVuZFRpbWU6IFwiMjAxNS0wMi0xNlQwODowOTowMFpcIixcbiAgICByZXBsYXlTcGVlZDogcmVwbGF5U3BlZWQrXCJcIixcbiAgICBidWZmZXJpbmdUaW1lOiAxMDAwLFxuICAgIHRpbWVTaGlmdDogLTE2MDAwXG4gIH0pO1xuICovXG5cbmNsYXNzIFN3ZUpzb24gZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLnRpbWVTaGlmdD1mYWxzZV0gLSBmaXggc29tZSBwcm9ibGVtIHdpdGggc29tZSBhbmRyb2lkIGRldmljZXMgd2l0aCBzb21lIHRpbWVzdGFtcCBzaGlmdCB0byAxNiBzZWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYnVmZmVyaW5nVGltZT0wIC0gZGVmaW5lcyB0aGUgdGltZSBkdXJpbmcgdGhlIGRhdGEgaGFzIHRvIGJlIGJ1ZmZlcmVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVPdXQ9MF0gLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCB0aGUgZW5kcG9pbnQgdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc2VydmljZSB0aGUgc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9mZmVyaW5nSUQgdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IHRoZSBvYnNlcnZlZCBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSB0aGUgc3RhcnQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRUaW1lIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gdGhlIHJlcGxheSBmYWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVzcG9uc2VGb3JtYXRdIHRoZSByZXNwb25zZSBmb3JtYXQgKGUuZyB2aWRlby9tcDQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlY29ubmVjdFRpbWVvdXQ9MTAwMDBdIC0gdGhlIHRpbWUgYmVmb3JlIHJlY29ubmVjdGluZyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIobmFtZSwge1xuICAgICAgICAgICAgdGltZVNoaWZ0OjAsXG4gICAgICAgICAgICByZWNvbm5lY3RUaW1lb3V0OiAxMDAwICogNSwgLy8gZGVmYXVsdCBpZiBub3QgZGVmaW5lZCBpbnRvIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC4uLnByb3BlcnRpZXNcbiAgICAgICAgfSwgbmV3IFN3ZUpzb25Xb3JrZXIoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTd2VKc29uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "e78c9387baec358e15c2.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1N3ZUpzb24ud29ya2VyLmpzPzI4NDMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlNzhjOTM4N2JhZWMzNThlMTVjMi53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _DataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20);\n/* harmony import */ var _workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides parsing to H264 raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import Video from \'osh/datareceiver/Video.js\';\n *\n * var videoDataSource = new Video("H264 video ", {\n        protocol: "ws",\n        service: "SOS",\n        endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n        offeringID: "urn:android:device:a0e0eac2fea3f614-sos",\n        observedProperty: "http://sensorml.com/ont/swe/property/VideoFrame",\n        startTime: "2016-08-11T20:17:30.402Z",\n        endTime: "2016-08-11T20:18:05.451Z",\n        replaySpeed: 1,\n        bufferingTime: 1000\n  });\n */\n\nclass Video extends _DataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Object} [properties.customUrlParams={}] - the encoding options\n   * @param {Number} [properties.customUrlParams.video_bitrate] - define a custom bitrate (in b/s)\n   * @param {Number} [properties.customUrlParams.video_scale] - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} [properties.customUrlParams.video_width] - define a custom width\n   * @param {Number} [properties.customUrlParams.video_height] - define a custom height\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_Video_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Video);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9WaWRlby5qcz8xYWFiIl0sIm5hbWVzIjpbIlZpZGVvIiwiRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJ0aW1lU2hpZnQiLCJyZWNvbm5lY3RUaW1lb3V0IiwiVmlkZW9Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQSxLQUFOLFNBQW9CQyw4REFBcEIsQ0FBK0I7QUFDM0I7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsYUFBVyxDQUFDQyxJQUFELEVBQU9DLFVBQVAsRUFBbUI7QUFDMUIsVUFBTUQsSUFBTixFQUFZO0FBQ1JFLGVBQVMsRUFBQyxDQURGO0FBRVJDLHNCQUFnQixFQUFFLE9BQU8sQ0FGakI7QUFFb0I7QUFDNUIsU0FBR0Y7QUFISyxLQUFaLEVBSUcsSUFBSUcsK0RBQUosRUFKSDtBQUtIOztBQTdCMEI7O0FBZ0NmUCw4REFBaEIiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBEYXRhU291cmNlIGZyb20gJy4vRGF0YVNvdXJjZS5qcyc7XG5pbXBvcnQgVmlkZW9Xb3JrZXIgZnJvbSBcIi4vd29ya2Vycy9WaWRlby53b3JrZXIuanNcIjtcblxuLyoqXG4gKiBUaGlzIGRhdGFzb3VyY2UgcHJvdmlkZXMgcGFyc2luZyB0byBIMjY0IHJhdyBkYXRhLlxuICogRGF0YTogQXJyYXlCdWZmZXJcbiAqIEBleHRlbmRzIERhdGFTb3VyY2VcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgVmlkZW8gZnJvbSAnb3NoL2RhdGFyZWNlaXZlci9WaWRlby5qcyc7XG4gKlxuICogdmFyIHZpZGVvRGF0YVNvdXJjZSA9IG5ldyBWaWRlbyhcIkgyNjQgdmlkZW8gXCIsIHtcbiAgICAgICAgcHJvdG9jb2w6IFwid3NcIixcbiAgICAgICAgc2VydmljZTogXCJTT1NcIixcbiAgICAgICAgZW5kcG9pbnRVcmw6IFwic2Vuc2lhc29mdC5uZXQ6ODE4MS9zZW5zb3JodWIvc29zXCIsXG4gICAgICAgIG9mZmVyaW5nSUQ6IFwidXJuOmFuZHJvaWQ6ZGV2aWNlOmEwZTBlYWMyZmVhM2Y2MTQtc29zXCIsXG4gICAgICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L1ZpZGVvRnJhbWVcIixcbiAgICAgICAgc3RhcnRUaW1lOiBcIjIwMTYtMDgtMTFUMjA6MTc6MzAuNDAyWlwiLFxuICAgICAgICBlbmRUaW1lOiBcIjIwMTYtMDgtMTFUMjA6MTg6MDUuNDUxWlwiLFxuICAgICAgICByZXBsYXlTcGVlZDogMSxcbiAgICAgICAgYnVmZmVyaW5nVGltZTogMTAwMFxuICB9KTtcbiAqL1xuY2xhc3MgVmlkZW8gZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLnRpbWVTaGlmdD1mYWxzZV0gLSBmaXggc29tZSBwcm9ibGVtIHdpdGggc29tZSBhbmRyb2lkIGRldmljZXMgd2l0aCBzb21lIHRpbWVzdGFtcCBzaGlmdCB0byAxNiBzZWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYnVmZmVyaW5nVGltZT0wIC0gZGVmaW5lcyB0aGUgdGltZSBkdXJpbmcgdGhlIGRhdGEgaGFzIHRvIGJlIGJ1ZmZlcmVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVPdXQ9MF0gLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCB0aGUgZW5kcG9pbnQgdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc2VydmljZSB0aGUgc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9mZmVyaW5nSUQgdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IHRoZSBvYnNlcnZlZCBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSB0aGUgc3RhcnQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRUaW1lIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gdGhlIHJlcGxheSBmYWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVzcG9uc2VGb3JtYXRdIHRoZSByZXNwb25zZSBmb3JtYXQgKGUuZyB2aWRlby9tcDQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlY29ubmVjdFRpbWVvdXQ9MTAwMDBdIC0gdGhlIHRpbWUgYmVmb3JlIHJlY29ubmVjdGluZyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXM9e31dIC0gdGhlIGVuY29kaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX2JpdHJhdGVdIC0gZGVmaW5lIGEgY3VzdG9tIGJpdHJhdGUgKGluIGIvcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX3NjYWxlXSAtIGRlZmluZSBhIGN1c3RvbSBzY2FsZSwgMC4wIDwgdmFsdWUgPCAxLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX3dpZHRoXSAtIGRlZmluZSBhIGN1c3RvbSB3aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXMudmlkZW9faGVpZ2h0XSAtIGRlZmluZSBhIGN1c3RvbSBoZWlnaHRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHtcbiAgICAgICAgICAgIHRpbWVTaGlmdDowLFxuICAgICAgICAgICAgcmVjb25uZWN0VGltZW91dDogMTAwMCAqIDUsIC8vIGRlZmF1bHQgaWYgbm90IGRlZmluZWQgaW50byBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAuLi5wcm9wZXJ0aWVzXG4gICAgICAgIH0sIG5ldyBWaWRlb1dvcmtlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0ICBWaWRlbztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "f20d9e1c3aae8cf1d03b.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1ZpZGVvLndvcmtlci5qcz8zZTljIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLFNBQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjIwZDllMWMzYWFlOGNmMWQwM2Iud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * @extends View\n * @example\n *\nimport MjpegView from \'osh/ui/view/video/MjpegView.js\';\n\nvar videoView = new MjpegView("containerId", {\n    dataSourceId: datasource.id,\n    entity : entity,\n    css: "video",\n    cssSelected: "video-selected",\n    name: "Video"\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {String} parentElementDivId - The div element to attach to\n   * @param {Object} options - the properties of the view\n   * @param {String} options.dataSourceId - The dataSource id of the dataSource providing data to the view\n   * @param {String} options.entityId - The entity id to which the view belongs to\n   * @param {String} options.showTime - Display or not the time onto the view\n   * @param {String} options.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(parentElementDivId, options) {\n    super(parentElementDivId, [], options); // create timestamp slot\n\n    this.timeStamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(options.showTime) && options.showTime) {\n      this.timeStamp = document.createElement("div");\n      this.timeStamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timeStamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof options != "undefined" && typeof options.rotation != "undefined") {\n      this.rotation = options.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    } // adds listener\n\n\n    let self = this;\n    _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].observeDiv(this.divId, "click", event => {\n      _events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].fire(_events_EventManager_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].EVENT.SELECT_VIEW, {\n        dataSourcesIds: [self.dataSourceId],\n        entityId: self.entityId\n      });\n    });\n  }\n\n  setData(dataSourceId, values) {\n    for (let i = 0; i < values.length; i++) {\n      const value = values.shift();\n      let imgBlob = new Blob([value.data.frameData]);\n      let url = window.URL.createObjectURL(imgBlob);\n      let oldBlobURL = this.imgTag.src;\n      this.imgTag.src = url;\n\n      if (this.timeStamp !== null) {\n        this.timeStamp.innerHTML = new Date(value.timeStamp).toISOString();\n      }\n\n      window.URL.revokeObjectURL(oldBlobURL);\n    }\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "g"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/View.js + 2 modules\nvar View = __webpack_require__(7);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventManager.js + 1 modules\nvar EventManager = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(1);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(27);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(parentElementDivId, viewItems, options) {\n    super(parentElementDivId, viewItems, options); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {};\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @param {PointMarker} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  addMarkerToLayer(layer, markerObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(layer.getId() in this.layerIdToMarkers)) {\n      this.layerIdToMarkers[layer.getId()] = {};\n    }\n\n    this.layerIdToMarkers[layer.getId()][layer.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @param {Polyline} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  addPolylineToLayer(layer, polylineObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(layer.getId() in this.layerIdToPolylines)) {\n      this.layerIdToPolylines[layer.getId()] = {};\n    }\n\n    this.layerIdToPolylines[layer.getId()][layer.polylineId] = polylineObject;\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @param {PointMarker} layer - the Layer Object\n   */\n\n\n  getMarker(layer) {\n    if (!(layer.getId() in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[layer.getId()][layer.markerId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @param {Polyline} layer - the Layer Object\n   */\n\n\n  getPolyline(layer) {\n    if (!(layer.getId() in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[layer.getId()][layer.polylineId];\n  }\n  /**\n   * Remove Corresponding ViewItem\n   * @param {Object} viewItem - The viewItem object\n   */\n\n\n  removeViewItem(viewItem) {\n    super.removeViewItem(viewItem); // check for marker\n\n    this.removeMarkers(viewItem.layer); // check for polylines\n\n    this.removePolylines(viewItem.layer);\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarker} pointMarker - the layer to remove the markers from\n   */\n\n\n  removeMarkers(pointMarker) {\n    if (Object(Utils["g" /* isDefined */])(pointMarker.markerId)) {\n      const markersMap = this.layerIdToMarkers[pointMarker.id];\n\n      if (Object(Utils["g" /* isDefined */])(markersMap)) {\n        for (let markerId in markersMap) {\n          const marker = markersMap[markerId];\n          this.removeMarkerFromLayer(marker);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[pointMarker.id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a Polyline Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    if (Object(Utils["g" /* isDefined */])(polyline.polylineId)) {\n      const polylinesMap = this.layerIdToPolylines[polyline.id];\n\n      if (Object(Utils["g" /* isDefined */])(polylinesMap)) {\n        for (let polylineId in polylinesMap) {\n          const polyline = polylinesMap[polylineId];\n          this.removePolylineFromLayer(polyline);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[polyline.id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends View\n * @example\n\n import LeafletView from \'osh/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView("",\n [{\n            layer :  pointMarker,\n            name : "Android Phone GPS",\n            entityId : androidEntity.id\n        },\n {\n     layer : new Polyline({\n         getLocation : {\n             dataSourceIds : [androidPhoneGpsDataSource.getId()],\n             handler : function(rec) {\n                 return {\n                     x : rec.lon,\n                     y : rec.lat,\n                     z : rec.alt\n                 };\n             }\n         },\n         color : \'rgba(0,0,255,0.5)\',\n         weight : 10,\n         opacity : .5,\n         smoothFactor : 1,\n         maxPoints : 200\n     }),\n     name : "Android Phone GPS Path",\n     entityId : androidEntity.id\n }]\n );\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {String} parentElementDivId - The div element to attach to\n   * @param {Object[]} viewItems - The initial view items to add\n   * @param {String} viewItems.name - The name of the view item\n   * @param {Layer} viewItems.layer - The layer object representing the view item\n   * @param {Object} [options] - the properties of the view\n   * @param {Boolean} [options.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [options.follow=false] - follow the marker\n   * @param {Object} [options.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [options.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [options.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(parentElementDivId, viewItems, options) {\n    super(parentElementDivId, viewItems, options);\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["g" /* isDefined */])(options)) {\n      if (Object(Utils["g" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["g" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["g" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["g" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["g" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["g" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["g" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {Object} properties\n   * @param {Number} properties.lon\n   * @param {Number} properties.lat\n   * @param {String} properties.icon - the icon path\n   * @param {Integer[]} properties.iconAnchor - offset of the icon ex:[10,10]\n   * @param {String} properties.label - label of the tooltip\n   * @param {String} properties.description - description of the marker to display into the tooltip\n   * @param {String} properties.labelOffset - offset of the label of the tooltip\n   * @param {Number} properties.orientation - orientation of the icon in degree\n   * @return {string} the id of the new created marker\n   */\n\n\n  addMarker(properties) {\n    //create marker\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon\n      });\n      marker = leaflet_src_default.a.marker([properties.lat, properties.lon], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.lat, properties.lon]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (name.length > 0 || desc.length > 0) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.addTo(this.map);\n    marker.setRotationAngle(properties.orientation);\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {locations} locations - the coordinates [{x, y}]\n   * @param {Object} properties\n   * @param {String} properties.color\n   * @param {Number} properties.weight\n   * @param {Number} properties.opacity\n   * @param {Number} properties.smoothFactor\n   * @return {string} the id of the new created polyline\n   */\n\n\n  addPolyline(locations, properties) {\n    let polylinePoints = [];\n\n    if (Object(Utils["g" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarker} layer - The layer allowing the update of the marker\n   */\n\n\n  updateMarker(layer) {\n    let marker = this.getMarker(layer);\n\n    if (!Object(Utils["g" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      const markerObject = this.addMarker({\n        lat: layer.location.y,\n        lon: layer.location.x,\n        orientation: layer.orientation.heading,\n        color: layer.color,\n        icon: layer.icon,\n        iconAnchor: layer.iconAnchor,\n        label: layer.label,\n        labelColor: layer.labelColor,\n        labelSize: layer.labelSize,\n        labelOffset: layer.labelOffset,\n        name: layer.viewItem.name,\n        description: layer.viewItem.description\n      });\n      this.addMarkerToLayer(layer, markerObject);\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n\n\n    marker = this.getMarker(layer); // updates position\n\n    let lon = layer.location.x;\n    let lat = layer.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: layer.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["g" /* isDefined */])(layer.orientation)) {\n      marker.setRotationAngle(layer.orientation.heading);\n    }\n\n    if (layer.icon !== null && marker._icon.iconUrl !== layer.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: layer.iconAnchor,\n        iconUrl: layer.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {Polyline} layer - The layer allowing the update of the polyline\n   */\n\n\n  updatePolyline(layer) {\n    let polyline = this.getPolyline(layer);\n\n    if (Object(Utils["g" /* isDefined */])(polyline)) {\n      // removes the layer\n      this.removePolylineFromLayer(polyline);\n    } // adds a new polyline to the leaflet renderer\n\n\n    const polylineObj = this.addPolyline(layer.locations[layer.polylineId], {\n      color: layer.color,\n      weight: layer.weight,\n      locations: layer.locations,\n      maxPoints: layer.maxPoints,\n      opacity: layer.opacity,\n      smoothFactor: layer.smoothFactor\n    });\n    this.addPolylineToLayer(layer, polylineObj);\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/events/EventManager.js + 1 modules\nvar EventManager = __webpack_require__(2);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/layer/Layer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer_Layer {\n  /**\n   *\n   * @param {Object[]} jsonProperties - contains a list of Functions\n   */\n  constructor(jsonProperties) {\n    this.properties = jsonProperties;\n    this.id = "layer-" + Object(Utils["h" /* randomUUID */])();\n    this.dataSourceToLayerMap = {};\n    this.initEvents();\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n    let isSet = Object(Utils["f" /* hasValue */])(func);\n\n    if (isSet) {\n      Object(Utils["a" /* assertArray */])(func.dataSourceIds, funcName + ".dataSourceIds");\n      Object(Utils["b" /* assertFunction */])(func.handler, funcName + ".handler");\n    }\n\n    return isSet;\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {\n    var that = this;\n    EventManager["a" /* default */].observe(EventManager["a" /* default */].EVENT.DATASOURCE_UPDATE_TIME, event => that.clear());\n  }\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(Utils["g" /* isDefined */])(this.dataSourceToLayerMap[dataSourceId])) {\n        this.dataSourceToLayerMap[dataSourceId] = [];\n      }\n\n      this.dataSourceToLayerMap[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param rec\n   * @param view\n   * @param options\n   * @return {Boolean}\n   */\n\n\n  setData(dataSourceId, rec, view, options) {\n    if (dataSourceId in this.dataSourceToLayerMap) {\n      let fnArr = this.dataSourceToLayerMap[dataSourceId];\n\n      for (let i = 0; i < fnArr.length; i++) {\n        for (let j = 0; j < rec.values.length; j++) {\n          fnArr[i](rec.values[j].data, rec.values[j].timeStamp, options);\n        }\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    let res = [];\n\n    for (let i in this.dataSourceToLayerMap) {\n      res.push(i);\n    }\n\n    return res;\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init() {}\n\n}\n\n/* harmony default export */ var layer_Layer = (Layer_Layer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/layer/PointMarker.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarker from \'osh/ui/layer/PointMarker.js\';\n *\n * let pointMarker = new PointMarker({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarker_PointMarker extends layer_Layer {\n  /**\n  \t* Create the PointMarker\n  \t* @param {Object} properties\n  \t* @param {Number[]} properties.location - [x,y,z]\n   \t* @param {Number} [properties.orientation=0] -\n  \t* @param {String} properties.icon -\n  \t* @param {Number[]} [properties.iconAnchor=[16,16]] -\n  \t* @param {Number[]} [properties.iconSize=[16,16]] -\n  \t* @param {String} properties.label -\n  \t* @param {String} [properties.labelColor="#000000"] - HTML color\n  \t* @param {Number} [properties.labelSize=16] -\n  \t* @param {Number[]} [properties.labelOffset=[0,0]] -\n  \t* @param {Function} [properties.getLocation] -\n  \t* @param {Function} [properties.getOrientation] -\n  \t* @param {Function} [properties.getIcon] -\n  \t* @param {Function} [properties.getLabel] -\n  \t* @param {Function} [properties.getLabelColor] -\n  \t* @param {Function} [properties.getLabelSize] -\n    * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   \t* @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n    * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n  \t*\n  \t*/\n  constructor(properties) {\n    super(properties);\n    this.properties = properties;\n    this.location = null;\n    this.orientation = {\n      heading: 0\n    };\n    this.icon = null;\n    this.iconAnchor = [16, 16];\n    this.iconSize = [16, 16];\n    this.label = null;\n    this.labelColor = "#000000";\n    this.labelSize = 16;\n    this.labelOffset = [0, 0];\n    this.zoomLevel = 15;\n    this.color = null;\n    this.defaultToTerrainElevation = false;\n    this.options = {};\n    this.markerId = \'marker\';\n\n    if (Object(Utils["g" /* isDefined */])(properties.defaultToTerrainElevation)) {\n      this.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.location)) {\n      Object(Utils["c" /* assertObject */])(properties.location, "location");\n      this.location = properties.location;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.orientation)) {\n      Object(Utils["c" /* assertObject */])(properties.orientation, "orientation");\n      this.orientation = properties.orientation;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.icon)) {\n      Object(Utils["e" /* assertString */])(properties.icon, "icon");\n      this.icon = properties.icon;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.iconAnchor)) {\n      Object(Utils["a" /* assertArray */])(properties.iconAnchor, "iconAnchor");\n      this.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.iconSize)) {\n      Object(Utils["a" /* assertArray */])(properties.iconSize, "iconSize");\n      this.iconSize = properties.iconSize;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.label)) {\n      Object(Utils["e" /* assertString */])(properties.label, "label");\n      this.label = properties.label;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.labelColor)) {\n      Object(Utils["e" /* assertString */])(properties.labelColor, "labelColor");\n      this.labelColor = properties.labelColor;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.labelSize)) {\n      Object(Utils["d" /* assertPositive */])(properties.labelSize, "labelSize");\n      this.labelSize = properties.labelSize;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.labelOffset)) {\n      Object(Utils["a" /* assertArray */])(properties.labelOffset, "labelOffset");\n      this.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(Utils["f" /* hasValue */])(properties.zoomLevel)) {\n      Object(Utils["d" /* assertPositive */])(properties.zoomLevel, "zoomLevel");\n      this.zoomLevel = properties.zoomLevel;\n    }\n\n    let that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getMarkerId")) {\n      let fn = function (rec, timeStamp, options) {\n        that.markerId = properties.getMarkerId.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getMarkerId.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("getLocation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.location = properties.getLocation.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getLocation.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.orientation = properties.getOrientation.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getOrientation.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = function (rec, timeStamp, options) {\n        that.icon = properties.getIcon.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getIcon.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = function (rec, timeStamp, options) {\n        that.label = properties.getLabel.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getLabel.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.labelColor = properties.getLabelColor.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getLabelColor.dataSourceIds, fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = function (rec, timeStamp, options) {\n        that.labelSize = properties.getLabelSize.handler(rec, timeStamp, options);\n      };\n\n      this.addFn(properties.getLabelSize.dataSourceIds, fn);\n    }\n  }\n\n  init(view) {\n    super.init(view);\n\n    if (Object(Utils["g" /* isDefined */])(view) && this.location !== null) {\n      view.updateMarker(this, 0, {});\n    }\n  }\n\n  setData(dataSourceId, rec, view, options) {\n    if (super.setData(dataSourceId, rec, view, options)) {\n      if (Object(Utils["g" /* isDefined */])(view) && this.location !== null) {\n        view.updateMarker(this, rec.timeStamp, options);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\n/* harmony default export */ var layer_PointMarker = __webpack_exports__["a"] = (PointMarker_PointMarker);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(26);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"c3cc55b4\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/OTViOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFzRztBQUM1SCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTJHO0FBQzdILCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJjM2NjNTViNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/NWEyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQWlHO0FBQzNJO0FBQ0E7QUFDQSxjQUFjLFFBQVMsY0FBYyxpQkFBaUIsbUJBQW1CLEdBQUc7QUFDNUU7QUFDQSIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm9zaC12aWV3IHtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n')}]]);