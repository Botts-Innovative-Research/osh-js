(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{132:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,m=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?r.a.createElement(m,i(i({ref:t},s),{},{components:n})):r.a.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(132)),c={id:"index",title:"DataSynchronizer",sidebar_label:"General"},i={unversionedId:"datasynchronizer/index",id:"datasynchronizer/index",isDocsHomePage:!1,title:"DataSynchronizer",description:"The DataSynchronizer is an object allowing the synchronization of multiple DataSources.",source:"@site/docs/datasynchronizer/index.md",slug:"/datasynchronizer/index",permalink:"/v2.0.0/documentationV2/docs/datasynchronizer/index",version:"current",sidebar_label:"General",sidebar:"someSidebar",previous:{title:"Foscam Tasking",permalink:"/v2.0.0/documentationV2/docs/datasources/sps/foscam"},next:{title:"View",permalink:"/v2.0.0/documentationV2/docs/views/index"}},l=[{value:"Properties configuration",id:"properties-configuration",children:[]},{value:"Example",id:"example",children:[]},{value:"Channels",id:"channels",children:[]}],s={rightToc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The DataSynchronizer is an object allowing the synchronization of multiple DataSources. "),Object(o.b)("p",null,"When several DataSources connect to the server, the data come on different channels. "),Object(o.b)("p",null,"They come in temporal order within the same Stream but f you want to display data from several DataSources at a time ",Object(o.b)("em",{parentName:"p"},"t"),",\nthen you need to set up a synchronization mechanism."),Object(o.b)("p",null,"Let's take the example of a GPS sensor, and a video where the GPS sensor sends data at a rate of 1 data/second,\nand the video sends data at a rate of 30 frames/second."),Object(o.b)("p",null,"So if we want to synchronize them, we have to take into account each video frame (where each frame has a timestamp\nthat can locate it precisely in time) and a GPS data. "),Object(o.b)("p",null,"A mechanism will therefore have to take all these data streams as INPUT, ordering them in temporal order and sending\nthem back to the Views so that they can be displayed."),Object(o.b)("p",null,"This is the role of the DataSynchronizer, taking several DataSources as Input and send back the new stream containing\nall data ordered in temporal order."),Object(o.b)("h2",{id:"properties-configuration"},"Properties configuration"),Object(o.b)("p",null,"There are properties owned by the DataSynchronizer Object."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(o.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Mandatory"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"replaySpeed"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The playback speed"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"-")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"intervalRate"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Number"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"5"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The inner interval rate to process each incoming data* (in milliseconds)"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"-")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"dataSources"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(o.b)("a",Object(a.a)({parentName:"td"},{href:"/v2.0.0/documentationV2/docs/datasources/index"}),"DataSource")),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"-"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The list of DataSource objects to synchronize"),Object(o.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"yes")))),Object(o.b)("p",null,"*",Object(o.b)("em",{parentName:"p"},"Note For further details about how the algorithm works, see ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/v2.0.0/documentationV2/docs/advanced/datasynchronizer"}),"Advanced section"))),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"This example defines multiple DataSources object to synchronize:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import DataSynchronizer from 'osh/datasynchronizer/DataSynchronizer';\nimport Video            from 'osh/datareceiver/Video.js';\nimport SweJson          from 'osh/datareceiver/SweJson.js';\n\nconst REPLAY_SPEED = 1.0;\n\n// Video data\nconst videoDataSource = new Video('drone-Video', {\n    protocol: 'ws',\n    service: 'SOS',\n    endpointUrl: 'sensiasoft.net:8181/sensorhub/sos',\n    offeringID: 'urn:mysos:solo:video2',\n    observedProperty: 'http://sensorml.com/ont/swe/property/VideoFrame',\n    startTime: '2015-12-19T21:04:29.231Z',\n    endTime: '2015-12-19T21:09:19.675Z',\n    replaySpeed: REPLAY_SPEED\n});\n\n// GPS data\nconst platformLocationDataSource = new SweJson('android-GPS', {\n    protocol: 'ws',\n    service: 'SOS',\n    endpointUrl: 'sensiasoft.net:8181/sensorhub/sos',\n    offeringID: 'urn:mysos:solo:nav2',\n    observedProperty: 'http://www.opengis.net/def/property/OGC/0/PlatformLocation',\n    startTime: '2015-12-19T21:04:29.231Z',\n    endTime: '2015-12-19T21:09:19.675Z',\n    replaySpeed: REPLAY_SPEED\n});\n\n// Orientation data\nconst platformOrientationDataSource = new SweJson('android-Heading', {\n    protocol: 'ws',\n    service: 'SOS',\n    endpointUrl: 'sensiasoft.net:8181/sensorhub/sos',\n    offeringID: 'urn:mysos:solo:nav2',\n    observedProperty: 'http://www.opengis.net/def/property/OGC/0/PlatformOrientation',\n    startTime: '2015-12-19T21:04:29.231Z',\n    endTime: '2015-12-19T21:09:19.675Z',\n    replaySpeed: REPLAY_SPEED\n});\n\nconst dataSynchronizer = new DataSynchronizer({\n    replaySpeed: REPLAY_SPEED,\n    intervalRate: 5,\n    dataSources: [videoDataSource, platformLocationDataSource, platformOrientationDataSource]\n})\n\n// connects each DataSource\ndataSynchronizer.connect();\n")),Object(o.b)("h2",{id:"channels"},"Channels"),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"DataSynchronizer")," will receive the data through\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API"}),Object(o.b)("em",{parentName:"a"},"BroadcastChannel"),"(s)"),"\nand send back the result through the same\nchannel(s)."))}b.isMDXComponent=!0}}]);