{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/nevro/progs/git-repo/OSH/osh-js/source/core/utils/Utils.js","webpack:////home/nevro/progs/git-repo/OSH/osh-js/source/core/protocol/Status.js","webpack:////home/nevro/progs/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizerAlgo.js","webpack:////home/nevro/progs/git-repo/OSH/osh-js/source/core/Constants.js","webpack:////home/nevro/progs/git-repo/OSH/osh-js/source/core/event/EventType.js","webpack:////home/nevro/progs/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizer.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Math","pow","isDefined","v","Status","dataSources","replaySpeed","timerResolution","this","dataSourceMap","bufferingTime","startBufferingTime","tsRun","maxBufferingTime","ds","addDataSource","dataSourceId","data","status","console","log","performance","now","timeoutBuffering","setTimeout","processData","latency","timeStamp","dataBuffer","push","close","currentDsId","currentDs","tsRef","clockTimeRef","length","interval","setInterval","computeNextData","refClockTime","currentDsToShift","maxLatency","minLatency","min","timeOut","dClock","rec","shift","onData","id","dataSource","timedOut","warn","clearInterval","clearTimeout","EventType","bcChannels","dataSynchronizerAlgo","init","dataSourceBroadCastChannel","self","currentTime","topicTime","topicData","timeBroadcastChannel","addDataSources","BroadcastChannel","postMessage","values","type","timestamp","onmessage","event","timeTopic","message","dataTopic","setStatus","reset","onclose"],"mappings":"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","file":"WorkerName.55b2c0b79dd45e39b1f8.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nexport const MAX_LONG = Math.pow(2, 53) + 1;\n\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\nexport function isDefined(v) {\n    return typeof (v) !== 'undefined' && v !== null;\n}\n\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\nexport function hasValue(v) {\n    return isDefined(v) && v !== null;\n}\n\n/**\n Global helper method to transform hex color into RGBA\n */\nexport function hex2rgb(hex){\n    const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n    return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\nexport function hasType(v, expectedType) {\n    let hasVal = hasValue(v);\n    return hasVal && typeof (v) === expectedType;\n}\n\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\nexport function isObject(v, letName) {\n    return hasType(v, 'object', letName);\n}\n\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\nexport function isArray(v) {\n    return isDefined(v) && Array.isArray(v);\n}\n\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\nexport function isFunction(v, letName) {\n    return hasType(v, 'function', letName);\n}\n\n/**\n Assert that a letiable or object attribute is defined\n **/\nexport function assertDefined(v, letName = 'letiable') {\n    if (!isDefined(v)) {\n        throw letName + \" must be defined\";\n    }\n    return v;\n}\n\nexport function assertTrue(v, letName = 'letiable') {\n    if (!isDefined(v) || !v) {\n        throw letName;\n    }\n    return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\nexport function assertType(v, expectedType, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (typeof (v) !== expectedType) {\n        throw letName + \" must be of type \" + expectedType;\n    }\n    return v;\n}\n\n/**\n Assert that a letiable or object attribute is a string\n **/\nexport function assertBoolean(v, letName) {\n    return assertType(v, 'boolean', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a string\n **/\nexport function assertString(v, letName) {\n    return assertType(v, 'string', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a number\n **/\nexport function assertNumber(v, letName) {\n    return assertType(v, 'number', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a number\n **/\nexport function assertPositive(v, letName) {\n    assertNumber(v, letName);\n    if (v <= 0) {\n        throw letName + \" must be a positive number\";\n    }\n}\n\n/**\n Assert that a letiable or object attribute is an object\n **/\nexport function assertObject(v, letName) {\n    return assertType(v, 'object', letName);\n}\n\n/**\n Assert that a letiable or object attribute is an object\n **/\nexport function assertArray(v, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (!Array.isArray(v)) {\n        throw letName + \" must be an array\";\n    }\n    return v;\n}\n\n/**\n Assert that a letiable or object attribute is a function\n **/\nexport function assertFunction(v, letName) {\n    return assertType(v, 'function', letName);\n}\n\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\nexport function assertHasValue(v, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (!hasValue(v)) {\n        throw letName + \" must not be null\";\n    }\n    return v;\n}\n\n/**\n *\n * @return {String}\n */\nexport function randomUUID() {\n    return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\nexport function stampUUID(obj) {\n    obj._osh_id = obj._osh_id || randomUUID();\n    return obj._osh_id;\n}\n\n//buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\nexport function ParseBytes(buffer, offset, type) {\n    let view = new DataView(buffer);\n\n    //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n    //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n    //and unsignedLong\n    let typeMap = {\n        double: function (offset) {\n            return {val: view.getFloat64(offset), bytes: 8};\n        },\n        float64: function (offset) {\n            return {val: view.getFloat64(offset), bytes: 8};\n        },\n        float32: function (offset) {\n            return {val: view.getFloat32(offset), bytes: 4};\n        },\n        signedByte: function (offset) {\n            return {val: view.getInt8(offset), bytes: 1};\n        },\n        signedInt: function (offset) {\n            return {val: view.getInt32(offset), bytes: 4};\n        },\n        signedShort: function (offset) {\n            return {val: view.getInt16(offset), bytes: 2};\n        },\n        unsignedByte: function (offset) {\n            return {val: view.getUint8(offset), bytes: 1};\n        },\n        unsignedInt: function (offset) {\n            return {val: view.getUint32(offset), bytes: 4};\n        },\n        unsignedShort: function (offset) {\n            return {val: view.getUint16(offset), bytes: 2};\n        },\n        //TODO: string-utf-8:\n    };\n    return typeMap[type](offset);\n}\n\n//This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\nexport function ReadData(struct, data, offsetBytes) {\n    let offset = offsetBytes;\n    for (let i = 0; i < struct.fields.length; i++) {\n        let currFieldStruct = struct.fields[i];\n        if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n            let ret = ParseBytes(data, offset, currFieldStruct.type);\n            currFieldStruct.val = ret.val;\n            offset += ret.bytes;\n        } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n            //check if count is a reference to another letiable\n            if (isNaN(currFieldStruct.count)) {\n                let id = currFieldStruct.count;\n                let fieldName = struct.id2FieldMap[id];\n                currFieldStruct.count = struct.findFieldByName(fieldName).val;\n            }\n            for (let c = 0; c < currFieldStruct.count; c++) {\n                for (let j = 0; j < currFieldStruct.fields.length; j++) {\n                    let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n                    offset = ReadData(field, data, offset);\n                    currFieldStruct.val.push(field);\n                }\n            }\n        }\n    }\n    return offset;\n}\n\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\nexport function GetResultObject(resultStructure) {\n    //TODO: handle cases for nested arrays / matrix data types\n    let result = {};\n    for (let i = 0; i < resultStructure.fields.length; i++) {\n        if (isDefined(resultStructure.fields[i].count)) {\n            result[resultStructure.fields[i].name] = [];\n            for (let c = 0; c < resultStructure.fields[i].count; c++) {\n                let item = {};\n                for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n                    item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n                }\n                result[resultStructure.fields[i].name].push(item);\n            }\n        } else {\n            result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n        }\n    }\n    return result;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isOpera() {\n    return (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isFirefox() {\n    return typeof InstallTrigger !== 'undefined';\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isSafari() {\n    return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isChrome() {\n    return !!window.chrome && !!window.chrome.webstore;\n}\n\n/**\n *\n * @return {*|boolean}\n */\nexport function isBlink() {\n    return (isChrome || isOpera) && !!window.CSS;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\nexport function isArrayIntersect(a, b) {\n    return a.filter(function (element) {\n        return b.indexOf(element) > -1;\n    }).length > 0;\n}\n\n\n/**\n *\n * @param o\n * @return {boolean}\n */\nexport function isElement(o) {\n    return (\n      typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n        o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\"\n    );\n}\n\n/**\n *\n * @return {*}\n */\nexport function isWebWorker() {\n    return isDefined(Worker);\n}\n\n/**\n *\n * @param div\n */\nexport function takeScreenShot(div) {\n}\n\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\nexport function removeCss(div, css) {\n    let divCss = div.className;\n    css = divCss.replace(css, \"\");\n    div.className = css;\n}\n\n\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\nexport function addCss(div, css) {\n    div.setAttribute(\"class\", div.className + \" \" + css);\n}\n\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\nexport function removeLastCharIfExist(value) {\n    if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n        return value;\n    }\n\n    return value.substring(0, value.length - 1);\n}\n\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\nexport function roundHalf(num) {\n    return Math.round(num*2)/2;\n}\n\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n        var now = new Date().getTime(),\n            last = now - timestamp;\n\n        if (last < wait && last >= 0) {\n            timeout = setTimeout(later, wait - last);\n        } else {\n            timeout = null;\n            if (!immediate) {\n                result = func.apply(context, args);\n                if (!timeout) context = args = null;\n            }\n        }\n    };\n\n    return function() {\n        context = this;\n        args = arguments;\n        timestamp = new Date().getTime();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n            result = func.apply(context, args);\n            context = args = null;\n        }\n\n        return result;\n    };\n};\n\nexport function throttle(func, wait, leading, trailing, context) {\n    var ctx, args, result;\n    var timeout = null;\n    var previous = 0;\n    var later = function() {\n        previous = new Date;\n        timeout = null;\n        result = func.apply(ctx, args);\n    };\n    return function() {\n        var now = new Date;\n        if (!previous && !leading) previous = now;\n        var remaining = wait - (now - previous);\n        ctx = context || this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(ctx, args);\n        } else if (!timeout && trailing) {\n            // Sinon on s’endort pendant le temps restant\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n};\n\nexport function merge (target, source) {\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n    for (const key of Object.keys(source)) {\n        if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]))\n    }\n\n    // Join `target` and modified `source`\n    Object.assign(target || {}, source)\n    return target\n};\n\nexport function rgbaToArray(str) {\n    let startIdxValue = str.indexOf('(') + 1;\n    let endIdxValue = str.indexOf(')');\n    let values = str.substr(startIdxValue, endIdxValue-startIdxValue);\n    return values.split(',').map(Number);\n}\n","/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nexport const Status = {\n    CONNECTING: \"connecting\",\n    CONNECTED:  \"connected\",\n    DISCONNECTED: \"disconnected\",\n    CLOSED_ERROR: \"closed-error\"\n};\n","import {isDefined} from \"../utils/Utils.js\";\nimport {Status} from \"../protocol/Status.js\";\n\nclass DataSynchronizerAlgo {\n    constructor(dataSources, replaySpeed = 1, timerResolution = 5) {\n        this.dataSourceMap = {};\n        this.bufferingTime = 1000;\n        this.startBufferingTime = -1;\n        this.tsRun = 0;\n        this.replaySpeed = replaySpeed;\n        this.timerResolution = timerResolution;\n        let maxBufferingTime = -1;\n\n        for (let ds of dataSources) {\n            this.addDataSource(ds);\n            maxBufferingTime = ds.bufferingTime > maxBufferingTime ? ds.bufferingTime : maxBufferingTime;\n        }\n        if (maxBufferingTime !== -1) {\n            this.bufferingTime = maxBufferingTime;\n        }\n    }\n\n    push(dataSourceId, data) {\n        const ds = this.dataSourceMap[dataSourceId];\n        if (ds.status === Status.DISCONNECTED) {\n            return;\n        }\n\n        if (this.startBufferingTime === -1) {\n            console.log(`synchronizer buffering data for ${this.bufferingTime}ms..`);\n            this.startBufferingTime = performance.now();\n            // start iterating on data after bufferingTime\n            this.timeoutBuffering = setTimeout(() => this.processData(), this.bufferingTime);\n        }\n\n        let latency = 0;\n        if (this.tsRun > 0) {\n            latency = this.tsRun - data.timeStamp;\n        }\n        ds.latency = latency > ds.latency ? latency : (ds.latency + latency) / 2;\n        ds.dataBuffer.push(data);\n    }\n\n    reset() {\n        console.log('reset synchronizer algo')\n        this.close();\n        for (let currentDsId in this.dataSourceMap) {\n            const currentDs = this.dataSourceMap[currentDsId];\n            currentDs.dataBuffer = [];\n            currentDs.startBufferingTime = -1;\n            currentDs.latency=0;\n            currentDs.status= Status.DISCONNECTED;\n        }\n        this.tsRun = 0;\n        this.startBufferingTime = -1;\n    }\n\n    processData() {\n        // the timeout has been cancelled\n        if(!isDefined(this.timeoutBuffering)) {\n            return;\n        }\n        let tsRef = -1;\n        let clockTimeRef = performance.now();\n\n        // get reference start timestamp\n        // the reference start timestamp should the oldest one\n        let currentDs;\n        for (let currentDsId in this.dataSourceMap) {\n            currentDs = this.dataSourceMap[currentDsId];\n            if (currentDs.status === Status.DISCONNECTED) {\n                continue;\n            }\n            if (currentDs.dataBuffer.length > 0) {\n                tsRef = (tsRef === -1 || currentDs.dataBuffer[0].timeStamp < tsRef) ? currentDs.dataBuffer[0].timeStamp :\n                    tsRef;\n            }\n        }\n\n        this.interval = setInterval(() => {\n            // 1) return the oldest data if any\n            while (this.computeNextData(tsRef, clockTimeRef)) ;\n\n        }, this.timerResolution);\n    }\n\n    /**\n     * Compute the next data if any. We return only 1 value for this iteration. If there are multiple values to return,\n     * we return only the oldest one.\n     * @param tsRef - the timestamp of the first data\n     * @param refClockTime - the absolute diff time really spent\n     */\n    computeNextData(tsRef, refClockTime) {\n        let currentDs;\n        let currentDsToShift = null;\n\n        // compute max latency\n        let maxLatency = 0;\n        let minLatency = 0;\n        for (let currentDsId in this.dataSourceMap) {\n            currentDs = this.dataSourceMap[currentDsId];\n            if (currentDs.status === Status.DISCONNECTED) {\n                continue;\n            }\n            if (currentDs.latency > 0) {\n                let latency = Math.min(currentDs.latency, currentDs.timeOut);\n                maxLatency = (latency > maxLatency) ? latency : maxLatency;\n                minLatency = (currentDs.latency < minLatency) ? currentDs.latency : minLatency;\n            }\n        }\n\n        const dClock = performance.now() - refClockTime;\n        this.tsRun = tsRef + dClock;\n\n        // compute next data to return\n        for (let currentDsId in this.dataSourceMap) {\n            currentDs = this.dataSourceMap[currentDsId];\n            if (currentDs.status === Status.DISCONNECTED) {\n                continue;\n            }\n            if (currentDs.dataBuffer.length > 0) {\n                const dTs = currentDs.dataBuffer[0].timeStamp - tsRef;\n                const dClockAdj = dClock - maxLatency;\n                // we use an intermediate object to store the data to shift because we want to return the oldest one\n                // only\n                if (dTs <= dClockAdj * this.replaySpeed) {\n                    // no other one to compare\n                    if (currentDsToShift === null) {\n                        currentDsToShift = currentDs;\n                    } else {\n                        // take the oldest data\n                        currentDsToShift = (currentDsToShift.dataBuffer[0].timeStamp < currentDs.dataBuffer[0].timeStamp) ?\n                            currentDsToShift : currentDs;\n                    }\n                }\n            }\n        }\n\n        // finally pop the data from DS queue\n        if (currentDsToShift !== null) {\n            let rec = currentDsToShift.dataBuffer.shift();\n\n            // add latency flag to data record before we dispatch it\n            // this is relative latency in millis compared to the DS with the lowest latency\n            // so it is accurate even if local device time is not set properly\n            rec['@latency'] = currentDs.latency - minLatency;\n\n            this.onData(currentDsToShift.id, rec);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Add dataSource to be synchronized\n     * @param {DataSource} dataSource - the dataSource to synchronize\n     */\n    addDataSource(dataSource) {\n        this.dataSourceMap[dataSource.id] = {\n            bufferingTime: dataSource.bufferingTime,\n            timeOut: dataSource.timeOut || 0,\n            dataBuffer: [],\n            startBufferingTime: -1,\n            id: dataSource.id,\n            timedOut: false,\n            name: dataSource.name || dataSource.id,\n            latency: 0,\n            status: Status.DISCONNECTED //MEANING Enabled, 0 = Disabled\n        };\n    }\n\n    onData(dataSourceId, data) {\n    }\n\n    /**\n     * Change the dataSource status\n     * @param {Status} status - the new status\n     * @param {String} dataSourceId - the corresponding dataSource id\n     */\n    setStatus(dataSourceId, status) {\n        if (dataSourceId in this.dataSourceMap) {\n            this.dataSourceMap[dataSourceId].status = status;\n            if (status === Status.DISCONNECTED) {\n                // reset latency and buffer\n                this.dataSourceMap[dataSourceId].latency = 0;\n                this.dataSourceMap[dataSourceId].dataBuffer = [];\n            }\n\n            console.warn(status+' DataSource ' + dataSourceId + ' from the synchronizer ');\n        }\n    }\n\n    close() {\n        if (isDefined(this.interval)) {\n            clearInterval(this.interval);\n            this.interval = null;\n        }\n        if(isDefined(this.timeoutBuffering)) {\n            clearTimeout(this.timeoutBuffering);\n            this.timeoutBuffering = null;\n        }\n        console.log(\"Data synchronizer terminated successfully\");\n\n    }\n}\n\nexport default DataSynchronizerAlgo;\n","export const DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nexport const TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\n\nexport const DATASOURCE_DATA_TOPIC = 'datasource-data-';\nexport const DATASOURCE_TIME_TOPIC = 'datasource-time-';\n\nexport const FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\n","export const EventType = {\n    DATA: 'data',\n    STATUS: 'status',\n    TIME_CHANGED: 'time-changed'\n};\n","import DataSynchronizerAlgo from \"./DataSynchronizerAlgo.js\";\nimport {DATASOURCE_DATA_TOPIC} from \"../Constants.js\";\nimport {EventType} from \"../event/EventType.js\";\n\nconst bcChannels = {};\nlet dataSynchronizerAlgo;\n\nlet init = false;\nlet dataSourceBroadCastChannel = null;\nself.currentTime = -1;\n\nconst dataSources = {};\nlet timeBroadcastChannel = null;\nlet topicTime;\nlet topicData;\n\nself.onmessage = (event) => {\n    if(event.data.message === 'init') {\n        dataSynchronizerAlgo = new DataSynchronizerAlgo(\n            event.data.dataSources,\n            event.data.replaySpeed,\n            event.data.timerResolution\n        );\n        dataSynchronizerAlgo.onData = onData;\n        init = true;\n        addDataSources(event.data.dataSources);\n        topicData = event.data.dataTopic;\n        topicTime = event.data.timeTopic;\n        initBroadcastChannel(topicData,topicTime );\n    } else if(event.data.message === 'add' && event.data.dataSources) {\n        addDataSources(event.data.dataSources);\n    } else if(event.data.message === 'current-time') {\n        self.postMessage({\n            message: 'current-time',\n            data: self.currentTime\n        });\n    }  else if(event.data.message === 'reset') {\n        if(dataSynchronizerAlgo !== null) {\n            dataSynchronizerAlgo.reset();\n        }\n        timeBroadcastChannel.postMessage({\n            type: EventType.TIME_CHANGED\n        });\n    }  else if(event.data.message === 'replay-speed') {\n        if(dataSynchronizerAlgo !== null) {\n            dataSynchronizerAlgo.replaySpeed = event.data.replaySpeed;\n        }\n    } else if(event.data.message === 'data') {\n        if(dataSynchronizerAlgo !== null) {\n            dataSynchronizerAlgo.push(event.data.dataSourceId, {\n                data: event.data.data,\n                timeStamp: event.data.timeStamp\n            });\n        }\n    }\n}\n\nfunction initBroadcastChannel(dataTopic, timeTopic) {\n    dataSourceBroadCastChannel = new BroadcastChannel(dataTopic);\n    dataSourceBroadCastChannel.onmessage = (event) => {\n        if(event.data.type === EventType.DATA) {\n            for(let i=0; i < event.data.values.length;i++) {\n                dataSynchronizerAlgo.push(\n                    event.data.dataSourceId,\n                    {\n                        ...event.data.values[i]\n                    }\n                );\n            }\n        } else if(event.data.type === EventType.STATUS) {\n            const dataSourceId = event.data.dataSourceId;\n            dataSynchronizerAlgo.setStatus(dataSourceId, event.data.status);\n            // bubble the message\n            bcChannels[dataSourceId].postMessage(event.data);\n        }\n    }\n\n    timeBroadcastChannel = new BroadcastChannel(timeTopic);\n\n}\n\n/**\n *\n * @param dataSources\n */\nfunction addDataSources(dataSources) {\n    for(let dataSource of dataSources) {\n        addDataSource(dataSource);\n    }\n}\n\nfunction addDataSource(dataSource) {\n    dataSynchronizerAlgo.addDataSource(dataSource);\n    // create a BC to push back the synchronized data into the DATA Stream.\n    bcChannels[dataSource.id] = new BroadcastChannel(DATASOURCE_DATA_TOPIC + dataSource.id);\n\n    if(!(dataSource.id in dataSources)) {\n        dataSources[dataSource.id] = dataSource;\n    }\n}\n\nfunction onData(dataSourceId, data) {\n    self.currentTime = data.timeStamp;\n    bcChannels[dataSourceId].postMessage({\n            values: [data],\n            dataSourceId:dataSourceId,\n            type: EventType.DATA\n        }\n    );\n\n    timeBroadcastChannel.postMessage({\n        timestamp: data.timeStamp,\n        dataSourceId: dataSourceId,\n        type: EventType.DATA\n    });\n}\n\n\nself.onclose = function() {\n    dataSynchronizerAlgo.close();\n    console.log(\"Data Synchronizer has been terminated successfully\");\n}\n"],"sourceRoot":""}