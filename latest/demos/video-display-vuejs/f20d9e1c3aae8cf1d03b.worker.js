!function(Q){var B={};function I(F){if(B[F])return B[F].exports;var U=B[F]={i:F,l:!1,exports:{}};return Q[F].call(U.exports,U,U.exports,I),U.l=!0,U.exports}I.m=Q,I.c=B,I.d=function(Q,B,F){I.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:F})},I.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},I.t=function(Q,B){if(1&B&&(Q=I(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(I.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var U in Q)I.d(F,U,function(B){return Q[B]}.bind(null,U));return F},I.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(B,"a",B),B},I.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},I.p="",I(I.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== 'undefined' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, 'object', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = 'letiable') {\n  if (!isDefined(v)) {\n    throw letName + \" must be defined\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + \" must be of type \" + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, 'boolean', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, 'string', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, 'number', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + \" must be a positive number\";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, 'object', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + \" must be an array\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + \" must not be null\";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== 'undefined';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, \"\");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute(\"class\", div.className + \" \" + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/parsers/DataSourceParser.js\n\n\nclass DataSourceParser_DataSourceParser {\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.protocol the connector protocol\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Date} properties.lastTimeStamp - the last timestamp to start at this time (ISO String)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @param {Number} properties.customUrlParams.video_bitrate - define a custom bitrate (in b/s)\n   * @param {Number} properties.customUrlParams.video_scale - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} properties.customUrlParams.video_width - define a custom width\n   * @param {Number} properties.customUrlParams.video_height - define a custom height\n   * @return {String} the full url\n   */\n  buildUrl(properties) {\n    let url = \"\"; // adds protocol\n\n    url += properties.protocol + \"://\"; // adds endpoint url\n\n    url += properties.endpointUrl + \"?\"; // adds service\n\n    url += \"service=\" + properties.service + \"&\"; // adds version\n\n    url += \"version=2.0&\"; // adds request\n\n    url += \"request=GetResult&\"; // adds offering\n\n    url += \"offering=\" + properties.offeringID + \"&\"; // adds feature of interest urn\n\n    if (properties.foiURN && properties.foiURN !== '') {\n      url += 'featureOfInterest=' + properties.foiURN + '&';\n    } // adds observedProperty\n\n\n    url += \"observedProperty=\" + properties.observedProperty + \"&\"; // adds temporalFilter\n\n    const stTime = isDefined(properties.lastTimeStamp) ? properties.lastTimeStamp : properties.startTime;\n    this.lastStartTime = properties.startTime;\n    let endTime = properties.endTime;\n    url += \"temporalFilter=phenomenonTime,\" + stTime + \"/\" + endTime + \"&\";\n\n    if (properties.replaySpeed) {\n      // adds replaySpeed\n      url += \"replaySpeed=\" + properties.replaySpeed;\n    } // adds responseFormat (optional)\n\n\n    if (properties.responseFormat) {\n      url += \"&responseFormat=\" + properties.responseFormat;\n    }\n\n    if (isDefined(properties.customUrlParams) && Object.keys(properties.customUrlParams).length > 0) {\n      url += '&';\n\n      for (let key in properties.customUrlParams) {\n        url += key + '=' + properties.customUrlParams[key] + '&';\n      }\n\n      if (url.endsWith('&')) {\n        url = url.slice(0, -1);\n      }\n    }\n\n    return url;\n  }\n\n}\n\n/* harmony default export */ var parsers_DataSourceParser = (DataSourceParser_DataSourceParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/parsers/Video.parser.js\n\n\nclass Video_parser_VideoParser extends parsers_DataSourceParser {\n  /**\n   * Extracts timestamp from the message. The timestamp is corresponding to the first 64bits of the binary message.\n   * @param {ArrayBuffer} data - the data to parse\n   * @return {Number} the extracted timestamp\n   */\n  parseTimeStamp(data) {\n    // read double time stamp as big endian\n    return new DataView(data).getFloat64(0, false) * 1000;\n  }\n  /**\n   * Extract data from the message. The H264 NAL unit starts at offset 12 after 8-bytes time stamp and 4-bytes frame length.\n   * @param {ArrayBuffer} data - the data to parse\n   * @return {Uint8Array} the parsed data\n   */\n\n\n  parseData(data) {\n    return {\n      // H264 NAL unit starts at offset 12 after 8-bytes time stamp and 4-bytes frame length\n      frameData: new Uint8Array(data, 12, data.byteLength - 12),\n      roll: 0\n    };\n  }\n\n}\n\n/* harmony default export */ var Video_parser = (Video_parser_VideoParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Status.js\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/DataConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataConnector is the abstract class used to create different connectors.\n */\n\nclass DataConnector_DataConnector {\n  /**\n   * @param {String} url - The full url used to connect to the data stream\n   */\n  constructor(url) {\n    this.url = url;\n    this.id = \"DataConnector-\" + randomUUID();\n    this.reconnectTimeout = 1000 * 60 * 2; //2 min\n\n    this.status = Status.DISCONNECTED;\n    this.reconnectionInterval = -1;\n  }\n\n  checkAndClearReconnection() {\n    if (this.reconnectionInterval !== -1) {\n      clearInterval(this.reconnectionInterval);\n      this.reconnectionInterval = -1;\n    }\n  }\n\n  disconnect() {\n    this.checkStatus(Status.DISCONNECTED);\n    this.checkAndClearReconnection();\n  }\n  /**\n   * Sets the url\n   * @param url\n   */\n\n\n  setUrl(url) {\n    this.url = url;\n  }\n  /**\n   * The data connector default id.\n   * @return {String}\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * The stream url.\n   * @return {String}\n   */\n\n\n  getUrl() {\n    return this.url;\n  }\n  /**\n   * Sets the reconnection timeout\n   * @param {Number} timeout - delay in milliseconds before reconnecting dataSource\n   */\n\n\n  setReconnectTimeout(timeout) {\n    this.reconnectTimeout = timeout;\n  }\n\n  onReconnect() {\n    return true;\n  }\n\n  connect() {}\n\n  forceReconnect() {\n    this.disconnect();\n    this.connect();\n  }\n  /**\n   * Called when the connection STATUS changes\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {}\n  /**\n   * Check a change of the status and call the corresponding callbacks if necessary\n   * @param {Status} status - the currentStatus\n   */\n\n\n  checkStatus(status) {\n    if (status !== this.status) {\n      this.onChangeStatus(status);\n      this.status = status;\n    }\n  }\n  /**\n   * Called when the connector has been disconnected\n   */\n\n\n  onDisconnect() {}\n  /**\n   * Called when the connector has been connected\n   */\n\n\n  onConnect() {}\n\n}\n\n/* harmony default export */ var dataconnector_DataConnector = (DataConnector_DataConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/WebSocketConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * Defines the WebSocketConnector to connect to a remote server by creating a WebSocket channel.\n * @extends DataConnector\n * @example\n * import WebSocketConnector from 'osh/dataconnector/WebSocketConnector.js';\n *\n * let url = ...;\n * let connector = new WebSocketConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nclass WebSocketConnector_WebSocketConnector extends dataconnector_DataConnector {\n  /**\n   *\n   * @param properties -\n   */\n  constructor(properties) {\n    super(properties);\n    this.interval = -1;\n    this.lastReceiveTime = 0;\n  }\n  /**\n   * Connect to the webSocket. If the system supports WebWorker, it will automatically creates one otherwise use\n   * the main thread.\n   */\n\n\n  async connect() {\n    if (!this.init) {\n      this.closed = false;\n      this.init = true; //creates Web Socket\n\n      this.ws = new WebSocket(this.getUrl());\n      this.ws.binaryType = 'arraybuffer';\n\n      this.ws.onmessage = function (event) {\n        this.checkAndClearReconnection();\n        this.checkStatus(Status.CONNECTED);\n        this.lastReceiveTime = Date.now(); //callback data on message received\n\n        if (event.data.byteLength > 0) {\n          this.onMessage(event.data);\n        }\n      }.bind(this); // closes socket if any errors occur\n\n\n      this.ws.onerror = function (event) {\n        console.error('WebSocket stream error');\n        this.checkStatus(Status.DISCONNECTED);\n        this.init = false;\n        this.lastReceiveTime = -1;\n        this.createReconnection();\n      }.bind(this);\n\n      this.ws.onclose = event => {\n        this.checkStatus(Status.DISCONNECTED);\n        console.warn('WebSocket stream closed: ', event.reason, event.code);\n        this.init = false;\n\n        if (event.code !== 1000 && !this.closed) {\n          this.createReconnection();\n        }\n      };\n    }\n  }\n\n  createReconnection() {\n    if (!this.closed && this.reconnectionInterval === -1 && this.onReconnect()) {\n      this.reconnectionInterval = setInterval(function () {\n        let delta = Date.now() - this.lastReceiveTime; // -1 means the WS went in error\n\n        if (this.lastReceiveTime === -1 || delta >= this.reconnectTimeout) {\n          console.warn('trying to reconnect', this.url);\n          this.connect();\n        }\n      }.bind(this), this.reconnectTimeout);\n    }\n  }\n  /**\n   * Disconnects and close the websocket.\n   */\n\n\n  disconnect() {\n    super.disconnect();\n    this.init = false;\n    this.closed = true;\n\n    if (this.ws != null && this.ws.readyState !== WebSocket.CLOSED) {\n      this.ws.close();\n    }\n  }\n  /**\n   * The onMessage method used by the websocket to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n\n  isConnected() {\n    return this.ws != null && this.ws.readyState === WebSocket.OPEN;\n  }\n\n}\n\n/* harmony default export */ var dataconnector_WebSocketConnector = (WebSocketConnector_WebSocketConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Ajax.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * Defines the AjaxConnector to connect to a remote server by making AjaxRequest.\n * @extends DataConnector\n * @example\n * import Ajax from 'osh/dataconnector/Ajax.js';\n *\n * let request = ...;\n * let connector = new Ajax(url);\n *\n * // handle onSuccess\n * connector.onSuccess = function(event) {\n *  // does something\n * }\n *\n * connector.onError = function(event) {\n *  // does something\n * }\n *\n * // send request\n * connector.sendRequest(request);\n *\n */\n\nclass Ajax_Ajax extends dataconnector_DataConnector {\n  /**\n   * Creates Ajax.\n   * @param {String} url -\n   * @param {Object} properties -\n   * @param {String} properties.method -\n   * @param {String} properties.responseType -\n   */\n  constructor(url, properties) {\n    super(url);\n    this.method = \"POST\";\n    this.responseType = \"arraybuffer\";\n\n    if (isDefined(properties)) {\n      if (properties.method) {\n        this.method = properties.method;\n      }\n\n      if (properties.responseType) {\n        this.responseType = properties.responseType;\n      }\n    }\n  }\n  /**\n   * Sends the request to the defined server.\n   * @param {String} request - The Http request\n   * @param {String} extraUrl - get query parameters\n   */\n\n\n  sendRequest(request, extraUrl) {\n    let self = this;\n    let xmlhttp = new XMLHttpRequest();\n    xmlhttp.withCredentials = true;\n    xmlhttp.timeout = 60000;\n\n    if (request === null) {\n      if (isDefined(extraUrl)) {\n        xmlhttp.open(\"GET\", this.getUrl() + \"?\" + extraUrl, true);\n      } else {\n        xmlhttp.open(\"GET\", this.getUrl(), true);\n      }\n\n      xmlhttp.responseType = this.responseType;\n\n      xmlhttp.onload = oEvent => {\n        if (xmlhttp.response) {\n          self.onMessage(xmlhttp.response);\n        }\n      };\n\n      xmlhttp.ontimeout = e => {\n        console.log(\"Timeout\");\n      };\n\n      xmlhttp.send(null);\n    } else {\n      xmlhttp.open(\"POST\", this.getUrl(), true);\n      xmlhttp.setRequestHeader('Content-Type', 'text/xml');\n      xmlhttp.send(request);\n\n      xmlhttp.onreadystatechange = () => {\n        if (xmlhttp.readyState < 4) {// while waiting response from server\n        } else if (xmlhttp.readyState === 4) {\n          // 4 = Response from server has been completely loaded.\n          if (xmlhttp.status === 200 && xmlhttp.status < 300) {\n            // http status between 200 to 299 are all successful\n            self.onSuccess(xmlhttp.responseText);\n          } else {\n            self.onError(\"\");\n          }\n        }\n      };\n    }\n  }\n  /**\n   * This is the callback method in case of getting error connection.\n   * @param event The error details\n   * @event\n   */\n\n\n  onError(event) {}\n  /**\n   * This is the callback method in case of getting success connection.\n   * @param event\n   * @event\n   */\n\n\n  onSuccess(event) {}\n  /**\n   * Sends the request\n   * @private\n   */\n\n\n  connect() {\n    this.sendRequest(null);\n  }\n\n}\n\n/* harmony default export */ var dataconnector_Ajax = (Ajax_Ajax);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/TopicConnector.js\n\n\nclass TopicConnector_TopicConnector extends dataconnector_DataConnector {\n  /**\n   *\n   * @param properties -\n   */\n  constructor(properties) {\n    super(properties);\n    this.lastReceiveTime = -1;\n    this.interval = -1;\n    this.broadcastChannel = null;\n  }\n  /**\n   * Connect to the broadcastChannel.\n   */\n\n\n  connect() {\n    if (this.broadcastChannel === null) {\n      //creates broadcastChannel\n      this.broadcastChannel = new BroadcastChannel(this.getUrl());\n\n      this.broadcastChannel.onmessage = event => {\n        this.lastReceiveTime = Date.now(); //callback data on message received\n\n        this.onMessage(event.data.data);\n      }; // closes socket if any errors occur\n\n\n      this.broadcastChannel.onerror = event => {\n        console.error('BroadcastChannel stream error: ' + event);\n        this.broadcastChannel.close();\n        this.init = false;\n        this.lastReceiveTime = -1;\n      }; //init the reconnect handler\n\n\n      if (this.interval === -1) {\n        this.interval = setInterval(function () {\n          let delta = Date.now() - this.lastReceiveTime; // -1 means the WS went in error\n\n          if (this.lastReceiveTime === -1 || delta >= this.reconnectTimeout) {\n            console.warn(`trying to reconnect after ${this.reconnectTimeout} ..`);\n            this.reconnect();\n          }\n        }.bind(this), this.reconnectTimeout);\n      }\n    }\n  }\n  /**\n   * Disconnects the websocket.\n   */\n\n\n  disconnect() {\n    this.fullDisconnect(true);\n  }\n  /**\n   * Fully disconnect the websocket connection by sending a close message to the webWorker.\n   * @param {Boolean} removeInterval  - force removing the interval\n   */\n\n\n  fullDisconnect(removeInterval) {\n    if (this.broadcastChannel != null) {\n      this.broadcastChannel.close();\n      this.broadcastChannel = null;\n    }\n\n    if (removeInterval) {\n      clearInterval(this.interval);\n    }\n  }\n  /**\n   * Try to reconnect if the connexion if closed\n   */\n\n\n  reconnect() {\n    this.onReconnect();\n\n    if (this.init) {\n      this.fullDisconnect(false);\n    }\n\n    this.connect();\n  }\n  /**\n   * The onMessage method used by the websocket to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n  /**\n   * Closes the webSocket.\n   */\n\n\n  close() {\n    this.disconnect();\n  }\n\n}\n\n/* harmony default export */ var dataconnector_TopicConnector = (TopicConnector_TopicConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/event/EventType.js\nconst EventType = {\n  DATA: 'data',\n  STATUS: 'status'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/workers/DataSourceHandler.js\n\n\n\n\n\n\n\nclass DataSourceHandler_DataSourceHandler {\n  constructor(parser) {\n    this.parser = parser;\n    this.connector = null;\n    this.lastTimeStamp = null;\n    this.lastStartTime = 'now';\n    this.timeShift = 0;\n    this.reconnectTimeout = 1000 * 10; // 10 secs\n\n    this.values = [];\n  }\n\n  createConnector(propertiesStr, topic, dataSourceId) {\n    this.dataSourceId = dataSourceId; // check for existing connector\n\n    if (this.connector !== null) {\n      this.connector.disconnect();\n      this.connector = null;\n    }\n\n    this.broadcastChannel = new BroadcastChannel(topic);\n    const properties = JSON.parse(propertiesStr);\n\n    if (isDefined(properties.fetch)) {\n      this.fetch = properties.fetch;\n    }\n\n    if (isDefined(properties.timeShift)) {\n      this.timeShift = properties.timeShift;\n    }\n\n    if (isDefined(properties.bufferingTime)) {\n      this.bufferingTime = properties.bufferingTime;\n    }\n\n    if (isDefined(properties.timeOut)) {\n      this.timeOut = properties.timeOut;\n    }\n\n    if (isDefined(properties.reconnectTimeout)) {\n      this.reconnectTimeout = properties.reconnectTimeout;\n    }\n\n    if (properties.startTime === 'now') {\n      this.batchSize = 1;\n    } else {\n      if (isDefined(properties.replaySpeed)) {\n        if (!isDefined(properties.batchSize)) {\n          this.batchSize = 1;\n        }\n      }\n\n      if (isDefined(properties.batchSize)) {\n        this.batchSize = properties.batchSize;\n      }\n    }\n\n    this.properties = properties;\n    this.createDataConnector(this.properties);\n  }\n  /**\n   * @private\n   */\n\n\n  createDataConnector(properties) {\n    const url = this.parser.buildUrl({ ...properties,\n      timeShift: this.timeShift\n    }); // checks if type is WebSocketConnector\n\n    if (properties.protocol.startsWith('ws')) {\n      this.connector = new dataconnector_WebSocketConnector(url); // connects the callback\n\n      this.connector.onMessage = this.onMessage.bind(this); // set the reconnectTimeout\n\n      this.connector.setReconnectTimeout(this.reconnectTimeout);\n    } else if (properties.protocol.startsWith('http')) {\n      this.connector = new dataconnector_Ajax(url);\n      this.connector.responseType = 'arraybuffer'; // connects the callback\n\n      this.connector.onMessage = this.onMessage.bind(this); // set the reconnectTimeout\n\n      this.connector.setReconnectTimeout(this.reconnectTimeout);\n    } else if (properties.protocol.startsWith('topic')) {\n      this.connector = new dataconnector_TopicConnector(url); // connects the callback\n\n      this.connector.onMessage = this.onMessage.bind(this); // set the reconnectTimeout\n\n      this.connector.setReconnectTimeout(this.reconnectTimeout);\n    }\n\n    const lastStartTimeCst = this.parser.lastStartTime;\n    const lastProperties = properties;\n\n    if (this.connector !== null) {\n      // bind change connection STATUS\n      this.connector.onChangeStatus = this.onChangeStatus.bind(this);\n\n      this.connector.onReconnect = () => {\n        // if not real time, preserve last timestamp to reconnect at the last time received\n        // for that, we update the URL with the new last time received\n        if (lastStartTimeCst !== 'now') {\n          this.connector.setUrl(this.parser.buildUrl({ ...properties,\n            lastTimeStamp: isDefined(this.lastTimeStamp) ? new Date(this.lastTimeStamp).toISOString() : properties.startTime\n          }));\n        }\n\n        return true;\n      };\n    }\n  }\n  /**\n   * Sets the current topic to listen\n   * @param {String} topic - the topic to listen\n   */\n\n\n  setTopic(topic) {\n    if (this.broadcastChannel !== null) {\n      this.broadcastChannel.close();\n    }\n\n    this.broadcastChannel = new BroadcastChannel(topic);\n    this.topic = topic;\n  }\n\n  connect() {\n    if (this.connector !== null) {\n      this.connector.connect();\n    }\n  }\n\n  disconnect() {\n    if (this.connector !== null) {\n      this.connector.disconnect();\n    }\n  }\n\n  onMessage(event) {\n    const timeStamp = this.parser.parseTimeStamp(event) + this.timeShift;\n    const data = this.parser.parseData(event);\n    this.values.push({\n      data: data,\n      timeStamp: timeStamp\n    });\n    this.lastTimeStamp = timeStamp;\n\n    if (isDefined(this.batchSize) && this.values.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n  /**\n   * Send a change status event into the broadcast channel\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {\n    if (status === Status.DISCONNECTED) {\n      this.flush();\n    }\n\n    this.broadcastChannel.postMessage({\n      type: EventType.STATUS,\n      status: status,\n      dataSourceId: this.dataSourceId\n    });\n  }\n\n  getLastTimeStamp() {\n    return this.lastTimeStamp;\n  }\n\n  updateUrl(properties) {\n    this.disconnect();\n    let lastTimestamp = new Date(this.lastTimeStamp).toISOString();\n\n    if (properties.hasOwnProperty('startTime')) {\n      lastTimestamp = properties.startTime;\n    } else if (this.properties.startTime === 'now') {\n      //handle RealTime\n      lastTimestamp = 'now';\n    }\n\n    this.createDataConnector({ ...this.properties,\n      ...properties,\n      lastTimeStamp: lastTimestamp\n    });\n    this.connect();\n  }\n\n  flush() {\n    this.broadcastChannel.postMessage({\n      dataSourceId: this.dataSourceId,\n      type: EventType.DATA,\n      values: this.values.splice(0, this.values.length)\n    });\n  }\n\n  handleMessage(message, worker) {\n    if (message.message === 'init') {\n      this.createConnector(message.properties, message.topic, message.id);\n    } else if (message.message === 'connect') {\n      this.connect();\n    } else if (message.message === 'disconnect') {\n      this.disconnect();\n    } else if (message.message === 'topic') {\n      this.setTopic(message.topic);\n    } else if (message.message === 'last-timestamp') {\n      const lastTimeStamp = this.getLastTimeStamp();\n      worker.postMessage({\n        message: 'last-timestamp',\n        data: lastTimeStamp\n      });\n    } else if (message.message === 'update-url') {\n      this.updateUrl(message.data);\n    } else if (message.message === 'is-connected') {\n      worker.postMessage({\n        message: 'is-connected',\n        data: this.connector === null ? false : this.connector.isConnected()\n      });\n    }\n  }\n\n}\n\n/* harmony default export */ var workers_DataSourceHandler = (DataSourceHandler_DataSourceHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/workers/Video.worker.js\n\n\n\nconst dataSourceHandler = new workers_DataSourceHandler(new Video_parser());\n\nself.onmessage = (event) => {\n    dataSourceHandler.handleMessage(event.data, self);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3V0aWxzL1V0aWxzLmpzPzI0M2EiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL29zaC9kYXRhcmVjZWl2ZXIvcGFyc2Vycy9EYXRhU291cmNlUGFyc2VyLmpzPzYwZmYiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL29zaC9kYXRhcmVjZWl2ZXIvcGFyc2Vycy9WaWRlby5wYXJzZXIuanM/MjhkMSIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFjb25uZWN0b3IvU3RhdHVzLmpzPzA5ODciLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL29zaC9kYXRhY29ubmVjdG9yL0RhdGFDb25uZWN0b3IuanM/YzgzNiIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFjb25uZWN0b3IvV2ViU29ja2V0Q29ubmVjdG9yLmpzPzA1NWIiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL29zaC9kYXRhY29ubmVjdG9yL0FqYXguanM/MWZhZCIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFjb25uZWN0b3IvVG9waWNDb25uZWN0b3IuanM/NDgxZSIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2V2ZW50L0V2ZW50VHlwZS5qcz8xMmUxIiwid2VicGFjazovLy8vaG9tZS9uZXZyby9Qcm9ncy9wcm9ncy1sb2NhbC9naXQtcmVwby9PU0gvb3NoLWpzL3NvdXJjZS9vc2gvZGF0YXJlY2VpdmVyL3dvcmtlcnMvRGF0YVNvdXJjZUhhbmRsZXIuanM/YzRiMiIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1ZpZGVvLndvcmtlci5qcz8zZTljIl0sIm5hbWVzIjpbIk1BWF9MT05HIiwiTWF0aCIsInBvdyIsImlzRGVmaW5lZCIsInYiLCJoYXNWYWx1ZSIsImhhc1R5cGUiLCJleHBlY3RlZFR5cGUiLCJoYXNWYWwiLCJpc09iamVjdCIsImxldE5hbWUiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0Z1bmN0aW9uIiwiYXNzZXJ0RGVmaW5lZCIsImFzc2VydFR5cGUiLCJhc3NlcnRCb29sZWFuIiwiYXNzZXJ0U3RyaW5nIiwiYXNzZXJ0TnVtYmVyIiwiYXNzZXJ0UG9zaXRpdmUiLCJhc3NlcnRPYmplY3QiLCJhc3NlcnRBcnJheSIsImFzc2VydEZ1bmN0aW9uIiwiYXNzZXJ0SGFzVmFsdWUiLCJyYW5kb21VVUlEIiwicmVwbGFjZSIsImMiLCJyIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdGFtcFVVSUQiLCJvYmoiLCJfb3NoX2lkIiwiUGFyc2VCeXRlcyIsImJ1ZmZlciIsIm9mZnNldCIsInR5cGUiLCJ2aWV3IiwiRGF0YVZpZXciLCJ0eXBlTWFwIiwiZG91YmxlIiwidmFsIiwiZ2V0RmxvYXQ2NCIsImJ5dGVzIiwiZmxvYXQ2NCIsImZsb2F0MzIiLCJnZXRGbG9hdDMyIiwic2lnbmVkQnl0ZSIsImdldEludDgiLCJzaWduZWRJbnQiLCJnZXRJbnQzMiIsInNpZ25lZFNob3J0IiwiZ2V0SW50MTYiLCJ1bnNpZ25lZEJ5dGUiLCJnZXRVaW50OCIsInVuc2lnbmVkSW50IiwiZ2V0VWludDMyIiwidW5zaWduZWRTaG9ydCIsImdldFVpbnQxNiIsIlJlYWREYXRhIiwic3RydWN0IiwiZGF0YSIsIm9mZnNldEJ5dGVzIiwiaSIsImZpZWxkcyIsImxlbmd0aCIsImN1cnJGaWVsZFN0cnVjdCIsInJldCIsImNvdW50IiwiaXNOYU4iLCJpZCIsImZpZWxkTmFtZSIsImlkMkZpZWxkTWFwIiwiZmluZEZpZWxkQnlOYW1lIiwiaiIsImZpZWxkIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicHVzaCIsIkdldFJlc3VsdE9iamVjdCIsInJlc3VsdFN0cnVjdHVyZSIsInJlc3VsdCIsIm5hbWUiLCJpdGVtIiwiayIsImlzT3BlcmEiLCJ3aW5kb3ciLCJvcHIiLCJhZGRvbnMiLCJvcGVyYSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJpc0ZpcmVmb3giLCJJbnN0YWxsVHJpZ2dlciIsImlzU2FmYXJpIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsIkhUTUxFbGVtZW50IiwiaXNDaHJvbWUiLCJjaHJvbWUiLCJ3ZWJzdG9yZSIsImlzQmxpbmsiLCJDU1MiLCJpc0FycmF5SW50ZXJzZWN0IiwiYSIsImIiLCJmaWx0ZXIiLCJlbGVtZW50IiwiaXNFbGVtZW50IiwibyIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc1dlYldvcmtlciIsIldvcmtlciIsInRha2VTY3JlZW5TaG90IiwiZGl2IiwicmVtb3ZlQ3NzIiwiY3NzIiwiZGl2Q3NzIiwiY2xhc3NOYW1lIiwiYWRkQ3NzIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlTGFzdENoYXJJZkV4aXN0IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsIkRhdGFTb3VyY2VQYXJzZXIiLCJidWlsZFVybCIsInByb3BlcnRpZXMiLCJ1cmwiLCJwcm90b2NvbCIsImVuZHBvaW50VXJsIiwic2VydmljZSIsIm9mZmVyaW5nSUQiLCJmb2lVUk4iLCJvYnNlcnZlZFByb3BlcnR5Iiwic3RUaW1lIiwibGFzdFRpbWVTdGFtcCIsInN0YXJ0VGltZSIsImxhc3RTdGFydFRpbWUiLCJlbmRUaW1lIiwicmVwbGF5U3BlZWQiLCJyZXNwb25zZUZvcm1hdCIsImN1c3RvbVVybFBhcmFtcyIsImtleXMiLCJrZXkiLCJzbGljZSIsIlZpZGVvUGFyc2VyIiwicGFyc2VUaW1lU3RhbXAiLCJwYXJzZURhdGEiLCJmcmFtZURhdGEiLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsInJvbGwiLCJTdGF0dXMiLCJDT05ORUNURUQiLCJESVNDT05ORUNURUQiLCJEYXRhQ29ubmVjdG9yIiwiY29uc3RydWN0b3IiLCJyZWNvbm5lY3RUaW1lb3V0Iiwic3RhdHVzIiwicmVjb25uZWN0aW9uSW50ZXJ2YWwiLCJjaGVja0FuZENsZWFyUmVjb25uZWN0aW9uIiwiY2xlYXJJbnRlcnZhbCIsImRpc2Nvbm5lY3QiLCJjaGVja1N0YXR1cyIsInNldFVybCIsImdldElkIiwiZ2V0VXJsIiwic2V0UmVjb25uZWN0VGltZW91dCIsInRpbWVvdXQiLCJvblJlY29ubmVjdCIsImNvbm5lY3QiLCJmb3JjZVJlY29ubmVjdCIsIm9uQ2hhbmdlU3RhdHVzIiwib25EaXNjb25uZWN0Iiwib25Db25uZWN0IiwiV2ViU29ja2V0Q29ubmVjdG9yIiwiaW50ZXJ2YWwiLCJsYXN0UmVjZWl2ZVRpbWUiLCJpbml0IiwiY2xvc2VkIiwid3MiLCJXZWJTb2NrZXQiLCJiaW5hcnlUeXBlIiwib25tZXNzYWdlIiwiZXZlbnQiLCJEYXRlIiwibm93Iiwib25NZXNzYWdlIiwiYmluZCIsIm9uZXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJjcmVhdGVSZWNvbm5lY3Rpb24iLCJvbmNsb3NlIiwid2FybiIsInJlYXNvbiIsImNvZGUiLCJzZXRJbnRlcnZhbCIsImRlbHRhIiwicmVhZHlTdGF0ZSIsIkNMT1NFRCIsImNsb3NlIiwiaXNDb25uZWN0ZWQiLCJPUEVOIiwiQWpheCIsIm1ldGhvZCIsInJlc3BvbnNlVHlwZSIsInNlbmRSZXF1ZXN0IiwicmVxdWVzdCIsImV4dHJhVXJsIiwic2VsZiIsInhtbGh0dHAiLCJYTUxIdHRwUmVxdWVzdCIsIndpdGhDcmVkZW50aWFscyIsIm9wZW4iLCJvbmxvYWQiLCJvRXZlbnQiLCJyZXNwb25zZSIsIm9udGltZW91dCIsImUiLCJsb2ciLCJzZW5kIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9uU3VjY2VzcyIsInJlc3BvbnNlVGV4dCIsIm9uRXJyb3IiLCJUb3BpY0Nvbm5lY3RvciIsImJyb2FkY2FzdENoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwicmVjb25uZWN0IiwiZnVsbERpc2Nvbm5lY3QiLCJyZW1vdmVJbnRlcnZhbCIsIkV2ZW50VHlwZSIsIkRBVEEiLCJTVEFUVVMiLCJEYXRhU291cmNlSGFuZGxlciIsInBhcnNlciIsImNvbm5lY3RvciIsInRpbWVTaGlmdCIsInZhbHVlcyIsImNyZWF0ZUNvbm5lY3RvciIsInByb3BlcnRpZXNTdHIiLCJ0b3BpYyIsImRhdGFTb3VyY2VJZCIsImZldGNoIiwiYnVmZmVyaW5nVGltZSIsInRpbWVPdXQiLCJiYXRjaFNpemUiLCJjcmVhdGVEYXRhQ29ubmVjdG9yIiwic3RhcnRzV2l0aCIsImxhc3RTdGFydFRpbWVDc3QiLCJsYXN0UHJvcGVydGllcyIsInRvSVNPU3RyaW5nIiwic2V0VG9waWMiLCJ0aW1lU3RhbXAiLCJmbHVzaCIsInBvc3RNZXNzYWdlIiwiZ2V0TGFzdFRpbWVTdGFtcCIsInVwZGF0ZVVybCIsImxhc3RUaW1lc3RhbXAiLCJoYXNPd25Qcm9wZXJ0eSIsInNwbGljZSIsImhhbmRsZU1lc3NhZ2UiLCJtZXNzYWdlIiwid29ya2VyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FB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eEIsRUFBc0M7QUFDMUMsV0FBS0wsU0FBTCxDQUFlSyxPQUFPLENBQUNqTixJQUF2QjtBQUNILEtBRk8sTUFFRCxJQUFJaU4sT0FBTyxDQUFDQSxPQUFSLEtBQW9CLGNBQXhCLEVBQXdDO0FBQzNDQyxZQUFNLENBQUNSLFdBQVAsQ0FBbUI7QUFDZk8sZUFBTyxFQUFFLGNBRE07QUFFZmpOLFlBQUksRUFBRyxLQUFLdUwsU0FBTCxLQUFtQixJQUFwQixHQUEyQixLQUEzQixHQUFrQyxLQUFLQSxTQUFMLENBQWVwQyxXQUFmO0FBRnpCLE9BQW5CO0FBSUg7QUFDSjs7QUEvTm1COztBQWlPVGtDLGlHQUFmLEU7O0FDeE9xRDtBQUNFOztBQUV2RCw4QkFBOEIseUJBQWlCLEtBQUssWUFBVzs7QUFFL0Q7QUFDQTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKiAqIEBtb2R1bGUgVXRpbHMgKi9cblxuLyoqIE1heGltdW0gdmFsdWUgb2YgYSBsb25nICovXG5leHBvcnQgY29uc3QgTUFYX0xPTkcgPSBNYXRoLnBvdygyLCA1MykgKyAxO1xuXG4vKipcbiAqIEdsb2JhbCBoZWxwZXIgbWV0aG9kIHRvIHRlc3QgaWYgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGRlZmluZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5lZCh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiAodikgIT09ICd1bmRlZmluZWQnICYmIHYgIT09IG51bGw7XG59XG5cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaGFzIGEgdmFsdWUsXG4gdGhhdCBpcyBpdCBpcyBkZWZpbmVkIGFuZCBub24gbnVsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodikge1xuICAgIHJldHVybiBpc0RlZmluZWQodikgJiYgdiAhPT0gbnVsbDtcbn1cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgb2YgYSBwYXJ0aWN1bGFyIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1R5cGUodiwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgbGV0IGhhc1ZhbCA9IGhhc1ZhbHVlKHYpO1xuICAgIHJldHVybiBoYXNWYWwgJiYgdHlwZW9mICh2KSA9PT0gZXhwZWN0ZWRUeXBlO1xufVxuXG4vKipcbiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0ZXN0IGlmIGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gaGFzVHlwZSh2LCAnb2JqZWN0JywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEdsb2JhbCBoZWxwZXIgbWV0aG9kIHRvIHRlc3QgaWYgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGFuIGFycmF5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KHYpIHtcbiAgICByZXR1cm4gaXNEZWZpbmVkKHYpICYmIEFycmF5LmlzQXJyYXkodik7XG59XG5cbi8qKlxuIEdsb2JhbCBoZWxwZXIgbWV0aG9kIHRvIHRlc3QgaWYgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGEgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBoYXNUeXBlKHYsICdmdW5jdGlvbicsIGxldE5hbWUpO1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERlZmluZWQodiwgbGV0TmFtZSA9ICdsZXRpYWJsZScpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh2KSkge1xuICAgICAgICB0aHJvdyBsZXROYW1lICsgXCIgbXVzdCBiZSBkZWZpbmVkXCI7XG4gICAgfVxuICAgIHJldHVybiB2O1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZCBhbmQgbm9uLW51bGxcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUeXBlKHYsIGV4cGVjdGVkVHlwZSwgbGV0TmFtZSA9ICdsZXRpYWJsZScpIHtcbiAgICBhc3NlcnREZWZpbmVkKHYsIGxldE5hbWUpO1xuICAgIGlmICh0eXBlb2YgKHYpICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3QgYmUgb2YgdHlwZSBcIiArIGV4cGVjdGVkVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIHN0cmluZ1xuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEJvb2xlYW4odiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBhc3NlcnRUeXBlKHYsICdib29sZWFuJywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIHN0cmluZ1xuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFN0cmluZyh2LCBsZXROYW1lKSB7XG4gICAgcmV0dXJuIGFzc2VydFR5cGUodiwgJ3N0cmluZycsIGxldE5hbWUpO1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYSBudW1iZXJcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBhc3NlcnRUeXBlKHYsICdudW1iZXInLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGEgbnVtYmVyXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UG9zaXRpdmUodiwgbGV0TmFtZSkge1xuICAgIGFzc2VydE51bWJlcih2LCBsZXROYW1lKTtcbiAgICBpZiAodiA8PSAwKSB7XG4gICAgICAgIHRocm93IGxldE5hbWUgKyBcIiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyXCI7XG4gICAgfVxufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYW4gb2JqZWN0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0T2JqZWN0KHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gYXNzZXJ0VHlwZSh2LCAnb2JqZWN0JywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhbiBvYmplY3RcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBcnJheSh2LCBsZXROYW1lID0gJ2xldGlhYmxlJykge1xuICAgIGFzc2VydERlZmluZWQodiwgbGV0TmFtZSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHRocm93IGxldE5hbWUgKyBcIiBtdXN0IGJlIGFuIGFycmF5XCI7XG4gICAgfVxuICAgIHJldHVybiB2O1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYSBmdW5jdGlvblxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZ1bmN0aW9uKHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gYXNzZXJ0VHlwZSh2LCAnZnVuY3Rpb24nLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGRlZmluZWQgYW5kIG5vbi1udWxsXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SGFzVmFsdWUodiwgbGV0TmFtZSA9ICdsZXRpYWJsZScpIHtcbiAgICBhc3NlcnREZWZpbmVkKHYsIGxldE5hbWUpO1xuICAgIGlmICghaGFzVmFsdWUodikpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3Qgbm90IGJlIG51bGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVVVSUQoKSB7XG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gc3RhbXBzL2VtYmVkcyBhIFVVSUQgaW50byBhbiBvYmplY3QgYW5kIHJldHVybnMgdGhlIFVVSUQgZ2VuZXJhdGVkIGZvciBpdFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhbXBVVUlEKG9iaikge1xuICAgIG9iai5fb3NoX2lkID0gb2JqLl9vc2hfaWQgfHwgcmFuZG9tVVVJRCgpO1xuICAgIHJldHVybiBvYmouX29zaF9pZDtcbn1cblxuLy9idWZmZXIgaXMgYW4gQXJyYXlCdWZmZXIgb2JqZWN0LCB0aGUgb2Zmc2V0IGlmIHNwZWNpZmllZCBpbiBieXRlcywgYW5kIHRoZSB0eXBlIGlzIGEgc3RyaW5nXG4vL2NvcnJlc3BvbmRpbmcgdG8gYW4gT0dDIGRhdGEgdHlwZS5cbi8vU2VlIGh0dHA6Ly9kZWYuc2VlZ3JpZC5jc2lyby5hdS9zaXNzdm9jL29nYy1kZWYvcmVzb3VyY2U/dXJpPWh0dHA6Ly93d3cub3Blbmdpcy5uZXQvZGVmL2RhdGFUeXBlL09HQy8wL1xuLyoqXG4gKlxuICogQHBhcmFtIGJ1ZmZlclxuICogQHBhcmFtIG9mZnNldFxuICogQHBhcmFtIHR5cGVcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQYXJzZUJ5dGVzKGJ1ZmZlciwgb2Zmc2V0LCB0eXBlKSB7XG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcblxuICAgIC8vTm90ZTogVGhlcmUgZXhpc3QgdHlwZXMgbm90IGxpc3RlZCBpbiB0aGUgbWFwIGJlbG93IHRoYXQgaGF2ZSBPR0MgZGVmaW5pdGlvbnMsIGJ1dCBubyBhcHByb3ByaWF0ZVxuICAgIC8vbWV0aG9kcyBvciBjb3JyZXNwb25kaW5nIHR5cGVzIGF2YWlsYWJsZSBmb3IgcGFyc2luZyBpbiBqYXZhc2NyaXB0LiBUaGV5IGFyZSBmbG9hdDEyOCwgZmxvYXQxNiwgc2lnbmVkTG9uZyxcbiAgICAvL2FuZCB1bnNpZ25lZExvbmdcbiAgICBsZXQgdHlwZU1hcCA9IHtcbiAgICAgICAgZG91YmxlOiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRGbG9hdDY0KG9mZnNldCksIGJ5dGVzOiA4fTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxvYXQ2NDogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0RmxvYXQ2NChvZmZzZXQpLCBieXRlczogOH07XG4gICAgICAgIH0sXG4gICAgICAgIGZsb2F0MzI6IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsOiB2aWV3LmdldEZsb2F0MzIob2Zmc2V0KSwgYnl0ZXM6IDR9O1xuICAgICAgICB9LFxuICAgICAgICBzaWduZWRCeXRlOiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRJbnQ4KG9mZnNldCksIGJ5dGVzOiAxfTtcbiAgICAgICAgfSxcbiAgICAgICAgc2lnbmVkSW50OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRJbnQzMihvZmZzZXQpLCBieXRlczogNH07XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25lZFNob3J0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRJbnQxNihvZmZzZXQpLCBieXRlczogMn07XG4gICAgICAgIH0sXG4gICAgICAgIHVuc2lnbmVkQnl0ZTogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0VWludDgob2Zmc2V0KSwgYnl0ZXM6IDF9O1xuICAgICAgICB9LFxuICAgICAgICB1bnNpZ25lZEludDogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0VWludDMyKG9mZnNldCksIGJ5dGVzOiA0fTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zaWduZWRTaG9ydDogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0VWludDE2KG9mZnNldCksIGJ5dGVzOiAyfTtcbiAgICAgICAgfSxcbiAgICAgICAgLy9UT0RPOiBzdHJpbmctdXRmLTg6XG4gICAgfTtcbiAgICByZXR1cm4gdHlwZU1hcFt0eXBlXShvZmZzZXQpO1xufVxuXG4vL1RoaXMgZnVuY3Rpb24gcmVjdXJzaXZsZXkgaXRlcmF0ZXMgb3ZlciB0aGUgcmVzdWx0U3RydWN0dXJlIHRvIGZpbGwgaW5cbi8vdmFsdWVzIHJlYWQgZnJvbSBkYXRhIHdoaWNoIHNob3VsZCBiZSBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBwYXlsb2FkIGZyb20gYSB3ZWJzb2NrZXRcbi8qKlxuICpcbiAqIEBwYXJhbSBzdHJ1Y3RcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gb2Zmc2V0Qnl0ZXNcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZWFkRGF0YShzdHJ1Y3QsIGRhdGEsIG9mZnNldEJ5dGVzKSB7XG4gICAgbGV0IG9mZnNldCA9IG9mZnNldEJ5dGVzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RydWN0LmZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgY3VyckZpZWxkU3RydWN0ID0gc3RydWN0LmZpZWxkc1tpXTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChjdXJyRmllbGRTdHJ1Y3QudHlwZSkgJiYgY3VyckZpZWxkU3RydWN0LnR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCByZXQgPSBQYXJzZUJ5dGVzKGRhdGEsIG9mZnNldCwgY3VyckZpZWxkU3RydWN0LnR5cGUpO1xuICAgICAgICAgICAgY3VyckZpZWxkU3RydWN0LnZhbCA9IHJldC52YWw7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcmV0LmJ5dGVzO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChjdXJyRmllbGRTdHJ1Y3QuY291bnQpICYmIGN1cnJGaWVsZFN0cnVjdC5jb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy9jaGVjayBpZiBjb3VudCBpcyBhIHJlZmVyZW5jZSB0byBhbm90aGVyIGxldGlhYmxlXG4gICAgICAgICAgICBpZiAoaXNOYU4oY3VyckZpZWxkU3RydWN0LmNvdW50KSkge1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGN1cnJGaWVsZFN0cnVjdC5jb3VudDtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGROYW1lID0gc3RydWN0LmlkMkZpZWxkTWFwW2lkXTtcbiAgICAgICAgICAgICAgICBjdXJyRmllbGRTdHJ1Y3QuY291bnQgPSBzdHJ1Y3QuZmluZEZpZWxkQnlOYW1lKGZpZWxkTmFtZSkudmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjdXJyRmllbGRTdHJ1Y3QuY291bnQ7IGMrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY3VyckZpZWxkU3RydWN0LmZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGN1cnJGaWVsZFN0cnVjdC5maWVsZHNbal0pKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gUmVhZERhdGEoZmllbGQsIGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJGaWVsZFN0cnVjdC52YWwucHVzaChmaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSByZXN1bHRTdHJ1Y3R1cmVcbiAqIEByZXR1cm4ge3t9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gR2V0UmVzdWx0T2JqZWN0KHJlc3VsdFN0cnVjdHVyZSkge1xuICAgIC8vVE9ETzogaGFuZGxlIGNhc2VzIGZvciBuZXN0ZWQgYXJyYXlzIC8gbWF0cml4IGRhdGEgdHlwZXNcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQocmVzdWx0U3RydWN0dXJlLmZpZWxkc1tpXS5jb3VudCkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLm5hbWVdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHJlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0uY291bnQ7IGMrKykge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtID0ge307XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbFtjXS5maWVsZHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtyZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbFtjXS5maWVsZHNba10ubmFtZV0gPSByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbFtjXS5maWVsZHNba10udmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0U3RydWN0dXJlLmZpZWxkc1tpXS5uYW1lXS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0ubmFtZV0gPSByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcGVyYSgpIHtcbiAgICByZXR1cm4gKCEhd2luZG93Lm9wciAmJiAhIW9wci5hZGRvbnMpIHx8ICEhd2luZG93Lm9wZXJhIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIE9QUi8nKSA+PSAwO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGaXJlZm94KCkge1xuICAgIHJldHVybiB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cuSFRNTEVsZW1lbnQpLmluZGV4T2YoJ0NvbnN0cnVjdG9yJykgPiAwO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDaHJvbWUoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LmNocm9tZSAmJiAhIXdpbmRvdy5jaHJvbWUud2Vic3RvcmU7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4geyp8Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmxpbmsoKSB7XG4gICAgcmV0dXJuIChpc0Nocm9tZSB8fCBpc09wZXJhKSAmJiAhIXdpbmRvdy5DU1M7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBhXG4gKiBAcGFyYW0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlJbnRlcnNlY3QoYSwgYikge1xuICAgIHJldHVybiBhLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gYi5pbmRleE9mKGVsZW1lbnQpID4gLTE7XG4gICAgfSkubGVuZ3RoID4gMDtcbn1cblxuXG4vKipcbiAqXG4gKiBAcGFyYW0gb1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudChvKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gXCJvYmplY3RcIiA/IG8gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA6IC8vRE9NMlxuICAgICAgICBvICYmIHR5cGVvZiBvID09PSBcIm9iamVjdFwiICYmIG8gIT09IG51bGwgJiYgby5ub2RlVHlwZSA9PT0gMSAmJiB0eXBlb2Ygby5ub2RlTmFtZSA9PT0gXCJzdHJpbmdcIlxuICAgICk7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1dlYldvcmtlcigpIHtcbiAgICByZXR1cm4gaXNEZWZpbmVkKFdvcmtlcik7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBkaXZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VTY3JlZW5TaG90KGRpdikge1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIGNzcyBjbGFzcyBmcm9tIGEgdGhlIGRpdiBnaXZlbiBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSBkaXYgdGhlIGRpdiB0byByZW1vdmUgdGhlIGNsYXNzIGZyb21cbiAqIEBwYXJhbSBjc3MgdGhlIGNzcyBjbGFzcyB0byByZW1vdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNzcyhkaXYsIGNzcykge1xuICAgIGxldCBkaXZDc3MgPSBkaXYuY2xhc3NOYW1lO1xuICAgIGNzcyA9IGRpdkNzcy5yZXBsYWNlKGNzcywgXCJcIik7XG4gICAgZGl2LmNsYXNzTmFtZSA9IGNzcztcbn1cblxuXG4vKipcbiAqIEFkZCBhIGNzcyBjbGFzcyB0byBhIHRoZSBkaXYgZ2l2ZW4gYXMgYXJndW1lbnQuXG4gKiBAcGFyYW0gZGl2IHRoZSBkaXYgdG8gYWRkIHRoZSBjbGFzcyB0b1xuICogQHBhcmFtIGNzcyB0aGUgY3NzIGNsYXNzIHRvIGFkZFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ3NzKGRpdiwgY3NzKSB7XG4gICAgZGl2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRpdi5jbGFzc05hbWUgKyBcIiBcIiArIGNzcyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgbGFzdCBjaGFyYWN0ZXIgb2YgYSB7c3RyaW5nfSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgaW5wdXQge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhbHVlIHdpdGhvdXQgdGhlIGxhc3QgY2hhcmFjdGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVMYXN0Q2hhcklmRXhpc3QodmFsdWUpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh1bmRlZmluZWQpIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCB8fCAhdmFsdWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmxlbmd0aCAtIDEpO1xufVxuXG4iLCJpbXBvcnQge2lzRGVmaW5lZH0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzXCI7XG5cbmNsYXNzIERhdGFTb3VyY2VQYXJzZXIge1xuICAgIC8qKlxuICAgICAqIEJ1aWxkcyB0aGUgZnVsbCB1cmwuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgdGhlIGNvbm5lY3RvciBwcm90b2NvbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZHBvaW50VXJsIHRoZSBlbmRwb2ludCB1cmxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zZXJ2aWNlIHRoZSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2ZmZXJpbmdJRCB0aGUgb2ZmZXJpbmdJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9ic2VydmVkUHJvcGVydHkgdGhlIG9ic2VydmVkIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIHRoZSBzdGFydCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZFRpbWUgdGhlIGVuZCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLnJlcGxheVNwZWVkIHRoZSByZXBsYXkgZmFjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMucmVzcG9uc2VGb3JtYXQgdGhlIHJlc3BvbnNlIGZvcm1hdCAoZS5nIHZpZGVvL21wNClcbiAgICAgKiBAcGFyYW0ge0RhdGV9IHByb3BlcnRpZXMubGFzdFRpbWVTdGFtcCAtIHRoZSBsYXN0IHRpbWVzdGFtcCB0byBzdGFydCBhdCB0aGlzIHRpbWUgKElTTyBTdHJpbmcpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zIC0gdGhlIGVuY29kaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXMudmlkZW9fYml0cmF0ZSAtIGRlZmluZSBhIGN1c3RvbSBiaXRyYXRlIChpbiBiL3MpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX3NjYWxlIC0gZGVmaW5lIGEgY3VzdG9tIHNjYWxlLCAwLjAgPCB2YWx1ZSA8IDEuMFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb193aWR0aCAtIGRlZmluZSBhIGN1c3RvbSB3aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb19oZWlnaHQgLSBkZWZpbmUgYSBjdXN0b20gaGVpZ2h0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgZnVsbCB1cmxcbiAgICAgKi9cbiAgICBidWlsZFVybChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGxldCB1cmwgPSBcIlwiO1xuXG4gICAgICAgIC8vIGFkZHMgcHJvdG9jb2xcbiAgICAgICAgdXJsICs9IHByb3BlcnRpZXMucHJvdG9jb2wgKyBcIjovL1wiO1xuXG4gICAgICAgIC8vIGFkZHMgZW5kcG9pbnQgdXJsXG4gICAgICAgIHVybCArPSBwcm9wZXJ0aWVzLmVuZHBvaW50VXJsICsgXCI/XCI7XG5cbiAgICAgICAgLy8gYWRkcyBzZXJ2aWNlXG4gICAgICAgIHVybCArPSBcInNlcnZpY2U9XCIgKyBwcm9wZXJ0aWVzLnNlcnZpY2UgKyBcIiZcIjtcblxuICAgICAgICAvLyBhZGRzIHZlcnNpb25cbiAgICAgICAgdXJsICs9IFwidmVyc2lvbj0yLjAmXCI7XG5cbiAgICAgICAgLy8gYWRkcyByZXF1ZXN0XG4gICAgICAgIHVybCArPSBcInJlcXVlc3Q9R2V0UmVzdWx0JlwiO1xuXG4gICAgICAgIC8vIGFkZHMgb2ZmZXJpbmdcbiAgICAgICAgdXJsICs9IFwib2ZmZXJpbmc9XCIgKyBwcm9wZXJ0aWVzLm9mZmVyaW5nSUQgKyBcIiZcIjtcblxuICAgICAgICAvLyBhZGRzIGZlYXR1cmUgb2YgaW50ZXJlc3QgdXJuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLmZvaVVSTiAmJiBwcm9wZXJ0aWVzLmZvaVVSTiAhPT0gJycpIHtcbiAgICAgICAgICAgIHVybCArPSAnZmVhdHVyZU9mSW50ZXJlc3Q9JyArIHByb3BlcnRpZXMuZm9pVVJOICsgJyYnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkcyBvYnNlcnZlZFByb3BlcnR5XG4gICAgICAgIHVybCArPSBcIm9ic2VydmVkUHJvcGVydHk9XCIgKyBwcm9wZXJ0aWVzLm9ic2VydmVkUHJvcGVydHkgKyBcIiZcIjtcblxuICAgICAgICAvLyBhZGRzIHRlbXBvcmFsRmlsdGVyXG4gICAgICAgIGNvbnN0IHN0VGltZSA9IChpc0RlZmluZWQocHJvcGVydGllcy5sYXN0VGltZVN0YW1wKSkgPyBwcm9wZXJ0aWVzLmxhc3RUaW1lU3RhbXAgOiAgcHJvcGVydGllcy5zdGFydFRpbWU7XG4gICAgICAgIHRoaXMubGFzdFN0YXJ0VGltZSA9IHByb3BlcnRpZXMuc3RhcnRUaW1lO1xuICAgICAgICBsZXQgZW5kVGltZSA9IHByb3BlcnRpZXMuZW5kVGltZTtcbiAgICAgICAgdXJsICs9IFwidGVtcG9yYWxGaWx0ZXI9cGhlbm9tZW5vblRpbWUsXCIgKyBzdFRpbWUrIFwiL1wiICsgZW5kVGltZSArIFwiJlwiO1xuICAgICAgICBpZiAocHJvcGVydGllcy5yZXBsYXlTcGVlZCkge1xuICAgICAgICAgICAgLy8gYWRkcyByZXBsYXlTcGVlZFxuICAgICAgICAgICAgdXJsICs9IFwicmVwbGF5U3BlZWQ9XCIgKyBwcm9wZXJ0aWVzLnJlcGxheVNwZWVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkcyByZXNwb25zZUZvcm1hdCAob3B0aW9uYWwpXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLnJlc3BvbnNlRm9ybWF0KSB7XG4gICAgICAgICAgICB1cmwgKz0gXCImcmVzcG9uc2VGb3JtYXQ9XCIgKyBwcm9wZXJ0aWVzLnJlc3BvbnNlRm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoaXNEZWZpbmVkKHByb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zKSAmJiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdXJsICs9ICcmJztcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcykge1xuICAgICAgICAgICAgICAgIHVybCArPSBrZXkrJz0nK3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zW2tleV0rJyYnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYodXJsLmVuZHNXaXRoKCcmJykpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhU291cmNlUGFyc2VyO1xuIiwiaW1wb3J0IERhdGFTb3VyY2VQYXJzZXIgZnJvbSBcIi4vRGF0YVNvdXJjZVBhcnNlci5qc1wiO1xuXG5jbGFzcyBWaWRlb1BhcnNlciBleHRlbmRzIERhdGFTb3VyY2VQYXJzZXIge1xuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGltZXN0YW1wIGZyb20gdGhlIG1lc3NhZ2UuIFRoZSB0aW1lc3RhbXAgaXMgY29ycmVzcG9uZGluZyB0byB0aGUgZmlyc3QgNjRiaXRzIG9mIHRoZSBiaW5hcnkgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhIC0gdGhlIGRhdGEgdG8gcGFyc2VcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBleHRyYWN0ZWQgdGltZXN0YW1wXG4gICAgICovXG4gICAgcGFyc2VUaW1lU3RhbXAoZGF0YSkge1xuICAgICAgICAvLyByZWFkIGRvdWJsZSB0aW1lIHN0YW1wIGFzIGJpZyBlbmRpYW5cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhkYXRhKS5nZXRGbG9hdDY0KDAsIGZhbHNlKSAqIDEwMDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBkYXRhIGZyb20gdGhlIG1lc3NhZ2UuIFRoZSBIMjY0IE5BTCB1bml0IHN0YXJ0cyBhdCBvZmZzZXQgMTIgYWZ0ZXIgOC1ieXRlcyB0aW1lIHN0YW1wIGFuZCA0LWJ5dGVzIGZyYW1lIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhIC0gdGhlIGRhdGEgdG8gcGFyc2VcbiAgICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSB0aGUgcGFyc2VkIGRhdGFcbiAgICAgKi9cbiAgICBwYXJzZURhdGEoZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gSDI2NCBOQUwgdW5pdCBzdGFydHMgYXQgb2Zmc2V0IDEyIGFmdGVyIDgtYnl0ZXMgdGltZSBzdGFtcCBhbmQgNC1ieXRlcyBmcmFtZSBsZW5ndGhcbiAgICAgICAgICAgIGZyYW1lRGF0YTogbmV3IFVpbnQ4QXJyYXkoZGF0YSwgMTIsIGRhdGEuYnl0ZUxlbmd0aCAtIDEyKSxcbiAgICAgICAgICAgIHJvbGw6IDBcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgIFZpZGVvUGFyc2VyO1xuIiwiLyoqXG4gKiBFbnVtIGZvciBjb25uZWN0aW9uIHN0YXR1cy5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgU3RhdHVzID0ge1xuICAgIENPTk5FQ1RFRDogIFwiY29ubmVjdGVkXCIsXG4gICAgRElTQ09OTkVDVEVEOiBcImRpc2Nvbm5lY3RlZFwiXG59O1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge3JhbmRvbVVVSUR9IGZyb20gJy4uL3V0aWxzL1V0aWxzLmpzJztcbmltcG9ydCB7U3RhdHVzfSBmcm9tICcuL1N0YXR1cy5qcyc7XG5cbi8qKlxuICogVGhlIERhdGFDb25uZWN0b3IgaXMgdGhlIGFic3RyYWN0IGNsYXNzIHVzZWQgdG8gY3JlYXRlIGRpZmZlcmVudCBjb25uZWN0b3JzLlxuICovXG5jbGFzcyBEYXRhQ29ubmVjdG9yIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgLSBUaGUgZnVsbCB1cmwgdXNlZCB0byBjb25uZWN0IHRvIHRoZSBkYXRhIHN0cmVhbVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHVybCkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5pZCA9IFwiRGF0YUNvbm5lY3Rvci1cIiArIHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lb3V0ID0gMTAwMCAqIDYwICogMjsgLy8yIG1pblxuICAgICAgICB0aGlzLnN0YXR1cyA9ICBTdGF0dXMuRElTQ09OTkVDVEVEO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkludGVydmFsID0gLTE7XG4gICAgfVxuXG4gICAgY2hlY2tBbmRDbGVhclJlY29ubmVjdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5yZWNvbm5lY3Rpb25JbnRlcnZhbCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWNvbm5lY3Rpb25JbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkludGVydmFsID0gLTE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmNoZWNrU3RhdHVzKFN0YXR1cy5ESVNDT05ORUNURUQpO1xuICAgICAgICB0aGlzLmNoZWNrQW5kQ2xlYXJSZWNvbm5lY3Rpb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB1cmxcbiAgICAgKiBAcGFyYW0gdXJsXG4gICAgICovXG4gICAgc2V0VXJsKHVybCkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSBjb25uZWN0b3IgZGVmYXVsdCBpZC5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzdHJlYW0gdXJsLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRVcmwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVybDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZWNvbm5lY3Rpb24gdGltZW91dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IC0gZGVsYXkgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSByZWNvbm5lY3RpbmcgZGF0YVNvdXJjZVxuICAgICAqL1xuICAgIHNldFJlY29ubmVjdFRpbWVvdXQodGltZW91dCkge1xuICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIH1cblxuICAgIG9uUmVjb25uZWN0KCl7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbm5lY3QoKSB7fVxuXG4gICAgZm9yY2VSZWNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBTVEFUVVMgY2hhbmdlc1xuICAgICAqIEBwYXJhbSB7U3RhdHVzfSBzdGF0dXMgLSB0aGUgbmV3IHN0YXR1c1xuICAgICAqL1xuICAgIG9uQ2hhbmdlU3RhdHVzKHN0YXR1cykge1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgYSBjaGFuZ2Ugb2YgdGhlIHN0YXR1cyBhbmQgY2FsbCB0aGUgY29ycmVzcG9uZGluZyBjYWxsYmFja3MgaWYgbmVjZXNzYXJ5XG4gICAgICogQHBhcmFtIHtTdGF0dXN9IHN0YXR1cyAtIHRoZSBjdXJyZW50U3RhdHVzXG4gICAgICovXG4gICAgY2hlY2tTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIGlmKHN0YXR1cyAhPT0gdGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VTdGF0dXMoc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBjb25uZWN0b3IgaGFzIGJlZW4gZGlzY29ubmVjdGVkXG4gICAgICovXG4gICAgb25EaXNjb25uZWN0KCkge1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIGNvbm5lY3RvciBoYXMgYmVlbiBjb25uZWN0ZWRcbiAgICAgKi9cbiAgICBvbkNvbm5lY3QoKSB7XG5cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFDb25uZWN0b3I7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBEYXRhQ29ubmVjdG9yIGZyb20gJy4vRGF0YUNvbm5lY3Rvci5qcyc7XG5pbXBvcnQge2lzV2ViV29ya2VyfSBmcm9tICcuLi91dGlscy9VdGlscy5qcyc7XG5pbXBvcnQge1N0YXR1c30gZnJvbSAnLi9TdGF0dXMuanMnO1xuXG4vKipcbiAqIERlZmluZXMgdGhlIFdlYlNvY2tldENvbm5lY3RvciB0byBjb25uZWN0IHRvIGEgcmVtb3RlIHNlcnZlciBieSBjcmVhdGluZyBhIFdlYlNvY2tldCBjaGFubmVsLlxuICogQGV4dGVuZHMgRGF0YUNvbm5lY3RvclxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBXZWJTb2NrZXRDb25uZWN0b3IgZnJvbSAnb3NoL2RhdGFjb25uZWN0b3IvV2ViU29ja2V0Q29ubmVjdG9yLmpzJztcbiAqXG4gKiBsZXQgdXJsID0gLi4uO1xuICogbGV0IGNvbm5lY3RvciA9IG5ldyBXZWJTb2NrZXRDb25uZWN0b3IodXJsKTtcbiAqXG4gKiAvLyBjb25uZWN0XG4gKiBjb25uZWN0b3IuY29ubmVjdCgpO1xuICpcbiAqIC8vIGRpc2Nvbm5lY3RcbiAqIGNvbm5lY3Rvci5kaXNjb25uZWN0KCk7XG4gKlxuICogLy8gY2xvc2VcbiAqIGNvbm5lY3Rvci5jbG9zZSgpO1xuICpcbiAqL1xuXG5jbGFzcyBXZWJTb2NrZXRDb25uZWN0b3IgZXh0ZW5kcyBEYXRhQ29ubmVjdG9yIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLmludGVydmFsID0gLTE7XG4gICAgICAgIHRoaXMubGFzdFJlY2VpdmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHRoZSB3ZWJTb2NrZXQuIElmIHRoZSBzeXN0ZW0gc3VwcG9ydHMgV2ViV29ya2VyLCBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBvbmUgb3RoZXJ3aXNlIHVzZVxuICAgICAqIHRoZSBtYWluIHRocmVhZC5cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaW5pdCkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaW5pdCA9IHRydWU7XG4gICAgICAgICAgICAvL2NyZWF0ZXMgV2ViIFNvY2tldFxuICAgICAgICAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQodGhpcy5nZXRVcmwoKSk7XG4gICAgICAgICAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrQW5kQ2xlYXJSZWNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrU3RhdHVzKFN0YXR1cy5DT05ORUNURUQpO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFJlY2VpdmVUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgICAgIC8vY2FsbGJhY2sgZGF0YSBvbiBtZXNzYWdlIHJlY2VpdmVkXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGEuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICAvLyBjbG9zZXMgc29ja2V0IGlmIGFueSBlcnJvcnMgb2NjdXJcbiAgICAgICAgICAgIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1dlYlNvY2tldCBzdHJlYW0gZXJyb3InKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrU3RhdHVzKFN0YXR1cy5ESVNDT05ORUNURUQpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFJlY2VpdmVUaW1lID0gLTE7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVSZWNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy53cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1N0YXR1cyhTdGF0dXMuRElTQ09OTkVDVEVEKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dlYlNvY2tldCBzdHJlYW0gY2xvc2VkOiAnLGV2ZW50LnJlYXNvbiwgZXZlbnQuY29kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYoZXZlbnQuY29kZSAhPT0gMTAwMCAmJiAhdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVSZWNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUmVjb25uZWN0aW9uKCkge1xuICAgICAgICBpZighdGhpcy5jbG9zZWQgJiYgdGhpcy5yZWNvbm5lY3Rpb25JbnRlcnZhbCA9PT0gLTEgJiYgdGhpcy5vblJlY29ubmVjdCgpKSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkludGVydmFsID0gIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGVsdGEgPSBEYXRlLm5vdygpIC0gdGhpcy5sYXN0UmVjZWl2ZVRpbWU7XG4gICAgICAgICAgICAgICAgLy8gLTEgbWVhbnMgdGhlIFdTIHdlbnQgaW4gZXJyb3JcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0UmVjZWl2ZVRpbWUgPT09IC0xIHx8IChkZWx0YSA+PSB0aGlzLnJlY29ubmVjdFRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndHJ5aW5nIHRvIHJlY29ubmVjdCcsIHRoaXMudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCB0aGlzLnJlY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgYW5kIGNsb3NlIHRoZSB3ZWJzb2NrZXQuXG4gICAgICovXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICBzdXBlci5kaXNjb25uZWN0KCk7XG4gICAgICAgdGhpcy5pbml0ID0gZmFsc2U7XG4gICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgIGlmICh0aGlzLndzICE9IG51bGwgJiYgdGhpcy53cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuQ0xPU0VEKSB7XG4gICAgICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9uTWVzc2FnZSBtZXRob2QgdXNlZCBieSB0aGUgd2Vic29ja2V0IHRvIGNhbGxiYWNrIHRoZSBkYXRhXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGNhbGxiYWNrIGRhdGFcbiAgICAgKiBAZXZlbnRcbiAgICAgKi9cbiAgICBvbk1lc3NhZ2UoZGF0YSkge1xuICAgIH1cblxuXG4gICAgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy53cyAhPSBudWxsICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViU29ja2V0Q29ubmVjdG9yO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgRGF0YUNvbm5lY3RvciBmcm9tICcuL0RhdGFDb25uZWN0b3IuanMnO1xuaW1wb3J0IHtpc0RlZmluZWR9IGZyb20gJy4uL3V0aWxzL1V0aWxzLmpzJztcblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBBamF4Q29ubmVjdG9yIHRvIGNvbm5lY3QgdG8gYSByZW1vdGUgc2VydmVyIGJ5IG1ha2luZyBBamF4UmVxdWVzdC5cbiAqIEBleHRlbmRzIERhdGFDb25uZWN0b3JcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgQWpheCBmcm9tICdvc2gvZGF0YWNvbm5lY3Rvci9BamF4LmpzJztcbiAqXG4gKiBsZXQgcmVxdWVzdCA9IC4uLjtcbiAqIGxldCBjb25uZWN0b3IgPSBuZXcgQWpheCh1cmwpO1xuICpcbiAqIC8vIGhhbmRsZSBvblN1Y2Nlc3NcbiAqIGNvbm5lY3Rvci5vblN1Y2Nlc3MgPSBmdW5jdGlvbihldmVudCkge1xuICogIC8vIGRvZXMgc29tZXRoaW5nXG4gKiB9XG4gKlxuICogY29ubmVjdG9yLm9uRXJyb3IgPSBmdW5jdGlvbihldmVudCkge1xuICogIC8vIGRvZXMgc29tZXRoaW5nXG4gKiB9XG4gKlxuICogLy8gc2VuZCByZXF1ZXN0XG4gKiBjb25uZWN0b3Iuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG4gKlxuICovXG5jbGFzcyBBamF4IGV4dGVuZHMgRGF0YUNvbm5lY3RvciB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIEFqYXguXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCAtXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm1ldGhvZCAtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucmVzcG9uc2VUeXBlIC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih1cmwsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIodXJsKTtcblxuICAgICAgICB0aGlzLm1ldGhvZCA9IFwiUE9TVFwiO1xuICAgICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZCA9IHByb3BlcnRpZXMubWV0aG9kO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy5yZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlVHlwZSA9IHByb3BlcnRpZXMucmVzcG9uc2VUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgdGhlIHJlcXVlc3QgdG8gdGhlIGRlZmluZWQgc2VydmVyLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0IC0gVGhlIEh0dHAgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBleHRyYVVybCAtIGdldCBxdWVyeSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgc2VuZFJlcXVlc3QocmVxdWVzdCwgZXh0cmFVcmwpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4bWxodHRwLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgIHhtbGh0dHAudGltZW91dCA9IDYwMDAwO1xuICAgICAgICBpZiAocmVxdWVzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChleHRyYVVybCkpIHtcbiAgICAgICAgICAgICAgICB4bWxodHRwLm9wZW4oXCJHRVRcIiwgdGhpcy5nZXRVcmwoKSArIFwiP1wiICsgZXh0cmFVcmwsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4bWxodHRwLm9wZW4oXCJHRVRcIiwgdGhpcy5nZXRVcmwoKSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWxodHRwLnJlc3BvbnNlVHlwZSA9IHRoaXMucmVzcG9uc2VUeXBlO1xuICAgICAgICAgICAgeG1saHR0cC5vbmxvYWQgPSAob0V2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHhtbGh0dHAucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbk1lc3NhZ2UoeG1saHR0cC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHhtbGh0dHAub250aW1lb3V0ID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRpbWVvdXRcIik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB4bWxodHRwLnNlbmQobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4bWxodHRwLm9wZW4oXCJQT1NUXCIsIHRoaXMuZ2V0VXJsKCksIHRydWUpO1xuICAgICAgICAgICAgeG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC94bWwnKTtcblxuICAgICAgICAgICAgeG1saHR0cC5zZW5kKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICB4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoeG1saHR0cC5yZWFkeVN0YXRlIDwgNCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGlsZSB3YWl0aW5nIHJlc3BvbnNlIGZyb20gc2VydmVyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxodHRwLnJlYWR5U3RhdGUgPT09IDQpIHsgICAgICAgICAgICAgICAgLy8gNCA9IFJlc3BvbnNlIGZyb20gc2VydmVyIGhhcyBiZWVuIGNvbXBsZXRlbHkgbG9hZGVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoeG1saHR0cC5zdGF0dXMgPT09IDIwMCAmJiB4bWxodHRwLnN0YXR1cyA8IDMwMCkgeyAvLyBodHRwIHN0YXR1cyBiZXR3ZWVuIDIwMCB0byAyOTkgYXJlIGFsbCBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9uU3VjY2Vzcyh4bWxodHRwLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9uRXJyb3IoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgY2FsbGJhY2sgbWV0aG9kIGluIGNhc2Ugb2YgZ2V0dGluZyBlcnJvciBjb25uZWN0aW9uLlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXJyb3IgZGV0YWlsc1xuICAgICAqIEBldmVudFxuICAgICAqL1xuICAgIG9uRXJyb3IoZXZlbnQpIHtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIGNhbGxiYWNrIG1ldGhvZCBpbiBjYXNlIG9mIGdldHRpbmcgc3VjY2VzcyBjb25uZWN0aW9uLlxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqIEBldmVudFxuICAgICAqL1xuICAgIG9uU3VjY2VzcyhldmVudCkge1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgdGhlIHJlcXVlc3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QobnVsbCk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQWpheDtcbiIsImltcG9ydCBEYXRhQ29ubmVjdG9yIGZyb20gXCIuL0RhdGFDb25uZWN0b3JcIjtcblxuY2xhc3MgVG9waWNDb25uZWN0b3IgZXh0ZW5kcyBEYXRhQ29ubmVjdG9yIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLmxhc3RSZWNlaXZlVGltZSA9IC0xO1xuICAgICAgICB0aGlzLmludGVydmFsID0gLTE7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byB0aGUgYnJvYWRjYXN0Q2hhbm5lbC5cbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5icm9hZGNhc3RDaGFubmVsID09PSBudWxsKSB7XG4gICAgICAgICAgICAvL2NyZWF0ZXMgYnJvYWRjYXN0Q2hhbm5lbFxuICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsID0gbmV3IEJyb2FkY2FzdENoYW5uZWwodGhpcy5nZXRVcmwoKSk7XG4gICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwub25tZXNzYWdlID0gIChldmVudCkgID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RSZWNlaXZlVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgLy9jYWxsYmFjayBkYXRhIG9uIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICB0aGlzLm9uTWVzc2FnZShldmVudC5kYXRhLmRhdGEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gY2xvc2VzIHNvY2tldCBpZiBhbnkgZXJyb3JzIG9jY3VyXG4gICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwub25lcnJvciA9ICAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdCcm9hZGNhc3RDaGFubmVsIHN0cmVhbSBlcnJvcjogJyArIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RSZWNlaXZlVGltZSA9IC0xO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy9pbml0IHRoZSByZWNvbm5lY3QgaGFuZGxlclxuICAgICAgICAgICAgaWYgKHRoaXMuaW50ZXJ2YWwgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbHRhID0gRGF0ZS5ub3coKSAtIHRoaXMubGFzdFJlY2VpdmVUaW1lO1xuICAgICAgICAgICAgICAgICAgICAvLyAtMSBtZWFucyB0aGUgV1Mgd2VudCBpbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0UmVjZWl2ZVRpbWUgPT09IC0xIHx8IChkZWx0YSA+PSB0aGlzLnJlY29ubmVjdFRpbWVvdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHRyeWluZyB0byByZWNvbm5lY3QgYWZ0ZXIgJHt0aGlzLnJlY29ubmVjdFRpbWVvdXR9IC4uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCB0aGlzLnJlY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIHdlYnNvY2tldC5cbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmZ1bGxEaXNjb25uZWN0KHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bGx5IGRpc2Nvbm5lY3QgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uIGJ5IHNlbmRpbmcgYSBjbG9zZSBtZXNzYWdlIHRvIHRoZSB3ZWJXb3JrZXIuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSByZW1vdmVJbnRlcnZhbCAgLSBmb3JjZSByZW1vdmluZyB0aGUgaW50ZXJ2YWxcbiAgICAgKi9cbiAgICBmdWxsRGlzY29ubmVjdChyZW1vdmVJbnRlcnZhbCkge1xuICAgICAgICBpZiAodGhpcy5icm9hZGNhc3RDaGFubmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbC5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVtb3ZlSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnkgdG8gcmVjb25uZWN0IGlmIHRoZSBjb25uZXhpb24gaWYgY2xvc2VkXG4gICAgICovXG4gICAgcmVjb25uZWN0KCkge1xuICAgICAgICB0aGlzLm9uUmVjb25uZWN0KCk7XG4gICAgICAgIGlmICh0aGlzLmluaXQpIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbERpc2Nvbm5lY3QoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdCgpO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9uTWVzc2FnZSBtZXRob2QgdXNlZCBieSB0aGUgd2Vic29ja2V0IHRvIGNhbGxiYWNrIHRoZSBkYXRhXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGNhbGxiYWNrIGRhdGFcbiAgICAgKiBAZXZlbnRcbiAgICAgKi9cbiAgICBvbk1lc3NhZ2UoZGF0YSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgd2ViU29ja2V0LlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvcGljQ29ubmVjdG9yO1xuIiwiZXhwb3J0IGNvbnN0IEV2ZW50VHlwZSA9IHtcbiAgICBEQVRBOiAnZGF0YScsXG4gICAgU1RBVFVTOiAnc3RhdHVzJ1xufTtcbiIsImltcG9ydCBXZWJTb2NrZXRDb25uZWN0b3IgZnJvbSBcIi4uLy4uL2RhdGFjb25uZWN0b3IvV2ViU29ja2V0Q29ubmVjdG9yLmpzXCI7XG5pbXBvcnQgQWpheCBmcm9tIFwiLi4vLi4vZGF0YWNvbm5lY3Rvci9BamF4LmpzXCI7XG5pbXBvcnQge2lzRGVmaW5lZH0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQgVG9waWNDb25uZWN0b3IgZnJvbSBcIi4uLy4uL2RhdGFjb25uZWN0b3IvVG9waWNDb25uZWN0b3IuanNcIjtcbmltcG9ydCB7RXZlbnRUeXBlfSBmcm9tIFwiLi4vLi4vZXZlbnQvRXZlbnRUeXBlLmpzXCI7XG5pbXBvcnQge1N0YXR1c30gZnJvbSBcIi4uLy4uL2RhdGFjb25uZWN0b3IvU3RhdHVzXCI7XG5cbmNsYXNzIERhdGFTb3VyY2VIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHBhcnNlcikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RUaW1lU3RhbXAgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RTdGFydFRpbWUgPSAnbm93JztcbiAgICAgICAgdGhpcy50aW1lU2hpZnQgPSAwO1xuICAgICAgICB0aGlzLnJlY29ubmVjdFRpbWVvdXQgPSAxMDAwICogMTA7IC8vIDEwIHNlY3NcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBjcmVhdGVDb25uZWN0b3IocHJvcGVydGllc1N0ciwgdG9waWMsIGRhdGFTb3VyY2VJZCkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VJZCA9IGRhdGFTb3VyY2VJZDtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGV4aXN0aW5nIGNvbm5lY3RvclxuICAgICAgICBpZih0aGlzLmNvbm5lY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKHRvcGljKTtcblxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gSlNPTi5wYXJzZShwcm9wZXJ0aWVzU3RyKTtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMuZmV0Y2gpKSB7XG4gICAgICAgICAgICB0aGlzLmZldGNoID0gcHJvcGVydGllcy5mZXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy50aW1lU2hpZnQpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVTaGlmdCA9IHByb3BlcnRpZXMudGltZVNoaWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcmluZ1RpbWUgPSBwcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMudGltZU91dCkpIHtcbiAgICAgICAgICAgIHRoaXMudGltZU91dCA9IHByb3BlcnRpZXMudGltZU91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5yZWNvbm5lY3RUaW1lb3V0KSkge1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lb3V0ID0gcHJvcGVydGllcy5yZWNvbm5lY3RUaW1lb3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocHJvcGVydGllcy5zdGFydFRpbWUgPT09ICdub3cnKSB7XG4gICAgICAgICAgICB0aGlzLmJhdGNoU2l6ZSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMucmVwbGF5U3BlZWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0RlZmluZWQocHJvcGVydGllcy5iYXRjaFNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0Y2hTaXplID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5iYXRjaFNpemUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaFNpemUgPSBwcm9wZXJ0aWVzLmJhdGNoU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gICAgICAgIHRoaXMuY3JlYXRlRGF0YUNvbm5lY3Rvcih0aGlzLnByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY3JlYXRlRGF0YUNvbm5lY3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMucGFyc2VyLmJ1aWxkVXJsKHtcbiAgICAgICAgICAgIC4uLnByb3BlcnRpZXMsXG4gICAgICAgICAgICB0aW1lU2hpZnQ6IHRoaXMudGltZVNoaWZ0XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjaGVja3MgaWYgdHlwZSBpcyBXZWJTb2NrZXRDb25uZWN0b3JcbiAgICAgICAgaWYgKHByb3BlcnRpZXMucHJvdG9jb2wuc3RhcnRzV2l0aCgnd3MnKSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBuZXcgV2ViU29ja2V0Q29ubmVjdG9yKHVybCk7XG4gICAgICAgICAgICAvLyBjb25uZWN0cyB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yLm9uTWVzc2FnZSA9IHRoaXMub25NZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAvLyBzZXQgdGhlIHJlY29ubmVjdFRpbWVvdXRcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yLnNldFJlY29ubmVjdFRpbWVvdXQodGhpcy5yZWNvbm5lY3RUaW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0aWVzLnByb3RvY29sLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBuZXcgQWpheCh1cmwpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgIC8vIGNvbm5lY3RzIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3Iub25NZXNzYWdlID0gdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgcmVjb25uZWN0VGltZW91dFxuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3Iuc2V0UmVjb25uZWN0VGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnRpZXMucHJvdG9jb2wuc3RhcnRzV2l0aCgndG9waWMnKSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBuZXcgVG9waWNDb25uZWN0b3IodXJsKTtcbiAgICAgICAgICAgIC8vIGNvbm5lY3RzIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3Iub25NZXNzYWdlID0gdGhpcy5vbk1lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgcmVjb25uZWN0VGltZW91dFxuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3Iuc2V0UmVjb25uZWN0VGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFzdFN0YXJ0VGltZUNzdCA9IHRoaXMucGFyc2VyLmxhc3RTdGFydFRpbWU7XG4gICAgICAgIGNvbnN0IGxhc3RQcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBiaW5kIGNoYW5nZSBjb25uZWN0aW9uIFNUQVRVU1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3Iub25DaGFuZ2VTdGF0dXMgICA9IHRoaXMub25DaGFuZ2VTdGF0dXMuYmluZCh0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3Iub25SZWNvbm5lY3QgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgbm90IHJlYWwgdGltZSwgcHJlc2VydmUgbGFzdCB0aW1lc3RhbXAgdG8gcmVjb25uZWN0IGF0IHRoZSBsYXN0IHRpbWUgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGhhdCwgd2UgdXBkYXRlIHRoZSBVUkwgd2l0aCB0aGUgbmV3IGxhc3QgdGltZSByZWNlaXZlZFxuICAgICAgICAgICAgICAgIGlmIChsYXN0U3RhcnRUaW1lQ3N0ICE9PSAnbm93Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rvci5zZXRVcmwodGhpcy5wYXJzZXIuYnVpbGRVcmwoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VGltZVN0YW1wOiBpc0RlZmluZWQodGhpcy5sYXN0VGltZVN0YW1wKSA/IG5ldyBEYXRlKHRoaXMubGFzdFRpbWVTdGFtcCkudG9JU09TdHJpbmcoKTogcHJvcGVydGllcy5zdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0b3BpYyB0byBsaXN0ZW5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9waWMgLSB0aGUgdG9waWMgdG8gbGlzdGVuXG4gICAgICovXG4gICAgc2V0VG9waWModG9waWMpIHtcbiAgICAgICAgaWYodGhpcy5icm9hZGNhc3RDaGFubmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCh0b3BpYyk7XG4gICAgICAgIHRoaXMudG9waWMgPSB0b3BpYztcbiAgICB9XG5cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZih0aGlzLmNvbm5lY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgaWYodGhpcy5jb25uZWN0b3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTWVzc2FnZShldmVudCkge1xuICAgICAgICBjb25zdCB0aW1lU3RhbXAgPSB0aGlzLnBhcnNlci5wYXJzZVRpbWVTdGFtcChldmVudCkgKyB0aGlzLnRpbWVTaGlmdDtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMucGFyc2VyLnBhcnNlRGF0YShldmVudCk7XG5cbiAgICAgICAgdGhpcy52YWx1ZXMucHVzaCh7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgdGltZVN0YW1wOiB0aW1lU3RhbXBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGFzdFRpbWVTdGFtcCA9IHRpbWVTdGFtcDtcblxuICAgICAgICBpZihpc0RlZmluZWQodGhpcy5iYXRjaFNpemUpICYmIHRoaXMudmFsdWVzLmxlbmd0aCA+PSB0aGlzLmJhdGNoU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIGNoYW5nZSBzdGF0dXMgZXZlbnQgaW50byB0aGUgYnJvYWRjYXN0IGNoYW5uZWxcbiAgICAgKiBAcGFyYW0ge1N0YXR1c30gc3RhdHVzIC0gdGhlIG5ldyBzdGF0dXNcbiAgICAgKi9cbiAgICBvbkNoYW5nZVN0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgaWYoc3RhdHVzID09PSBTdGF0dXMuRElTQ09OTkVDVEVEKSB7XG4gICAgICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLlNUQVRVUyxcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgICAgZGF0YVNvdXJjZUlkOiB0aGlzLmRhdGFTb3VyY2VJZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRMYXN0VGltZVN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0VGltZVN0YW1wO1xuICAgIH1cblxuICAgIHVwZGF0ZVVybChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuXG4gICAgICAgIGxldCBsYXN0VGltZXN0YW1wID0gIG5ldyBEYXRlKHRoaXMubGFzdFRpbWVTdGFtcCkudG9JU09TdHJpbmcoKTtcblxuICAgICAgICBpZihwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCdzdGFydFRpbWUnKSkge1xuICAgICAgICAgICAgbGFzdFRpbWVzdGFtcCA9IHByb3BlcnRpZXMuc3RhcnRUaW1lO1xuICAgICAgICB9IGVsc2UgaWYodGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZSA9PT0gJ25vdycpe1xuICAgICAgICAgICAgLy9oYW5kbGUgUmVhbFRpbWVcbiAgICAgICAgICAgIGxhc3RUaW1lc3RhbXAgPSAnbm93JztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlRGF0YUNvbm5lY3Rvcih7XG4gICAgICAgICAgICAuLi50aGlzLnByb3BlcnRpZXMsXG4gICAgICAgICAgICAuLi5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgbGFzdFRpbWVTdGFtcDogbGFzdFRpbWVzdGFtcFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2VJZDogdGhpcy5kYXRhU291cmNlSWQsXG4gICAgICAgICAgICB0eXBlOiBFdmVudFR5cGUuREFUQSxcbiAgICAgICAgICAgIHZhbHVlczogdGhpcy52YWx1ZXMuc3BsaWNlKDAsIHRoaXMudmFsdWVzLmxlbmd0aClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTWVzc2FnZShtZXNzYWdlLCB3b3JrZXIpIHtcbiAgICAgICAgaWYobWVzc2FnZS5tZXNzYWdlID09PSAnaW5pdCcpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29ubmVjdG9yKG1lc3NhZ2UucHJvcGVydGllcywgbWVzc2FnZS50b3BpYywgbWVzc2FnZS5pZCk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5tZXNzYWdlID09PSAnY29ubmVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UubWVzc2FnZSA9PT0gJ2Rpc2Nvbm5lY3QnKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLm1lc3NhZ2UgPT09ICd0b3BpYycpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VG9waWMobWVzc2FnZS50b3BpYyk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5tZXNzYWdlID09PSAnbGFzdC10aW1lc3RhbXAnKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0VGltZVN0YW1wID0gdGhpcy5nZXRMYXN0VGltZVN0YW1wKCk7XG4gICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdsYXN0LXRpbWVzdGFtcCcsXG4gICAgICAgICAgICAgICAgZGF0YTogbGFzdFRpbWVTdGFtcFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSAgZWxzZSBpZiAobWVzc2FnZS5tZXNzYWdlID09PSAndXBkYXRlLXVybCcpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVXJsKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5tZXNzYWdlID09PSAnaXMtY29ubmVjdGVkJykge1xuICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaXMtY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICBkYXRhOiAodGhpcy5jb25uZWN0b3IgPT09IG51bGwpPyBmYWxzZTogdGhpcy5jb25uZWN0b3IuaXNDb25uZWN0ZWQoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IERhdGFTb3VyY2VIYW5kbGVyO1xuXG4iLCJpbXBvcnQgVmlkZW9QYXJzZXIgZnJvbSAnLi4vcGFyc2Vycy9WaWRlby5wYXJzZXIuanMnO1xuaW1wb3J0IERhdGFTb3VyY2VIYW5kbGVyIGZyb20gJy4vRGF0YVNvdXJjZUhhbmRsZXIuanMnO1xuXG5jb25zdCBkYXRhU291cmNlSGFuZGxlciA9IG5ldyBEYXRhU291cmNlSGFuZGxlcihuZXcgVmlkZW9QYXJzZXIoKSk7XG5cbnNlbGYub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgZGF0YVNvdXJjZUhhbmRsZXIuaGFuZGxlTWVzc2FnZShldmVudC5kYXRhLCBzZWxmKTtcbn1cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")}]);