{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/workers/SosGetResultAudio.worker.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeriesDataSource.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/SosGetResultAudio.js","webpack:///./webapi.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Worker","Math","pow","isDefined","v","assertDefined","letName","randomUUID","replace","random","toString","Status","properties","worker","this","id","dataSourceWorker","currentRunningProperties","initDataSource","postMessage","message","JSON","stringify","topic","getTopicId","Promise","resolve","BroadcastChannel","onmessage","event","data","status","isConnected","promise","terminate","super","startTime","endTime","timeSync","timeTopic","getTimeTopicId","replaySpeed","reconnect","replay","updateProperties","minTime","maxTime","getCurrentTime","timeShift","reconnectTimeout","document","querySelector","getElementById","onclick","async","console","log","audioDataSource","protocol","service","endpointUrl","offeringID","observedProperty","batchSize","bc","init","type","values","frameData","chunk","EncodedAudioChunk","buffer","timestamp","audioDecoder","decode","error","length","count","connect","test7","AudioDecoder","output","decodedSample","source","audioCtx","createBufferSource","destination","start","deltaInc","duration","window","AudioContext","webkitAudioContext","configure","codec","numberOfChannels","sampleRate"],"mappings":"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","file":"bundle.audio.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"WorkerName.a114cabac1df52ebc43f.js\");\n};","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nexport const MAX_LONG = Math.pow(2, 53) + 1;\n\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\nexport function isDefined(v) {\n    return typeof (v) !== 'undefined' && v !== null;\n}\n\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\nexport function hasValue(v) {\n    return isDefined(v) && v !== null;\n}\n\n/**\n Global helper method to transform hex color into RGBA\n */\nexport function hex2rgb(hex){\n    const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n    return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\nexport function hasType(v, expectedType) {\n    let hasVal = hasValue(v);\n    return hasVal && typeof (v) === expectedType;\n}\n\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\nexport function isObject(v, letName) {\n    return hasType(v, 'object', letName);\n}\n\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\nexport function isArray(v) {\n    return isDefined(v) && Array.isArray(v);\n}\n\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\nexport function isFunction(v, letName) {\n    return hasType(v, 'function', letName);\n}\n\n/**\n Assert that a letiable or object attribute is defined\n **/\nexport function assertDefined(v, letName = 'letiable') {\n    if (!isDefined(v)) {\n        throw letName + \" must be defined\";\n    }\n    return v;\n}\n\nexport function assertTrue(v, letName = 'letiable') {\n    if (!isDefined(v) || !v) {\n        throw letName;\n    }\n    return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\nexport function assertType(v, expectedType, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (typeof (v) !== expectedType) {\n        throw letName + \" must be of type \" + expectedType;\n    }\n    return v;\n}\n\n/**\n Assert that a letiable or object attribute is a string\n **/\nexport function assertBoolean(v, letName) {\n    return assertType(v, 'boolean', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a string\n **/\nexport function assertString(v, letName) {\n    return assertType(v, 'string', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a number\n **/\nexport function assertNumber(v, letName) {\n    return assertType(v, 'number', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a number\n **/\nexport function assertPositive(v, letName) {\n    assertNumber(v, letName);\n    if (v <= 0) {\n        throw letName + \" must be a positive number\";\n    }\n}\n\n/**\n Assert that a letiable or object attribute is an object\n **/\nexport function assertObject(v, letName) {\n    return assertType(v, 'object', letName);\n}\n\n/**\n Assert that a letiable or object attribute is an object\n **/\nexport function assertArray(v, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (!Array.isArray(v)) {\n        throw letName + \" must be an array\";\n    }\n    return v;\n}\n\n/**\n Assert that a letiable or object attribute is a function\n **/\nexport function assertFunction(v, letName) {\n    return assertType(v, 'function', letName);\n}\n\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\nexport function assertHasValue(v, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (!hasValue(v)) {\n        throw letName + \" must not be null\";\n    }\n    return v;\n}\n\n/**\n *\n * @return {String}\n */\nexport function randomUUID() {\n    return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\nexport function stampUUID(obj) {\n    obj._osh_id = obj._osh_id || randomUUID();\n    return obj._osh_id;\n}\n\n//buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\nexport function ParseBytes(buffer, offset, type) {\n    let view = new DataView(buffer);\n\n    //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n    //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n    //and unsignedLong\n    let typeMap = {\n        double: function (offset) {\n            return {val: view.getFloat64(offset), bytes: 8};\n        },\n        float64: function (offset) {\n            return {val: view.getFloat64(offset), bytes: 8};\n        },\n        float32: function (offset) {\n            return {val: view.getFloat32(offset), bytes: 4};\n        },\n        signedByte: function (offset) {\n            return {val: view.getInt8(offset), bytes: 1};\n        },\n        signedInt: function (offset) {\n            return {val: view.getInt32(offset), bytes: 4};\n        },\n        signedShort: function (offset) {\n            return {val: view.getInt16(offset), bytes: 2};\n        },\n        unsignedByte: function (offset) {\n            return {val: view.getUint8(offset), bytes: 1};\n        },\n        unsignedInt: function (offset) {\n            return {val: view.getUint32(offset), bytes: 4};\n        },\n        unsignedShort: function (offset) {\n            return {val: view.getUint16(offset), bytes: 2};\n        },\n        //TODO: string-utf-8:\n    };\n    return typeMap[type](offset);\n}\n\n//This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\nexport function ReadData(struct, data, offsetBytes) {\n    let offset = offsetBytes;\n    for (let i = 0; i < struct.fields.length; i++) {\n        let currFieldStruct = struct.fields[i];\n        if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n            let ret = ParseBytes(data, offset, currFieldStruct.type);\n            currFieldStruct.val = ret.val;\n            offset += ret.bytes;\n        } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n            //check if count is a reference to another letiable\n            if (isNaN(currFieldStruct.count)) {\n                let id = currFieldStruct.count;\n                let fieldName = struct.id2FieldMap[id];\n                currFieldStruct.count = struct.findFieldByName(fieldName).val;\n            }\n            for (let c = 0; c < currFieldStruct.count; c++) {\n                for (let j = 0; j < currFieldStruct.fields.length; j++) {\n                    let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n                    offset = ReadData(field, data, offset);\n                    currFieldStruct.val.push(field);\n                }\n            }\n        }\n    }\n    return offset;\n}\n\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\nexport function GetResultObject(resultStructure) {\n    //TODO: handle cases for nested arrays / matrix data types\n    let result = {};\n    for (let i = 0; i < resultStructure.fields.length; i++) {\n        if (isDefined(resultStructure.fields[i].count)) {\n            result[resultStructure.fields[i].name] = [];\n            for (let c = 0; c < resultStructure.fields[i].count; c++) {\n                let item = {};\n                for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n                    item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n                }\n                result[resultStructure.fields[i].name].push(item);\n            }\n        } else {\n            result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n        }\n    }\n    return result;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isOpera() {\n    return (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isFirefox() {\n    return typeof InstallTrigger !== 'undefined';\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isSafari() {\n    return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isChrome() {\n    return !!window.chrome && !!window.chrome.webstore;\n}\n\n/**\n *\n * @return {*|boolean}\n */\nexport function isBlink() {\n    return (isChrome || isOpera) && !!window.CSS;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\nexport function isArrayIntersect(a, b) {\n    return a.filter(function (element) {\n        return b.indexOf(element) > -1;\n    }).length > 0;\n}\n\n\n/**\n *\n * @param o\n * @return {boolean}\n */\nexport function isElement(o) {\n    return (\n      typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n        o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\"\n    );\n}\n\n/**\n *\n * @return {*}\n */\nexport function isWebWorker() {\n    return isDefined(Worker);\n}\n\n/**\n *\n * @param div\n */\nexport function takeScreenShot(div) {\n}\n\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\nexport function removeCss(div, css) {\n    let divCss = div.className;\n    css = divCss.replace(css, \"\");\n    div.className = css;\n}\n\n\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\nexport function addCss(div, css) {\n    div.setAttribute(\"class\", div.className + \" \" + css);\n}\n\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\nexport function removeLastCharIfExist(value) {\n    if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n        return value;\n    }\n\n    return value.substring(0, value.length - 1);\n}\n\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\nexport function roundHalf(num) {\n    return Math.round(num*2)/2;\n}\n\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n        var now = new Date().getTime(),\n            last = now - timestamp;\n\n        if (last < wait && last >= 0) {\n            timeout = setTimeout(later, wait - last);\n        } else {\n            timeout = null;\n            if (!immediate) {\n                result = func.apply(context, args);\n                if (!timeout) context = args = null;\n            }\n        }\n    };\n\n    return function() {\n        context = this;\n        args = arguments;\n        timestamp = new Date().getTime();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n            result = func.apply(context, args);\n            context = args = null;\n        }\n\n        return result;\n    };\n};\n\nexport function throttle(func, wait, leading, trailing, context) {\n    var ctx, args, result;\n    var timeout = null;\n    var previous = 0;\n    var later = function() {\n        previous = new Date;\n        timeout = null;\n        result = func.apply(ctx, args);\n    };\n    return function() {\n        var now = new Date;\n        if (!previous && !leading) previous = now;\n        var remaining = wait - (now - previous);\n        ctx = context || this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(ctx, args);\n        } else if (!timeout && trailing) {\n            // Sinon on s’endort pendant le temps restant\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n};\n\nexport function merge (target, source) {\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n    for (const key of Object.keys(source)) {\n        if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]))\n    }\n\n    // Join `target` and modified `source`\n    Object.assign(target || {}, source)\n    return target\n};\n","export const DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nexport const TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\n\nexport const DATASOURCE_DATA_TOPIC = 'datasource-data-';\nexport const DATASOURCE_TIME_TOPIC = 'datasource-time-';\n\nexport const FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\n","/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nexport const Status = {\n    CONNECTING: \"connecting\",\n    CONNECTED:  \"connected\",\n    DISCONNECTED: \"disconnected\"\n};\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nimport {randomUUID} from '../utils/Utils.js';\nimport {DATASOURCE_DATA_TOPIC} from \"../Constants\";\nimport {Status} from \"../protocol/Status\";\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\nclass DataSource {\n    /**\n     * @param {String} name - the datasource name\n     * @param {Object} properties - the datasource properties\n     * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n     * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n     * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n     * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {Number} [properties.replaySpeed=1] the replay factor\n     * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n     * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n     * @param {Number} [properties.batchSize=1] - the number of data to fetch\n     * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n     * @param {Object} worker - DataSource worker\n     */\n    constructor(name, properties, worker) {\n        this.id = \"DataSource-\" + randomUUID();\n        this.name = name;\n        this.properties = properties;\n        this.dataSourceWorker = worker;\n        this.currentRunningProperties = {};\n        this.initDataSource(properties);\n    }\n\n    /**\n     * Inits the datasource with the constructor properties.\n     * @protected\n     * @param properties\n     */\n    initDataSource(properties) {\n        this.dataSourceWorker.postMessage({\n            message: 'init',\n            id: this.id,\n            properties: JSON.stringify(properties),\n            topic: this.getTopicId()\n        });\n    }\n\n\n    /**\n     * Disconnect the dataSource then the protocol will be closed as well.\n     */\n    disconnect() {\n        this.dataSourceWorker.postMessage({\n            message: 'disconnect'\n        });\n    }\n\n    /**\n     * Trigger when the datasource is disconnected for some reason.\n     */\n    onDisconnect() {\n        return new Promise(resolve => {\n            new BroadcastChannel(this.getTopicId()).onmessage = (event) => {\n                if(event.data.status === Status.DISCONNECTED) {\n                    resolve();\n                }\n            }\n        });\n    }\n\n    /**\n     * Connect the dataSource then the protocol will be opened as well.\n     */\n    async connect() {\n        this.dataSourceWorker.postMessage({\n            message: 'connect'\n        });\n        return this.isConnected();\n    }\n\n    async isConnected() {\n        const promise = new Promise(resolve => {\n            if(this.dataSourceWorker !== null) {\n                this.dataSourceWorker.onmessage = (event) => {\n                    if (event.data.message === 'is-connected') {\n                        resolve(event.data.data);\n                    }\n                };\n            }\n        });\n        if(this.dataSourceWorker !== null) {\n            this.dataSourceWorker.postMessage({\n                message: 'is-connected'\n            });\n        }\n\n        return promise;\n    }\n\n    /**\n     * Gets the datasource id.\n     * @return {String} the datasource id\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * Gets the datasource name.\n     * @return {String} the datasource name\n     */\n    getName() {\n        return this.name;\n    }\n\n    /**\n     * Update properties\n     * @param {String} name - the datasource name\n     * @param {Object} properties - the datasource properties\n     * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n     * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n     * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n     * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n     * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n     */\n    updateProperties(properties) {\n        // save current running properties\n        this.currentRunningProperties = {\n            ...this.properties,\n            ...properties\n        };\n        if(this.dataSourceWorker !== null) {\n            this.dataSourceWorker.postMessage({\n                message: 'update-url',\n                data: properties\n            });\n        }\n    }\n\n    getCurrentRunningProperties() {\n        return this.currentRunningProperties;\n    }\n\n    terminate() {\n        if(this.dataSourceWorker !== null) {\n            this.dataSourceWorker.terminate();\n        }\n    }\n\n    getTopicId() {\n        return DATASOURCE_DATA_TOPIC + this.id;\n    }\n}\n\nexport default DataSource;\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nimport DataSource from \"./DataSource\";\nimport {DATA_SYNCHRONIZER_TOPIC, DATASOURCE_TIME_TOPIC} from \"../Constants\";\nimport {assertDefined, isDefined} from \"../utils/Utils\";\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\nclass TimeSeriesDataSource extends DataSource{\n    /**\n     * @param {String} name - the datasource name\n     * @param {Object} properties - the datasource properties\n     * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n     * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n     * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n     * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {String} [properties.minTime=properties.startTime] the min range time (ISO format)\n     * @param {String} [properties.maxTime=properties.endTime] the max range time (ISO format)\n     * @param {Number} [properties.replaySpeed=1] the replay factor\n     * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n     * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n     * @param {Number} [properties.batchSize=1] - the number of data to fetch\n     * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n     * @param {Object} worker - DataSource worker\n     */\n    constructor(name, properties, worker) {\n        super(name,properties ,worker);\n\n        assertDefined(properties,'Some properties must be defined');\n        assertDefined(properties.startTime,'startTime must must be defined');\n        assertDefined(properties.endTime,'startTime must must be defined');\n\n        this.timeSync = null;\n    }\n\n    setDataSynchronizer(timeSync) {\n        this.timeSync = timeSync;\n        this.dataSourceWorker.postMessage({\n            message: 'topic',\n            topic: DATA_SYNCHRONIZER_TOPIC+this.timeSync.id,\n            timeTopic: this.getTimeTopicId()\n        });\n    }\n\n    /**\n     * Inits the datasource with the constructor properties.\n     * @protected\n     * @param properties\n     */\n    initDataSource(properties) {\n        super.initDataSource(properties);\n        this.dataSourceWorker.postMessage({\n            message: 'topic',\n            topic: this.getTopicId(),\n            timeTopic: this.getTimeTopicId()\n        });\n    }\n\n    /**\n     * Sets the data source time range\n     * @param {String} startTime - the startTime (in date ISO)\n     * @param {String} endTime - the startTime (in date ISO)\n     * @param {Number} replaySpeed - the replay speed\n     * @param {boolean} reconnect - reconnect if was connected\n     */\n    setTimeRange(startTime, endTime, replaySpeed, reconnect= false) {\n        let replay = {};\n        if(isDefined(replaySpeed)) {\n            replay =  {\n                replaySpeed: replaySpeed\n            }\n        }\n        this.updateProperties({\n            ...this.currentRunningProperties,\n            startTime: startTime,\n            endTime: endTime,\n           ...replay,\n            reconnect : reconnect\n        });\n    }\n\n    /**\n     * Gets the startTime\n     * @returns {String} - startTime as ISO date\n     */\n    getStartTime() {\n        return this.properties.startTime;\n    }\n\n    /**\n     * Gets the endTime\n     * @returns {String} - endTime as ISO date\n     */\n    getEndTime() {\n        return this.properties.endTime;\n    }\n\n    /**\n     * Gets the startTime\n     * @returns {String} - startTime as ISO date\n     */\n    getMinTime() {\n        return this.properties.minTime;\n    }\n\n    /**\n     * Gets the endTime\n     * @returns {String} - endTime as ISO date\n     */\n    getMaxTime() {\n        return this.properties.maxTime;\n    }\n\n    /**\n     * Gets the endTime\n     * @returns {String} - endTime as ISO date\n     */\n    getReplaySpeed() {\n        return isDefined(this.properties.replaySpeed) ? this.properties.replaySpeed : 1;\n    }\n\n    async getCurrentTime() {\n        if(isDefined(this.timeSync)) {\n            return this.timeSync.getCurrentTime();\n        } else {\n            const promise = new Promise(resolve => {\n                if(this.dataSourceWorker !== null) {\n                    this.dataSourceWorker.onmessage = (event) => {\n                        if (event.data.message === 'last-timestamp') {\n                            resolve(event.data.data);\n                        }\n                    };\n                }\n            });\n            if(this.dataSourceWorker !== null) {\n                this.dataSourceWorker.postMessage({\n                    message: 'last-timestamp'\n                });\n            }\n\n            return promise;\n        }\n    }\n\n    /**\n     * Update properties\n     * @param {String} name - the datasource name\n     * @param {Object} properties - the datasource properties\n     * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n     * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n     * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n     * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {Number} properties.replaySpeed the replay speed\n     * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n     * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n     */\n    updateProperties(properties) {\n        super.updateProperties(properties);\n    }\n\n\n    getTimeTopicId() {\n        return DATASOURCE_TIME_TOPIC + this.id;\n    }\n}\n\nexport default TimeSeriesDataSource;\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nimport TimeSeriesDataSource from './TimeSeriesDataSource.js';\nimport SosGetResultAudioWorker from \"./workers/SosGetResultAudio.worker.js\";\n\n/**\n * This datasource provides parsing to AAC raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import SosGetResultAudio from 'core/datasource/SosGetResultAudio.js';\n *\n * var videoDataSource = new SosGetResultAudio(\"AAC audio\", {\n        protocol: \"ws\",\n        service: \"SOS\",\n        endpointUrl: \"sensiasoft.net:8181/sensorhub/sos\",\n        offeringID: \"urn:android:device:dd90fceba7fd5b47-sos\",\n        observedProperty: \"http://sensorml.com/ont/swe/property/AudioFrame\",\n        startTime: \"2021-03-24T09:56:00Z\",\n        endTime: \"now\",\n        replaySpeed: 1,\n        bufferingTime: 10\n  });\n */\nclass SosGetResultAudio extends TimeSeriesDataSource {\n    /**\n     * @param {String} name - the datasource name\n     * @param {Object} properties - the datasource properties\n     * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n     * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n     * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n     * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {Number} [properties.replaySpeed=1] the replay factor\n     * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n     * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n     */\n    constructor(name, properties) {\n        super(name, {\n            timeShift:0,\n            reconnectTimeout: 1000 * 5, // default if not defined into properties\n            ...properties\n        }, new SosGetResultAudioWorker());\n    }\n}\n\nexport default  SosGetResultAudio;\n","import SosGetResultAudio from \"osh-js/core/datasource/SosGetResultAudio\";\nimport {DATASOURCE_DATA_TOPIC} from \"osh-js/core/Constants\";\n\nconst button = document.querySelector('button');\nconst samplesElement = document.getElementById(\"samples\");\n\nbutton.onclick = () => test7();\n\nlet audioDecoder = new AudioDecoder({\n    output: onDecodedAudio,\n    error: onDecodedAudioError\n});\n\nlet AudioContext = window.AudioContext || window.webkitAudioContext;\nlet audioCtx = new AudioContext();\nlet deltaInc = 0;\n\nfunction onDecodedAudio(decodedSample) {\n    const buffer = decodedSample.buffer;\n    let source = audioCtx.createBufferSource();\n    source.buffer = buffer;\n    source.connect(audioCtx.destination);\n    source.start(deltaInc);\n    deltaInc += buffer.duration;\n}\n\nfunction onDecodedAudioError(error) {\n    console.error(error);\n}\n\nconst sampleRate = 11025;\n\nasync function init() {\n    await audioDecoder.configure({\n        codec: 'mp4a.40.2',\n        numberOfChannels:1,\n        sampleRate: sampleRate\n    });\n}\n\nlet count =0;\nasync function test6() {\n    await init();\n    fetch('./data/ff-16b-1c-8000hz.aac')\n        // Retrieve its body as ReadableStream\n        .then(response => {\n            const stream = response.body;\n            const reader = stream.getReader();\n\n            let first =  true;\n            let deltaInc = 0;\n            reader.read().then(async function processBytes({done, value}) {\n                if (done) {\n                    console.log(\"Stream complete\");\n                    return;\n                }\n                deltaInc = 0;\n\n                const chunk = new EncodedAudioChunk({\n                    type:  first? \"key\" : \"delta\",\n                    data: value.buffer,\n                    timestamp: 0\n                });\n\n                try {\n                    audioDecoder.decode(chunk);\n                    console.log(value.length/sampleRate, count);\n                } catch (error) {\n                    console.error(error, (value.length/sampleRate),count);\n                }\n\n                count++;\n                deltaInc += value.length/sampleRate;\n                first = false;\n                return reader.read().then(processBytes);\n            });\n        });\n}\n\n\nasync function test7() {\n    console.log('using webcodec');\n    // create data source for UAV camera\n    let audioDataSource = new SosGetResultAudio(\"alex-audio\", {\n        protocol: \"ws\",\n        service: \"SOS\",\n        endpointUrl: \"sensiasoft.net:8181/sensorhub/sos\",\n        offeringID: \"urn:android:device:dd90fceba7fd5b47-sos\",\n        observedProperty: \"http://sensorml.com/ont/swe/property/AudioFrame\",\n        startTime: \"2021-03-24T09:56:00Z\",\n        endTime: \"now\",\n        // replaySpeed: 1.5,\n        batchSize:500\n    });\n\n    const bc  = new BroadcastChannel(DATASOURCE_DATA_TOPIC + audioDataSource.id);\n\n    let first = true;\n    await init();\n    bc.onmessage = async (message) => {\n        if (message.data.type === 'data') {\n            for (let value of message.data.values) {\n                const data = value.data.frameData;\n                const chunk = new EncodedAudioChunk({\n                    type:  first? \"key\" : \"delta\",\n                    data: data.buffer,\n                    timestamp: 0\n                });\n\n                try {\n                    audioDecoder.decode(chunk);\n                } catch (error) {\n                    console.error(error, (value.length/sampleRate),count);\n                }\n\n                // first = false;\n            }\n        }\n    }\n\n    audioDataSource.connect();\n}\n"],"sourceRoot":""}