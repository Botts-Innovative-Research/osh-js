{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/parsers/DataSourceParser.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/parsers/TimeSeriesParser.parser.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/parsers/SosGetResultAudio.parser.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/DataConnector.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/WebSocketConnector.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Ajax.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/TopicConnector.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/FileConnector.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/workers/DataSourceHandler.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/workers/SosGetResultAudio.worker.js","webpack:////home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/workers/TimeSeriesDataSourceHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Math","pow","isDefined","v","randomUUID","replace","random","toString","properties","url","protocol","endpointUrl","service","responseFormat","customUrlParams","keys","length","endsWith","slice","super","buildUrl","offeringID","observedProperty","stTime","lastTimeStamp","startTime","this","lastStartTime","endTime","replaySpeed","data","DataView","getFloat64","sampleRate","getUint32","nbSamples","pktLength","frameData","Uint8Array","byteLength","foiId","of","Status","id","reconnectTimeout","status","reconnectionInterval","clearInterval","checkStatus","checkAndClearReconnection","timeout","disconnect","connect","onChangeStatus","interval","lastReceiveTime","init","closed","ws","WebSocket","getUrl","binaryType","console","warn","onopen","event","onmessage","Date","now","onMessage","onerror","error","createReconnection","onclose","reason","code","onReconnect","setInterval","delta","readyState","CLOSED","close","OPEN","method","responseType","request","extraUrl","self","xmlhttp","XMLHttpRequest","withCredentials","open","onload","oEvent","response","ontimeout","e","log","send","setRequestHeader","onreadystatechange","onSuccess","responseText","onError","sendRequest","broadcastChannel","BroadcastChannel","opened","reconnect","fullDisconnect","removeInterval","EventType","paths","urls","fetch","parser","connector","values","propertiesStr","topic","dataSourceId","JSON","parse","timeShift","bufferingTime","timeOut","batchSize","createDataConnector","startsWith","setReconnectTimeout","Promise","resolve","parseData","Array","isArray","push","flush","isConnected","flushAll","postMessage","type","nbElements","splice","message","worker","createConnector","setTopic","updateProperties","dataSourceHandler","timeBroadcastChannel","lastStartTimeCst","setUrl","toISOString","timeStamp","parseTimeStamp","timestamp","lastTimestamp","handleMessage","getLastTimeStamp","setTimeTopic","timeTopic"],"mappings":"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","file":"WorkerName.a114cabac1df52ebc43f.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nexport const MAX_LONG = Math.pow(2, 53) + 1;\n\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\nexport function isDefined(v) {\n    return typeof (v) !== 'undefined' && v !== null;\n}\n\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\nexport function hasValue(v) {\n    return isDefined(v) && v !== null;\n}\n\n/**\n Global helper method to transform hex color into RGBA\n */\nexport function hex2rgb(hex){\n    const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n    return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\nexport function hasType(v, expectedType) {\n    let hasVal = hasValue(v);\n    return hasVal && typeof (v) === expectedType;\n}\n\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\nexport function isObject(v, letName) {\n    return hasType(v, 'object', letName);\n}\n\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\nexport function isArray(v) {\n    return isDefined(v) && Array.isArray(v);\n}\n\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\nexport function isFunction(v, letName) {\n    return hasType(v, 'function', letName);\n}\n\n/**\n Assert that a letiable or object attribute is defined\n **/\nexport function assertDefined(v, letName = 'letiable') {\n    if (!isDefined(v)) {\n        throw letName + \" must be defined\";\n    }\n    return v;\n}\n\nexport function assertTrue(v, letName = 'letiable') {\n    if (!isDefined(v) || !v) {\n        throw letName;\n    }\n    return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\nexport function assertType(v, expectedType, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (typeof (v) !== expectedType) {\n        throw letName + \" must be of type \" + expectedType;\n    }\n    return v;\n}\n\n/**\n Assert that a letiable or object attribute is a string\n **/\nexport function assertBoolean(v, letName) {\n    return assertType(v, 'boolean', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a string\n **/\nexport function assertString(v, letName) {\n    return assertType(v, 'string', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a number\n **/\nexport function assertNumber(v, letName) {\n    return assertType(v, 'number', letName);\n}\n\n/**\n Assert that a letiable or object attribute is a number\n **/\nexport function assertPositive(v, letName) {\n    assertNumber(v, letName);\n    if (v <= 0) {\n        throw letName + \" must be a positive number\";\n    }\n}\n\n/**\n Assert that a letiable or object attribute is an object\n **/\nexport function assertObject(v, letName) {\n    return assertType(v, 'object', letName);\n}\n\n/**\n Assert that a letiable or object attribute is an object\n **/\nexport function assertArray(v, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (!Array.isArray(v)) {\n        throw letName + \" must be an array\";\n    }\n    return v;\n}\n\n/**\n Assert that a letiable or object attribute is a function\n **/\nexport function assertFunction(v, letName) {\n    return assertType(v, 'function', letName);\n}\n\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\nexport function assertHasValue(v, letName = 'letiable') {\n    assertDefined(v, letName);\n    if (!hasValue(v)) {\n        throw letName + \" must not be null\";\n    }\n    return v;\n}\n\n/**\n *\n * @return {String}\n */\nexport function randomUUID() {\n    return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        let r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\nexport function stampUUID(obj) {\n    obj._osh_id = obj._osh_id || randomUUID();\n    return obj._osh_id;\n}\n\n//buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\nexport function ParseBytes(buffer, offset, type) {\n    let view = new DataView(buffer);\n\n    //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n    //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n    //and unsignedLong\n    let typeMap = {\n        double: function (offset) {\n            return {val: view.getFloat64(offset), bytes: 8};\n        },\n        float64: function (offset) {\n            return {val: view.getFloat64(offset), bytes: 8};\n        },\n        float32: function (offset) {\n            return {val: view.getFloat32(offset), bytes: 4};\n        },\n        signedByte: function (offset) {\n            return {val: view.getInt8(offset), bytes: 1};\n        },\n        signedInt: function (offset) {\n            return {val: view.getInt32(offset), bytes: 4};\n        },\n        signedShort: function (offset) {\n            return {val: view.getInt16(offset), bytes: 2};\n        },\n        unsignedByte: function (offset) {\n            return {val: view.getUint8(offset), bytes: 1};\n        },\n        unsignedInt: function (offset) {\n            return {val: view.getUint32(offset), bytes: 4};\n        },\n        unsignedShort: function (offset) {\n            return {val: view.getUint16(offset), bytes: 2};\n        },\n        //TODO: string-utf-8:\n    };\n    return typeMap[type](offset);\n}\n\n//This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\nexport function ReadData(struct, data, offsetBytes) {\n    let offset = offsetBytes;\n    for (let i = 0; i < struct.fields.length; i++) {\n        let currFieldStruct = struct.fields[i];\n        if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n            let ret = ParseBytes(data, offset, currFieldStruct.type);\n            currFieldStruct.val = ret.val;\n            offset += ret.bytes;\n        } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n            //check if count is a reference to another letiable\n            if (isNaN(currFieldStruct.count)) {\n                let id = currFieldStruct.count;\n                let fieldName = struct.id2FieldMap[id];\n                currFieldStruct.count = struct.findFieldByName(fieldName).val;\n            }\n            for (let c = 0; c < currFieldStruct.count; c++) {\n                for (let j = 0; j < currFieldStruct.fields.length; j++) {\n                    let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n                    offset = ReadData(field, data, offset);\n                    currFieldStruct.val.push(field);\n                }\n            }\n        }\n    }\n    return offset;\n}\n\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\nexport function GetResultObject(resultStructure) {\n    //TODO: handle cases for nested arrays / matrix data types\n    let result = {};\n    for (let i = 0; i < resultStructure.fields.length; i++) {\n        if (isDefined(resultStructure.fields[i].count)) {\n            result[resultStructure.fields[i].name] = [];\n            for (let c = 0; c < resultStructure.fields[i].count; c++) {\n                let item = {};\n                for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n                    item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n                }\n                result[resultStructure.fields[i].name].push(item);\n            }\n        } else {\n            result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n        }\n    }\n    return result;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isOpera() {\n    return (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isFirefox() {\n    return typeof InstallTrigger !== 'undefined';\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isSafari() {\n    return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n\n/**\n *\n * @return {boolean}\n */\nexport function isChrome() {\n    return !!window.chrome && !!window.chrome.webstore;\n}\n\n/**\n *\n * @return {*|boolean}\n */\nexport function isBlink() {\n    return (isChrome || isOpera) && !!window.CSS;\n}\n\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\nexport function isArrayIntersect(a, b) {\n    return a.filter(function (element) {\n        return b.indexOf(element) > -1;\n    }).length > 0;\n}\n\n\n/**\n *\n * @param o\n * @return {boolean}\n */\nexport function isElement(o) {\n    return (\n      typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n        o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\"\n    );\n}\n\n/**\n *\n * @return {*}\n */\nexport function isWebWorker() {\n    return isDefined(Worker);\n}\n\n/**\n *\n * @param div\n */\nexport function takeScreenShot(div) {\n}\n\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\nexport function removeCss(div, css) {\n    let divCss = div.className;\n    css = divCss.replace(css, \"\");\n    div.className = css;\n}\n\n\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\nexport function addCss(div, css) {\n    div.setAttribute(\"class\", div.className + \" \" + css);\n}\n\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\nexport function removeLastCharIfExist(value) {\n    if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n        return value;\n    }\n\n    return value.substring(0, value.length - 1);\n}\n\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\nexport function roundHalf(num) {\n    return Math.round(num*2)/2;\n}\n\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n        var now = new Date().getTime(),\n            last = now - timestamp;\n\n        if (last < wait && last >= 0) {\n            timeout = setTimeout(later, wait - last);\n        } else {\n            timeout = null;\n            if (!immediate) {\n                result = func.apply(context, args);\n                if (!timeout) context = args = null;\n            }\n        }\n    };\n\n    return function() {\n        context = this;\n        args = arguments;\n        timestamp = new Date().getTime();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n            result = func.apply(context, args);\n            context = args = null;\n        }\n\n        return result;\n    };\n};\n\nexport function throttle(func, wait, leading, trailing, context) {\n    var ctx, args, result;\n    var timeout = null;\n    var previous = 0;\n    var later = function() {\n        previous = new Date;\n        timeout = null;\n        result = func.apply(ctx, args);\n    };\n    return function() {\n        var now = new Date;\n        if (!previous && !leading) previous = now;\n        var remaining = wait - (now - previous);\n        ctx = context || this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(ctx, args);\n        } else if (!timeout && trailing) {\n            // Sinon on s’endort pendant le temps restant\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n};\n\nexport function merge (target, source) {\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n    for (const key of Object.keys(source)) {\n        if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]))\n    }\n\n    // Join `target` and modified `source`\n    Object.assign(target || {}, source)\n    return target\n};\n","import {isDefined} from \"../../utils/Utils\";\n\nclass DataSourceParser {\n\n    /**\n     * Builds the full url.\n     * @protected\n     * @param {Object} properties\n     * @param {String} properties.protocol the protocol protocol\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {Number} properties.replaySpeed the replay factor\n     * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n     * @param {Date} properties.lastTimeStamp - the last timestamp to start at this time (ISO String)\n     * @param {Object} properties.customUrlParams - the encoding options\n     * @param {Number} properties.customUrlParams.video_bitrate - define a custom bitrate (in b/s)\n     * @param {Number} properties.customUrlParams.video_scale - define a custom scale, 0.0 < value < 1.0\n     * @param {Number} properties.customUrlParams.video_width - define a custom width\n     * @param {Number} properties.customUrlParams.video_height - define a custom height\n     * @return {String} the full url\n     */\n    buildUrl(properties) {\n        let url = \"\";\n\n        // adds protocol\n        url += properties.protocol + \"://\";\n\n        // adds endpoint url\n        url += properties.endpointUrl + \"?\";\n\n        // adds service\n        url += \"service=\" + properties.service;\n\n        // adds version\n        url += \"&version=2.0&\";\n\n        // adds responseFormat (optional)\n        if (properties.responseFormat) {\n            url += \"&responseFormat=\" + properties.responseFormat;\n        }\n\n        if(isDefined(properties.customUrlParams) && Object.keys(properties.customUrlParams).length > 0) {\n            url += '&';\n            for (let key in properties.customUrlParams) {\n                url += key+'='+properties.customUrlParams[key]+'&';\n            }\n            if(url.endsWith('&')) {\n                url = url.slice(0, -1);\n            }\n        }\n        return url;\n    }\n}\n\nexport default DataSourceParser;\n","import {isDefined} from \"../../utils/Utils\";\nimport DataSourceParser from \"./DataSourceParser\";\n\nclass TimeSeriesParserParser extends DataSourceParser{\n\n    /**\n     * Builds the full url.\n     * @protected\n     * @param {Object} properties\n     * @param {String} properties.protocol the protocol protocol\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {Number} properties.replaySpeed the replay factor\n     * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n     * @param {Date} properties.lastTimeStamp - the last timestamp to start at this time (ISO String)\n     * @param {Object} properties.customUrlParams - the encoding options\n     * @return {String} the full url\n     */\n    buildUrl(properties) {\n        let url = super.buildUrl(properties);\n\n        // adds request\n        url += \"&request=GetResult\";\n\n        // adds offering\n        url += \"&offering=\" + properties.offeringID;\n\n        // adds observedProperty\n        url += \"&observedProperty=\" + properties.observedProperty;\n\n        // adds temporalFilter\n        const stTime = (isDefined(properties.lastTimeStamp)) ? properties.lastTimeStamp :  properties.startTime;\n        this.lastStartTime = properties.startTime;\n        let endTime = properties.endTime;\n        url += \"&temporalFilter=phenomenonTime,\" + stTime+ \"/\" + endTime;\n        if (properties.replaySpeed) {\n            // adds replaySpeed\n            url += \"&replaySpeed=\" + properties.replaySpeed;\n        }\n\n        return url;\n    }\n}\n\nexport default TimeSeriesParserParser;\n","import DataSourceParser from \"./DataSourceParser.js\";\nimport TimeSeriesParser from \"./TimeSeriesParser.parser\";\n\nclass AudioParser extends TimeSeriesParser {\n\n    /**\n     * Extracts timestamp from the message. The timestamp is corresponding to the first 64bits of the binary message.\n     * @param {ArrayBuffer} data - the data to parse\n     * @return {Number} the extracted timestamp\n     */\n    parseTimeStamp(data) {\n        // read double time stamp as big endian\n        return new DataView(data).getFloat64(0, false) * 1000;\n    }\n\n    /**\n     * Extract data from the message. The H264 NAL unit starts at offset 12 after 8-bytes time stamp and 4-bytes frame length.\n     * @param {ArrayBuffer} data - the data to parse\n     * @return {Uint8Array} the parsed data\n     */\n    parseData(data) {\n        // 8 bytes for timestamp\n        // 4 bytes for sampleRate\n        // 4 bytes for nbSamples\n        // 4 bytes for data compressed size\n        // others for data (start at 20)\n        return {\n            sampleRate: new DataView(data).getUint32(8, false),\n            nbSamples: new DataView(data).getUint32(12, false),\n            pktLength: new DataView(data).getUint32(16, false),\n            frameData: new Uint8Array(data.slice(20,data.byteLength))\n        }\n    }\n\n    /**\n     * Builds the full url.\n     * @protected\n     * @param {Object} properties\n     * @param {String} properties.protocol the protocol protocol\n     * @param {String} properties.endpointUrl the endpoint url\n     * @param {String} properties.service the service\n     * @param {String} properties.offeringID the offeringID\n     * @param {String} properties.observedProperty the observed property\n     * @param {String} properties.startTime the start time (ISO format)\n     * @param {String} properties.endTime the end time (ISO format)\n     * @param {Number} properties.replaySpeed the replay factor\n     * @param {String} properties.foiId the foiId\n     * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n     * @param {Date} properties.lastTimeStamp - the last timestamp to start at this time (ISO String)\n     * @return {String} the full url\n     */\n    buildUrl(properties) {\n        let url = super.buildUrl(properties);\n\n        // adds feature of interest urn\n        if (properties.foiId && properties.of !== '') {\n            url += '&featureOfInterest=' + properties.foiId;\n        }\n        return url;\n    }\n}\n\nexport default  AudioParser;\n","/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nexport const Status = {\n    CONNECTING: \"connecting\",\n    CONNECTED:  \"connected\",\n    DISCONNECTED: \"disconnected\"\n};\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nimport {randomUUID} from '../utils/Utils.js';\nimport {Status} from './Status.js';\n\n/**\n * The DataConnector is the abstract class used to create different connectors.\n */\nclass DataConnector {\n\n    /**\n     * @param {String} url - The full url used to connect to the data stream\n     */\n    constructor(url) {\n        this.url = url;\n        this.id = \"DataConnector-\" + randomUUID();\n        this.reconnectTimeout = 1000 * 60 * 2; //2 min\n        this.status =  Status.DISCONNECTED;\n        this.reconnectionInterval = -1;\n    }\n\n    checkAndClearReconnection() {\n        if(this.reconnectionInterval !== -1) {\n            clearInterval(this.reconnectionInterval);\n            this.reconnectionInterval = -1;\n        }\n    }\n\n    disconnect() {\n        this.checkStatus(Status.DISCONNECTED);\n        this.checkAndClearReconnection();\n    }\n\n    /**\n     * Sets the url\n     * @param url\n     */\n    setUrl(url) {\n        this.url = url;\n    }\n\n    /**\n     * The data protocol default id.\n     * @return {String}\n     */\n    getId() {\n        return this.id;\n    }\n\n    /**\n     * The stream url.\n     * @return {String}\n     */\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * Sets the reconnection timeout\n     * @param {Number} timeout - delay in milliseconds before reconnecting dataSource\n     */\n    setReconnectTimeout(timeout) {\n        this.reconnectTimeout = timeout;\n    }\n\n    onReconnect(){\n        return true;\n    }\n\n    connect() {}\n\n    forceReconnect() {\n        this.disconnect();\n        this.connect();\n    }\n\n    /**\n     * Called when the connection STATUS changes\n     * @param {Status} status - the new status\n     */\n    onChangeStatus(status) {\n\n    }\n\n    /**\n     * Check a change of the status and call the corresponding callbacks if necessary\n     * @param {Status} status - the currentStatus\n     */\n    checkStatus(status) {\n        if(status !== this.status) {\n            this.onChangeStatus(status);\n            this.status = status;\n        }\n    }\n    /**\n     * Called when the protocol has been disconnected\n     */\n    onDisconnect() {\n\n    }\n\n    /**\n     * Called when the protocol has been connected\n     */\n    onConnect() {\n\n    }\n}\n\nexport default DataConnector;\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nimport DataConnector from './DataConnector.js';\nimport {isWebWorker} from '../utils/Utils.js';\nimport {Status} from './Status.js';\n\n/**\n * Defines the WebSocketConnector to connect to a remote server by creating a WebSocket channel.\n * @extends DataConnector\n * @example\n * import WebSocketConnector from 'osh-js/dataconnector/WebSocketConnector.js';\n *\n * let url = ...;\n * let connector = new WebSocketConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nclass WebSocketConnector extends DataConnector {\n    /**\n     *\n     * @param properties -\n     */\n    constructor(properties) {\n        super(properties);\n        this.interval = -1;\n        this.lastReceiveTime = 0;\n    }\n\n    /**\n     * Connect to the webSocket. If the system supports WebWorker, it will automatically creates one otherwise use\n     * the main thread.\n     */\n    async connect() {\n        if (!this.init) {\n            this.closed = false;\n            this.init = true;\n            //creates Web Socket\n            this.ws = new WebSocket(this.getUrl());\n            this.ws.binaryType = 'arraybuffer';\n            this.checkStatus(Status.CONNECTING);\n            console.warn('WebSocket stream connecting');\n            this.ws.onopen = function(event) {\n                this.checkAndClearReconnection();\n                this.checkStatus(Status.CONNECTED);\n                console.warn('WebSocket stream connected');\n            }.bind(this);\n\n            this.ws.onmessage = function (event) {\n                this.lastReceiveTime = Date.now();\n                //callback data on message received\n                if (event.data.byteLength > 0) {\n                    this.onMessage(event.data);\n                }\n            }.bind(this);\n\n            // closes socket if any errors occur\n            this.ws.onerror = function (event) {\n                console.error('WebSocket stream error');\n                this.checkStatus(Status.DISCONNECTED);\n                this.init = false;\n                this.lastReceiveTime = -1;\n                this.createReconnection();\n            }.bind(this);\n\n            this.ws.onclose = (event) => {\n                this.checkStatus(Status.DISCONNECTED);\n                console.warn('WebSocket stream closed: ',event.reason, event.code);\n                this.init = false;\n                if(event.code !== 1000 && !this.closed) {\n                    this.createReconnection();\n                }\n            };\n        }\n    }\n\n    createReconnection() {\n        if(!this.closed && this.reconnectionInterval === -1 && this.onReconnect()) {\n            this.reconnectionInterval =  setInterval(function () {\n                let delta = Date.now() - this.lastReceiveTime;\n                // -1 means the WS went in error\n                if (this.lastReceiveTime === -1 || (delta >= this.reconnectTimeout)) {\n                    console.warn('trying to reconnect', this.url);\n                    this.connect();\n                }\n            }.bind(this), this.reconnectTimeout);\n        }\n    }\n\n    /**\n     * Disconnects and close the websocket.\n     */\n    disconnect() {\n       super.disconnect();\n       this.init = false;\n       this.closed = true;\n       if (this.ws != null && this.ws.readyState !== WebSocket.CLOSED) {\n           this.ws.close();\n       }\n    }\n\n    /**\n     * The onMessage method used by the websocket to callback the data\n     * @param data the callback data\n     * @event\n     */\n    onMessage(data) {\n    }\n\n\n    isConnected() {\n        return (this.ws != null && this.ws.readyState === WebSocket.OPEN);\n    }\n}\n\nexport default WebSocketConnector;\n","/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\nimport DataConnector from './DataConnector.js';\nimport {isDefined} from '../utils/Utils.js';\nimport {Status} from './Status.js';\n\n/**\n * Defines the AjaxConnector to connect to a remote server by making AjaxRequest.\n * @extends DataConnector\n * @example\n * import Ajax from 'core/protocol/Ajax.js';\n *\n * let request = ...;\n * let protocol = new Ajax(url);\n *\n * // handle onSuccess\n * protocol.onSuccess = function(event) {\n *  // does something\n * }\n *\n * protocol.onError = function(event) {\n *  // does something\n * }\n *\n * // send request\n * protocol.sendRequest(request);\n *\n */\nclass Ajax extends DataConnector {\n\n    /**\n     * Creates Ajax.\n     * @param {String} url -\n     * @param {Object} properties -\n     * @param {String} properties.method -\n     * @param {String} properties.responseType -\n     */\n    constructor(url, properties) {\n        super(url);\n\n        this.method = \"POST\";\n        this.responseType = \"arraybuffer\";\n\n        if (isDefined(properties)) {\n            if (properties.method) {\n                this.method = properties.method;\n            }\n\n            if (properties.responseType) {\n                this.responseType = properties.responseType;\n            }\n        }\n    }\n\n    /**\n     * Sends the request to the defined server.\n     * @param {String} request - The Http request\n     * @param {String} extraUrl - get query parameters\n     */\n    sendRequest(request, extraUrl) {\n        let self = this;\n        let xmlhttp = new XMLHttpRequest();\n        xmlhttp.withCredentials = true;\n        xmlhttp.timeout = 60000;\n        if (request === null) {\n            if (isDefined(extraUrl)) {\n                xmlhttp.open(\"GET\", this.getUrl() + \"?\" + extraUrl, true);\n            } else {\n                xmlhttp.open(\"GET\", this.getUrl(), true);\n            }\n            xmlhttp.responseType = this.responseType;\n            xmlhttp.onload = (oEvent) => {\n                if (xmlhttp.response) {\n                    self.onMessage(xmlhttp.response);\n                }\n                self.checkStatus(Status.DISCONNECTED);\n            };\n            xmlhttp.ontimeout = (e) => {\n                console.log(\"Timeout\");\n                self.checkStatus(Status.DISCONNECTED);\n            };\n            self.checkStatus(Status.CONNECTED);\n            xmlhttp.send(null);\n        } else {\n            xmlhttp.open(\"POST\", this.getUrl(), true);\n            xmlhttp.setRequestHeader('Content-Type', 'text/xml');\n\n            xmlhttp.send(request);\n            self.checkStatus(Status.CONNECTED);\n            xmlhttp.onreadystatechange = () => {\n                if (xmlhttp.readyState < 4) {\n                    // while waiting response from server\n                } else if (xmlhttp.readyState === 4) {                // 4 = Response from server has been completely loaded.\n                    if (xmlhttp.status === 200 && xmlhttp.status < 300) { // http status between 200 to 299 are all successful\n                        self.onSuccess(xmlhttp.responseText);\n                    } else {\n                        self.onError(\"\");\n                    }\n                    self.checkStatus(Status.DISCONNECTED);\n                }\n            };\n        }\n    }\n\n    /**\n     * This is the callback method in case of getting error connection.\n     * @param event The error details\n     * @event\n     */\n    onError(event) {\n\n    }\n\n    /**\n     * This is the callback method in case of getting success connection.\n     * @param event\n     * @event\n     */\n    onSuccess(event) {\n\n    }\n\n    /**\n     * Sends the request\n     * @private\n     */\n    connect() {\n        this.sendRequest(null);\n    }\n\n    isConnected() {\n        return false;\n    }\n}\nexport default Ajax;\n","import DataConnector from \"./DataConnector\";\n\n/**\n * Defines the FileConnector to read a File content\n * @extends DataConnector\n * @example\n * import FileConnector from 'core/protocol/TopicConnector.js';\n *\n * let protocol = new TopicConnector(<topic_name>);\n *\n * // connect\n * protocol.connect();\n *\n * // disconnect\n * protocol.disconnect();\n *\n * // close\n * protocol.close();\n *\n */\nclass TopicConnector extends DataConnector {\n    /**\n     *\n     * @param properties -\n     */\n    constructor(properties) {\n        super(properties);\n        this.lastReceiveTime = -1;\n        this.interval = -1;\n        this.broadcastChannel = null;\n    }\n\n    /**\n     * Connect to the broadcastChannel.\n     */\n    connect() {\n        if (this.broadcastChannel === null) {\n            //creates broadcastChannel\n            this.broadcastChannel = new BroadcastChannel(this.getUrl());\n            this.broadcastChannel.onmessage =  (event)  => {\n                this.lastReceiveTime = Date.now();\n                //callback data on message received\n                this.onMessage(event.data.data);\n            };\n\n            // closes socket if any errors occur\n            this.broadcastChannel.onerror =  (event) => {\n                console.error('BroadcastChannel stream error: ' + event);\n                this.broadcastChannel.close();\n                this.init = false;\n                this.lastReceiveTime = -1;\n                this.opened = false;\n            };\n            this.opened = true;\n\n            //init the reconnect handler\n            if (this.interval === -1) {\n                this.interval = setInterval(function () {\n                    let delta = Date.now() - this.lastReceiveTime;\n                    // -1 means the WS went in error\n                    if (this.lastReceiveTime === -1 || (delta >= this.reconnectTimeout)) {\n                        console.warn(`trying to reconnect after ${this.reconnectTimeout} ..`);\n                        this.reconnect();\n                    }\n                }.bind(this), this.reconnectTimeout);\n            }\n        }\n    }\n\n    /**\n     * Disconnects the websocket.\n     */\n    disconnect() {\n        this.fullDisconnect(true);\n    }\n\n    /**\n     * Fully disconnect the websocket connection by sending a close message to the webWorker.\n     * @param {Boolean} removeInterval  - force removing the interval\n     */\n    fullDisconnect(removeInterval) {\n        if (this.broadcastChannel != null) {\n            this.broadcastChannel.close();\n            this.broadcastChannel = null;\n        }\n        if (removeInterval) {\n            clearInterval(this.interval);\n        }\n        this.opened = false;\n    }\n\n    /**\n     * Try to reconnect if the connexion if closed\n     */\n    reconnect() {\n        this.onReconnect();\n        if (this.init) {\n            this.fullDisconnect(false);\n        }\n        this.connect();\n\n    }\n\n    /**\n     * The onMessage method used by the websocket to callback the data\n     * @param data the callback data\n     * @event\n     */\n    onMessage(data) {\n    }\n\n    /**\n     * Closes the webSocket.\n     */\n    close() {\n        this.disconnect();\n    }\n\n    isConnected() {\n        return this.broadcastChannel !== null && this.opened;\n    }\n}\n\nexport default TopicConnector;\n","export const EventType = {\n    DATA: 'data',\n    STATUS: 'status'\n};\n","import DataConnector from \"./DataConnector\";\nimport {Status} from \"./Status\";\n\n/**\n * Defines the FileConnector to read a File content\n * @extends DataConnector\n * @example\n * import FileConnector from 'core/protocol/FileConnector.js';\n *\n * let paths = ['path1','path2]...];\n * let protocol = new FileConnector(paths);\n *\n * // connect\n * protocol.connect();\n *\n * // disconnect\n * protocol.disconnect();\n *\n * // close\n * protocol.close();\n *\n */\nclass FileConnector extends DataConnector {\n    /**\n     * @param (string[]) paths - list of file paths\n     */\n    constructor(paths) {\n        super(paths);\n        this.opened = false;\n    }\n\n    /**\n     * Start reading file content\n     */\n    async connect() {\n        if(!this.opened) {\n            this.opened = true;\n            this.onChangeStatus(Status.CONNECTED);\n            const urls = this.getUrl();\n            for(let url of urls) {\n                this.onMessage(await fetch(url));\n            }\n            this.onChangeStatus(Status.DISCONNECTED);\n            // read is done\n            this.opened = false;\n        }\n    }\n\n    isConnected() {\n        return this.opened;\n    }\n}\n\nexport default FileConnector;\n","import WebSocketConnector from \"../../protocol/WebSocketConnector.js\";\nimport Ajax from \"../../protocol/Ajax.js\";\nimport {isDefined} from \"../../utils/Utils.js\";\nimport TopicConnector from \"../../protocol/TopicConnector.js\";\nimport {EventType} from \"../../event/EventType.js\";\nimport {Status} from \"../../protocol/Status\";\nimport FileConnector from \"../../protocol/FileConnector\";\n\nclass DataSourceHandler {\n\n    constructor(parser) {\n        this.parser = parser;\n        this.connector = null;\n        this.reconnectTimeout = 1000 * 10; // 10 secs\n        this.values = [];\n    }\n\n    createConnector(propertiesStr, topic, dataSourceId) {\n        this.dataSourceId = dataSourceId;\n        // check for existing protocol\n        if(this.connector !== null) {\n            this.connector.disconnect();\n            this.connector = null;\n        }\n\n        this.broadcastChannel = new BroadcastChannel(topic);\n\n        const properties = JSON.parse(propertiesStr);\n\n        if (isDefined(properties.timeShift)) {\n            this.timeShift = properties.timeShift;\n        }\n\n        if (isDefined(properties.bufferingTime)) {\n            this.bufferingTime = properties.bufferingTime;\n        }\n\n        if (isDefined(properties.timeOut)) {\n            this.timeOut = properties.timeOut;\n        }\n\n        if (isDefined(properties.reconnectTimeout)) {\n            this.reconnectTimeout = properties.reconnectTimeout;\n        }\n\n        if(properties.startTime === 'now') {\n            this.batchSize = 1;\n        } else {\n            if (isDefined(properties.replaySpeed)) {\n                if (!isDefined(properties.batchSize)) {\n                    this.batchSize = 1;\n                }\n            }\n\n            if (isDefined(properties.batchSize)) {\n                this.batchSize = properties.batchSize;\n            }\n        }\n\n        this.properties = properties;\n        this.createDataConnector(this.properties);\n    }\n\n    /**\n     * @private\n     */\n    createDataConnector(properties) {\n        const url = this.parser.buildUrl({\n            ...properties,\n            timeShift: this.timeShift\n        });\n\n        // checks if type is WebSocketConnector\n        if (properties.protocol.startsWith('ws')) {\n            this.connector = new WebSocketConnector(url);\n        } else if (properties.protocol.startsWith('http')) {\n            this.connector = new Ajax(url);\n            this.connector.responseType = properties.responseType || 'arraybuffer';\n        } else if (properties.protocol.startsWith('topic')) {\n            this.connector = new TopicConnector(url);\n        } else if (properties.protocol.startsWith('file')) {\n            this.connector = new FileConnector(url,properties);\n        }\n\n        if (this.connector !== null) {\n            // set the reconnectTimeout\n            this.connector.setReconnectTimeout(this.reconnectTimeout);\n\n            // connects the callback\n            this.connector.onMessage = this.onMessage.bind(this);\n\n            // bind change connection STATUS\n            this.connector.onChangeStatus   = this.onChangeStatus.bind(this);\n        }\n    }\n\n    /**\n     * Sets the current topic to listen\n     * @param {String} topic - the topic to listen\n     */\n    setTopic(topic) {\n        if(isDefined(this.broadcastChannel)) {\n            this.broadcastChannel.close();\n        }\n        this.broadcastChannel = new BroadcastChannel(topic);\n        this.topic = topic;\n    }\n\n    connect() {\n        if(this.connector !== null) {\n            this.connector.connect();\n        }\n    }\n\n    disconnect() {\n        if(this.connector !== null) {\n            this.connector.disconnect();\n        }\n    }\n\n    async onMessage(event) {\n        const data   = await Promise.resolve(this.parser.parseData(event));\n\n        // check if data is array\n        if (Array.isArray(data)) {\n            for(let i=0;i < data.length;i++) {\n                this.values.push({\n                    data: data[i]\n                });\n                if (isDefined(this.batchSize) && this.values.length >= this.batchSize) {\n                    this.flush();\n                }\n            }\n        } else {\n            this.values.push({\n                data: data\n            });\n        }\n        // because parseData is ASYNC, the protocol can finish before the parsing method. In that case, we have to flushALl data\n        if (!this.isConnected()) {\n            this.flushAll();\n        } else if (isDefined(this.batchSize) && this.values.length !== 0 && this.values.length >= this.batchSize) {\n            this.flush();\n        }\n    }\n\n    /**\n     * Send a change status event into the broadcast channel\n     * @param {Status} status - the new status\n     */\n    onChangeStatus(status) {\n        if(status === Status.DISCONNECTED) {\n            this.flushAll();\n        }\n\n        this.broadcastChannel.postMessage({\n            type: EventType.STATUS,\n            status: status,\n            dataSourceId: this.dataSourceId\n        });\n    }\n\n    updateProperties(properties) {\n        this.disconnect();\n\n        this.createDataConnector({\n            ...this.properties,\n            ...properties\n        });\n\n        this.connect();\n\n    }\n\n    flushAll() {\n        while(this.values.length > 0) {\n            this.flush();\n        }\n    }\n\n    flush() {\n        let nbElements = this.values.length;\n        if (isDefined(this.batchSize) && this.values.length > this.batchSize) {\n            nbElements = this.batchSize;\n        }\n        this.broadcastChannel.postMessage({\n            dataSourceId: this.dataSourceId,\n            type: EventType.DATA,\n            values: this.values.splice(0, nbElements)\n        });\n    }\n\n    isConnected() {\n        return (this.connector === null)? false: this.connector.isConnected();\n    };\n\n    handleMessage(message, worker) {\n        if(message.message === 'init') {\n            this.createConnector(message.properties, message.topic, message.id);\n        } else if (message.message === 'connect') {\n            this.connect();\n        } else if (message.message === 'disconnect') {\n            this.disconnect();\n        } else if (message.message === 'topic') {\n            this.setTopic(message.topic);\n        } else if (message.message === 'update-url') {\n            this.updateProperties(message.data);\n        } else if (message.message === 'is-connected') {\n            worker.postMessage({\n                message: 'is-connected',\n                data: this.isConnected()\n            })\n        }\n    }\n}\nexport default DataSourceHandler;\n\n","import SosGetResultAudioParser from '../parsers/SosGetResultAudio.parser.js';\nimport TimeSeriesDataSourceHandler from \"./TimeSeriesDataSourceHandler\";\n\nconst dataSourceHandler = new TimeSeriesDataSourceHandler(new SosGetResultAudioParser());\n\nself.onmessage = (event) => {\n    dataSourceHandler.handleMessage(event.data, self);\n}\n\n\n","import {isDefined} from \"../../utils/Utils.js\";\nimport DataSourceHandler from \"./DataSourceHandler\";\n\nclass TimeSeriesDataSourceHandler extends DataSourceHandler{\n\n    constructor(parser) {\n        super(parser);\n        this.lastTimeStamp = null;\n        this.lastStartTime = 'now';\n        this.timeShift = 0;\n        this.timeBroadcastChannel = null;\n    }\n\n    /**\n     * @private\n     */\n    createDataConnector(properties) {\n        super.createDataConnector({\n            ...properties,\n            timeShift: this.timeShift\n        });\n\n        const lastStartTimeCst = this.parser.lastStartTime;\n        this.connector.onReconnect = () => {\n            // if not real time, preserve last timestamp to reconnect at the last time received\n            // for that, we update the URL with the new last time received\n            if (lastStartTimeCst !== 'now') {\n                this.connector.setUrl(this.parser.buildUrl(\n                    {\n                        ...properties,\n                        lastTimeStamp: isDefined(this.lastTimeStamp) ? new Date(this.lastTimeStamp).toISOString(): properties.startTime,\n                    }));\n            }\n            return true;\n        }\n    }\n\n    async onMessage(event) {\n        const timeStamp = await Promise.resolve(this.parser.parseTimeStamp(event) + this.timeShift);\n        const data      = await Promise.resolve(this.parser.parseData(event));\n\n        // check if data is array\n        if (Array.isArray(data)) {\n            for(let i=0;i < data.length;i++) {\n                this.values.push({\n                    data: data[i],\n                    timeStamp: timeStamp\n                });\n            }\n        } else {\n            this.values.push({\n                data: data,\n                timeStamp: timeStamp\n            });\n        }\n        this.lastTimeStamp = timeStamp;\n\n        if(this.parser.lastStartTime === 'now' || ((isDefined(this.batchSize) && this.values.length >= this.batchSize))) {\n            this.flush();\n            if(this.timeBroadcastChannel !== null) {\n                this.timeBroadcastChannel.postMessage({\n                    timestamp: this.lastTimeStamp\n                });\n            }\n        }\n    }\n\n    getLastTimeStamp() {\n        return this.lastTimeStamp;\n    }\n\n    updateProperties(properties) {\n        this.disconnect();\n\n        let lastTimestamp =  new Date(this.lastTimeStamp).toISOString();\n\n        if(properties.hasOwnProperty('startTime')) {\n            lastTimestamp = properties.startTime;\n        } else if(this.properties.startTime === 'now'){\n            //handle RealTime\n            lastTimestamp = 'now';\n        }\n\n        this.createDataConnector({\n            ...this.properties,\n            ...properties,\n            lastTimeStamp: lastTimestamp\n        });\n\n        if(isDefined(properties) && isDefined(properties.reconnect) && properties.reconnect) {\n            this.connect();\n        }\n    }\n\n    handleMessage(message, worker) {\n        super.handleMessage(message, worker);\n\n        if (message.message === 'last-timestamp') {\n            const lastTimeStamp = this.getLastTimeStamp();\n            worker.postMessage({\n                message: 'last-timestamp',\n                data: lastTimeStamp\n            })\n        } else if (message.message === 'topic') {\n            this.setTimeTopic(message.timeTopic);\n            super.setTopic(message.topic);\n        }\n    }\n\n    setTimeTopic(timeTopic) {\n        if(this.timeBroadcastChannel !== null) {\n            this.timeBroadcastChannel.close();\n        }\n        this.timeBroadcastChannel = new BroadcastChannel(timeTopic);\n    }\n}\nexport default TimeSeriesDataSourceHandler;\n\n"],"sourceRoot":""}