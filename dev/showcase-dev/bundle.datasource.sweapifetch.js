!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e,t,i){e.exports=function(){return new Worker(i.p+"WorkerName.8a534e053ba2ee68c6e5.js")}},function(e,t,i){"use strict";i.r(t);Math.pow(2,53);function s(e){return null!=e}function n(e,t="letiable"){if(!s(e))throw t+" must be defined";return e}function r(){return"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){let t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}var a=i(0),o=i.n(a);const c="realTime";var p=class{constructor(e,t){this.id=t.id||"DataSource-"+r(),this.name=e,this.properties=t,this.eventSubscriptionMap={},this.init=void 0,this.messagesMap={},this.mode=c,s(t.mode)&&(this.mode=t.mode)}getId(){return this.id}getName(){return this.name}terminate(){null!==this.dataSourceWorker&&this.dataSourceWorker.terminate()}getTopicId(){return"datasource-data-"+this.id}getVersion(){return 0}subscribe(e,t){for(let i=0;i<t.length;i++)t[i]in this.eventSubscriptionMap||(this.eventSubscriptionMap[t[i]]=[]),this.eventSubscriptionMap[t[i]].push(e)}async createWorker(e){return new o.a}async updateProperties(e){return this.properties={...this.properties,...e},new Promise(t=>{this.postMessage({message:"update-properties",data:e},t)})}async connect(){await this.checkInit(),await this.doConnect()}async initDataSource(){return new Promise(async(e,t)=>{this.dataSourceWorker=await this.createWorker(this.properties),this.handleWorkerMessage(),this.postMessage({message:"init",id:this.id,properties:this.properties,topics:{data:this.getTopicId()}},async t=>{new BroadcastChannel(this.getTopicId()).onmessage=async e=>{await this.handleMessage(e)},e(t)})})}async handleMessage(e){const t=e.data.type;if(t in this.eventSubscriptionMap)for(let i=0;i<this.eventSubscriptionMap[t].length;i++)this.eventSubscriptionMap[t][i](e.data)}async checkInit(){return new Promise(async(e,t)=>{s(this.init)||(this.init=this.initDataSource()),await this.init,e()})}async doConnect(){return new Promise(async e=>{this.postMessage({message:"connect"},e)})}async isConnected(){return new Promise(async e=>{await this.checkInit(),this.postMessage({message:"is-connected"},e)})}async disconnect(){return new Promise(async e=>{await this.checkInit(),this.postMessage({message:"disconnect"},e)})}postMessage(e,t){const i=r();this.dataSourceWorker.postMessage({...e,messageId:i}),s(t)&&(this.messagesMap[i]=t)}handleWorkerMessage(){this.dataSourceWorker.onmessage=e=>{const t=e.data.messageId;t in this.messagesMap&&(this.messagesMap[t](e.data.data),delete this.messagesMap[t])}}async onDisconnect(){}reset(){}};var d=class extends p{constructor(e,t){super(e,t),"minTime"in t||this.setMinTime(t.startTime),"maxTime"in t||this.setMaxTime(t.endTime),n(t,"Some properties must be defined"),this.dataSynchronizer=void 0}getTimeTopicId(){return"datasource-time-"+this.id}getStartTime(){return this.properties.startTime}getMode(){return this.properties.mode}getEndTime(){return this.properties.endTime}getMinTime(){return this.properties.minTime}getMaxTime(){return this.properties.maxTime}setMinTime(e){this.properties.minTime=e}setMaxTime(e){this.properties.maxTime=e}getReplaySpeed(){return this.properties.replaySpeed}setReplaySpeed(e){this.properties.replaySpeed=e}async setDataSynchronizer(e){return new Promise(async(t,i)=>{await this.checkInit();const s="data-synchronizer-"+e.id;this.dataSynchronizer=e,this.postMessage({message:"topics",topics:{data:s,time:this.getTimeTopicId(),sync:e.getTimeTopicId()}},t)})}async disconnect(){return new Promise(async e=>{await this.checkInit(),this.postMessage({message:"disconnect"},e)})}async doConnect(){return new Promise(async e=>{let t=this.properties.startTime;if(s(this.dataSynchronizer)){let e=(await this.dataSynchronizer.getCurrentTime()).data;s(e)&&(t=new Date(e).toISOString())}this.postMessage({message:"connect",startTime:t},e)})}async initDataSource(e){return await super.initDataSource(e),new Promise(async(e,t)=>{this.postMessage({message:"topics",topics:{data:this.getTopicId(),time:this.getTimeTopicId()}},async()=>{new BroadcastChannel(this.getTimeTopicId()).onmessage=async e=>{await this.handleTimeMessage(e)},e()})})}async handleTimeMessage(e){const t=e.data.type;if(t in this.eventSubscriptionMap)for(let i=0;i<this.eventSubscriptionMap[t].length;i++)this.eventSubscriptionMap[t][i](e.data)}async setTimeRange(e=this.getStartTime(),t=this.getEndTime(),i=this.getReplaySpeed(),s=!1,n=this.getMode()){let r=e,a=t;if(n!==c){let i=new Date(e).getTime()-new Date(this.getMinTime()).getTime(),s=new Date(this.getMaxTime()).getTime()-new Date(t).getTime();if(i<0&&s<0)return;r=i<0?this.getMinTime():e,a=s<0?this.getMaxTime():t}return this.updateProperties({startTime:r,endTime:a,replaySpeed:i,reconnect:s,mode:n})}};let h=new class extends d{constructor(e,t){super(e,{reconnectTimeout:5e3,reconnectRetry:10,startTime:"now",endTime:"2055-01-01T00:00:00Z",tls:!1,responseFormat:"application/om+json",protocol:"http",type:"SweApiStream",mode:c,prefetchBatchSize:250,prefetchBatchDuration:5e3,connectorOpts:{},...t})}}("android-GPS",{endpointUrl:"api.georobotix.io/ogc/t18/api",resource:"/datastreams/fled6eics1cl4/observations",tls:!0,protocol:"mqtt",mqttOpts:{prefix:"/api",endpointUrl:"api.georobotix.io:443/ogc/t18"},mode:c});h.subscribe(async e=>{let t;for(let i=0;i<e.values.length;i++){t=e.values[i];const s=JSON.stringify(t.data,null,2);document.getElementById("json-container").innerHTML=s}},["data"]),h.connect()}]);