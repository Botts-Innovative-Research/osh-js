!function(Q){var B={};function F(U){if(B[U])return B[U].exports;var I=B[U]={i:U,l:!1,exports:{}};return Q[U].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=B,F.d=function(Q,B,U){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:U})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(F.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var I in Q)F.d(U,I,function(B){return Q[B]}.bind(null,I));return U},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== 'undefined' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, 'object', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = 'letiable') {\n  if (!isDefined(v)) {\n    throw letName + \" must be defined\";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = 'letiable') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + \" must be of type \" + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, 'boolean', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, 'string', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, 'number', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + \" must be a positive number\";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, 'object', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + \" must be an array\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + \" must not be null\";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== 'undefined';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, \"\");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute(\"class\", div.className + \" \" + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      // Sinon on s’endort pendant le temps restant\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizerAlgo.js\n\n\n\nclass DataSynchronizerAlgo_DataSynchronizerAlgo {\n  constructor(dataSources, replaySpeed = 1, timerResolution = 5) {\n    this.dataSourceMap = {};\n    this.bufferingTime = 1000;\n    this.startBufferingTime = -1;\n    this.tsRun = 0;\n    this.replaySpeed = replaySpeed;\n    this.timerResolution = timerResolution;\n    let maxBufferingTime = -1;\n\n    for (let ds of dataSources) {\n      this.addDataSource(ds);\n      maxBufferingTime = ds.bufferingTime > maxBufferingTime ? ds.bufferingTime : maxBufferingTime;\n    }\n\n    if (maxBufferingTime !== -1) {\n      this.bufferingTime = maxBufferingTime;\n    }\n  }\n\n  push(dataSourceId, data) {\n    const ds = this.dataSourceMap[dataSourceId];\n\n    if (ds.status === Status.DISCONNECTED) {\n      return;\n    }\n\n    if (this.startBufferingTime === -1) {\n      console.log(`synchronizer buffering data for ${this.bufferingTime}ms..`);\n      this.startBufferingTime = performance.now(); // start iterating on data after bufferingTime\n\n      this.timeoutBuffering = setTimeout(() => this.processData(), this.bufferingTime);\n    }\n\n    let latency = 0;\n\n    if (this.tsRun > 0) {\n      latency = this.tsRun - data.timeStamp;\n    }\n\n    ds.latency = latency > ds.latency ? latency : (ds.latency + latency) / 2;\n    ds.dataBuffer.push(data);\n  }\n\n  reset() {\n    console.log('reset synchronizer algo');\n    this.close();\n\n    for (let currentDsId in this.dataSourceMap) {\n      const currentDs = this.dataSourceMap[currentDsId];\n      currentDs.dataBuffer = [];\n      currentDs.startBufferingTime = -1;\n      currentDs.latency = 0;\n      currentDs.status = Status.DISCONNECTED;\n    }\n\n    this.tsRun = 0;\n    this.startBufferingTime = -1;\n  }\n\n  processData() {\n    // the timeout has been cancelled\n    if (!isDefined(this.timeoutBuffering)) {\n      return;\n    }\n\n    let tsRef = -1;\n    let clockTimeRef = performance.now(); // get reference start timestamp\n    // the reference start timestamp should the oldest one\n\n    let currentDs;\n\n    for (let currentDsId in this.dataSourceMap) {\n      currentDs = this.dataSourceMap[currentDsId];\n\n      if (currentDs.status === Status.DISCONNECTED) {\n        continue;\n      }\n\n      if (currentDs.dataBuffer.length > 0) {\n        tsRef = tsRef === -1 || currentDs.dataBuffer[0].timeStamp < tsRef ? currentDs.dataBuffer[0].timeStamp : tsRef;\n      }\n    }\n\n    this.interval = setInterval(() => {\n      // 1) return the oldest data if any\n      while (this.computeNextData(tsRef, clockTimeRef));\n    }, this.timerResolution);\n  }\n  /**\n   * Compute the next data if any. We return only 1 value for this iteration. If there are multiple values to return,\n   * we return only the oldest one.\n   * @param tsRef - the timestamp of the first data\n   * @param refClockTime - the absolute diff time really spent\n   */\n\n\n  computeNextData(tsRef, refClockTime) {\n    let currentDs;\n    let currentDsToShift = null; // compute max latency\n\n    let maxLatency = 0;\n    let minLatency = 0;\n\n    for (let currentDsId in this.dataSourceMap) {\n      currentDs = this.dataSourceMap[currentDsId];\n\n      if (currentDs.status === Status.DISCONNECTED) {\n        continue;\n      }\n\n      if (currentDs.latency > 0) {\n        let latency = Math.min(currentDs.latency, currentDs.timeOut);\n        maxLatency = latency > maxLatency ? latency : maxLatency;\n        minLatency = currentDs.latency < minLatency ? currentDs.latency : minLatency;\n      }\n    }\n\n    const dClock = performance.now() - refClockTime;\n    this.tsRun = tsRef + dClock; // compute next data to return\n\n    for (let currentDsId in this.dataSourceMap) {\n      currentDs = this.dataSourceMap[currentDsId];\n\n      if (currentDs.status === Status.DISCONNECTED) {\n        continue;\n      }\n\n      if (currentDs.dataBuffer.length > 0) {\n        const dTs = currentDs.dataBuffer[0].timeStamp - tsRef;\n        const dClockAdj = dClock - maxLatency; // we use an intermediate object to store the data to shift because we want to return the oldest one\n        // only\n\n        if (dTs <= dClockAdj * this.replaySpeed) {\n          // no other one to compare\n          if (currentDsToShift === null) {\n            currentDsToShift = currentDs;\n          } else {\n            // take the oldest data\n            currentDsToShift = currentDsToShift.dataBuffer[0].timeStamp < currentDs.dataBuffer[0].timeStamp ? currentDsToShift : currentDs;\n          }\n        }\n      }\n    } // finally pop the data from DS queue\n\n\n    if (currentDsToShift !== null) {\n      let rec = currentDsToShift.dataBuffer.shift(); // add latency flag to data record before we dispatch it\n      // this is relative latency in millis compared to the DS with the lowest latency\n      // so it is accurate even if local device time is not set properly\n\n      rec['@latency'] = currentDs.latency - minLatency;\n      this.onData(currentDsToShift.id, rec);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Add dataSource to be synchronized\n   * @param {DataSource} dataSource - the dataSource to synchronize\n   */\n\n\n  addDataSource(dataSource) {\n    this.dataSourceMap[dataSource.id] = {\n      bufferingTime: dataSource.bufferingTime,\n      timeOut: dataSource.timeOut || 0,\n      dataBuffer: [],\n      startBufferingTime: -1,\n      id: dataSource.id,\n      timedOut: false,\n      name: dataSource.name || dataSource.id,\n      latency: 0,\n      status: Status.DISCONNECTED //MEANING Enabled, 0 = Disabled\n\n    };\n  }\n\n  onData(dataSourceId, data) {}\n  /**\n   * Change the dataSource status\n   * @param {Status} status - the new status\n   * @param {String} dataSourceId - the corresponding dataSource id\n   */\n\n\n  setStatus(dataSourceId, status) {\n    if (dataSourceId in this.dataSourceMap) {\n      this.dataSourceMap[dataSourceId].status = status;\n\n      if (status === Status.DISCONNECTED) {\n        // reset latency and buffer\n        this.dataSourceMap[dataSourceId].latency = 0;\n        this.dataSourceMap[dataSourceId].dataBuffer = [];\n      }\n\n      console.warn(status + ' DataSource ' + dataSourceId + ' from the synchronizer ');\n    }\n  }\n\n  close() {\n    if (isDefined(this.interval)) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n\n    if (isDefined(this.timeoutBuffering)) {\n      clearTimeout(this.timeoutBuffering);\n      this.timeoutBuffering = null;\n    }\n\n    console.log(\"Data synchronizer terminated successfully\");\n  }\n\n}\n\n/* harmony default export */ var timesync_DataSynchronizerAlgo = (DataSynchronizerAlgo_DataSynchronizerAlgo);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: 'data',\n  STATUS: 'status'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizer.worker.js\n\n\n\n\nconst bcChannels = {};\nlet dataSynchronizerAlgo;\n\nlet init = false;\nlet dataSourceBroadCastChannel = null;\nself.currentTime = -1;\n\nconst dataSources = {};\nlet timeBroadcastChannel = null;\nlet topicTime;\nlet topicData;\nself.version = 0;\n\nself.onmessage = (event) => {\n    if(event.data.message === 'init') {\n        dataSynchronizerAlgo = new timesync_DataSynchronizerAlgo(\n            event.data.dataSources,\n            event.data.replaySpeed,\n            event.data.timerResolution\n        );\n        dataSynchronizerAlgo.onData = onData;\n        init = true;\n        addDataSources(event.data.dataSources);\n        topicData = event.data.dataTopic;\n        topicTime = event.data.timeTopic;\n        self.version = event.data.version;\n        initBroadcastChannel(topicData,topicTime );\n    } else if(event.data.message === 'add' && event.data.dataSources) {\n        addDataSources(event.data.dataSources);\n    } else if(event.data.message === 'current-time') {\n        self.postMessage({\n            message: 'current-time',\n            data: self.currentTime\n        });\n    }  else if(event.data.message === 'reset') {\n        if(dataSynchronizerAlgo !== null) {\n            dataSynchronizerAlgo.reset();\n        }\n    }  else if(event.data.message === 'update-version') {\n        self.version = event.data.version;\n    } else if(event.data.message === 'replay-speed') {\n        if(dataSynchronizerAlgo !== null) {\n            dataSynchronizerAlgo.replaySpeed = event.data.replaySpeed;\n        }\n    } else if(event.data.message === 'data') {\n        if(dataSynchronizerAlgo !== null) {\n            dataSynchronizerAlgo.push(event.data.dataSourceId, {\n                data: event.data.data,\n                timeStamp: event.data.timeStamp\n            });\n        }\n    }\n}\n\nfunction initBroadcastChannel(dataTopic, timeTopic) {\n    dataSourceBroadCastChannel = new BroadcastChannel(dataTopic);\n    dataSourceBroadCastChannel.onmessage = (event) => {\n        if(event.data.type === EventType.DATA) {\n            for(let i=0; i < event.data.values.length;i++) {\n                dataSynchronizerAlgo.push(\n                    event.data.dataSourceId,\n                    {\n                        ...event.data.values[i]\n                    }\n                );\n            }\n        } else if(event.data.type === EventType.STATUS) {\n            const dataSourceId = event.data.dataSourceId;\n            dataSynchronizerAlgo.setStatus(dataSourceId, event.data.status);\n            // bubble the message\n            bcChannels[dataSourceId].postMessage(event.data);\n        }\n    }\n\n    timeBroadcastChannel = new BroadcastChannel(timeTopic);\n\n}\n\n/**\n *\n * @param dataSources\n */\nfunction addDataSources(dataSources) {\n    for(let dataSource of dataSources) {\n        addDataSource(dataSource);\n    }\n}\n\nfunction addDataSource(dataSource) {\n    dataSynchronizerAlgo.addDataSource(dataSource);\n    // create a BC to push back the synchronized data into the DATA Stream.\n    bcChannels[dataSource.id] = new BroadcastChannel(DATASOURCE_DATA_TOPIC + dataSource.id);\n\n    if(!(dataSource.id in dataSources)) {\n        dataSources[dataSource.id] = dataSource;\n    }\n}\n\nfunction onData(dataSourceId, data) {\n    self.currentTime = data.timeStamp;\n    bcChannels[dataSourceId].postMessage({\n            values: [data],\n            dataSourceId,\n            type: EventType.DATA\n        }\n    );\n\n    timeBroadcastChannel.postMessage({\n        timestamp: data.timeStamp,\n        version: self.version,\n        dataSourceId: dataSourceId\n    });\n}\n\n\nself.onclose = function() {\n    dataSynchronizerAlgo.close();\n    console.log(\"Data Synchronizer has been terminated successfully\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91dGlscy9VdGlscy5qcz9mODdlIiwid2VicGFjazovLy8vaG9tZS9uZXZyby9Qcm9ncy9wcm9ncy1sb2NhbC9naXQtcmVwby9PU0gvb3NoLWpzL3NvdXJjZS9jb3JlL3Byb3RvY29sL1N0YXR1cy5qcz84ODhhIiwid2VicGFjazovLy8vaG9tZS9uZXZyby9Qcm9ncy9wcm9ncy1sb2NhbC9naXQtcmVwby9PU0gvb3NoLWpzL3NvdXJjZS9jb3JlL3RpbWVzeW5jL0RhdGFTeW5jaHJvbml6ZXJBbGdvLmpzP2FkY2EiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL2NvcmUvQ29uc3RhbnRzLmpzP2I5YjEiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL2NvcmUvZXZlbnQvRXZlbnRUeXBlLmpzPzllMzAiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL2NvcmUvdGltZXN5bmMvRGF0YVN5bmNocm9uaXplci53b3JrZXIuanM/NWYzMCJdLCJuYW1lcyI6WyJNQVhfTE9ORyIsIk1hdGgiLCJwb3ciLCJpc0RlZmluZWQiLCJ2IiwiaGFzVmFsdWUiLCJoZXgycmdiIiwiaGV4IiwiciIsImciLCJiIiwibWF0Y2giLCJtYXAiLCJ4IiwicGFyc2VJbnQiLCJoYXNUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiaGFzVmFsIiwiaXNPYmplY3QiLCJsZXROYW1lIiwiaXNBcnJheSIsIkFycmF5IiwiaXNGdW5jdGlvbiIsImFzc2VydERlZmluZWQiLCJhc3NlcnRUcnVlIiwiYXNzZXJ0VHlwZSIsImFzc2VydEJvb2xlYW4iLCJhc3NlcnRTdHJpbmciLCJhc3NlcnROdW1iZXIiLCJhc3NlcnRQb3NpdGl2ZSIsImFzc2VydE9iamVjdCIsImFzc2VydEFycmF5IiwiYXNzZXJ0RnVuY3Rpb24iLCJhc3NlcnRIYXNWYWx1ZSIsInJhbmRvbVVVSUQiLCJyZXBsYWNlIiwiYyIsInJhbmRvbSIsInRvU3RyaW5nIiwic3RhbXBVVUlEIiwib2JqIiwiX29zaF9pZCIsIlBhcnNlQnl0ZXMiLCJidWZmZXIiLCJvZmZzZXQiLCJ0eXBlIiwidmlldyIsIkRhdGFWaWV3IiwidHlwZU1hcCIsImRvdWJsZSIsInZhbCIsImdldEZsb2F0NjQiLCJieXRlcyIsImZsb2F0NjQiLCJmbG9hdDMyIiwiZ2V0RmxvYXQzMiIsInNpZ25lZEJ5dGUiLCJnZXRJbnQ4Iiwic2lnbmVkSW50IiwiZ2V0SW50MzIiLCJzaWduZWRTaG9ydCIsImdldEludDE2IiwidW5zaWduZWRCeXRlIiwiZ2V0VWludDgiLCJ1bnNpZ25lZEludCIsImdldFVpbnQzMiIsInVuc2lnbmVkU2hvcnQiLCJnZXRVaW50MTYiLCJSZWFkRGF0YSIsInN0cnVjdCIsImRhdGEiLCJvZmZzZXRCeXRlcyIsImkiLCJmaWVsZHMiLCJsZW5ndGgiLCJjdXJyRmllbGRTdHJ1Y3QiLCJyZXQiLCJjb3VudCIsImlzTmFOIiwiaWQiLCJmaWVsZE5hbWUiLCJpZDJGaWVsZE1hcCIsImZpbmRGaWVsZEJ5TmFtZSIsImoiLCJmaWVsZCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInB1c2giLCJHZXRSZXN1bHRPYmplY3QiLCJyZXN1bHRTdHJ1Y3R1cmUiLCJyZXN1bHQiLCJuYW1lIiwiaXRlbSIsImsiLCJpc09wZXJhIiwid2luZG93Iiwib3ByIiwiYWRkb25zIiwib3BlcmEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiaXNGaXJlZm94IiwiSW5zdGFsbFRyaWdnZXIiLCJpc1NhZmFyaSIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJIVE1MRWxlbWVudCIsImlzQ2hyb21lIiwiY2hyb21lIiwid2Vic3RvcmUiLCJpc0JsaW5rIiwiQ1NTIiwiaXNBcnJheUludGVyc2VjdCIsImEiLCJmaWx0ZXIiLCJlbGVtZW50IiwiaXNFbGVtZW50IiwibyIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc1dlYldvcmtlciIsIldvcmtlciIsInRha2VTY3JlZW5TaG90IiwiZGl2IiwicmVtb3ZlQ3NzIiwiY3NzIiwiZGl2Q3NzIiwiY2xhc3NOYW1lIiwiYWRkQ3NzIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlTGFzdENoYXJJZkV4aXN0IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsInJvdW5kSGFsZiIsIm51bSIsInJvdW5kIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJhcmdzIiwiY29udGV4dCIsInRpbWVzdGFtcCIsImxhdGVyIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJsYXN0Iiwic2V0VGltZW91dCIsImFwcGx5IiwiYXJndW1lbnRzIiwiY2FsbE5vdyIsInRocm90dGxlIiwibGVhZGluZyIsInRyYWlsaW5nIiwiY3R4IiwicHJldmlvdXMiLCJyZW1haW5pbmciLCJjbGVhclRpbWVvdXQiLCJtZXJnZSIsInRhcmdldCIsInNvdXJjZSIsImtleSIsImtleXMiLCJhc3NpZ24iLCJTdGF0dXMiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIiwiRGF0YVN5bmNocm9uaXplckFsZ28iLCJjb25zdHJ1Y3RvciIsImRhdGFTb3VyY2VzIiwicmVwbGF5U3BlZWQiLCJ0aW1lclJlc29sdXRpb24iLCJkYXRhU291cmNlTWFwIiwiYnVmZmVyaW5nVGltZSIsInN0YXJ0QnVmZmVyaW5nVGltZSIsInRzUnVuIiwibWF4QnVmZmVyaW5nVGltZSIsImRzIiwiYWRkRGF0YVNvdXJjZSIsImRhdGFTb3VyY2VJZCIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJwZXJmb3JtYW5jZSIsInRpbWVvdXRCdWZmZXJpbmciLCJwcm9jZXNzRGF0YSIsImxhdGVuY3kiLCJ0aW1lU3RhbXAiLCJkYXRhQnVmZmVyIiwicmVzZXQiLCJjbG9zZSIsImN1cnJlbnREc0lkIiwiY3VycmVudERzIiwidHNSZWYiLCJjbG9ja1RpbWVSZWYiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY29tcHV0ZU5leHREYXRhIiwicmVmQ2xvY2tUaW1lIiwiY3VycmVudERzVG9TaGlmdCIsIm1heExhdGVuY3kiLCJtaW5MYXRlbmN5IiwibWluIiwidGltZU91dCIsImRDbG9jayIsImRUcyIsImRDbG9ja0FkaiIsInJlYyIsInNoaWZ0Iiwib25EYXRhIiwiZGF0YVNvdXJjZSIsInRpbWVkT3V0Iiwic2V0U3RhdHVzIiwid2FybiIsImNsZWFySW50ZXJ2YWwiLCJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIiwiRXZlbnRUeXBlIiwiREFUQSIsIlNUQVRVUyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNPLE1BQU1BLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQVosSUFBa0IsQ0FBbkM7QUFFUDtBQUNBO0FBQ0E7O0FBQ08sU0FBU0MsU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0I7QUFDekIsU0FBTyxPQUFRQSxDQUFSLEtBQWUsV0FBZixJQUE4QkEsQ0FBQyxLQUFLLElBQTNDO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTQyxRQUFULENBQWtCRCxDQUFsQixFQUFxQjtBQUN4QixTQUFPRCxTQUFTLENBQUNDLENBQUQsQ0FBVCxJQUFnQkEsQ0FBQyxLQUFLLElBQTdC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QUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKiogKiBAbW9kdWxlIFV0aWxzICovXG5cbi8qKiBNYXhpbXVtIHZhbHVlIG9mIGEgbG9uZyAqL1xuZXhwb3J0IGNvbnN0IE1BWF9MT05HID0gTWF0aC5wb3coMiwgNTMpICsgMTtcblxuLyoqXG4gKiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0ZXN0IGlmIGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBkZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluZWQodikge1xuICAgIHJldHVybiB0eXBlb2YgKHYpICE9PSAndW5kZWZpbmVkJyAmJiB2ICE9PSBudWxsO1xufVxuXG4vKipcbiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0ZXN0IGlmIGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBoYXMgYSB2YWx1ZSxcbiB0aGF0IGlzIGl0IGlzIGRlZmluZWQgYW5kIG5vbiBudWxsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNWYWx1ZSh2KSB7XG4gICAgcmV0dXJuIGlzRGVmaW5lZCh2KSAmJiB2ICE9PSBudWxsO1xufVxuXG4vKipcbiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0cmFuc2Zvcm0gaGV4IGNvbG9yIGludG8gUkdCQVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4MnJnYihoZXgpe1xuICAgIGNvbnN0IFtyLCBnLCBiXSA9IGhleC5tYXRjaCgvXFx3XFx3L2cpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDE2KSk7XG4gICAgcmV0dXJuIFtyLCBnLCBiXTtcbn1cbi8qKlxuIEdsb2JhbCBoZWxwZXIgbWV0aG9kIHRvIHRlc3QgaWYgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIG9mIGEgcGFydGljdWxhciB0eXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNUeXBlKHYsIGV4cGVjdGVkVHlwZSkge1xuICAgIGxldCBoYXNWYWwgPSBoYXNWYWx1ZSh2KTtcbiAgICByZXR1cm4gaGFzVmFsICYmIHR5cGVvZiAodikgPT09IGV4cGVjdGVkVHlwZTtcbn1cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2LCBsZXROYW1lKSB7XG4gICAgcmV0dXJuIGhhc1R5cGUodiwgJ29iamVjdCcsIGxldE5hbWUpO1xufVxuXG4vKipcbiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0ZXN0IGlmIGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhbiBhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2KSB7XG4gICAgcmV0dXJuIGlzRGVmaW5lZCh2KSAmJiBBcnJheS5pc0FycmF5KHYpO1xufVxuXG4vKipcbiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0ZXN0IGlmIGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gaGFzVHlwZSh2LCAnZnVuY3Rpb24nLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGRlZmluZWRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnREZWZpbmVkKHYsIGxldE5hbWUgPSAnbGV0aWFibGUnKSB7XG4gICAgaWYgKCFpc0RlZmluZWQodikpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3QgYmUgZGVmaW5lZFwiO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFRydWUodiwgbGV0TmFtZSA9ICdsZXRpYWJsZScpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh2KSB8fCAhdikge1xuICAgICAgICB0aHJvdyBsZXROYW1lO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbn1cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBkZWZpbmVkIGFuZCBub24tbnVsbFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFR5cGUodiwgZXhwZWN0ZWRUeXBlLCBsZXROYW1lID0gJ2xldGlhYmxlJykge1xuICAgIGFzc2VydERlZmluZWQodiwgbGV0TmFtZSk7XG4gICAgaWYgKHR5cGVvZiAodikgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICB0aHJvdyBsZXROYW1lICsgXCIgbXVzdCBiZSBvZiB0eXBlIFwiICsgZXhwZWN0ZWRUeXBlO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGEgc3RyaW5nXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Qm9vbGVhbih2LCBsZXROYW1lKSB7XG4gICAgcmV0dXJuIGFzc2VydFR5cGUodiwgJ2Jvb2xlYW4nLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGEgc3RyaW5nXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U3RyaW5nKHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gYXNzZXJ0VHlwZSh2LCAnc3RyaW5nJywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIG51bWJlclxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE51bWJlcih2LCBsZXROYW1lKSB7XG4gICAgcmV0dXJuIGFzc2VydFR5cGUodiwgJ251bWJlcicsIGxldE5hbWUpO1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYSBudW1iZXJcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRQb3NpdGl2ZSh2LCBsZXROYW1lKSB7XG4gICAgYXNzZXJ0TnVtYmVyKHYsIGxldE5hbWUpO1xuICAgIGlmICh2IDw9IDApIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXJcIjtcbiAgICB9XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhbiBvYmplY3RcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRPYmplY3QodiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBhc3NlcnRUeXBlKHYsICdvYmplY3QnLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGFuIG9iamVjdFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEFycmF5KHYsIGxldE5hbWUgPSAnbGV0aWFibGUnKSB7XG4gICAgYXNzZXJ0RGVmaW5lZCh2LCBsZXROYW1lKTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3QgYmUgYW4gYXJyYXlcIjtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIGZ1bmN0aW9uXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RnVuY3Rpb24odiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBhc3NlcnRUeXBlKHYsICdmdW5jdGlvbicsIGxldE5hbWUpO1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZCBhbmQgbm9uLW51bGxcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRIYXNWYWx1ZSh2LCBsZXROYW1lID0gJ2xldGlhYmxlJykge1xuICAgIGFzc2VydERlZmluZWQodiwgbGV0TmFtZSk7XG4gICAgaWYgKCFoYXNWYWx1ZSh2KSkge1xuICAgICAgICB0aHJvdyBsZXROYW1lICsgXCIgbXVzdCBub3QgYmUgbnVsbFwiO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbn1cblxuLyoqXG4gKlxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tVVVJRCgpIHtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgteHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzdGFtcHMvZW1iZWRzIGEgVVVJRCBpbnRvIGFuIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgVVVJRCBnZW5lcmF0ZWQgZm9yIGl0XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFtcFVVSUQob2JqKSB7XG4gICAgb2JqLl9vc2hfaWQgPSBvYmouX29zaF9pZCB8fCByYW5kb21VVUlEKCk7XG4gICAgcmV0dXJuIG9iai5fb3NoX2lkO1xufVxuXG4vL2J1ZmZlciBpcyBhbiBBcnJheUJ1ZmZlciBvYmplY3QsIHRoZSBvZmZzZXQgaWYgc3BlY2lmaWVkIGluIGJ5dGVzLCBhbmQgdGhlIHR5cGUgaXMgYSBzdHJpbmdcbi8vY29ycmVzcG9uZGluZyB0byBhbiBPR0MgZGF0YSB0eXBlLlxuLy9TZWUgaHR0cDovL2RlZi5zZWVncmlkLmNzaXJvLmF1L3Npc3N2b2Mvb2djLWRlZi9yZXNvdXJjZT91cmk9aHR0cDovL3d3dy5vcGVuZ2lzLm5ldC9kZWYvZGF0YVR5cGUvT0dDLzAvXG4vKipcbiAqXG4gKiBAcGFyYW0gYnVmZmVyXG4gKiBAcGFyYW0gb2Zmc2V0XG4gKiBAcGFyYW0gdHlwZVxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFBhcnNlQnl0ZXMoYnVmZmVyLCBvZmZzZXQsIHR5cGUpIHtcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuXG4gICAgLy9Ob3RlOiBUaGVyZSBleGlzdCB0eXBlcyBub3QgbGlzdGVkIGluIHRoZSBtYXAgYmVsb3cgdGhhdCBoYXZlIE9HQyBkZWZpbml0aW9ucywgYnV0IG5vIGFwcHJvcHJpYXRlXG4gICAgLy9tZXRob2RzIG9yIGNvcnJlc3BvbmRpbmcgdHlwZXMgYXZhaWxhYmxlIGZvciBwYXJzaW5nIGluIGphdmFzY3JpcHQuIFRoZXkgYXJlIGZsb2F0MTI4LCBmbG9hdDE2LCBzaWduZWRMb25nLFxuICAgIC8vYW5kIHVuc2lnbmVkTG9uZ1xuICAgIGxldCB0eXBlTWFwID0ge1xuICAgICAgICBkb3VibGU6IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsOiB2aWV3LmdldEZsb2F0NjQob2Zmc2V0KSwgYnl0ZXM6IDh9O1xuICAgICAgICB9LFxuICAgICAgICBmbG9hdDY0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRGbG9hdDY0KG9mZnNldCksIGJ5dGVzOiA4fTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxvYXQzMjogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0RmxvYXQzMihvZmZzZXQpLCBieXRlczogNH07XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25lZEJ5dGU6IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsOiB2aWV3LmdldEludDgob2Zmc2V0KSwgYnl0ZXM6IDF9O1xuICAgICAgICB9LFxuICAgICAgICBzaWduZWRJbnQ6IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsOiB2aWV3LmdldEludDMyKG9mZnNldCksIGJ5dGVzOiA0fTtcbiAgICAgICAgfSxcbiAgICAgICAgc2lnbmVkU2hvcnQ6IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsOiB2aWV3LmdldEludDE2KG9mZnNldCksIGJ5dGVzOiAyfTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zaWduZWRCeXRlOiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRVaW50OChvZmZzZXQpLCBieXRlczogMX07XG4gICAgICAgIH0sXG4gICAgICAgIHVuc2lnbmVkSW50OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRVaW50MzIob2Zmc2V0KSwgYnl0ZXM6IDR9O1xuICAgICAgICB9LFxuICAgICAgICB1bnNpZ25lZFNob3J0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRVaW50MTYob2Zmc2V0KSwgYnl0ZXM6IDJ9O1xuICAgICAgICB9LFxuICAgICAgICAvL1RPRE86IHN0cmluZy11dGYtODpcbiAgICB9O1xuICAgIHJldHVybiB0eXBlTWFwW3R5cGVdKG9mZnNldCk7XG59XG5cbi8vVGhpcyBmdW5jdGlvbiByZWN1cnNpdmxleSBpdGVyYXRlcyBvdmVyIHRoZSByZXN1bHRTdHJ1Y3R1cmUgdG8gZmlsbCBpblxuLy92YWx1ZXMgcmVhZCBmcm9tIGRhdGEgd2hpY2ggc2hvdWxkIGJlIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHBheWxvYWQgZnJvbSBhIHdlYnNvY2tldFxuLyoqXG4gKlxuICogQHBhcmFtIHN0cnVjdFxuICogQHBhcmFtIGRhdGFcbiAqIEBwYXJhbSBvZmZzZXRCeXRlc1xuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJlYWREYXRhKHN0cnVjdCwgZGF0YSwgb2Zmc2V0Qnl0ZXMpIHtcbiAgICBsZXQgb2Zmc2V0ID0gb2Zmc2V0Qnl0ZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJ1Y3QuZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjdXJyRmllbGRTdHJ1Y3QgPSBzdHJ1Y3QuZmllbGRzW2ldO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGN1cnJGaWVsZFN0cnVjdC50eXBlKSAmJiBjdXJyRmllbGRTdHJ1Y3QudHlwZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IHJldCA9IFBhcnNlQnl0ZXMoZGF0YSwgb2Zmc2V0LCBjdXJyRmllbGRTdHJ1Y3QudHlwZSk7XG4gICAgICAgICAgICBjdXJyRmllbGRTdHJ1Y3QudmFsID0gcmV0LnZhbDtcbiAgICAgICAgICAgIG9mZnNldCArPSByZXQuYnl0ZXM7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKGN1cnJGaWVsZFN0cnVjdC5jb3VudCkgJiYgY3VyckZpZWxkU3RydWN0LmNvdW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvL2NoZWNrIGlmIGNvdW50IGlzIGEgcmVmZXJlbmNlIHRvIGFub3RoZXIgbGV0aWFibGVcbiAgICAgICAgICAgIGlmIChpc05hTihjdXJyRmllbGRTdHJ1Y3QuY291bnQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gY3VyckZpZWxkU3RydWN0LmNvdW50O1xuICAgICAgICAgICAgICAgIGxldCBmaWVsZE5hbWUgPSBzdHJ1Y3QuaWQyRmllbGRNYXBbaWRdO1xuICAgICAgICAgICAgICAgIGN1cnJGaWVsZFN0cnVjdC5jb3VudCA9IHN0cnVjdC5maW5kRmllbGRCeU5hbWUoZmllbGROYW1lKS52YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGN1cnJGaWVsZFN0cnVjdC5jb3VudDsgYysrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjdXJyRmllbGRTdHJ1Y3QuZmllbGRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWVsZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY3VyckZpZWxkU3RydWN0LmZpZWxkc1tqXSkpO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBSZWFkRGF0YShmaWVsZCwgZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgY3VyckZpZWxkU3RydWN0LnZhbC5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHJlc3VsdFN0cnVjdHVyZVxuICogQHJldHVybiB7e319XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBHZXRSZXN1bHRPYmplY3QocmVzdWx0U3RydWN0dXJlKSB7XG4gICAgLy9UT0RPOiBoYW5kbGUgY2FzZXMgZm9yIG5lc3RlZCBhcnJheXMgLyBtYXRyaXggZGF0YSB0eXBlc1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdFN0cnVjdHVyZS5maWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChyZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLmNvdW50KSkge1xuICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0ubmFtZV0gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgcmVzdWx0U3RydWN0dXJlLmZpZWxkc1tpXS5jb3VudDsgYysrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0udmFsW2NdLmZpZWxkcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtW3Jlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0udmFsW2NdLmZpZWxkc1trXS5uYW1lXSA9IHJlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0udmFsW2NdLmZpZWxkc1trXS52YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLm5hbWVdLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRbcmVzdWx0U3RydWN0dXJlLmZpZWxkc1tpXS5uYW1lXSA9IHJlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0udmFsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09wZXJhKCkge1xuICAgIHJldHVybiAoISF3aW5kb3cub3ByICYmICEhb3ByLmFkZG9ucykgfHwgISF3aW5kb3cub3BlcmEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCcgT1BSLycpID49IDA7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpcmVmb3goKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBJbnN0YWxsVHJpZ2dlciAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5IVE1MRWxlbWVudCkuaW5kZXhPZignQ29uc3RydWN0b3InKSA+IDA7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Nocm9tZSgpIHtcbiAgICByZXR1cm4gISF3aW5kb3cuY2hyb21lICYmICEhd2luZG93LmNocm9tZS53ZWJzdG9yZTtcbn1cblxuLyoqXG4gKlxuICogQHJldHVybiB7Knxib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCbGluaygpIHtcbiAgICByZXR1cm4gKGlzQ2hyb21lIHx8IGlzT3BlcmEpICYmICEhd2luZG93LkNTUztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIGFcbiAqIEBwYXJhbSBiXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheUludGVyc2VjdChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBiLmluZGV4T2YoZWxlbWVudCkgPiAtMTtcbiAgICB9KS5sZW5ndGggPiAwO1xufVxuXG5cbi8qKlxuICpcbiAqIEBwYXJhbSBvXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50KG8pIHtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIEhUTUxFbGVtZW50ID09PSBcIm9iamVjdFwiID8gbyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IDogLy9ET00yXG4gICAgICAgIG8gJiYgdHlwZW9mIG8gPT09IFwib2JqZWN0XCIgJiYgbyAhPT0gbnVsbCAmJiBvLm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiBvLm5vZGVOYW1lID09PSBcInN0cmluZ1wiXG4gICAgKTtcbn1cblxuLyoqXG4gKlxuICogQHJldHVybiB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2ViV29ya2VyKCkge1xuICAgIHJldHVybiBpc0RlZmluZWQoV29ya2VyKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIGRpdlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFrZVNjcmVlblNob3QoZGl2KSB7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgY3NzIGNsYXNzIGZyb20gYSB0aGUgZGl2IGdpdmVuIGFzIGFyZ3VtZW50LlxuICogQHBhcmFtIGRpdiB0aGUgZGl2IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICogQHBhcmFtIGNzcyB0aGUgY3NzIGNsYXNzIHRvIHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ3NzKGRpdiwgY3NzKSB7XG4gICAgbGV0IGRpdkNzcyA9IGRpdi5jbGFzc05hbWU7XG4gICAgY3NzID0gZGl2Q3NzLnJlcGxhY2UoY3NzLCBcIlwiKTtcbiAgICBkaXYuY2xhc3NOYW1lID0gY3NzO1xufVxuXG5cbi8qKlxuICogQWRkIGEgY3NzIGNsYXNzIHRvIGEgdGhlIGRpdiBnaXZlbiBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSBkaXYgdGhlIGRpdiB0byBhZGQgdGhlIGNsYXNzIHRvXG4gKiBAcGFyYW0gY3NzIHRoZSBjc3MgY2xhc3MgdG8gYWRkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRDc3MoZGl2LCBjc3MpIHtcbiAgICBkaXYuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGl2LmNsYXNzTmFtZSArIFwiIFwiICsgY3NzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBsYXN0IGNoYXJhY3RlciBvZiBhIHtzdHJpbmd9IG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBpbnB1dCB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgdmFsdWUgd2l0aG91dCB0aGUgbGFzdCBjaGFyYWN0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxhc3RDaGFySWZFeGlzdCh2YWx1ZSkge1xuICAgIGlmICghaXNEZWZpbmVkKHVuZGVmaW5lZCkgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUubGVuZ3RoID09PSAwIHx8ICF2YWx1ZS5lbmRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSk7XG59XG5cbi8qKlxuICogUm91bmQgb2ZmIG51bWJlciB0byBuZWFyZXN0IDAuNVxuICogQHBhcmFtIHtOdW1iZXJ9IG51bSAtIFRoZSBudW1iZXIgdG8gcm91bmQgb2ZmXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByb3VuZGVkIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmRIYWxmKG51bSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSoyKS8yO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLFxuICogd2lsbCBub3QgYmUgZXhlY3V0ZWQuIFRoZSBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgd2hlblxuICogaXQgd2lsbCBzdG9wIGJlaW5nIGNhbGxlZCBmb3IgbW9yZSB0aGFuIE4gbWlsbGlzZWNvbmRzLlxuICogSWYgdGhlIGBpbW1lZGlhdGVgIHBhcmFtZXRlciBpcyB0cnVlLCB0aGVuIHRoZSBmdW5jdGlvblxuICogd2lsbCBiZSBleGVjdXRlZCBhdCB0aGUgZmlyc3QgY2FsbCBpbnN0ZWFkIG9mIHRoZSBsYXN0LlxuICogUGFyYW1ldGVycyA6XG4gKiAtIGZ1bmM6IHRoZSBmdW5jdGlvbiB0byBgZGVib3VuY2VyYC5cbiAqIC0gd2FpdDogdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgKE4pIHRvIHdhaXQgYmVmb3JlXG4gKiBjYWxsIGZ1bmMoKVxuICogLSBpbW1lZGlhdGUgKG9wdGlvbmFsKTogQ2FsbCBmdW5jKCkgYXQgdGhlIGZpcnN0IGludm9jYXRpb25cbiAqIGluc3RlYWQgb2YgdGhlIGxhc3Qgb25lIChEZWZhdWx0IGZhbHNlKVxuICogLSBjb250ZXh0IChvcHRpb25hbCk6IHRoZSBjb250ZXh0IGluIHdoaWNoIHRvIGNhbGwgZnVuYygpXG4gKiAodGhpcyBieSBkZWZhdWx0KVxuICovXG5cbi8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3Rcbi8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3Jcbi8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgbGFzdCA9IG5vdyAtIHRpbWVzdGFtcDtcblxuICAgICAgICBpZiAobGFzdCA8IHdhaXQgJiYgbGFzdCA+PSAwKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aW1lb3V0KSBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgbGVhZGluZywgdHJhaWxpbmcsIGNvbnRleHQpIHtcbiAgICB2YXIgY3R4LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHByZXZpb3VzID0gbmV3IERhdGU7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGN0eCwgYXJncyk7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZTtcbiAgICAgICAgaWYgKCFwcmV2aW91cyAmJiAhbGVhZGluZykgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgICAgY3R4ID0gY29udGV4dCB8fCB0aGlzO1xuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGN0eCwgYXJncyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRpbWVvdXQgJiYgdHJhaWxpbmcpIHtcbiAgICAgICAgICAgIC8vIFNpbm9uIG9uIHPigJllbmRvcnQgcGVuZGFudCBsZSB0ZW1wcyByZXN0YW50XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UgKHRhcmdldCwgc291cmNlKSB7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGBzb3VyY2VgIHByb3BlcnRpZXMgYW5kIGlmIGFuIGBPYmplY3RgIHNldCBwcm9wZXJ0eSB0byBtZXJnZSBvZiBgdGFyZ2V0YCBhbmQgYHNvdXJjZWAgcHJvcGVydGllc1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNvdXJjZSkpIHtcbiAgICAgICAgaWYgKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgT2JqZWN0ICYmIGtleSBpbiB0YXJnZXQpIE9iamVjdC5hc3NpZ24oc291cmNlW2tleV0sIG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSkpXG4gICAgfVxuXG4gICAgLy8gSm9pbiBgdGFyZ2V0YCBhbmQgbW9kaWZpZWQgYHNvdXJjZWBcbiAgICBPYmplY3QuYXNzaWduKHRhcmdldCB8fCB7fSwgc291cmNlKVxuICAgIHJldHVybiB0YXJnZXRcbn07XG4iLCIvKipcbiAqIEVudW0gZm9yIGNvbm5lY3Rpb24gc3RhdHVzLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG4gICAgQ09OTkVDVElORzogXCJjb25uZWN0aW5nXCIsXG4gICAgQ09OTkVDVEVEOiAgXCJjb25uZWN0ZWRcIixcbiAgICBESVNDT05ORUNURUQ6IFwiZGlzY29ubmVjdGVkXCJcbn07XG4iLCJpbXBvcnQge2lzRGVmaW5lZH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQge1N0YXR1c30gZnJvbSBcIi4uL3Byb3RvY29sL1N0YXR1cy5qc1wiO1xuXG5jbGFzcyBEYXRhU3luY2hyb25pemVyQWxnbyB7XG4gICAgY29uc3RydWN0b3IoZGF0YVNvdXJjZXMsIHJlcGxheVNwZWVkID0gMSwgdGltZXJSZXNvbHV0aW9uID0gNSkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5idWZmZXJpbmdUaW1lID0gMTAwMDtcbiAgICAgICAgdGhpcy5zdGFydEJ1ZmZlcmluZ1RpbWUgPSAtMTtcbiAgICAgICAgdGhpcy50c1J1biA9IDA7XG4gICAgICAgIHRoaXMucmVwbGF5U3BlZWQgPSByZXBsYXlTcGVlZDtcbiAgICAgICAgdGhpcy50aW1lclJlc29sdXRpb24gPSB0aW1lclJlc29sdXRpb247XG4gICAgICAgIGxldCBtYXhCdWZmZXJpbmdUaW1lID0gLTE7XG5cbiAgICAgICAgZm9yIChsZXQgZHMgb2YgZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRGF0YVNvdXJjZShkcyk7XG4gICAgICAgICAgICBtYXhCdWZmZXJpbmdUaW1lID0gZHMuYnVmZmVyaW5nVGltZSA+IG1heEJ1ZmZlcmluZ1RpbWUgPyBkcy5idWZmZXJpbmdUaW1lIDogbWF4QnVmZmVyaW5nVGltZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4QnVmZmVyaW5nVGltZSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyaW5nVGltZSA9IG1heEJ1ZmZlcmluZ1RpbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdXNoKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgICAgICBjb25zdCBkcyA9IHRoaXMuZGF0YVNvdXJjZU1hcFtkYXRhU291cmNlSWRdO1xuICAgICAgICBpZiAoZHMuc3RhdHVzID09PSBTdGF0dXMuRElTQ09OTkVDVEVEKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdGFydEJ1ZmZlcmluZ1RpbWUgPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgc3luY2hyb25pemVyIGJ1ZmZlcmluZyBkYXRhIGZvciAke3RoaXMuYnVmZmVyaW5nVGltZX1tcy4uYCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QnVmZmVyaW5nVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgLy8gc3RhcnQgaXRlcmF0aW5nIG9uIGRhdGEgYWZ0ZXIgYnVmZmVyaW5nVGltZVxuICAgICAgICAgICAgdGhpcy50aW1lb3V0QnVmZmVyaW5nID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnByb2Nlc3NEYXRhKCksIHRoaXMuYnVmZmVyaW5nVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGF0ZW5jeSA9IDA7XG4gICAgICAgIGlmICh0aGlzLnRzUnVuID4gMCkge1xuICAgICAgICAgICAgbGF0ZW5jeSA9IHRoaXMudHNSdW4gLSBkYXRhLnRpbWVTdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBkcy5sYXRlbmN5ID0gbGF0ZW5jeSA+IGRzLmxhdGVuY3kgPyBsYXRlbmN5IDogKGRzLmxhdGVuY3kgKyBsYXRlbmN5KSAvIDI7XG4gICAgICAgIGRzLmRhdGFCdWZmZXIucHVzaChkYXRhKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3Jlc2V0IHN5bmNocm9uaXplciBhbGdvJylcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICBmb3IgKGxldCBjdXJyZW50RHNJZCBpbiB0aGlzLmRhdGFTb3VyY2VNYXApIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREcyA9IHRoaXMuZGF0YVNvdXJjZU1hcFtjdXJyZW50RHNJZF07XG4gICAgICAgICAgICBjdXJyZW50RHMuZGF0YUJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgY3VycmVudERzLnN0YXJ0QnVmZmVyaW5nVGltZSA9IC0xO1xuICAgICAgICAgICAgY3VycmVudERzLmxhdGVuY3k9MDtcbiAgICAgICAgICAgIGN1cnJlbnREcy5zdGF0dXM9IFN0YXR1cy5ESVNDT05ORUNURUQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50c1J1biA9IDA7XG4gICAgICAgIHRoaXMuc3RhcnRCdWZmZXJpbmdUaW1lID0gLTE7XG4gICAgfVxuXG4gICAgcHJvY2Vzc0RhdGEoKSB7XG4gICAgICAgIC8vIHRoZSB0aW1lb3V0IGhhcyBiZWVuIGNhbmNlbGxlZFxuICAgICAgICBpZighaXNEZWZpbmVkKHRoaXMudGltZW91dEJ1ZmZlcmluZykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdHNSZWYgPSAtMTtcbiAgICAgICAgbGV0IGNsb2NrVGltZVJlZiA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICAgIC8vIGdldCByZWZlcmVuY2Ugc3RhcnQgdGltZXN0YW1wXG4gICAgICAgIC8vIHRoZSByZWZlcmVuY2Ugc3RhcnQgdGltZXN0YW1wIHNob3VsZCB0aGUgb2xkZXN0IG9uZVxuICAgICAgICBsZXQgY3VycmVudERzO1xuICAgICAgICBmb3IgKGxldCBjdXJyZW50RHNJZCBpbiB0aGlzLmRhdGFTb3VyY2VNYXApIHtcbiAgICAgICAgICAgIGN1cnJlbnREcyA9IHRoaXMuZGF0YVNvdXJjZU1hcFtjdXJyZW50RHNJZF07XG4gICAgICAgICAgICBpZiAoY3VycmVudERzLnN0YXR1cyA9PT0gU3RhdHVzLkRJU0NPTk5FQ1RFRCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnREcy5kYXRhQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0c1JlZiA9ICh0c1JlZiA9PT0gLTEgfHwgY3VycmVudERzLmRhdGFCdWZmZXJbMF0udGltZVN0YW1wIDwgdHNSZWYpID8gY3VycmVudERzLmRhdGFCdWZmZXJbMF0udGltZVN0YW1wIDpcbiAgICAgICAgICAgICAgICAgICAgdHNSZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgLy8gMSkgcmV0dXJuIHRoZSBvbGRlc3QgZGF0YSBpZiBhbnlcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLmNvbXB1dGVOZXh0RGF0YSh0c1JlZiwgY2xvY2tUaW1lUmVmKSkgO1xuXG4gICAgICAgIH0sIHRoaXMudGltZXJSZXNvbHV0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBuZXh0IGRhdGEgaWYgYW55LiBXZSByZXR1cm4gb25seSAxIHZhbHVlIGZvciB0aGlzIGl0ZXJhdGlvbi4gSWYgdGhlcmUgYXJlIG11bHRpcGxlIHZhbHVlcyB0byByZXR1cm4sXG4gICAgICogd2UgcmV0dXJuIG9ubHkgdGhlIG9sZGVzdCBvbmUuXG4gICAgICogQHBhcmFtIHRzUmVmIC0gdGhlIHRpbWVzdGFtcCBvZiB0aGUgZmlyc3QgZGF0YVxuICAgICAqIEBwYXJhbSByZWZDbG9ja1RpbWUgLSB0aGUgYWJzb2x1dGUgZGlmZiB0aW1lIHJlYWxseSBzcGVudFxuICAgICAqL1xuICAgIGNvbXB1dGVOZXh0RGF0YSh0c1JlZiwgcmVmQ2xvY2tUaW1lKSB7XG4gICAgICAgIGxldCBjdXJyZW50RHM7XG4gICAgICAgIGxldCBjdXJyZW50RHNUb1NoaWZ0ID0gbnVsbDtcblxuICAgICAgICAvLyBjb21wdXRlIG1heCBsYXRlbmN5XG4gICAgICAgIGxldCBtYXhMYXRlbmN5ID0gMDtcbiAgICAgICAgbGV0IG1pbkxhdGVuY3kgPSAwO1xuICAgICAgICBmb3IgKGxldCBjdXJyZW50RHNJZCBpbiB0aGlzLmRhdGFTb3VyY2VNYXApIHtcbiAgICAgICAgICAgIGN1cnJlbnREcyA9IHRoaXMuZGF0YVNvdXJjZU1hcFtjdXJyZW50RHNJZF07XG4gICAgICAgICAgICBpZiAoY3VycmVudERzLnN0YXR1cyA9PT0gU3RhdHVzLkRJU0NPTk5FQ1RFRCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnREcy5sYXRlbmN5ID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCBsYXRlbmN5ID0gTWF0aC5taW4oY3VycmVudERzLmxhdGVuY3ksIGN1cnJlbnREcy50aW1lT3V0KTtcbiAgICAgICAgICAgICAgICBtYXhMYXRlbmN5ID0gKGxhdGVuY3kgPiBtYXhMYXRlbmN5KSA/IGxhdGVuY3kgOiBtYXhMYXRlbmN5O1xuICAgICAgICAgICAgICAgIG1pbkxhdGVuY3kgPSAoY3VycmVudERzLmxhdGVuY3kgPCBtaW5MYXRlbmN5KSA/IGN1cnJlbnREcy5sYXRlbmN5IDogbWluTGF0ZW5jeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRDbG9jayA9IHBlcmZvcm1hbmNlLm5vdygpIC0gcmVmQ2xvY2tUaW1lO1xuICAgICAgICB0aGlzLnRzUnVuID0gdHNSZWYgKyBkQ2xvY2s7XG5cbiAgICAgICAgLy8gY29tcHV0ZSBuZXh0IGRhdGEgdG8gcmV0dXJuXG4gICAgICAgIGZvciAobGV0IGN1cnJlbnREc0lkIGluIHRoaXMuZGF0YVNvdXJjZU1hcCkge1xuICAgICAgICAgICAgY3VycmVudERzID0gdGhpcy5kYXRhU291cmNlTWFwW2N1cnJlbnREc0lkXTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RHMuc3RhdHVzID09PSBTdGF0dXMuRElTQ09OTkVDVEVEKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudERzLmRhdGFCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRUcyA9IGN1cnJlbnREcy5kYXRhQnVmZmVyWzBdLnRpbWVTdGFtcCAtIHRzUmVmO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRDbG9ja0FkaiA9IGRDbG9jayAtIG1heExhdGVuY3k7XG4gICAgICAgICAgICAgICAgLy8gd2UgdXNlIGFuIGludGVybWVkaWF0ZSBvYmplY3QgdG8gc3RvcmUgdGhlIGRhdGEgdG8gc2hpZnQgYmVjYXVzZSB3ZSB3YW50IHRvIHJldHVybiB0aGUgb2xkZXN0IG9uZVxuICAgICAgICAgICAgICAgIC8vIG9ubHlcbiAgICAgICAgICAgICAgICBpZiAoZFRzIDw9IGRDbG9ja0FkaiAqIHRoaXMucmVwbGF5U3BlZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gb3RoZXIgb25lIHRvIGNvbXBhcmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREc1RvU2hpZnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnREc1RvU2hpZnQgPSBjdXJyZW50RHM7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0YWtlIHRoZSBvbGRlc3QgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERzVG9TaGlmdCA9IChjdXJyZW50RHNUb1NoaWZ0LmRhdGFCdWZmZXJbMF0udGltZVN0YW1wIDwgY3VycmVudERzLmRhdGFCdWZmZXJbMF0udGltZVN0YW1wKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERzVG9TaGlmdCA6IGN1cnJlbnREcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpbmFsbHkgcG9wIHRoZSBkYXRhIGZyb20gRFMgcXVldWVcbiAgICAgICAgaWYgKGN1cnJlbnREc1RvU2hpZnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCByZWMgPSBjdXJyZW50RHNUb1NoaWZ0LmRhdGFCdWZmZXIuc2hpZnQoKTtcblxuICAgICAgICAgICAgLy8gYWRkIGxhdGVuY3kgZmxhZyB0byBkYXRhIHJlY29yZCBiZWZvcmUgd2UgZGlzcGF0Y2ggaXRcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgcmVsYXRpdmUgbGF0ZW5jeSBpbiBtaWxsaXMgY29tcGFyZWQgdG8gdGhlIERTIHdpdGggdGhlIGxvd2VzdCBsYXRlbmN5XG4gICAgICAgICAgICAvLyBzbyBpdCBpcyBhY2N1cmF0ZSBldmVuIGlmIGxvY2FsIGRldmljZSB0aW1lIGlzIG5vdCBzZXQgcHJvcGVybHlcbiAgICAgICAgICAgIHJlY1snQGxhdGVuY3knXSA9IGN1cnJlbnREcy5sYXRlbmN5IC0gbWluTGF0ZW5jeTtcblxuICAgICAgICAgICAgdGhpcy5vbkRhdGEoY3VycmVudERzVG9TaGlmdC5pZCwgcmVjKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgZGF0YVNvdXJjZSB0byBiZSBzeW5jaHJvbml6ZWRcbiAgICAgKiBAcGFyYW0ge0RhdGFTb3VyY2V9IGRhdGFTb3VyY2UgLSB0aGUgZGF0YVNvdXJjZSB0byBzeW5jaHJvbml6ZVxuICAgICAqL1xuICAgIGFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VNYXBbZGF0YVNvdXJjZS5pZF0gPSB7XG4gICAgICAgICAgICBidWZmZXJpbmdUaW1lOiBkYXRhU291cmNlLmJ1ZmZlcmluZ1RpbWUsXG4gICAgICAgICAgICB0aW1lT3V0OiBkYXRhU291cmNlLnRpbWVPdXQgfHwgMCxcbiAgICAgICAgICAgIGRhdGFCdWZmZXI6IFtdLFxuICAgICAgICAgICAgc3RhcnRCdWZmZXJpbmdUaW1lOiAtMSxcbiAgICAgICAgICAgIGlkOiBkYXRhU291cmNlLmlkLFxuICAgICAgICAgICAgdGltZWRPdXQ6IGZhbHNlLFxuICAgICAgICAgICAgbmFtZTogZGF0YVNvdXJjZS5uYW1lIHx8IGRhdGFTb3VyY2UuaWQsXG4gICAgICAgICAgICBsYXRlbmN5OiAwLFxuICAgICAgICAgICAgc3RhdHVzOiBTdGF0dXMuRElTQ09OTkVDVEVEIC8vTUVBTklORyBFbmFibGVkLCAwID0gRGlzYWJsZWRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBvbkRhdGEoZGF0YVNvdXJjZUlkLCBkYXRhKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBkYXRhU291cmNlIHN0YXR1c1xuICAgICAqIEBwYXJhbSB7U3RhdHVzfSBzdGF0dXMgLSB0aGUgbmV3IHN0YXR1c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhU291cmNlSWQgLSB0aGUgY29ycmVzcG9uZGluZyBkYXRhU291cmNlIGlkXG4gICAgICovXG4gICAgc2V0U3RhdHVzKGRhdGFTb3VyY2VJZCwgc3RhdHVzKSB7XG4gICAgICAgIGlmIChkYXRhU291cmNlSWQgaW4gdGhpcy5kYXRhU291cmNlTWFwKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2VNYXBbZGF0YVNvdXJjZUlkXS5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSBTdGF0dXMuRElTQ09OTkVDVEVEKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbGF0ZW5jeSBhbmQgYnVmZmVyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlTWFwW2RhdGFTb3VyY2VJZF0ubGF0ZW5jeSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlTWFwW2RhdGFTb3VyY2VJZF0uZGF0YUJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oc3RhdHVzKycgRGF0YVNvdXJjZSAnICsgZGF0YVNvdXJjZUlkICsgJyBmcm9tIHRoZSBzeW5jaHJvbml6ZXIgJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh0aGlzLmludGVydmFsKSkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmKGlzRGVmaW5lZCh0aGlzLnRpbWVvdXRCdWZmZXJpbmcpKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0QnVmZmVyaW5nKTtcbiAgICAgICAgICAgIHRoaXMudGltZW91dEJ1ZmZlcmluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJEYXRhIHN5bmNocm9uaXplciB0ZXJtaW5hdGVkIHN1Y2Nlc3NmdWxseVwiKTtcblxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YVN5bmNocm9uaXplckFsZ287XG4iLCJleHBvcnQgY29uc3QgREFUQV9TWU5DSFJPTklaRVJfVE9QSUMgPSAnZGF0YS1zeW5jaHJvbml6ZXItJztcbmV4cG9ydCBjb25zdCBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX0RBVEFfVE9QSUMgPSAnZGF0YXNvdXJjZS1kYXRhLSc7XG5leHBvcnQgY29uc3QgREFUQVNPVVJDRV9USU1FX1RPUElDID0gJ2RhdGFzb3VyY2UtdGltZS0nO1xuXG5leHBvcnQgY29uc3QgRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDID0gJ2ZmbXBlZy1kZWNvZGUtJztcbiIsImV4cG9ydCBjb25zdCBFdmVudFR5cGUgPSB7XG4gICAgREFUQTogJ2RhdGEnLFxuICAgIFNUQVRVUzogJ3N0YXR1cydcbn07XG4iLCJpbXBvcnQgRGF0YVN5bmNocm9uaXplckFsZ28gZnJvbSBcIi4vRGF0YVN5bmNocm9uaXplckFsZ28uanNcIjtcbmltcG9ydCB7REFUQVNPVVJDRV9EQVRBX1RPUElDfSBmcm9tIFwiLi4vQ29uc3RhbnRzLmpzXCI7XG5pbXBvcnQge0V2ZW50VHlwZX0gZnJvbSBcIi4uL2V2ZW50L0V2ZW50VHlwZS5qc1wiO1xuXG5jb25zdCBiY0NoYW5uZWxzID0ge307XG5sZXQgZGF0YVN5bmNocm9uaXplckFsZ287XG5cbmxldCBpbml0ID0gZmFsc2U7XG5sZXQgZGF0YVNvdXJjZUJyb2FkQ2FzdENoYW5uZWwgPSBudWxsO1xuc2VsZi5jdXJyZW50VGltZSA9IC0xO1xuXG5jb25zdCBkYXRhU291cmNlcyA9IHt9O1xubGV0IHRpbWVCcm9hZGNhc3RDaGFubmVsID0gbnVsbDtcbmxldCB0b3BpY1RpbWU7XG5sZXQgdG9waWNEYXRhO1xuc2VsZi52ZXJzaW9uID0gMDtcblxuc2VsZi5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBpZihldmVudC5kYXRhLm1lc3NhZ2UgPT09ICdpbml0Jykge1xuICAgICAgICBkYXRhU3luY2hyb25pemVyQWxnbyA9IG5ldyBEYXRhU3luY2hyb25pemVyQWxnbyhcbiAgICAgICAgICAgIGV2ZW50LmRhdGEuZGF0YVNvdXJjZXMsXG4gICAgICAgICAgICBldmVudC5kYXRhLnJlcGxheVNwZWVkLFxuICAgICAgICAgICAgZXZlbnQuZGF0YS50aW1lclJlc29sdXRpb25cbiAgICAgICAgKTtcbiAgICAgICAgZGF0YVN5bmNocm9uaXplckFsZ28ub25EYXRhID0gb25EYXRhO1xuICAgICAgICBpbml0ID0gdHJ1ZTtcbiAgICAgICAgYWRkRGF0YVNvdXJjZXMoZXZlbnQuZGF0YS5kYXRhU291cmNlcyk7XG4gICAgICAgIHRvcGljRGF0YSA9IGV2ZW50LmRhdGEuZGF0YVRvcGljO1xuICAgICAgICB0b3BpY1RpbWUgPSBldmVudC5kYXRhLnRpbWVUb3BpYztcbiAgICAgICAgc2VsZi52ZXJzaW9uID0gZXZlbnQuZGF0YS52ZXJzaW9uO1xuICAgICAgICBpbml0QnJvYWRjYXN0Q2hhbm5lbCh0b3BpY0RhdGEsdG9waWNUaW1lICk7XG4gICAgfSBlbHNlIGlmKGV2ZW50LmRhdGEubWVzc2FnZSA9PT0gJ2FkZCcgJiYgZXZlbnQuZGF0YS5kYXRhU291cmNlcykge1xuICAgICAgICBhZGREYXRhU291cmNlcyhldmVudC5kYXRhLmRhdGFTb3VyY2VzKTtcbiAgICB9IGVsc2UgaWYoZXZlbnQuZGF0YS5tZXNzYWdlID09PSAnY3VycmVudC10aW1lJykge1xuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdjdXJyZW50LXRpbWUnLFxuICAgICAgICAgICAgZGF0YTogc2VsZi5jdXJyZW50VGltZVxuICAgICAgICB9KTtcbiAgICB9ICBlbHNlIGlmKGV2ZW50LmRhdGEubWVzc2FnZSA9PT0gJ3Jlc2V0Jykge1xuICAgICAgICBpZihkYXRhU3luY2hyb25pemVyQWxnbyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YVN5bmNocm9uaXplckFsZ28ucmVzZXQoKTtcbiAgICAgICAgfVxuICAgIH0gIGVsc2UgaWYoZXZlbnQuZGF0YS5tZXNzYWdlID09PSAndXBkYXRlLXZlcnNpb24nKSB7XG4gICAgICAgIHNlbGYudmVyc2lvbiA9IGV2ZW50LmRhdGEudmVyc2lvbjtcbiAgICB9IGVsc2UgaWYoZXZlbnQuZGF0YS5tZXNzYWdlID09PSAncmVwbGF5LXNwZWVkJykge1xuICAgICAgICBpZihkYXRhU3luY2hyb25pemVyQWxnbyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YVN5bmNocm9uaXplckFsZ28ucmVwbGF5U3BlZWQgPSBldmVudC5kYXRhLnJlcGxheVNwZWVkO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmKGV2ZW50LmRhdGEubWVzc2FnZSA9PT0gJ2RhdGEnKSB7XG4gICAgICAgIGlmKGRhdGFTeW5jaHJvbml6ZXJBbGdvICE9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXRhU3luY2hyb25pemVyQWxnby5wdXNoKGV2ZW50LmRhdGEuZGF0YVNvdXJjZUlkLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogZXZlbnQuZGF0YS5kYXRhLFxuICAgICAgICAgICAgICAgIHRpbWVTdGFtcDogZXZlbnQuZGF0YS50aW1lU3RhbXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0QnJvYWRjYXN0Q2hhbm5lbChkYXRhVG9waWMsIHRpbWVUb3BpYykge1xuICAgIGRhdGFTb3VyY2VCcm9hZENhc3RDaGFubmVsID0gbmV3IEJyb2FkY2FzdENoYW5uZWwoZGF0YVRvcGljKTtcbiAgICBkYXRhU291cmNlQnJvYWRDYXN0Q2hhbm5lbC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYoZXZlbnQuZGF0YS50eXBlID09PSBFdmVudFR5cGUuREFUQSkge1xuICAgICAgICAgICAgZm9yKGxldCBpPTA7IGkgPCBldmVudC5kYXRhLnZhbHVlcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YVN5bmNocm9uaXplckFsZ28ucHVzaChcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5kYXRhU291cmNlSWQsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV2ZW50LmRhdGEudmFsdWVzW2ldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYoZXZlbnQuZGF0YS50eXBlID09PSBFdmVudFR5cGUuU1RBVFVTKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlSWQgPSBldmVudC5kYXRhLmRhdGFTb3VyY2VJZDtcbiAgICAgICAgICAgIGRhdGFTeW5jaHJvbml6ZXJBbGdvLnNldFN0YXR1cyhkYXRhU291cmNlSWQsIGV2ZW50LmRhdGEuc3RhdHVzKTtcbiAgICAgICAgICAgIC8vIGJ1YmJsZSB0aGUgbWVzc2FnZVxuICAgICAgICAgICAgYmNDaGFubmVsc1tkYXRhU291cmNlSWRdLnBvc3RNZXNzYWdlKGV2ZW50LmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGltZUJyb2FkY2FzdENoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCh0aW1lVG9waWMpO1xuXG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBkYXRhU291cmNlc1xuICovXG5mdW5jdGlvbiBhZGREYXRhU291cmNlcyhkYXRhU291cmNlcykge1xuICAgIGZvcihsZXQgZGF0YVNvdXJjZSBvZiBkYXRhU291cmNlcykge1xuICAgICAgICBhZGREYXRhU291cmNlKGRhdGFTb3VyY2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkRGF0YVNvdXJjZShkYXRhU291cmNlKSB7XG4gICAgZGF0YVN5bmNocm9uaXplckFsZ28uYWRkRGF0YVNvdXJjZShkYXRhU291cmNlKTtcbiAgICAvLyBjcmVhdGUgYSBCQyB0byBwdXNoIGJhY2sgdGhlIHN5bmNocm9uaXplZCBkYXRhIGludG8gdGhlIERBVEEgU3RyZWFtLlxuICAgIGJjQ2hhbm5lbHNbZGF0YVNvdXJjZS5pZF0gPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbChEQVRBU09VUkNFX0RBVEFfVE9QSUMgKyBkYXRhU291cmNlLmlkKTtcblxuICAgIGlmKCEoZGF0YVNvdXJjZS5pZCBpbiBkYXRhU291cmNlcykpIHtcbiAgICAgICAgZGF0YVNvdXJjZXNbZGF0YVNvdXJjZS5pZF0gPSBkYXRhU291cmNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25EYXRhKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgIHNlbGYuY3VycmVudFRpbWUgPSBkYXRhLnRpbWVTdGFtcDtcbiAgICBiY0NoYW5uZWxzW2RhdGFTb3VyY2VJZF0ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdmFsdWVzOiBbZGF0YV0sXG4gICAgICAgICAgICBkYXRhU291cmNlSWQsXG4gICAgICAgICAgICB0eXBlOiBFdmVudFR5cGUuREFUQVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIHRpbWVCcm9hZGNhc3RDaGFubmVsLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdGltZXN0YW1wOiBkYXRhLnRpbWVTdGFtcCxcbiAgICAgICAgdmVyc2lvbjogc2VsZi52ZXJzaW9uLFxuICAgICAgICBkYXRhU291cmNlSWQ6IGRhdGFTb3VyY2VJZFxuICAgIH0pO1xufVxuXG5cbnNlbGYub25jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIGRhdGFTeW5jaHJvbml6ZXJBbGdvLmNsb3NlKCk7XG4gICAgY29uc29sZS5sb2coXCJEYXRhIFN5bmNocm9uaXplciBoYXMgYmVlbiB0ZXJtaW5hdGVkIHN1Y2Nlc3NmdWxseVwiKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")}]);