(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return hasValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return hex2rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return hex2rgba; });\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return capitalizeFirstLetter; });\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return merge; });\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGB\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\nfunction hex2rgba(hex) {\n  return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16), parseInt(hex.slice(7, 9), 16) / 255];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Capitalize the first letter of a given string\n * @param {String} str - the input string\n * @returns {String} the result\n */\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},10:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   * @param {Number} properties.timestamp - defines the timestamp of the data\n   * @param {Function} properties.getTimestamp - function which defines the timestamp of the data\n   * @param {Function} properties.onLeftClick - trigger onLeftClick marker event\n   * @param {Function} properties.onRightClick - trigger onRightClick marker event\n   * @param {Function} properties.onHover - trigger onHover marker event\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.init(properties);\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init(properties = this.properties) {\n    this.data = [];\n    this.propsById = {};\n    this.dataSourcesToFn = undefined;\n    this.props = {\n      id: "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "q"])(),\n      filter: true,\n      name: \'\',\n      description: \'\',\n      visible: true,\n      timestamp: true\n    };\n    this.dataSourceIds = undefined;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.dataSourceId)) {\n      this.dataSourceIds = [properties.dataSourceId];\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.dataSourceIds)) {\n      this.dataSourceIds = properties.dataSourceIds;\n    }\n\n    if (!this.dataSourceIds) {\n      this.dataSourceIds = [];\n    } // assertDefined(this.dataSourceIds, \'[Layer] dataSourceIds[] or dataSourceId\');\n\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.timestamp)) {\n      this.props.timestamp = properties.timestamp;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.initEvents();\n\n    if (this.checkFn("filter")) {\n      let fn = (rec, timestamp, options) => {\n        this.props.filter = this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timestamp, options) {\n        return true;\n      };\n\n      let fn = async (rec, timestamp, options) => {\n        this.props.filter = await this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'visible\', await this.getFunc(\'getVisible\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n\n    if (this.checkFn("getTimestamp")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'timestamp\', await this.getFunc(\'getTimestamp\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getTimestamp\'), fn);\n    }\n\n    if (this.checkFn("getName")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'name\', await this.getFunc(\'getName\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getName\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'description\', await this.getFunc(\'getDescription\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "o"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceIds\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.props.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   * @param {Boolean} [first=false] - set at the first position\n   */\n\n\n  addFn(dataSourceIds, fn, first = false) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      if (first) {\n        this.dataSourcesToFn[dataSourceId].unshift(fn);\n      } else {\n        this.dataSourcesToFn[dataSourceId].push(fn);\n      }\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  async setData(dataSourceId, records, options = {}) {\n    // store data into data props\n    this.data = [];\n    options.dataSourceId = dataSourceId;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n        this.props.filter = true;\n\n        for (let j = 0; j < records.length; j++) {\n          for (let i = 0; i < fnArr.length; i++) {\n            await fnArr[i](records[j].data, records[j].data.timestamp, options);\n\n            if (!this.props.filter) {\n              break;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props,\n              ...this.propsById[this.getId()]\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceId must be defined\');\n      return this.dataSourceIds;\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || this.dataSourceIds;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.init(this.properties);\n  }\n\n  updateProperty(propertyName, value) {\n    this.propsById[this.getId()][propertyName] = value;\n  }\n\n  checkExistingProps(id) {\n    return id in this.propsById;\n  }\n\n  setProps(id, props) {\n    this.propsById[id] = props;\n  }\n\n  setId(id, defaultProps) {\n    this.props.id = id;\n\n    if (!this.checkExistingProps(id)) {\n      this.setProps(id, defaultProps());\n    }\n  }\n\n  definedId(idName, props) {\n    if (this.checkFn(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)) {\n      let fn = async (rec, timestamp, options) => {\n        const id = await this.getFunc(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)(rec, timestamp, options);\n        this.setId(id, () => ({ ...props,\n          [idName]: id\n        }));\n      }; // must be first to assign correctly the first location to the right id if it is defined\n\n\n      this.addFn(this.getDataSourcesIdsByProperty(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`), fn, true);\n    } else {\n      this.setId(this.getId(), () => ({ ...props,\n        [idName]: this.getId()\n      }));\n    }\n  }\n\n  getCurrentProps() {\n    return this.propsById[this.getId()];\n  }\n\n  getIds() {\n    return Object.keys(this.propsById);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},11:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("class WorkerExt {\n  constructor(worker) {\n    this.worker = worker;\n    this.onmessage = null;\n  }\n\n  postMessage(message, transfer) {\n    // console.log('post no ack');\n    this.worker.postMessage(message, transfer);\n  }\n\n  postMessageWithAck(message, transfer) {\n    const ackId = crypto.randomUUID(); // console.log('post ack ' + ackId);\n\n    return new Promise((resolve, reject) => {\n      const controller = new AbortController();\n      this.worker.addEventListener(\"message\", e => {\n        //console.log('resp ' + e.data.ackId);\n        if (e.data.ackId === ackId) {\n          delete e.data.ackId;\n          controller.abort();\n\n          if (e.error) {\n            reject(e.error);\n          } else {\n            resolve(e.data);\n          }\n        }\n      }, {\n        signal: controller.signal\n      });\n      message.ackId = ackId;\n      this.worker.postMessage(message, transfer);\n    });\n  }\n\n  set onmessage(f) {\n    this.worker.onmessage = f;\n  }\n\n  terminate() {\n    if (this.worker) {\n      this.worker.terminate();\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (WorkerExt);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS93b3JrZXIvV29ya2VyRXh0LmpzPzE3ODgiXSwibmFtZXMiOlsiV29ya2VyRXh0IiwiY29uc3RydWN0b3IiLCJ3b3JrZXIiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0cmFuc2ZlciIsInBvc3RNZXNzYWdlV2l0aEFjayIsImFja0lkIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiZGF0YSIsImFib3J0IiwiZXJyb3IiLCJzaWduYWwiLCJmIiwidGVybWluYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFOLENBQWdCO0VBQ1pDLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTO0lBQ2hCLEtBQUtBLE1BQUwsR0FBY0EsTUFBZDtJQUNBLEtBQUtDLFNBQUwsR0FBaUIsSUFBakI7RUFFSDs7RUFFREMsV0FBVyxDQUFDQyxPQUFELEVBQVVDLFFBQVYsRUFBb0I7SUFDM0I7SUFDQSxLQUFLSixNQUFMLENBQVlFLFdBQVosQ0FBd0JDLE9BQXhCLEVBQWlDQyxRQUFqQztFQUNIOztFQUVEQyxrQkFBa0IsQ0FBQ0YsT0FBRCxFQUFVQyxRQUFWLEVBQW9CO0lBQ2xDLE1BQU1FLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxVQUFQLEVBQWQsQ0FEa0MsQ0FFbEM7O0lBRUEsT0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO01BRXBDLE1BQU1DLFVBQVUsR0FBRyxJQUFJQyxlQUFKLEVBQW5CO01BRUEsS0FBS2IsTUFBTCxDQUFZYyxnQkFBWixDQUE2QixTQUE3QixFQUF3Q0MsQ0FBQyxJQUFJO1FBQ3pDO1FBQ0EsSUFBSUEsQ0FBQyxDQUFDQyxJQUFGLENBQU9WLEtBQVAsS0FBaUJBLEtBQXJCLEVBQTRCO1VBQ3hCLE9BQU9TLENBQUMsQ0FBQ0MsSUFBRixDQUFPVixLQUFkO1VBQ0FNLFVBQVUsQ0FBQ0ssS0FBWDs7VUFDQSxJQUFHRixDQUFDLENBQUNHLEtBQUwsRUFBWTtZQUNSUCxNQUFNLENBQUNJLENBQUMsQ0FBQ0csS0FBSCxDQUFOO1VBQ0gsQ0FGRCxNQUVPO1lBQ0hSLE9BQU8sQ0FBQ0ssQ0FBQyxDQUFDQyxJQUFILENBQVA7VUFDSDtRQUNKO01BRUosQ0FaRCxFQVlHO1FBQUNHLE1BQU0sRUFBRVAsVUFBVSxDQUFDTztNQUFwQixDQVpIO01BY0FoQixPQUFPLENBQUNHLEtBQVIsR0FBZ0JBLEtBQWhCO01BQ0EsS0FBS04sTUFBTCxDQUFZRSxXQUFaLENBQXdCQyxPQUF4QixFQUFpQ0MsUUFBakM7SUFFSCxDQXJCTSxDQUFQO0VBc0JIOztFQUVZLElBQVRILFNBQVMsQ0FBQ21CLENBQUQsRUFBSTtJQUNiLEtBQUtwQixNQUFMLENBQVlDLFNBQVosR0FBd0JtQixDQUF4QjtFQUNIOztFQUVEQyxTQUFTLEdBQUk7SUFDVCxJQUFHLEtBQUtyQixNQUFSLEVBQWdCO01BQ1osS0FBS0EsTUFBTCxDQUFZcUIsU0FBWjtJQUNIO0VBQ0o7O0FBaERXOztBQW1ERHZCLGtFQUFmIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgV29ya2VyRXh0IHtcbiAgICBjb25zdHJ1Y3Rvcih3b3JrZXIpIHtcbiAgICAgICAgdGhpcy53b3JrZXIgPSB3b3JrZXI7XG4gICAgICAgIHRoaXMub25tZXNzYWdlID0gbnVsbDtcblxuICAgIH1cblxuICAgIHBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVyKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwb3N0IG5vIGFjaycpO1xuICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlLCB0cmFuc2Zlcik7XG4gICAgfVxuXG4gICAgcG9zdE1lc3NhZ2VXaXRoQWNrKG1lc3NhZ2UsIHRyYW5zZmVyKSB7XG4gICAgICAgIGNvbnN0IGFja0lkID0gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Bvc3QgYWNrICcgKyBhY2tJZCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgICAgICAgICAgdGhpcy53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZSA9PiB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzcCAnICsgZS5kYXRhLmFja0lkKTtcbiAgICAgICAgICAgICAgICBpZiAoZS5kYXRhLmFja0lkID09PSBhY2tJZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZS5kYXRhLmFja0lkO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGUuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwge3NpZ25hbDogY29udHJvbGxlci5zaWduYWx9KTtcblxuICAgICAgICAgICAgbWVzc2FnZS5hY2tJZCA9IGFja0lkO1xuICAgICAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXIpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldCBvbm1lc3NhZ2UoZikge1xuICAgICAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSBmO1xuICAgIH1cblxuICAgIHRlcm1pbmF0ZSgpICB7XG4gICAgICAgIGlmKHRoaXMud29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV29ya2VyRXh0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n")},14:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(3);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/worker/DataSource.worker.js\nvar DataSource_worker = __webpack_require__(169);\nvar DataSource_worker_default = /*#__PURE__*/__webpack_require__.n(DataSource_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/worker/WorkerExt.js\nvar WorkerExt = __webpack_require__(11);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n// global worker\n\nconst maxPoolSize = 5;\nconst workersPool = [];\nlet currentInsertPoolIdx = 0;\nlet dataSourceWorkers = {};\n\nclass DataSource_datasource_DataSource {\n  constructor(name, properties) {\n    this.id = properties.id || \"DataSource-\" + Object(Utils[\"q\" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.eventSubscriptionMap = {};\n    this.init = undefined;\n    this.mode = Mode[\"a\" /* Mode */].REAL_TIME;\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.mode)) {\n      this.mode = properties.mode;\n    }\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants[\"a\" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async createWorker(properties) {\n    return new WorkerExt[\"a\" /* default */](new DataSource_worker_default.a());\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    this.properties = { ...this.properties,\n      ...properties\n    };\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'update-properties',\n      data: properties,\n      dsId: this.id\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    return this.doConnect();\n  }\n\n  async getWorker() {\n    if (!(this.id in dataSourceWorkers)) {\n      // create new worker for this DS\n      currentInsertPoolIdx = (currentInsertPoolIdx + 1) % maxPoolSize;\n\n      if (!Object(Utils[\"n\" /* isDefined */])(workersPool[currentInsertPoolIdx])) {\n        workersPool[currentInsertPoolIdx] = await this.createWorker();\n      }\n\n      dataSourceWorkers[this.id] = currentInsertPoolIdx;\n    } // store worker idx into map for fast-mapping\n\n\n    return workersPool[dataSourceWorkers[this.id]];\n  }\n\n  async initDataSource(properties = this.properties) {\n    this.dataSourceWorker = await this.getWorker();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'init',\n      id: this.id,\n      properties: properties,\n      topics: {\n        data: this.getTopicId()\n      },\n      dsId: this.id\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTopicId());\n\n      datasourceBroadcastChannel.onmessage = async message => {\n        await this.handleMessage(message);\n      };\n\n      this.isInitialized = true;\n    });\n  }\n\n  async handleMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  async checkInit() {\n    if (!Object(Utils[\"n\" /* isDefined */])(this.init)) {\n      this.init = this.initDataSource();\n    }\n\n    return this.init;\n  }\n\n  async doConnect() {\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'connect',\n      dsId: this.id\n    });\n  }\n\n  async isConnected() {\n    if (!this.init) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.dataSourceWorker.postMessageWithAck({\n        message: 'is-connected',\n        dsId: this.id\n      });\n    }\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    await this.checkInit();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'disconnect',\n      dsId: this.id\n    });\n  }\n\n  async onDisconnect() {}\n\n  reset() {\n    this.init = undefined;\n  }\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSource_datasource = (DataSource_datasource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.realtime.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_realtime_datasource_TimeSeriesRealtimeDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    this.dataSynchronizer = undefined;\n    this.properties.version = 0;\n  }\n\n  getTimeTopicId() {\n    return Constants[\"b\" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return Mode[\"a\" /* Mode */].REAL_TIME;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return 'now';\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return Date.now();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return 'now';\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return '2055-01-01Z';\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return Date.now(); // or should we use first timestamp of last data received???\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return new Date('2055-01-01Z').toISOString();\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {}\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {}\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {}\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {}\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return 1.0;\n  }\n\n  setReplaySpeed(replaySpeed) {}\n\n  setVersion(version) {\n    this.properties.version = version;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    await this.checkInit();\n    const topic = Constants[\"c\" /* DATA_SYNCHRONIZER_TOPIC */] + dataSynchronizer.id;\n    this.dataSynchronizer = dataSynchronizer;\n    this.properties.version = this.dataSynchronizer.version();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'topics',\n      topics: {\n        data: topic,\n        time: this.getTimeTopicId(),\n        sync: dataSynchronizer.getTimeTopicId()\n      },\n      dsId: this.id\n    });\n  }\n\n  async removeDataSynchronizer() {\n    if (this.dataSourceWorker) {\n      this.dataSourceWorker.terminate();\n      this.dataSynchronizer = undefined;\n    } // this.init = undefined;\n\n\n    return this.checkInit();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    await this.checkInit();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'disconnect',\n      dsId: this.id\n    });\n  }\n\n  async doConnect() {\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'connect',\n      startTime: 'now',\n      version: this.version(),\n      dsId: this.id\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    const topics = {\n      data: this.getTopicId(),\n      time: this.getTimeTopicId()\n    };\n\n    if (this.dataSynchronizer) {\n      topics.sync = dataSynchronizer.getTimeTopicId();\n    }\n\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'topics',\n      topics: topics,\n      dsId: this.id\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n      datasourceBroadcastChannel.onmessage = async message => {\n        await this.handleTimeMessage(message);\n      };\n    });\n  }\n\n  async handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_realtime_datasource = (TimeSeries_realtime_datasource_TimeSeriesRealtimeDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.replay.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_replay_datasource_TimeSeriesReplayDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    this.setMinTime(properties.startTime);\n    this.setMaxTime(properties.endTime);\n    this.properties.startTimestamp = new Date(properties.startTime).getTime();\n    this.properties.endTimestamp = new Date(properties.endTime).getTime();\n    Object(Utils[\"c\" /* assertDefined */])(properties, 'Some properties must be defined');\n    this.dataSynchronizer = undefined;\n    this.properties.version = 0;\n  }\n\n  getTimeTopicId() {\n    return Constants[\"b\" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.properties.mode;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return new Date(this.getStartTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.properties.startTimestamp;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return new Date(this.getEndTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.properties.endTimestamp;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return new Date(this.getMinTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return new Date(this.getMaxTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.properties.minTimestamp;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.properties.maxTimestamp;\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  async setMinTime(time) {\n    this.properties.minTimestamp = new Date(time).getTime();\n    await this.computeMinMax();\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  async setMaxTime(time) {\n    this.properties.maxTimestamp = new Date(time).getTime();\n    await this.computeMinMax();\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  async setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n    await this.computeMinMax();\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  async setEndTimestamp(timestamp) {\n    this.properties.endTimestamp = timestamp;\n    this.computeMinMax();\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  async setStartTime(time) {\n    await this.setStartTimestamp(new Date(time).getTime());\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  async setEndTime(time) {\n    await this.setEndTimestamp(new Date(time).getTime());\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.properties.replaySpeed;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.properties.replaySpeed = replaySpeed;\n  }\n\n  setVersion(version) {\n    this.properties.version = version;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    await this.checkInit();\n    const topic = Constants[\"c\" /* DATA_SYNCHRONIZER_TOPIC */] + dataSynchronizer.getId();\n    this.dataSynchronizer = dataSynchronizer;\n    this.properties.version = this.dataSynchronizer.version();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'topics',\n      topics: {\n        data: topic,\n        time: this.getTimeTopicId(),\n        sync: dataSynchronizer.getTimeTopicId()\n      },\n      dsId: this.id\n    });\n  }\n\n  async removeDataSynchronizer() {\n    if (this.dataSourceWorker) {\n      this.dataSourceWorker.terminate();\n      this.dataSynchronizer = undefined;\n    }\n\n    this.init = undefined;\n    this.dataSynchronizer = undefined;\n    await this.checkInit();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    if (Object(Utils[\"n\" /* isDefined */])(this.init)) {\n      try {\n        return this.dataSourceWorker.postMessageWithAck({\n          message: 'disconnect',\n          dsId: this.id\n        });\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  async doConnect() {\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'connect',\n      startTime: this.getStartTimeAsIsoDate(),\n      version: this.version(),\n      dsId: this.id\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    const topics = {\n      data: this.getTopicId(),\n      time: this.getTimeTopicId()\n    };\n\n    if (this.dataSynchronizer) {\n      topics.sync = dataSynchronizer.getTimeTopicId();\n    }\n\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'topics',\n      topics: topics,\n      dsId: this.id\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n      datasourceBroadcastChannel.onmessage = async message => {\n        await this.handleTimeMessage(message);\n      };\n    });\n  }\n\n  async handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n\n  computeMinMax() {\n    // intersect end/start depending on the min/max\n    if (this.properties.startTimestamp < this.properties.minTimestamp) {\n      this.properties.startTimestamp = this.properties.minTimestamp;\n    }\n\n    if (this.properties.endTimestamp > this.properties.maxTimestamp) {\n      this.properties.endTimestamp = this.properties.maxTimestamp;\n    }\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   * @param {Number} version - version of data\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode(), version = this.version()) {\n    await this.checkInit();\n\n    if (version !== this.version()) {\n      // update version if come in from other input\n      this.properties.version = version;\n    } // compute intersection\n\n\n    this.properties.startTimestamp = new Date(startTime).getTime();\n    this.properties.endTimestamp = new Date(endTime).getTime();\n    this.computeMinMax();\n    return this.updateProperties({\n      startTime: this.getStartTimeAsIsoDate(),\n      endTime: this.getEndTimeAsIsoDate(),\n      replaySpeed: replaySpeed,\n      reconnect: reconnect,\n      mode: mode,\n      version: version\n    });\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_replay_datasource = (TimeSeries_replay_datasource_TimeSeriesReplayDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_datasource_TimeSeriesDatasource {\n  constructor(name, properties) {\n    const id = Object(Utils[\"q\" /* randomUUID */])();\n    this.timeSeriesRealtimeDataSource = new TimeSeries_realtime_datasource(name, {\n      id: id,\n      ...properties\n    });\n    this.timeSeriesReplayDataSource = new TimeSeries_replay_datasource(name, {\n      id: id,\n      ...properties\n    });\n    this.setMode(properties.mode);\n  }\n\n  async setMode(mode) {\n    if (this.timeSeriesDataSource) {\n      await this.timeSeriesDataSource.disconnect();\n    }\n\n    if (!this.timeSeriesDataSource || mode !== this.timeSeriesDataSource.getMode()) {\n      if (mode === Mode[\"a\" /* Mode */].REAL_TIME) {\n        this.timeSeriesDataSource = this.timeSeriesRealtimeDataSource;\n      } else {\n        this.timeSeriesDataSource = this.timeSeriesReplayDataSource;\n      } // bind properties\n\n\n      this.properties = this.timeSeriesDataSource.properties;\n      this.id = this.timeSeriesDataSource.id;\n      this.name = this.timeSeriesDataSource.name;\n      this.properties.mode = mode;\n    }\n  }\n\n  getTimeTopicId() {\n    return this.timeSeriesDataSource.getTimeTopicId();\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.timeSeriesDataSource.getMode();\n  }\n\n  setVersion(version) {\n    this.timeSeriesDataSource.setVersion(version);\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getStartTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getStartTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getEndTimeAsIsoDate();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getEndTimeAsTimestamp();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getMinTimeAsIsoDate();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getMaxTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {\n    this.timeSeriesDataSource.setMinTime(time);\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {\n    this.timeSeriesDataSource.setMaxTime(time);\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {\n    this.timeSeriesDataSource.setStartTimestamp(timestamp);\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {\n    this.timeSeriesDataSource.setEndTimestamp(timestamp);\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTime(time) {\n    this.timeSeriesDataSource.setStartTime(time);\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTime(time) {\n    this.timeSeriesDataSource.setEndTime(time);\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.timeSeriesDataSource.getReplaySpeed();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.timeSeriesDataSource.setReplaySpeed(replaySpeed);\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    return this.timeSeriesDataSource.setDataSynchronizer(dataSynchronizer);\n  }\n\n  async removeDataSynchronizer() {\n    return this.timeSeriesDataSource.removeDataSynchronizer();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    return this.timeSeriesDataSource.disconnect();\n  }\n\n  async doConnect() {\n    return this.timeSeriesDataSource.doConnect();\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    return this.timeSeriesDataSource.initDataSource(properties);\n  }\n\n  version() {\n    return this.timeSeriesDataSource.version();\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   * @param {Number} version - version of data\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode(), version = this.version()) {\n    return this.timeSeriesDataSource.setTimeRange(startTime, endTime, replaySpeed, reconnect, mode, version);\n  }\n  /***********************************/\n\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.timeSeriesDataSource.getId();\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.timeSeriesDataSource.getName();\n  }\n\n  terminate() {\n    this.timeSeriesDataSource.terminate();\n  }\n\n  getTopicId() {\n    return this.timeSeriesDataSource.getTopicId();\n  }\n\n  subscribe(fn, eventTypes) {\n    this.timeSeriesDataSource.subscribe(fn, eventTypes);\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    return this.timeSeriesDataSource.updateProperties(properties);\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    return this.timeSeriesDataSource.connect();\n  }\n\n  async checkInit() {\n    return this.timeSeriesDataSource.checkInit();\n  }\n\n  async isConnected() {\n    return this.timeSeriesDataSource.isConnected();\n  }\n\n  reset() {\n    this.timeSeriesDataSource.reset();\n  }\n\n  onTimeChanged(min, max, start, end) {}\n\n}\n\n/* harmony default export */ var TimeSeries_datasource = (TimeSeries_datasource_TimeSeriesDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/sos/SosGetResult.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_datasource_SosGetResult extends TimeSeries_datasource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}, 'http', 'ws', 'mqtt', 'file', 'topic'\n   * @param {String} properties.endpointUrl the endpoint url, this property is ignored in case of using 'mqtt' protocol, the properties.mqttOpts.endpointUrl will be used instead\n   * @param {String} properties.collection the collection, /procedures, /fois, /observations, /tasks, /datastreams/4778/obs\n   * @param {Boolean} properties.tls - defines if use secure TLS connection\n   * @param {Number} [properties.responseFormat=application/om+json] the response format (e.g application/om+json)\n   * @param {String[]} [properties.prefetchBatchSize=1000000] Number of elements to prefetch at a time\n   * @param {String[]} [properties.prefetchBatchDuration=10000] Duration before prefetching the next batch. N.b the next batch will be prefetched at 80% of this duration\n   */\n  constructor(name, properties) {\n    super(name, {\n      protocol: 'ws',\n      // default for streaming\n      service: \"SOS\",\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      reconnectRetry: 10,\n      tls: false,\n      type: 'SosGetResult',\n      mode: Mode[\"a\" /* Mode */].REAL_TIME,\n      prefetchBatchSize: 250,\n      prefetchBatchDuration: 5000,\n      ...properties\n    });\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_datasource = __webpack_exports__[\"a\"] = (SosGetResult_datasource_SosGetResult);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n")},163:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nconst initialStates = {};\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n   * Create the PointMarker\n   * @param {Object} properties\n   * @param {Number[]} properties.location - [x,y,z]\n   * @param {Number} [properties.orientation=0] -\n   * @param {String} properties.icon -\n   * @param {Number} [properties.iconScale=1] - the icon scale size\n   * @param {String} [properties.iconColor="#000000"] - the icon color\n   * @param {Number[]} [properties.iconAnchor=[16,16]] -\n   * @param {Number[]} [properties.iconSize=[16,16]] -\n   * @param {Number} [properties.iconOpacity=0.75] - icon opacity\n   * @param {String} [properties.label=""] - the label to display\n   * @param {String} [properties.labelColor="#000000"] - color\n   * @param {String} [properties.labelOutlineColor=undefined] - color\n   * @param {String} [properties.labelBackgroundColor=undefined] -  color\n   * @param {Number} [properties.labelSize=16] -\n   * @param {Number} [properties.labelScale=1.0] - label scale\n   * @param {Number[]} [properties.labelOffset=[0,0]] -\n   * @param {Number} [properties.zIndex=0] - z-ordering of markers\n   * @param {Number} [properties.allowBillboardRotation=true] - allow billboard rotation\n   * @param {Function} [properties.getLocation] -\n   * @param {Function} [properties.getDescription] -\n   * @param {Function} [properties.getOrientation] -\n   * @param {Function} [properties.getIcon] -\n   * @param {Function} [properties.getIconColor] -\n   * @param {Function} [properties.getIconScale] -\n   * @param {Function} [properties.getLabel] -\n   * @param {Function} [properties.getLabelColor] -\n   * @param {Function} [properties.getLabelSize] -\n   * @param {Function} [properties.getZindex] - z-ordering of markers\n   * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   * @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n   * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      markerId: () => this.getId(),\n      location: null,\n      orientation: {\n        heading: 0\n      },\n      icon: null,\n      iconAnchor: [16, 16],\n      iconSize: [16, 16],\n      iconScale: 1.0,\n      iconColor: undefined,\n      iconOpacity: 0.75,\n      label: null,\n      labelColor: undefined,\n      labelOutlineColor: undefined,\n      labelBackgroundColor: undefined,\n      labelSize: 16,\n      labelScale: 1.0,\n      labelOffset: [0, 0],\n      zoomLevel: 15,\n      defaultToTerrainElevation: false,\n      zIndex: 0,\n      allowBillboardRotation: true,\n      options: {}\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.defaultToTerrainElevation)) {\n      props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.location, "location");\n      props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.orientation, "orientation");\n      props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.icon, "icon");\n      props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.iconScale, "iconScale");\n      props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconColor, "iconColor");\n      props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconOpacity)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconOpacity, "iconOpacity");\n      props.iconOpacity = properties.iconOpacity;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.label, "label");\n      props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelColor, "labelColor");\n      props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOutlineColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelOutlineColor, "labelOutlineColor");\n      props.labelOutlineColor = properties.labelOutlineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelBackgroundColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelBackgroundColor, "labelBackgroundColor");\n      props.labelBackgroundColor = properties.labelBackgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelSize, "labelSize");\n      props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelScale, "labelScale");\n      props.labelScale = properties.labelScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.zoomLevel, "zoomLevel");\n      props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "e"])(properties.zIndex, "zIndex");\n      props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.allowBillboardRotation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertBoolean */ "b"])(properties.allowBillboardRotation, "allowBillboardRotation");\n      props.allowBillboardRotation = properties.allowBillboardRotation;\n    }\n\n    this.definedId(\'markerId\', props);\n\n    if (this.checkFn("getLocation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'location\', await this.getFunc(\'getLocation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'orientation\', await this.getFunc(\'getOrientation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'icon\', await this.getFunc(\'getIcon\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconColor\', await this.getFunc(\'getIconColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconScale\', await this.getFunc(\'getIconScale\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'label\', await this.getFunc(\'getLabel\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelColor\', await this.getFunc(\'getLabelColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelSize\', await this.getFunc(\'getLabelSize\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'zIndex\', await this.getFunc(\'getZindex\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///163\n')},164:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(184);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(165);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(193);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(25);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(wnumb__WEBPACK_IMPORTED_MODULE_5__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * @extends View\n * @example\n *\n * import RangeSliderView from \'ext/view/RangeSliderView.js\';\n *\n * let rangeSlider = new RangeSliderView("rangeSlider",{\n    dataSourceId: dataSource.id,\n    startTime: "2015-12-19T21:04:30Z",\n    endTime: "2015-12-19T21:09:19Z"\n});\n */\n\nclass RangeSliderViewReplay extends _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create the discoveryView\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Number} properties.startTime - The start time (lower handle) as ISO date\n   * @param {Number} properties.endTime - The end time (upper handle) as ISO date\n   * @param {Number} properties.minTimeRange - The min range time as ISO date\n   * @param {Number} properties.maxTimeRange - The max range as ISO date\n   * @param {String} properties.dataSource - The dataSourceObject\n   * @param {Number} [properties.debounce=0] - Debounce time after updating the slider\n   * @param {Boolean} properties.disabled - disabled the range slider\n   * @param {Object} properties.dataSynchronizer - a data synchronizer to get current data time for this set of datasources\n   */\n  constructor(properties) {\n    super({ ...properties,\n      supportedLayers: [\'data\']\n    });\n    this.slider = document.createElement("div");\n    this.slider.setAttribute("class", "core-rangeslider-slider");\n    document.getElementById(this.divId).appendChild(this.slider);\n    let startTimestamp = new Date().getTime();\n    let endTimestamp = new Date("2055-01-01T00:00:00Z").getTime(); //01/01/2055\n\n    let minTimeRangeTimestamp = startTimestamp;\n    let maxTimeRangeTimestamp = endTimestamp;\n    this.update = false;\n    this.dataSourceObject = null;\n    this.debounce = 0;\n    this.options = {};\n    this.sliding = false;\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties)) {\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.startTime)) {\n        startTimestamp = new Date(properties.startTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.endTime)) {\n        endTimestamp = new Date(properties.endTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.minTimeRange)) {\n        minTimeRangeTimestamp = new Date(properties.minTimeRange).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.maxTimeRange)) {\n        maxTimeRangeTimestamp = new Date(properties.maxTimeRange).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.dataSynchronizer)) {\n        this.dataSourceObject = properties.dataSynchronizer;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.dataSource)) {\n        this.dataSourceObject = properties.dataSource;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.debounce)) {\n        this.debounce = parseInt(properties.debounce);\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.options)) {\n        this.options = properties.options;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.disabled)) {\n        this.slider.setAttribute(\'disabled\', properties.disabled);\n      }\n    }\n\n    const options = {\n      start: [startTimestamp, endTimestamp]\n      /*,timestamp("2015-02-16T08:09:00Z")]*/\n      ,\n      range: {\n        min: minTimeRangeTimestamp,\n        max: maxTimeRangeTimestamp\n      },\n      //step:  1000* 60* 60,\n      format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n        decimals: 0\n      }),\n      behaviour: \'drag\',\n      connect: true,\n      animate: false,\n      pips: {\n        mode: \'positions\',\n        values: [5, 25, 50, 75],\n        density: 1,\n        //stepped: true,\n        format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n          edit: function (value) {\n            return new Date(parseInt(value)).toISOString().replace(".000Z", "Z").split("T")[1].split("Z")[0].split(".")[0];\n          }\n        })\n      },\n      ...this.options\n    }; // for above listeners\n\n    this.maxTimeRangeTimestamp = maxTimeRangeTimestamp;\n    nouislider__WEBPACK_IMPORTED_MODULE_3__["create"](this.slider, options);\n    this.createEvents();\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.dataSourceObject)) {\n      // listen for BC\n      const bc = new BroadcastChannel(this.dataSourceObject.getTimeTopicId());\n\n      bc.onmessage = message => {\n        if (!this.update) {\n          this.slider.noUiSlider.set([message.data.timestamp]);\n          this.onChange(message.data.timestamp, parseInt(this.slider.noUiSlider.get()[1]), \'data\');\n        }\n      };\n\n      this.bc = bc;\n    }\n  }\n\n  createActivateButton() {\n    let activateButtonDiv = document.createElement("div");\n    let aTagActivateButton = document.createElement("a");\n    activateButtonDiv.appendChild(aTagActivateButton);\n    activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n    let self = this;\n    activateButtonDiv.addEventListener("click", function (event) {\n      if (activateButtonDiv.className.indexOf("core-rangeslider-control-select") > -1) {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n        self.deactivate();\n      } else {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control-select");\n        self.activate();\n      }\n    });\n    document.getElementById(this.divId).appendChild(activateButtonDiv);\n  }\n\n  createEvents() {\n    const that = this; //noUi-handle noUi-handle-lower\n    // start->update->end\n\n    this.slider.noUiSlider.on("start", function (values, handle) {\n      that.update = true;\n      that.sliding = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.maxTimeRangeTimestamp);\n      that.onChange(st, end, \'start\');\n    });\n    this.slider.noUiSlider.on("slide", function (values, handle) {\n      that.sliding = true;\n      that.update = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.maxTimeRangeTimestamp);\n      that.onChange(st, end, \'slide\');\n    });\n    this.slider.noUiSlider.on("end", function (values, handle) {\n      if (that.sliding) {\n        that.sliding = false;\n        const st = parseInt(values[0]);\n        const end = parseInt(values[1]) || parseInt(that.maxTimeRangeTimestamp);\n        that.onChange(st, end, \'end\'); // that.update = false;\n\n        setTimeout(() => that.update = false, that.debounce);\n      }\n    });\n  }\n  /**\n   * Deactivate the timeline bar\n   */\n\n\n  deactivate() {\n    this.slider.setAttribute(\'disabled\', true);\n  }\n  /**\n   * Activate the timeline nar\n   */\n\n\n  activate() {\n    this.slider.removeAttribute(\'disabled\');\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      if (!this.update) {\n        this.slider.noUiSlider.set([values[i].timestamp]);\n      }\n    }\n  }\n\n  setStartTime(timestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([timestamp]);\n    }\n  }\n\n  setTime(startTimestamp, endTimestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([startTimestamp, endTimestamp]);\n    }\n  }\n\n  setTimeRange(minRangeTimestamp, maxRangeTimestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.updateOptions({\n        range: {\n          min: minRangeTimestamp,\n          max: maxRangeTimestamp\n        }\n      });\n    }\n  }\n\n  onChange(startTime, endTime, type) {\n    if (type === \'end\') {\n      this.dataSourceObject.setTimeRange(new Date(startTime).toISOString(), new Date(endTime).toISOString(), this.dataSourceObject.properties.replaySpeed, true);\n    }\n  }\n\n  destroy() {\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider) && Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider.noUiSlider)) {\n      this.slider.noUiSlider.destroy();\n    }\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.bc)) {\n      this.bc.close();\n    }\n  }\n\n  disable() {\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider)) {\n      this.slider.setAttribute(\'disabled\', true);\n    }\n  }\n\n  enable() {\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider)) {\n      this.slider.removeAttribute(\'disabled\');\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (RangeSliderViewReplay);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///164\n')},166:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n */\n\nclass CurveLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create the CurveLayer\n   * @param {Object} properties -\n   * @param {String} [properties.xLabel=""] -\n   * @param {String} [properties.yLabel=""] -\n   * @param {String} [properties.lineColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.backgroundColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.fill=false] -\n   * @param {Number} [properties.maxValues=10] - Defines the max values hold by the layer\n   * @param {Number} [properties.stroke=1] -\n   * @param {Number} [properties.x=0] -\n   * @param {Number} [properties.y=[]] -\n   * @param {Number} [properties.maxValues=10] - The maximum values to display\n   * @param {Function} properties.getStroke -\n   * @param {Function} properties.getLineColor -\n   * @param {Function} properties.getValues -\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'curve\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      xLabel: "",\n      yLabel: "",\n      lineColor: "#399ca5",\n      backgroundColor: "#399ca5",\n      fill: false,\n      stroke: 1,\n      curveId: Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ "q"])(),\n      x: 0,\n      y: 0,\n      maxValues: 10\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.yLabel)) {\n      props.yLabel = properties.yLabel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.stroke)) {\n      props.stroke = properties.stroke;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.maxValues)) {\n      props.maxValues = properties.maxValues;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.lineColor)) {\n      props.lineColor = properties.lineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.backgroundColor)) {\n      props.backgroundColor = properties.backgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.fill)) {\n      props.fill = properties.fill;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.x)) {\n      props.x = properties.x;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.y)) {\n      props.y = properties.y;\n    }\n\n    this.definedId(\'curveId\', props);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getStroke)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'stroke\', await this.getFunc(\'getStroke\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getStroke\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getLineColor)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'lineColor\', await this.getFunc(\'getLineColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getBackgroundColor)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'backgroundColor\', await this.getFunc(\'getBackgroundColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getValues)) {\n      let fn = async (rec, timestamp, options) => {\n        const value = await this.getFunc(\'getValues\')(rec, timestamp, options);\n        this.updateProperty(\'x\', value.x);\n        this.updateProperty(\'y\', value.y);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getValues\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (CurveLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///166\n')},167:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);\n/* harmony import */ var chartjs_adapter_moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(199);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * @extends View\n */\n\nclass ChartJsView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {String} [properties.type='line'] - The  [type]{@link https://www.chartjs.org/docs/3.5.1/} of the graph\n   * @param {Object} [properties.options={}] - Properties which can override the default framework ones\n   * @param {Object} [properties.datasetOptions={}] - Properties which can override the default framework ones (as defined [dataset]{@link https://www.chartjs.org/docs/latest/configuration/#dataset-configuration}\n   * @param {boolean} [properties.override=false] - Defines if options (as defined [Chart options]{@link https://www.chartjs.org/docs/3.5.1/general/options.html}) are completely overridden or merge only. Default is merge\n   @param {boolean} [properties.refreshRate=1000] - Defines the refresh data rate (in millis)\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: ['curve'],\n      ...properties\n    });\n    chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"].register(...chart_js__WEBPACK_IMPORTED_MODULE_2__[/* registerables */ \"c\"]); // #region snippet_chartjsview_default_chartprops\n\n    this.datasetOptions = {};\n    let type = 'line';\n    this.options = {\n      maintainAspectRatio: false,\n      normalized: true,\n      scales: {\n        y: {\n          title: {\n            display: true,\n            text: ''\n          }\n        },\n        x: {\n          type: 'time',\n          time: {\n            unit: 'second'\n          }\n        }\n      },\n      plugins: {},\n      datasets: {},\n      interaction: {},\n      animations: {},\n      layout: {},\n      elements: {}\n    };\n    this.refreshRate = 1000; // #endregion snippet_chartjsview_default_chartprops\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"n\"])(properties)) {\n      if (properties.hasOwnProperty('options')) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* merge */ \"p\"])(properties.options, this.options);\n      }\n\n      if (properties.hasOwnProperty('type')) {\n        type = properties.type;\n      }\n\n      if (properties.hasOwnProperty('datasetOptions')) {\n        this.datasetOptions = properties.datasetOptions;\n      }\n\n      if (properties.hasOwnProperty('refreshRate')) {\n        this.refreshRate = properties.refreshRate;\n      }\n    }\n\n    this.type = type;\n    let domNode = document.getElementById(this.divId);\n    this.id = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ \"q\"])();\n    let ctx = document.createElement(\"canvas\");\n    ctx.setAttribute(\"id\", this.id);\n    domNode.appendChild(ctx);\n    this.ctx = ctx;\n    this.resetting = false;\n    this.chart = new chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"](this.ctx, {\n      type: type,\n      options: this.options\n    });\n    this.datasets = {};\n    this.buffer = {};\n    this.lastTimestamp = -1;\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === 'curve') {\n      this.updateCurve(data.values);\n    }\n  }\n\n  parseDate(intTimeStamp) {\n    const date = new Date(intTimeStamp);\n    return this.withLeadingZeros(date.getUTCHours()) + \":\" + this.withLeadingZeros(date.getUTCMinutes()) + \":\" + this.withLeadingZeros(date.getUTCSeconds());\n  }\n\n  withLeadingZeros(dt) {\n    return (dt < 10 ? '0' : '') + dt;\n  }\n  /**\n   * Updates the curve associated to the layer.\n   * @param {Curve.props[]} props - The layer properties allowing the update of the curve\n   */\n\n\n  async updateCurve(props) {\n    if (this.resetting) {\n      return;\n    }\n\n    const curveId = props[0].curveId;\n    this.chart.options.scales.y.title.text = props[0].yLabel;\n    let currentDataset = this.datasets[curveId];\n    const values = props.map(item => ({\n      'x': item.x,\n      'y': item.y\n    }));\n    let lineColor = this.getColor(props[0].lineColor);\n    let bgColor = this.getColor(props[0].backgroundColor);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"n\"])(currentDataset)) {\n      currentDataset = { ...this.datasetOptions,\n        label: props[0].name,\n        fill: props[0].fill,\n        backgroundColor: bgColor,\n        borderColor: lineColor,\n        borderWidth: props[0].stroke,\n        data: values\n      };\n      currentDataset = { ...this.datasetsProps,\n        ...currentDataset\n      };\n      this.datasets[curveId] = currentDataset;\n      this.chart.data.datasets.push(currentDataset);\n      this.buffer[curveId] = [];\n    } else {\n      this.datasets[curveId].backgroundColor = bgColor;\n      this.datasets[curveId].borderColor = lineColor;\n    }\n\n    this.buffer[curveId] = this.buffer[curveId].concat(values);\n\n    if (this.lastTimestamp === -1 || Date.now() - this.lastTimestamp >= this.refreshRate) {\n      for (let bufferKey in this.buffer) {\n        const currentBuffer = this.buffer[bufferKey];\n        const nbToShift = currentBuffer.length - props[0].maxValues;\n\n        if (nbToShift > 0) {\n          // double buffering\n          this.buffer[bufferKey] = currentBuffer.slice(nbToShift);\n        }\n\n        this.datasets[bufferKey].data = this.buffer[bufferKey];\n      }\n\n      this.lastTimestamp = Date.now();\n      this.chart.update('none');\n    }\n  }\n\n  getColor(value) {\n    let v = value;\n\n    if (v.length > 0 && v.charAt(0) === '#') {\n      if (value.length === 9) {\n        const rgba = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* hex2rgba */ \"m\"])(value);\n        v = 'rgba(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ',' + rgba[3] + ')';\n      } else {\n        const rgb = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* hex2rgb */ \"l\"])(value);\n        v = 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ', 1.0)';\n      }\n    }\n\n    return v;\n  }\n\n  reset() {\n    this.resetting = true;\n    super.reset();\n    this.datasets = {};\n    this.chart.data.datasets = [];\n    this.buffer = {}; //\n\n    this.lastTimestamp = -1;\n    this.resetting = false;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ChartJsView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///167\n")},168:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\n import MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id,\n         getFrameData: (rec) => rec.videoFrame,\n         getTimestamp: (rec) => rec.timestamp\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'videoData\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timestamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.showTime) && properties.showTime) {\n      this.timestamp = document.createElement("div");\n      this.timestamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timestamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === \'videoData\') {\n      const values = data.values;\n\n      for (let i = 0; i < values.length; i++) {\n        this.updateVideo(values[i]);\n      }\n    }\n  }\n\n  updateVideo(props) {\n    let imgBlob = new Blob([props.frameData.data]);\n    let url = window.URL.createObjectURL(imgBlob);\n    let oldBlobURL = this.imgTag.src;\n    this.imgTag.src = url;\n\n    if (this.timestamp !== null) {\n      this.timestamp.innerHTML = new Date(props.timestamp).toISOString();\n    }\n\n    window.URL.revokeObjectURL(oldBlobURL);\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n  async getCanvas() {\n    return this.canvas;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n')},169:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "e6495c323b1bf76fb0d0.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlci9EYXRhU291cmNlLndvcmtlci5qcz8zYTVjIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLE9BQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImU2NDk1YzMyM2IxYmY3NmZiMGQwLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///169\n')},170:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "3ecb6f3ea45120eed47f.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9yZXBsYXkvRGF0YVN5bmNocm9uaXplci5yZXBsYXkud29ya2VyLmpzPzI2ZmQiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7RUFDMUIsT0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIxNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiM2VjYjZmM2VhNDUxMjBlZWQ0N2Yud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///170\n')},171:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "575b255b66c7a58048c1.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9ydC9EYXRhU3luY2hyb25pemVyLnJlYWx0aW1lLndvcmtlci5qcz8yZWE1Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLE9BQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjU3NWIyNTViNjZjN2E1ODA0OGMxLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///171\n')},172:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(3);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/replay/DataSynchronizer.replay.worker.js\nvar DataSynchronizer_replay_worker = __webpack_require__(170);\nvar DataSynchronizer_replay_worker_default = /*#__PURE__*/__webpack_require__.n(DataSynchronizer_replay_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nvar EventType = __webpack_require__(7);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/worker/WorkerExt.js\nvar WorkerExt = __webpack_require__(11);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/replay/DataSynchronizer.replay.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n\nclass DataSynchronizer_replay_DataSynchronizerReplay {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.minTime - min range time as ISO date\n   * @param {String} properties.maxTime - max range time as ISO date\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   * @param {DataSynchronizer} timeSync - dataSynchronizer\n   */\n  constructor(properties, timeSync) {\n    this.bufferingTime = 1000; // default\n\n    this.id = properties.id || Object(Utils["q" /* randomUUID */])();\n    this.dataSources = properties.dataSources || [];\n    this.replaySpeed = properties.replaySpeed || 1;\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250;\n    this.initialized = false;\n    this.timeSync = timeSync;\n    this.properties = {};\n    this.properties.replaySpeed = this.replaySpeed;\n    this.properties.startTimestamp = undefined;\n    this.properties.endTimestamp = undefined;\n    this.properties.minTimestamp = undefined;\n    this.properties.maxTimestamp = undefined;\n    this.properties.version = 0;\n\n    if (Object(Utils["n" /* isDefined */])(properties)) {\n      if (Object(Utils["n" /* isDefined */])(properties.minTime)) {\n        this.minTimestamp = new Date(properties.minTime).getTime();\n      }\n\n      if (Object(Utils["n" /* isDefined */])(properties.maxTime)) {\n        this.maxTimestamp = new Date(properties.maxTime).getTime();\n      }\n    }\n\n    this.computeMinMax();\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getTopicId() {\n    return Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getTimeTopicId() {\n    return Constants["d" /* TIME_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getDataSources() {\n    return this.dataSources;\n  }\n\n  computeMinMax() {\n    if (this.dataSources.length > 0) {\n      let minTimestamp = Number.MAX_VALUE,\n          maxTimestamp = Number.MIN_VALUE; // default min/max will be adjusted on the most min/max DataSource\n\n      for (let ds of this.dataSources) {\n        // compute min/max range of dataSynchronizer\n        let dsMinTimestamp = ds.getMinTimeAsTimestamp();\n        let dsMaxTimestamp = ds.getMaxTimeAsTimestamp();\n\n        if (dsMinTimestamp < minTimestamp) {\n          minTimestamp = dsMinTimestamp;\n        }\n\n        if (dsMaxTimestamp > maxTimestamp) {\n          maxTimestamp = dsMaxTimestamp;\n        }\n      } // check if a default Min/Max has been defined into DataSynchronizer forcing intersection with current computed ones\n\n\n      if (Object(Utils["n" /* isDefined */])(this.minTimestamp) && this.minTimestamp > minTimestamp) {\n        // intersect and takes the min of dataSynchronizer\n        minTimestamp = this.minTimestamp;\n      }\n\n      if (Object(Utils["n" /* isDefined */])(this.maxTimestamp) && this.maxTimestamp > maxTimestamp) {\n        // intersect and takes the min of dataSynchronizer\n        maxTimestamp = this.maxTimestamp;\n      }\n\n      this.properties.minTimestamp = minTimestamp;\n      this.properties.maxTimestamp = maxTimestamp;\n    } else {\n      const st = new Date(\'1970-01-01T00:00:00Z\').getTime();\n      const end = new Date(\'2055-01-01T00:00:00Z\').getTime();\n      this.properties.minTimestamp = this.properties.startTimestamp = st;\n      this.properties.maxTimestamp = this.properties.endTimestamp = end;\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    if (this.properties.startTimestamp) {\n      return new Date(this.properties.startTimestamp).toISOString();\n    } else {\n      return this.getMinTimeAsIsoDate();\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.properties.startTimestamp;\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    if (this.properties.endTimestamp) {\n      return new Date(this.properties.endTimestamp).toISOString();\n    } else {\n      return this.getMaxTimeAsIsoDate();\n    }\n  }\n\n  getEndTimeAsTimestamp() {\n    return this.properties.endTimestamp;\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return new Date(this.properties.minTimestamp).toISOString();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.properties.minTimestamp;\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return new Date(this.properties.maxTimestamp).toISOString();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.properties.maxTimestamp;\n  }\n\n  async setStartTime(time, lazy = false) {\n    this.properties.startTimestamp = new Date(time).getTime();\n\n    if (!lazy) {\n      await this.updateAlgo();\n    }\n  }\n\n  async setEndTime(time, lazy = false) {\n    this.properties.endTimestamp = new Date(time).getTime();\n\n    if (!lazy) {\n      await this.updateAlgo();\n    }\n  }\n\n  async setMinTime(minTime, resetStartTime = false) {\n    this.minTimestamp = new Date(minTime).getTime();\n    this.computeMinMax();\n    this.timeChanged();\n  }\n\n  async setMaxTime(maxTime, resetStartTime = false) {\n    this.maxTimestamp = new Date(maxTime).getTime();\n    this.computeMinMax();\n    this.timeChanged();\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.replaySpeed;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  getMode() {\n    return Mode["a" /* Mode */].REPLAY;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    try {\n      const dataSourcesForWorker = [];\n\n      for (let dataSource of this.dataSources) {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        dataSourcesForWorker.push(dataSourceForWorker);\n      }\n\n      this.synchronizerWorker = new WorkerExt["a" /* default */](new DataSynchronizer_replay_worker_default.a());\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'init\',\n        dataSources: dataSourcesForWorker,\n        replaySpeed: this.replaySpeed,\n        timerResolution: this.timerResolution,\n        masterTimeRefreshRate: this.masterTimeRefreshRate,\n        startTimestamp: this.getStartTimeAsTimestamp(),\n        endTimestamp: this.getEndTimeAsTimestamp(),\n        mode: this.getMode(),\n        version: this.version(),\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }).then(() => {\n        this.initialized = true;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.getId(),\n      name: dataSource.getName(),\n      minTimestamp: dataSource.getMinTimeAsTimestamp(),\n      maxTimestamp: dataSource.getMaxTimeAsTimestamp()\n    }; // bind dataSource data onto dataSynchronizer data\n\n    try {\n      await dataSource.setDataSynchronizer(this.timeSync);\n      dataSource.properties.replaySpeed = this.replaySpeed;\n    } catch (ex) {\n      console.error("Cannot set the synchronizer to this DataSource", ex);\n      throw ex;\n    }\n\n    return obj;\n  }\n\n  timeChanged() {\n    this.onTimeChanged(this.getMinTimeAsTimestamp(), this.getMaxTimeAsTimestamp(), this.getStartTimeAsTimestamp(), this.getEndTimeAsTimestamp());\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    this.dataSources.push(dataSource);\n    this.computeMinMax();\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, add DataSource ${dataSource.id} as it`);\n      this.timeChanged();\n      this.onAddedDataSource(dataSource.id);\n    } else {\n      dataSource.setStartTime(this.getStartTimeAsIsoDate());\n      dataSource.setEndTime(this.getEndTimeAsIsoDate());\n      const dataSourceForWorker = await this.createDataSourceForWorker(dataSource); // add dataSource to synchronizer algorithm\n\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'add\',\n        dataSources: [dataSourceForWorker]\n      }).then(async () => {\n        if (await this.isConnected()) {\n          await dataSource.connect();\n        }\n\n        this.onAddedDataSource(dataSource.id);\n        this.timeChanged();\n      });\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n\n    if (this.dataSources.length === 0) {\n      await this.reset();\n    }\n\n    this.computeMinMax();\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, remove DataSource ${dataSource.id} as it`);\n      await dataSource.removeDataSynchronizer();\n      this.timeChanged();\n      this.onRemovedDataSource(dataSource.id);\n    } else {\n      await dataSource.disconnect();\n      await dataSource.removeDataSynchronizer();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'remove\',\n        dataSourceIds: [dataSource.getId()],\n        startTimestamp: this.getStartTimeAsTimestamp(),\n        endTimestamp: this.getEndTimeAsTimestamp()\n      }).then(() => {\n        this.timeChanged();\n        this.onRemovedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    if (this.synchronizerWorker) {\n      return this.synchronizerWorker.postMessageWithAck({\n        type: \'data\',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    if (this.dataSources.length === 0) {\n      return;\n    } else {\n      await this.checkInit();\n      const isConnected = await this.isConnected();\n\n      if (!isConnected) {\n        return this.doConnect();\n      }\n\n      return isConnected;\n    }\n  }\n\n  async checkInit() {\n    if (!Object(Utils["n" /* isDefined */])(this.init)) {\n      this.init = this.initDataSources();\n    }\n\n    return this.init;\n  }\n\n  checkStartEndTime() {\n    if (!this.properties.startTimestamp) {\n      this.properties.startTimestamp = this.properties.minTimestamp;\n    }\n\n    if (!this.properties.endTimestamp) {\n      this.properties.endTimestamp = this.properties.maxTimestamp;\n    }\n  }\n\n  async doConnect() {\n    this.checkStartEndTime();\n    await this.updateAlgo();\n\n    for (let dataSource of this.dataSources) {\n      await dataSource.setTimeRange(this.getStartTimeAsIsoDate(), this.getEndTimeAsIsoDate(), this.getReplaySpeed(), true);\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'connect\',\n      version: this.version()\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    await this.reset();\n    const promises = [];\n\n    for (let dataSource of this.dataSources) {\n      promises.push(dataSource.disconnect());\n    }\n\n    return Promise.all(promises);\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    this.replaySpeed = replaySpeed;\n    this.properties.replaySpeed = replaySpeed;\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'replay-speed\',\n      replaySpeed: replaySpeed\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false) {\n    await this.disconnect();\n    this.incVersion(); // update properties of DataSynchronizer\n\n    this.replaySpeed = replaySpeed;\n    await this.setStartTime(startTime, false);\n    await this.setEndTime(endTime, false);\n    const promises = []; // update properties of each DataSource\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.setTimeRange(this.getStartTimeAsIsoDate(), this.getEndTimeAsIsoDate(), this.getReplaySpeed(), false, this.getMode(), this.version()));\n    }\n\n    return Promise.all(promises);\n  }\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n  }\n\n  async updateAlgo() {\n    // synchronize startTimestamp of synchronizer to datasources\n    for (let dataSource of this.dataSources) {\n      dataSource.setStartTimestamp(this.getStartTimeAsTimestamp());\n      dataSource.setEndTimestamp(this.getEndTimeAsTimestamp());\n    } // re-compute new min/max of synchronizer\n\n\n    this.computeMinMax(); // provide new min/max of each dataSource to dataSynchronizer\n\n    const dataSourcesForWorker = [];\n\n    for (let dataSource of this.dataSources) {\n      const obj = {\n        bufferingTime: dataSource.properties.bufferingTime || 0,\n        timeOut: dataSource.properties.timeOut || 0,\n        id: dataSource.getId(),\n        name: dataSource.getName(),\n        minTimestamp: dataSource.getMinTimeAsTimestamp(),\n        maxTimestamp: dataSource.getMaxTimeAsTimestamp()\n      };\n      dataSourcesForWorker.push(obj);\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'time-range\',\n      mode: this.getMode(),\n      replaySpeed: this.getReplaySpeed(),\n      startTimestamp: this.getStartTimeAsTimestamp(),\n      endTimestamp: this.getEndTimeAsTimestamp(),\n      version: this.version(),\n      dataSources: dataSourcesForWorker\n    });\n  }\n\n  async updateProperties(properties) {\n    for (let ds of this.dataSources) {\n      ds.updateProperties(properties);\n    }\n  }\n\n  resetTimes() {\n    this.computeMinMax();\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    await this.checkInit();\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'reset\'\n    }).then(() => this.resetTimes());\n  }\n\n  async getCurrentTime() {\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'current-time\'\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    if (this.dataSources.length === 0) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'is-connected\'\n      }).then(message => message.data);\n    }\n  }\n\n  incVersion() {\n    this.properties.version++;\n  }\n\n  onTimeChanged(min, max, start, end) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSynchronizer_replay = (DataSynchronizer_replay_DataSynchronizerReplay);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/rt/DataSynchronizer.realtime.worker.js\nvar DataSynchronizer_realtime_worker = __webpack_require__(171);\nvar DataSynchronizer_realtime_worker_default = /*#__PURE__*/__webpack_require__.n(DataSynchronizer_realtime_worker);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/rt/DataSynchronizer.realtime.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass DataSynchronizer_realtime_DataSynchronizerRealtime {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   * @param {DataSynchronizer} timeSync - dataSynchronizer\n   */\n  constructor(properties, timeSync) {\n    this.bufferingTime = 1000; // default\n\n    this.id = properties.id || Object(Utils["q" /* randomUUID */])();\n    this.dataSources = properties.dataSources || [];\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250;\n    this.initialized = false;\n    this.timeSync = timeSync;\n    this.properties = {};\n    this.properties.version = 0;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getDataSources() {\n    return this.dataSources;\n  }\n\n  getTopicId() {\n    return Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getTimeTopicId() {\n    return Constants["d" /* TIME_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  getMode() {\n    return Mode["a" /* Mode */].REAL_TIME;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    try {\n      const dataSourcesForWorker = [];\n\n      for (let dataSource of this.dataSources) {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        dataSourcesForWorker.push(dataSourceForWorker);\n      }\n\n      this.synchronizerWorker = new WorkerExt["a" /* default */](new DataSynchronizer_realtime_worker_default.a());\n      this.synchronizerWorker.postMessageWithAck({\n        message: \'init\',\n        dataSources: dataSourcesForWorker,\n        timerResolution: this.timerResolution,\n        masterTimeRefreshRate: this.masterTimeRefreshRate,\n        mode: Mode["a" /* Mode */].REAL_TIME,\n        version: this.version(),\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }).then(() => {\n        this.initialized = true;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.id,\n      name: dataSource.name\n    }; // bind dataSource data onto dataSynchronizer data\n\n    try {\n      await dataSource.setDataSynchronizer(this.timeSync);\n    } catch (ex) {\n      console.error("Cannot set the synchronizer to this DataSource", ex);\n      throw ex;\n    }\n\n    return obj;\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    this.dataSources.push(dataSource);\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, add DataSource ${dataSource.id} as it`);\n    } else {\n      const dataSourceForWorker = await this.createDataSourceForWorker(dataSource); // add dataSource to synchronizer algorithm\n\n      this.synchronizerWorker.postMessageWithAck({\n        message: \'add\',\n        dataSources: [dataSourceForWorker]\n      }).then(() => {\n        this.onAddedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    await dataSource.removeDataSynchronizer();\n    this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n\n    if (this.dataSources.length === 0) {\n      await this.reset();\n    }\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, remove DataSource ${dataSource.id} as it`);\n    } else {\n      this.synchronizerWorker.postMessageWithAck({\n        message: \'remove\',\n        dataSourceIds: [dataSource.getId()]\n      }).then(() => {\n        this.onRemovedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    if (this.synchronizerWorker !== null) {\n      return this.synchronizerWorker.postMessageWithAck({\n        type: \'data\',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    return this.doConnect();\n  }\n\n  async checkInit() {\n    if (!Object(Utils["n" /* isDefined */])(this.init)) {\n      this.init = this.initDataSources();\n    }\n\n    return this.init;\n  }\n\n  async doConnect() {\n    for (let dataSource of this.dataSources) {\n      await dataSource.connect();\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'connect\',\n      version: this.version()\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    await this.reset();\n    const promises = [];\n\n    for (let dataSource of this.dataSources) {\n      promises.push(dataSource.disconnect());\n    }\n\n    return Promise.all(promises);\n  }\n\n  async updateProperties(properties) {\n    for (let ds of this.dataSources) {\n      ds.updateProperties(properties);\n    }\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    await this.checkInit();\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'reset\'\n    });\n  }\n\n  async getCurrentTime() {\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'current-time\'\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    if (this.dataSources.length === 0) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'is-connected\'\n      }).then(message => message.data);\n    }\n  }\n\n  setMinTime(minTime) {}\n\n  setMaxTime(maxTime) {}\n\n  incVersion() {\n    this.properties.version++;\n  }\n\n  onTimeChanged(start, min) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSynchronizer_realtime = (DataSynchronizer_realtime_DataSynchronizerRealtime);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass DataSynchronizer_DataSynchronizer {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.startTime - start time of the temporal run\n   * @param {String} properties.endTime - end time of the temporal run\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   */\n  constructor(properties) {\n    const id = properties.id || Object(Utils["q" /* randomUUID */])();\n    this.dataSynchronizerReplay = new DataSynchronizer_replay({ ...properties,\n      id: id + \'-replay\'\n    }, this);\n    this.dataSynchronizerRt = new DataSynchronizer_realtime({ ...properties,\n      id: id + \'-realtime\'\n    }, this);\n    this.broadcastChannels = [];\n    this.setMode(properties.mode || Mode["a" /* Mode */].REPLAY).then(() => {\n      this.dataSynchronizer.onTimeChanged = (min, max, start, end) => this.onTimeChanged(min, max, start, end);\n\n      this.dataSynchronizer.onAddedDataSource = dataSourceId => this.onAddedDataSource(dataSourceId);\n\n      this.dataSynchronizer.onRemovedDataSource = dataSourceId => this.onRemovedDataSource(dataSourceId);\n    });\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  async setMode(mode) {\n    if (this.dataSynchronizer) {\n      await this.dataSynchronizer.disconnect();\n    }\n\n    if (mode === Mode["a" /* Mode */].REPLAY) {\n      this.dataSynchronizer = this.dataSynchronizerReplay;\n    } else if (mode === Mode["a" /* Mode */].REAL_TIME) {\n      this.dataSynchronizer = this.dataSynchronizerRt;\n    }\n\n    this.id = this.dataSynchronizer.id;\n\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n    }\n\n    this.initEventSubscription();\n    this.broadcastChannels = [];\n\n    for (let ds of this.dataSynchronizer.getDataSources()) {\n      await ds.setMode(mode);\n    }\n\n    this.onChangedMode(mode);\n  }\n\n  initEventSubscription() {\n    this.eventSubscriptionMap = {}; // listen for Events to callback to subscriptions\n\n    this.broadcastChannels.push(new BroadcastChannel(this.getTopicId()).onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    });\n    this.broadcastChannels.push(new BroadcastChannel(this.getTimeTopicId()).onmessage = message => {\n      if (message.data.type === EventType["a" /* EventType */].MASTER_TIME) {\n        // this.properties.startTimestamp = message.data.timestamp; // save as last timestamp\n        this.dataSynchronizer.setStartTimestamp(message.data.timestamp);\n      }\n\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    });\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  }\n\n  getDataSources() {\n    return this.dataSynchronizer.getDataSources();\n  }\n\n  getTopicId() {\n    return this.dataSynchronizer.getTopicId();\n  }\n\n  getTimeTopicId() {\n    return this.dataSynchronizer.getTimeTopicId();\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return this.dataSynchronizer.getStartTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.dataSynchronizer.getStartTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.dataSynchronizer.getEndTimeAsIsoDate();\n  }\n\n  getEndTimeAsTimestamp() {\n    return this.dataSynchronizer.getEndTimeAsTimestamp();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return this.dataSynchronizer.getMinTimeAsIsoDate();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.dataSynchronizer.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return this.dataSynchronizer.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.dataSynchronizer.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.dataSynchronizer.getReplaySpeed();\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    return this.dataSynchronizer.terminate();\n  } // subscribe(fn, eventTypes) {\n  //     this.dataSynchronizerRt.subscribe(fn,eventTypes);\n  //     this.dataSynchronizerReplay.subscribe(fn,eventTypes);\n  // }\n\n\n  getMode() {\n    return this.dataSynchronizer.getMode();\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    return this.dataSynchronizer.initDataSources();\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    await this.dataSynchronizerRt.addDataSource(dataSource);\n    return this.dataSynchronizerReplay.addDataSource(dataSource);\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    await this.dataSynchronizerRt.removeDataSource(dataSource);\n    return this.dataSynchronizerReplay.removeDataSource(dataSource);\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    return this.dataSynchronizer.push(dataSourceId, data);\n  }\n\n  version() {\n    return this.dataSynchronizer.version();\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    await this.dataSynchronizer.connect();\n  }\n\n  async checkInit() {\n    return this.dataSynchronizer.checkInit();\n  }\n\n  async doConnect() {\n    return this.dataSynchronizer.doConnect();\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    return this.dataSynchronizer.disconnect();\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    return this.dataSynchronizer.setReplaySpeed(replaySpeed);\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false) {\n    return this.dataSynchronizer.setTimeRange(startTime, endTime, replaySpeed, reconnect);\n  }\n\n  async updateProperties(properties) {\n    return this.dataSynchronizer.updateProperties(properties);\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    return this.dataSynchronizer.reset();\n  }\n\n  async getCurrentTime() {\n    return this.dataSynchronizer.getCurrentTime();\n  }\n\n  setMinTime(minTime) {\n    this.dataSynchronizer.setMinTime(minTime);\n  }\n\n  setMaxTime(maxTime) {\n    this.dataSynchronizer.setMaxTime(maxTime);\n  }\n  /**\n  * Connect the dataSource then the protocol will be opened as well.\n  */\n\n\n  async isConnected() {\n    return this.dataSynchronizer.isConnected();\n  }\n\n  minMaxChanged(resetStartTimestamp = false) {\n    if (resetStartTimestamp) {\n      this.dataSynchronizerReplay.properties.startTimestamp = undefined;\n      this.dataSynchronizerReplay.properties.endTimestamp = undefined;\n    }\n\n    this.dataSynchronizerReplay.computeMinMax();\n    this.dataSynchronizerReplay.timeChanged();\n  }\n\n  onTimeChanged(start, min) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n  onChangedMode(mode) {}\n\n}\n\n/* harmony default export */ var timesync_DataSynchronizer = __webpack_exports__["a"] = (DataSynchronizer_DataSynchronizer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9yZXBsYXkvRGF0YVN5bmNocm9uaXplci5yZXBsYXkuanM/ZDhiZiIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9ydC9EYXRhU3luY2hyb25pemVyLnJlYWx0aW1lLmpzPzQwY2YiLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL2NvcmUvdGltZXN5bmMvRGF0YVN5bmNocm9uaXplci5qcz82MTRkIl0sIm5hbWVzIjpbIkRhdGFTeW5jaHJvbml6ZXJSZXBsYXkiLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJ0aW1lU3luYyIsImJ1ZmZlcmluZ1RpbWUiLCJpZCIsInJhbmRvbVVVSUQiLCJkYXRhU291cmNlcyIsInJlcGxheVNwZWVkIiwidGltZXJSZXNvbHV0aW9uIiwibWFzdGVyVGltZVJlZnJlc2hSYXRlIiwiaW5pdGlhbGl6ZWQiLCJzdGFydFRpbWVzdGFtcCIsInVuZGVmaW5lZCIsImVuZFRpbWVzdGFtcCIsIm1pblRpbWVzdGFtcCIsIm1heFRpbWVzdGFtcCIsInZlcnNpb24iLCJpc0RlZmluZWQiLCJtaW5UaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJtYXhUaW1lIiwiY29tcHV0ZU1pbk1heCIsImdldElkIiwiZ2V0VG9waWNJZCIsIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiZ2V0VGltZVRvcGljSWQiLCJUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyIsImdldERhdGFTb3VyY2VzIiwibGVuZ3RoIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiTUlOX1ZBTFVFIiwiZHMiLCJkc01pblRpbWVzdGFtcCIsImdldE1pblRpbWVBc1RpbWVzdGFtcCIsImRzTWF4VGltZXN0YW1wIiwiZ2V0TWF4VGltZUFzVGltZXN0YW1wIiwic3QiLCJlbmQiLCJnZXRTdGFydFRpbWVBc0lzb0RhdGUiLCJ0b0lTT1N0cmluZyIsImdldE1pblRpbWVBc0lzb0RhdGUiLCJnZXRTdGFydFRpbWVBc1RpbWVzdGFtcCIsImdldEVuZFRpbWVBc0lzb0RhdGUiLCJnZXRNYXhUaW1lQXNJc29EYXRlIiwiZ2V0RW5kVGltZUFzVGltZXN0YW1wIiwic2V0U3RhcnRUaW1lIiwidGltZSIsImxhenkiLCJ1cGRhdGVBbGdvIiwic2V0RW5kVGltZSIsInNldE1pblRpbWUiLCJyZXNldFN0YXJ0VGltZSIsInRpbWVDaGFuZ2VkIiwic2V0TWF4VGltZSIsImdldFJlcGxheVNwZWVkIiwidGVybWluYXRlIiwic3luY2hyb25pemVyV29ya2VyIiwiZGF0YVNvdXJjZSIsImdldE1vZGUiLCJNb2RlIiwiUkVQTEFZIiwiaW5pdERhdGFTb3VyY2VzIiwiZGF0YVNvdXJjZXNGb3JXb3JrZXIiLCJkYXRhU291cmNlRm9yV29ya2VyIiwiY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlciIsInB1c2giLCJXb3JrZXJFeHQiLCJEYXRhU3luY2hyb25pemVyV29ya2VyIiwicG9zdE1lc3NhZ2VXaXRoQWNrIiwibWVzc2FnZSIsIm1vZGUiLCJ0b3BpY3MiLCJkYXRhIiwidGhlbiIsImVycm9yIiwiY29uc29sZSIsIm9iaiIsInRpbWVPdXQiLCJuYW1lIiwiZ2V0TmFtZSIsInNldERhdGFTeW5jaHJvbml6ZXIiLCJleCIsIm9uVGltZUNoYW5nZWQiLCJhZGREYXRhU291cmNlIiwibG9nIiwib25BZGRlZERhdGFTb3VyY2UiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3QiLCJyZW1vdmVEYXRhU291cmNlIiwiZmlsdGVyIiwiZWx0IiwicmVzZXQiLCJyZW1vdmVEYXRhU3luY2hyb25pemVyIiwib25SZW1vdmVkRGF0YVNvdXJjZSIsImRpc2Nvbm5lY3QiLCJkYXRhU291cmNlSWRzIiwiZGF0YVNvdXJjZUlkIiwidHlwZSIsImNoZWNrSW5pdCIsImRvQ29ubmVjdCIsImluaXQiLCJjaGVja1N0YXJ0RW5kVGltZSIsInNldFRpbWVSYW5nZSIsInByb21pc2VzIiwiUHJvbWlzZSIsImFsbCIsInNldFJlcGxheVNwZWVkIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInJlY29ubmVjdCIsImluY1ZlcnNpb24iLCJzZXRTdGFydFRpbWVzdGFtcCIsInRpbWVzdGFtcCIsInNldEVuZFRpbWVzdGFtcCIsInVwZGF0ZVByb3BlcnRpZXMiLCJyZXNldFRpbWVzIiwiZ2V0Q3VycmVudFRpbWUiLCJtaW4iLCJtYXgiLCJzdGFydCIsIkRhdGFTeW5jaHJvbml6ZXJSZWFsdGltZSIsIlJFQUxfVElNRSIsIkRhdGFTeW5jaHJvbml6ZXIiLCJkYXRhU3luY2hyb25pemVyUmVwbGF5IiwiZGF0YVN5bmNocm9uaXplclJ0IiwiYnJvYWRjYXN0Q2hhbm5lbHMiLCJzZXRNb2RlIiwiZGF0YVN5bmNocm9uaXplciIsImJjIiwiY2xvc2UiLCJpbml0RXZlbnRTdWJzY3JpcHRpb24iLCJvbkNoYW5nZWRNb2RlIiwiZXZlbnRTdWJzY3JpcHRpb25NYXAiLCJCcm9hZGNhc3RDaGFubmVsIiwib25tZXNzYWdlIiwiaSIsIkV2ZW50VHlwZSIsIk1BU1RFUl9USU1FIiwic3Vic2NyaWJlIiwiZm4iLCJldmVudFR5cGVzIiwibWluTWF4Q2hhbmdlZCIsInJlc2V0U3RhcnRUaW1lc3RhbXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSw4Q0FBTixDQUE2QjtFQUN6QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXLENBQUNDLFVBQUQs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c0IxRSxVQUF0QixDQUFpQ2xDLE9BQWpDO0VBQ0g7RUFFRztBQUNSO0FBQ0E7OztFQUNxQixNQUFYbUUsV0FBVyxHQUFHO0lBQ2hCLE9BQU8sS0FBS3lDLGdCQUFMLENBQXNCekMsV0FBdEIsRUFBUDtFQUNIOztFQUVEdUQsYUFBYSxDQUFDQyxtQkFBbUIsR0FBRyxLQUF2QixFQUE4QjtJQUN2QyxJQUFHQSxtQkFBSCxFQUF3QjtNQUNwQixLQUFLbkIsc0JBQUwsQ0FBNEI1SCxVQUE1QixDQUF1Q1UsY0FBdkMsR0FBd0RDLFNBQXhEO01BQ0EsS0FBS2lILHNCQUFMLENBQTRCNUgsVUFBNUIsQ0FBdUNZLFlBQXZDLEdBQXNERCxTQUF0RDtJQUNIOztJQUNELEtBQUtpSCxzQkFBTCxDQUE0QnZHLGFBQTVCO0lBQ0EsS0FBS3VHLHNCQUFMLENBQTRCdkUsV0FBNUI7RUFDSDs7RUFDRDhCLGFBQWEsQ0FBQ3FDLEtBQUQsRUFBUUYsR0FBUixFQUFhLENBQ3pCOztFQUVEeEIsbUJBQW1CLENBQUNHLFlBQUQsRUFBZSxDQUNqQzs7RUFFRFgsaUJBQWlCLENBQUNXLFlBQUQsRUFBZSxDQUMvQjs7RUFFRG1DLGFBQWEsQ0FBQzdELElBQUQsRUFBTyxDQUFFOztBQXpUSDs7QUE0VFJvRCwwSEFBZiIsImZpbGUiOiIxNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7YXNzZXJ0RGVmaW5lZCwgaXNEZWZpbmVkLCByYW5kb21VVUlEfSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHMuanNcIjtcbmltcG9ydCBEYXRhU3luY2hyb25pemVyV29ya2VyIGZyb20gJy4vRGF0YVN5bmNocm9uaXplci5yZXBsYXkud29ya2VyLmpzJztcbmltcG9ydCB7REFUQV9TWU5DSFJPTklaRVJfVE9QSUMsIFRJTUVfU1lOQ0hST05JWkVSX1RPUElDfSBmcm9tIFwiLi4vLi4vQ29uc3RhbnRzLmpzXCI7XG5pbXBvcnQge01vZGV9IGZyb20gXCIuLi8uLi9kYXRhc291cmNlL01vZGVcIjtcbmltcG9ydCB7RXZlbnRUeXBlfSBmcm9tIFwiLi4vLi4vZXZlbnQvRXZlbnRUeXBlXCI7XG5pbXBvcnQgV29ya2VyRXh0IGZyb20gXCIuLi8uLi93b3JrZXIvV29ya2VyRXh0XCI7XG5cbmNsYXNzIERhdGFTeW5jaHJvbml6ZXJSZXBsYXkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgVGhlIGRhdGFTeW5jaHJvbml6ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydGllcy5pZD1yYW5kb21VVUlEXSAtIGlkIG9mIHRoZSBkYXRhU3luY2hyb25pemVyIG9yIHJhbmRvbSBpZiBub3QgcHJvdmlkZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gLSByZXBsYXlTcGVlZCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy50aW1lclJlc29sdXRpb249NV0gLSBpbnRlcnZhbCBpbiB3aGljaCBkYXRhIGlzIHBsYXllZCAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5tYXN0ZXJUaW1lUmVmcmVzaFJhdGU9MjUwXSAtIGludGVydmFsIGluIHdoaWNoIHRpbWUgdmFsdWUgaXMgc2VuZCB0aHJvdWdoIGJyb2FkY2FzdCBjaGFubmVsIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLm1vZGU9TW9kZS5SRVBMQVldIC0gbW9kZSBvZiB0aGUgZGF0YSBzeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5taW5UaW1lIC0gbWluIHJhbmdlIHRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5tYXhUaW1lIC0gbWF4IHJhbmdlIHRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKiBAcGFyYW0ge0RhdGFzb3VyY2VbXX0gcHJvcGVydGllcy5kYXRhU291cmNlcyAtIHRoZSBkYXRhU291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHtEYXRhU3luY2hyb25pemVyfSB0aW1lU3luYyAtIGRhdGFTeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzLCB0aW1lU3luYykge1xuICAgICAgICB0aGlzLmJ1ZmZlcmluZ1RpbWUgPSAxMDAwOyAvLyBkZWZhdWx0XG4gICAgICAgIHRoaXMuaWQgPSBwcm9wZXJ0aWVzLmlkIHx8IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlcyA9IHByb3BlcnRpZXMuZGF0YVNvdXJjZXMgfHwgW107XG4gICAgICAgIHRoaXMucmVwbGF5U3BlZWQgPSBwcm9wZXJ0aWVzLnJlcGxheVNwZWVkIHx8IDE7XG4gICAgICAgIHRoaXMudGltZXJSZXNvbHV0aW9uID0gcHJvcGVydGllcy50aW1lclJlc29sdXRpb24gfHwgNTtcbiAgICAgICAgdGhpcy5tYXN0ZXJUaW1lUmVmcmVzaFJhdGUgPSBwcm9wZXJ0aWVzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZSB8fCAyNTA7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50aW1lU3luYyA9IHRpbWVTeW5jO1xuXG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHt9O1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMucmVwbGF5U3BlZWQgPSB0aGlzLnJlcGxheVNwZWVkO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5taW5UaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5tYXhUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy52ZXJzaW9uID0gMDtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMubWluVGltZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pblRpbWVzdGFtcCA9IG5ldyBEYXRlKHByb3BlcnRpZXMubWluVGltZSkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm1heFRpbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhUaW1lc3RhbXAgPSBuZXcgRGF0ZShwcm9wZXJ0aWVzLm1heFRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXB1dGVNaW5NYXgoKTtcbiAgICB9XG5cbiAgICBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgZ2V0VG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfU1lOQ0hST05JWkVSX1RPUElDICsgdGhpcy5pZDtcbiAgICB9XG5cbiAgICBnZXRUaW1lVG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIFRJTUVfU1lOQ0hST05JWkVSX1RPUElDICsgdGhpcy5pZDtcbiAgICB9XG5cbiAgICBnZXREYXRhU291cmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNvdXJjZXM7XG4gICAgfVxuXG4gICAgY29tcHV0ZU1pbk1heCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IG1pblRpbWVzdGFtcCA9IE51bWJlci5NQVhfVkFMVUUsIG1heFRpbWVzdGFtcCA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IG1pbi9tYXggd2lsbCBiZSBhZGp1c3RlZCBvbiB0aGUgbW9zdCBtaW4vbWF4IERhdGFTb3VyY2VcbiAgICAgICAgICAgIGZvciAobGV0IGRzIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIG1pbi9tYXggcmFuZ2Ugb2YgZGF0YVN5bmNocm9uaXplclxuICAgICAgICAgICAgICAgIGxldCBkc01pblRpbWVzdGFtcCA9IGRzLmdldE1pblRpbWVBc1RpbWVzdGFtcCgpO1xuICAgICAgICAgICAgICAgIGxldCBkc01heFRpbWVzdGFtcCA9IGRzLmdldE1heFRpbWVBc1RpbWVzdGFtcCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRzTWluVGltZXN0YW1wIDwgbWluVGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblRpbWVzdGFtcCA9IGRzTWluVGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkc01heFRpbWVzdGFtcCA+IG1heFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICBtYXhUaW1lc3RhbXAgPSBkc01heFRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGEgZGVmYXVsdCBNaW4vTWF4IGhhcyBiZWVuIGRlZmluZWQgaW50byBEYXRhU3luY2hyb25pemVyIGZvcmNpbmcgaW50ZXJzZWN0aW9uIHdpdGggY3VycmVudCBjb21wdXRlZCBvbmVzXG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHRoaXMubWluVGltZXN0YW1wKSAmJiB0aGlzLm1pblRpbWVzdGFtcCA+IG1pblRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIC8vIGludGVyc2VjdCBhbmQgdGFrZXMgdGhlIG1pbiBvZiBkYXRhU3luY2hyb25pemVyXG4gICAgICAgICAgICAgICAgbWluVGltZXN0YW1wID0gdGhpcy5taW5UaW1lc3RhbXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQodGhpcy5tYXhUaW1lc3RhbXApICYmIHRoaXMubWF4VGltZXN0YW1wID4gbWF4VGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgLy8gaW50ZXJzZWN0IGFuZCB0YWtlcyB0aGUgbWluIG9mIGRhdGFTeW5jaHJvbml6ZXJcbiAgICAgICAgICAgICAgICBtYXhUaW1lc3RhbXAgPSB0aGlzLm1heFRpbWVzdGFtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLm1pblRpbWVzdGFtcCA9IG1pblRpbWVzdGFtcDtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5tYXhUaW1lc3RhbXAgPSBtYXhUaW1lc3RhbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdCA9IG5ldyBEYXRlKCcxOTcwLTAxLTAxVDAwOjAwOjAwWicpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IG5ldyBEYXRlKCcyMDU1LTAxLTAxVDAwOjAwOjAwWicpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5taW5UaW1lc3RhbXAgPSB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXAgPSBzdDtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5tYXhUaW1lc3RhbXAgPSB0aGlzLnByb3BlcnRpZXMuZW5kVGltZXN0YW1wID0gZW5kO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhcnRUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBzdGFydFRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKi9cbiAgICBnZXRTdGFydFRpbWVBc0lzb0RhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXApLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNaW5UaW1lQXNJc29EYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFydFRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyB1bml4IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIGdldFN0YXJ0VGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVuZFRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIGVuZFRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKi9cbiAgICBnZXRFbmRUaW1lQXNJc29EYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmVuZFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXApLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXhUaW1lQXNJc29EYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRFbmRUaW1lQXNUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuZW5kVGltZXN0YW1wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldE1pblRpbWVBc0lzb0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnByb3BlcnRpZXMubWluVGltZXN0YW1wKS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyB1bml4IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIGdldE1pblRpbWVBc1RpbWVzdGFtcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5taW5UaW1lc3RhbXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWF4VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gZW5kVGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldE1heFRpbWVBc0lzb0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wKS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heFRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIGVuZFRpbWUgYXMgdW5peCB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBnZXRNYXhUaW1lQXNUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wO1xuICAgIH1cblxuXG4gICAgYXN5bmMgc2V0U3RhcnRUaW1lKHRpbWUsIGxhenkgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXAgPSBuZXcgRGF0ZSh0aW1lKS5nZXRUaW1lKCk7XG4gICAgICAgIGlmICghbGF6eSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVBbGdvKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBzZXRFbmRUaW1lKHRpbWUsIGxhenkgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuZW5kVGltZXN0YW1wID0gbmV3IERhdGUodGltZSkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoIWxhenkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQWxnbygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0TWluVGltZShtaW5UaW1lLCByZXNldFN0YXJ0VGltZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMubWluVGltZXN0YW1wID0gbmV3IERhdGUobWluVGltZSkuZ2V0VGltZSgpO1xuICAgICAgICB0aGlzLmNvbXB1dGVNaW5NYXgoKTtcbiAgICAgICAgdGhpcy50aW1lQ2hhbmdlZCgpO1xuICAgIH1cblxuICAgIGFzeW5jIHNldE1heFRpbWUobWF4VGltZSwgcmVzZXRTdGFydFRpbWUgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLm1heFRpbWVzdGFtcCA9IG5ldyBEYXRlKG1heFRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG4gICAgICAgIHRoaXMudGltZUNoYW5nZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZXBsYXlTcGVlZFxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gdGhlIHJlcGxheSBzcGVlZFxuICAgICAqL1xuICAgIGdldFJlcGxheVNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYXlTcGVlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGUgdGhlIGNvcnJlc3BvbmRpbmcgcnVubmluZyBXZWJXb3JrZXIgYnkgY2FsbGluZyB0ZXJtaW5hdGUoKSBvbiBpdC5cbiAgICAgKi9cbiAgICB0ZXJtaW5hdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN5bmNocm9uaXplcldvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnN5bmNocm9uaXplcldvcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBkYXRhU291cmNlLnRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIE1vZGUuUkVQTEFZO1xuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0gQVNZTkNIUk9OT1VTIEZVTkNUSU9OUyAtLS0tLS0tLS0tLS0tLS0tLS8vXG5cbiAgICBhc3luYyBpbml0RGF0YVNvdXJjZXMoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlc0ZvcldvcmtlciA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZUZvcldvcmtlciA9IGF3YWl0IHRoaXMuY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlcihkYXRhU291cmNlKTtcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlc0Zvcldvcmtlci5wdXNoKGRhdGFTb3VyY2VGb3JXb3JrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgPSBuZXcgV29ya2VyRXh0KG5ldyBEYXRhU3luY2hyb25pemVyV29ya2VyKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luaXQnLFxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VzOiBkYXRhU291cmNlc0ZvcldvcmtlcixcbiAgICAgICAgICAgICAgICByZXBsYXlTcGVlZDogdGhpcy5yZXBsYXlTcGVlZCxcbiAgICAgICAgICAgICAgICB0aW1lclJlc29sdXRpb246IHRoaXMudGltZXJSZXNvbHV0aW9uLFxuICAgICAgICAgICAgICAgIG1hc3RlclRpbWVSZWZyZXNoUmF0ZTogdGhpcy5tYXN0ZXJUaW1lUmVmcmVzaFJhdGUsXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IHRoaXMuZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgICAgICBlbmRUaW1lc3RhbXA6IHRoaXMuZ2V0RW5kVGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICAgICAgbW9kZTogdGhpcy5nZXRNb2RlKCksXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uKCksXG4gICAgICAgICAgICAgICAgdG9waWNzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZ2V0VG9waWNJZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aW1lOiB0aGlzLmdldFRpbWVUb3BpY0lkKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSBkYXRhU291cmNlXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlcihkYXRhU291cmNlKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgIGJ1ZmZlcmluZ1RpbWU6IGRhdGFTb3VyY2UucHJvcGVydGllcy5idWZmZXJpbmdUaW1lIHx8IDAsXG4gICAgICAgICAgICB0aW1lT3V0OiBkYXRhU291cmNlLnByb3BlcnRpZXMudGltZU91dCB8fCAwLFxuICAgICAgICAgICAgaWQ6IGRhdGFTb3VyY2UuZ2V0SWQoKSxcbiAgICAgICAgICAgIG5hbWU6IGRhdGFTb3VyY2UuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgbWluVGltZXN0YW1wOiBkYXRhU291cmNlLmdldE1pblRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgbWF4VGltZXN0YW1wOiBkYXRhU291cmNlLmdldE1heFRpbWVBc1RpbWVzdGFtcCgpXG4gICAgICAgIH07XG4gICAgICAgIC8vIGJpbmQgZGF0YVNvdXJjZSBkYXRhIG9udG8gZGF0YVN5bmNocm9uaXplciBkYXRhXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBkYXRhU291cmNlLnNldERhdGFTeW5jaHJvbml6ZXIodGhpcy50aW1lU3luYyk7XG4gICAgICAgICAgICBkYXRhU291cmNlLnByb3BlcnRpZXMucmVwbGF5U3BlZWQgPSB0aGlzLnJlcGxheVNwZWVkO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBzZXQgdGhlIHN5bmNocm9uaXplciB0byB0aGlzIERhdGFTb3VyY2VcIiwgZXgpO1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICB0aW1lQ2hhbmdlZCgpIHtcbiAgICAgICAgdGhpcy5vblRpbWVDaGFuZ2VkKFxuICAgICAgICAgICAgdGhpcy5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0TWF4VGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICB0aGlzLmdldFN0YXJ0VGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICB0aGlzLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBEYXRhU291cmNlIG9iamVjdCB0byB0aGUgbGlzdCBvZiBkYXRhc291cmNlcyB0byBzeW5jaHJvbml6ZS5cbiAgICAgKiBub3RlOiBkb24ndCBmb3JnZXQgdG8gY2FsbCByZXNldCgpIHRvIGJlIHN1cmUgdG8gcmUtaW5pdCB0aGUgc3luY2hyb25pemVyIGludGVybmFsIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHtUaW1lU2VyaWVzRGF0YVNvdXJjZX0gZGF0YVNvdXJjZSAtIHRoZSBuZXcgZGF0YXNvdXJjZSB0byBhZGRcbiAgICAgKi9cbiAgICBhc3luYyBhZGREYXRhU291cmNlKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlcy5wdXNoKGRhdGFTb3VyY2UpO1xuICAgICAgICB0aGlzLmNvbXB1dGVNaW5NYXgoKTtcbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRGF0YVN5bmNocm9uaXplciBub3QgaW5pdGlhbGl6ZWQgeWV0LCBhZGQgRGF0YVNvdXJjZSAke2RhdGFTb3VyY2UuaWR9IGFzIGl0YCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICB0aGlzLm9uQWRkZWREYXRhU291cmNlKGRhdGFTb3VyY2UuaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YVNvdXJjZS5zZXRTdGFydFRpbWUodGhpcy5nZXRTdGFydFRpbWVBc0lzb0RhdGUoKSk7XG4gICAgICAgICAgICBkYXRhU291cmNlLnNldEVuZFRpbWUodGhpcy5nZXRFbmRUaW1lQXNJc29EYXRlKCkpO1xuICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZUZvcldvcmtlciA9IGF3YWl0IHRoaXMuY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlcihkYXRhU291cmNlKTtcblxuICAgICAgICAgICAgLy8gYWRkIGRhdGFTb3VyY2UgdG8gc3luY2hyb25pemVyIGFsZ29yaXRobVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2FkZCcsXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZXM6IFtkYXRhU291cmNlRm9yV29ya2VyXVxuICAgICAgICAgICAgfSkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkYXRhU291cmNlLmNvbm5lY3QoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uQWRkZWREYXRhU291cmNlKGRhdGFTb3VyY2UuaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZUNoYW5nZWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIERhdGFTb3VyY2Ugb2JqZWN0IGZyb20gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXMgb2YgdGhlIHN5bmNocm9uaXplci5cbiAgICAgKiBAcGFyYW0ge1RpbWVTZXJpZXNEYXRhc291cmNlfSBkYXRhU291cmNlIC0gdGhlIG5ldyBkYXRhc291cmNlIHRvIGFkZFxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZURhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VzID0gdGhpcy5kYXRhU291cmNlcy5maWx0ZXIoZWx0ID0+IGVsdC5pZCAhPT0gZGF0YVNvdXJjZS5nZXRJZCgpKTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRGF0YVN5bmNocm9uaXplciBub3QgaW5pdGlhbGl6ZWQgeWV0LCByZW1vdmUgRGF0YVNvdXJjZSAke2RhdGFTb3VyY2UuaWR9IGFzIGl0YCk7XG4gICAgICAgICAgICBhd2FpdCBkYXRhU291cmNlLnJlbW92ZURhdGFTeW5jaHJvbml6ZXIoKTtcbiAgICAgICAgICAgIHRoaXMudGltZUNoYW5nZWQoKTtcbiAgICAgICAgICAgIHRoaXMub25SZW1vdmVkRGF0YVNvdXJjZShkYXRhU291cmNlLmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IGRhdGFTb3VyY2UuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5yZW1vdmVEYXRhU3luY2hyb25pemVyKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdyZW1vdmUnLFxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VJZHM6IFtkYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiB0aGlzLmdldFN0YXJ0VGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICAgICAgZW5kVGltZXN0YW1wOiB0aGlzLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpXG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW92ZWREYXRhU291cmNlKGRhdGFTb3VyY2UuaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVNvdXJjZUlkIC0gdGhlIGRhdGFTb3VyY2UgaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIHRoZSBkYXRhIHRvIHB1c2ggaW50byB0aGUgZGF0YSBzeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBhc3luYyBwdXNoKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSWQ6IGRhdGFTb3VyY2VJZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMudmVyc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhU291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tJbml0KCk7XG4gICAgICAgICAgICBjb25zdCBpc0Nvbm5lY3RlZCA9IGF3YWl0IHRoaXMuaXNDb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIGlmICghaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb0Nvbm5lY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc0Nvbm5lY3RlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrSW5pdCgpIHtcbiAgICAgICAgaWYgKCFpc0RlZmluZWQodGhpcy5pbml0KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0ID0gdGhpcy5pbml0RGF0YVNvdXJjZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbml0O1xuICAgIH1cblxuICAgIGNoZWNrU3RhcnRFbmRUaW1lKCkge1xuICAgICAgICBpZiAoIXRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wID0gdGhpcy5wcm9wZXJ0aWVzLm1pblRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXAgPSB0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZG9Db25uZWN0KCkge1xuICAgICAgICB0aGlzLmNoZWNrU3RhcnRFbmRUaW1lKCk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQWxnbygpO1xuICAgICAgICBmb3IgKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGF3YWl0IGRhdGFTb3VyY2Uuc2V0VGltZVJhbmdlKHRoaXMuZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCksIHRoaXMuZ2V0RW5kVGltZUFzSXNvRGF0ZSgpLCB0aGlzLmdldFJlcGxheVNwZWVkKCksIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnY29ubmVjdCcsXG4gICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24oKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLnJlc2V0KCk7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChkYXRhU291cmNlLmRpc2Nvbm5lY3QoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZXBsYXlTcGVlZFxuICAgICAqL1xuICAgIGFzeW5jIHNldFJlcGxheVNwZWVkKHJlcGxheVNwZWVkKSB7XG4gICAgICAgIHRoaXMucmVwbGF5U3BlZWQgPSByZXBsYXlTcGVlZDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnJlcGxheVNwZWVkID0gcmVwbGF5U3BlZWQ7XG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgbWVzc2FnZTogJ3JlcGxheS1zcGVlZCcsXG4gICAgICAgICAgICByZXBsYXlTcGVlZDogcmVwbGF5U3BlZWQsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGEgc291cmNlIHRpbWUgcmFuZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnRUaW1lIC0gdGhlIHN0YXJ0VGltZSAoaW4gZGF0ZSBJU08pXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVuZFRpbWUgLSB0aGUgc3RhcnRUaW1lIChpbiBkYXRlIElTTylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVwbGF5U3BlZWQgLSB0aGUgcmVwbGF5IHNwZWVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZWNvbm5lY3QgLSByZWNvbm5lY3QgaWYgd2FzIGNvbm5lY3RlZFxuICAgICAqIEBwYXJhbSB7TW9kZX0gbW9kZSAtIGRlZmF1bHQgZGF0YVNvdXJjZSBtb2RlXG4gICAgICovXG4gICAgYXN5bmMgc2V0VGltZVJhbmdlKHN0YXJ0VGltZSA9IHRoaXMuZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgIGVuZFRpbWUgPSB0aGlzLmdldEVuZFRpbWVBc0lzb0RhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgcmVwbGF5U3BlZWQgPSB0aGlzLmdldFJlcGxheVNwZWVkKCksXG4gICAgICAgICAgICAgICAgICAgICAgIHJlY29ubmVjdCA9IGZhbHNlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICB0aGlzLmluY1ZlcnNpb24oKTtcbiAgICAgICAgLy8gdXBkYXRlIHByb3BlcnRpZXMgb2YgRGF0YVN5bmNocm9uaXplclxuICAgICAgICB0aGlzLnJlcGxheVNwZWVkID0gcmVwbGF5U3BlZWQ7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGFydFRpbWUoc3RhcnRUaW1lLCBmYWxzZSk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0RW5kVGltZShlbmRUaW1lLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgLy8gdXBkYXRlIHByb3BlcnRpZXMgb2YgZWFjaCBEYXRhU291cmNlXG4gICAgICAgIGZvciAobGV0IGRzIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goZHMuc2V0VGltZVJhbmdlKFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCksXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRFbmRUaW1lQXNJc29EYXRlKCksXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRSZXBsYXlTcGVlZCgpLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TW9kZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbigpXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH1cblxuICAgIHNldFN0YXJ0VGltZXN0YW1wKHRpbWVzdGFtcCl7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVBbGdvKCkge1xuICAgICAgICAvLyBzeW5jaHJvbml6ZSBzdGFydFRpbWVzdGFtcCBvZiBzeW5jaHJvbml6ZXIgdG8gZGF0YXNvdXJjZXNcbiAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBkYXRhU291cmNlLnNldFN0YXJ0VGltZXN0YW1wKHRoaXMuZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKSk7XG4gICAgICAgICAgICBkYXRhU291cmNlLnNldEVuZFRpbWVzdGFtcCh0aGlzLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZS1jb21wdXRlIG5ldyBtaW4vbWF4IG9mIHN5bmNocm9uaXplclxuICAgICAgICB0aGlzLmNvbXB1dGVNaW5NYXgoKTtcbiAgICAgICAgLy8gcHJvdmlkZSBuZXcgbWluL21heCBvZiBlYWNoIGRhdGFTb3VyY2UgdG8gZGF0YVN5bmNocm9uaXplclxuICAgICAgICBjb25zdCBkYXRhU291cmNlc0ZvcldvcmtlciA9IFtdO1xuICAgICAgICBmb3IgKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBidWZmZXJpbmdUaW1lOiBkYXRhU291cmNlLnByb3BlcnRpZXMuYnVmZmVyaW5nVGltZSB8fCAwLFxuICAgICAgICAgICAgICAgIHRpbWVPdXQ6IGRhdGFTb3VyY2UucHJvcGVydGllcy50aW1lT3V0IHx8IDAsXG4gICAgICAgICAgICAgICAgaWQ6IGRhdGFTb3VyY2UuZ2V0SWQoKSxcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhU291cmNlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICBtaW5UaW1lc3RhbXA6IGRhdGFTb3VyY2UuZ2V0TWluVGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICAgICAgbWF4VGltZXN0YW1wOiBkYXRhU291cmNlLmdldE1heFRpbWVBc1RpbWVzdGFtcCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGF0YVNvdXJjZXNGb3JXb3JrZXIucHVzaChvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAndGltZS1yYW5nZScsXG4gICAgICAgICAgICBtb2RlOiB0aGlzLmdldE1vZGUoKSxcbiAgICAgICAgICAgIHJlcGxheVNwZWVkOiB0aGlzLmdldFJlcGxheVNwZWVkKCksXG4gICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogdGhpcy5nZXRTdGFydFRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgZW5kVGltZXN0YW1wOiB0aGlzLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uKCksXG4gICAgICAgICAgICBkYXRhU291cmNlczogZGF0YVNvdXJjZXNGb3JXb3JrZXJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGZvciAobGV0IGRzIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGRzLnVwZGF0ZVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldFRpbWVzKCkge1xuICAgICAgICB0aGlzLmNvbXB1dGVNaW5NYXgoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgcmVmZXJlbmNlIHRpbWVcbiAgICAgKi9cbiAgICBhc3luYyByZXNldCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAncmVzZXQnXG4gICAgICAgIH0pLnRoZW4oKCkgPT4gdGhpcy5yZXNldFRpbWVzKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdjdXJyZW50LXRpbWUnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdGhlIGRhdGFTb3VyY2UgdGhlbiB0aGUgcHJvdG9jb2wgd2lsbCBiZSBvcGVuZWQgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBhc3luYyBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrSW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lzLWNvbm5lY3RlZCdcbiAgICAgICAgICAgIH0pLnRoZW4oIChtZXNzYWdlKSA9PiBtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5jVmVyc2lvbigpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnZlcnNpb24rKztcbiAgICB9XG5cbiAgICBvblRpbWVDaGFuZ2VkKG1pbiwgbWF4LCBzdGFydCwgZW5kKSB7XG4gICAgfVxuXG4gICAgb25SZW1vdmVkRGF0YVNvdXJjZShkYXRhU291cmNlSWQpIHtcbiAgICB9XG5cbiAgICBvbkFkZGVkRGF0YVNvdXJjZShkYXRhU291cmNlSWQpIHtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFTeW5jaHJvbml6ZXJSZXBsYXk7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7YXNzZXJ0RGVmaW5lZCwgaXNEZWZpbmVkLCByYW5kb21VVUlEfSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHMuanNcIjtcbmltcG9ydCBEYXRhU3luY2hyb25pemVyV29ya2VyIGZyb20gJy4vRGF0YVN5bmNocm9uaXplci5yZWFsdGltZS53b3JrZXIuanMnO1xuaW1wb3J0IHtEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQywgVElNRV9TWU5DSFJPTklaRVJfVE9QSUN9IGZyb20gXCIuLi8uLi9Db25zdGFudHMuanNcIjtcbmltcG9ydCB7TW9kZX0gZnJvbSBcIi4uLy4uL2RhdGFzb3VyY2UvTW9kZVwiO1xuaW1wb3J0IFdvcmtlckV4dCBmcm9tIFwiLi4vLi4vd29ya2VyL1dvcmtlckV4dFwiO1xuXG5jbGFzcyBEYXRhU3luY2hyb25pemVyUmVhbHRpbWUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgVGhlIGRhdGFTeW5jaHJvbml6ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydGllcy5pZD1yYW5kb21VVUlEXSAtIGlkIG9mIHRoZSBkYXRhU3luY2hyb25pemVyIG9yIHJhbmRvbSBpZiBub3QgcHJvdmlkZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMudGltZXJSZXNvbHV0aW9uPTVdIC0gaW50ZXJ2YWwgaW4gd2hpY2ggZGF0YSBpcyBwbGF5ZWQgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMubWFzdGVyVGltZVJlZnJlc2hSYXRlPTI1MF0gLSBpbnRlcnZhbCBpbiB3aGljaCB0aW1lIHZhbHVlIGlzIHNlbmQgdGhyb3VnaCBicm9hZGNhc3QgY2hhbm5lbCAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqIEBwYXJhbSB7RGF0YXNvdXJjZVtdfSBwcm9wZXJ0aWVzLmRhdGFTb3VyY2VzIC0gdGhlIGRhdGFTb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0ge0RhdGFTeW5jaHJvbml6ZXJ9IHRpbWVTeW5jIC0gZGF0YVN5bmNocm9uaXplclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMsIHRpbWVTeW5jKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyaW5nVGltZSA9IDEwMDA7IC8vIGRlZmF1bHRcbiAgICAgICAgdGhpcy5pZCA9IHByb3BlcnRpZXMuaWQgfHwgcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VzID0gcHJvcGVydGllcy5kYXRhU291cmNlcyB8fCBbXTtcbiAgICAgICAgdGhpcy50aW1lclJlc29sdXRpb24gPSBwcm9wZXJ0aWVzLnRpbWVyUmVzb2x1dGlvbiB8fCA1O1xuICAgICAgICB0aGlzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZSA9IHByb3BlcnRpZXMubWFzdGVyVGltZVJlZnJlc2hSYXRlIHx8IDI1MDtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRpbWVTeW5jID0gdGltZVN5bmM7XG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHt9O1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMudmVyc2lvbiA9IDA7XG4gICAgfVxuXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIGdldERhdGFTb3VyY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU291cmNlcztcbiAgICB9XG5cbiAgICBnZXRUb3BpY0lkKCkge1xuICAgICAgICByZXR1cm4gREFUQV9TWU5DSFJPTklaRVJfVE9QSUMgKyB0aGlzLmlkO1xuICAgIH1cblxuICAgIGdldFRpbWVUb3BpY0lkKCkge1xuICAgICAgICByZXR1cm4gVElNRV9TWU5DSFJPTklaRVJfVE9QSUMgKyB0aGlzLmlkO1xuICAgIH1cblxuICAgIHNldFN0YXJ0VGltZXN0YW1wKHRpbWVzdGFtcCl7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGUgdGhlIGNvcnJlc3BvbmRpbmcgcnVubmluZyBXZWJXb3JrZXIgYnkgY2FsbGluZyB0ZXJtaW5hdGUoKSBvbiBpdC5cbiAgICAgKi9cbiAgICB0ZXJtaW5hdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN5bmNocm9uaXplcldvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnN5bmNocm9uaXplcldvcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBkYXRhU291cmNlLnRlcm1pbmF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIE1vZGUuUkVBTF9USU1FO1xuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0gQVNZTkNIUk9OT1VTIEZVTkNUSU9OUyAtLS0tLS0tLS0tLS0tLS0tLS8vXG5cbiAgICBhc3luYyBpbml0RGF0YVNvdXJjZXMoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlc0ZvcldvcmtlciA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZUZvcldvcmtlciA9IGF3YWl0IHRoaXMuY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlcihkYXRhU291cmNlKTtcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlc0Zvcldvcmtlci5wdXNoKGRhdGFTb3VyY2VGb3JXb3JrZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgPSBuZXcgV29ya2VyRXh0KG5ldyBEYXRhU3luY2hyb25pemVyV29ya2VyKCkpO1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5pdCcsXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZXM6IGRhdGFTb3VyY2VzRm9yV29ya2VyLFxuICAgICAgICAgICAgICAgIHRpbWVyUmVzb2x1dGlvbjogdGhpcy50aW1lclJlc29sdXRpb24sXG4gICAgICAgICAgICAgICAgbWFzdGVyVGltZVJlZnJlc2hSYXRlOiB0aGlzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZSxcbiAgICAgICAgICAgICAgICBtb2RlOiBNb2RlLlJFQUxfVElNRSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24oKSxcbiAgICAgICAgICAgICAgICB0b3BpY3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5nZXRUb3BpY0lkKCksXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IHRoaXMuZ2V0VGltZVRvcGljSWQoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIGRhdGFTb3VyY2VcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVEYXRhU291cmNlRm9yV29ya2VyKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgYnVmZmVyaW5nVGltZTogZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWUgfHwgMCxcbiAgICAgICAgICAgIHRpbWVPdXQ6IGRhdGFTb3VyY2UucHJvcGVydGllcy50aW1lT3V0IHx8IDAsXG4gICAgICAgICAgICBpZDogZGF0YVNvdXJjZS5pZCxcbiAgICAgICAgICAgIG5hbWU6IGRhdGFTb3VyY2UubmFtZVxuICAgICAgICB9O1xuICAgICAgICAvLyBiaW5kIGRhdGFTb3VyY2UgZGF0YSBvbnRvIGRhdGFTeW5jaHJvbml6ZXIgZGF0YVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5zZXREYXRhU3luY2hyb25pemVyKHRoaXMudGltZVN5bmMpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNhbm5vdCBzZXQgdGhlIHN5bmNocm9uaXplciB0byB0aGlzIERhdGFTb3VyY2VcIiwgZXgpO1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IERhdGFTb3VyY2Ugb2JqZWN0IHRvIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzIHRvIHN5bmNocm9uaXplLlxuICAgICAqIG5vdGU6IGRvbid0IGZvcmdldCB0byBjYWxsIHJlc2V0KCkgdG8gYmUgc3VyZSB0byByZS1pbml0IHRoZSBzeW5jaHJvbml6ZXIgaW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0ge1RpbWVTZXJpZXNEYXRhU291cmNlfSBkYXRhU291cmNlIC0gdGhlIG5ldyBkYXRhc291cmNlIHRvIGFkZFxuICAgICAqL1xuICAgIGFzeW5jIGFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VzLnB1c2goZGF0YVNvdXJjZSk7XG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYERhdGFTeW5jaHJvbml6ZXIgbm90IGluaXRpYWxpemVkIHlldCwgYWRkIERhdGFTb3VyY2UgJHtkYXRhU291cmNlLmlkfSBhcyBpdGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZUZvcldvcmtlciA9IGF3YWl0IHRoaXMuY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlcihkYXRhU291cmNlKTtcbiAgICAgICAgICAgIC8vIGFkZCBkYXRhU291cmNlIHRvIHN5bmNocm9uaXplciBhbGdvcml0aG1cbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2FkZCcsXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZXM6IFtkYXRhU291cmNlRm9yV29ya2VyXVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkFkZGVkRGF0YVNvdXJjZShkYXRhU291cmNlLmlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIERhdGFTb3VyY2Ugb2JqZWN0IGZyb20gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXMgb2YgdGhlIHN5bmNocm9uaXplci5cbiAgICAgKiBAcGFyYW0ge1RpbWVTZXJpZXNEYXRhc291cmNlfSBkYXRhU291cmNlIC0gdGhlIG5ldyBkYXRhc291cmNlIHRvIGFkZFxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZURhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICBhd2FpdCBkYXRhU291cmNlLnJlbW92ZURhdGFTeW5jaHJvbml6ZXIoKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlcyA9IHRoaXMuZGF0YVNvdXJjZXMuZmlsdGVyKGVsdCA9PiBlbHQuaWQgIT09IGRhdGFTb3VyY2UuZ2V0SWQoKSk7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYERhdGFTeW5jaHJvbml6ZXIgbm90IGluaXRpYWxpemVkIHlldCwgcmVtb3ZlIERhdGFTb3VyY2UgJHtkYXRhU291cmNlLmlkfSBhcyBpdGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSWRzOiBbZGF0YVNvdXJjZS5nZXRJZCgpXSxcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25SZW1vdmVkRGF0YVNvdXJjZShkYXRhU291cmNlLmlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFTb3VyY2VJZCAtIHRoZSBkYXRhU291cmNlIGlkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSB0aGUgZGF0YSB0byBwdXNoIGludG8gdGhlIGRhdGEgc3luY2hyb25pemVyXG4gICAgICovXG4gICAgYXN5bmMgcHVzaChkYXRhU291cmNlSWQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuc3luY2hyb25pemVyV29ya2VyICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGF0YScsXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZUlkOiBkYXRhU291cmNlSWQsXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2ZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnZlcnNpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgYWxsIGRhdGFTb3VyY2VzXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9Db25uZWN0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgY2hlY2tJbml0KCkge1xuICAgICAgICBpZiAoIWlzRGVmaW5lZCh0aGlzLmluaXQpKSB7XG4gICAgICAgICAgICB0aGlzLmluaXQgPSB0aGlzLmluaXREYXRhU291cmNlcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluaXQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZG9Db25uZWN0KCkge1xuICAgICAgICBmb3IgKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGF3YWl0IGRhdGFTb3VyY2UuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgbWVzc2FnZTogJ2Nvbm5lY3QnLFxuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgYWxsIGRhdGFTb3VyY2VzXG4gICAgICovXG4gICAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZXNldCgpO1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goZGF0YVNvdXJjZS5kaXNjb25uZWN0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGZvciAobGV0IGRzIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGRzLnVwZGF0ZVByb3BlcnRpZXMocHJvcGVydGllcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgcmVmZXJlbmNlIHRpbWVcbiAgICAgKi9cbiAgICBhc3luYyByZXNldCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAncmVzZXQnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdjdXJyZW50LXRpbWUnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdGhlIGRhdGFTb3VyY2UgdGhlbiB0aGUgcHJvdG9jb2wgd2lsbCBiZSBvcGVuZWQgYXMgd2VsbC5cbiAgICAgKi9cbiAgICBhc3luYyBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrSW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2lzLWNvbm5lY3RlZCdcbiAgICAgICAgICAgIH0pLnRoZW4oKG1lc3NhZ2UpID0+IG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRNaW5UaW1lKG1pblRpbWUpIHtcbiAgICB9XG5cbiAgICBzZXRNYXhUaW1lKG1heFRpbWUpIHtcbiAgICB9XG5cbiAgICBpbmNWZXJzaW9uKCkge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMudmVyc2lvbisrO1xuICAgIH1cblxuICAgIG9uVGltZUNoYW5nZWQoc3RhcnQsIG1pbikge1xuICAgIH1cblxuICAgIG9uUmVtb3ZlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKSB7XG4gICAgfVxuXG4gICAgb25BZGRlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKSB7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhU3luY2hyb25pemVyUmVhbHRpbWU7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7TW9kZX0gZnJvbSBcIi4uL2RhdGFzb3VyY2UvTW9kZVwiO1xuaW1wb3J0IERhdGFTeW5jaHJvbml6ZXJSZXBsYXkgZnJvbSBcIi4vcmVwbGF5L0RhdGFTeW5jaHJvbml6ZXIucmVwbGF5XCI7XG5pbXBvcnQgRGF0YVN5bmNocm9uaXplclJlYWx0aW1lIGZyb20gXCIuL3J0L0RhdGFTeW5jaHJvbml6ZXIucmVhbHRpbWVcIjtcbmltcG9ydCB7cmFuZG9tVVVJRH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzXCI7XG5pbXBvcnQge0V2ZW50VHlwZX0gZnJvbSBcIi4uL2V2ZW50L0V2ZW50VHlwZVwiO1xuXG5jbGFzcyBEYXRhU3luY2hyb25pemVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIFRoZSBkYXRhU3luY2hyb25pemVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMuaWQ9cmFuZG9tVVVJRF0gLSBpZCBvZiB0aGUgZGF0YVN5bmNocm9uaXplciBvciByYW5kb20gaWYgbm90IHByb3ZpZGVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlcGxheVNwZWVkPTFdIC0gcmVwbGF5U3BlZWQgdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMudGltZXJSZXNvbHV0aW9uPTVdIC0gaW50ZXJ2YWwgaW4gd2hpY2ggZGF0YSBpcyBwbGF5ZWQgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMubWFzdGVyVGltZVJlZnJlc2hSYXRlPTI1MF0gLSBpbnRlcnZhbCBpbiB3aGljaCB0aW1lIHZhbHVlIGlzIHNlbmQgdGhyb3VnaCBicm9hZGNhc3QgY2hhbm5lbCAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5tb2RlPU1vZGUuUkVQTEFZXSAtIG1vZGUgb2YgdGhlIGRhdGEgc3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIC0gc3RhcnQgdGltZSBvZiB0aGUgdGVtcG9yYWwgcnVuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kVGltZSAtIGVuZCB0aW1lIG9mIHRoZSB0ZW1wb3JhbCBydW5cbiAgICAgKiBAcGFyYW0ge0RhdGFzb3VyY2VbXX0gcHJvcGVydGllcy5kYXRhU291cmNlcyAtIHRoZSBkYXRhU291cmNlIGFycmF5XG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcGVydGllcykge1xuICAgICAgICBjb25zdCBpZCA9IHByb3BlcnRpZXMuaWQgfHwgcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkgPSBuZXcgRGF0YVN5bmNocm9uaXplclJlcGxheSh7XG4gICAgICAgICAgICAuLi5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgaWQ6IGlkKyctcmVwbGF5J1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyUnQgPSBuZXcgRGF0YVN5bmNocm9uaXplclJlYWx0aW1lKHtcbiAgICAgICAgICAgIC4uLnByb3BlcnRpZXMsXG4gICAgICAgICAgICBpZDogaWQrJy1yZWFsdGltZSdcbiAgICAgICAgfSwgdGhpcylcbiAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVscyA9IFtdO1xuICAgICAgICB0aGlzLnNldE1vZGUocHJvcGVydGllcy5tb2RlIHx8IE1vZGUuUkVQTEFZKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplci5vblRpbWVDaGFuZ2VkID0gKG1pbiwgbWF4LCBzdGFydCwgZW5kKSA9PiB0aGlzLm9uVGltZUNoYW5nZWQobWluLCBtYXgsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyLm9uQWRkZWREYXRhU291cmNlID0gKGRhdGFTb3VyY2VJZCkgPT4gdGhpcy5vbkFkZGVkRGF0YVNvdXJjZShkYXRhU291cmNlSWQpO1xuICAgICAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyLm9uUmVtb3ZlZERhdGFTb3VyY2UgPSAoZGF0YVNvdXJjZUlkKSA9PiB0aGlzLm9uUmVtb3ZlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIGFzeW5jIHNldE1vZGUobW9kZSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhU3luY2hyb25pemVyKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlID09PSBNb2RlLlJFUExBWSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyID0gdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5O1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IE1vZGUuUkVBTF9USU1FKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIgPSB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSdDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gdGhpcy5kYXRhU3luY2hyb25pemVyLmlkO1xuICAgICAgICBmb3IobGV0IGJjIG9mIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbHMpIHtcbiAgICAgICAgICAgIGJjLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0RXZlbnRTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVscyA9IFtdO1xuICAgICAgICBmb3IobGV0IGRzIG9mIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXREYXRhU291cmNlcygpKSB7XG4gICAgICAgICAgICBhd2FpdCBkcy5zZXRNb2RlKG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2VkTW9kZShtb2RlKTtcbiAgICB9XG5cbiAgICBpbml0RXZlbnRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXAgPSB7fTtcbiAgICAgICAgLy8gbGlzdGVuIGZvciBFdmVudHMgdG8gY2FsbGJhY2sgdG8gc3Vic2NyaXB0aW9uc1xuICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWxzLnB1c2gobmV3IEJyb2FkY2FzdENoYW5uZWwodGhpcy5nZXRUb3BpY0lkKCkpLm9ubWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5kYXRhLnR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwW3R5cGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbdHlwZV1baV0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbHMucHVzaChuZXcgQnJvYWRjYXN0Q2hhbm5lbCh0aGlzLmdldFRpbWVUb3BpY0lkKCkpLm9ubWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5kYXRhLnR5cGUgPT09IEV2ZW50VHlwZS5NQVNURVJfVElNRSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCA9IG1lc3NhZ2UuZGF0YS50aW1lc3RhbXA7IC8vIHNhdmUgYXMgbGFzdCB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuc2V0U3RhcnRUaW1lc3RhbXAobWVzc2FnZS5kYXRhLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5kYXRhLnR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwW3R5cGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbdHlwZV1baV0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1YnNjcmliZShmbiwgZXZlbnRUeXBlcykge1xuICAgICAgICAvLyBhc3NvY2lhdGUgZnVuY3Rpb24gdG8gZXZlbnRUeXBlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCEoZXZlbnRUeXBlc1tpXSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbZXZlbnRUeXBlc1tpXV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbZXZlbnRUeXBlc1tpXV0ucHVzaChmbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREYXRhU291cmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXREYXRhU291cmNlcygpO1xuICAgIH1cbiAgICBnZXRUb3BpY0lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldFRvcGljSWQoKTtcbiAgICB9XG5cbiAgICBnZXRUaW1lVG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRUaW1lVG9waWNJZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXJ0VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gc3RhcnRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldFN0YXJ0VGltZUFzSXNvRGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXJ0VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gc3RhcnRUaW1lIGFzIHVuaXggdGltZXN0YW1wXG4gICAgICovXG4gICAgZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbmRUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0RW5kVGltZUFzSXNvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRFbmRUaW1lQXNJc29EYXRlKCk7XG4gICAgfVxuXG4gICAgZ2V0RW5kVGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldE1pblRpbWVBc0lzb0RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0TWluVGltZUFzSXNvRGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyB1bml4IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIGdldE1pblRpbWVBc1RpbWVzdGFtcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0TWF4VGltZUFzSXNvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIHVuaXggdGltZXN0YW1wXG4gICAgICovXG4gICAgZ2V0TWF4VGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldE1heFRpbWVBc1RpbWVzdGFtcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlcGxheVNwZWVkXG4gICAgICogQHJldHVybnMge051bWJlcn0gLSB0aGUgcmVwbGF5IHNwZWVkXG4gICAgICovXG4gICAgZ2V0UmVwbGF5U3BlZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0UmVwbGF5U3BlZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGUgdGhlIGNvcnJlc3BvbmRpbmcgcnVubmluZyBXZWJXb3JrZXIgYnkgY2FsbGluZyB0ZXJtaW5hdGUoKSBvbiBpdC5cbiAgICAgKi9cbiAgICB0ZXJtaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gc3Vic2NyaWJlKGZuLCBldmVudFR5cGVzKSB7XG4gICAgLy8gICAgIHRoaXMuZGF0YVN5bmNocm9uaXplclJ0LnN1YnNjcmliZShmbixldmVudFR5cGVzKTtcbiAgICAvLyAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5LnN1YnNjcmliZShmbixldmVudFR5cGVzKTtcbiAgICAvLyB9XG5cbiAgICBnZXRNb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldE1vZGUoKTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tIEFTWU5DSFJPTk9VUyBGVU5DVElPTlMgLS0tLS0tLS0tLS0tLS0tLS0vL1xuXG4gICAgYXN5bmMgaW5pdERhdGFTb3VyY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmluaXREYXRhU291cmNlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgRGF0YVNvdXJjZSBvYmplY3QgdG8gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXMgdG8gc3luY2hyb25pemUuXG4gICAgICogbm90ZTogZG9uJ3QgZm9yZ2V0IHRvIGNhbGwgcmVzZXQoKSB0byBiZSBzdXJlIHRvIHJlLWluaXQgdGhlIHN5bmNocm9uaXplciBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7VGltZVNlcmllc0RhdGFTb3VyY2V9IGRhdGFTb3VyY2UgLSB0aGUgbmV3IGRhdGFzb3VyY2UgdG8gYWRkXG4gICAgICovXG4gICAgYXN5bmMgYWRkRGF0YVNvdXJjZShkYXRhU291cmNlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGF0YVN5bmNocm9uaXplclJ0LmFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkuYWRkRGF0YVNvdXJjZShkYXRhU291cmNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgRGF0YVNvdXJjZSBvYmplY3QgZnJvbSB0aGUgbGlzdCBvZiBkYXRhc291cmNlcyBvZiB0aGUgc3luY2hyb25pemVyLlxuICAgICAqIEBwYXJhbSB7VGltZVNlcmllc0RhdGFzb3VyY2V9IGRhdGFTb3VyY2UgLSB0aGUgbmV3IGRhdGFzb3VyY2UgdG8gYWRkXG4gICAgICovXG4gICAgYXN5bmMgcmVtb3ZlRGF0YVNvdXJjZShkYXRhU291cmNlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGF0YVN5bmNocm9uaXplclJ0LnJlbW92ZURhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkucmVtb3ZlRGF0YVNvdXJjZShkYXRhU291cmNlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhU291cmNlSWQgLSB0aGUgZGF0YVNvdXJjZSBpZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gdGhlIGRhdGEgdG8gcHVzaCBpbnRvIHRoZSBkYXRhIHN5bmNocm9uaXplclxuICAgICAqL1xuICAgIGFzeW5jIHB1c2goZGF0YVNvdXJjZUlkLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIucHVzaChkYXRhU291cmNlSWQsIGRhdGEpO1xuICAgIH1cblxuICAgIHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIudmVyc2lvbigpXG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbm5lY3RzIGFsbCBkYXRhU291cmNlc1xuICAgICAqL1xuICAgIGFzeW5jIGNvbm5lY3QoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGF0YVN5bmNocm9uaXplci5jb25uZWN0KClcbiAgICB9XG5cbiAgICBhc3luYyBjaGVja0luaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuY2hlY2tJbml0KClcbiAgICB9XG5cbiAgICBhc3luYyBkb0Nvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZG9Db25uZWN0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmRpc2Nvbm5lY3QoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHJlcGxheVNwZWVkXG4gICAgICovXG4gICAgYXN5bmMgc2V0UmVwbGF5U3BlZWQocmVwbGF5U3BlZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5zZXRSZXBsYXlTcGVlZChyZXBsYXlTcGVlZClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkYXRhIHNvdXJjZSB0aW1lIHJhbmdlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXJ0VGltZSAtIHRoZSBzdGFydFRpbWUgKGluIGRhdGUgSVNPKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlbmRUaW1lIC0gdGhlIHN0YXJ0VGltZSAoaW4gZGF0ZSBJU08pXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlcGxheVNwZWVkIC0gdGhlIHJlcGxheSBzcGVlZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjb25uZWN0IC0gcmVjb25uZWN0IGlmIHdhcyBjb25uZWN0ZWRcbiAgICAgKi9cbiAgICBhc3luYyBzZXRUaW1lUmFuZ2Uoc3RhcnRUaW1lID0gdGhpcy5nZXRTdGFydFRpbWVBc0lzb0RhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZSA9IHRoaXMuZ2V0RW5kVGltZUFzSXNvRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICByZXBsYXlTcGVlZCA9IHRoaXMuZ2V0UmVwbGF5U3BlZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgcmVjb25uZWN0ID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5zZXRUaW1lUmFuZ2Uoc3RhcnRUaW1lLGVuZFRpbWUsIHJlcGxheVNwZWVkLHJlY29ubmVjdCk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIudXBkYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldHMgcmVmZXJlbmNlIHRpbWVcbiAgICAgKi9cbiAgICBhc3luYyByZXNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5yZXNldCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldEN1cnJlbnRUaW1lKCk7XG4gICAgfVxuXG4gICAgc2V0TWluVGltZShtaW5UaW1lKSB7XG4gICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplci5zZXRNaW5UaW1lKG1pblRpbWUpO1xuICAgIH1cblxuICAgIHNldE1heFRpbWUobWF4VGltZSkge1xuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuc2V0TWF4VGltZShtYXhUaW1lKTtcbiAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICogQ29ubmVjdCB0aGUgZGF0YVNvdXJjZSB0aGVuIHRoZSBwcm90b2NvbCB3aWxsIGJlIG9wZW5lZCBhcyB3ZWxsLlxuICAgICAqL1xuICAgIGFzeW5jIGlzQ29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmlzQ29ubmVjdGVkKCk7XG4gICAgfVxuXG4gICAgbWluTWF4Q2hhbmdlZChyZXNldFN0YXJ0VGltZXN0YW1wID0gZmFsc2UpIHtcbiAgICAgICAgaWYocmVzZXRTdGFydFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5LnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkucHJvcGVydGllcy5lbmRUaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5LmNvbXB1dGVNaW5NYXgoKTtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5LnRpbWVDaGFuZ2VkKCk7XG4gICAgfVxuICAgIG9uVGltZUNoYW5nZWQoc3RhcnQsIG1pbikge1xuICAgIH1cblxuICAgIG9uUmVtb3ZlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKSB7XG4gICAgfVxuXG4gICAgb25BZGRlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKSB7XG4gICAgfVxuXG4gICAgb25DaGFuZ2VkTW9kZShtb2RlKSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhU3luY2hyb25pemVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///172\n')},173:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(2);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(175);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\nvar View = __webpack_require__(9);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {}; // map Layer id to array of corresponding draping\n\n    this.layerIdToDrapedImage = {};\n  }\n\n  async setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'drapedImage\') {\n        this.updateDrapedImage(d);\n      } else if (data.type === \'ellipse\') {\n        this.updateEllipse(d);\n      } else if (data.type === \'polygon\') {\n        this.updatePolygon(d);\n      } else if (data.type === \'coplanarPolygon\') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === \'frustum\') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  async addPolygonToLayer(props, polygon) {\n    this.layerIdToPolygon[props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  async addMarkerToLayer(props, markerObject) {\n    this.layerIdToMarkers[props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  async addPolylineToLayer(props, polylineObject) {\n    this.layerIdToPolylines[props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  async addEllipseToLayer(props, ellipseObject) {\n    this.layerIdToEllipsoids[props.ellipseId] = ellipseObject;\n  }\n  /**\n   * Associate a drapedImageId to a Layer for a fast lookup\n   * @protected\n   * @param {ImageDraping.props} layer - the Layer object\n   * @param {Object} drapedImageObject - the Map drapedImage object\n   */\n\n\n  async addDrapedImageToLayer(props, drapedImageObject) {\n    this.layerIdToDrapedImage[props.drapedImageId] = drapedImageObject;\n  }\n\n  async addFrustumToLayer(props, frustum) {\n    this.layerIdToFrustum[props.frustumId] = frustum;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      array.push(this.layerIdToPolygon[id]);\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.polygonId in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.markerId in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      array.push(this.layerIdToMarkers[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      array.push(this.layerIdToPolylines[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      array.push(this.layerIdToEllipsoids[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.ellipseId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the draped image associate to the Layer\n   * @protected\n   * @param {ImageDrapingLayer.props} layer - the Layer Object\n   */\n\n\n  getDrapedImage(props) {\n    if (!(props.drapedImageId in this.layerIdToDrapedImage)) {\n      return null;\n    }\n\n    return this.layerIdToDrapedImage[props.drapedImageId];\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      array.push(this.layerIdToFrustum[id]);\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.frustumId in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    // check for marker\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeDrapedImages(layer);\n    this.removeFrustums(layer);\n    super.removeAllFromLayer(layer);\n  }\n\n  removePolygons(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const polygon = this.layerIdToPolygon[id];\n\n      if (Object(Utils["n" /* isDefined */])(polygon)) {\n        this.removePolygonFromLayer(polygon);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const marker = this.layerIdToMarkers[id];\n\n      if (Object(Utils["n" /* isDefined */])(marker)) {\n        this.removeMarkerFromLayer(marker);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    const ids = ellipse.getIds() || [];\n\n    for (let id of ids) {\n      const ellipse = this.layerIdToEllipsoids[id];\n\n      if (Object(Utils["n" /* isDefined */])(ellipse)) {\n        this.removeEllipseFromLayer(ellipse);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    const ids = polyline.getIds() || [];\n\n    for (let id of ids) {\n      const polyline = this.layerIdToPolylines[id];\n\n      if (Object(Utils["n" /* isDefined */])(polyline)) {\n        this.removePolylineFromLayer(polyline);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[id];\n    }\n  }\n  /**\n   * Remove the drapedImage corresponding to a ImageDraping Layer\n   * @param {ImageDraping} imageDraping - the layer to remove the drapedImage from\n   */\n\n\n  removeDrapedImages(drapedImage) {\n    const ids = drapedImage.getIds() || [];\n\n    for (let id of ids) {\n      const drapedImage = this.layerIdToDrapedImage[id];\n\n      if (Object(Utils["n" /* isDefined */])(drapedImage)) {\n        this.removeDrapedImageFromLayer(drapedImage);\n      } // remove drapedImage ids from Layer map\n\n\n      delete this.layerIdToDrapedImage[id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const frustum = this.layerIdToFrustum[id];\n\n      if (Object(Utils["n" /* isDefined */])(frustum)) {\n        this.removeFrustumFromLayer(frustum);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a draped image from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} drapedImage - The Map drapedImage object\n   */\n\n\n  removeDrapedImageFromLayer(drapedImage) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["n" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["n" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["n" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  async updateMarker() {}\n\n  async updatePolyline() {}\n\n  async updatePolygon() {}\n\n  async updateEllipse() {}\n\n  async updateCoPlanarPolygon() {}\n\n  async updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\', \'polygon\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["n" /* isDefined */])(options)) {\n      if (Object(Utils["n" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["n" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["n" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["n" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["n" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["n" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["n" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["c" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["n" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations;\n    let polylinePoints = [];\n\n    if (Object(Utils["n" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  async updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["n" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on(\'click\', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on(\'contextmenu\', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on(\'mouseover\', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["n" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  async updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils["n" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations;\n\n      if (Object(Utils["n" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  async updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils["n" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices;\n      let polygonPoints = [];\n\n      if (Object(Utils["n" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices;\n    let polygonPoints = [];\n\n    if (Object(Utils["n" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///173\n')},174:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(10);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/BinaryDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import BinaryDataLayer from 'osh-js/core/ui/layer/BinaryDataLayer';\n *\n */\n\nclass BinaryDataLayer_BinaryDataLayer extends Layer[\"a\" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = 'binaryData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      frameData: undefined\n    };\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.frameData)) {\n      this.props.frameData = properties.frameData;\n    }\n\n    this.definedId('dataId', props);\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.getFrameData)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('frameData', await this.getFunc('getFrameData')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getFrameData'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_BinaryDataLayer = (BinaryDataLayer_BinaryDataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/VideoDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends BinaryDataLayer\n * @example\n *\n * import VideoDataLayer from 'osh-js/core/ui/layer/VideoDataLayer';\n *\n */\n\nclass VideoDataLayer_VideoDataLayer extends layer_BinaryDataLayer {\n  constructor(properties) {\n    super(properties);\n    this.type = 'videoData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      roll: 0\n    };\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.roll)) {\n      props.roll = properties.roll;\n    }\n\n    this.definedId('videoDataId', props);\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.getRoll)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('roll', await this.getFunc('getRoll')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getRoll'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_VideoDataLayer = __webpack_exports__[\"a\"] = (VideoDataLayer_VideoDataLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9CaW5hcnlEYXRhTGF5ZXIuanM/MzMzYyIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllci5qcz9kZjZhIl0sIm5hbWVzIjpbIkJpbmFyeURhdGFMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsImluaXQiLCJwcm9wcyIsImZyYW1lRGF0YSIsInVuZGVmaW5lZCIsImlzRGVmaW5lZCIsImRlZmluZWRJZCIsImdldEZyYW1lRGF0YSIsImZuIiwicmVjIiwidGltZXN0YW1wIiwib3B0aW9ucyIsInVwZGF0ZVByb3BlcnR5IiwiZ2V0RnVuYyIsImFkZEZuIiwiZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5IiwiVmlkZW9EYXRhTGF5ZXIiLCJyb2xsIiwiZ2V0Um9sbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsK0JBQU4sU0FBOEJDLHdCQUE5QixDQUFvQztFQUVoQ0MsV0FBVyxDQUFDQyxVQUFELEVBQWE7SUFDcEIsTUFBTUEsVUFBTjtJQUNBLEtBQUtDLElBQUwsR0FBWSxZQUFaO0VBQ0gsQ0FMK0IsQ0FNaEM7OztFQUNBQyxJQUFJLENBQUNGLFVBQVUsR0FBQyxLQUFLQSxVQUFqQixFQUE2QjtJQUM3QixNQUFNRSxJQUFOLENBQVdGLFVBQVg7SUFDQSxNQUFNRyxLQUFLLEdBQUc7TUFDVkMsU0FBUyxFQUFFQztJQURELENBQWQ7O0lBSUEsSUFBSUMsa0NBQVMsQ0FBQ04sVUFBVSxDQUFDSSxTQUFaLENBQWIsRUFBb0M7TUFDaEMsS0FBS0QsS0FBTCxDQUFXQyxTQUFYLEdBQXVCSixVQUFVLENBQUNJLFNBQWxDO0lBQ0g7O0lBRUQsS0FBS0csU0FBTCxDQUFlLFFBQWYsRUFBeUJKLEtBQXpCOztJQUVBLElBQUlHLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ1EsWUFBWixDQUFiLEVBQXVDO01BQ25DLElBQUlDLEVBQUUsR0FBRyxPQUFPQyxHQUFQLEVBQVlDLFNBQVosRUFBdUJDLE9BQXZCLEtBQW1DO1FBQ3hDLEtBQUtDLGNBQUwsQ0FBb0IsV0FBcEIsRUFBZ0MsTUFBTSxLQUFLQyxPQUFMLENBQWEsY0FBYixFQUE2QkosR0FBN0IsRUFBa0NDLFNBQWxDLEVBQTZDQyxPQUE3QyxDQUF0QztNQUNILENBRkQ7O01BR0EsS0FBS0csS0FBTCxDQUFXLEtBQUtDLDJCQUFMLENBQWlDLGNBQWpDLENBQVgsRUFBNkRQLEVBQTdEO0lBQ0g7RUFDSjs7QUF6QitCOztBQTJCckJaLHlGQUFmLEU7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNb0IsNkJBQU4sU0FBNkJwQixxQkFBN0IsQ0FBNkM7RUFFekNFLFdBQVcsQ0FBQ0MsVUFBRCxFQUFhO0lBQ3BCLE1BQU1BLFVBQU47SUFDQSxLQUFLQyxJQUFMLEdBQVksV0FBWjtFQUNILENBTHdDLENBTXpDOzs7RUFDQUMsSUFBSSxDQUFDRixVQUFVLEdBQUMsS0FBS0EsVUFBakIsRUFBNkI7SUFDN0IsTUFBTUUsSUFBTixDQUFXRixVQUFYO0lBQ0EsTUFBTUcsS0FBSyxHQUFHO01BQ1plLElBQUksRUFBRTtJQURNLENBQWQ7O0lBSUEsSUFBSVosa0NBQVMsQ0FBQ04sVUFBVSxDQUFDa0IsSUFBWixDQUFiLEVBQStCO01BQzNCZixLQUFLLENBQUNlLElBQU4sR0FBYWxCLFVBQVUsQ0FBQ2tCLElBQXhCO0lBQ0g7O0lBRUQsS0FBS1gsU0FBTCxDQUFlLGFBQWYsRUFBOEJKLEtBQTlCOztJQUVBLElBQUlHLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ21CLE9BQVosQ0FBYixFQUFrQztNQUM5QixJQUFJVixFQUFFLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxTQUFaLEVBQXVCQyxPQUF2QixLQUFtQztRQUN4QyxLQUFLQyxjQUFMLENBQW9CLE1BQXBCLEVBQTJCLE1BQU0sS0FBS0MsT0FBTCxDQUFhLFNBQWIsRUFBd0JKLEdBQXhCLEVBQTZCQyxTQUE3QixFQUF3Q0MsT0FBeEMsQ0FBakM7TUFDSCxDQUZEOztNQUdBLEtBQUtHLEtBQUwsQ0FBVyxLQUFLQywyQkFBTCxDQUFpQyxTQUFqQyxDQUFYLEVBQXdEUCxFQUF4RDtJQUNIO0VBQ0o7O0FBekJ3Qzs7QUEyQjlCUSxpSEFBZiIsImZpbGUiOiIxNzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBMYXllciBmcm9tIFwiLi9MYXllci5qc1wiO1xuaW1wb3J0IHtpc0RlZmluZWQsIHJhbmRvbVVVSUR9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIExheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSAnb3NoLWpzL2NvcmUvdWkvbGF5ZXIvQmluYXJ5RGF0YUxheWVyJztcbiAqXG4gKi9cbmNsYXNzIEJpbmFyeURhdGFMYXllciBleHRlbmRzIExheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdiaW5hcnlEYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBmcmFtZURhdGE6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5mcmFtZURhdGEpKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZnJhbWVEYXRhID0gcHJvcGVydGllcy5mcmFtZURhdGE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmluZWRJZCgnZGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRGcmFtZURhdGEpKXtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ2ZyYW1lRGF0YScsYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRGcmFtZURhdGEnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEZyYW1lRGF0YScpLCBmbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCaW5hcnlEYXRhTGF5ZXI7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7aXNEZWZpbmVkfSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSBcIi4vQmluYXJ5RGF0YUxheWVyXCI7XG5cbi8qKlxuICogQGV4dGVuZHMgQmluYXJ5RGF0YUxheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBWaWRlb0RhdGFMYXllciBmcm9tICdvc2gtanMvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllcic7XG4gKlxuICovXG5jbGFzcyBWaWRlb0RhdGFMYXllciBleHRlbmRzIEJpbmFyeURhdGFMYXllciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAndmlkZW9EYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgcm9sbDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5yb2xsKSl7XG4gICAgICAgICAgICBwcm9wcy5yb2xsID0gcHJvcGVydGllcy5yb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZWZpbmVkSWQoJ3ZpZGVvRGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRSb2xsKSl7XG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdyb2xsJyxhd2FpdCB0aGlzLmdldEZ1bmMoJ2dldFJvbGwnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFJvbGwnKSwgZm4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVmlkZW9EYXRhTGF5ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///174\n")},180:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(181);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(6).default\nvar update = add(\"764b465c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsR0FBK0c7QUFDckk7QUFDQSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQW9IO0FBQ3RJLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjE4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzY0YjQ2NWNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///180\n")},181:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUEwRztBQUNwSjtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMTgxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIub3NoLXZpZXcge1xcbiAgICB3aWR0aDoxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///181\n')},184:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(185);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(6).default\nvar update = add(\"47acb68c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/NDUyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUFxSDtBQUMzSTtBQUNBLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBb0g7QUFDdEksK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vVUlTbGlkZXIuY3NzXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0N2FjYjY4Y1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///184\n")},185:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(186);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.i, ".noUi-tooltip {\\n    border-radius: 10px;\\n    box-shadow: 2px 2px 5px 0px #777;\\n    background-color: #777;\\n    filter: alpha(opacity=80);\\n    -moz-opacity: 0.8;\\n    opacity: 0.8;\\n    border: none;\\n    color: #FFF;\\n    width: 100px;\\n    height: 23px;\\n    padding: 2px 2px 2px 2px;\\n}\\n.noUi-horizontal .noUi-handle-lower .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-horizontal .noUi-handle-upper .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-connect {\\n    background-color: rgba(5, 107, 166, 0.6);\\n}\\n\\n.noUi-tooltip:after {\\n    bottom: -14px;\\n    margin-left: -10px;\\n    border-top: 10px solid #fff;\\n}\\n\\n.noUi-tooltip:after {\\n    content: \'\';\\n    position: absolute;\\n    top: -10px;\\n    left: 50%;\\n    margin-left: -9px;\\n    width: 0;\\n    height: 0;\\n    border-left: 10px solid transparent;\\n    border-right: 10px solid transparent;\\n    border-top: none;\\n    border-bottom: 10px solid #777;\\n}\\n\\n.noUi-pips-horizontal {\\n    height:0px !important;\\n}\\n\\n\\n.noUi-handle:active {\\n    background-color: rgba(5, 107, 166, 0.6);\\n    box-shadow:none;\\n    border:none;\\n}\\n\\n\\n.noUi-horizontal {\\n    width: calc(100% - 50px);\\n}\\n\\n/** put range and control button side by side **/\\n\\n.osh-rangeslider-slider{\\n    float:left;\\n}\\n\\n.osh-rangeslider-control {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control-select {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control-select a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control a:after {\\n    font-family: FontAwesome;\\n    content: \\"\\\\f044\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n\\n.osh-rangeslider-control-select a:after{\\n    font-family: FontAwesome;\\n    content: \\"\\\\f046\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/ZjgwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQTBHO0FBQ3BKLHdDQUF3QyxtQkFBTyxDQUFDLEdBQWtKO0FBQ2xNO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUyxrQkFBa0IsMEJBQTBCLHVDQUF1Qyw2QkFBNkIsZ0NBQWdDLHdCQUF3QixtQkFBbUIsbUJBQW1CLGtCQUFrQixtQkFBbUIsbUJBQW1CLCtCQUErQixHQUFHLHFEQUFxRCxnQkFBZ0IsR0FBRyx1REFBdUQsZ0JBQWdCLEdBQUcsbUJBQW1CLCtDQUErQyxHQUFHLHlCQUF5QixvQkFBb0IseUJBQXlCLGtDQUFrQyxHQUFHLHlCQUF5QixrQkFBa0IseUJBQXlCLGlCQUFpQixnQkFBZ0Isd0JBQXdCLGVBQWUsZ0JBQWdCLDBDQUEwQywyQ0FBMkMsdUJBQXVCLHFDQUFxQyxHQUFHLDJCQUEyQiw0QkFBNEIsR0FBRywyQkFBMkIsK0NBQStDLHNCQUFzQixrQkFBa0IsR0FBRyx3QkFBd0IsK0JBQStCLEdBQUcsaUZBQWlGLGlCQUFpQixHQUFHLDhCQUE4QixrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLHFDQUFxQyxrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLCtCQUErQiw0QkFBNEIsR0FBRyxzQ0FBc0MsNEJBQTRCLEdBQUcsc0NBQXNDLCtCQUErQiwwQkFBMEIsNkJBQTZCLHFCQUFxQixHQUFHLDRDQUE0QywrQkFBK0IsMEJBQTBCLDZCQUE2QixxQkFBcUIsR0FBRztBQUNqM0Q7QUFDQSIsImZpbGUiOiIxODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnQtYXdlc29tZS00LjYuMy9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3NcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubm9VaS10b29sdGlwIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggMHB4ICM3Nzc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3Nzc7XFxuICAgIGZpbHRlcjogYWxwaGEob3BhY2l0eT04MCk7XFxuICAgIC1tb3otb3BhY2l0eTogMC44O1xcbiAgICBvcGFjaXR5OiAwLjg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY29sb3I6ICNGRkY7XFxuICAgIHdpZHRoOiAxMDBweDtcXG4gICAgaGVpZ2h0OiAyM3B4O1xcbiAgICBwYWRkaW5nOiAycHggMnB4IDJweCAycHg7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLWxvd2VyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLXVwcGVyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWNvbm5lY3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDUsIDEwNywgMTY2LCAwLjYpO1xcbn1cXG5cXG4ubm9VaS10b29sdGlwOmFmdGVyIHtcXG4gICAgYm90dG9tOiAtMTRweDtcXG4gICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICNmZmY7XFxufVxcblxcbi5ub1VpLXRvb2x0aXA6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0xMHB4O1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIG1hcmdpbi1sZWZ0OiAtOXB4O1xcbiAgICB3aWR0aDogMDtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBib3JkZXItbGVmdDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICM3Nzc7XFxufVxcblxcbi5ub1VpLXBpcHMtaG9yaXpvbnRhbCB7XFxuICAgIGhlaWdodDowcHggIWltcG9ydGFudDtcXG59XFxuXFxuXFxuLm5vVWktaGFuZGxlOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNSwgMTA3LCAxNjYsIDAuNik7XFxuICAgIGJveC1zaGFkb3c6bm9uZTtcXG4gICAgYm9yZGVyOm5vbmU7XFxufVxcblxcblxcbi5ub1VpLWhvcml6b250YWwge1xcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNTBweCk7XFxufVxcblxcbi8qKiBwdXQgcmFuZ2UgYW5kIGNvbnRyb2wgYnV0dG9uIHNpZGUgYnkgc2lkZSAqKi9cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLXNsaWRlcntcXG4gICAgZmxvYXQ6bGVmdDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sIHtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sLXNlbGVjdCB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICB3aWR0aDogMzBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbCBhe1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYXtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLWNvbnRyb2wgYTphZnRlciB7XFxuICAgIGZvbnQtZmFtaWx5OiBGb250QXdlc29tZTtcXG4gICAgY29udGVudDogXFxcIlxcXFxmMDQ0XFxcIjtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgZm9udC1zaXplOjMwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYTphZnRlcntcXG4gICAgZm9udC1mYW1pbHk6IEZvbnRBd2Vzb21lO1xcbiAgICBjb250ZW50OiBcXFwiXFxcXGYwNDZcXFwiO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICBmb250LXNpemU6MzBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///185\n')},186:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nvar ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(27);\nvar ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(187);\nvar ___CSS_LOADER_URL_IMPORT_1___ = __webpack_require__(188);\nvar ___CSS_LOADER_URL_IMPORT_2___ = __webpack_require__(189);\nvar ___CSS_LOADER_URL_IMPORT_3___ = __webpack_require__(190);\nvar ___CSS_LOADER_URL_IMPORT_4___ = __webpack_require__(191);\nvar ___CSS_LOADER_URL_IMPORT_5___ = __webpack_require__(192);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___, { hash: "?#iefix&v=4.6.3" });\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\nvar ___CSS_LOADER_URL_REPLACEMENT_4___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_4___);\nvar ___CSS_LOADER_URL_REPLACEMENT_5___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_5___, { hash: "#fontawesomeregular" });\n// Module\nexports.push([module.i, "/*!\\n *  Font Awesome 4.6.3 by @davegandy - http://fontawesome.io - @fontawesome\\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\\n */@font-face{font-family:\'FontAwesome\';src:url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");src:url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format(\'embedded-opentype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format(\'woff2\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format(\'woff\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format(\'truetype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ") format(\'svg\');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}  .fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}  .fa-2x{font-size:2em}  .fa-3x{font-size:3em}  .fa-4x{font-size:4em}  .fa-5x{font-size:5em}  .fa-fw{width:1.28571429em;text-align:center}  .fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}  .fa-ul>li{position:relative}  .fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}  .fa-li.fa-lg{left:-1.85714286em}  .fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}  .fa-pull-left{float:left}  .fa-pull-right{float:right}  .fa.fa-pull-left{margin-right:.3em}  .fa.fa-pull-right{margin-left:.3em}  .pull-right{float:right}  .pull-left{float:left}  .fa.pull-left{margin-right:.3em}  .fa.pull-right{margin-left:.3em}  .fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}  .fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}  @-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  @keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  .fa-rotate-90{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\\";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}  .fa-rotate-180{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\\";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}  .fa-rotate-270{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\\";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}  .fa-flip-horizontal{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\\";-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}  .fa-flip-vertical{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\\";-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}  :root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}  .fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}  .fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}  .fa-stack-1x{line-height:inherit}  .fa-stack-2x{font-size:2em}  .fa-inverse{color:#fff}  .fa-glass:before{content:\\"\\\\f000\\"}  .fa-music:before{content:\\"\\\\f001\\"}  .fa-search:before{content:\\"\\\\f002\\"}  .fa-envelope-o:before{content:\\"\\\\f003\\"}  .fa-heart:before{content:\\"\\\\f004\\"}  .fa-star:before{content:\\"\\\\f005\\"}  .fa-star-o:before{content:\\"\\\\f006\\"}  .fa-user:before{content:\\"\\\\f007\\"}  .fa-film:before{content:\\"\\\\f008\\"}  .fa-th-large:before{content:\\"\\\\f009\\"}  .fa-th:before{content:\\"\\\\f00a\\"}  .fa-th-list:before{content:\\"\\\\f00b\\"}  .fa-check:before{content:\\"\\\\f00c\\"}  .fa-remove:before,.fa-close:before,.fa-times:before{content:\\"\\\\f00d\\"}  .fa-search-plus:before{content:\\"\\\\f00e\\"}  .fa-search-minus:before{content:\\"\\\\f010\\"}  .fa-power-off:before{content:\\"\\\\f011\\"}  .fa-signal:before{content:\\"\\\\f012\\"}  .fa-gear:before,.fa-cog:before{content:\\"\\\\f013\\"}  .fa-trash-o:before{content:\\"\\\\f014\\"}  .fa-home:before{content:\\"\\\\f015\\"}  .fa-file-o:before{content:\\"\\\\f016\\"}  .fa-clock-o:before{content:\\"\\\\f017\\"}  .fa-road:before{content:\\"\\\\f018\\"}  .fa-download:before{content:\\"\\\\f019\\"}  .fa-arrow-circle-o-down:before{content:\\"\\\\f01a\\"}  .fa-arrow-circle-o-up:before{content:\\"\\\\f01b\\"}  .fa-inbox:before{content:\\"\\\\f01c\\"}  .fa-play-circle-o:before{content:\\"\\\\f01d\\"}  .fa-rotate-right:before,.fa-repeat:before{content:\\"\\\\f01e\\"}  .fa-refresh:before{content:\\"\\\\f021\\"}  .fa-list-alt:before{content:\\"\\\\f022\\"}  .fa-lock:before{content:\\"\\\\f023\\"}  .fa-flag:before{content:\\"\\\\f024\\"}  .fa-headphones:before{content:\\"\\\\f025\\"}  .fa-volume-off:before{content:\\"\\\\f026\\"}  .fa-volume-down:before{content:\\"\\\\f027\\"}  .fa-volume-up:before{content:\\"\\\\f028\\"}  .fa-qrcode:before{content:\\"\\\\f029\\"}  .fa-barcode:before{content:\\"\\\\f02a\\"}  .fa-tag:before{content:\\"\\\\f02b\\"}  .fa-tags:before{content:\\"\\\\f02c\\"}  .fa-book:before{content:\\"\\\\f02d\\"}  .fa-bookmark:before{content:\\"\\\\f02e\\"}  .fa-print:before{content:\\"\\\\f02f\\"}  .fa-camera:before{content:\\"\\\\f030\\"}  .fa-font:before{content:\\"\\\\f031\\"}  .fa-bold:before{content:\\"\\\\f032\\"}  .fa-italic:before{content:\\"\\\\f033\\"}  .fa-text-height:before{content:\\"\\\\f034\\"}  .fa-text-width:before{content:\\"\\\\f035\\"}  .fa-align-left:before{content:\\"\\\\f036\\"}  .fa-align-center:before{content:\\"\\\\f037\\"}  .fa-align-right:before{content:\\"\\\\f038\\"}  .fa-align-justify:before{content:\\"\\\\f039\\"}  .fa-list:before{content:\\"\\\\f03a\\"}  .fa-dedent:before,.fa-outdent:before{content:\\"\\\\f03b\\"}  .fa-indent:before{content:\\"\\\\f03c\\"}  .fa-video-camera:before{content:\\"\\\\f03d\\"}  .fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\\"\\\\f03e\\"}  .fa-pencil:before{content:\\"\\\\f040\\"}  .fa-map-marker:before{content:\\"\\\\f041\\"}  .fa-adjust:before{content:\\"\\\\f042\\"}  .fa-tint:before{content:\\"\\\\f043\\"}  .fa-edit:before,.fa-pencil-square-o:before{content:\\"\\\\f044\\"}  .fa-share-square-o:before{content:\\"\\\\f045\\"}  .fa-check-square-o:before{content:\\"\\\\f046\\"}  .fa-arrows:before{content:\\"\\\\f047\\"}  .fa-step-backward:before{content:\\"\\\\f048\\"}  .fa-fast-backward:before{content:\\"\\\\f049\\"}  .fa-backward:before{content:\\"\\\\f04a\\"}  .fa-play:before{content:\\"\\\\f04b\\"}  .fa-pause:before{content:\\"\\\\f04c\\"}  .fa-stop:before{content:\\"\\\\f04d\\"}  .fa-forward:before{content:\\"\\\\f04e\\"}  .fa-fast-forward:before{content:\\"\\\\f050\\"}  .fa-step-forward:before{content:\\"\\\\f051\\"}  .fa-eject:before{content:\\"\\\\f052\\"}  .fa-chevron-left:before{content:\\"\\\\f053\\"}  .fa-chevron-right:before{content:\\"\\\\f054\\"}  .fa-plus-circle:before{content:\\"\\\\f055\\"}  .fa-minus-circle:before{content:\\"\\\\f056\\"}  .fa-times-circle:before{content:\\"\\\\f057\\"}  .fa-check-circle:before{content:\\"\\\\f058\\"}  .fa-question-circle:before{content:\\"\\\\f059\\"}  .fa-info-circle:before{content:\\"\\\\f05a\\"}  .fa-crosshairs:before{content:\\"\\\\f05b\\"}  .fa-times-circle-o:before{content:\\"\\\\f05c\\"}  .fa-check-circle-o:before{content:\\"\\\\f05d\\"}  .fa-ban:before{content:\\"\\\\f05e\\"}  .fa-arrow-left:before{content:\\"\\\\f060\\"}  .fa-arrow-right:before{content:\\"\\\\f061\\"}  .fa-arrow-up:before{content:\\"\\\\f062\\"}  .fa-arrow-down:before{content:\\"\\\\f063\\"}  .fa-mail-forward:before,.fa-share:before{content:\\"\\\\f064\\"}  .fa-expand:before{content:\\"\\\\f065\\"}  .fa-compress:before{content:\\"\\\\f066\\"}  .fa-plus:before{content:\\"\\\\f067\\"}  .fa-minus:before{content:\\"\\\\f068\\"}  .fa-asterisk:before{content:\\"\\\\f069\\"}  .fa-exclamation-circle:before{content:\\"\\\\f06a\\"}  .fa-gift:before{content:\\"\\\\f06b\\"}  .fa-leaf:before{content:\\"\\\\f06c\\"}  .fa-fire:before{content:\\"\\\\f06d\\"}  .fa-eye:before{content:\\"\\\\f06e\\"}  .fa-eye-slash:before{content:\\"\\\\f070\\"}  .fa-warning:before,.fa-exclamation-triangle:before{content:\\"\\\\f071\\"}  .fa-plane:before{content:\\"\\\\f072\\"}  .fa-calendar:before{content:\\"\\\\f073\\"}  .fa-random:before{content:\\"\\\\f074\\"}  .fa-comment:before{content:\\"\\\\f075\\"}  .fa-magnet:before{content:\\"\\\\f076\\"}  .fa-chevron-up:before{content:\\"\\\\f077\\"}  .fa-chevron-down:before{content:\\"\\\\f078\\"}  .fa-retweet:before{content:\\"\\\\f079\\"}  .fa-shopping-cart:before{content:\\"\\\\f07a\\"}  .fa-folder:before{content:\\"\\\\f07b\\"}  .fa-folder-open:before{content:\\"\\\\f07c\\"}  .fa-arrows-v:before{content:\\"\\\\f07d\\"}  .fa-arrows-h:before{content:\\"\\\\f07e\\"}  .fa-bar-chart-o:before,.fa-bar-chart:before{content:\\"\\\\f080\\"}  .fa-twitter-square:before{content:\\"\\\\f081\\"}  .fa-facebook-square:before{content:\\"\\\\f082\\"}  .fa-camera-retro:before{content:\\"\\\\f083\\"}  .fa-key:before{content:\\"\\\\f084\\"}  .fa-gears:before,.fa-cogs:before{content:\\"\\\\f085\\"}  .fa-comments:before{content:\\"\\\\f086\\"}  .fa-thumbs-o-up:before{content:\\"\\\\f087\\"}  .fa-thumbs-o-down:before{content:\\"\\\\f088\\"}  .fa-star-half:before{content:\\"\\\\f089\\"}  .fa-heart-o:before{content:\\"\\\\f08a\\"}  .fa-sign-out:before{content:\\"\\\\f08b\\"}  .fa-linkedin-square:before{content:\\"\\\\f08c\\"}  .fa-thumb-tack:before{content:\\"\\\\f08d\\"}  .fa-external-link:before{content:\\"\\\\f08e\\"}  .fa-sign-in:before{content:\\"\\\\f090\\"}  .fa-trophy:before{content:\\"\\\\f091\\"}  .fa-github-square:before{content:\\"\\\\f092\\"}  .fa-upload:before{content:\\"\\\\f093\\"}  .fa-lemon-o:before{content:\\"\\\\f094\\"}  .fa-phone:before{content:\\"\\\\f095\\"}  .fa-square-o:before{content:\\"\\\\f096\\"}  .fa-bookmark-o:before{content:\\"\\\\f097\\"}  .fa-phone-square:before{content:\\"\\\\f098\\"}  .fa-twitter:before{content:\\"\\\\f099\\"}  .fa-facebook-f:before,.fa-facebook:before{content:\\"\\\\f09a\\"}  .fa-github:before{content:\\"\\\\f09b\\"}  .fa-unlock:before{content:\\"\\\\f09c\\"}  .fa-credit-card:before{content:\\"\\\\f09d\\"}  .fa-feed:before,.fa-rss:before{content:\\"\\\\f09e\\"}  .fa-hdd-o:before{content:\\"\\\\f0a0\\"}  .fa-bullhorn:before{content:\\"\\\\f0a1\\"}  .fa-bell:before{content:\\"\\\\f0f3\\"}  .fa-certificate:before{content:\\"\\\\f0a3\\"}  .fa-hand-o-right:before{content:\\"\\\\f0a4\\"}  .fa-hand-o-left:before{content:\\"\\\\f0a5\\"}  .fa-hand-o-up:before{content:\\"\\\\f0a6\\"}  .fa-hand-o-down:before{content:\\"\\\\f0a7\\"}  .fa-arrow-circle-left:before{content:\\"\\\\f0a8\\"}  .fa-arrow-circle-right:before{content:\\"\\\\f0a9\\"}  .fa-arrow-circle-up:before{content:\\"\\\\f0aa\\"}  .fa-arrow-circle-down:before{content:\\"\\\\f0ab\\"}  .fa-globe:before{content:\\"\\\\f0ac\\"}  .fa-wrench:before{content:\\"\\\\f0ad\\"}  .fa-tasks:before{content:\\"\\\\f0ae\\"}  .fa-filter:before{content:\\"\\\\f0b0\\"}  .fa-briefcase:before{content:\\"\\\\f0b1\\"}  .fa-arrows-alt:before{content:\\"\\\\f0b2\\"}  .fa-group:before,.fa-users:before{content:\\"\\\\f0c0\\"}  .fa-chain:before,.fa-link:before{content:\\"\\\\f0c1\\"}  .fa-cloud:before{content:\\"\\\\f0c2\\"}  .fa-flask:before{content:\\"\\\\f0c3\\"}  .fa-cut:before,.fa-scissors:before{content:\\"\\\\f0c4\\"}  .fa-copy:before,.fa-files-o:before{content:\\"\\\\f0c5\\"}  .fa-paperclip:before{content:\\"\\\\f0c6\\"}  .fa-save:before,.fa-floppy-o:before{content:\\"\\\\f0c7\\"}  .fa-square:before{content:\\"\\\\f0c8\\"}  .fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\\"\\\\f0c9\\"}  .fa-list-ul:before{content:\\"\\\\f0ca\\"}  .fa-list-ol:before{content:\\"\\\\f0cb\\"}  .fa-strikethrough:before{content:\\"\\\\f0cc\\"}  .fa-underline:before{content:\\"\\\\f0cd\\"}  .fa-table:before{content:\\"\\\\f0ce\\"}  .fa-magic:before{content:\\"\\\\f0d0\\"}  .fa-truck:before{content:\\"\\\\f0d1\\"}  .fa-pinterest:before{content:\\"\\\\f0d2\\"}  .fa-pinterest-square:before{content:\\"\\\\f0d3\\"}  .fa-google-plus-square:before{content:\\"\\\\f0d4\\"}  .fa-google-plus:before{content:\\"\\\\f0d5\\"}  .fa-money:before{content:\\"\\\\f0d6\\"}  .fa-caret-down:before{content:\\"\\\\f0d7\\"}  .fa-caret-up:before{content:\\"\\\\f0d8\\"}  .fa-caret-left:before{content:\\"\\\\f0d9\\"}  .fa-caret-right:before{content:\\"\\\\f0da\\"}  .fa-columns:before{content:\\"\\\\f0db\\"}  .fa-unsorted:before,.fa-sort:before{content:\\"\\\\f0dc\\"}  .fa-sort-down:before,.fa-sort-desc:before{content:\\"\\\\f0dd\\"}  .fa-sort-up:before,.fa-sort-asc:before{content:\\"\\\\f0de\\"}  .fa-envelope:before{content:\\"\\\\f0e0\\"}  .fa-linkedin:before{content:\\"\\\\f0e1\\"}  .fa-rotate-left:before,.fa-undo:before{content:\\"\\\\f0e2\\"}  .fa-legal:before,.fa-gavel:before{content:\\"\\\\f0e3\\"}  .fa-dashboard:before,.fa-tachometer:before{content:\\"\\\\f0e4\\"}  .fa-comment-o:before{content:\\"\\\\f0e5\\"}  .fa-comments-o:before{content:\\"\\\\f0e6\\"}  .fa-flash:before,.fa-bolt:before{content:\\"\\\\f0e7\\"}  .fa-sitemap:before{content:\\"\\\\f0e8\\"}  .fa-umbrella:before{content:\\"\\\\f0e9\\"}  .fa-paste:before,.fa-clipboard:before{content:\\"\\\\f0ea\\"}  .fa-lightbulb-o:before{content:\\"\\\\f0eb\\"}  .fa-exchange:before{content:\\"\\\\f0ec\\"}  .fa-cloud-download:before{content:\\"\\\\f0ed\\"}  .fa-cloud-upload:before{content:\\"\\\\f0ee\\"}  .fa-user-md:before{content:\\"\\\\f0f0\\"}  .fa-stethoscope:before{content:\\"\\\\f0f1\\"}  .fa-suitcase:before{content:\\"\\\\f0f2\\"}  .fa-bell-o:before{content:\\"\\\\f0a2\\"}  .fa-coffee:before{content:\\"\\\\f0f4\\"}  .fa-cutlery:before{content:\\"\\\\f0f5\\"}  .fa-file-text-o:before{content:\\"\\\\f0f6\\"}  .fa-building-o:before{content:\\"\\\\f0f7\\"}  .fa-hospital-o:before{content:\\"\\\\f0f8\\"}  .fa-ambulance:before{content:\\"\\\\f0f9\\"}  .fa-medkit:before{content:\\"\\\\f0fa\\"}  .fa-fighter-jet:before{content:\\"\\\\f0fb\\"}  .fa-beer:before{content:\\"\\\\f0fc\\"}  .fa-h-square:before{content:\\"\\\\f0fd\\"}  .fa-plus-square:before{content:\\"\\\\f0fe\\"}  .fa-angle-double-left:before{content:\\"\\\\f100\\"}  .fa-angle-double-right:before{content:\\"\\\\f101\\"}  .fa-angle-double-up:before{content:\\"\\\\f102\\"}  .fa-angle-double-down:before{content:\\"\\\\f103\\"}  .fa-angle-left:before{content:\\"\\\\f104\\"}  .fa-angle-right:before{content:\\"\\\\f105\\"}  .fa-angle-up:before{content:\\"\\\\f106\\"}  .fa-angle-down:before{content:\\"\\\\f107\\"}  .fa-desktop:before{content:\\"\\\\f108\\"}  .fa-laptop:before{content:\\"\\\\f109\\"}  .fa-tablet:before{content:\\"\\\\f10a\\"}  .fa-mobile-phone:before,.fa-mobile:before{content:\\"\\\\f10b\\"}  .fa-circle-o:before{content:\\"\\\\f10c\\"}  .fa-quote-left:before{content:\\"\\\\f10d\\"}  .fa-quote-right:before{content:\\"\\\\f10e\\"}  .fa-spinner:before{content:\\"\\\\f110\\"}  .fa-circle:before{content:\\"\\\\f111\\"}  .fa-mail-reply:before,.fa-reply:before{content:\\"\\\\f112\\"}  .fa-github-alt:before{content:\\"\\\\f113\\"}  .fa-folder-o:before{content:\\"\\\\f114\\"}  .fa-folder-open-o:before{content:\\"\\\\f115\\"}  .fa-smile-o:before{content:\\"\\\\f118\\"}  .fa-frown-o:before{content:\\"\\\\f119\\"}  .fa-meh-o:before{content:\\"\\\\f11a\\"}  .fa-gamepad:before{content:\\"\\\\f11b\\"}  .fa-keyboard-o:before{content:\\"\\\\f11c\\"}  .fa-flag-o:before{content:\\"\\\\f11d\\"}  .fa-flag-checkered:before{content:\\"\\\\f11e\\"}  .fa-terminal:before{content:\\"\\\\f120\\"}  .fa-code:before{content:\\"\\\\f121\\"}  .fa-mail-reply-all:before,.fa-reply-all:before{content:\\"\\\\f122\\"}  .fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\\"\\\\f123\\"}  .fa-location-arrow:before{content:\\"\\\\f124\\"}  .fa-crop:before{content:\\"\\\\f125\\"}  .fa-code-fork:before{content:\\"\\\\f126\\"}  .fa-unlink:before,.fa-chain-broken:before{content:\\"\\\\f127\\"}  .fa-question:before{content:\\"\\\\f128\\"}  .fa-info:before{content:\\"\\\\f129\\"}  .fa-exclamation:before{content:\\"\\\\f12a\\"}  .fa-superscript:before{content:\\"\\\\f12b\\"}  .fa-subscript:before{content:\\"\\\\f12c\\"}  .fa-eraser:before{content:\\"\\\\f12d\\"}  .fa-puzzle-piece:before{content:\\"\\\\f12e\\"}  .fa-microphone:before{content:\\"\\\\f130\\"}  .fa-microphone-slash:before{content:\\"\\\\f131\\"}  .fa-shield:before{content:\\"\\\\f132\\"}  .fa-calendar-o:before{content:\\"\\\\f133\\"}  .fa-fire-extinguisher:before{content:\\"\\\\f134\\"}  .fa-rocket:before{content:\\"\\\\f135\\"}  .fa-maxcdn:before{content:\\"\\\\f136\\"}  .fa-chevron-circle-left:before{content:\\"\\\\f137\\"}  .fa-chevron-circle-right:before{content:\\"\\\\f138\\"}  .fa-chevron-circle-up:before{content:\\"\\\\f139\\"}  .fa-chevron-circle-down:before{content:\\"\\\\f13a\\"}  .fa-html5:before{content:\\"\\\\f13b\\"}  .fa-css3:before{content:\\"\\\\f13c\\"}  .fa-anchor:before{content:\\"\\\\f13d\\"}  .fa-unlock-alt:before{content:\\"\\\\f13e\\"}  .fa-bullseye:before{content:\\"\\\\f140\\"}  .fa-ellipsis-h:before{content:\\"\\\\f141\\"}  .fa-ellipsis-v:before{content:\\"\\\\f142\\"}  .fa-rss-square:before{content:\\"\\\\f143\\"}  .fa-play-circle:before{content:\\"\\\\f144\\"}  .fa-ticket:before{content:\\"\\\\f145\\"}  .fa-minus-square:before{content:\\"\\\\f146\\"}  .fa-minus-square-o:before{content:\\"\\\\f147\\"}  .fa-level-up:before{content:\\"\\\\f148\\"}  .fa-level-down:before{content:\\"\\\\f149\\"}  .fa-check-square:before{content:\\"\\\\f14a\\"}  .fa-pencil-square:before{content:\\"\\\\f14b\\"}  .fa-external-link-square:before{content:\\"\\\\f14c\\"}  .fa-share-square:before{content:\\"\\\\f14d\\"}  .fa-compass:before{content:\\"\\\\f14e\\"}  .fa-toggle-down:before,.fa-caret-square-o-down:before{content:\\"\\\\f150\\"}  .fa-toggle-up:before,.fa-caret-square-o-up:before{content:\\"\\\\f151\\"}  .fa-toggle-right:before,.fa-caret-square-o-right:before{content:\\"\\\\f152\\"}  .fa-euro:before,.fa-eur:before{content:\\"\\\\f153\\"}  .fa-gbp:before{content:\\"\\\\f154\\"}  .fa-dollar:before,.fa-usd:before{content:\\"\\\\f155\\"}  .fa-rupee:before,.fa-inr:before{content:\\"\\\\f156\\"}  .fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\\"\\\\f157\\"}  .fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\\"\\\\f158\\"}  .fa-won:before,.fa-krw:before{content:\\"\\\\f159\\"}  .fa-bitcoin:before,.fa-btc:before{content:\\"\\\\f15a\\"}  .fa-file:before{content:\\"\\\\f15b\\"}  .fa-file-text:before{content:\\"\\\\f15c\\"}  .fa-sort-alpha-asc:before{content:\\"\\\\f15d\\"}  .fa-sort-alpha-desc:before{content:\\"\\\\f15e\\"}  .fa-sort-amount-asc:before{content:\\"\\\\f160\\"}  .fa-sort-amount-desc:before{content:\\"\\\\f161\\"}  .fa-sort-numeric-asc:before{content:\\"\\\\f162\\"}  .fa-sort-numeric-desc:before{content:\\"\\\\f163\\"}  .fa-thumbs-up:before{content:\\"\\\\f164\\"}  .fa-thumbs-down:before{content:\\"\\\\f165\\"}  .fa-youtube-square:before{content:\\"\\\\f166\\"}  .fa-youtube:before{content:\\"\\\\f167\\"}  .fa-xing:before{content:\\"\\\\f168\\"}  .fa-xing-square:before{content:\\"\\\\f169\\"}  .fa-youtube-play:before{content:\\"\\\\f16a\\"}  .fa-dropbox:before{content:\\"\\\\f16b\\"}  .fa-stack-overflow:before{content:\\"\\\\f16c\\"}  .fa-instagram:before{content:\\"\\\\f16d\\"}  .fa-flickr:before{content:\\"\\\\f16e\\"}  .fa-adn:before{content:\\"\\\\f170\\"}  .fa-bitbucket:before{content:\\"\\\\f171\\"}  .fa-bitbucket-square:before{content:\\"\\\\f172\\"}  .fa-tumblr:before{content:\\"\\\\f173\\"}  .fa-tumblr-square:before{content:\\"\\\\f174\\"}  .fa-long-arrow-down:before{content:\\"\\\\f175\\"}  .fa-long-arrow-up:before{content:\\"\\\\f176\\"}  .fa-long-arrow-left:before{content:\\"\\\\f177\\"}  .fa-long-arrow-right:before{content:\\"\\\\f178\\"}  .fa-apple:before{content:\\"\\\\f179\\"}  .fa-windows:before{content:\\"\\\\f17a\\"}  .fa-android:before{content:\\"\\\\f17b\\"}  .fa-linux:before{content:\\"\\\\f17c\\"}  .fa-dribbble:before{content:\\"\\\\f17d\\"}  .fa-skype:before{content:\\"\\\\f17e\\"}  .fa-foursquare:before{content:\\"\\\\f180\\"}  .fa-trello:before{content:\\"\\\\f181\\"}  .fa-female:before{content:\\"\\\\f182\\"}  .fa-male:before{content:\\"\\\\f183\\"}  .fa-gittip:before,.fa-gratipay:before{content:\\"\\\\f184\\"}  .fa-sun-o:before{content:\\"\\\\f185\\"}  .fa-moon-o:before{content:\\"\\\\f186\\"}  .fa-archive:before{content:\\"\\\\f187\\"}  .fa-bug:before{content:\\"\\\\f188\\"}  .fa-vk:before{content:\\"\\\\f189\\"}  .fa-weibo:before{content:\\"\\\\f18a\\"}  .fa-renren:before{content:\\"\\\\f18b\\"}  .fa-pagelines:before{content:\\"\\\\f18c\\"}  .fa-stack-exchange:before{content:\\"\\\\f18d\\"}  .fa-arrow-circle-o-right:before{content:\\"\\\\f18e\\"}  .fa-arrow-circle-o-left:before{content:\\"\\\\f190\\"}  .fa-toggle-left:before,.fa-caret-square-o-left:before{content:\\"\\\\f191\\"}  .fa-dot-circle-o:before{content:\\"\\\\f192\\"}  .fa-wheelchair:before{content:\\"\\\\f193\\"}  .fa-vimeo-square:before{content:\\"\\\\f194\\"}  .fa-turkish-lira:before,.fa-try:before{content:\\"\\\\f195\\"}  .fa-plus-square-o:before{content:\\"\\\\f196\\"}  .fa-space-shuttle:before{content:\\"\\\\f197\\"}  .fa-slack:before{content:\\"\\\\f198\\"}  .fa-envelope-square:before{content:\\"\\\\f199\\"}  .fa-wordpress:before{content:\\"\\\\f19a\\"}  .fa-openid:before{content:\\"\\\\f19b\\"}  .fa-institution:before,.fa-bank:before,.fa-university:before{content:\\"\\\\f19c\\"}  .fa-mortar-board:before,.fa-graduation-cap:before{content:\\"\\\\f19d\\"}  .fa-yahoo:before{content:\\"\\\\f19e\\"}  .fa-google:before{content:\\"\\\\f1a0\\"}  .fa-reddit:before{content:\\"\\\\f1a1\\"}  .fa-reddit-square:before{content:\\"\\\\f1a2\\"}  .fa-stumbleupon-circle:before{content:\\"\\\\f1a3\\"}  .fa-stumbleupon:before{content:\\"\\\\f1a4\\"}  .fa-delicious:before{content:\\"\\\\f1a5\\"}  .fa-digg:before{content:\\"\\\\f1a6\\"}  .fa-pied-piper-pp:before{content:\\"\\\\f1a7\\"}  .fa-pied-piper-alt:before{content:\\"\\\\f1a8\\"}  .fa-drupal:before{content:\\"\\\\f1a9\\"}  .fa-joomla:before{content:\\"\\\\f1aa\\"}  .fa-language:before{content:\\"\\\\f1ab\\"}  .fa-fax:before{content:\\"\\\\f1ac\\"}  .fa-building:before{content:\\"\\\\f1ad\\"}  .fa-child:before{content:\\"\\\\f1ae\\"}  .fa-paw:before{content:\\"\\\\f1b0\\"}  .fa-spoon:before{content:\\"\\\\f1b1\\"}  .fa-cube:before{content:\\"\\\\f1b2\\"}  .fa-cubes:before{content:\\"\\\\f1b3\\"}  .fa-behance:before{content:\\"\\\\f1b4\\"}  .fa-behance-square:before{content:\\"\\\\f1b5\\"}  .fa-steam:before{content:\\"\\\\f1b6\\"}  .fa-steam-square:before{content:\\"\\\\f1b7\\"}  .fa-recycle:before{content:\\"\\\\f1b8\\"}  .fa-automobile:before,.fa-car:before{content:\\"\\\\f1b9\\"}  .fa-cab:before,.fa-taxi:before{content:\\"\\\\f1ba\\"}  .fa-tree:before{content:\\"\\\\f1bb\\"}  .fa-spotify:before{content:\\"\\\\f1bc\\"}  .fa-deviantart:before{content:\\"\\\\f1bd\\"}  .fa-soundcloud:before{content:\\"\\\\f1be\\"}  .fa-database:before{content:\\"\\\\f1c0\\"}  .fa-file-pdf-o:before{content:\\"\\\\f1c1\\"}  .fa-file-word-o:before{content:\\"\\\\f1c2\\"}  .fa-file-excel-o:before{content:\\"\\\\f1c3\\"}  .fa-file-powerpoint-o:before{content:\\"\\\\f1c4\\"}  .fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\\"\\\\f1c5\\"}  .fa-file-zip-o:before,.fa-file-archive-o:before{content:\\"\\\\f1c6\\"}  .fa-file-sound-o:before,.fa-file-audio-o:before{content:\\"\\\\f1c7\\"}  .fa-file-movie-o:before,.fa-file-video-o:before{content:\\"\\\\f1c8\\"}  .fa-file-code-o:before{content:\\"\\\\f1c9\\"}  .fa-vine:before{content:\\"\\\\f1ca\\"}  .fa-codepen:before{content:\\"\\\\f1cb\\"}  .fa-jsfiddle:before{content:\\"\\\\f1cc\\"}  .fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\\"\\\\f1cd\\"}  .fa-circle-o-notch:before{content:\\"\\\\f1ce\\"}  .fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:\\"\\\\f1d0\\"}  .fa-ge:before,.fa-empire:before{content:\\"\\\\f1d1\\"}  .fa-git-square:before{content:\\"\\\\f1d2\\"}  .fa-git:before{content:\\"\\\\f1d3\\"}  .fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:\\"\\\\f1d4\\"}  .fa-tencent-weibo:before{content:\\"\\\\f1d5\\"}  .fa-qq:before{content:\\"\\\\f1d6\\"}  .fa-wechat:before,.fa-weixin:before{content:\\"\\\\f1d7\\"}  .fa-send:before,.fa-paper-plane:before{content:\\"\\\\f1d8\\"}  .fa-send-o:before,.fa-paper-plane-o:before{content:\\"\\\\f1d9\\"}  .fa-history:before{content:\\"\\\\f1da\\"}  .fa-circle-thin:before{content:\\"\\\\f1db\\"}  .fa-header:before{content:\\"\\\\f1dc\\"}  .fa-paragraph:before{content:\\"\\\\f1dd\\"}  .fa-sliders:before{content:\\"\\\\f1de\\"}  .fa-share-alt:before{content:\\"\\\\f1e0\\"}  .fa-share-alt-square:before{content:\\"\\\\f1e1\\"}  .fa-bomb:before{content:\\"\\\\f1e2\\"}  .fa-soccer-ball-o:before,.fa-futbol-o:before{content:\\"\\\\f1e3\\"}  .fa-tty:before{content:\\"\\\\f1e4\\"}  .fa-binoculars:before{content:\\"\\\\f1e5\\"}  .fa-plug:before{content:\\"\\\\f1e6\\"}  .fa-slideshare:before{content:\\"\\\\f1e7\\"}  .fa-twitch:before{content:\\"\\\\f1e8\\"}  .fa-yelp:before{content:\\"\\\\f1e9\\"}  .fa-newspaper-o:before{content:\\"\\\\f1ea\\"}  .fa-wifi:before{content:\\"\\\\f1eb\\"}  .fa-calculator:before{content:\\"\\\\f1ec\\"}  .fa-paypal:before{content:\\"\\\\f1ed\\"}  .fa-google-wallet:before{content:\\"\\\\f1ee\\"}  .fa-cc-visa:before{content:\\"\\\\f1f0\\"}  .fa-cc-mastercard:before{content:\\"\\\\f1f1\\"}  .fa-cc-discover:before{content:\\"\\\\f1f2\\"}  .fa-cc-amex:before{content:\\"\\\\f1f3\\"}  .fa-cc-paypal:before{content:\\"\\\\f1f4\\"}  .fa-cc-stripe:before{content:\\"\\\\f1f5\\"}  .fa-bell-slash:before{content:\\"\\\\f1f6\\"}  .fa-bell-slash-o:before{content:\\"\\\\f1f7\\"}  .fa-trash:before{content:\\"\\\\f1f8\\"}  .fa-copyright:before{content:\\"\\\\f1f9\\"}  .fa-at:before{content:\\"\\\\f1fa\\"}  .fa-eyedropper:before{content:\\"\\\\f1fb\\"}  .fa-paint-brush:before{content:\\"\\\\f1fc\\"}  .fa-birthday-cake:before{content:\\"\\\\f1fd\\"}  .fa-area-chart:before{content:\\"\\\\f1fe\\"}  .fa-pie-chart:before{content:\\"\\\\f200\\"}  .fa-line-chart:before{content:\\"\\\\f201\\"}  .fa-lastfm:before{content:\\"\\\\f202\\"}  .fa-lastfm-square:before{content:\\"\\\\f203\\"}  .fa-toggle-off:before{content:\\"\\\\f204\\"}  .fa-toggle-on:before{content:\\"\\\\f205\\"}  .fa-bicycle:before{content:\\"\\\\f206\\"}  .fa-bus:before{content:\\"\\\\f207\\"}  .fa-ioxhost:before{content:\\"\\\\f208\\"}  .fa-angellist:before{content:\\"\\\\f209\\"}  .fa-cc:before{content:\\"\\\\f20a\\"}  .fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\\"\\\\f20b\\"}  .fa-meanpath:before{content:\\"\\\\f20c\\"}  .fa-buysellads:before{content:\\"\\\\f20d\\"}  .fa-connectdevelop:before{content:\\"\\\\f20e\\"}  .fa-dashcube:before{content:\\"\\\\f210\\"}  .fa-forumbee:before{content:\\"\\\\f211\\"}  .fa-leanpub:before{content:\\"\\\\f212\\"}  .fa-sellsy:before{content:\\"\\\\f213\\"}  .fa-shirtsinbulk:before{content:\\"\\\\f214\\"}  .fa-simplybuilt:before{content:\\"\\\\f215\\"}  .fa-skyatlas:before{content:\\"\\\\f216\\"}  .fa-cart-plus:before{content:\\"\\\\f217\\"}  .fa-cart-arrow-down:before{content:\\"\\\\f218\\"}  .fa-diamond:before{content:\\"\\\\f219\\"}  .fa-ship:before{content:\\"\\\\f21a\\"}  .fa-user-secret:before{content:\\"\\\\f21b\\"}  .fa-motorcycle:before{content:\\"\\\\f21c\\"}  .fa-street-view:before{content:\\"\\\\f21d\\"}  .fa-heartbeat:before{content:\\"\\\\f21e\\"}  .fa-venus:before{content:\\"\\\\f221\\"}  .fa-mars:before{content:\\"\\\\f222\\"}  .fa-mercury:before{content:\\"\\\\f223\\"}  .fa-intersex:before,.fa-transgender:before{content:\\"\\\\f224\\"}  .fa-transgender-alt:before{content:\\"\\\\f225\\"}  .fa-venus-double:before{content:\\"\\\\f226\\"}  .fa-mars-double:before{content:\\"\\\\f227\\"}  .fa-venus-mars:before{content:\\"\\\\f228\\"}  .fa-mars-stroke:before{content:\\"\\\\f229\\"}  .fa-mars-stroke-v:before{content:\\"\\\\f22a\\"}  .fa-mars-stroke-h:before{content:\\"\\\\f22b\\"}  .fa-neuter:before{content:\\"\\\\f22c\\"}  .fa-genderless:before{content:\\"\\\\f22d\\"}  .fa-facebook-official:before{content:\\"\\\\f230\\"}  .fa-pinterest-p:before{content:\\"\\\\f231\\"}  .fa-whatsapp:before{content:\\"\\\\f232\\"}  .fa-server:before{content:\\"\\\\f233\\"}  .fa-user-plus:before{content:\\"\\\\f234\\"}  .fa-user-times:before{content:\\"\\\\f235\\"}  .fa-hotel:before,.fa-bed:before{content:\\"\\\\f236\\"}  .fa-viacoin:before{content:\\"\\\\f237\\"}  .fa-train:before{content:\\"\\\\f238\\"}  .fa-subway:before{content:\\"\\\\f239\\"}  .fa-medium:before{content:\\"\\\\f23a\\"}  .fa-yc:before,.fa-y-combinator:before{content:\\"\\\\f23b\\"}  .fa-optin-monster:before{content:\\"\\\\f23c\\"}  .fa-opencart:before{content:\\"\\\\f23d\\"}  .fa-expeditedssl:before{content:\\"\\\\f23e\\"}  .fa-battery-4:before,.fa-battery-full:before{content:\\"\\\\f240\\"}  .fa-battery-3:before,.fa-battery-three-quarters:before{content:\\"\\\\f241\\"}  .fa-battery-2:before,.fa-battery-half:before{content:\\"\\\\f242\\"}  .fa-battery-1:before,.fa-battery-quarter:before{content:\\"\\\\f243\\"}  .fa-battery-0:before,.fa-battery-empty:before{content:\\"\\\\f244\\"}  .fa-mouse-pointer:before{content:\\"\\\\f245\\"}  .fa-i-cursor:before{content:\\"\\\\f246\\"}  .fa-object-group:before{content:\\"\\\\f247\\"}  .fa-object-ungroup:before{content:\\"\\\\f248\\"}  .fa-sticky-note:before{content:\\"\\\\f249\\"}  .fa-sticky-note-o:before{content:\\"\\\\f24a\\"}  .fa-cc-jcb:before{content:\\"\\\\f24b\\"}  .fa-cc-diners-club:before{content:\\"\\\\f24c\\"}  .fa-clone:before{content:\\"\\\\f24d\\"}  .fa-balance-scale:before{content:\\"\\\\f24e\\"}  .fa-hourglass-o:before{content:\\"\\\\f250\\"}  .fa-hourglass-1:before,.fa-hourglass-start:before{content:\\"\\\\f251\\"}  .fa-hourglass-2:before,.fa-hourglass-half:before{content:\\"\\\\f252\\"}  .fa-hourglass-3:before,.fa-hourglass-end:before{content:\\"\\\\f253\\"}  .fa-hourglass:before{content:\\"\\\\f254\\"}  .fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\\"\\\\f255\\"}  .fa-hand-stop-o:before,.fa-hand-paper-o:before{content:\\"\\\\f256\\"}  .fa-hand-scissors-o:before{content:\\"\\\\f257\\"}  .fa-hand-lizard-o:before{content:\\"\\\\f258\\"}  .fa-hand-spock-o:before{content:\\"\\\\f259\\"}  .fa-hand-pointer-o:before{content:\\"\\\\f25a\\"}  .fa-hand-peace-o:before{content:\\"\\\\f25b\\"}  .fa-trademark:before{content:\\"\\\\f25c\\"}  .fa-registered:before{content:\\"\\\\f25d\\"}  .fa-creative-commons:before{content:\\"\\\\f25e\\"}  .fa-gg:before{content:\\"\\\\f260\\"}  .fa-gg-circle:before{content:\\"\\\\f261\\"}  .fa-tripadvisor:before{content:\\"\\\\f262\\"}  .fa-odnoklassniki:before{content:\\"\\\\f263\\"}  .fa-odnoklassniki-square:before{content:\\"\\\\f264\\"}  .fa-get-pocket:before{content:\\"\\\\f265\\"}  .fa-wikipedia-w:before{content:\\"\\\\f266\\"}  .fa-safari:before{content:\\"\\\\f267\\"}  .fa-chrome:before{content:\\"\\\\f268\\"}  .fa-firefox:before{content:\\"\\\\f269\\"}  .fa-opera:before{content:\\"\\\\f26a\\"}  .fa-internet-explorer:before{content:\\"\\\\f26b\\"}  .fa-tv:before,.fa-television:before{content:\\"\\\\f26c\\"}  .fa-contao:before{content:\\"\\\\f26d\\"}  .fa-500px:before{content:\\"\\\\f26e\\"}  .fa-amazon:before{content:\\"\\\\f270\\"}  .fa-calendar-plus-o:before{content:\\"\\\\f271\\"}  .fa-calendar-minus-o:before{content:\\"\\\\f272\\"}  .fa-calendar-times-o:before{content:\\"\\\\f273\\"}  .fa-calendar-check-o:before{content:\\"\\\\f274\\"}  .fa-industry:before{content:\\"\\\\f275\\"}  .fa-map-pin:before{content:\\"\\\\f276\\"}  .fa-map-signs:before{content:\\"\\\\f277\\"}  .fa-map-o:before{content:\\"\\\\f278\\"}  .fa-map:before{content:\\"\\\\f279\\"}  .fa-commenting:before{content:\\"\\\\f27a\\"}  .fa-commenting-o:before{content:\\"\\\\f27b\\"}  .fa-houzz:before{content:\\"\\\\f27c\\"}  .fa-vimeo:before{content:\\"\\\\f27d\\"}  .fa-black-tie:before{content:\\"\\\\f27e\\"}  .fa-fonticons:before{content:\\"\\\\f280\\"}  .fa-reddit-alien:before{content:\\"\\\\f281\\"}  .fa-edge:before{content:\\"\\\\f282\\"}  .fa-credit-card-alt:before{content:\\"\\\\f283\\"}  .fa-codiepie:before{content:\\"\\\\f284\\"}  .fa-modx:before{content:\\"\\\\f285\\"}  .fa-fort-awesome:before{content:\\"\\\\f286\\"}  .fa-usb:before{content:\\"\\\\f287\\"}  .fa-product-hunt:before{content:\\"\\\\f288\\"}  .fa-mixcloud:before{content:\\"\\\\f289\\"}  .fa-scribd:before{content:\\"\\\\f28a\\"}  .fa-pause-circle:before{content:\\"\\\\f28b\\"}  .fa-pause-circle-o:before{content:\\"\\\\f28c\\"}  .fa-stop-circle:before{content:\\"\\\\f28d\\"}  .fa-stop-circle-o:before{content:\\"\\\\f28e\\"}  .fa-shopping-bag:before{content:\\"\\\\f290\\"}  .fa-shopping-basket:before{content:\\"\\\\f291\\"}  .fa-hashtag:before{content:\\"\\\\f292\\"}  .fa-bluetooth:before{content:\\"\\\\f293\\"}  .fa-bluetooth-b:before{content:\\"\\\\f294\\"}  .fa-percent:before{content:\\"\\\\f295\\"}  .fa-gitlab:before{content:\\"\\\\f296\\"}  .fa-wpbeginner:before{content:\\"\\\\f297\\"}  .fa-wpforms:before{content:\\"\\\\f298\\"}  .fa-envira:before{content:\\"\\\\f299\\"}  .fa-universal-access:before{content:\\"\\\\f29a\\"}  .fa-wheelchair-alt:before{content:\\"\\\\f29b\\"}  .fa-question-circle-o:before{content:\\"\\\\f29c\\"}  .fa-blind:before{content:\\"\\\\f29d\\"}  .fa-audio-description:before{content:\\"\\\\f29e\\"}  .fa-volume-control-phone:before{content:\\"\\\\f2a0\\"}  .fa-braille:before{content:\\"\\\\f2a1\\"}  .fa-assistive-listening-systems:before{content:\\"\\\\f2a2\\"}  .fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:\\"\\\\f2a3\\"}  .fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:\\"\\\\f2a4\\"}  .fa-glide:before{content:\\"\\\\f2a5\\"}  .fa-glide-g:before{content:\\"\\\\f2a6\\"}  .fa-signing:before,.fa-sign-language:before{content:\\"\\\\f2a7\\"}  .fa-low-vision:before{content:\\"\\\\f2a8\\"}  .fa-viadeo:before{content:\\"\\\\f2a9\\"}  .fa-viadeo-square:before{content:\\"\\\\f2aa\\"}  .fa-snapchat:before{content:\\"\\\\f2ab\\"}  .fa-snapchat-ghost:before{content:\\"\\\\f2ac\\"}  .fa-snapchat-square:before{content:\\"\\\\f2ad\\"}  .fa-pied-piper:before{content:\\"\\\\f2ae\\"}  .fa-first-order:before{content:\\"\\\\f2b0\\"}  .fa-yoast:before{content:\\"\\\\f2b1\\"}  .fa-themeisle:before{content:\\"\\\\f2b2\\"}  .fa-google-plus-circle:before,.fa-google-plus-official:before{content:\\"\\\\f2b3\\"}  .fa-fa:before,.fa-font-awesome:before{content:\\"\\\\f2b4\\"}  .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}  .sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///186\n')},187:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90P2UwODMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///187\n')},188:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90Pzc0ZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///188\n')},189:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff2?0317d582b93c20f68e059e389aecab33");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/NjE2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9GQUF1QiwrREFBK0QiLCJmaWxlIjoiMTg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/MDMxN2Q1ODJiOTNjMjBmNjhlMDU5ZTM4OWFlY2FiMzNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///189\n')},190:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff?f7f1738ca345185e01856ac55885b089");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZj82MmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb0ZBQXVCLDhEQUE4RCIsImZpbGUiOiIxOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udGF3ZXNvbWUtd2ViZm9udC53b2ZmP2Y3ZjE3MzhjYTM0NTE4NWUwMTg1NmFjNTU4ODViMDg5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///190\n')},191:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.ttf?f0af1680f082547a7aae4af9d841d693");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQudHRmPzYxMzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE5MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnR0Zj9mMGFmMTY4MGYwODI1NDdhN2FhZTRhZjlkODQxZDY5M1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///191\n')},192:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.svg?ed6298903ae1554c7f3e1a668c39fdcc");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuc3ZnP2E3NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE5Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnN2Zz9lZDYyOTg5MDNhZTE1NTRjN2YzZTFhNjY4YzM5ZmRjY1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///192\n')},23:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  FETCH_STARTED: \'fetch-start\',\n  FETCH_ENDED: \'fetch-end\',\n  CLOSED: "closed",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9jb25uZWN0b3IvU3RhdHVzLmpzP2E1ODciXSwibmFtZXMiOlsiU3RhdHVzIiwiQ09OTkVDVElORyIsIkNPTk5FQ1RFRCIsIkRJU0NPTk5FQ1RFRCIsIkZFVENIX1NUQVJURUQiLCJGRVRDSF9FTkRFRCIsIkNMT1NFRCIsIkNMT1NFRF9FUlJPUiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsTUFBTSxHQUFHO0VBQ2xCQyxVQUFVLEVBQUUsWUFETTtFQUVsQkMsU0FBUyxFQUFHLFdBRk07RUFHbEJDLFlBQVksRUFBRSxjQUhJO0VBSWxCQyxhQUFhLEVBQUUsYUFKRztFQUtsQkMsV0FBVyxFQUFFLFdBTEs7RUFNbEJDLE1BQU0sRUFBRSxRQU5VO0VBT2xCQyxZQUFZLEVBQUU7QUFQSSxDQUFmIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnVtIGZvciBjb25uZWN0aW9uIHN0YXR1cy5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgU3RhdHVzID0ge1xuICAgIENPTk5FQ1RJTkc6IFwiY29ubmVjdGluZ1wiLFxuICAgIENPTk5FQ1RFRDogIFwiY29ubmVjdGVkXCIsXG4gICAgRElTQ09OTkVDVEVEOiBcImRpc2Nvbm5lY3RlZFwiLFxuICAgIEZFVENIX1NUQVJURUQ6ICdmZXRjaC1zdGFydCcsXG4gICAgRkVUQ0hfRU5ERUQ6ICdmZXRjaC1lbmQnLFxuICAgIENMT1NFRDogXCJjbG9zZWRcIixcbiAgICBDTE9TRURfRVJST1I6IFwiY2xvc2VkLWVycm9yXCJcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n')},3:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Mode; });\n/**\n * Enum for datasource mode.\n * @readonly\n * @enum {{name: string}}\n */\nconst Mode = {\n  REPLAY: "replay",\n  BATCH: "batch",\n  REAL_TIME: "realTime"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL01vZGUuanM/NGUyNSJdLCJuYW1lcyI6WyJNb2RlIiwiUkVQTEFZIiwiQkFUQ0giLCJSRUFMX1RJTUUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLElBQUksR0FBRztFQUNoQkMsTUFBTSxFQUFFLFFBRFE7RUFFaEJDLEtBQUssRUFBRyxPQUZRO0VBR2hCQyxTQUFTLEVBQUU7QUFISyxDQUFiIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGRhdGFzb3VyY2UgbW9kZS5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgTW9kZSA9IHtcbiAgICBSRVBMQVk6IFwicmVwbGF5XCIsXG4gICAgQkFUQ0g6ICBcImJhdGNoXCIsXG4gICAgUkVBTF9USU1FOiBcInJlYWxUaW1lXCJcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},4:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return TIME_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\n/* unused harmony export MAGIC_END_PACKET */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\nconst MAGIC_END_PACKET = 'magic-packet';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIiwiTUFHSUNfRU5EX1BBQ0tFVCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDO0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsY0FBekIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IFRJTUVfU1lOQ0hST05JWkVSX1RPUElDID0gJ2RhdGEtc3luY2hyb25pemVyLXRpbWUtJztcblxuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX1RJTUVfVE9QSUMgPSAnZGF0YXNvdXJjZS10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuXG5leHBvcnQgY29uc3QgTUFHSUNfRU5EX1BBQ0tFVCA9ICdtYWdpYy1wYWNrZXQnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EventType; });\nconst EventType = {\n  DATA: 'data',\n  LAST_TIME: 'last-time',\n  MASTER_TIME: 'master-time',\n  STATUS: 'status',\n  TIME_CHANGED: 'time-changed',\n  CLOSED: 'closed'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9ldmVudC9FdmVudFR5cGUuanM/OWUzMCJdLCJuYW1lcyI6WyJFdmVudFR5cGUiLCJEQVRBIiwiTEFTVF9USU1FIiwiTUFTVEVSX1RJTUUiLCJTVEFUVVMiLCJUSU1FX0NIQU5HRUQiLCJDTE9TRUQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQU8sTUFBTUEsU0FBUyxHQUFHO0VBQ3JCQyxJQUFJLEVBQUUsTUFEZTtFQUVyQkMsU0FBUyxFQUFFLFdBRlU7RUFHckJDLFdBQVcsRUFBRSxhQUhRO0VBSXJCQyxNQUFNLEVBQUUsUUFKYTtFQUtyQkMsWUFBWSxFQUFFLGNBTE87RUFNckJDLE1BQU0sRUFBRTtBQU5hLENBQWxCIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRXZlbnRUeXBlID0ge1xuICAgIERBVEE6ICdkYXRhJyxcbiAgICBMQVNUX1RJTUU6ICdsYXN0LXRpbWUnLFxuICAgIE1BU1RFUl9USU1FOiAnbWFzdGVyLXRpbWUnLFxuICAgIFNUQVRVUzogJ3N0YXR1cycsXG4gICAgVElNRV9DSEFOR0VEOiAndGltZS1jaGFuZ2VkJyxcbiAgICBDTE9TRUQ6ICdjbG9zZWQnXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},9:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(180);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);\n/* harmony import */ var _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23);\n/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\nclass View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {boolean} [properties.destroyAfterMutation=true]  - call view destroy() function after detecting div root Mutation\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = [];\n    this.broadcastChannels = []; //this.divId = divId;\n\n    this.id = "view-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "q"])();\n    this.css = "";\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.container) ? properties.container : document.body;\n    let destroyAfterMutation = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.destroyAfterMutation) ? properties.destroyAfterMutation : true;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties)) {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n\n    if (destroyAfterMutation) {\n      const rootObserver = new MutationObserver(function (mutations) {\n        // try to get the div element by the id to check if it is still owned by the document object\n        if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(document.getElementById(that.divId))) {\n          this.disconnect();\n          that.destroy();\n        }\n      });\n      rootObserver.observe(document.body, {\n        childList: true\n      });\n    }\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  async setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {\n    this.removeAllFromLayers();\n\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n      console.log(`closing BC..`);\n    }\n\n    this.broadcastChannels = []; // remove DOM element\n    // this.elementDiv?.remove(); // does not compile with older webpack version ..\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.elementDiv)) {\n      this.elementDiv.remove();\n    }\n  }\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_DATA_TOPIC */ "a"] + dataSourceId);\n\n      broadcastChannel.onmessage = async event => {\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].STATUS && event.data.status === _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__[/* Status */ "a"].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].DATA) {\n          const that = this; // transform the data\n\n          await layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          await that.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_TIME_TOPIC */ "b"] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n\n      this.broadcastChannels.push(broadcastChannel);\n      this.broadcastChannels.push(timeBroadcastChannel);\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')}}]);