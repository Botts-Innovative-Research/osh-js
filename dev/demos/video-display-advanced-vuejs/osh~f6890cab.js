(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return hasValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return hex2rgb; });\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return capitalizeFirstLetter; });\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return merge; });\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Capitalize the first letter of a given string\n * @param {String} str - the input string\n * @returns {String} the result\n */\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      // Sinon on s’endort pendant le temps restant\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},10:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   * @param {Number} properties.timestamp - defines the timestamp of the data\n   * @param {Function} properties.getTimestamp - function which defines the timestamp of the data\n   * @param {Function} properties.onLeftClick - trigger onLeftClick marker event\n   * @param {Function} properties.onRightClick - trigger onRightClick marker event\n   * @param {Function} properties.onHover - trigger onHover marker event\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.init(properties);\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init(properties = this.properties) {\n    this.data = [];\n    this.propsById = {};\n    this.dataSourcesToFn = undefined;\n    this.props = {\n      id: "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "p"])(),\n      filter: true,\n      name: \'\',\n      description: \'\',\n      visible: true,\n      timestamp: true\n    };\n    this.dataSourceIds = undefined;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.dataSourceId)) {\n      this.dataSourceIds = [properties.dataSourceId];\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.dataSourceIds)) {\n      this.dataSourceIds = properties.dataSourceIds;\n    }\n\n    if (!this.dataSourceIds) {\n      this.dataSourceIds = [];\n    } // assertDefined(this.dataSourceIds, \'[Layer] dataSourceIds[] or dataSourceId\');\n\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.timestamp)) {\n      this.props.timestamp = properties.timestamp;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.initEvents();\n\n    if (this.checkFn("filter")) {\n      let fn = (rec, timestamp, options) => {\n        this.props.filter = this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timestamp, options) {\n        return true;\n      };\n\n      let fn = async (rec, timestamp, options) => {\n        this.props.filter = await this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'visible\', await this.getFunc(\'getVisible\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n\n    if (this.checkFn("getTimestamp")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'timestamp\', await this.getFunc(\'getTimestamp\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getTimestamp\'), fn);\n    }\n\n    if (this.checkFn("getName")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'name\', await this.getFunc(\'getName\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getName\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'description\', await this.getFunc(\'getDescription\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "n"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceIds\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.props.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   * @param {Boolean} [first=false] - set at the first position\n   */\n\n\n  addFn(dataSourceIds, fn, first = false) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      if (first) {\n        this.dataSourcesToFn[dataSourceId].unshift(fn);\n      } else {\n        this.dataSourcesToFn[dataSourceId].push(fn);\n      }\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  async setData(dataSourceId, records, options = {}) {\n    // store data into data props\n    this.data = [];\n    options.dataSourceId = dataSourceId;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n        this.props.filter = true;\n\n        for (let j = 0; j < records.length; j++) {\n          for (let i = 0; i < fnArr.length; i++) {\n            await fnArr[i](records[j].data, records[j].data.timestamp, options);\n\n            if (!this.props.filter) {\n              break;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props,\n              ...this.propsById[this.getId()]\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceId must be defined\');\n      return this.dataSourceIds;\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || this.dataSourceIds;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.init(this.properties);\n  }\n\n  updateProperty(propertyName, value) {\n    this.propsById[this.getId()][propertyName] = value;\n  }\n\n  checkExistingProps(id) {\n    return id in this.propsById;\n  }\n\n  setProps(id, props) {\n    this.propsById[id] = props;\n  }\n\n  setId(id, defaultProps) {\n    this.props.id = id;\n\n    if (!this.checkExistingProps(id)) {\n      this.setProps(id, defaultProps());\n    }\n  }\n\n  definedId(idName, props) {\n    if (this.checkFn(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)) {\n      let fn = async (rec, timestamp, options) => {\n        const id = await this.getFunc(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)(rec, timestamp, options);\n        this.setId(id, () => ({ ...props,\n          [idName]: id\n        }));\n      }; // must be first to assign correctly the first location to the right id if it is defined\n\n\n      this.addFn(this.getDataSourcesIdsByProperty(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`), fn, true);\n    } else {\n      this.setId(this.getId(), () => ({ ...props,\n        [idName]: this.getId()\n      }));\n    }\n  }\n\n  getCurrentProps() {\n    return this.propsById[this.getId()];\n  }\n\n  getIds() {\n    return Object.keys(this.propsById);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},13:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(5);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/worker/DataSource.worker.js\nvar DataSource_worker = __webpack_require__(168);\nvar DataSource_worker_default = /*#__PURE__*/__webpack_require__.n(DataSource_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(7);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource_datasource_DataSource {\n  constructor(name, properties) {\n    this.id = "DataSource-" + Object(Utils["p" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.eventSubscriptionMap = {};\n    this.init = undefined;\n    this.messagesMap = {};\n    this.mode = Mode["a" /* Mode */].REAL_TIME;\n\n    if (Object(Utils["m" /* isDefined */])(properties.mode)) {\n      this.mode = properties.mode;\n    }\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  getVersion() {\n    return 0;\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async createWorker(properties) {\n    return new DataSource_worker_default.a();\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    this.properties = { ...this.properties,\n      ...properties\n    };\n    return new Promise(resolve => {\n      this.postMessage({\n        message: \'update-properties\',\n        data: properties\n      }, resolve);\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    await this.doConnect();\n  }\n\n  async initDataSource() {\n    return new Promise(async (resolve, reject) => {\n      this.dataSourceWorker = await this.createWorker(this.properties);\n      this.handleWorkerMessage();\n      this.postMessage({\n        message: \'init\',\n        id: this.id,\n        properties: this.properties,\n        topics: {\n          data: this.getTopicId()\n        }\n      }, async message => {\n        // listen for Events to callback to subscriptions\n        const datasourceBroadcastChannel = new BroadcastChannel(this.getTopicId());\n\n        datasourceBroadcastChannel.onmessage = async message => {\n          await this.handleMessage(message);\n        };\n\n        resolve(message);\n      });\n    });\n  }\n\n  async handleMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  async checkInit() {\n    return new Promise(async (resolve, reject) => {\n      if (!Object(Utils["m" /* isDefined */])(this.init)) {\n        this.init = this.initDataSource();\n      }\n\n      await this.init;\n      resolve();\n    });\n  }\n\n  async doConnect() {\n    return new Promise(async resolve => {\n      this.postMessage({\n        message: \'connect\'\n      }, resolve);\n    });\n  }\n\n  async isConnected() {\n    return new Promise(async resolve => {\n      await this.checkInit();\n      this.postMessage({\n        message: \'is-connected\'\n      }, resolve);\n    });\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    return new Promise(async resolve => {\n      await this.checkInit();\n      this.postMessage({\n        message: \'disconnect\'\n      }, resolve);\n    });\n  }\n\n  postMessage(props, Fn) {\n    const messageId = Object(Utils["p" /* randomUUID */])();\n    this.dataSourceWorker.postMessage({ ...props,\n      messageId: messageId\n    });\n\n    if (Object(Utils["m" /* isDefined */])(Fn)) {\n      this.messagesMap[messageId] = Fn;\n    }\n  }\n\n  handleWorkerMessage() {\n    this.dataSourceWorker.onmessage = event => {\n      const id = event.data.messageId;\n\n      if (id in this.messagesMap) {\n        this.messagesMap[id](event.data.data);\n        delete this.messagesMap[id];\n      }\n    };\n  }\n\n  async onDisconnect() {}\n\n  reset() {}\n\n}\n\n/* harmony default export */ var DataSource_datasource = (DataSource_datasource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_datasource_TimeSeriesDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    Object(Utils["c" /* assertDefined */])(properties, \'Some properties must be defined\');\n    this.dataSynchronizer = undefined;\n  }\n\n  getTimeTopicId() {\n    return Constants["b" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.properties.mode;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    return this.properties.minTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    return this.properties.maxTime;\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {\n    this.properties.minTime = time;\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {\n    this.properties.maxTime = time;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.properties.replaySpeed;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.properties.replaySpeed = replaySpeed;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @private\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    return new Promise(async (resolve, reject) => {\n      await this.checkInit();\n      const topic = Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + dataSynchronizer.id;\n      this.dataSynchronizer = dataSynchronizer;\n      this.postMessage({\n        message: \'topics\',\n        topics: {\n          data: topic,\n          time: this.getTimeTopicId(),\n          sync: dataSynchronizer.getTimeTopicId()\n        }\n      }, resolve);\n    });\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    return new Promise(async resolve => {\n      await this.checkInit();\n      this.postMessage({\n        message: \'disconnect\'\n      }, resolve);\n    });\n  }\n\n  async doConnect() {\n    return new Promise(async resolve => {\n      let startTime = this.properties.startTime;\n\n      if (Object(Utils["m" /* isDefined */])(this.dataSynchronizer)) {\n        let st = (await this.dataSynchronizer.getCurrentTime()).data; // add 1 sec threshold\n\n        if (Object(Utils["m" /* isDefined */])(st)) {\n          startTime = new Date(st).toISOString();\n        }\n      }\n\n      this.postMessage({\n        message: \'connect\',\n        startTime: startTime\n      }, resolve);\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    return new Promise(async (resolve, reject) => {\n      this.postMessage({\n        message: \'topics\',\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }, async () => {\n        // listen for Events to callback to subscriptions\n        const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n        datasourceBroadcastChannel.onmessage = async message => {\n          await this.handleTimeMessage(message);\n        };\n\n        resolve();\n      });\n    });\n  }\n\n  async handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   */\n\n\n  async setTimeRange(startTime = this.getStartTime(), endTime = this.getEndTime(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode()) {\n    return this.updateProperties({\n      startTime: startTime,\n      endTime: endTime,\n      replaySpeed: replaySpeed,\n      reconnect: reconnect,\n      mode: mode\n    });\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_datasource = (TimeSeries_datasource_TimeSeriesDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/sos/SosGetResult.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_datasource_SosGetResult extends TimeSeries_datasource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}, \'http\', \'ws\', \'mqtt\', \'file\', \'topic\'\n   * @param {String} properties.endpointUrl the endpoint url, this property is ignored in case of using \'mqtt\' protocol, the properties.mqttOpts.endpointUrl will be used instead\n   * @param {String} properties.collection the collection, /procedures, /fois, /observations, /tasks, /datastreams/4778/obs\n   * @param {Boolean} properties.tls - defines if use secure TLS connection\n   * @param {Number} [properties.responseFormat=application/om+json] the response format (e.g application/om+json)\n   * @param {String[]} [properties.prefetchBatchSize=1000000] Number of elements to prefetch at a time\n   * @param {String[]} [properties.prefetchBatchDuration=10000] Duration before prefetching the next batch. N.b the next batch will be prefetched at 80% of this duration\n   */\n  constructor(name, properties) {\n    super(name, {\n      protocol: \'ws\',\n      // default for streaming\n      service: "SOS",\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      reconnectRetry: 10,\n      tls: false,\n      type: \'SosGetResult\',\n      mode: Mode["a" /* Mode */].REAL_TIME,\n      prefetchBatchSize: 250,\n      prefetchBatchDuration: 5000,\n      ...properties\n    });\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_datasource = __webpack_exports__["a"] = (SosGetResult_datasource_SosGetResult);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},162:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nconst initialStates = {};\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n   * Create the PointMarker\n   * @param {Object} properties\n   * @param {Number[]} properties.location - [x,y,z]\n   * @param {Number} [properties.orientation=0] -\n   * @param {String} properties.icon -\n   * @param {String} [properties.iconScale=1] - the icon scale size\n   * @param {String} [properties.iconColor="#000000"] - the icon color\n   * @param {Number[]} [properties.iconAnchor=[16,16]] -\n   * @param {Number[]} [properties.iconSize=[16,16]] -\n   * @param {Number} [properties.iconOpacity=0.75] - icon opacity\n   * @param {String} [properties.label=""] - the label to display\n   * @param {String} [properties.labelColor="#000000"] - color\n   * @param {String} [properties.labelOutlineColor=undefined] - color\n   * @param {String} [properties.labelBackgroundColor=undefined] -  color\n   * @param {Number} [properties.labelSize=16] -\n   * @param {Number} [properties.labelScale=1.0] - label scale\n   * @param {Number[]} [properties.labelOffset=[0,0]] -\n   * @param {Number} [properties.zIndex=0] - z-ordering of markers\n   * @param {Number} [properties.allowBillboardRotation=true] - allow billboard rotation\n   * @param {Function} [properties.getLocation] -\n   * @param {Function} [properties.getDescription] -\n   * @param {Function} [properties.getOrientation] -\n   * @param {Function} [properties.getIcon] -\n   * @param {Function} [properties.getIconColor] -\n   * @param {Function} [properties.getIconScale] -\n   * @param {Function} [properties.getLabel] -\n   * @param {Function} [properties.getLabelColor] -\n   * @param {Function} [properties.getLabelSize] -\n   * @param {Function} [properties.getZindex] - z-ordering of markers\n   * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   * @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n   * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      markerId: () => this.getId(),\n      location: null,\n      orientation: {\n        heading: 0\n      },\n      icon: null,\n      iconAnchor: [16, 16],\n      iconSize: [16, 16],\n      iconScale: 1.0,\n      iconColor: undefined,\n      iconOpacity: 0.75,\n      label: null,\n      labelColor: undefined,\n      labelOutlineColor: undefined,\n      labelBackgroundColor: undefined,\n      labelSize: 16,\n      labelScale: 1.0,\n      labelOffset: [0, 0],\n      zoomLevel: 15,\n      color: \'#000000\',\n      defaultToTerrainElevation: false,\n      zIndex: 0,\n      allowBillboardRotation: true,\n      options: {}\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.defaultToTerrainElevation)) {\n      props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.location, "location");\n      props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.orientation, "orientation");\n      props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.icon, "icon");\n      props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.iconScale, "iconScale");\n      props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconColor, "iconColor");\n      props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconOpacity)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconOpacity, "iconOpacity");\n      props.iconOpacity = properties.iconOpacity;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.label, "label");\n      props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelColor, "labelColor");\n      props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOutlineColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelOutlineColor, "labelOutlineColor");\n      props.labelOutlineColor = properties.labelOutlineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelBackgroundColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelBackgroundColor, "labelBackgroundColor");\n      props.labelBackgroundColor = properties.labelBackgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelSize, "labelSize");\n      props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelScale, "labelScale");\n      props.labelScale = properties.labelScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.zoomLevel, "zoomLevel");\n      props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "e"])(properties.zIndex, "zIndex");\n      props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.allowBillboardRotation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertBoolean */ "b"])(properties.allowBillboardRotation, "allowBillboardRotation");\n      props.allowBillboardRotation = properties.allowBillboardRotation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.color)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.color, "color");\n      props.color = properties.color;\n    }\n\n    this.definedId(\'markerId\', props);\n\n    if (this.checkFn("getLocation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'location\', await this.getFunc(\'getLocation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'orientation\', await this.getFunc(\'getOrientation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'icon\', await this.getFunc(\'getIcon\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconColor\', await this.getFunc(\'getIconColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconScale\', await this.getFunc(\'getIconScale\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'label\', await this.getFunc(\'getLabel\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelColor\', await this.getFunc(\'getLabelColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelSize\', await this.getFunc(\'getLabelSize\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'zIndex\', await this.getFunc(\'getZindex\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///162\n')},163:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(182);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(164);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(191);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(24);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(wnumb__WEBPACK_IMPORTED_MODULE_5__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * @extends View\n * @example\n *\n * import RangeSliderView from \'ext/view/RangeSliderView.js\';\n *\n * let rangeSlider = new RangeSliderView("rangeSlider",{\n    dataSourceId: dataSource.id,\n    startTime: "2015-12-19T21:04:30Z",\n    endTime: "2015-12-19T21:09:19Z"\n});\n */\n\nclass RangeSliderViewReplay extends _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n  \t* Create the discoveryView\n    * @param {Object} [properties={}] - the properties of the view\n    * @param {String} properties.container - The div element to attach to\n    * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n     * @param {Number} properties.startTime - The start time\n     * @param {Number} properties.endTime - The end time\n     * @param {String} properties.dataSource - The dataSourceObject\n     * @param {Number} [properties.debounce=0] - Debounce time after updating the slider\n     * @param {Boolean} properties.disabled - disabled the range slider\n     * @param {Object} properties.dataSynchronizer - a data synchronizer to get current data time for this set of datasources\n     */\n  constructor(properties) {\n    super({ ...properties,\n      supportedLayers: [\'data\']\n    });\n    this.slider = document.createElement("div");\n    this.slider.setAttribute("class", "core-rangeslider-slider");\n    document.getElementById(this.divId).appendChild(this.slider);\n    let startTime = new Date().getTime();\n    this.endTime = new Date("2055-01-01T00:00:00Z").getTime(); //01/01/2055\n\n    this.update = false;\n    this.dataSourceObject = null;\n    this.debounce = 0;\n    this.options = {};\n    this.sliding = false;\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties)) {\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.startTime)) {\n        startTime = new Date(properties.startTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.endTime)) {\n        this.endTime = new Date(properties.endTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.dataSynchronizer)) {\n        this.dataSourceObject = properties.dataSynchronizer;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.dataSource)) {\n        this.dataSourceObject = properties.dataSource;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.debounce)) {\n        this.debounce = parseInt(properties.debounce);\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.options)) {\n        this.options = properties.options;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.disabled)) {\n        this.slider.setAttribute(\'disabled\', properties.disabled);\n      }\n    }\n\n    nouislider__WEBPACK_IMPORTED_MODULE_3__["create"](this.slider, {\n      start: [startTime, this.endTime]\n      /*,timestamp("2015-02-16T08:09:00Z")]*/\n      ,\n      range: {\n        min: startTime,\n        max: this.endTime\n      },\n      //step:  1000* 60* 60,\n      format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n        decimals: 0\n      }),\n      behaviour: \'drag\',\n      connect: true,\n      animate: false,\n      pips: {\n        mode: \'positions\',\n        values: [5, 25, 50, 75],\n        density: 1,\n        //stepped: true,\n        format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n          edit: function (value) {\n            return new Date(parseInt(value)).toISOString().replace(".000Z", "Z").split("T")[1].split("Z")[0].split(".")[0];\n          }\n        })\n      },\n      ...this.options\n    });\n    this.createEvents();\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(this.dataSourceObject)) {\n      // listen for BC\n      const bc = new BroadcastChannel(this.dataSourceObject.getTimeTopicId());\n\n      bc.onmessage = message => {\n        if (!this.update) {\n          this.slider.noUiSlider.set([message.data.timestamp]);\n          this.onChange(message.data.timestamp, parseInt(this.slider.noUiSlider.get()[1]), \'data\');\n        }\n      };\n    }\n  }\n\n  createActivateButton() {\n    let activateButtonDiv = document.createElement("div");\n    let aTagActivateButton = document.createElement("a");\n    activateButtonDiv.appendChild(aTagActivateButton);\n    activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n    let self = this;\n    activateButtonDiv.addEventListener("click", function (event) {\n      if (activateButtonDiv.className.indexOf("core-rangeslider-control-select") > -1) {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n        self.deactivate();\n      } else {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control-select");\n        self.activate();\n      }\n    });\n    document.getElementById(this.divId).appendChild(activateButtonDiv);\n  }\n\n  createEvents() {\n    const that = this; //noUi-handle noUi-handle-lower\n    // start->update->end\n\n    this.slider.noUiSlider.on("start", function (values, handle) {\n      that.update = true;\n      that.sliding = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.endTime);\n      that.onChange(st, end, \'start\');\n    });\n    this.slider.noUiSlider.on("slide", function (values, handle) {\n      that.sliding = true;\n      that.update = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.endTime);\n      that.onChange(st, end, \'slide\');\n    });\n    this.slider.noUiSlider.on("end", function (values, handle) {\n      if (that.sliding) {\n        that.sliding = false;\n        const st = parseInt(values[0]);\n        const end = parseInt(values[1]) || parseInt(that.endTime);\n        that.onChange(st, end, \'end\'); // that.update = false;\n\n        setTimeout(() => that.update = false, that.debounce);\n      }\n    });\n  }\n  /**\n   * Deactivate the timeline bar\n   */\n\n\n  deactivate() {\n    this.slider.setAttribute(\'disabled\', true);\n  }\n  /**\n   * Activate the timeline nar\n   */\n\n\n  activate() {\n    this.slider.removeAttribute(\'disabled\');\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      if (!this.update) {\n        this.slider.noUiSlider.set([values[i].timestamp]);\n      }\n    }\n  }\n\n  setStartTime(timestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([timestamp]);\n    }\n  }\n\n  setTime(startTimestamp, endTimestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([startTimestamp, endTimestamp]);\n    }\n  }\n\n  onChange(startTime, endTime, type) {\n    if (type === \'end\') {\n      this.dataSourceObject.setTimeRange(new Date(startTime).toISOString(), new Date(endTime).toISOString(), this.dataSourceObject.properties.replaySpeed, true);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (RangeSliderViewReplay);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///163\n')},165:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n */\n\nclass CurveLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create the CurveLayer\n   * @param {Object} properties -\n   * @param {String} [properties.xLabel=""] -\n   * @param {String} [properties.yLabel=""] -\n   * @param {String} [properties.lineColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.backgroundColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.fill=false] -\n   * @param {Number} [properties.maxValues=10] - Defines the max values hold by the layer\n   * @param {Number} [properties.stroke=1] -\n   * @param {Number} [properties.x=0] -\n   * @param {Number} [properties.y=[]] -\n   * @param {Number} [properties.maxValues=10] - The maximum values to display\n   * @param {Function} properties.getStroke -\n   * @param {Function} properties.getLineColor -\n   * @param {Function} properties.getValues -\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'curve\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      xLabel: "",\n      yLabel: "",\n      lineColor: "#399ca5",\n      backgroundColor: "#399ca5",\n      fill: false,\n      stroke: 1,\n      curveId: Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ "p"])(),\n      x: 0,\n      y: 0,\n      maxValues: 10\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.stroke)) {\n      props.stroke = properties.stroke;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.maxValues)) {\n      props.maxValues = properties.maxValues;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.lineColor)) {\n      props.lineColor = properties.lineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.backgroundColor)) {\n      props.backgroundColor = properties.backgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.fill)) {\n      props.fill = properties.fill;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.x)) {\n      props.x = properties.x;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.y)) {\n      props.y = properties.y;\n    }\n\n    this.definedId(\'curveId\', props);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.getStroke)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'stroke\', await this.getFunc(\'getStroke\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getStroke\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.getLineColor)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'lineColor\', await this.getFunc(\'getLineColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.getBackgroundColor)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'backgroundColor\', await this.getFunc(\'getBackgroundColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.getValues)) {\n      let fn = async (rec, timestamp, options) => {\n        const value = await this.getFunc(\'getValues\')(rec, timestamp, options);\n        this.updateProperty(\'x\', value.x);\n        this.updateProperty(\'y\', value.y);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getValues\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (CurveLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9DdXJ2ZUxheWVyLmpzP2JlN2MiXSwibmFtZXMiOlsiQ3VydmVMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsImluaXQiLCJwcm9wcyIsInhMYWJlbCIsInlMYWJlbCIsImxpbmVDb2xvciIsImJhY2tncm91bmRDb2xvciIsImZpbGwiLCJzdHJva2UiLCJjdXJ2ZUlkIiwicmFuZG9tVVVJRCIsIngiLCJ5IiwibWF4VmFsdWVzIiwiaXNEZWZpbmVkIiwiZGVmaW5lZElkIiwiZ2V0U3Ryb2tlIiwiZm4iLCJyZWMiLCJ0aW1lc3RhbXAiLCJvcHRpb25zIiwidXBkYXRlUHJvcGVydHkiLCJnZXRGdW5jIiwiYWRkRm4iLCJnZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkiLCJnZXRMaW5lQ29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJnZXRWYWx1ZXMiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsVUFBTixTQUF5QkMseURBQXpCLENBQStCO0VBQzNCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXLENBQUNDLFVBQUQsRUFBYTtJQUNwQixNQUFNQSxVQUFOO0lBQ0EsS0FBS0MsSUFBTCxHQUFZLE9BQVo7RUFDSCxDQXRCMEIsQ0F1QjNCOzs7RUFDQUMsSUFBSSxDQUFDRixVQUFVLEdBQUMsS0FBS0EsVUFBakIsRUFBNkI7SUFDN0IsTUFB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QW1DSixHQUFuQyxFQUF3Q0MsU0FBeEMsRUFBbURDLE9BQW5ELENBQTVDO01BQ0gsQ0FGRDs7TUFHQSxLQUFLRyxLQUFMLENBQVcsS0FBS0MsMkJBQUwsQ0FBaUMsY0FBakMsQ0FBWCxFQUE2RFAsRUFBN0Q7SUFDSDs7SUFFRCxJQUFJSCx5RUFBUyxDQUFDZixVQUFVLENBQUM0QixTQUFaLENBQWIsRUFBcUM7TUFDakMsSUFBSVYsRUFBRSxHQUFHLE9BQU9DLEdBQVAsRUFBWUMsU0FBWixFQUF1QkMsT0FBdkIsS0FBbUM7UUFDeEMsTUFBTVEsS0FBSyxHQUFHLE1BQU0sS0FBS04sT0FBTCxDQUFhLFdBQWIsRUFBMEJKLEdBQTFCLEVBQThCQyxTQUE5QixFQUF3Q0MsT0FBeEMsQ0FBcEI7UUFDQSxLQUFLQyxjQUFMLENBQW9CLEdBQXBCLEVBQXdCTyxLQUFLLENBQUNqQixDQUE5QjtRQUNBLEtBQUtVLGNBQUwsQ0FBb0IsR0FBcEIsRUFBd0JPLEtBQUssQ0FBQ2hCLENBQTlCO01BQ0gsQ0FKRDs7TUFLQSxLQUFLVyxLQUFMLENBQVcsS0FBS0MsMkJBQUwsQ0FBaUMsV0FBakMsQ0FBWCxFQUEwRFAsRUFBMUQ7SUFDSDtFQUNKOztBQXBHMEI7O0FBc0doQnJCLG1FQUFmIiwiZmlsZSI6IjE2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IExheWVyIGZyb20gXCIuL0xheWVyLmpzXCI7XG5pbXBvcnQge2lzRGVmaW5lZCwgcmFuZG9tVVVJRH0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5cbi8qKlxuICogQGV4dGVuZHMgTGF5ZXJcbiAqL1xuY2xhc3MgQ3VydmVMYXllciBleHRlbmRzIExheWVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIEN1cnZlTGF5ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLnhMYWJlbD1cIlwiXSAtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLnlMYWJlbD1cIlwiXSAtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLmxpbmVDb2xvcj1cIiMwMDAwMDBcIl0gLSBjb2xvciBpbiBoZXggb3IgcmdiYSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydGllcy5iYWNrZ3JvdW5kQ29sb3I9XCIjMDAwMDAwXCJdIC0gY29sb3IgaW4gaGV4IG9yIHJnYmEgdmFsdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMuZmlsbD1mYWxzZV0gLVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5tYXhWYWx1ZXM9MTBdIC0gRGVmaW5lcyB0aGUgbWF4IHZhbHVlcyBob2xkIGJ5IHRoZSBsYXllclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5zdHJva2U9MV0gLVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy54PTBdIC1cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMueT1bXV0gLVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5tYXhWYWx1ZXM9MTBdIC0gVGhlIG1heGltdW0gdmFsdWVzIHRvIGRpc3BsYXlcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9wZXJ0aWVzLmdldFN0cm9rZSAtXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvcGVydGllcy5nZXRMaW5lQ29sb3IgLVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BlcnRpZXMuZ2V0VmFsdWVzIC1cbiAgICAgKlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdjdXJ2ZSc7XG4gICAgfVxuICAgIC8vIGNhbGwgYnkgc3VwZXIgY2xhc3NcbiAgICBpbml0KHByb3BlcnRpZXM9dGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyLmluaXQocHJvcGVydGllcyk7XG4gICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgeExhYmVsIDogXCJcIixcbiAgICAgICAgICAgIHlMYWJlbCA6IFwiXCIsXG4gICAgICAgICAgICBsaW5lQ29sb3IgOiBcIiMzOTljYTVcIixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvciA6IFwiIzM5OWNhNVwiLFxuICAgICAgICAgICAgZmlsbCA6IGZhbHNlLFxuICAgICAgICAgICAgc3Ryb2tlIDogMSxcbiAgICAgICAgICAgIGN1cnZlSWQgOiByYW5kb21VVUlEKCksXG4gICAgICAgICAgICB4IDogMCxcbiAgICAgICAgICAgIHkgOiAwLFxuICAgICAgICAgICAgbWF4VmFsdWVzIDogMTBcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5zdHJva2UpKSB7XG4gICAgICAgICAgICBwcm9wcy5zdHJva2UgPSBwcm9wZXJ0aWVzLnN0cm9rZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5tYXhWYWx1ZXMpKSB7XG4gICAgICAgICAgICBwcm9wcy5tYXhWYWx1ZXMgPSBwcm9wZXJ0aWVzLm1heFZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5saW5lQ29sb3IpKSB7XG4gICAgICAgICAgICBwcm9wcy5saW5lQ29sb3IgPSBwcm9wZXJ0aWVzLmxpbmVDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5iYWNrZ3JvdW5kQ29sb3IpKSB7XG4gICAgICAgICAgICBwcm9wcy5iYWNrZ3JvdW5kQ29sb3IgPSBwcm9wZXJ0aWVzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5maWxsKSkge1xuICAgICAgICAgICAgcHJvcHMuZmlsbCA9IHByb3BlcnRpZXMuZmlsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy54KSkge1xuICAgICAgICAgICAgcHJvcHMueCA9IHByb3BlcnRpZXMueDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy55KSkge1xuICAgICAgICAgICAgcHJvcHMueSA9IHByb3BlcnRpZXMueTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5kZWZpbmVkSWQoJ2N1cnZlSWQnLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmdldFN0cm9rZSkpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ3N0cm9rZScsYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRTdHJva2UnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFN0cm9rZScpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMuZ2V0TGluZUNvbG9yKSkge1xuICAgICAgICAgICAgbGV0IGZuID0gYXN5bmMgKHJlYywgdGltZXN0YW1wLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9wZXJ0eSgnbGluZUNvbG9yJyxhd2FpdCB0aGlzLmdldEZ1bmMoJ2dldExpbmVDb2xvcicpKHJlYywgdGltZXN0YW1wLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGlzLmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0TGluZUNvbG9yJyksIGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRCYWNrZ3JvdW5kQ29sb3IpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdiYWNrZ3JvdW5kQ29sb3InLGF3YWl0IHRoaXMuZ2V0RnVuYygnZ2V0QmFja2dyb3VuZENvbG9yJykocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFkZEZuKHRoaXMuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXRMaW5lQ29sb3InKSwgZm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmdldFZhbHVlcykpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRWYWx1ZXMnKShyZWMsdGltZXN0YW1wLG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ3gnLHZhbHVlLngpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ3knLHZhbHVlLnkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFZhbHVlcycpLCBmbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBDdXJ2ZUxheWVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///165\n')},166:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);\n/* harmony import */ var chartjs_adapter_moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(197);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * @extends View\n */\n\nclass ChartJsView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {String} [properties.type='line'] - The  [type]{@link https://www.chartjs.org/docs/3.5.1/} of the graph\n   * @param {Object} [properties.options={}] - Properties which can override the default framework ones\n   * @param {Object} [properties.datasetOptions={}] - Properties which can override the default framework ones (as defined [dataset]{@link https://www.chartjs.org/docs/latest/configuration/#dataset-configuration}\n   * @param {boolean} [properties.override=false] - Defines if options (as defined [Chart options]{@link https://www.chartjs.org/docs/3.5.1/general/options.html}) are completely overridden or merge only. Default is merge\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: ['curve'],\n      ...properties\n    });\n    chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"].register(...chart_js__WEBPACK_IMPORTED_MODULE_2__[/* registerables */ \"c\"]); // #region snippet_chartjsview_default_chartprops\n\n    this.datasetOptions = {};\n    let type = 'line';\n    this.options = {\n      maintainAspectRatio: false,\n      normalized: true,\n      scales: {\n        x: {\n          type: 'time',\n          time: {\n            unit: 'second'\n          }\n        }\n      },\n      plugins: {},\n      datasets: {},\n      interaction: {},\n      animations: {},\n      layout: {},\n      elements: {}\n    }; // #endregion snippet_chartjsview_default_chartprops\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"m\"])(properties)) {\n      if (properties.hasOwnProperty('options')) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* merge */ \"o\"])(properties.options, this.options);\n      }\n\n      if (properties.hasOwnProperty('type')) {\n        type = properties.type;\n      }\n\n      if (properties.hasOwnProperty('datasetOptions')) {\n        this.datasetOptions = properties.datasetOptions;\n      }\n    }\n\n    let domNode = document.getElementById(this.divId);\n    let ctx = document.createElement(\"canvas\");\n    ctx.setAttribute(\"id\", Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ \"p\"])());\n    domNode.appendChild(ctx);\n    this.resetting = false;\n    this.chart = new chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"](ctx, {\n      type: type,\n      options: this.options\n    });\n    this.datasets = {};\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === 'curve') {\n      this.updateCurve(data.values);\n    }\n  }\n\n  parseDate(intTimeStamp) {\n    const date = new Date(intTimeStamp);\n    return this.withLeadingZeros(date.getUTCHours()) + \":\" + this.withLeadingZeros(date.getUTCMinutes()) + \":\" + this.withLeadingZeros(date.getUTCSeconds());\n  }\n\n  withLeadingZeros(dt) {\n    return (dt < 10 ? '0' : '') + dt;\n  }\n  /**\n   * Updates the curve associated to the layer.\n   * @param {Curve.props[]} props - The layer properties allowing the update of the curve\n   */\n\n\n  async updateCurve(props) {\n    if (this.resetting) {\n      return;\n    }\n\n    let currentDataset = this.datasets[props[0].curveId];\n    const values = props.map(item => ({\n      'x': item.x,\n      'y': item.y\n    }));\n    let lineColor = this.getColor(props[0].lineColor);\n    let bgColor = this.getColor(props[0].backgroundColor);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"m\"])(currentDataset)) {\n      currentDataset = { ...this.datasetOptions,\n        label: props[0].name,\n        fill: props[0].fill,\n        backgroundColor: bgColor,\n        borderColor: lineColor,\n        data: values\n      };\n      currentDataset = { ...this.datasetsProps,\n        ...currentDataset\n      };\n      this.datasets[props[0].curveId] = currentDataset;\n      this.chart.data.datasets.push(currentDataset);\n    } else {\n      this.datasets[props[0].curveId].backgroundColor = bgColor;\n      this.datasets[props[0].curveId].borderColor = lineColor;\n      values.forEach(value => {\n        this.datasets[props[0].curveId].data.push(value);\n      });\n    } //TODO: max points with multiple dataset won't work\n\n\n    if (currentDataset.data.length > props[0].maxValues) {\n      this.chart.data.labels.shift();\n      currentDataset.data.shift();\n    }\n\n    this.chart.update('none');\n  }\n\n  getColor(value) {\n    let v = value;\n\n    if (v.length > 0 && v.charAt(0) === '#') {\n      const rgb = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* hex2rgb */ \"l\"])(value);\n      v = 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ',0.2)';\n    }\n\n    return v;\n  }\n\n  reset() {\n    this.resetting = true;\n    super.reset();\n    this.datasets = {};\n    this.chart.data.datasets = [];\n    this.chart.data.labels = [];\n    this.chart.update(0);\n    this.resetting = false; // this.chart.data.datasets = [];\n    // this.chart.update();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ChartJsView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///166\n")},167:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\n import MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id,\n         getFrameData: (rec) => rec.videoFrame,\n         getTimestamp: (rec) => rec.timestamp\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'videoData\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timestamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(properties.showTime) && properties.showTime) {\n      this.timestamp = document.createElement("div");\n      this.timestamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timestamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === \'videoData\') {\n      const values = data.values;\n\n      for (let i = 0; i < values.length; i++) {\n        this.updateVideo(values[i]);\n      }\n    }\n  }\n\n  updateVideo(props) {\n    let imgBlob = new Blob([props.frameData.data]);\n    let url = window.URL.createObjectURL(imgBlob);\n    let oldBlobURL = this.imgTag.src;\n    this.imgTag.src = url;\n\n    if (this.timestamp !== null) {\n      this.timestamp.innerHTML = new Date(props.timestamp).toISOString();\n    }\n\n    window.URL.revokeObjectURL(oldBlobURL);\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "m"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n  async getCanvas() {\n    return this.canvas;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///167\n')},168:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "a3a64489cc1e500c5d80.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlci9EYXRhU291cmNlLndvcmtlci5qcz8zYTVjIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLE9BQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImEzYTY0NDg5Y2MxZTUwMGM1ZDgwLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///168\n')},169:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(170);\n/* harmony import */ var _DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);\n/* harmony import */ var _datasource_Mode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass DataSynchronizer {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.startTime - start time of the temporal run\n   * @param {String} properties.endTime - end time of the temporal run\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   */\n  constructor(properties) {\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ \"c\"])(properties.startTime, 'startTime');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ \"c\"])(properties.startTime, 'endTime');\n    this.bufferingTime = 1000; // default\n\n    this.currentTime = Date.now();\n    this.id = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ \"p\"])();\n    this.dataSources = properties.dataSources || [];\n    this.replaySpeed = properties.replaySpeed || 1;\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250, this.mode = properties.mode || _datasource_Mode__WEBPACK_IMPORTED_MODULE_3__[/* Mode */ \"a\"].REPLAY;\n    this.initialized = false;\n    this.properties = {};\n    this.properties.replaySpeed = this.replaySpeed;\n    this.properties.startTime = properties.startTime;\n    this.properties.endTime = properties.endTime;\n    this.eventSubscriptionMap = {};\n    this.messagesMap = {};\n  }\n\n  getTopicId() {\n    return _Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATA_SYNCHRONIZER_TOPIC */ \"c\"] + this.id;\n  }\n\n  getTimeTopicId() {\n    return _Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* TIME_SYNCHRONIZER_TOPIC */ \"d\"] + this.id;\n  }\n  /**\n   * @private\n   */\n\n\n  initEventSubscription() {\n    // listen for Events to callback to subscriptions\n    new BroadcastChannel(this.getTopicId()).onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    };\n\n    new BroadcastChannel(this.getTimeTopicId()).onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    };\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return this.dataSources[0].properties.startTime;\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return this.dataSources[0].properties.endTime;\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"m\"])(this.dataSources[0].properties.minTime) ? this.dataSources[0].properties.minTime : this.dataSources[0].properties.startTime;\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"m\"])(this.dataSources[0].properties.maxTime) ? this.dataSources[0].properties.maxTime : this.dataSources[0].properties.endTime;\n  }\n\n  setMinTime(time) {\n    for (let ds of this.dataSources) {\n      ds.setMinTime(time);\n    }\n  }\n\n  setMaxTime(time) {\n    for (let ds of this.dataSources) {\n      ds.setMaxTime(time);\n    }\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.replaySpeed;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const dataSourcesForWorker = [];\n        let mode = this.mode;\n\n        for (let dataSource of this.dataSources) {\n          const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n          dataSourcesForWorker.push(dataSourceForWorker);\n          mode = dataSource.mode;\n        }\n\n        this.synchronizerWorker = new _DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a();\n        this.handleWorkerMessage();\n        await this.postMessage({\n          message: 'init',\n          dataSources: dataSourcesForWorker,\n          replaySpeed: this.replaySpeed,\n          timerResolution: this.timerResolution,\n          masterTimeRefreshRate: this.masterTimeRefreshRate,\n          startTime: this.properties.startTime,\n          endTime: this.properties.endTime,\n          mode: mode,\n          topics: {\n            data: this.getTopicId(),\n            time: this.getTimeTopicId()\n          }\n        }, function () {\n          this.initEventSubscription();\n          this.initialized = true;\n          resolve();\n        }.bind(this), false);\n      } catch (error) {\n        console.log(error);\n        reject(error);\n      }\n    });\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.id,\n      name: dataSource.name\n    }; // bind dataSource data onto dataSynchronizer data\n\n    try {\n      await dataSource.setDataSynchronizer(this);\n      dataSource.properties.replaySpeed = this.replaySpeed;\n    } catch (ex) {\n      console.error(\"Cannot set the synchronizer to this DataSource\", ex);\n      throw ex;\n    }\n\n    return obj;\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don't forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {Datasource} dataSource - the new datasource to add\n   * @param [lazy=false] lazy - add to current running synchronizer\n   */\n\n\n  async addDataSource(dataSource, lazy = false) {\n    if (lazy) {\n      return new Promise(async resolve => {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        this.dataSources.push(dataSource);\n        await this.postMessage({\n          message: 'add',\n          dataSources: [dataSourceForWorker]\n        });\n        await dataSource.connect();\n        resolve();\n      });\n    } else {\n      this.dataSources.push(dataSource);\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {DataSource} dataSource - the new datasource to add\n   * @param [lazy=false] lazy - remove from the current running synchronizer\n   */\n\n\n  async removeDataSource(dataSource, lazy = false) {\n    if (lazy) {\n      return new Promise(async resolve => {\n        this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n        await this.postMessage({\n          message: 'remove',\n          dataSources: [dataSource.getId()]\n        });\n        await dataSource.disconnect();\n        resolve();\n      });\n    } else {\n      this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    return new Promise(async (resolve, reject) => {\n      if (this.synchronizerWorker !== null) {\n        await this.postMessage({\n          type: 'data',\n          dataSourceId: dataSourceId,\n          data: data\n        }, resolve);\n      }\n    });\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    await this.doConnect();\n  }\n\n  async checkInit() {\n    const that = this;\n    return new Promise(async (resolve, reject) => {\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"m\"])(that.init)) {\n        that.init = that.initDataSources();\n      }\n\n      await that.init;\n      resolve();\n    });\n  }\n\n  async doConnect() {\n    return new Promise(async resolve => {\n      for (let dataSource of this.dataSources) {\n        await dataSource.connect();\n      }\n\n      await this.postMessage({\n        message: 'connect'\n      }, resolve);\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    await this.reset();\n\n    for (let dataSource of this.dataSources) {\n      await dataSource.disconnect();\n    }\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    return new Promise(async resolve => {\n      this.replaySpeed = replaySpeed;\n      this.properties.replaySpeed = replaySpeed;\n      await this.postMessage({\n        message: 'replay-speed',\n        replaySpeed: replaySpeed\n      }, resolve);\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   */\n\n\n  async setTimeRange(startTime = this.getStartTime(), endTime = this.getEndTime(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.mode) {\n    return new Promise(async resolve => {\n      this.properties.startTime = startTime;\n      this.properties.endTime = endTime;\n      await this.postMessage({\n        message: 'update-properties',\n        mode: mode,\n        replaySpeed: replaySpeed,\n        startTime: startTime,\n        endTime: endTime\n      }, () => {\n        for (let ds of this.dataSources) {\n          ds.setTimeRange(startTime, endTime, replaySpeed, reconnect, mode);\n        }\n\n        this.mode = mode;\n        resolve();\n      });\n    });\n  }\n\n  async updateProperties(properties) {\n    for (let ds of this.dataSources) {\n      ds.updateProperties(properties);\n    }\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    return new Promise(async resolve => {\n      await this.checkInit();\n      await this.postMessage({\n        message: 'reset'\n      }, resolve);\n    });\n  }\n\n  async getCurrentTime() {\n    return new Promise(async resolve => {\n      await this.postMessage({\n        message: 'current-time'\n      }, resolve);\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    for (let ds of this.dataSources) {\n      if (!(await ds.isConnected())) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  async postMessage(props, Fn, checkInit = true) {\n    if (checkInit) {\n      await this.checkInit();\n    }\n\n    const messageId = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ \"p\"])();\n    this.synchronizerWorker.postMessage({ ...props,\n      messageId: messageId\n    });\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"m\"])(Fn)) {\n      this.messagesMap[messageId] = Fn;\n    }\n  }\n\n  handleWorkerMessage() {\n    this.synchronizerWorker.onmessage = event => {\n      const id = event.data.messageId;\n\n      if (id in this.messagesMap) {\n        this.messagesMap[id](event.data.data);\n        delete this.messagesMap[id];\n      }\n    };\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DataSynchronizer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9EYXRhU3luY2hyb25pemVyLmpzPzYxNGQiXSwibmFtZXMiOlsiRGF0YVN5bmNocm9uaXplciIsImNvbnN0cnVjdG9yIiwicHJvcGVydGllcyIsImFzc2VydERlZmluZWQiLCJzdGFydFRpbWUiLCJidWZmZXJpbmdUaW1lIiwiY3VycmVudFRpbWUiLCJEYXRlIiwibm93IiwiaWQiLCJyYW5kb21VVUlEIiwiZGF0YVNvdXJjZXMiLCJyZXBsYXlTcGVlZCIsInRpbWVyUmVzb2x1dGlvbiIsIm1hc3RlclRpbWVSZWZyZXNoUmF0ZSIsIm1vZGUiLCJNb2RlIiwiUkVQTEFZIiwiaW5pdGlhbGl6ZWQiLCJlbmRUaW1lIiwiZXZlbnRTdWJzY3JpcHRpb25NYXAiLCJtZXNzYWdlc01hcCIsImdldFRvcGljSWQiLCJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsImdldFRpbWVUb3BpY0lkIiwiVElNRV9TWU5DSFJPTklaRVJfVE9QSUMiLCJpbml0RXZlbnRTdWJzY3JpcHRpb24iLCJCcm9hZGNhc3RDaGFubmVsIiwib25tZXNzYWdlIiwibWVzc2FnZSIsInR5cGUiLCJkYXRhIiwiaSIsImxlbmd0aCIsImdldFN0YXJ0VGltZSIsImdldEVuZFRpbWUiLCJnZXRNaW5UaW1lIiwiaXNEZWZpbmVkIiwibWluVGltZSIsImdldE1heFRpbWUiLCJtYXhUaW1lIiwic2V0TWluVGltZSIsInRpbWUiLCJkcyIsInNldE1heFRpbWUiLCJnZXRSZXBsYXlTcGVlZCIsInRlcm1pbmF0ZSIsInN5bmNocm9uaXplcldvcmtlciIsImRhdGFTb3VyY2UiLCJzdWJzY3JpYmUiLCJmbiIsImV2ZW50VHlwZXMiLCJwdXNoIiwiaW5pdERhdGFTb3VyY2VzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkYXRhU291cmNlc0ZvcldvcmtlciIsImRhdGFTb3VyY2VGb3JXb3JrZXIiLCJjcmVhdGVEYXRhU291cmNlRm9yV29ya2VyIiwiRGF0YVN5bmNocm9uaXplcldvcmtlciIsImhhbmRsZVdvcmtlck1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInRvcGljcyIsImJpbmQiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJvYmoiLCJ0aW1lT3V0IiwibmFtZSIsInNldERhdGFTeW5jaHJvbml6ZXIiLCJleCIsImFkZERhdGFTb3VyY2UiLCJsYXp5IiwiY29ubmVjdCIsInJlbW92ZURhdGFTb3VyY2UiLCJmaWx0ZXIiLCJlbHQiLCJnZXRJZCIsImRpc2Nvbm5lY3QiLCJkYXRhU291cmNlSWQiLCJjaGVja0luaXQiLCJkb0Nvbm5lY3QiLCJ0aGF0IiwiaW5pdCIsInJlc2V0Iiwic2V0UmVwbGF5U3BlZWQiLCJzZXRUaW1lUmFuZ2UiLCJyZWNvbm5lY3QiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZ2V0Q3VycmVudFRpbWUiLCJpc0Nvbm5lY3RlZCIsInByb3BzIiwiRm4iLCJtZXNzYWdlSWQiLCJldmVudCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLGdCQUFOLENBQXVCO0VBQ25CO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsV0FBVyxDQUFDQyxVQUFELEVBQWE7SUFDcEJDLDZFQUFhLENBQUNELFVBQVUsQ0FBQ0UsU0FBWixFQUF1QixXQUF2QixDQUFiO0lBQ0FELDZFQUFhLENBQUNELFVBQVUsQ0FBQ0UsU0FBWixFQUF1QixTQUF2QixDQUFiO0lBQ0EsS0FBS0MsYUFBTCxHQUFxQixJQUFyQixDQUhvQixDQUdPOztJQUMzQixLQUFLQyxXQUFMLEdBQW1CQyxJQUFJLENBQUNDLEdBQUws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U0FBUyxFQUFFQTtJQUZxQixDQUFwQzs7SUFJQSxJQUFHMUQseUVBQVMsQ0FBQ3lELEVBQUQsQ0FBWixFQUFrQjtNQUNkLEtBQUt6RSxXQUFMLENBQWlCMEUsU0FBakIsSUFBOEJELEVBQTlCO0lBQ0g7RUFDSjs7RUFFRGpDLG1CQUFtQixHQUFHO0lBQ2xCLEtBQUtkLGtCQUFMLENBQXdCbkIsU0FBeEIsR0FBcUNvRSxLQUFELElBQVc7TUFDM0MsTUFBTXZGLEVBQUUsR0FBR3VGLEtBQUssQ0FBQ2pFLElBQU4sQ0FBV2dFLFNBQXRCOztNQUNBLElBQUd0RixFQUFFLElBQUksS0FBS1ksV0FBZCxFQUEwQjtRQUN0QixLQUFLQSxXQUFMLENBQWlCWixFQUFqQixFQUFxQnVGLEtBQUssQ0FBQ2pFLElBQU4sQ0FBV0EsSUFBaEM7UUFDQSxPQUFPLEtBQUtWLFdBQUwsQ0FBaUJaLEVBQWpCLENBQVA7TUFDSDtJQUNKLENBTkQ7RUFPSDs7QUFwYWtCOztBQXNhUFQseUVBQWhCIiwiZmlsZSI6IjE2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHthc3NlcnREZWZpbmVkLCBpc0RlZmluZWQsIHJhbmRvbVVVSUR9IGZyb20gXCIuLi91dGlscy9VdGlscy5qc1wiO1xuaW1wb3J0IERhdGFTeW5jaHJvbml6ZXJXb3JrZXIgZnJvbSAnLi9EYXRhU3luY2hyb25pemVyLndvcmtlci5qcyc7XG5pbXBvcnQge0RBVEFfU1lOQ0hST05JWkVSX1RPUElDLCBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQ30gZnJvbSBcIi4uL0NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHtNb2RlfSBmcm9tIFwiLi4vZGF0YXNvdXJjZS9Nb2RlXCI7XG5cbmNsYXNzIERhdGFTeW5jaHJvbml6ZXIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgVGhlIGRhdGFTeW5jaHJvbml6ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXBsYXlTcGVlZD0xXSAtIHJlcGxheVNwZWVkIHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVyUmVzb2x1dGlvbj01XSAtIGludGVydmFsIGluIHdoaWNoIGRhdGEgaXMgcGxheWVkIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZT0yNTBdIC0gaW50ZXJ2YWwgaW4gd2hpY2ggdGltZSB2YWx1ZSBpcyBzZW5kIHRocm91Z2ggYnJvYWRjYXN0IGNoYW5uZWwgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMubW9kZT1Nb2RlLlJFUExBWV0gLSBtb2RlIG9mIHRoZSBkYXRhIHN5bmNocm9uaXplclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSAtIHN0YXJ0IHRpbWUgb2YgdGhlIHRlbXBvcmFsIHJ1blxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZFRpbWUgLSBlbmQgdGltZSBvZiB0aGUgdGVtcG9yYWwgcnVuXG4gICAgICogQHBhcmFtIHtEYXRhc291cmNlW119IHByb3BlcnRpZXMuZGF0YVNvdXJjZXMgLSB0aGUgZGF0YVNvdXJjZSBhcnJheVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgYXNzZXJ0RGVmaW5lZChwcm9wZXJ0aWVzLnN0YXJ0VGltZSwgJ3N0YXJ0VGltZScpO1xuICAgICAgICBhc3NlcnREZWZpbmVkKHByb3BlcnRpZXMuc3RhcnRUaW1lLCAnZW5kVGltZScpO1xuICAgICAgICB0aGlzLmJ1ZmZlcmluZ1RpbWUgPSAxMDAwOyAvLyBkZWZhdWx0XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLmlkID0gcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VzID0gcHJvcGVydGllcy5kYXRhU291cmNlcyB8fCBbXTtcbiAgICAgICAgdGhpcy5yZXBsYXlTcGVlZCA9IHByb3BlcnRpZXMucmVwbGF5U3BlZWQgfHwgMTtcbiAgICAgICAgdGhpcy50aW1lclJlc29sdXRpb24gPSBwcm9wZXJ0aWVzLnRpbWVyUmVzb2x1dGlvbiB8fCA1O1xuICAgICAgICB0aGlzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZSA9IHByb3BlcnRpZXMubWFzdGVyVGltZVJlZnJlc2hSYXRlIHx8IDI1MCxcbiAgICAgICAgdGhpcy5tb2RlID0gcHJvcGVydGllcy5tb2RlIHx8IE1vZGUuUkVQTEFZO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHt9O1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMucmVwbGF5U3BlZWQgPSB0aGlzLnJlcGxheVNwZWVkO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lID0gcHJvcGVydGllcy5zdGFydFRpbWU7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5lbmRUaW1lID0gcHJvcGVydGllcy5lbmRUaW1lO1xuXG4gICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXAgPSB7fTtcbiAgICAgICAgdGhpcy5tZXNzYWdlc01hcCA9IHt9O1xuXG4gICAgfVxuXG4gICAgZ2V0VG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfU1lOQ0hST05JWkVSX1RPUElDK3RoaXMuaWQ7XG4gICAgfVxuXG4gICAgZ2V0VGltZVRvcGljSWQoKSB7XG4gICAgICAgIHJldHVybiBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyt0aGlzLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW5pdEV2ZW50U3Vic2NyaXB0aW9uKCkge1xuICAgICAgICAvLyBsaXN0ZW4gZm9yIEV2ZW50cyB0byBjYWxsYmFjayB0byBzdWJzY3JpcHRpb25zXG4gICAgICAgIG5ldyBCcm9hZGNhc3RDaGFubmVsKHRoaXMuZ2V0VG9waWNJZCgpKS5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IG1lc3NhZ2UuZGF0YS50eXBlO1xuICAgICAgICAgICAgaWYodHlwZSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDtpIDwgdGhpcy5ldmVudFN1YnNjcmlwdGlvbk1hcFt0eXBlXS5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbdHlwZV1baV0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbmV3IEJyb2FkY2FzdENoYW5uZWwodGhpcy5nZXRUaW1lVG9waWNJZCgpKS5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IG1lc3NhZ2UuZGF0YS50eXBlO1xuICAgICAgICAgICAgaWYodHlwZSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGk9MDtpIDwgdGhpcy5ldmVudFN1YnNjcmlwdGlvbk1hcFt0eXBlXS5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbdHlwZV1baV0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhcnRUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBzdGFydFRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKi9cbiAgICBnZXRTdGFydFRpbWUoKSB7XG4gICAgICAgIGlmKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyAnZGF0YVNvdXJjZSBhcnJheSBpcyBlbXB0eSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNvdXJjZXNbMF0ucHJvcGVydGllcy5zdGFydFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZW5kVGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gZW5kVGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldEVuZFRpbWUoKSB7XG4gICAgICAgIGlmKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyAnZGF0YVNvdXJjZSBhcnJheSBpcyBlbXB0eSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNvdXJjZXNbMF0ucHJvcGVydGllcy5lbmRUaW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldE1pblRpbWUoKSB7XG4gICAgICAgIGlmKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyAnZGF0YVNvdXJjZSBhcnJheSBpcyBlbXB0eSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VzWzBdLnByb3BlcnRpZXMubWluVGltZSkgPyB0aGlzLmRhdGFTb3VyY2VzWzBdLnByb3BlcnRpZXMubWluVGltZSA6IHRoaXMuZGF0YVNvdXJjZXNbMF0ucHJvcGVydGllcy5zdGFydFRpbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWF4VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gZW5kVGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldE1heFRpbWUoKSB7XG4gICAgICAgIGlmKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyAnZGF0YVNvdXJjZSBhcnJheSBpcyBlbXB0eSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VzWzBdLnByb3BlcnRpZXMubWF4VGltZSkgPyB0aGlzLmRhdGFTb3VyY2VzWzBdLnByb3BlcnRpZXMubWF4VGltZSA6IHRoaXMuZGF0YVNvdXJjZXNbMF0ucHJvcGVydGllcy5lbmRUaW1lO1xuICAgIH1cblxuICAgIHNldE1pblRpbWUodGltZSkge1xuICAgICAgICBmb3IobGV0IGRzIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGRzLnNldE1pblRpbWUodGltZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRNYXhUaW1lKHRpbWUpIHtcbiAgICAgICAgZm9yKGxldCBkcyBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBkcy5zZXRNYXhUaW1lKHRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVwbGF5U3BlZWRcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSAtIHRoZSByZXBsYXkgc3BlZWRcbiAgICAgKi9cbiAgICBnZXRSZXBsYXlTcGVlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGF5U3BlZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGVybWluYXRlIHRoZSBjb3JyZXNwb25kaW5nIHJ1bm5pbmcgV2ViV29ya2VyIGJ5IGNhbGxpbmcgdGVybWluYXRlKCkgb24gaXQuXG4gICAgICovXG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICBpZih0aGlzLnN5bmNocm9uaXplcldvcmtlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnN5bmNocm9uaXplcldvcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2UudGVybWluYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoZm4sIGV2ZW50VHlwZXMpIHtcbiAgICAgICAgLy8gYXNzb2NpYXRlIGZ1bmN0aW9uIHRvIGV2ZW50VHlwZVxuICAgICAgICBmb3IobGV0IGk9MDtpIDwgZXZlbnRUeXBlcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBpZiAoIShldmVudFR5cGVzW2ldIGluIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudFN1YnNjcmlwdGlvbk1hcFtldmVudFR5cGVzW2ldXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ldmVudFN1YnNjcmlwdGlvbk1hcFtldmVudFR5cGVzW2ldXS5wdXNoKGZuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0gQVNZTkNIUk9OT1VTIEZVTkNUSU9OUyAtLS0tLS0tLS0tLS0tLS0tLS8vXG5cbiAgICBhc3luYyBpbml0RGF0YVNvdXJjZXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2VzRm9yV29ya2VyID0gW107XG4gICAgICAgICAgICAgICAgbGV0IG1vZGUgPSB0aGlzLm1vZGU7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2VGb3JXb3JrZXIgPSBhd2FpdCB0aGlzLmNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VzRm9yV29ya2VyLnB1c2goZGF0YVNvdXJjZUZvcldvcmtlcik7XG4gICAgICAgICAgICAgICAgICAgIG1vZGUgPSBkYXRhU291cmNlLm1vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyID0gbmV3IERhdGFTeW5jaHJvbml6ZXJXb3JrZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVdvcmtlck1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luaXQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhU291cmNlczogZGF0YVNvdXJjZXNGb3JXb3JrZXIsXG4gICAgICAgICAgICAgICAgICAgIHJlcGxheVNwZWVkOiB0aGlzLnJlcGxheVNwZWVkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lclJlc29sdXRpb246IHRoaXMudGltZXJSZXNvbHV0aW9uLFxuICAgICAgICAgICAgICAgICAgICBtYXN0ZXJUaW1lUmVmcmVzaFJhdGU6IHRoaXMubWFzdGVyVGltZVJlZnJlc2hSYXRlLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IHRoaXMucHJvcGVydGllcy5zdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIGVuZFRpbWU6IHRoaXMucHJvcGVydGllcy5lbmRUaW1lLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0b3BpY3M6ICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmdldFRvcGljSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRoaXMuZ2V0VGltZVRvcGljSWQoKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdEV2ZW50U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIGRhdGFTb3VyY2VcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVEYXRhU291cmNlRm9yV29ya2VyKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgYnVmZmVyaW5nVGltZTogZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWUgfHwgMCxcbiAgICAgICAgICAgIHRpbWVPdXQ6IGRhdGFTb3VyY2UucHJvcGVydGllcy50aW1lT3V0IHx8IDAsXG4gICAgICAgICAgICBpZDogZGF0YVNvdXJjZS5pZCxcbiAgICAgICAgICAgIG5hbWU6IGRhdGFTb3VyY2UubmFtZVxuICAgICAgICB9O1xuICAgICAgICAvLyBiaW5kIGRhdGFTb3VyY2UgZGF0YSBvbnRvIGRhdGFTeW5jaHJvbml6ZXIgZGF0YVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5zZXREYXRhU3luY2hyb25pemVyKHRoaXMpO1xuICAgICAgICAgICAgZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLnJlcGxheVNwZWVkID0gdGhpcy5yZXBsYXlTcGVlZDtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW5ub3Qgc2V0IHRoZSBzeW5jaHJvbml6ZXIgdG8gdGhpcyBEYXRhU291cmNlXCIsIGV4KTtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBBZGRzIGEgbmV3IERhdGFTb3VyY2Ugb2JqZWN0IHRvIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzIHRvIHN5bmNocm9uaXplLlxuICAgICAgKiBub3RlOiBkb24ndCBmb3JnZXQgdG8gY2FsbCByZXNldCgpIHRvIGJlIHN1cmUgdG8gcmUtaW5pdCB0aGUgc3luY2hyb25pemVyIGludGVybmFsIHByb3BlcnRpZXMuXG4gICAgICAqIEBwYXJhbSB7RGF0YXNvdXJjZX0gZGF0YVNvdXJjZSAtIHRoZSBuZXcgZGF0YXNvdXJjZSB0byBhZGRcbiAgICAgICogQHBhcmFtIFtsYXp5PWZhbHNlXSBsYXp5IC0gYWRkIHRvIGN1cnJlbnQgcnVubmluZyBzeW5jaHJvbml6ZXJcbiAgICAgICovXG4gICAgYXN5bmMgYWRkRGF0YVNvdXJjZShkYXRhU291cmNlLCBsYXp5ID0gZmFsc2UpIHtcbiAgICAgICAgaWYobGF6eSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2VGb3JXb3JrZXIgPSBhd2FpdCB0aGlzLmNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlcy5wdXNoKGRhdGFTb3VyY2UpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnYWRkJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZXM6IFtkYXRhU291cmNlRm9yV29ya2VyXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGF3YWl0IGRhdGFTb3VyY2UuY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlcy5wdXNoKGRhdGFTb3VyY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIERhdGFTb3VyY2Ugb2JqZWN0IGZyb20gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXMgb2YgdGhlIHN5bmNocm9uaXplci5cbiAgICAgKiBAcGFyYW0ge0RhdGFTb3VyY2V9IGRhdGFTb3VyY2UgLSB0aGUgbmV3IGRhdGFzb3VyY2UgdG8gYWRkXG4gICAgICogQHBhcmFtIFtsYXp5PWZhbHNlXSBsYXp5IC0gcmVtb3ZlIGZyb20gdGhlIGN1cnJlbnQgcnVubmluZyBzeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVEYXRhU291cmNlKGRhdGFTb3VyY2UsIGxhenkgPSBmYWxzZSkge1xuICAgICAgICBpZihsYXp5KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlcyA9IHRoaXMuZGF0YVNvdXJjZXMuZmlsdGVyKCBlbHQgPT4gZWx0LmlkICE9PSBkYXRhU291cmNlLmdldElkKCkpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZXM6IFtkYXRhU291cmNlLmdldElkKCldXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2VzID0gdGhpcy5kYXRhU291cmNlcy5maWx0ZXIoIGVsdCA9PiBlbHQuaWQgIT09IGRhdGFTb3VyY2UuZ2V0SWQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVNvdXJjZUlkIC0gdGhlIGRhdGFTb3VyY2UgaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIHRoZSBkYXRhIHRvIHB1c2ggaW50byB0aGUgZGF0YSBzeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBhc3luYyBwdXNoKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3luY2hyb25pemVyV29ya2VyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZUlkOiBkYXRhU291cmNlSWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgICB9LCByZXNvbHZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgYWxsIGRhdGFTb3VyY2VzXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5kb0Nvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBhc3luYyBjaGVja0luaXQoKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYoIWlzRGVmaW5lZCh0aGF0LmluaXQpKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5pbml0ID0gdGhhdC5pbml0RGF0YVNvdXJjZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoYXQuaW5pdDtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZG9Db25uZWN0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBkYXRhU291cmNlLmNvbm5lY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdjb25uZWN0JyxcbiAgICAgICAgICAgIH0sIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLnJlc2V0KCk7XG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZXBsYXlTcGVlZFxuICAgICAqL1xuICAgIGFzeW5jIHNldFJlcGxheVNwZWVkKHJlcGxheVNwZWVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyByZXNvbHZlID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVwbGF5U3BlZWQgPSByZXBsYXlTcGVlZDtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5yZXBsYXlTcGVlZCA9IHJlcGxheVNwZWVkO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3JlcGxheS1zcGVlZCcsXG4gICAgICAgICAgICAgICAgcmVwbGF5U3BlZWQ6IHJlcGxheVNwZWVkLFxuICAgICAgICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGEgc291cmNlIHRpbWUgcmFuZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnRUaW1lIC0gdGhlIHN0YXJ0VGltZSAoaW4gZGF0ZSBJU08pXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVuZFRpbWUgLSB0aGUgc3RhcnRUaW1lIChpbiBkYXRlIElTTylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVwbGF5U3BlZWQgLSB0aGUgcmVwbGF5IHNwZWVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZWNvbm5lY3QgLSByZWNvbm5lY3QgaWYgd2FzIGNvbm5lY3RlZFxuICAgICAqIEBwYXJhbSB7TW9kZX0gbW9kZSAtIGRlZmF1bHQgZGF0YVNvdXJjZSBtb2RlXG4gICAgICovXG4gICAgYXN5bmMgc2V0VGltZVJhbmdlKHN0YXJ0VGltZT0gdGhpcy5nZXRTdGFydFRpbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgZW5kVGltZT0gdGhpcy5nZXRFbmRUaW1lKCksXG4gICAgICAgICAgICAgICAgICAgICAgIHJlcGxheVNwZWVkPSB0aGlzLmdldFJlcGxheVNwZWVkKCksXG4gICAgICAgICAgICAgICAgICAgICAgIHJlY29ubmVjdD0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgIG1vZGU9IHRoaXMubW9kZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgcmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmVuZFRpbWUgPSBlbmRUaW1lO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAndXBkYXRlLXByb3BlcnRpZXMnLFxuICAgICAgICAgICAgICAgIG1vZGU6IG1vZGUsXG4gICAgICAgICAgICAgICAgcmVwbGF5U3BlZWQ6IHJlcGxheVNwZWVkLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgIGVuZFRpbWU6IGVuZFRpbWVcbiAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBkcyBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRzLnNldFRpbWVSYW5nZShzdGFydFRpbWUsIGVuZFRpbWUsIHJlcGxheVNwZWVkLCByZWNvbm5lY3QsIG1vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVQcm9wZXJ0aWVzKHByb3BlcnRpZXMpIHtcbiAgICAgICAgZm9yIChsZXQgZHMgb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgZHMudXBkYXRlUHJvcGVydGllcyhwcm9wZXJ0aWVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgcmVmZXJlbmNlIHRpbWVcbiAgICAgKi9cbiAgICBhc3luYyByZXNldCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdyZXNldCdcbiAgICAgICAgICAgIH0sIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2N1cnJlbnQtdGltZSdcbiAgICAgICAgICAgIH0sIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRoZSBkYXRhU291cmNlIHRoZW4gdGhlIHByb3RvY29sIHdpbGwgYmUgb3BlbmVkIGFzIHdlbGwuXG4gICAgICovXG4gICAgYXN5bmMgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIGZvciAobGV0IGRzIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIGlmICghKGF3YWl0IGRzLmlzQ29ubmVjdGVkKCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RNZXNzYWdlKHByb3BzLCBGbiwgY2hlY2tJbml0ID0gdHJ1ZSkge1xuICAgICAgICBpZihjaGVja0luaXQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tJbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZUlkID0gcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgIG1lc3NhZ2VJZDogbWVzc2FnZUlkXG4gICAgICAgIH0pO1xuICAgICAgICBpZihpc0RlZmluZWQoRm4pKSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzTWFwW21lc3NhZ2VJZF0gPSBGbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVdvcmtlck1lc3NhZ2UoKSB7XG4gICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBldmVudC5kYXRhLm1lc3NhZ2VJZDtcbiAgICAgICAgICAgIGlmKGlkIGluIHRoaXMubWVzc2FnZXNNYXApe1xuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZXNNYXBbaWRdKGV2ZW50LmRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVzc2FnZXNNYXBbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgIERhdGFTeW5jaHJvbml6ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///169\n")},170:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "aa0fd638e1e98544310a.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9EYXRhU3luY2hyb25pemVyLndvcmtlci5qcz81ZjMwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLE9BQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTcwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFhMGZkNjM4ZTFlOTg1NDQzMTBhLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///170\n')},171:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(2);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(173);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\nvar View = __webpack_require__(8);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {}; // map Layer id to array of corresponding draping\n\n    this.layerIdToDrapedImage = {};\n  }\n\n  async setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'drapedImage\') {\n        this.updateDrapedImage(d);\n      } else if (data.type === \'ellipse\') {\n        this.updateEllipse(d);\n      } else if (data.type === \'polygon\') {\n        this.updatePolygon(d);\n      } else if (data.type === \'coplanarPolygon\') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === \'frustum\') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  async addPolygonToLayer(props, polygon) {\n    this.layerIdToPolygon[props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  async addMarkerToLayer(props, markerObject) {\n    this.layerIdToMarkers[props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  async addPolylineToLayer(props, polylineObject) {\n    this.layerIdToPolylines[props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  async addEllipseToLayer(props, ellipseObject) {\n    this.layerIdToEllipsoids[props.ellipseId] = ellipseObject;\n  }\n  /**\n   * Associate a drapedImageId to a Layer for a fast lookup\n   * @protected\n   * @param {ImageDraping.props} layer - the Layer object\n   * @param {Object} drapedImageObject - the Map drapedImage object\n   */\n\n\n  async addDrapedImageToLayer(props, drapedImageObject) {\n    this.layerIdToDrapedImage[props.drapedImageId] = drapedImageObject;\n  }\n\n  async addFrustumToLayer(props, frustum) {\n    this.layerIdToFrustum[props.frustumId] = frustum;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      array.push(this.layerIdToPolygon[id]);\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.polygonId in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.markerId in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      array.push(this.layerIdToMarkers[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      array.push(this.layerIdToPolylines[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      array.push(this.layerIdToEllipsoids[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.ellipseId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the draped image associate to the Layer\n   * @protected\n   * @param {ImageDrapingLayer.props} layer - the Layer Object\n   */\n\n\n  getDrapedImage(props) {\n    if (!(props.drapedImageId in this.layerIdToDrapedImage)) {\n      return null;\n    }\n\n    return this.layerIdToDrapedImage[props.drapedImageId];\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      array.push(this.layerIdToFrustum[id]);\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.frustumId in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    // check for marker\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeDrapedImages(layer);\n    this.removeFrustums(layer);\n    super.removeAllFromLayer(layer);\n  }\n\n  removePolygons(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const polygon = this.layerIdToPolygon[id];\n\n      if (Object(Utils["m" /* isDefined */])(polygon)) {\n        this.removePolygonFromLayer(polygon);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const marker = this.layerIdToMarkers[id];\n\n      if (Object(Utils["m" /* isDefined */])(marker)) {\n        this.removeMarkerFromLayer(marker);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    const ids = ellipse.getIds() || [];\n\n    for (let id of ids) {\n      const ellipse = this.layerIdToEllipsoids[id];\n\n      if (Object(Utils["m" /* isDefined */])(ellipse)) {\n        this.removeEllipseFromLayer(ellipse);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    const ids = polyline.getIds() || [];\n\n    for (let id of ids) {\n      const polyline = this.layerIdToPolylines[id];\n\n      if (Object(Utils["m" /* isDefined */])(polyline)) {\n        this.removePolylineFromLayer(polyline);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[id];\n    }\n  }\n  /**\n   * Remove the drapedImage corresponding to a ImageDraping Layer\n   * @param {ImageDraping} imageDraping - the layer to remove the drapedImage from\n   */\n\n\n  removeDrapedImages(drapedImage) {\n    const ids = drapedImage.getIds() || [];\n\n    for (let id of ids) {\n      const drapedImage = this.layerIdToDrapedImage[id];\n\n      if (Object(Utils["m" /* isDefined */])(drapedImage)) {\n        this.removeDrapedImageFromLayer(drapedImage);\n      } // remove drapedImage ids from Layer map\n\n\n      delete this.layerIdToDrapedImage[id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const frustum = this.layerIdToFrustum[id];\n\n      if (Object(Utils["m" /* isDefined */])(frustum)) {\n        this.removeFrustumFromLayer(frustum);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a draped image from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} drapedImage - The Map drapedImage object\n   */\n\n\n  removeDrapedImageFromLayer(drapedImage) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["m" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["m" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["m" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["m" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["m" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["m" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["m" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  async updateMarker() {}\n\n  async updatePolyline() {}\n\n  async updatePolygon() {}\n\n  async updateEllipse() {}\n\n  async updateCoPlanarPolygon() {}\n\n  async updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\', \'polygon\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["m" /* isDefined */])(options)) {\n      if (Object(Utils["m" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["m" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["m" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["m" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["m" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["m" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["m" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["c" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["m" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations;\n    let polylinePoints = [];\n\n    if (Object(Utils["m" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  async updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["m" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on(\'click\', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on(\'contextmenu\', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on(\'mouseover\', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["m" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  async updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils["m" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations;\n\n      if (Object(Utils["m" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  async updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils["m" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices;\n      let polygonPoints = [];\n\n      if (Object(Utils["m" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices;\n    let polygonPoints = [];\n\n    if (Object(Utils["m" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///171\n')},172:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(10);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/BinaryDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import BinaryDataLayer from 'osh-js/core/ui/layer/BinaryDataLayer';\n *\n */\n\nclass BinaryDataLayer_BinaryDataLayer extends Layer[\"a\" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = 'binaryData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      frameData: undefined\n    };\n\n    if (Object(Utils[\"m\" /* isDefined */])(properties.frameData)) {\n      this.props.frameData = properties.frameData;\n    }\n\n    this.definedId('dataId', props);\n\n    if (Object(Utils[\"m\" /* isDefined */])(properties.getFrameData)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('frameData', await this.getFunc('getFrameData')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getFrameData'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_BinaryDataLayer = (BinaryDataLayer_BinaryDataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/VideoDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends BinaryDataLayer\n * @example\n *\n * import VideoDataLayer from 'osh-js/core/ui/layer/VideoDataLayer';\n *\n */\n\nclass VideoDataLayer_VideoDataLayer extends layer_BinaryDataLayer {\n  constructor(properties) {\n    super(properties);\n    this.type = 'videoData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      roll: 0\n    };\n\n    if (Object(Utils[\"m\" /* isDefined */])(properties.roll)) {\n      props.roll = properties.roll;\n    }\n\n    this.definedId('videoDataId', props);\n\n    if (Object(Utils[\"m\" /* isDefined */])(properties.getRoll)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('roll', await this.getFunc('getRoll')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getRoll'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_VideoDataLayer = __webpack_exports__[\"a\"] = (VideoDataLayer_VideoDataLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9CaW5hcnlEYXRhTGF5ZXIuanM/MzMzYyIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllci5qcz9kZjZhIl0sIm5hbWVzIjpbIkJpbmFyeURhdGFMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsImluaXQiLCJwcm9wcyIsImZyYW1lRGF0YSIsInVuZGVmaW5lZCIsImlzRGVmaW5lZCIsImRlZmluZWRJZCIsImdldEZyYW1lRGF0YSIsImZuIiwicmVjIiwidGltZXN0YW1wIiwib3B0aW9ucyIsInVwZGF0ZVByb3BlcnR5IiwiZ2V0RnVuYyIsImFkZEZuIiwiZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5IiwiVmlkZW9EYXRhTGF5ZXIiLCJyb2xsIiwiZ2V0Um9sbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsK0JBQU4sU0FBOEJDLHdCQUE5QixDQUFvQztFQUVoQ0MsV0FBVyxDQUFDQyxVQUFELEVBQWE7SUFDcEIsTUFBTUEsVUFBTjtJQUNBLEtBQUtDLElBQUwsR0FBWSxZQUFaO0VBQ0gsQ0FMK0IsQ0FNaEM7OztFQUNBQyxJQUFJLENBQUNGLFVBQVUsR0FBQyxLQUFLQSxVQUFqQixFQUE2QjtJQUM3QixNQUFNRSxJQUFOLENBQVdGLFVBQVg7SUFDQSxNQUFNRyxLQUFLLEdBQUc7TUFDVkMsU0FBUyxFQUFFQztJQURELENBQWQ7O0lBSUEsSUFBSUMsa0NBQVMsQ0FBQ04sVUFBVSxDQUFDSSxTQUFaLENBQWIsRUFBb0M7TUFDaEMsS0FBS0QsS0FBTCxDQUFXQyxTQUFYLEdBQXVCSixVQUFVLENBQUNJLFNBQWxDO0lBQ0g7O0lBRUQsS0FBS0csU0FBTCxDQUFlLFFBQWYsRUFBeUJKLEtBQXpCOztJQUVBLElBQUlHLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ1EsWUFBWixDQUFiLEVBQXVDO01BQ25DLElBQUlDLEVBQUUsR0FBRyxPQUFPQyxHQUFQLEVBQVlDLFNBQVosRUFBdUJDLE9BQXZCLEtBQW1DO1FBQ3hDLEtBQUtDLGNBQUwsQ0FBb0IsV0FBcEIsRUFBZ0MsTUFBTSxLQUFLQyxPQUFMLENBQWEsY0FBYixFQUE2QkosR0FBN0IsRUFBa0NDLFNBQWxDLEVBQTZDQyxPQUE3QyxDQUF0QztNQUNILENBRkQ7O01BR0EsS0FBS0csS0FBTCxDQUFXLEtBQUtDLDJCQUFMLENBQWlDLGNBQWpDLENBQVgsRUFBNkRQLEVBQTdEO0lBQ0g7RUFDSjs7QUF6QitCOztBQTJCckJaLHlGQUFmLEU7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNb0IsNkJBQU4sU0FBNkJwQixxQkFBN0IsQ0FBNkM7RUFFekNFLFdBQVcsQ0FBQ0MsVUFBRCxFQUFhO0lBQ3BCLE1BQU1BLFVBQU47SUFDQSxLQUFLQyxJQUFMLEdBQVksV0FBWjtFQUNILENBTHdDLENBTXpDOzs7RUFDQUMsSUFBSSxDQUFDRixVQUFVLEdBQUMsS0FBS0EsVUFBakIsRUFBNkI7SUFDN0IsTUFBTUUsSUFBTixDQUFXRixVQUFYO0lBQ0EsTUFBTUcsS0FBSyxHQUFHO01BQ1plLElBQUksRUFBRTtJQURNLENBQWQ7O0lBSUEsSUFBSVosa0NBQVMsQ0FBQ04sVUFBVSxDQUFDa0IsSUFBWixDQUFiLEVBQStCO01BQzNCZixLQUFLLENBQUNlLElBQU4sR0FBYWxCLFVBQVUsQ0FBQ2tCLElBQXhCO0lBQ0g7O0lBRUQsS0FBS1gsU0FBTCxDQUFlLGFBQWYsRUFBOEJKLEtBQTlCOztJQUVBLElBQUlHLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ21CLE9BQVosQ0FBYixFQUFrQztNQUM5QixJQUFJVixFQUFFLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxTQUFaLEVBQXVCQyxPQUF2QixLQUFtQztRQUN4QyxLQUFLQyxjQUFMLENBQW9CLE1BQXBCLEVBQTJCLE1BQU0sS0FBS0MsT0FBTCxDQUFhLFNBQWIsRUFBd0JKLEdBQXhCLEVBQTZCQyxTQUE3QixFQUF3Q0MsT0FBeEMsQ0FBakM7TUFDSCxDQUZEOztNQUdBLEtBQUtHLEtBQUwsQ0FBVyxLQUFLQywyQkFBTCxDQUFpQyxTQUFqQyxDQUFYLEVBQXdEUCxFQUF4RDtJQUNIO0VBQ0o7O0FBekJ3Qzs7QUEyQjlCUSxpSEFBZiIsImZpbGUiOiIxNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBMYXllciBmcm9tIFwiLi9MYXllci5qc1wiO1xuaW1wb3J0IHtpc0RlZmluZWQsIHJhbmRvbVVVSUR9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIExheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSAnb3NoLWpzL2NvcmUvdWkvbGF5ZXIvQmluYXJ5RGF0YUxheWVyJztcbiAqXG4gKi9cbmNsYXNzIEJpbmFyeURhdGFMYXllciBleHRlbmRzIExheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdiaW5hcnlEYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBmcmFtZURhdGE6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5mcmFtZURhdGEpKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZnJhbWVEYXRhID0gcHJvcGVydGllcy5mcmFtZURhdGE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmluZWRJZCgnZGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRGcmFtZURhdGEpKXtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ2ZyYW1lRGF0YScsYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRGcmFtZURhdGEnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEZyYW1lRGF0YScpLCBmbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCaW5hcnlEYXRhTGF5ZXI7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7aXNEZWZpbmVkfSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSBcIi4vQmluYXJ5RGF0YUxheWVyXCI7XG5cbi8qKlxuICogQGV4dGVuZHMgQmluYXJ5RGF0YUxheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBWaWRlb0RhdGFMYXllciBmcm9tICdvc2gtanMvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllcic7XG4gKlxuICovXG5jbGFzcyBWaWRlb0RhdGFMYXllciBleHRlbmRzIEJpbmFyeURhdGFMYXllciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAndmlkZW9EYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgcm9sbDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5yb2xsKSl7XG4gICAgICAgICAgICBwcm9wcy5yb2xsID0gcHJvcGVydGllcy5yb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZWZpbmVkSWQoJ3ZpZGVvRGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRSb2xsKSl7XG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdyb2xsJyxhd2FpdCB0aGlzLmdldEZ1bmMoJ2dldFJvbGwnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFJvbGwnKSwgZm4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVmlkZW9EYXRhTGF5ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///172\n")},178:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(179);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"764b465c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsR0FBK0c7QUFDckk7QUFDQSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQW9IO0FBQ3RJLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjE3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzY0YjQ2NWNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///178\n")},179:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUEwRztBQUNwSjtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMTc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIub3NoLXZpZXcge1xcbiAgICB3aWR0aDoxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///179\n')},182:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(183);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"47acb68c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/NDUyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUFxSDtBQUMzSTtBQUNBLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBb0g7QUFDdEksK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vVUlTbGlkZXIuY3NzXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0N2FjYjY4Y1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///182\n")},183:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(184);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.i, ".noUi-tooltip {\\n    border-radius: 10px;\\n    box-shadow: 2px 2px 5px 0px #777;\\n    background-color: #777;\\n    filter: alpha(opacity=80);\\n    -moz-opacity: 0.8;\\n    opacity: 0.8;\\n    border: none;\\n    color: #FFF;\\n    width: 100px;\\n    height: 23px;\\n    padding: 2px 2px 2px 2px;\\n}\\n.noUi-horizontal .noUi-handle-lower .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-horizontal .noUi-handle-upper .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-connect {\\n    background-color: rgba(5, 107, 166, 0.6);\\n}\\n\\n.noUi-tooltip:after {\\n    bottom: -14px;\\n    margin-left: -10px;\\n    border-top: 10px solid #fff;\\n}\\n\\n.noUi-tooltip:after {\\n    content: \'\';\\n    position: absolute;\\n    top: -10px;\\n    left: 50%;\\n    margin-left: -9px;\\n    width: 0;\\n    height: 0;\\n    border-left: 10px solid transparent;\\n    border-right: 10px solid transparent;\\n    border-top: none;\\n    border-bottom: 10px solid #777;\\n}\\n\\n.noUi-pips-horizontal {\\n    height:0px !important;\\n}\\n\\n\\n.noUi-handle:active {\\n    background-color: rgba(5, 107, 166, 0.6);\\n    box-shadow:none;\\n    border:none;\\n}\\n\\n\\n.noUi-horizontal {\\n    width: calc(100% - 50px);\\n}\\n\\n/** put range and control button side by side **/\\n\\n.osh-rangeslider-slider{\\n    float:left;\\n}\\n\\n.osh-rangeslider-control {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control-select {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control-select a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control a:after {\\n    font-family: FontAwesome;\\n    content: \\"\\\\f044\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n\\n.osh-rangeslider-control-select a:after{\\n    font-family: FontAwesome;\\n    content: \\"\\\\f046\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/ZjgwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQTBHO0FBQ3BKLHdDQUF3QyxtQkFBTyxDQUFDLEdBQWtKO0FBQ2xNO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUyxrQkFBa0IsMEJBQTBCLHVDQUF1Qyw2QkFBNkIsZ0NBQWdDLHdCQUF3QixtQkFBbUIsbUJBQW1CLGtCQUFrQixtQkFBbUIsbUJBQW1CLCtCQUErQixHQUFHLHFEQUFxRCxnQkFBZ0IsR0FBRyx1REFBdUQsZ0JBQWdCLEdBQUcsbUJBQW1CLCtDQUErQyxHQUFHLHlCQUF5QixvQkFBb0IseUJBQXlCLGtDQUFrQyxHQUFHLHlCQUF5QixrQkFBa0IseUJBQXlCLGlCQUFpQixnQkFBZ0Isd0JBQXdCLGVBQWUsZ0JBQWdCLDBDQUEwQywyQ0FBMkMsdUJBQXVCLHFDQUFxQyxHQUFHLDJCQUEyQiw0QkFBNEIsR0FBRywyQkFBMkIsK0NBQStDLHNCQUFzQixrQkFBa0IsR0FBRyx3QkFBd0IsK0JBQStCLEdBQUcsaUZBQWlGLGlCQUFpQixHQUFHLDhCQUE4QixrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLHFDQUFxQyxrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLCtCQUErQiw0QkFBNEIsR0FBRyxzQ0FBc0MsNEJBQTRCLEdBQUcsc0NBQXNDLCtCQUErQiwwQkFBMEIsNkJBQTZCLHFCQUFxQixHQUFHLDRDQUE0QywrQkFBK0IsMEJBQTBCLDZCQUE2QixxQkFBcUIsR0FBRztBQUNqM0Q7QUFDQSIsImZpbGUiOiIxODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnQtYXdlc29tZS00LjYuMy9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3NcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubm9VaS10b29sdGlwIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggMHB4ICM3Nzc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3Nzc7XFxuICAgIGZpbHRlcjogYWxwaGEob3BhY2l0eT04MCk7XFxuICAgIC1tb3otb3BhY2l0eTogMC44O1xcbiAgICBvcGFjaXR5OiAwLjg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY29sb3I6ICNGRkY7XFxuICAgIHdpZHRoOiAxMDBweDtcXG4gICAgaGVpZ2h0OiAyM3B4O1xcbiAgICBwYWRkaW5nOiAycHggMnB4IDJweCAycHg7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLWxvd2VyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLXVwcGVyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWNvbm5lY3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDUsIDEwNywgMTY2LCAwLjYpO1xcbn1cXG5cXG4ubm9VaS10b29sdGlwOmFmdGVyIHtcXG4gICAgYm90dG9tOiAtMTRweDtcXG4gICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICNmZmY7XFxufVxcblxcbi5ub1VpLXRvb2x0aXA6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0xMHB4O1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIG1hcmdpbi1sZWZ0OiAtOXB4O1xcbiAgICB3aWR0aDogMDtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBib3JkZXItbGVmdDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICM3Nzc7XFxufVxcblxcbi5ub1VpLXBpcHMtaG9yaXpvbnRhbCB7XFxuICAgIGhlaWdodDowcHggIWltcG9ydGFudDtcXG59XFxuXFxuXFxuLm5vVWktaGFuZGxlOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNSwgMTA3LCAxNjYsIDAuNik7XFxuICAgIGJveC1zaGFkb3c6bm9uZTtcXG4gICAgYm9yZGVyOm5vbmU7XFxufVxcblxcblxcbi5ub1VpLWhvcml6b250YWwge1xcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNTBweCk7XFxufVxcblxcbi8qKiBwdXQgcmFuZ2UgYW5kIGNvbnRyb2wgYnV0dG9uIHNpZGUgYnkgc2lkZSAqKi9cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLXNsaWRlcntcXG4gICAgZmxvYXQ6bGVmdDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sIHtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sLXNlbGVjdCB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICB3aWR0aDogMzBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbCBhe1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYXtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLWNvbnRyb2wgYTphZnRlciB7XFxuICAgIGZvbnQtZmFtaWx5OiBGb250QXdlc29tZTtcXG4gICAgY29udGVudDogXFxcIlxcXFxmMDQ0XFxcIjtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgZm9udC1zaXplOjMwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYTphZnRlcntcXG4gICAgZm9udC1mYW1pbHk6IEZvbnRBd2Vzb21lO1xcbiAgICBjb250ZW50OiBcXFwiXFxcXGYwNDZcXFwiO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICBmb250LXNpemU6MzBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///183\n')},184:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nvar ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(26);\nvar ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(185);\nvar ___CSS_LOADER_URL_IMPORT_1___ = __webpack_require__(186);\nvar ___CSS_LOADER_URL_IMPORT_2___ = __webpack_require__(187);\nvar ___CSS_LOADER_URL_IMPORT_3___ = __webpack_require__(188);\nvar ___CSS_LOADER_URL_IMPORT_4___ = __webpack_require__(189);\nvar ___CSS_LOADER_URL_IMPORT_5___ = __webpack_require__(190);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___, { hash: "?#iefix&v=4.6.3" });\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\nvar ___CSS_LOADER_URL_REPLACEMENT_4___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_4___);\nvar ___CSS_LOADER_URL_REPLACEMENT_5___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_5___, { hash: "#fontawesomeregular" });\n// Module\nexports.push([module.i, "/*!\\n *  Font Awesome 4.6.3 by @davegandy - http://fontawesome.io - @fontawesome\\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\\n */@font-face{font-family:\'FontAwesome\';src:url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");src:url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format(\'embedded-opentype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format(\'woff2\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format(\'woff\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format(\'truetype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ") format(\'svg\');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}  .fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}  .fa-2x{font-size:2em}  .fa-3x{font-size:3em}  .fa-4x{font-size:4em}  .fa-5x{font-size:5em}  .fa-fw{width:1.28571429em;text-align:center}  .fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}  .fa-ul>li{position:relative}  .fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}  .fa-li.fa-lg{left:-1.85714286em}  .fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}  .fa-pull-left{float:left}  .fa-pull-right{float:right}  .fa.fa-pull-left{margin-right:.3em}  .fa.fa-pull-right{margin-left:.3em}  .pull-right{float:right}  .pull-left{float:left}  .fa.pull-left{margin-right:.3em}  .fa.pull-right{margin-left:.3em}  .fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}  .fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}  @-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  @keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  .fa-rotate-90{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\\";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}  .fa-rotate-180{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\\";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}  .fa-rotate-270{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\\";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}  .fa-flip-horizontal{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\\";-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}  .fa-flip-vertical{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\\";-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}  :root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}  .fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}  .fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}  .fa-stack-1x{line-height:inherit}  .fa-stack-2x{font-size:2em}  .fa-inverse{color:#fff}  .fa-glass:before{content:\\"\\\\f000\\"}  .fa-music:before{content:\\"\\\\f001\\"}  .fa-search:before{content:\\"\\\\f002\\"}  .fa-envelope-o:before{content:\\"\\\\f003\\"}  .fa-heart:before{content:\\"\\\\f004\\"}  .fa-star:before{content:\\"\\\\f005\\"}  .fa-star-o:before{content:\\"\\\\f006\\"}  .fa-user:before{content:\\"\\\\f007\\"}  .fa-film:before{content:\\"\\\\f008\\"}  .fa-th-large:before{content:\\"\\\\f009\\"}  .fa-th:before{content:\\"\\\\f00a\\"}  .fa-th-list:before{content:\\"\\\\f00b\\"}  .fa-check:before{content:\\"\\\\f00c\\"}  .fa-remove:before,.fa-close:before,.fa-times:before{content:\\"\\\\f00d\\"}  .fa-search-plus:before{content:\\"\\\\f00e\\"}  .fa-search-minus:before{content:\\"\\\\f010\\"}  .fa-power-off:before{content:\\"\\\\f011\\"}  .fa-signal:before{content:\\"\\\\f012\\"}  .fa-gear:before,.fa-cog:before{content:\\"\\\\f013\\"}  .fa-trash-o:before{content:\\"\\\\f014\\"}  .fa-home:before{content:\\"\\\\f015\\"}  .fa-file-o:before{content:\\"\\\\f016\\"}  .fa-clock-o:before{content:\\"\\\\f017\\"}  .fa-road:before{content:\\"\\\\f018\\"}  .fa-download:before{content:\\"\\\\f019\\"}  .fa-arrow-circle-o-down:before{content:\\"\\\\f01a\\"}  .fa-arrow-circle-o-up:before{content:\\"\\\\f01b\\"}  .fa-inbox:before{content:\\"\\\\f01c\\"}  .fa-play-circle-o:before{content:\\"\\\\f01d\\"}  .fa-rotate-right:before,.fa-repeat:before{content:\\"\\\\f01e\\"}  .fa-refresh:before{content:\\"\\\\f021\\"}  .fa-list-alt:before{content:\\"\\\\f022\\"}  .fa-lock:before{content:\\"\\\\f023\\"}  .fa-flag:before{content:\\"\\\\f024\\"}  .fa-headphones:before{content:\\"\\\\f025\\"}  .fa-volume-off:before{content:\\"\\\\f026\\"}  .fa-volume-down:before{content:\\"\\\\f027\\"}  .fa-volume-up:before{content:\\"\\\\f028\\"}  .fa-qrcode:before{content:\\"\\\\f029\\"}  .fa-barcode:before{content:\\"\\\\f02a\\"}  .fa-tag:before{content:\\"\\\\f02b\\"}  .fa-tags:before{content:\\"\\\\f02c\\"}  .fa-book:before{content:\\"\\\\f02d\\"}  .fa-bookmark:before{content:\\"\\\\f02e\\"}  .fa-print:before{content:\\"\\\\f02f\\"}  .fa-camera:before{content:\\"\\\\f030\\"}  .fa-font:before{content:\\"\\\\f031\\"}  .fa-bold:before{content:\\"\\\\f032\\"}  .fa-italic:before{content:\\"\\\\f033\\"}  .fa-text-height:before{content:\\"\\\\f034\\"}  .fa-text-width:before{content:\\"\\\\f035\\"}  .fa-align-left:before{content:\\"\\\\f036\\"}  .fa-align-center:before{content:\\"\\\\f037\\"}  .fa-align-right:before{content:\\"\\\\f038\\"}  .fa-align-justify:before{content:\\"\\\\f039\\"}  .fa-list:before{content:\\"\\\\f03a\\"}  .fa-dedent:before,.fa-outdent:before{content:\\"\\\\f03b\\"}  .fa-indent:before{content:\\"\\\\f03c\\"}  .fa-video-camera:before{content:\\"\\\\f03d\\"}  .fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\\"\\\\f03e\\"}  .fa-pencil:before{content:\\"\\\\f040\\"}  .fa-map-marker:before{content:\\"\\\\f041\\"}  .fa-adjust:before{content:\\"\\\\f042\\"}  .fa-tint:before{content:\\"\\\\f043\\"}  .fa-edit:before,.fa-pencil-square-o:before{content:\\"\\\\f044\\"}  .fa-share-square-o:before{content:\\"\\\\f045\\"}  .fa-check-square-o:before{content:\\"\\\\f046\\"}  .fa-arrows:before{content:\\"\\\\f047\\"}  .fa-step-backward:before{content:\\"\\\\f048\\"}  .fa-fast-backward:before{content:\\"\\\\f049\\"}  .fa-backward:before{content:\\"\\\\f04a\\"}  .fa-play:before{content:\\"\\\\f04b\\"}  .fa-pause:before{content:\\"\\\\f04c\\"}  .fa-stop:before{content:\\"\\\\f04d\\"}  .fa-forward:before{content:\\"\\\\f04e\\"}  .fa-fast-forward:before{content:\\"\\\\f050\\"}  .fa-step-forward:before{content:\\"\\\\f051\\"}  .fa-eject:before{content:\\"\\\\f052\\"}  .fa-chevron-left:before{content:\\"\\\\f053\\"}  .fa-chevron-right:before{content:\\"\\\\f054\\"}  .fa-plus-circle:before{content:\\"\\\\f055\\"}  .fa-minus-circle:before{content:\\"\\\\f056\\"}  .fa-times-circle:before{content:\\"\\\\f057\\"}  .fa-check-circle:before{content:\\"\\\\f058\\"}  .fa-question-circle:before{content:\\"\\\\f059\\"}  .fa-info-circle:before{content:\\"\\\\f05a\\"}  .fa-crosshairs:before{content:\\"\\\\f05b\\"}  .fa-times-circle-o:before{content:\\"\\\\f05c\\"}  .fa-check-circle-o:before{content:\\"\\\\f05d\\"}  .fa-ban:before{content:\\"\\\\f05e\\"}  .fa-arrow-left:before{content:\\"\\\\f060\\"}  .fa-arrow-right:before{content:\\"\\\\f061\\"}  .fa-arrow-up:before{content:\\"\\\\f062\\"}  .fa-arrow-down:before{content:\\"\\\\f063\\"}  .fa-mail-forward:before,.fa-share:before{content:\\"\\\\f064\\"}  .fa-expand:before{content:\\"\\\\f065\\"}  .fa-compress:before{content:\\"\\\\f066\\"}  .fa-plus:before{content:\\"\\\\f067\\"}  .fa-minus:before{content:\\"\\\\f068\\"}  .fa-asterisk:before{content:\\"\\\\f069\\"}  .fa-exclamation-circle:before{content:\\"\\\\f06a\\"}  .fa-gift:before{content:\\"\\\\f06b\\"}  .fa-leaf:before{content:\\"\\\\f06c\\"}  .fa-fire:before{content:\\"\\\\f06d\\"}  .fa-eye:before{content:\\"\\\\f06e\\"}  .fa-eye-slash:before{content:\\"\\\\f070\\"}  .fa-warning:before,.fa-exclamation-triangle:before{content:\\"\\\\f071\\"}  .fa-plane:before{content:\\"\\\\f072\\"}  .fa-calendar:before{content:\\"\\\\f073\\"}  .fa-random:before{content:\\"\\\\f074\\"}  .fa-comment:before{content:\\"\\\\f075\\"}  .fa-magnet:before{content:\\"\\\\f076\\"}  .fa-chevron-up:before{content:\\"\\\\f077\\"}  .fa-chevron-down:before{content:\\"\\\\f078\\"}  .fa-retweet:before{content:\\"\\\\f079\\"}  .fa-shopping-cart:before{content:\\"\\\\f07a\\"}  .fa-folder:before{content:\\"\\\\f07b\\"}  .fa-folder-open:before{content:\\"\\\\f07c\\"}  .fa-arrows-v:before{content:\\"\\\\f07d\\"}  .fa-arrows-h:before{content:\\"\\\\f07e\\"}  .fa-bar-chart-o:before,.fa-bar-chart:before{content:\\"\\\\f080\\"}  .fa-twitter-square:before{content:\\"\\\\f081\\"}  .fa-facebook-square:before{content:\\"\\\\f082\\"}  .fa-camera-retro:before{content:\\"\\\\f083\\"}  .fa-key:before{content:\\"\\\\f084\\"}  .fa-gears:before,.fa-cogs:before{content:\\"\\\\f085\\"}  .fa-comments:before{content:\\"\\\\f086\\"}  .fa-thumbs-o-up:before{content:\\"\\\\f087\\"}  .fa-thumbs-o-down:before{content:\\"\\\\f088\\"}  .fa-star-half:before{content:\\"\\\\f089\\"}  .fa-heart-o:before{content:\\"\\\\f08a\\"}  .fa-sign-out:before{content:\\"\\\\f08b\\"}  .fa-linkedin-square:before{content:\\"\\\\f08c\\"}  .fa-thumb-tack:before{content:\\"\\\\f08d\\"}  .fa-external-link:before{content:\\"\\\\f08e\\"}  .fa-sign-in:before{content:\\"\\\\f090\\"}  .fa-trophy:before{content:\\"\\\\f091\\"}  .fa-github-square:before{content:\\"\\\\f092\\"}  .fa-upload:before{content:\\"\\\\f093\\"}  .fa-lemon-o:before{content:\\"\\\\f094\\"}  .fa-phone:before{content:\\"\\\\f095\\"}  .fa-square-o:before{content:\\"\\\\f096\\"}  .fa-bookmark-o:before{content:\\"\\\\f097\\"}  .fa-phone-square:before{content:\\"\\\\f098\\"}  .fa-twitter:before{content:\\"\\\\f099\\"}  .fa-facebook-f:before,.fa-facebook:before{content:\\"\\\\f09a\\"}  .fa-github:before{content:\\"\\\\f09b\\"}  .fa-unlock:before{content:\\"\\\\f09c\\"}  .fa-credit-card:before{content:\\"\\\\f09d\\"}  .fa-feed:before,.fa-rss:before{content:\\"\\\\f09e\\"}  .fa-hdd-o:before{content:\\"\\\\f0a0\\"}  .fa-bullhorn:before{content:\\"\\\\f0a1\\"}  .fa-bell:before{content:\\"\\\\f0f3\\"}  .fa-certificate:before{content:\\"\\\\f0a3\\"}  .fa-hand-o-right:before{content:\\"\\\\f0a4\\"}  .fa-hand-o-left:before{content:\\"\\\\f0a5\\"}  .fa-hand-o-up:before{content:\\"\\\\f0a6\\"}  .fa-hand-o-down:before{content:\\"\\\\f0a7\\"}  .fa-arrow-circle-left:before{content:\\"\\\\f0a8\\"}  .fa-arrow-circle-right:before{content:\\"\\\\f0a9\\"}  .fa-arrow-circle-up:before{content:\\"\\\\f0aa\\"}  .fa-arrow-circle-down:before{content:\\"\\\\f0ab\\"}  .fa-globe:before{content:\\"\\\\f0ac\\"}  .fa-wrench:before{content:\\"\\\\f0ad\\"}  .fa-tasks:before{content:\\"\\\\f0ae\\"}  .fa-filter:before{content:\\"\\\\f0b0\\"}  .fa-briefcase:before{content:\\"\\\\f0b1\\"}  .fa-arrows-alt:before{content:\\"\\\\f0b2\\"}  .fa-group:before,.fa-users:before{content:\\"\\\\f0c0\\"}  .fa-chain:before,.fa-link:before{content:\\"\\\\f0c1\\"}  .fa-cloud:before{content:\\"\\\\f0c2\\"}  .fa-flask:before{content:\\"\\\\f0c3\\"}  .fa-cut:before,.fa-scissors:before{content:\\"\\\\f0c4\\"}  .fa-copy:before,.fa-files-o:before{content:\\"\\\\f0c5\\"}  .fa-paperclip:before{content:\\"\\\\f0c6\\"}  .fa-save:before,.fa-floppy-o:before{content:\\"\\\\f0c7\\"}  .fa-square:before{content:\\"\\\\f0c8\\"}  .fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\\"\\\\f0c9\\"}  .fa-list-ul:before{content:\\"\\\\f0ca\\"}  .fa-list-ol:before{content:\\"\\\\f0cb\\"}  .fa-strikethrough:before{content:\\"\\\\f0cc\\"}  .fa-underline:before{content:\\"\\\\f0cd\\"}  .fa-table:before{content:\\"\\\\f0ce\\"}  .fa-magic:before{content:\\"\\\\f0d0\\"}  .fa-truck:before{content:\\"\\\\f0d1\\"}  .fa-pinterest:before{content:\\"\\\\f0d2\\"}  .fa-pinterest-square:before{content:\\"\\\\f0d3\\"}  .fa-google-plus-square:before{content:\\"\\\\f0d4\\"}  .fa-google-plus:before{content:\\"\\\\f0d5\\"}  .fa-money:before{content:\\"\\\\f0d6\\"}  .fa-caret-down:before{content:\\"\\\\f0d7\\"}  .fa-caret-up:before{content:\\"\\\\f0d8\\"}  .fa-caret-left:before{content:\\"\\\\f0d9\\"}  .fa-caret-right:before{content:\\"\\\\f0da\\"}  .fa-columns:before{content:\\"\\\\f0db\\"}  .fa-unsorted:before,.fa-sort:before{content:\\"\\\\f0dc\\"}  .fa-sort-down:before,.fa-sort-desc:before{content:\\"\\\\f0dd\\"}  .fa-sort-up:before,.fa-sort-asc:before{content:\\"\\\\f0de\\"}  .fa-envelope:before{content:\\"\\\\f0e0\\"}  .fa-linkedin:before{content:\\"\\\\f0e1\\"}  .fa-rotate-left:before,.fa-undo:before{content:\\"\\\\f0e2\\"}  .fa-legal:before,.fa-gavel:before{content:\\"\\\\f0e3\\"}  .fa-dashboard:before,.fa-tachometer:before{content:\\"\\\\f0e4\\"}  .fa-comment-o:before{content:\\"\\\\f0e5\\"}  .fa-comments-o:before{content:\\"\\\\f0e6\\"}  .fa-flash:before,.fa-bolt:before{content:\\"\\\\f0e7\\"}  .fa-sitemap:before{content:\\"\\\\f0e8\\"}  .fa-umbrella:before{content:\\"\\\\f0e9\\"}  .fa-paste:before,.fa-clipboard:before{content:\\"\\\\f0ea\\"}  .fa-lightbulb-o:before{content:\\"\\\\f0eb\\"}  .fa-exchange:before{content:\\"\\\\f0ec\\"}  .fa-cloud-download:before{content:\\"\\\\f0ed\\"}  .fa-cloud-upload:before{content:\\"\\\\f0ee\\"}  .fa-user-md:before{content:\\"\\\\f0f0\\"}  .fa-stethoscope:before{content:\\"\\\\f0f1\\"}  .fa-suitcase:before{content:\\"\\\\f0f2\\"}  .fa-bell-o:before{content:\\"\\\\f0a2\\"}  .fa-coffee:before{content:\\"\\\\f0f4\\"}  .fa-cutlery:before{content:\\"\\\\f0f5\\"}  .fa-file-text-o:before{content:\\"\\\\f0f6\\"}  .fa-building-o:before{content:\\"\\\\f0f7\\"}  .fa-hospital-o:before{content:\\"\\\\f0f8\\"}  .fa-ambulance:before{content:\\"\\\\f0f9\\"}  .fa-medkit:before{content:\\"\\\\f0fa\\"}  .fa-fighter-jet:before{content:\\"\\\\f0fb\\"}  .fa-beer:before{content:\\"\\\\f0fc\\"}  .fa-h-square:before{content:\\"\\\\f0fd\\"}  .fa-plus-square:before{content:\\"\\\\f0fe\\"}  .fa-angle-double-left:before{content:\\"\\\\f100\\"}  .fa-angle-double-right:before{content:\\"\\\\f101\\"}  .fa-angle-double-up:before{content:\\"\\\\f102\\"}  .fa-angle-double-down:before{content:\\"\\\\f103\\"}  .fa-angle-left:before{content:\\"\\\\f104\\"}  .fa-angle-right:before{content:\\"\\\\f105\\"}  .fa-angle-up:before{content:\\"\\\\f106\\"}  .fa-angle-down:before{content:\\"\\\\f107\\"}  .fa-desktop:before{content:\\"\\\\f108\\"}  .fa-laptop:before{content:\\"\\\\f109\\"}  .fa-tablet:before{content:\\"\\\\f10a\\"}  .fa-mobile-phone:before,.fa-mobile:before{content:\\"\\\\f10b\\"}  .fa-circle-o:before{content:\\"\\\\f10c\\"}  .fa-quote-left:before{content:\\"\\\\f10d\\"}  .fa-quote-right:before{content:\\"\\\\f10e\\"}  .fa-spinner:before{content:\\"\\\\f110\\"}  .fa-circle:before{content:\\"\\\\f111\\"}  .fa-mail-reply:before,.fa-reply:before{content:\\"\\\\f112\\"}  .fa-github-alt:before{content:\\"\\\\f113\\"}  .fa-folder-o:before{content:\\"\\\\f114\\"}  .fa-folder-open-o:before{content:\\"\\\\f115\\"}  .fa-smile-o:before{content:\\"\\\\f118\\"}  .fa-frown-o:before{content:\\"\\\\f119\\"}  .fa-meh-o:before{content:\\"\\\\f11a\\"}  .fa-gamepad:before{content:\\"\\\\f11b\\"}  .fa-keyboard-o:before{content:\\"\\\\f11c\\"}  .fa-flag-o:before{content:\\"\\\\f11d\\"}  .fa-flag-checkered:before{content:\\"\\\\f11e\\"}  .fa-terminal:before{content:\\"\\\\f120\\"}  .fa-code:before{content:\\"\\\\f121\\"}  .fa-mail-reply-all:before,.fa-reply-all:before{content:\\"\\\\f122\\"}  .fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\\"\\\\f123\\"}  .fa-location-arrow:before{content:\\"\\\\f124\\"}  .fa-crop:before{content:\\"\\\\f125\\"}  .fa-code-fork:before{content:\\"\\\\f126\\"}  .fa-unlink:before,.fa-chain-broken:before{content:\\"\\\\f127\\"}  .fa-question:before{content:\\"\\\\f128\\"}  .fa-info:before{content:\\"\\\\f129\\"}  .fa-exclamation:before{content:\\"\\\\f12a\\"}  .fa-superscript:before{content:\\"\\\\f12b\\"}  .fa-subscript:before{content:\\"\\\\f12c\\"}  .fa-eraser:before{content:\\"\\\\f12d\\"}  .fa-puzzle-piece:before{content:\\"\\\\f12e\\"}  .fa-microphone:before{content:\\"\\\\f130\\"}  .fa-microphone-slash:before{content:\\"\\\\f131\\"}  .fa-shield:before{content:\\"\\\\f132\\"}  .fa-calendar-o:before{content:\\"\\\\f133\\"}  .fa-fire-extinguisher:before{content:\\"\\\\f134\\"}  .fa-rocket:before{content:\\"\\\\f135\\"}  .fa-maxcdn:before{content:\\"\\\\f136\\"}  .fa-chevron-circle-left:before{content:\\"\\\\f137\\"}  .fa-chevron-circle-right:before{content:\\"\\\\f138\\"}  .fa-chevron-circle-up:before{content:\\"\\\\f139\\"}  .fa-chevron-circle-down:before{content:\\"\\\\f13a\\"}  .fa-html5:before{content:\\"\\\\f13b\\"}  .fa-css3:before{content:\\"\\\\f13c\\"}  .fa-anchor:before{content:\\"\\\\f13d\\"}  .fa-unlock-alt:before{content:\\"\\\\f13e\\"}  .fa-bullseye:before{content:\\"\\\\f140\\"}  .fa-ellipsis-h:before{content:\\"\\\\f141\\"}  .fa-ellipsis-v:before{content:\\"\\\\f142\\"}  .fa-rss-square:before{content:\\"\\\\f143\\"}  .fa-play-circle:before{content:\\"\\\\f144\\"}  .fa-ticket:before{content:\\"\\\\f145\\"}  .fa-minus-square:before{content:\\"\\\\f146\\"}  .fa-minus-square-o:before{content:\\"\\\\f147\\"}  .fa-level-up:before{content:\\"\\\\f148\\"}  .fa-level-down:before{content:\\"\\\\f149\\"}  .fa-check-square:before{content:\\"\\\\f14a\\"}  .fa-pencil-square:before{content:\\"\\\\f14b\\"}  .fa-external-link-square:before{content:\\"\\\\f14c\\"}  .fa-share-square:before{content:\\"\\\\f14d\\"}  .fa-compass:before{content:\\"\\\\f14e\\"}  .fa-toggle-down:before,.fa-caret-square-o-down:before{content:\\"\\\\f150\\"}  .fa-toggle-up:before,.fa-caret-square-o-up:before{content:\\"\\\\f151\\"}  .fa-toggle-right:before,.fa-caret-square-o-right:before{content:\\"\\\\f152\\"}  .fa-euro:before,.fa-eur:before{content:\\"\\\\f153\\"}  .fa-gbp:before{content:\\"\\\\f154\\"}  .fa-dollar:before,.fa-usd:before{content:\\"\\\\f155\\"}  .fa-rupee:before,.fa-inr:before{content:\\"\\\\f156\\"}  .fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\\"\\\\f157\\"}  .fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\\"\\\\f158\\"}  .fa-won:before,.fa-krw:before{content:\\"\\\\f159\\"}  .fa-bitcoin:before,.fa-btc:before{content:\\"\\\\f15a\\"}  .fa-file:before{content:\\"\\\\f15b\\"}  .fa-file-text:before{content:\\"\\\\f15c\\"}  .fa-sort-alpha-asc:before{content:\\"\\\\f15d\\"}  .fa-sort-alpha-desc:before{content:\\"\\\\f15e\\"}  .fa-sort-amount-asc:before{content:\\"\\\\f160\\"}  .fa-sort-amount-desc:before{content:\\"\\\\f161\\"}  .fa-sort-numeric-asc:before{content:\\"\\\\f162\\"}  .fa-sort-numeric-desc:before{content:\\"\\\\f163\\"}  .fa-thumbs-up:before{content:\\"\\\\f164\\"}  .fa-thumbs-down:before{content:\\"\\\\f165\\"}  .fa-youtube-square:before{content:\\"\\\\f166\\"}  .fa-youtube:before{content:\\"\\\\f167\\"}  .fa-xing:before{content:\\"\\\\f168\\"}  .fa-xing-square:before{content:\\"\\\\f169\\"}  .fa-youtube-play:before{content:\\"\\\\f16a\\"}  .fa-dropbox:before{content:\\"\\\\f16b\\"}  .fa-stack-overflow:before{content:\\"\\\\f16c\\"}  .fa-instagram:before{content:\\"\\\\f16d\\"}  .fa-flickr:before{content:\\"\\\\f16e\\"}  .fa-adn:before{content:\\"\\\\f170\\"}  .fa-bitbucket:before{content:\\"\\\\f171\\"}  .fa-bitbucket-square:before{content:\\"\\\\f172\\"}  .fa-tumblr:before{content:\\"\\\\f173\\"}  .fa-tumblr-square:before{content:\\"\\\\f174\\"}  .fa-long-arrow-down:before{content:\\"\\\\f175\\"}  .fa-long-arrow-up:before{content:\\"\\\\f176\\"}  .fa-long-arrow-left:before{content:\\"\\\\f177\\"}  .fa-long-arrow-right:before{content:\\"\\\\f178\\"}  .fa-apple:before{content:\\"\\\\f179\\"}  .fa-windows:before{content:\\"\\\\f17a\\"}  .fa-android:before{content:\\"\\\\f17b\\"}  .fa-linux:before{content:\\"\\\\f17c\\"}  .fa-dribbble:before{content:\\"\\\\f17d\\"}  .fa-skype:before{content:\\"\\\\f17e\\"}  .fa-foursquare:before{content:\\"\\\\f180\\"}  .fa-trello:before{content:\\"\\\\f181\\"}  .fa-female:before{content:\\"\\\\f182\\"}  .fa-male:before{content:\\"\\\\f183\\"}  .fa-gittip:before,.fa-gratipay:before{content:\\"\\\\f184\\"}  .fa-sun-o:before{content:\\"\\\\f185\\"}  .fa-moon-o:before{content:\\"\\\\f186\\"}  .fa-archive:before{content:\\"\\\\f187\\"}  .fa-bug:before{content:\\"\\\\f188\\"}  .fa-vk:before{content:\\"\\\\f189\\"}  .fa-weibo:before{content:\\"\\\\f18a\\"}  .fa-renren:before{content:\\"\\\\f18b\\"}  .fa-pagelines:before{content:\\"\\\\f18c\\"}  .fa-stack-exchange:before{content:\\"\\\\f18d\\"}  .fa-arrow-circle-o-right:before{content:\\"\\\\f18e\\"}  .fa-arrow-circle-o-left:before{content:\\"\\\\f190\\"}  .fa-toggle-left:before,.fa-caret-square-o-left:before{content:\\"\\\\f191\\"}  .fa-dot-circle-o:before{content:\\"\\\\f192\\"}  .fa-wheelchair:before{content:\\"\\\\f193\\"}  .fa-vimeo-square:before{content:\\"\\\\f194\\"}  .fa-turkish-lira:before,.fa-try:before{content:\\"\\\\f195\\"}  .fa-plus-square-o:before{content:\\"\\\\f196\\"}  .fa-space-shuttle:before{content:\\"\\\\f197\\"}  .fa-slack:before{content:\\"\\\\f198\\"}  .fa-envelope-square:before{content:\\"\\\\f199\\"}  .fa-wordpress:before{content:\\"\\\\f19a\\"}  .fa-openid:before{content:\\"\\\\f19b\\"}  .fa-institution:before,.fa-bank:before,.fa-university:before{content:\\"\\\\f19c\\"}  .fa-mortar-board:before,.fa-graduation-cap:before{content:\\"\\\\f19d\\"}  .fa-yahoo:before{content:\\"\\\\f19e\\"}  .fa-google:before{content:\\"\\\\f1a0\\"}  .fa-reddit:before{content:\\"\\\\f1a1\\"}  .fa-reddit-square:before{content:\\"\\\\f1a2\\"}  .fa-stumbleupon-circle:before{content:\\"\\\\f1a3\\"}  .fa-stumbleupon:before{content:\\"\\\\f1a4\\"}  .fa-delicious:before{content:\\"\\\\f1a5\\"}  .fa-digg:before{content:\\"\\\\f1a6\\"}  .fa-pied-piper-pp:before{content:\\"\\\\f1a7\\"}  .fa-pied-piper-alt:before{content:\\"\\\\f1a8\\"}  .fa-drupal:before{content:\\"\\\\f1a9\\"}  .fa-joomla:before{content:\\"\\\\f1aa\\"}  .fa-language:before{content:\\"\\\\f1ab\\"}  .fa-fax:before{content:\\"\\\\f1ac\\"}  .fa-building:before{content:\\"\\\\f1ad\\"}  .fa-child:before{content:\\"\\\\f1ae\\"}  .fa-paw:before{content:\\"\\\\f1b0\\"}  .fa-spoon:before{content:\\"\\\\f1b1\\"}  .fa-cube:before{content:\\"\\\\f1b2\\"}  .fa-cubes:before{content:\\"\\\\f1b3\\"}  .fa-behance:before{content:\\"\\\\f1b4\\"}  .fa-behance-square:before{content:\\"\\\\f1b5\\"}  .fa-steam:before{content:\\"\\\\f1b6\\"}  .fa-steam-square:before{content:\\"\\\\f1b7\\"}  .fa-recycle:before{content:\\"\\\\f1b8\\"}  .fa-automobile:before,.fa-car:before{content:\\"\\\\f1b9\\"}  .fa-cab:before,.fa-taxi:before{content:\\"\\\\f1ba\\"}  .fa-tree:before{content:\\"\\\\f1bb\\"}  .fa-spotify:before{content:\\"\\\\f1bc\\"}  .fa-deviantart:before{content:\\"\\\\f1bd\\"}  .fa-soundcloud:before{content:\\"\\\\f1be\\"}  .fa-database:before{content:\\"\\\\f1c0\\"}  .fa-file-pdf-o:before{content:\\"\\\\f1c1\\"}  .fa-file-word-o:before{content:\\"\\\\f1c2\\"}  .fa-file-excel-o:before{content:\\"\\\\f1c3\\"}  .fa-file-powerpoint-o:before{content:\\"\\\\f1c4\\"}  .fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\\"\\\\f1c5\\"}  .fa-file-zip-o:before,.fa-file-archive-o:before{content:\\"\\\\f1c6\\"}  .fa-file-sound-o:before,.fa-file-audio-o:before{content:\\"\\\\f1c7\\"}  .fa-file-movie-o:before,.fa-file-video-o:before{content:\\"\\\\f1c8\\"}  .fa-file-code-o:before{content:\\"\\\\f1c9\\"}  .fa-vine:before{content:\\"\\\\f1ca\\"}  .fa-codepen:before{content:\\"\\\\f1cb\\"}  .fa-jsfiddle:before{content:\\"\\\\f1cc\\"}  .fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\\"\\\\f1cd\\"}  .fa-circle-o-notch:before{content:\\"\\\\f1ce\\"}  .fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:\\"\\\\f1d0\\"}  .fa-ge:before,.fa-empire:before{content:\\"\\\\f1d1\\"}  .fa-git-square:before{content:\\"\\\\f1d2\\"}  .fa-git:before{content:\\"\\\\f1d3\\"}  .fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:\\"\\\\f1d4\\"}  .fa-tencent-weibo:before{content:\\"\\\\f1d5\\"}  .fa-qq:before{content:\\"\\\\f1d6\\"}  .fa-wechat:before,.fa-weixin:before{content:\\"\\\\f1d7\\"}  .fa-send:before,.fa-paper-plane:before{content:\\"\\\\f1d8\\"}  .fa-send-o:before,.fa-paper-plane-o:before{content:\\"\\\\f1d9\\"}  .fa-history:before{content:\\"\\\\f1da\\"}  .fa-circle-thin:before{content:\\"\\\\f1db\\"}  .fa-header:before{content:\\"\\\\f1dc\\"}  .fa-paragraph:before{content:\\"\\\\f1dd\\"}  .fa-sliders:before{content:\\"\\\\f1de\\"}  .fa-share-alt:before{content:\\"\\\\f1e0\\"}  .fa-share-alt-square:before{content:\\"\\\\f1e1\\"}  .fa-bomb:before{content:\\"\\\\f1e2\\"}  .fa-soccer-ball-o:before,.fa-futbol-o:before{content:\\"\\\\f1e3\\"}  .fa-tty:before{content:\\"\\\\f1e4\\"}  .fa-binoculars:before{content:\\"\\\\f1e5\\"}  .fa-plug:before{content:\\"\\\\f1e6\\"}  .fa-slideshare:before{content:\\"\\\\f1e7\\"}  .fa-twitch:before{content:\\"\\\\f1e8\\"}  .fa-yelp:before{content:\\"\\\\f1e9\\"}  .fa-newspaper-o:before{content:\\"\\\\f1ea\\"}  .fa-wifi:before{content:\\"\\\\f1eb\\"}  .fa-calculator:before{content:\\"\\\\f1ec\\"}  .fa-paypal:before{content:\\"\\\\f1ed\\"}  .fa-google-wallet:before{content:\\"\\\\f1ee\\"}  .fa-cc-visa:before{content:\\"\\\\f1f0\\"}  .fa-cc-mastercard:before{content:\\"\\\\f1f1\\"}  .fa-cc-discover:before{content:\\"\\\\f1f2\\"}  .fa-cc-amex:before{content:\\"\\\\f1f3\\"}  .fa-cc-paypal:before{content:\\"\\\\f1f4\\"}  .fa-cc-stripe:before{content:\\"\\\\f1f5\\"}  .fa-bell-slash:before{content:\\"\\\\f1f6\\"}  .fa-bell-slash-o:before{content:\\"\\\\f1f7\\"}  .fa-trash:before{content:\\"\\\\f1f8\\"}  .fa-copyright:before{content:\\"\\\\f1f9\\"}  .fa-at:before{content:\\"\\\\f1fa\\"}  .fa-eyedropper:before{content:\\"\\\\f1fb\\"}  .fa-paint-brush:before{content:\\"\\\\f1fc\\"}  .fa-birthday-cake:before{content:\\"\\\\f1fd\\"}  .fa-area-chart:before{content:\\"\\\\f1fe\\"}  .fa-pie-chart:before{content:\\"\\\\f200\\"}  .fa-line-chart:before{content:\\"\\\\f201\\"}  .fa-lastfm:before{content:\\"\\\\f202\\"}  .fa-lastfm-square:before{content:\\"\\\\f203\\"}  .fa-toggle-off:before{content:\\"\\\\f204\\"}  .fa-toggle-on:before{content:\\"\\\\f205\\"}  .fa-bicycle:before{content:\\"\\\\f206\\"}  .fa-bus:before{content:\\"\\\\f207\\"}  .fa-ioxhost:before{content:\\"\\\\f208\\"}  .fa-angellist:before{content:\\"\\\\f209\\"}  .fa-cc:before{content:\\"\\\\f20a\\"}  .fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\\"\\\\f20b\\"}  .fa-meanpath:before{content:\\"\\\\f20c\\"}  .fa-buysellads:before{content:\\"\\\\f20d\\"}  .fa-connectdevelop:before{content:\\"\\\\f20e\\"}  .fa-dashcube:before{content:\\"\\\\f210\\"}  .fa-forumbee:before{content:\\"\\\\f211\\"}  .fa-leanpub:before{content:\\"\\\\f212\\"}  .fa-sellsy:before{content:\\"\\\\f213\\"}  .fa-shirtsinbulk:before{content:\\"\\\\f214\\"}  .fa-simplybuilt:before{content:\\"\\\\f215\\"}  .fa-skyatlas:before{content:\\"\\\\f216\\"}  .fa-cart-plus:before{content:\\"\\\\f217\\"}  .fa-cart-arrow-down:before{content:\\"\\\\f218\\"}  .fa-diamond:before{content:\\"\\\\f219\\"}  .fa-ship:before{content:\\"\\\\f21a\\"}  .fa-user-secret:before{content:\\"\\\\f21b\\"}  .fa-motorcycle:before{content:\\"\\\\f21c\\"}  .fa-street-view:before{content:\\"\\\\f21d\\"}  .fa-heartbeat:before{content:\\"\\\\f21e\\"}  .fa-venus:before{content:\\"\\\\f221\\"}  .fa-mars:before{content:\\"\\\\f222\\"}  .fa-mercury:before{content:\\"\\\\f223\\"}  .fa-intersex:before,.fa-transgender:before{content:\\"\\\\f224\\"}  .fa-transgender-alt:before{content:\\"\\\\f225\\"}  .fa-venus-double:before{content:\\"\\\\f226\\"}  .fa-mars-double:before{content:\\"\\\\f227\\"}  .fa-venus-mars:before{content:\\"\\\\f228\\"}  .fa-mars-stroke:before{content:\\"\\\\f229\\"}  .fa-mars-stroke-v:before{content:\\"\\\\f22a\\"}  .fa-mars-stroke-h:before{content:\\"\\\\f22b\\"}  .fa-neuter:before{content:\\"\\\\f22c\\"}  .fa-genderless:before{content:\\"\\\\f22d\\"}  .fa-facebook-official:before{content:\\"\\\\f230\\"}  .fa-pinterest-p:before{content:\\"\\\\f231\\"}  .fa-whatsapp:before{content:\\"\\\\f232\\"}  .fa-server:before{content:\\"\\\\f233\\"}  .fa-user-plus:before{content:\\"\\\\f234\\"}  .fa-user-times:before{content:\\"\\\\f235\\"}  .fa-hotel:before,.fa-bed:before{content:\\"\\\\f236\\"}  .fa-viacoin:before{content:\\"\\\\f237\\"}  .fa-train:before{content:\\"\\\\f238\\"}  .fa-subway:before{content:\\"\\\\f239\\"}  .fa-medium:before{content:\\"\\\\f23a\\"}  .fa-yc:before,.fa-y-combinator:before{content:\\"\\\\f23b\\"}  .fa-optin-monster:before{content:\\"\\\\f23c\\"}  .fa-opencart:before{content:\\"\\\\f23d\\"}  .fa-expeditedssl:before{content:\\"\\\\f23e\\"}  .fa-battery-4:before,.fa-battery-full:before{content:\\"\\\\f240\\"}  .fa-battery-3:before,.fa-battery-three-quarters:before{content:\\"\\\\f241\\"}  .fa-battery-2:before,.fa-battery-half:before{content:\\"\\\\f242\\"}  .fa-battery-1:before,.fa-battery-quarter:before{content:\\"\\\\f243\\"}  .fa-battery-0:before,.fa-battery-empty:before{content:\\"\\\\f244\\"}  .fa-mouse-pointer:before{content:\\"\\\\f245\\"}  .fa-i-cursor:before{content:\\"\\\\f246\\"}  .fa-object-group:before{content:\\"\\\\f247\\"}  .fa-object-ungroup:before{content:\\"\\\\f248\\"}  .fa-sticky-note:before{content:\\"\\\\f249\\"}  .fa-sticky-note-o:before{content:\\"\\\\f24a\\"}  .fa-cc-jcb:before{content:\\"\\\\f24b\\"}  .fa-cc-diners-club:before{content:\\"\\\\f24c\\"}  .fa-clone:before{content:\\"\\\\f24d\\"}  .fa-balance-scale:before{content:\\"\\\\f24e\\"}  .fa-hourglass-o:before{content:\\"\\\\f250\\"}  .fa-hourglass-1:before,.fa-hourglass-start:before{content:\\"\\\\f251\\"}  .fa-hourglass-2:before,.fa-hourglass-half:before{content:\\"\\\\f252\\"}  .fa-hourglass-3:before,.fa-hourglass-end:before{content:\\"\\\\f253\\"}  .fa-hourglass:before{content:\\"\\\\f254\\"}  .fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\\"\\\\f255\\"}  .fa-hand-stop-o:before,.fa-hand-paper-o:before{content:\\"\\\\f256\\"}  .fa-hand-scissors-o:before{content:\\"\\\\f257\\"}  .fa-hand-lizard-o:before{content:\\"\\\\f258\\"}  .fa-hand-spock-o:before{content:\\"\\\\f259\\"}  .fa-hand-pointer-o:before{content:\\"\\\\f25a\\"}  .fa-hand-peace-o:before{content:\\"\\\\f25b\\"}  .fa-trademark:before{content:\\"\\\\f25c\\"}  .fa-registered:before{content:\\"\\\\f25d\\"}  .fa-creative-commons:before{content:\\"\\\\f25e\\"}  .fa-gg:before{content:\\"\\\\f260\\"}  .fa-gg-circle:before{content:\\"\\\\f261\\"}  .fa-tripadvisor:before{content:\\"\\\\f262\\"}  .fa-odnoklassniki:before{content:\\"\\\\f263\\"}  .fa-odnoklassniki-square:before{content:\\"\\\\f264\\"}  .fa-get-pocket:before{content:\\"\\\\f265\\"}  .fa-wikipedia-w:before{content:\\"\\\\f266\\"}  .fa-safari:before{content:\\"\\\\f267\\"}  .fa-chrome:before{content:\\"\\\\f268\\"}  .fa-firefox:before{content:\\"\\\\f269\\"}  .fa-opera:before{content:\\"\\\\f26a\\"}  .fa-internet-explorer:before{content:\\"\\\\f26b\\"}  .fa-tv:before,.fa-television:before{content:\\"\\\\f26c\\"}  .fa-contao:before{content:\\"\\\\f26d\\"}  .fa-500px:before{content:\\"\\\\f26e\\"}  .fa-amazon:before{content:\\"\\\\f270\\"}  .fa-calendar-plus-o:before{content:\\"\\\\f271\\"}  .fa-calendar-minus-o:before{content:\\"\\\\f272\\"}  .fa-calendar-times-o:before{content:\\"\\\\f273\\"}  .fa-calendar-check-o:before{content:\\"\\\\f274\\"}  .fa-industry:before{content:\\"\\\\f275\\"}  .fa-map-pin:before{content:\\"\\\\f276\\"}  .fa-map-signs:before{content:\\"\\\\f277\\"}  .fa-map-o:before{content:\\"\\\\f278\\"}  .fa-map:before{content:\\"\\\\f279\\"}  .fa-commenting:before{content:\\"\\\\f27a\\"}  .fa-commenting-o:before{content:\\"\\\\f27b\\"}  .fa-houzz:before{content:\\"\\\\f27c\\"}  .fa-vimeo:before{content:\\"\\\\f27d\\"}  .fa-black-tie:before{content:\\"\\\\f27e\\"}  .fa-fonticons:before{content:\\"\\\\f280\\"}  .fa-reddit-alien:before{content:\\"\\\\f281\\"}  .fa-edge:before{content:\\"\\\\f282\\"}  .fa-credit-card-alt:before{content:\\"\\\\f283\\"}  .fa-codiepie:before{content:\\"\\\\f284\\"}  .fa-modx:before{content:\\"\\\\f285\\"}  .fa-fort-awesome:before{content:\\"\\\\f286\\"}  .fa-usb:before{content:\\"\\\\f287\\"}  .fa-product-hunt:before{content:\\"\\\\f288\\"}  .fa-mixcloud:before{content:\\"\\\\f289\\"}  .fa-scribd:before{content:\\"\\\\f28a\\"}  .fa-pause-circle:before{content:\\"\\\\f28b\\"}  .fa-pause-circle-o:before{content:\\"\\\\f28c\\"}  .fa-stop-circle:before{content:\\"\\\\f28d\\"}  .fa-stop-circle-o:before{content:\\"\\\\f28e\\"}  .fa-shopping-bag:before{content:\\"\\\\f290\\"}  .fa-shopping-basket:before{content:\\"\\\\f291\\"}  .fa-hashtag:before{content:\\"\\\\f292\\"}  .fa-bluetooth:before{content:\\"\\\\f293\\"}  .fa-bluetooth-b:before{content:\\"\\\\f294\\"}  .fa-percent:before{content:\\"\\\\f295\\"}  .fa-gitlab:before{content:\\"\\\\f296\\"}  .fa-wpbeginner:before{content:\\"\\\\f297\\"}  .fa-wpforms:before{content:\\"\\\\f298\\"}  .fa-envira:before{content:\\"\\\\f299\\"}  .fa-universal-access:before{content:\\"\\\\f29a\\"}  .fa-wheelchair-alt:before{content:\\"\\\\f29b\\"}  .fa-question-circle-o:before{content:\\"\\\\f29c\\"}  .fa-blind:before{content:\\"\\\\f29d\\"}  .fa-audio-description:before{content:\\"\\\\f29e\\"}  .fa-volume-control-phone:before{content:\\"\\\\f2a0\\"}  .fa-braille:before{content:\\"\\\\f2a1\\"}  .fa-assistive-listening-systems:before{content:\\"\\\\f2a2\\"}  .fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:\\"\\\\f2a3\\"}  .fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:\\"\\\\f2a4\\"}  .fa-glide:before{content:\\"\\\\f2a5\\"}  .fa-glide-g:before{content:\\"\\\\f2a6\\"}  .fa-signing:before,.fa-sign-language:before{content:\\"\\\\f2a7\\"}  .fa-low-vision:before{content:\\"\\\\f2a8\\"}  .fa-viadeo:before{content:\\"\\\\f2a9\\"}  .fa-viadeo-square:before{content:\\"\\\\f2aa\\"}  .fa-snapchat:before{content:\\"\\\\f2ab\\"}  .fa-snapchat-ghost:before{content:\\"\\\\f2ac\\"}  .fa-snapchat-square:before{content:\\"\\\\f2ad\\"}  .fa-pied-piper:before{content:\\"\\\\f2ae\\"}  .fa-first-order:before{content:\\"\\\\f2b0\\"}  .fa-yoast:before{content:\\"\\\\f2b1\\"}  .fa-themeisle:before{content:\\"\\\\f2b2\\"}  .fa-google-plus-circle:before,.fa-google-plus-official:before{content:\\"\\\\f2b3\\"}  .fa-fa:before,.fa-font-awesome:before{content:\\"\\\\f2b4\\"}  .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}  .sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///184\n')},185:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90P2UwODMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///185\n')},186:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90Pzc0ZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///186\n')},187:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff2?0317d582b93c20f68e059e389aecab33");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/NjE2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9GQUF1QiwrREFBK0QiLCJmaWxlIjoiMTg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/MDMxN2Q1ODJiOTNjMjBmNjhlMDU5ZTM4OWFlY2FiMzNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///187\n')},188:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff?f7f1738ca345185e01856ac55885b089");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZj82MmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb0ZBQXVCLDhEQUE4RCIsImZpbGUiOiIxODguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udGF3ZXNvbWUtd2ViZm9udC53b2ZmP2Y3ZjE3MzhjYTM0NTE4NWUwMTg1NmFjNTU4ODViMDg5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///188\n')},189:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.ttf?f0af1680f082547a7aae4af9d841d693");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQudHRmPzYxMzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnR0Zj9mMGFmMTY4MGYwODI1NDdhN2FhZTRhZjlkODQxZDY5M1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///189\n')},190:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.svg?ed6298903ae1554c7f3e1a668c39fdcc");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuc3ZnP2E3NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnN2Zz9lZDYyOTg5MDNhZTE1NTRjN2YzZTFhNjY4YzM5ZmRjY1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///190\n')},22:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  FETCH_STARTED: \'fetch-start\',\n  FETCH_ENDED: \'fetch-end\',\n  CLOSED: "closed",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9jb25uZWN0b3IvU3RhdHVzLmpzP2E1ODciXSwibmFtZXMiOlsiU3RhdHVzIiwiQ09OTkVDVElORyIsIkNPTk5FQ1RFRCIsIkRJU0NPTk5FQ1RFRCIsIkZFVENIX1NUQVJURUQiLCJGRVRDSF9FTkRFRCIsIkNMT1NFRCIsIkNMT1NFRF9FUlJPUiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsTUFBTSxHQUFHO0VBQ2xCQyxVQUFVLEVBQUUsWUFETTtFQUVsQkMsU0FBUyxFQUFHLFdBRk07RUFHbEJDLFlBQVksRUFBRSxjQUhJO0VBSWxCQyxhQUFhLEVBQUUsYUFKRztFQUtsQkMsV0FBVyxFQUFFLFdBTEs7RUFNbEJDLE1BQU0sRUFBRSxRQU5VO0VBT2xCQyxZQUFZLEVBQUU7QUFQSSxDQUFmIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnVtIGZvciBjb25uZWN0aW9uIHN0YXR1cy5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgU3RhdHVzID0ge1xuICAgIENPTk5FQ1RJTkc6IFwiY29ubmVjdGluZ1wiLFxuICAgIENPTk5FQ1RFRDogIFwiY29ubmVjdGVkXCIsXG4gICAgRElTQ09OTkVDVEVEOiBcImRpc2Nvbm5lY3RlZFwiLFxuICAgIEZFVENIX1NUQVJURUQ6ICdmZXRjaC1zdGFydCcsXG4gICAgRkVUQ0hfRU5ERUQ6ICdmZXRjaC1lbmQnLFxuICAgIENMT1NFRDogXCJjbG9zZWRcIixcbiAgICBDTE9TRURfRVJST1I6IFwiY2xvc2VkLWVycm9yXCJcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n')},5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return TIME_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\n/* unused harmony export MAGIC_END_PACKET */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\nconst MAGIC_END_PACKET = 'magic-packet';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIiwiTUFHSUNfRU5EX1BBQ0tFVCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDO0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsY0FBekIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IFRJTUVfU1lOQ0hST05JWkVSX1RPUElDID0gJ2RhdGEtc3luY2hyb25pemVyLXRpbWUtJztcblxuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX1RJTUVfVE9QSUMgPSAnZGF0YXNvdXJjZS10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuXG5leHBvcnQgY29uc3QgTUFHSUNfRU5EX1BBQ0tFVCA9ICdtYWdpYy1wYWNrZXQnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Mode; });\n/**\n * Enum for datasource mode.\n * @readonly\n * @enum {{name: string}}\n */\nconst Mode = {\n  REPLAY: "replay",\n  BATCH: "batch",\n  REAL_TIME: "realTime"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL01vZGUuanM/NGUyNSJdLCJuYW1lcyI6WyJNb2RlIiwiUkVQTEFZIiwiQkFUQ0giLCJSRUFMX1RJTUUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLElBQUksR0FBRztFQUNoQkMsTUFBTSxFQUFFLFFBRFE7RUFFaEJDLEtBQUssRUFBRyxPQUZRO0VBR2hCQyxTQUFTLEVBQUU7QUFISyxDQUFiIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGRhdGFzb3VyY2UgbW9kZS5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgTW9kZSA9IHtcbiAgICBSRVBMQVk6IFwicmVwbGF5XCIsXG4gICAgQkFUQ0g6ICBcImJhdGNoXCIsXG4gICAgUkVBTF9USU1FOiBcInJlYWxUaW1lXCJcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},8:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(178);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);\n/* harmony import */ var _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(22);\n/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\nclass View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = [];\n    this.broadcastChannels = []; //this.divId = divId;\n\n    this.id = "view-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "p"])();\n    this.css = "";\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.container) ? properties.container : document.body;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties)) {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "m"])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  async setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n    }\n\n    this.broadcastChannels = [];\n  }\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_DATA_TOPIC */ "a"] + dataSourceId);\n\n      broadcastChannel.onmessage = async event => {\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].STATUS && event.data.status === _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__[/* Status */ "a"].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].DATA) {\n          const that = this; // transform the data\n\n          await layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          await that.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_TIME_TOPIC */ "b"] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n\n      this.broadcastChannels.push(broadcastChannel);\n      this.broadcastChannels.push(timeBroadcastChannel);\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},9:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EventType; });\nconst EventType = {\n  DATA: 'data',\n  LAST_TIME: 'last-time',\n  MASTER_TIME: 'master-time',\n  STATUS: 'status',\n  TIME_CHANGED: 'time-changed'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9ldmVudC9FdmVudFR5cGUuanM/OWUzMCJdLCJuYW1lcyI6WyJFdmVudFR5cGUiLCJEQVRBIiwiTEFTVF9USU1FIiwiTUFTVEVSX1RJTUUiLCJTVEFUVVMiLCJUSU1FX0NIQU5HRUQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQU8sTUFBTUEsU0FBUyxHQUFHO0VBQ3JCQyxJQUFJLEVBQUUsTUFEZTtFQUVyQkMsU0FBUyxFQUFFLFdBRlU7RUFHckJDLFdBQVcsRUFBRSxhQUhRO0VBSXJCQyxNQUFNLEVBQUUsUUFKYTtFQUtyQkMsWUFBWSxFQUFFO0FBTE8sQ0FBbEIiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBFdmVudFR5cGUgPSB7XG4gICAgREFUQTogJ2RhdGEnLFxuICAgIExBU1RfVElNRTogJ2xhc3QtdGltZScsXG4gICAgTUFTVEVSX1RJTUU6ICdtYXN0ZXItdGltZScsXG4gICAgU1RBVFVTOiAnc3RhdHVzJyxcbiAgICBUSU1FX0NIQU5HRUQ6ICd0aW1lLWNoYW5nZWQnXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n")}}]);