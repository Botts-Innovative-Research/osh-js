(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return hasValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return hex2rgb; });\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* unused harmony export assertBoolean */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return merge; });\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      // Sinon on s’endort pendant le temps restant\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},161:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n  \t* Create the PointMarker\n  \t* @param {Object} properties\n  \t* @param {Number[]} properties.location - [x,y,z]\n   \t* @param {Number} [properties.orientation=0] -\n  \t* @param {String} properties.icon -\n    * @param {String} [properties.iconScale=1] - the icon scale size\n    * @param {String} [properties.iconColor="#000000"] - the icon color\n  \t* @param {Number[]} [properties.iconAnchor=[16,16]] -\n  \t* @param {Number[]} [properties.iconSize=[16,16]] -\n  \t* @param {String} properties.label -\n  \t* @param {String} [properties.labelColor="#000000"] - HTML color\n  \t* @param {Number} [properties.labelSize=16] -\n  \t* @param {Number[]} [properties.labelOffset=[0,0]] -\n    * @param {Number} [properties.zIndex=] - z-ordering of markers\n  \t* @param {Function} [properties.getLocation] -\n    * @param {Function} [properties.getDescription] -\n  \t* @param {Function} [properties.getOrientation] -\n  \t* @param {Function} [properties.getIcon] -\n    * @param {Function} [properties.getIconColor] -\n    * @param {Function} [properties.getIconScale] -\n  \t* @param {Function} [properties.getLabel] -\n  \t* @param {Function} [properties.getLabelColor] -\n  \t* @param {Function} [properties.getLabelSize] -\n    * @param {Function} [properties.getZindex] - z-ordering of markers\n    * @param {Function} [properties.onLeftClick] - trigger onLeftClick marker event\n    * @param {Function} [properties.onRightClick] - trigger onRightClick marker event\n    * @param {Function} [properties.onHover] - trigger onHover marker event\n    * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   \t* @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n    * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n  \t*\n  \t*/\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n    this.props.location = null;\n    this.props.orientation = {\n      heading: 0\n    };\n    this.props.icon = null;\n    this.props.iconAnchor = [16, 16];\n    this.props.iconSize = [16, 16];\n    this.props.iconScale = 1.0;\n    this.props.iconColor = "#000000";\n    this.props.label = null;\n    this.props.labelColor = "#000000";\n    this.props.labelSize = 16;\n    this.props.labelOffset = [0, 0];\n    this.props.zoomLevel = 15;\n    this.props.color = \'#000000\';\n    this.props.defaultToTerrainElevation = false;\n    this.props.zIndex = 0;\n    this.props.options = {};\n    this.props.markerId = \'marker\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.defaultToTerrainElevation)) {\n      this.props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "e"])(properties.location, "location");\n      this.props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "e"])(properties.orientation, "orientation");\n      this.props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "g"])(properties.icon, "icon");\n      this.props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      this.props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      this.props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "f"])(properties.iconScale, "iconScale");\n      this.props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "g"])(properties.iconColor, "iconColor");\n      this.props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "g"])(properties.label, "label");\n      this.props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "g"])(properties.labelColor, "labelColor");\n      this.props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "f"])(properties.labelSize, "labelSize");\n      this.props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      this.props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "f"])(properties.zoomLevel, "zoomLevel");\n      this.props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "d"])(properties.zIndex, "zIndex");\n      this.props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(properties.color)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "g"])(properties.color, "color");\n      this.props.color = properties.color;\n    }\n\n    const that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getMarkerId")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.markerId = that.getFunc(\'getMarkerId\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getMarkerId\'), fn);\n    }\n\n    if (this.checkFn("getLocation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.location = that.getFunc(\'getLocation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.orientation = that.getFunc(\'getOrientation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.description = that.getFunc(\'getDescription\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.icon = that.getFunc(\'getIcon\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconColor = that.getFunc(\'getIconColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconScale = that.getFunc(\'getIconScale\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.label = that.getFunc(\'getLabel\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelColor = that.getFunc(\'getLabelColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelSize = that.getFunc(\'getLabelSize\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.zIndex = that.getFunc(\'getZindex\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///161\n')},162:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\n/* harmony import */ var _core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(182);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(163);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(191);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(23);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(wnumb__WEBPACK_IMPORTED_MODULE_5__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * @extends View\n * @example\n *\n * import RangeSliderView from \'ext/view/RangeSliderView.js\';\n *\n * let rangeSlider = new RangeSliderView("rangeSlider",{\n    dataSourceId: dataSource.id,\n    startTime: "2015-12-19T21:04:30Z",\n    endTime: "2015-12-19T21:09:19Z"\n});\n */\n\nclass RangeSliderView extends _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n  \t* Create the discoveryView\n    * @param {Object} [properties={}] - the properties of the view\n    * @param {String} properties.container - The div element to attach to\n    * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n     * @param {Number} properties.startTime - The start time\n     * @param {Number} properties.endTime - The end time\n     * @param {String} properties.dataSource - The dataSourceObject\n     * @param {Number} [properties.debounce=0] - Debounce time after updating the slider\n     * @param {Boolean} properties.disabled - disabled the range slider\n     * @param {Object} properties.dataSynchronizer - a data synchronizer to get current data time for this set of datasources\n     */\n  constructor(properties) {\n    super({ ...properties,\n      supportedLayers: [\'data\']\n    });\n    this.slider = document.createElement("div");\n    this.slider.setAttribute("class", "core-rangeslider-slider");\n    document.getElementById(this.divId).appendChild(this.slider);\n    let startTime = new Date().getTime();\n    this.endTime = new Date("2055-01-01T00:00:00Z").getTime(); //01/01/2055\n\n    this.update = false;\n    this.dataSourceObject = null;\n    this.debounce = 0;\n    this.options = {};\n    this.sliding = false;\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties)) {\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.startTime)) {\n        startTime = new Date(properties.startTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.endTime)) {\n        this.endTime = new Date(properties.endTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.dataSynchronizer)) {\n        this.dataSourceObject = properties.dataSynchronizer;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.dataSource)) {\n        this.dataSourceObject = properties.dataSource;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.debounce)) {\n        this.debounce = parseInt(properties.debounce);\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.options)) {\n        this.options = properties.options;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.disabled)) {\n        this.slider.setAttribute(\'disabled\', properties.disabled);\n      }\n    }\n\n    nouislider__WEBPACK_IMPORTED_MODULE_3__["create"](this.slider, {\n      start: [startTime, this.endTime]\n      /*,timestamp("2015-02-16T08:09:00Z")]*/\n      ,\n      range: {\n        min: startTime,\n        max: this.endTime\n      },\n      //step:  1000* 60* 60,\n      format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n        decimals: 0\n      }),\n      behaviour: \'drag\',\n      connect: true,\n      animate: false,\n      pips: {\n        mode: \'positions\',\n        values: [5, 25, 50, 75],\n        density: 1,\n        //stepped: true,\n        format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n          edit: function (value) {\n            return new Date(parseInt(value)).toISOString().replace(".000Z", "Z").split("T")[1].split("Z")[0].split(".")[0];\n          }\n        })\n      },\n      ...this.options\n    });\n    this.createEvents();\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(this.dataSourceObject)) {\n      // listen for BC\n      const bc = new BroadcastChannel(this.dataSourceObject.getTimeTopicId());\n\n      bc.onmessage = message => {\n        if (!this.update) {\n          this.slider.noUiSlider.set([message.data.timestamp]);\n          this.onChange(message.data.timestamp, parseInt(this.slider.noUiSlider.get()[1]), \'data\');\n        }\n      };\n    }\n  }\n\n  createActivateButton() {\n    let activateButtonDiv = document.createElement("div");\n    let aTagActivateButton = document.createElement("a");\n    activateButtonDiv.appendChild(aTagActivateButton);\n    activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n    let self = this;\n    activateButtonDiv.addEventListener("click", function (event) {\n      if (activateButtonDiv.className.indexOf("core-rangeslider-control-select") > -1) {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n        self.deactivate();\n      } else {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control-select");\n        self.activate();\n      }\n    });\n    document.getElementById(this.divId).appendChild(activateButtonDiv);\n  }\n\n  createEvents() {\n    const that = this; //noUi-handle noUi-handle-lower\n    // start->update->end\n\n    this.slider.noUiSlider.on("start", function (values, handle) {\n      that.update = true;\n      that.sliding = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.endTime);\n      that.onChange(st, end, \'start\');\n    });\n    this.slider.noUiSlider.on("slide", function (values, handle) {\n      that.sliding = true;\n      that.update = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.endTime);\n      that.onChange(st, end, \'slide\');\n    });\n    this.slider.noUiSlider.on("end", function (values, handle) {\n      if (that.sliding) {\n        that.sliding = false;\n        const st = parseInt(values[0]);\n        const end = parseInt(values[1]) || parseInt(that.endTime);\n        that.onChange(st, end, \'end\'); // that.update = false;\n\n        setTimeout(() => that.update = false, that.debounce);\n      }\n    });\n  }\n  /**\n   * Deactivate the timeline bar\n   */\n\n\n  deactivate() {\n    this.slider.setAttribute(\'disabled\', true);\n  }\n  /**\n   * Activate the timeline nar\n   */\n\n\n  activate() {\n    this.slider.removeAttribute(\'disabled\');\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      if (!this.update) {\n        this.slider.noUiSlider.set([values[i].timeStamp]);\n      }\n    }\n  }\n\n  setStartTime(timestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([timestamp]);\n    }\n  }\n\n  setTime(startTimestamp, endTimestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([startTimestamp, endTimestamp]);\n    }\n  }\n\n  onChange(startTime, endTime, type) {\n    if (type === \'end\') {\n      this.dataSourceObject.setTimeRange(new Date(startTime).toISOString(), new Date(endTime).toISOString(), this.dataSourceObject.properties.replaySpeed, true);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (RangeSliderView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///162\n')},164:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n */\n\nclass CurveLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create the CurveLayer\n   * @param {Object} properties -\n   * @param {String} [properties.xLabel=""] -\n   * @param {String} [properties.yLabel=""] -\n   * @param {String} [properties.lineColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.backgroundColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.fill=false] -\n   * @param {Number} [properties.maxValues=10] - Defines the max values hold by the layer\n   * @param {Number} [properties.stroke=1] -\n   * @param {Number} [properties.x=0] -\n   * @param {Number} [properties.y=[]] -\n   * @param {Number} [properties.maxValues=10] - The maximum values to display\n   * @param {Function} properties.getStroke -\n   * @param {Function} properties.getLineColor -\n   * @param {Function} properties.getValues -\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'curve\';\n    this.props.xLabel = "";\n    this.props.yLabel = "";\n    this.props.lineColor = "#399ca5";\n    this.props.backgroundColor = "#399ca5";\n    this.props.fill = false;\n    this.props.stroke = 1;\n    this.props.curveId = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ "n"])();\n    this.props.x = 0;\n    this.props.y = 0;\n    this.props.maxValues = 10;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.stroke)) {\n      this.props.stroke = properties.stroke;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.maxValues)) {\n      this.props.maxValues = properties.maxValues;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.lineColor)) {\n      this.props.lineColor = properties.lineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.backgroundColor)) {\n      this.props.backgroundColor = properties.backgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.fill)) {\n      this.props.fill = properties.fill;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.x)) {\n      this.props.x = properties.x;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.y)) {\n      this.props.y = properties.y;\n    }\n\n    const that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getCurveId")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.curveId = that.getFunc(\'getCurveId\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getCurveId\'), fn);\n    }\n\n    if (this.checkFn("getName")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.name = that.getFunc(\'getName\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getName\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.getStroke)) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.stroke = that.getFunc(\'getStroke\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getStroke\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.getLineColor)) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.lineColor = that.getFunc(\'getLineColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.getBackgroundColor)) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.backgroundColor = that.getFunc(\'getBackgroundColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.getValues)) {\n      let fn = function (rec, timeStamp, options) {\n        const value = that.getFunc(\'getValues\')(rec, timeStamp, options);\n        that.props.x = value.x;\n        that.props.y = value.y;\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getValues\'), fn);\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (CurveLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///164\n')},165:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);\n/* harmony import */ var chartjs_adapter_moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(197);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * @extends View\n */\n\nclass ChartJsView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {String} [properties.type='line'] - The  [type]{@link https://www.chartjs.org/docs/3.5.1/} of the graph\n   * @param {Object} [properties.options={}] - Properties which can override the default framework ones\n   * @param {Object} [properties.datasetOptions={}] - Properties which can override the default framework ones (as defined [dataset]{@link https://www.chartjs.org/docs/latest/configuration/#dataset-configuration}\n   * @param {boolean} [properties.override=false] - Defines if options (as defined [Chart options]{@link https://www.chartjs.org/docs/3.5.1/general/options.html}) are completely overridden or merge only. Default is merge\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: ['curve'],\n      ...properties\n    });\n    chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"].register(...chart_js__WEBPACK_IMPORTED_MODULE_2__[/* registerables */ \"c\"]); // #region snippet_chartjsview_default_chartprops\n\n    this.datasetOptions = {};\n    let type = 'line';\n    this.options = {\n      maintainAspectRatio: false,\n      normalized: true,\n      scales: {\n        x: {\n          type: 'time',\n          time: {\n            unit: 'second'\n          }\n        }\n      },\n      plugins: {},\n      datasets: {},\n      interaction: {},\n      animations: {},\n      layout: {},\n      elements: {}\n    }; // #endregion snippet_chartjsview_default_chartprops\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"k\"])(properties)) {\n      if (properties.hasOwnProperty('options')) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* merge */ \"m\"])(properties.options, this.options);\n      }\n\n      if (properties.hasOwnProperty('type')) {\n        type = properties.type;\n      }\n\n      if (properties.hasOwnProperty('datasetOptions')) {\n        this.datasetOptions = properties.datasetOptions;\n      }\n    }\n\n    let domNode = document.getElementById(this.divId);\n    let ctx = document.createElement(\"canvas\");\n    ctx.setAttribute(\"id\", Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ \"n\"])());\n    domNode.appendChild(ctx);\n    this.resetting = false;\n    this.chart = new chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"](ctx, {\n      type: type,\n      options: this.options\n    });\n    this.datasets = {};\n  }\n\n  setData(dataSourceId, data) {\n    if (data.type === 'curve') {\n      this.updateCurve(data.values);\n    }\n  }\n\n  parseDate(intTimeStamp) {\n    const date = new Date(intTimeStamp);\n    return this.withLeadingZeros(date.getUTCHours()) + \":\" + this.withLeadingZeros(date.getUTCMinutes()) + \":\" + this.withLeadingZeros(date.getUTCSeconds());\n  }\n\n  withLeadingZeros(dt) {\n    return (dt < 10 ? '0' : '') + dt;\n  }\n  /**\n   * Updates the curve associated to the layer.\n   * @param {Curve.props[]} props - The layer properties allowing the update of the curve\n   */\n\n\n  updateCurve(props) {\n    if (this.resetting) {\n      return;\n    }\n\n    let currentDataset = this.datasets[props[0].curveId];\n    const values = props.map(item => ({\n      'x': item.x,\n      'y': item.y\n    }));\n    let lineColor = this.getColor(props[0].lineColor);\n    let bgColor = this.getColor(props[0].backgroundColor);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"k\"])(currentDataset)) {\n      currentDataset = { ...this.datasetOptions,\n        label: props[0].name,\n        fill: props[0].fill,\n        backgroundColor: bgColor,\n        borderColor: lineColor,\n        data: values\n      };\n      currentDataset = { ...this.datasetsProps,\n        ...currentDataset\n      };\n      this.datasets[props[0].curveId] = currentDataset;\n      this.chart.data.datasets.push(currentDataset);\n    } else {\n      this.datasets[props[0].curveId].backgroundColor = bgColor;\n      this.datasets[props[0].curveId].borderColor = lineColor;\n      values.forEach(value => {\n        this.datasets[props[0].curveId].data.push(value);\n      });\n    } //TODO: max points with multiple dataset won't work\n\n\n    if (currentDataset.data.length > props[0].maxValues) {\n      this.chart.data.labels.shift();\n      currentDataset.data.shift();\n    }\n\n    this.chart.update('none');\n  }\n\n  getColor(value) {\n    let v = value;\n\n    if (v.length > 0 && v.charAt(0) === '#') {\n      const rgb = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* hex2rgb */ \"j\"])(value);\n      v = 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ',0.2)';\n    }\n\n    return v;\n  }\n\n  reset() {\n    this.resetting = true;\n    super.reset();\n    this.datasets = {};\n    this.chart.data.datasets = [];\n    this.chart.data.labels = [];\n    this.chart.update(0);\n    this.resetting = false; // this.chart.data.datasets = [];\n    // this.chart.update();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ChartJsView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///165\n")},166:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\nimport MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'data\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timeStamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.showTime) && properties.showTime) {\n      this.timeStamp = document.createElement("div");\n      this.timeStamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timeStamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const value = values.shift();\n      let imgBlob = new Blob([value.data.frameData]);\n      let url = window.URL.createObjectURL(imgBlob);\n      let oldBlobURL = this.imgTag.src;\n      this.imgTag.src = url;\n\n      if (this.timeStamp !== null) {\n        this.timeStamp.innerHTML = new Date(value.timeStamp).toISOString();\n      }\n\n      window.URL.revokeObjectURL(oldBlobURL);\n    }\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS92aWV3L3ZpZGVvL01qcGVnVmlldy5qcz9kNmZhIl0sIm5hbWVzIjpbIk1qcGVnVmlldyIsIlZpZXciLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJzdXBwb3J0ZWRMYXllcnMiLCJ0aW1lU3RhbXAiLCJpc0RlZmluZWQiLCJzaG93VGltZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRCeUlkIiwiZGl2SWQiLCJhcHBlbmRDaGlsZCIsImltZ1RhZyIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0IiwidHJhbnNsYXRlIiwicm90YXRlIiwic2V0RGF0YSIsImRhdGFTb3VyY2VJZCIsImRhdGEiLCJ2YWx1ZXMiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJzaGlmdCIsImltZ0Jsb2IiLCJCbG9iIiwiZnJhbWVEYXRhIiwidXJsIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwib2xkQmxvYlVSTCIsInNyYyIsImlubmVySFRNTCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInJldm9rZU9iamVjdFVSTCIsInNlbGVjdERhdGFWaWV3IiwiZGF0YVNvdXJjZUlkcyIsImVudGl0eUlkIiwiaW5kZXhPZiIsImVudGl0eSIsImdldElkIiwiY3NzIiwiY3NzU2VsZWN0ZWQiLCJyZXNldCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxTQUFOLFNBQXdCQyx3REFBeEIsQ0FBNkI7QUFDM0I7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VDLGFBQVcsQ0FBQ0MsVUFBRCxFQUFhO0FBQ3BCLFVBQU07QUFDRkMscUJBQWUsRUFBRSxDQUFDLE1BQUQsQ0FEZjtBQUVGLFNBQUdEO0FBRkQsS0FBTixFQURvQixDQU10Qjs7QUFDQSxTQUFLRSxTQUFMLEdBQWlCLElBQWpCOztBQUNBLFFBQUlDLHlFQUFTLENBQUNILFVBQVUsQ0FBQ0ksUUFBWixDQUFULElBQWtDSixVQUFVLENBQUNJLFFBQWpELEVBQTJEO0FBQ3ZELFdBQUtGLFNBQUwsR0FBaUJHLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUF2QixDQUFqQjtBQUNBLFdBQUtKLFNBQUwsQ0FBZUssWUFBZixDQUE0QixPQUE1QixFQUFxQyxZQUFyQztBQUNBRixjQUFRLENBQUNHLGNBQVQsQ0FBd0IsS0FBS0MsS0FBN0IsRUFBb0NDLFdBQXBDLENBQWdELEtBQUtSLFNBQXJEO0FBQ0gsS0FacUIsQ0FjdEI7OztBQUNBLFNBQUtTLE1BQUwsR0FBY04sUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDQSxTQUFLSyxNQUFMLENBQVlKLFlBQVosQ0FBeUIsT0FBekIsRUFBa0MsYUFBbEMsRUFoQnNCLENBa0J0Qjs7QUFDQSxTQUFLSyxRQUFMLEdBQWdCLENBQWhCOztBQUNBLFFBQUksT0FBT1osVUFBUCxJQUFzQixXQUF0QixJQUFxQyxPQUFPQSxVQUFVLENBQUNZLFFBQWxCLElBQStCLFdBQXhFLEVBQXFGO0FBQ2pGLFdBQUtBLFFBQUwsR0FBZ0JaLFVBQVUsQ0FBQ1ksUUFBWCxHQUFvQkMsSUFBSSxDQUFDQyxFQUF6QixHQUE0QixHQUE1QztBQUNBLFdBQUtDLE1BQUwsR0FBY1YsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQWQ7QUFDQSxXQUFLUyxNQUFMLENBQVlDLEtBQVosR0FBb0IsR0FBcEI7QUFDQSxXQUFLRCxNQUFMLENBQVlFLE1BQVosR0FBcUIsR0FBckI7QUFDQSxVQUFJQyxHQUFHLEdBQUcsS0FBS0gsTUFBTCxDQUFZSSxVQUFaLENBQXVCLElBQXZCLENBQVY7QUFDQUQsU0FBRyxDQUFDRSxTQUFKLENBQWMsQ0FBZCxFQUFpQixHQUFqQjtBQUNBRixTQUFHLENBQUNHLE1BQUosQ0FBVyxLQUFLVCxRQUFoQjtBQUNBUCxjQUFRLENBQUNHLGNBQVQsQ0FBd0IsS0FBS0MsS0FBN0IsRUFBb0NDLFdBQXBDLENBQWdELEtBQUtLLE1BQXJEO0FBQ0gsS0FURCxNQVNPO0FBQ0g7QUFDQVYsY0FBUSxDQUFDRyxjQUFULENBQXdCLEtBQUtDLEtBQTdCLEVBQW9DQyxXQUFwQyxDQUFnRCxLQUFLQyxNQUFyRDtBQUNIO0FBQ0Y7O0FBRURXLFNBQU8sQ0FBQ0MsWUFBRCxFQUFjQyxJQUFkLEVBQW9CO0FBQ3ZCLFVBQU1DLE1BQU0sR0FBR0QsSUFBSSxDQUFDQyxNQUFwQjs7QUFDQSxTQUFJLElBQUlDLENBQUMsR0FBQyxDQUFWLEVBQWFBLENBQUMsR0FBR0QsTUFBTSxDQUFDRSxNQUF4QixFQUErQkQsQ0FBQyxFQUFoQyxFQUFvQztBQUNoQyxZQUFNRSxLQUFLLEdBQUdILE1BQU0sQ0FBQ0ksS0FBUCxFQUFkO0FBRUEsVUFBSUMsT0FBTyxHQUFHLElBQUlDLElBQUosQ0FBUyxDQUFDSCxLQUFLLENBQUNKLElBQU4sQ0FBV1EsU0FBWixDQUFULENBQWQ7QUFDQSxVQUFJQyxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXQyxlQUFYLENBQTJCTixPQUEzQixDQUFWO0FBRUEsVUFBSU8sVUFBVSxHQUFHLEtBQUsxQixNQUFMLENBQVkyQixHQUE3QjtBQUNBLFdBQUszQixNQUFMLENBQVkyQixHQUFaLEdBQWtCTCxHQUFsQjs7QUFDQSxVQUFJLEtBQUsvQixTQUFMLEtBQW1CLElBQXZCLEVBQTZCO0FBQ3pCLGFBQUtBLFNBQUwsQ0FBZXFDLFNBQWYsR0FBMkIsSUFBSUMsSUFBSixDQUFTWixLQUFLLENBQUMxQixTQUFmLEVBQTBCdUMsV0FBMUIsRUFBM0I7QUFDSDs7QUFDRFAsWUFBTSxDQUFDQyxHQUFQLENBQVdPLGVBQVgsQ0FBMkJMLFVBQTNCO0FBQ0g7QUFDSjs7QUFFRE0sZ0JBQWMsQ0FBQ0MsYUFBRCxFQUFlQyxRQUFmLEVBQXlCO0FBQ3JDLFFBQUdELGFBQWEsQ0FBQ0UsT0FBZCxDQUFzQixLQUFLdkIsWUFBM0IsSUFBMkMsQ0FBQyxDQUE1QyxJQUFrRHBCLHlFQUFTLENBQUMsS0FBSzRDLE1BQU4sQ0FBVixJQUE0QixLQUFLQSxNQUFMLENBQVlDLEtBQVosT0FBd0JILFFBQXhHLEVBQWtIO0FBQ2hIeEMsY0FBUSxDQUFDRyxjQUFULENBQXdCLEtBQUtDLEtBQTdCLEVBQW9DRixZQUFwQyxDQUFpRCxPQUFqRCxFQUF5RCxLQUFLMEMsR0FBTCxHQUFTLEdBQVQsR0FBYSxLQUFLQyxXQUEzRTtBQUNELEtBRkQsTUFFTztBQUNMN0MsY0FBUSxDQUFDRyxjQUFULENBQXdCLEtBQUtDLEtBQTdCLEVBQW9DRixZQUFwQyxDQUFpRCxPQUFqRCxFQUF5RCxLQUFLMEMsR0FBOUQ7QUFDRDtBQUNGOztBQUVERSxPQUFLLEdBQUc7QUFDSixTQUFLeEMsTUFBTCxDQUFZMkIsR0FBWixHQUFrQixFQUFsQjtBQUNIOztBQXhFMEI7O0FBMkVkekMsa0VBQWYiLCJmaWxlIjoiMTY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQgVmlldyBmcm9tIFwiLi4vVmlldy5qc1wiO1xuaW1wb3J0IHtpc0RlZmluZWR9IGZyb20gXCIuLi8uLi8uLi91dGlscy9VdGlscy5qc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIFZpZXdcbiAqIEBleGFtcGxlXG4gKlxuaW1wb3J0IE1qcGVnVmlldyBmcm9tICdjb3JlL3VpL3ZpZXcvdmlkZW8vTWpwZWdWaWV3LmpzJztcblxuIGxldCB2aWRlb1ZpZXcgPSBuZXcgTWpwZWdWaWV3KHtcbiAgY29udGFpbmVyOiAnY29udGFpbmVyJyxcbiAgY3NzOiAndmlkZW8taDI2NCcsXG4gIG5hbWU6ICdVQVYgVmlkZW8nLFxuICBzaG93VGltZTogdHJ1ZSxcbiAgc2hvd1N0YXRzOiB0cnVlLFxuICBsYXllcnM6IFtcbiAgICAgIG5ldyBEYXRhTGF5ZXIoe1xuICAgICAgICBkYXRhU291cmNlSWQ6IHZpZGVvRGF0YVNvdXJjZS5pZFxuICAgICAgfSlcbiAgXVxufSk7XG4gKi9cblxuY2xhc3MgTWpwZWdWaWV3IGV4dGVuZHMgVmlldyB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBWaWV3LlxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIC0gdGhlIHByb3BlcnRpZXMgb2YgdGhlIHZpZXdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnRpZXMuY29udGFpbmVyIC0gVGhlIGRpdiBlbGVtZW50IHRvIGF0dGFjaCB0b1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydGllcy5jc3MgLSBUaGUgY3NzIGNsYXNzZXMgdG8gc2V0LCBjYW4gYmUgbXVsdGlwbGUgaWYgc2VwYXJhdGUgYnkgc3BhY2VzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnNob3dUaW1lIC0gRGlzcGxheSBvciBub3QgdGhlIHRpbWUgb250byB0aGUgdmlld1xuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5yb3RhdGlvbiAtIEFsbG93IHRvIGRlZmluZSBhIHJvdGF0aW9uIGluIGRlZ3JlZVxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydGllcykge1xuICAgICAgc3VwZXIoe1xuICAgICAgICAgIHN1cHBvcnRlZExheWVyczogWydkYXRhJ10sXG4gICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgfSk7XG5cbiAgICAvLyBjcmVhdGUgdGltZXN0YW1wIHNsb3RcbiAgICB0aGlzLnRpbWVTdGFtcCA9IG51bGw7XG4gICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLnNob3dUaW1lKSAmJiBwcm9wZXJ0aWVzLnNob3dUaW1lKSB7XG4gICAgICAgIHRoaXMudGltZVN0YW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy50aW1lU3RhbXAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ2aWRlby10aW1lXCIpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRpdklkKS5hcHBlbmRDaGlsZCh0aGlzLnRpbWVTdGFtcCk7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlcyB2aWRlbyB0YWcgZWxlbWVudFxuICAgIHRoaXMuaW1nVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICB0aGlzLmltZ1RhZy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInZpZGVvLW1qcGVnXCIpO1xuXG4gICAgLy8gcm90YXRpb24gb3B0aW9uXG4gICAgdGhpcy5yb3RhdGlvbiA9IDA7XG4gICAgaWYgKHR5cGVvZihwcm9wZXJ0aWVzKSAhPSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZihwcm9wZXJ0aWVzLnJvdGF0aW9uKSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRoaXMucm90YXRpb24gPSBwcm9wZXJ0aWVzLnJvdGF0aW9uKk1hdGguUEkvMTgwO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IDY0MDtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gNDgwO1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgY3R4LnRyYW5zbGF0ZSgwLCA0ODApIDtcbiAgICAgICAgY3R4LnJvdGF0ZSh0aGlzLnJvdGF0aW9uKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kaXZJZCkuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFwcGVuZHMgPGltZz4gdGFnIHRvIDxkaXY+XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZGl2SWQpLmFwcGVuZENoaWxkKHRoaXMuaW1nVGFnKTtcbiAgICB9XG4gIH1cblxuICBzZXREYXRhKGRhdGFTb3VyY2VJZCxkYXRhKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBkYXRhLnZhbHVlcztcbiAgICAgIGZvcihsZXQgaT0wOyBpIDwgdmFsdWVzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlcy5zaGlmdCgpO1xuXG4gICAgICAgICAgbGV0IGltZ0Jsb2IgPSBuZXcgQmxvYihbdmFsdWUuZGF0YS5mcmFtZURhdGFdKTtcbiAgICAgICAgICBsZXQgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoaW1nQmxvYik7XG5cbiAgICAgICAgICBsZXQgb2xkQmxvYlVSTCA9IHRoaXMuaW1nVGFnLnNyYztcbiAgICAgICAgICB0aGlzLmltZ1RhZy5zcmMgPSB1cmw7XG4gICAgICAgICAgaWYgKHRoaXMudGltZVN0YW1wICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRoaXMudGltZVN0YW1wLmlubmVySFRNTCA9IG5ldyBEYXRlKHZhbHVlLnRpbWVTdGFtcCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwob2xkQmxvYlVSTCk7XG4gICAgICB9XG4gIH1cblxuICBzZWxlY3REYXRhVmlldyhkYXRhU291cmNlSWRzLGVudGl0eUlkKSB7XG4gICAgaWYoZGF0YVNvdXJjZUlkcy5pbmRleE9mKHRoaXMuZGF0YVNvdXJjZUlkKSA+IC0xIHx8IChpc0RlZmluZWQodGhpcy5lbnRpdHkpKSAmJiB0aGlzLmVudGl0eS5nZXRJZCgpID09PSBlbnRpdHlJZCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kaXZJZCkuc2V0QXR0cmlidXRlKFwiY2xhc3NcIix0aGlzLmNzcytcIiBcIit0aGlzLmNzc1NlbGVjdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kaXZJZCkuc2V0QXR0cmlidXRlKFwiY2xhc3NcIix0aGlzLmNzcyk7XG4gICAgfVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgICB0aGlzLmltZ1RhZy5zcmMgPSBcIlwiO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1qcGVnVmlldztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///166\n')},167:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "ebf0c9f4ffb73c20935f.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlcnMvU29zR2V0UmVzdWx0SnNvbi53b3JrZXIuanM/MzNhYyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiV29ya2VyIiwiX193ZWJwYWNrX3B1YmxpY19wYXRoX18iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUMxQixTQUFPLElBQUlDLE1BQUosQ0FBV0MscUJBQXVCLEdBQUcsZ0NBQXJDLENBQVA7QUFDRCxDQUZEIiwiZmlsZSI6IjE2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlYmYwYzlmNGZmYjczYzIwOTM1Zi53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///167\n')},168:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(169);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides parsing to H264 raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import SosGetResultVideo from \'core/datasource/SosGetResultVideo.js\';\n *\n * var videoDataSource = new SosGetResultVideo("H264 video ", {\n        protocol: "ws",\n        service: "SOS",\n        endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n        offeringID: "urn:android:device:a0e0eac2fea3f614-sos",\n        observedProperty: "http://sensorml.com/ont/swe/property/VideoFrame",\n        startTime: "2016-08-11T20:17:30.402Z",\n        endTime: "2016-08-11T20:18:05.451Z",\n        replaySpeed: 1,\n        bufferingTime: 1000\n  });\n */\n\nclass SosGetResultVideo extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Object} [properties.customUrlParams={}] - the encoding options\n   * @param {Number} [properties.customUrlParams.video_bitrate] - define a custom bitrate (in b/s)\n   * @param {Number} [properties.customUrlParams.video_scale] - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} [properties.customUrlParams.video_width] - define a custom width\n   * @param {Number} [properties.customUrlParams.video_height] - define a custom height\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultVideo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL1Nvc0dldFJlc3VsdFZpZGVvLmpzPzlhMWQiXSwibmFtZXMiOlsiU29zR2V0UmVzdWx0VmlkZW8iLCJUaW1lU2VyaWVzRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJ0aW1lU2hpZnQiLCJyZWNvbm5lY3RUaW1lb3V0IiwiU29zR2V0UmVzdWx0VmlkZW9Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQSxpQkFBTixTQUFnQ0Msd0VBQWhDLENBQXFEO0FBQ2pEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQW1CO0FBQzFCLFVBQU1ELElBQU4sRUFBWTtBQUNSRSxlQUFTLEVBQUMsQ0FERjtBQUVSQyxzQkFBZ0IsRUFBRSxPQUFPLENBRmpCO0FBRW9CO0FBQzVCLFNBQUdGO0FBSEssS0FBWixFQUlHLElBQUlHLDJFQUFKLEVBSkg7QUFLSDs7QUE3QmdEOztBQWdDckNQLDBFQUFoQiIsImZpbGUiOiIxNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBUaW1lU2VyaWVzRGF0YVNvdXJjZSBmcm9tICcuL1RpbWVTZXJpZXNEYXRhU291cmNlLmpzJztcbmltcG9ydCBTb3NHZXRSZXN1bHRWaWRlb1dvcmtlciBmcm9tIFwiLi93b3JrZXJzL1Nvc0dldFJlc3VsdFZpZGVvLndvcmtlci5qc1wiO1xuXG4vKipcbiAqIFRoaXMgZGF0YXNvdXJjZSBwcm92aWRlcyBwYXJzaW5nIHRvIEgyNjQgcmF3IGRhdGEuXG4gKiBEYXRhOiBBcnJheUJ1ZmZlclxuICogQGV4dGVuZHMgRGF0YVNvdXJjZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBTb3NHZXRSZXN1bHRWaWRlbyBmcm9tICdjb3JlL2RhdGFzb3VyY2UvU29zR2V0UmVzdWx0VmlkZW8uanMnO1xuICpcbiAqIHZhciB2aWRlb0RhdGFTb3VyY2UgPSBuZXcgU29zR2V0UmVzdWx0VmlkZW8oXCJIMjY0IHZpZGVvIFwiLCB7XG4gICAgICAgIHByb3RvY29sOiBcIndzXCIsXG4gICAgICAgIHNlcnZpY2U6IFwiU09TXCIsXG4gICAgICAgIGVuZHBvaW50VXJsOiBcInNlbnNpYXNvZnQubmV0OjgxODEvc2Vuc29yaHViL3Nvc1wiLFxuICAgICAgICBvZmZlcmluZ0lEOiBcInVybjphbmRyb2lkOmRldmljZTphMGUwZWFjMmZlYTNmNjE0LXNvc1wiLFxuICAgICAgICBvYnNlcnZlZFByb3BlcnR5OiBcImh0dHA6Ly9zZW5zb3JtbC5jb20vb250L3N3ZS9wcm9wZXJ0eS9WaWRlb0ZyYW1lXCIsXG4gICAgICAgIHN0YXJ0VGltZTogXCIyMDE2LTA4LTExVDIwOjE3OjMwLjQwMlpcIixcbiAgICAgICAgZW5kVGltZTogXCIyMDE2LTA4LTExVDIwOjE4OjA1LjQ1MVpcIixcbiAgICAgICAgcmVwbGF5U3BlZWQ6IDEsXG4gICAgICAgIGJ1ZmZlcmluZ1RpbWU6IDEwMDBcbiAgfSk7XG4gKi9cbmNsYXNzIFNvc0dldFJlc3VsdFZpZGVvIGV4dGVuZHMgVGltZVNlcmllc0RhdGFTb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIGRhdGFzb3VyY2UgbmFtZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIGRhdGFzb3VyY2UgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Byb3BlcnRpZXMudGltZVNoaWZ0PWZhbHNlXSAtIGZpeCBzb21lIHByb2JsZW0gd2l0aCBzb21lIGFuZHJvaWQgZGV2aWNlcyB3aXRoIHNvbWUgdGltZXN0YW1wIHNoaWZ0IHRvIDE2IHNlY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5idWZmZXJpbmdUaW1lPTAgLSBkZWZpbmVzIHRoZSB0aW1lIGR1cmluZyB0aGUgZGF0YSBoYXMgdG8gYmUgYnVmZmVyZWQuIFVzZWZ1bCBvbmx5IHdoZW4gdXNlZCB3aXRoIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMudGltZU91dD0wXSAtIGRlZmluZXMgdGhlIGxpbWl0IHRpbWUgYmVmb3JlIGRhdGEgaGFzIHRvIGJlIHNraXBwZWQuIFVzZWZ1bCBvbmx5IHdoZW4gdXNlZCB3aXRoIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5wcm90b2NvbCAtIGRlZmluZXMgdGhlIHByb3RvY29sIG9mIHRoZSBkYXRhc291cmNlLiBAc2VlIHtAbGluayBEYXRhQ29ubmVjdG9yfVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZHBvaW50VXJsIHRoZSBlbmRwb2ludCB1cmxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zZXJ2aWNlIHRoZSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2ZmZXJpbmdJRCB0aGUgb2ZmZXJpbmdJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9ic2VydmVkUHJvcGVydHkgdGhlIG9ic2VydmVkIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIHRoZSBzdGFydCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZFRpbWUgdGhlIGVuZCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXBsYXlTcGVlZD0xXSB0aGUgcmVwbGF5IGZhY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXNwb25zZUZvcm1hdF0gdGhlIHJlc3BvbnNlIGZvcm1hdCAoZS5nIHZpZGVvL21wNClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVjb25uZWN0VGltZW91dD0xMDAwMF0gLSB0aGUgdGltZSBiZWZvcmUgcmVjb25uZWN0aW5nIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcz17fV0gLSB0aGUgZW5jb2Rpbmcgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXMudmlkZW9fYml0cmF0ZV0gLSBkZWZpbmUgYSBjdXN0b20gYml0cmF0ZSAoaW4gYi9zKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXMudmlkZW9fc2NhbGVdIC0gZGVmaW5lIGEgY3VzdG9tIHNjYWxlLCAwLjAgPCB2YWx1ZSA8IDEuMFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXMudmlkZW9fd2lkdGhdIC0gZGVmaW5lIGEgY3VzdG9tIHdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb19oZWlnaHRdIC0gZGVmaW5lIGEgY3VzdG9tIGhlaWdodFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIobmFtZSwge1xuICAgICAgICAgICAgdGltZVNoaWZ0OjAsXG4gICAgICAgICAgICByZWNvbm5lY3RUaW1lb3V0OiAxMDAwICogNSwgLy8gZGVmYXVsdCBpZiBub3QgZGVmaW5lZCBpbnRvIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC4uLnByb3BlcnRpZXNcbiAgICAgICAgfSwgbmV3IFNvc0dldFJlc3VsdFZpZGVvV29ya2VyKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgIFNvc0dldFJlc3VsdFZpZGVvO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///168\n')},169:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "a237681222844b5045e6.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlcnMvU29zR2V0UmVzdWx0VmlkZW8ud29ya2VyLmpzPzkzMGMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIxNjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTIzNzY4MTIyMjg0NGI1MDQ1ZTYud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///169\n')},170:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(171);\n/* harmony import */ var _DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\nclass DataSynchronizer {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {DataSource[]} properties.dataSources - the dataSource array\n   */\n  constructor(properties) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"k\"])(properties.dataSources)) {\n      throw 'You must specify a dataSource array';\n    }\n\n    this.bufferingTime = 1000; // default\n\n    this.currentTime = Date.now();\n    this.id = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ \"n\"])();\n    this.dataSources = [];\n    this.replaySpeed = 1;\n    this.timerResolution = 5;\n    this.initialized = false;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"k\"])(properties.replaySpeed)) {\n      this.replaySpeed = properties.replaySpeed;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"k\"])(properties.timerResolution)) {\n      this.timerResolution = properties.timerResolution;\n    }\n\n    this.initWorker(properties.dataSources, this.timerResolution);\n    this.properties = {};\n    this.properties.replaySpeed = this.replaySpeed;\n  }\n  /**\n   * @private\n   */\n\n\n  initWorker(dataSources, timerResolution) {\n    // build object for Worker because DataSource is not clonable\n    const dataSourcesForWorker = [];\n\n    for (let dataSource of dataSources) {\n      const dataSourceForWorker = this.createDataSourceForWorker(dataSource);\n      dataSourcesForWorker.push(dataSourceForWorker);\n      this.dataSources.push(dataSource);\n    }\n\n    this.synchronizerWorker = new _DataSynchronizer_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a();\n\n    this.synchronizerWorker.onmessage = event => {\n      if (event.data.message === 'initialized') {\n        this.initialized = true;\n        console.log(\"datasynchronizer initialized\");\n      }\n    };\n\n    this.synchronizerWorker.postMessage({\n      message: 'init',\n      dataSources: dataSourcesForWorker,\n      replaySpeed: this.replaySpeed,\n      timerResolution: timerResolution,\n      dataTopic: this.getTopicId(),\n      timeTopic: this.getTimeTopicId()\n    });\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.id,\n      name: dataSource.name\n    }; // bind dataSource data onto dataSynchronizer data\n\n    try {\n      dataSource.setDataSynchronizer(this);\n      dataSource.properties.replaySpeed = this.replaySpeed;\n    } catch (ex) {\n      console.error(\"Cannot set the synchronizer to this DataSource\", ex);\n    }\n\n    return obj;\n  }\n  /**\n  * Adds a new DataSource object to the list of datasources to synchronize.\n  * note: don't forget to call reset() to be sure to re-init the synchronizer internal properties.\n  * @param {DataSource} dataSource - the new datasource to add\n  *\n  */\n\n\n  addDataSource(dataSource) {\n    const dataSourceForWorker = this.createDataSourceForWorker(dataSource);\n    this.dataSources.push(dataSource);\n    this.synchronizerWorker.postMessage({\n      message: 'add',\n      dataSources: [dataSourceForWorker]\n    });\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  push(dataSourceId, data) {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.postMessage({\n        type: 'data',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  connect() {\n    // wait until webworker is fully initialized before connecting datasources\n    let tryConnect = () => {\n      if (this.initialized) {\n        this.doConnect();\n      } else {\n        setTimeout(tryConnect, 100);\n      }\n    };\n\n    tryConnect();\n  }\n\n  doConnect() {\n    for (let dataSource of this.dataSources) {\n      dataSource.connect();\n    }\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  disconnect() {\n    this.reset();\n\n    for (let dataSource of this.dataSources) {\n      dataSource.disconnect();\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return this.dataSources[0].currentRunningProperties.startTime;\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return this.dataSources[0].currentRunningProperties.endTime;\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"k\"])(this.dataSources[0].properties.minTime) ? this.dataSources[0].properties.minTime : this.dataSources[0].properties.startTime;\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    if (this.dataSources.length === 0) {\n      throw 'dataSource array is empty';\n    }\n\n    return Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ \"k\"])(this.dataSources[0].properties.maxTime) ? this.dataSources[0].properties.maxTime : this.dataSources[0].properties.endTime;\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.replaySpeed;\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.replaySpeed = replaySpeed;\n    this.properties.replaySpeed = replaySpeed;\n    this.synchronizerWorker.postMessage({\n      message: 'replay-speed',\n      replaySpeed: replaySpeed\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  setTimeRange(startTime, endTime, replaySpeed, reconnect = false) {\n    if (this.replaySpeed !== replaySpeed) {\n      this.setReplaySpeed(replaySpeed);\n    }\n\n    this.reset();\n\n    for (let ds of this.dataSources) {\n      ds.setTimeRange(startTime, endTime, replaySpeed, reconnect);\n    }\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  reset() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.postMessage({\n        message: 'reset'\n      });\n    }\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  async getCurrentTime() {\n    const promise = new Promise(resolve => {\n      if (this.synchronizerWorker !== null) {\n        this.synchronizerWorker.onmessage = event => {\n          if (event.data.message === 'current-time') {\n            resolve(event.data.data);\n          }\n        };\n      }\n    });\n\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.postMessage({\n        message: 'current-time'\n      });\n    }\n\n    return promise;\n  }\n\n  getTopicId() {\n    return _Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATA_SYNCHRONIZER_TOPIC */ \"c\"] + this.id;\n  }\n\n  getTimeTopicId() {\n    return _Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* TIME_SYNCHRONIZER_TOPIC */ \"d\"] + this.id;\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    for (let ds of this.dataSources) {\n      if (!(await ds.isConnected())) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DataSynchronizer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///170\n")},171:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "eb2e3b0e50a39a4a7cd3.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9EYXRhU3luY2hyb25pemVyLndvcmtlci5qcz81ZjMwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLFNBQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTcxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImViMmUzYjBlNTBhMzlhNGE3Y2QzLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///171\n')},172:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(2);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(173);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js + 2 modules\nvar View = __webpack_require__(7);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {};\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'draping\') {\n        this.updateDrapedImage(d);\n      } else if (data.type === \'ellipse\') {\n        this.updateEllipse(d);\n      } else if (data.type === \'polygon\') {\n        this.updatePolygon(d);\n      } else if (data.type === \'coplanarPolygon\') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === \'frustum\') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  addPolygonToLayer(props, polygon) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToPolygon)) {\n      this.layerIdToPolygon[props.id] = {};\n    }\n\n    this.layerIdToPolygon[props.id][props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  addMarkerToLayer(props, markerObject) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToMarkers)) {\n      this.layerIdToMarkers[props.id] = {};\n    }\n\n    this.layerIdToMarkers[props.id][props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  addPolylineToLayer(props, polylineObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToPolylines)) {\n      this.layerIdToPolylines[props.id] = {};\n    }\n\n    this.layerIdToPolylines[props.id][props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  addEllipseToLayer(props, ellipseObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      this.layerIdToEllipsoids[props.id] = {};\n    }\n\n    this.layerIdToEllipsoids[props.id][props.ellipseId] = ellipseObject;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      for (let polygonId in this.layerIdToPolygon[id]) {\n        array.push(this.layerIdToPolygon[id][polygonId]);\n      }\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.id in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.id][props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.id in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.id][props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      for (let markerId in this.layerIdToMarkers[id]) {\n        array.push(this.layerIdToMarkers[id][markerId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      for (let polylineId in this.layerIdToPolylines[id]) {\n        array.push(this.layerIdToPolylines[id][polylineId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      for (let ellipseId in this.layerIdToEllipsoids[id]) {\n        array.push(this.layerIdToEllipsoids[id][ellipseId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.id][props.ellipseId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.id][props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.id][props.polylineId];\n  }\n\n  addFrustumToLayer(props, frustum) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToFrustum)) {\n      this.layerIdToFrustum[props.id] = {};\n    }\n\n    this.layerIdToFrustum[props.id][props.frustumId] = frustum;\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      for (let frustumId in this.layerIdToFrustum[id]) {\n        array.push(this.layerIdToFrustum[id][frustumId]);\n      }\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.id in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.id][props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    super.removeAllFromLayer(layer); // check for marker\n\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeFrustums(layer);\n  }\n\n  removePolygons(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.polygonId)) {\n      const polygonMap = this.layerIdToPolygon[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(polygonMap)) {\n        for (let polygonId in polygonMap) {\n          const polygon = polygonMap[polygonId];\n          this.removePolygonFromLayer(polygon);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[layer.props.id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.markerId)) {\n      const markersMap = this.layerIdToMarkers[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(markersMap)) {\n        for (let markerId in markersMap) {\n          const marker = markersMap[markerId];\n          this.removeMarkerFromLayer(marker);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[layer.props.id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    if (Object(Utils["k" /* isDefined */])(ellipse.props.ellipseId)) {\n      const ellipseMap = this.layerIdToEllipsoids[ellipse.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(ellipseMap)) {\n        for (let ellipseId in ellipseMap) {\n          const ellipse = ellipseMap[ellipseId];\n          this.removeEllipseFromLayer(ellipse);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[ellipse.props.id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    if (Object(Utils["k" /* isDefined */])(polyline.props.polylineId)) {\n      const polylinesMap = this.layerIdToPolylines[polyline.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(polylinesMap)) {\n        for (let polylineId in polylinesMap) {\n          const polyline = polylinesMap[polylineId];\n          this.removePolylineFromLayer(polyline);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[polyline.props.id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.frustumId)) {\n      const frustumMap = this.layerIdToFrustum[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(frustumMap)) {\n        for (let frustumId in frustumMap) {\n          const frustum = frustumMap[frustumId];\n          this.removeFrustumFromLayer(frustum);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[layer.props.id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["k" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["k" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["k" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  updateMarker() {}\n\n  updatePolyline() {}\n\n  updatePolygon() {}\n\n  updateEllipse() {}\n\n  updateCoPlanarPolygon() {}\n\n  updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\', \'polygon\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["k" /* isDefined */])(options)) {\n      if (Object(Utils["k" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["k" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["k" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["k" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["k" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["k" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["k" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["b" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["k" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations[properties.polylineId];\n    let polylinePoints = [];\n\n    if (Object(Utils["k" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["k" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on(\'click\', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on(\'contextmenu\', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on(\'mouseover\', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["k" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils["k" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations[props.polylineId];\n\n      if (Object(Utils["k" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils["k" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices[props.polygonId];\n      let polygonPoints = [];\n\n      if (Object(Utils["k" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices[properties.polygonId];\n    let polygonPoints = [];\n\n    if (Object(Utils["k" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///172\n')},178:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(179);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"764b465c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsR0FBK0c7QUFDckk7QUFDQSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQW9IO0FBQ3RJLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjE3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzY0YjQ2NWNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///178\n")},179:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUEwRztBQUNwSjtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMTc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIub3NoLXZpZXcge1xcbiAgICB3aWR0aDoxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///179\n')},182:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(183);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"47acb68c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/NDUyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUFxSDtBQUMzSTtBQUNBLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBb0g7QUFDdEksK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vVUlTbGlkZXIuY3NzXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0N2FjYjY4Y1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///182\n")},183:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(184);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.i, ".noUi-tooltip {\\n    border-radius: 10px;\\n    box-shadow: 2px 2px 5px 0px #777;\\n    background-color: #777;\\n    filter: alpha(opacity=80);\\n    -moz-opacity: 0.8;\\n    opacity: 0.8;\\n    border: none;\\n    color: #FFF;\\n    width: 100px;\\n    height: 23px;\\n    padding: 2px 2px 2px 2px;\\n}\\n.noUi-horizontal .noUi-handle-lower .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-horizontal .noUi-handle-upper .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-connect {\\n    background-color: rgba(5, 107, 166, 0.6);\\n}\\n\\n.noUi-tooltip:after {\\n    bottom: -14px;\\n    margin-left: -10px;\\n    border-top: 10px solid #fff;\\n}\\n\\n.noUi-tooltip:after {\\n    content: \'\';\\n    position: absolute;\\n    top: -10px;\\n    left: 50%;\\n    margin-left: -9px;\\n    width: 0;\\n    height: 0;\\n    border-left: 10px solid transparent;\\n    border-right: 10px solid transparent;\\n    border-top: none;\\n    border-bottom: 10px solid #777;\\n}\\n\\n.noUi-pips-horizontal {\\n    height:0px !important;\\n}\\n\\n\\n.noUi-handle:active {\\n    background-color: rgba(5, 107, 166, 0.6);\\n    box-shadow:none;\\n    border:none;\\n}\\n\\n\\n.noUi-horizontal {\\n    width: calc(100% - 50px);\\n}\\n\\n/** put range and control button side by side **/\\n\\n.osh-rangeslider-slider{\\n    float:left;\\n}\\n\\n.osh-rangeslider-control {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control-select {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control-select a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control a:after {\\n    font-family: FontAwesome;\\n    content: \\"\\\\f044\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n\\n.osh-rangeslider-control-select a:after{\\n    font-family: FontAwesome;\\n    content: \\"\\\\f046\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/ZjgwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQTBHO0FBQ3BKLHdDQUF3QyxtQkFBTyxDQUFDLEdBQWtKO0FBQ2xNO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUyxrQkFBa0IsMEJBQTBCLHVDQUF1Qyw2QkFBNkIsZ0NBQWdDLHdCQUF3QixtQkFBbUIsbUJBQW1CLGtCQUFrQixtQkFBbUIsbUJBQW1CLCtCQUErQixHQUFHLHFEQUFxRCxnQkFBZ0IsR0FBRyx1REFBdUQsZ0JBQWdCLEdBQUcsbUJBQW1CLCtDQUErQyxHQUFHLHlCQUF5QixvQkFBb0IseUJBQXlCLGtDQUFrQyxHQUFHLHlCQUF5QixrQkFBa0IseUJBQXlCLGlCQUFpQixnQkFBZ0Isd0JBQXdCLGVBQWUsZ0JBQWdCLDBDQUEwQywyQ0FBMkMsdUJBQXVCLHFDQUFxQyxHQUFHLDJCQUEyQiw0QkFBNEIsR0FBRywyQkFBMkIsK0NBQStDLHNCQUFzQixrQkFBa0IsR0FBRyx3QkFBd0IsK0JBQStCLEdBQUcsaUZBQWlGLGlCQUFpQixHQUFHLDhCQUE4QixrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLHFDQUFxQyxrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLCtCQUErQiw0QkFBNEIsR0FBRyxzQ0FBc0MsNEJBQTRCLEdBQUcsc0NBQXNDLCtCQUErQiwwQkFBMEIsNkJBQTZCLHFCQUFxQixHQUFHLDRDQUE0QywrQkFBK0IsMEJBQTBCLDZCQUE2QixxQkFBcUIsR0FBRztBQUNqM0Q7QUFDQSIsImZpbGUiOiIxODMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnQtYXdlc29tZS00LjYuMy9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3NcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubm9VaS10b29sdGlwIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggMHB4ICM3Nzc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3Nzc7XFxuICAgIGZpbHRlcjogYWxwaGEob3BhY2l0eT04MCk7XFxuICAgIC1tb3otb3BhY2l0eTogMC44O1xcbiAgICBvcGFjaXR5OiAwLjg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY29sb3I6ICNGRkY7XFxuICAgIHdpZHRoOiAxMDBweDtcXG4gICAgaGVpZ2h0OiAyM3B4O1xcbiAgICBwYWRkaW5nOiAycHggMnB4IDJweCAycHg7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLWxvd2VyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLXVwcGVyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWNvbm5lY3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDUsIDEwNywgMTY2LCAwLjYpO1xcbn1cXG5cXG4ubm9VaS10b29sdGlwOmFmdGVyIHtcXG4gICAgYm90dG9tOiAtMTRweDtcXG4gICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICNmZmY7XFxufVxcblxcbi5ub1VpLXRvb2x0aXA6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0xMHB4O1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIG1hcmdpbi1sZWZ0OiAtOXB4O1xcbiAgICB3aWR0aDogMDtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBib3JkZXItbGVmdDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICM3Nzc7XFxufVxcblxcbi5ub1VpLXBpcHMtaG9yaXpvbnRhbCB7XFxuICAgIGhlaWdodDowcHggIWltcG9ydGFudDtcXG59XFxuXFxuXFxuLm5vVWktaGFuZGxlOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNSwgMTA3LCAxNjYsIDAuNik7XFxuICAgIGJveC1zaGFkb3c6bm9uZTtcXG4gICAgYm9yZGVyOm5vbmU7XFxufVxcblxcblxcbi5ub1VpLWhvcml6b250YWwge1xcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNTBweCk7XFxufVxcblxcbi8qKiBwdXQgcmFuZ2UgYW5kIGNvbnRyb2wgYnV0dG9uIHNpZGUgYnkgc2lkZSAqKi9cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLXNsaWRlcntcXG4gICAgZmxvYXQ6bGVmdDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sIHtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sLXNlbGVjdCB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICB3aWR0aDogMzBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbCBhe1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYXtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLWNvbnRyb2wgYTphZnRlciB7XFxuICAgIGZvbnQtZmFtaWx5OiBGb250QXdlc29tZTtcXG4gICAgY29udGVudDogXFxcIlxcXFxmMDQ0XFxcIjtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgZm9udC1zaXplOjMwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYTphZnRlcntcXG4gICAgZm9udC1mYW1pbHk6IEZvbnRBd2Vzb21lO1xcbiAgICBjb250ZW50OiBcXFwiXFxcXGYwNDZcXFwiO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICBmb250LXNpemU6MzBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///183\n')},184:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nvar ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(25);\nvar ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(185);\nvar ___CSS_LOADER_URL_IMPORT_1___ = __webpack_require__(186);\nvar ___CSS_LOADER_URL_IMPORT_2___ = __webpack_require__(187);\nvar ___CSS_LOADER_URL_IMPORT_3___ = __webpack_require__(188);\nvar ___CSS_LOADER_URL_IMPORT_4___ = __webpack_require__(189);\nvar ___CSS_LOADER_URL_IMPORT_5___ = __webpack_require__(190);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___, { hash: "?#iefix&v=4.6.3" });\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\nvar ___CSS_LOADER_URL_REPLACEMENT_4___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_4___);\nvar ___CSS_LOADER_URL_REPLACEMENT_5___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_5___, { hash: "#fontawesomeregular" });\n// Module\nexports.push([module.i, "/*!\\n *  Font Awesome 4.6.3 by @davegandy - http://fontawesome.io - @fontawesome\\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\\n */@font-face{font-family:\'FontAwesome\';src:url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");src:url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format(\'embedded-opentype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format(\'woff2\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format(\'woff\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format(\'truetype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ") format(\'svg\');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}  .fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}  .fa-2x{font-size:2em}  .fa-3x{font-size:3em}  .fa-4x{font-size:4em}  .fa-5x{font-size:5em}  .fa-fw{width:1.28571429em;text-align:center}  .fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}  .fa-ul>li{position:relative}  .fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}  .fa-li.fa-lg{left:-1.85714286em}  .fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}  .fa-pull-left{float:left}  .fa-pull-right{float:right}  .fa.fa-pull-left{margin-right:.3em}  .fa.fa-pull-right{margin-left:.3em}  .pull-right{float:right}  .pull-left{float:left}  .fa.pull-left{margin-right:.3em}  .fa.pull-right{margin-left:.3em}  .fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}  .fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}  @-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  @keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  .fa-rotate-90{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\\";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}  .fa-rotate-180{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\\";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}  .fa-rotate-270{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\\";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}  .fa-flip-horizontal{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\\";-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}  .fa-flip-vertical{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\\";-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}  :root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}  .fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}  .fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}  .fa-stack-1x{line-height:inherit}  .fa-stack-2x{font-size:2em}  .fa-inverse{color:#fff}  .fa-glass:before{content:\\"\\\\f000\\"}  .fa-music:before{content:\\"\\\\f001\\"}  .fa-search:before{content:\\"\\\\f002\\"}  .fa-envelope-o:before{content:\\"\\\\f003\\"}  .fa-heart:before{content:\\"\\\\f004\\"}  .fa-star:before{content:\\"\\\\f005\\"}  .fa-star-o:before{content:\\"\\\\f006\\"}  .fa-user:before{content:\\"\\\\f007\\"}  .fa-film:before{content:\\"\\\\f008\\"}  .fa-th-large:before{content:\\"\\\\f009\\"}  .fa-th:before{content:\\"\\\\f00a\\"}  .fa-th-list:before{content:\\"\\\\f00b\\"}  .fa-check:before{content:\\"\\\\f00c\\"}  .fa-remove:before,.fa-close:before,.fa-times:before{content:\\"\\\\f00d\\"}  .fa-search-plus:before{content:\\"\\\\f00e\\"}  .fa-search-minus:before{content:\\"\\\\f010\\"}  .fa-power-off:before{content:\\"\\\\f011\\"}  .fa-signal:before{content:\\"\\\\f012\\"}  .fa-gear:before,.fa-cog:before{content:\\"\\\\f013\\"}  .fa-trash-o:before{content:\\"\\\\f014\\"}  .fa-home:before{content:\\"\\\\f015\\"}  .fa-file-o:before{content:\\"\\\\f016\\"}  .fa-clock-o:before{content:\\"\\\\f017\\"}  .fa-road:before{content:\\"\\\\f018\\"}  .fa-download:before{content:\\"\\\\f019\\"}  .fa-arrow-circle-o-down:before{content:\\"\\\\f01a\\"}  .fa-arrow-circle-o-up:before{content:\\"\\\\f01b\\"}  .fa-inbox:before{content:\\"\\\\f01c\\"}  .fa-play-circle-o:before{content:\\"\\\\f01d\\"}  .fa-rotate-right:before,.fa-repeat:before{content:\\"\\\\f01e\\"}  .fa-refresh:before{content:\\"\\\\f021\\"}  .fa-list-alt:before{content:\\"\\\\f022\\"}  .fa-lock:before{content:\\"\\\\f023\\"}  .fa-flag:before{content:\\"\\\\f024\\"}  .fa-headphones:before{content:\\"\\\\f025\\"}  .fa-volume-off:before{content:\\"\\\\f026\\"}  .fa-volume-down:before{content:\\"\\\\f027\\"}  .fa-volume-up:before{content:\\"\\\\f028\\"}  .fa-qrcode:before{content:\\"\\\\f029\\"}  .fa-barcode:before{content:\\"\\\\f02a\\"}  .fa-tag:before{content:\\"\\\\f02b\\"}  .fa-tags:before{content:\\"\\\\f02c\\"}  .fa-book:before{content:\\"\\\\f02d\\"}  .fa-bookmark:before{content:\\"\\\\f02e\\"}  .fa-print:before{content:\\"\\\\f02f\\"}  .fa-camera:before{content:\\"\\\\f030\\"}  .fa-font:before{content:\\"\\\\f031\\"}  .fa-bold:before{content:\\"\\\\f032\\"}  .fa-italic:before{content:\\"\\\\f033\\"}  .fa-text-height:before{content:\\"\\\\f034\\"}  .fa-text-width:before{content:\\"\\\\f035\\"}  .fa-align-left:before{content:\\"\\\\f036\\"}  .fa-align-center:before{content:\\"\\\\f037\\"}  .fa-align-right:before{content:\\"\\\\f038\\"}  .fa-align-justify:before{content:\\"\\\\f039\\"}  .fa-list:before{content:\\"\\\\f03a\\"}  .fa-dedent:before,.fa-outdent:before{content:\\"\\\\f03b\\"}  .fa-indent:before{content:\\"\\\\f03c\\"}  .fa-video-camera:before{content:\\"\\\\f03d\\"}  .fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\\"\\\\f03e\\"}  .fa-pencil:before{content:\\"\\\\f040\\"}  .fa-map-marker:before{content:\\"\\\\f041\\"}  .fa-adjust:before{content:\\"\\\\f042\\"}  .fa-tint:before{content:\\"\\\\f043\\"}  .fa-edit:before,.fa-pencil-square-o:before{content:\\"\\\\f044\\"}  .fa-share-square-o:before{content:\\"\\\\f045\\"}  .fa-check-square-o:before{content:\\"\\\\f046\\"}  .fa-arrows:before{content:\\"\\\\f047\\"}  .fa-step-backward:before{content:\\"\\\\f048\\"}  .fa-fast-backward:before{content:\\"\\\\f049\\"}  .fa-backward:before{content:\\"\\\\f04a\\"}  .fa-play:before{content:\\"\\\\f04b\\"}  .fa-pause:before{content:\\"\\\\f04c\\"}  .fa-stop:before{content:\\"\\\\f04d\\"}  .fa-forward:before{content:\\"\\\\f04e\\"}  .fa-fast-forward:before{content:\\"\\\\f050\\"}  .fa-step-forward:before{content:\\"\\\\f051\\"}  .fa-eject:before{content:\\"\\\\f052\\"}  .fa-chevron-left:before{content:\\"\\\\f053\\"}  .fa-chevron-right:before{content:\\"\\\\f054\\"}  .fa-plus-circle:before{content:\\"\\\\f055\\"}  .fa-minus-circle:before{content:\\"\\\\f056\\"}  .fa-times-circle:before{content:\\"\\\\f057\\"}  .fa-check-circle:before{content:\\"\\\\f058\\"}  .fa-question-circle:before{content:\\"\\\\f059\\"}  .fa-info-circle:before{content:\\"\\\\f05a\\"}  .fa-crosshairs:before{content:\\"\\\\f05b\\"}  .fa-times-circle-o:before{content:\\"\\\\f05c\\"}  .fa-check-circle-o:before{content:\\"\\\\f05d\\"}  .fa-ban:before{content:\\"\\\\f05e\\"}  .fa-arrow-left:before{content:\\"\\\\f060\\"}  .fa-arrow-right:before{content:\\"\\\\f061\\"}  .fa-arrow-up:before{content:\\"\\\\f062\\"}  .fa-arrow-down:before{content:\\"\\\\f063\\"}  .fa-mail-forward:before,.fa-share:before{content:\\"\\\\f064\\"}  .fa-expand:before{content:\\"\\\\f065\\"}  .fa-compress:before{content:\\"\\\\f066\\"}  .fa-plus:before{content:\\"\\\\f067\\"}  .fa-minus:before{content:\\"\\\\f068\\"}  .fa-asterisk:before{content:\\"\\\\f069\\"}  .fa-exclamation-circle:before{content:\\"\\\\f06a\\"}  .fa-gift:before{content:\\"\\\\f06b\\"}  .fa-leaf:before{content:\\"\\\\f06c\\"}  .fa-fire:before{content:\\"\\\\f06d\\"}  .fa-eye:before{content:\\"\\\\f06e\\"}  .fa-eye-slash:before{content:\\"\\\\f070\\"}  .fa-warning:before,.fa-exclamation-triangle:before{content:\\"\\\\f071\\"}  .fa-plane:before{content:\\"\\\\f072\\"}  .fa-calendar:before{content:\\"\\\\f073\\"}  .fa-random:before{content:\\"\\\\f074\\"}  .fa-comment:before{content:\\"\\\\f075\\"}  .fa-magnet:before{content:\\"\\\\f076\\"}  .fa-chevron-up:before{content:\\"\\\\f077\\"}  .fa-chevron-down:before{content:\\"\\\\f078\\"}  .fa-retweet:before{content:\\"\\\\f079\\"}  .fa-shopping-cart:before{content:\\"\\\\f07a\\"}  .fa-folder:before{content:\\"\\\\f07b\\"}  .fa-folder-open:before{content:\\"\\\\f07c\\"}  .fa-arrows-v:before{content:\\"\\\\f07d\\"}  .fa-arrows-h:before{content:\\"\\\\f07e\\"}  .fa-bar-chart-o:before,.fa-bar-chart:before{content:\\"\\\\f080\\"}  .fa-twitter-square:before{content:\\"\\\\f081\\"}  .fa-facebook-square:before{content:\\"\\\\f082\\"}  .fa-camera-retro:before{content:\\"\\\\f083\\"}  .fa-key:before{content:\\"\\\\f084\\"}  .fa-gears:before,.fa-cogs:before{content:\\"\\\\f085\\"}  .fa-comments:before{content:\\"\\\\f086\\"}  .fa-thumbs-o-up:before{content:\\"\\\\f087\\"}  .fa-thumbs-o-down:before{content:\\"\\\\f088\\"}  .fa-star-half:before{content:\\"\\\\f089\\"}  .fa-heart-o:before{content:\\"\\\\f08a\\"}  .fa-sign-out:before{content:\\"\\\\f08b\\"}  .fa-linkedin-square:before{content:\\"\\\\f08c\\"}  .fa-thumb-tack:before{content:\\"\\\\f08d\\"}  .fa-external-link:before{content:\\"\\\\f08e\\"}  .fa-sign-in:before{content:\\"\\\\f090\\"}  .fa-trophy:before{content:\\"\\\\f091\\"}  .fa-github-square:before{content:\\"\\\\f092\\"}  .fa-upload:before{content:\\"\\\\f093\\"}  .fa-lemon-o:before{content:\\"\\\\f094\\"}  .fa-phone:before{content:\\"\\\\f095\\"}  .fa-square-o:before{content:\\"\\\\f096\\"}  .fa-bookmark-o:before{content:\\"\\\\f097\\"}  .fa-phone-square:before{content:\\"\\\\f098\\"}  .fa-twitter:before{content:\\"\\\\f099\\"}  .fa-facebook-f:before,.fa-facebook:before{content:\\"\\\\f09a\\"}  .fa-github:before{content:\\"\\\\f09b\\"}  .fa-unlock:before{content:\\"\\\\f09c\\"}  .fa-credit-card:before{content:\\"\\\\f09d\\"}  .fa-feed:before,.fa-rss:before{content:\\"\\\\f09e\\"}  .fa-hdd-o:before{content:\\"\\\\f0a0\\"}  .fa-bullhorn:before{content:\\"\\\\f0a1\\"}  .fa-bell:before{content:\\"\\\\f0f3\\"}  .fa-certificate:before{content:\\"\\\\f0a3\\"}  .fa-hand-o-right:before{content:\\"\\\\f0a4\\"}  .fa-hand-o-left:before{content:\\"\\\\f0a5\\"}  .fa-hand-o-up:before{content:\\"\\\\f0a6\\"}  .fa-hand-o-down:before{content:\\"\\\\f0a7\\"}  .fa-arrow-circle-left:before{content:\\"\\\\f0a8\\"}  .fa-arrow-circle-right:before{content:\\"\\\\f0a9\\"}  .fa-arrow-circle-up:before{content:\\"\\\\f0aa\\"}  .fa-arrow-circle-down:before{content:\\"\\\\f0ab\\"}  .fa-globe:before{content:\\"\\\\f0ac\\"}  .fa-wrench:before{content:\\"\\\\f0ad\\"}  .fa-tasks:before{content:\\"\\\\f0ae\\"}  .fa-filter:before{content:\\"\\\\f0b0\\"}  .fa-briefcase:before{content:\\"\\\\f0b1\\"}  .fa-arrows-alt:before{content:\\"\\\\f0b2\\"}  .fa-group:before,.fa-users:before{content:\\"\\\\f0c0\\"}  .fa-chain:before,.fa-link:before{content:\\"\\\\f0c1\\"}  .fa-cloud:before{content:\\"\\\\f0c2\\"}  .fa-flask:before{content:\\"\\\\f0c3\\"}  .fa-cut:before,.fa-scissors:before{content:\\"\\\\f0c4\\"}  .fa-copy:before,.fa-files-o:before{content:\\"\\\\f0c5\\"}  .fa-paperclip:before{content:\\"\\\\f0c6\\"}  .fa-save:before,.fa-floppy-o:before{content:\\"\\\\f0c7\\"}  .fa-square:before{content:\\"\\\\f0c8\\"}  .fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\\"\\\\f0c9\\"}  .fa-list-ul:before{content:\\"\\\\f0ca\\"}  .fa-list-ol:before{content:\\"\\\\f0cb\\"}  .fa-strikethrough:before{content:\\"\\\\f0cc\\"}  .fa-underline:before{content:\\"\\\\f0cd\\"}  .fa-table:before{content:\\"\\\\f0ce\\"}  .fa-magic:before{content:\\"\\\\f0d0\\"}  .fa-truck:before{content:\\"\\\\f0d1\\"}  .fa-pinterest:before{content:\\"\\\\f0d2\\"}  .fa-pinterest-square:before{content:\\"\\\\f0d3\\"}  .fa-google-plus-square:before{content:\\"\\\\f0d4\\"}  .fa-google-plus:before{content:\\"\\\\f0d5\\"}  .fa-money:before{content:\\"\\\\f0d6\\"}  .fa-caret-down:before{content:\\"\\\\f0d7\\"}  .fa-caret-up:before{content:\\"\\\\f0d8\\"}  .fa-caret-left:before{content:\\"\\\\f0d9\\"}  .fa-caret-right:before{content:\\"\\\\f0da\\"}  .fa-columns:before{content:\\"\\\\f0db\\"}  .fa-unsorted:before,.fa-sort:before{content:\\"\\\\f0dc\\"}  .fa-sort-down:before,.fa-sort-desc:before{content:\\"\\\\f0dd\\"}  .fa-sort-up:before,.fa-sort-asc:before{content:\\"\\\\f0de\\"}  .fa-envelope:before{content:\\"\\\\f0e0\\"}  .fa-linkedin:before{content:\\"\\\\f0e1\\"}  .fa-rotate-left:before,.fa-undo:before{content:\\"\\\\f0e2\\"}  .fa-legal:before,.fa-gavel:before{content:\\"\\\\f0e3\\"}  .fa-dashboard:before,.fa-tachometer:before{content:\\"\\\\f0e4\\"}  .fa-comment-o:before{content:\\"\\\\f0e5\\"}  .fa-comments-o:before{content:\\"\\\\f0e6\\"}  .fa-flash:before,.fa-bolt:before{content:\\"\\\\f0e7\\"}  .fa-sitemap:before{content:\\"\\\\f0e8\\"}  .fa-umbrella:before{content:\\"\\\\f0e9\\"}  .fa-paste:before,.fa-clipboard:before{content:\\"\\\\f0ea\\"}  .fa-lightbulb-o:before{content:\\"\\\\f0eb\\"}  .fa-exchange:before{content:\\"\\\\f0ec\\"}  .fa-cloud-download:before{content:\\"\\\\f0ed\\"}  .fa-cloud-upload:before{content:\\"\\\\f0ee\\"}  .fa-user-md:before{content:\\"\\\\f0f0\\"}  .fa-stethoscope:before{content:\\"\\\\f0f1\\"}  .fa-suitcase:before{content:\\"\\\\f0f2\\"}  .fa-bell-o:before{content:\\"\\\\f0a2\\"}  .fa-coffee:before{content:\\"\\\\f0f4\\"}  .fa-cutlery:before{content:\\"\\\\f0f5\\"}  .fa-file-text-o:before{content:\\"\\\\f0f6\\"}  .fa-building-o:before{content:\\"\\\\f0f7\\"}  .fa-hospital-o:before{content:\\"\\\\f0f8\\"}  .fa-ambulance:before{content:\\"\\\\f0f9\\"}  .fa-medkit:before{content:\\"\\\\f0fa\\"}  .fa-fighter-jet:before{content:\\"\\\\f0fb\\"}  .fa-beer:before{content:\\"\\\\f0fc\\"}  .fa-h-square:before{content:\\"\\\\f0fd\\"}  .fa-plus-square:before{content:\\"\\\\f0fe\\"}  .fa-angle-double-left:before{content:\\"\\\\f100\\"}  .fa-angle-double-right:before{content:\\"\\\\f101\\"}  .fa-angle-double-up:before{content:\\"\\\\f102\\"}  .fa-angle-double-down:before{content:\\"\\\\f103\\"}  .fa-angle-left:before{content:\\"\\\\f104\\"}  .fa-angle-right:before{content:\\"\\\\f105\\"}  .fa-angle-up:before{content:\\"\\\\f106\\"}  .fa-angle-down:before{content:\\"\\\\f107\\"}  .fa-desktop:before{content:\\"\\\\f108\\"}  .fa-laptop:before{content:\\"\\\\f109\\"}  .fa-tablet:before{content:\\"\\\\f10a\\"}  .fa-mobile-phone:before,.fa-mobile:before{content:\\"\\\\f10b\\"}  .fa-circle-o:before{content:\\"\\\\f10c\\"}  .fa-quote-left:before{content:\\"\\\\f10d\\"}  .fa-quote-right:before{content:\\"\\\\f10e\\"}  .fa-spinner:before{content:\\"\\\\f110\\"}  .fa-circle:before{content:\\"\\\\f111\\"}  .fa-mail-reply:before,.fa-reply:before{content:\\"\\\\f112\\"}  .fa-github-alt:before{content:\\"\\\\f113\\"}  .fa-folder-o:before{content:\\"\\\\f114\\"}  .fa-folder-open-o:before{content:\\"\\\\f115\\"}  .fa-smile-o:before{content:\\"\\\\f118\\"}  .fa-frown-o:before{content:\\"\\\\f119\\"}  .fa-meh-o:before{content:\\"\\\\f11a\\"}  .fa-gamepad:before{content:\\"\\\\f11b\\"}  .fa-keyboard-o:before{content:\\"\\\\f11c\\"}  .fa-flag-o:before{content:\\"\\\\f11d\\"}  .fa-flag-checkered:before{content:\\"\\\\f11e\\"}  .fa-terminal:before{content:\\"\\\\f120\\"}  .fa-code:before{content:\\"\\\\f121\\"}  .fa-mail-reply-all:before,.fa-reply-all:before{content:\\"\\\\f122\\"}  .fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\\"\\\\f123\\"}  .fa-location-arrow:before{content:\\"\\\\f124\\"}  .fa-crop:before{content:\\"\\\\f125\\"}  .fa-code-fork:before{content:\\"\\\\f126\\"}  .fa-unlink:before,.fa-chain-broken:before{content:\\"\\\\f127\\"}  .fa-question:before{content:\\"\\\\f128\\"}  .fa-info:before{content:\\"\\\\f129\\"}  .fa-exclamation:before{content:\\"\\\\f12a\\"}  .fa-superscript:before{content:\\"\\\\f12b\\"}  .fa-subscript:before{content:\\"\\\\f12c\\"}  .fa-eraser:before{content:\\"\\\\f12d\\"}  .fa-puzzle-piece:before{content:\\"\\\\f12e\\"}  .fa-microphone:before{content:\\"\\\\f130\\"}  .fa-microphone-slash:before{content:\\"\\\\f131\\"}  .fa-shield:before{content:\\"\\\\f132\\"}  .fa-calendar-o:before{content:\\"\\\\f133\\"}  .fa-fire-extinguisher:before{content:\\"\\\\f134\\"}  .fa-rocket:before{content:\\"\\\\f135\\"}  .fa-maxcdn:before{content:\\"\\\\f136\\"}  .fa-chevron-circle-left:before{content:\\"\\\\f137\\"}  .fa-chevron-circle-right:before{content:\\"\\\\f138\\"}  .fa-chevron-circle-up:before{content:\\"\\\\f139\\"}  .fa-chevron-circle-down:before{content:\\"\\\\f13a\\"}  .fa-html5:before{content:\\"\\\\f13b\\"}  .fa-css3:before{content:\\"\\\\f13c\\"}  .fa-anchor:before{content:\\"\\\\f13d\\"}  .fa-unlock-alt:before{content:\\"\\\\f13e\\"}  .fa-bullseye:before{content:\\"\\\\f140\\"}  .fa-ellipsis-h:before{content:\\"\\\\f141\\"}  .fa-ellipsis-v:before{content:\\"\\\\f142\\"}  .fa-rss-square:before{content:\\"\\\\f143\\"}  .fa-play-circle:before{content:\\"\\\\f144\\"}  .fa-ticket:before{content:\\"\\\\f145\\"}  .fa-minus-square:before{content:\\"\\\\f146\\"}  .fa-minus-square-o:before{content:\\"\\\\f147\\"}  .fa-level-up:before{content:\\"\\\\f148\\"}  .fa-level-down:before{content:\\"\\\\f149\\"}  .fa-check-square:before{content:\\"\\\\f14a\\"}  .fa-pencil-square:before{content:\\"\\\\f14b\\"}  .fa-external-link-square:before{content:\\"\\\\f14c\\"}  .fa-share-square:before{content:\\"\\\\f14d\\"}  .fa-compass:before{content:\\"\\\\f14e\\"}  .fa-toggle-down:before,.fa-caret-square-o-down:before{content:\\"\\\\f150\\"}  .fa-toggle-up:before,.fa-caret-square-o-up:before{content:\\"\\\\f151\\"}  .fa-toggle-right:before,.fa-caret-square-o-right:before{content:\\"\\\\f152\\"}  .fa-euro:before,.fa-eur:before{content:\\"\\\\f153\\"}  .fa-gbp:before{content:\\"\\\\f154\\"}  .fa-dollar:before,.fa-usd:before{content:\\"\\\\f155\\"}  .fa-rupee:before,.fa-inr:before{content:\\"\\\\f156\\"}  .fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\\"\\\\f157\\"}  .fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\\"\\\\f158\\"}  .fa-won:before,.fa-krw:before{content:\\"\\\\f159\\"}  .fa-bitcoin:before,.fa-btc:before{content:\\"\\\\f15a\\"}  .fa-file:before{content:\\"\\\\f15b\\"}  .fa-file-text:before{content:\\"\\\\f15c\\"}  .fa-sort-alpha-asc:before{content:\\"\\\\f15d\\"}  .fa-sort-alpha-desc:before{content:\\"\\\\f15e\\"}  .fa-sort-amount-asc:before{content:\\"\\\\f160\\"}  .fa-sort-amount-desc:before{content:\\"\\\\f161\\"}  .fa-sort-numeric-asc:before{content:\\"\\\\f162\\"}  .fa-sort-numeric-desc:before{content:\\"\\\\f163\\"}  .fa-thumbs-up:before{content:\\"\\\\f164\\"}  .fa-thumbs-down:before{content:\\"\\\\f165\\"}  .fa-youtube-square:before{content:\\"\\\\f166\\"}  .fa-youtube:before{content:\\"\\\\f167\\"}  .fa-xing:before{content:\\"\\\\f168\\"}  .fa-xing-square:before{content:\\"\\\\f169\\"}  .fa-youtube-play:before{content:\\"\\\\f16a\\"}  .fa-dropbox:before{content:\\"\\\\f16b\\"}  .fa-stack-overflow:before{content:\\"\\\\f16c\\"}  .fa-instagram:before{content:\\"\\\\f16d\\"}  .fa-flickr:before{content:\\"\\\\f16e\\"}  .fa-adn:before{content:\\"\\\\f170\\"}  .fa-bitbucket:before{content:\\"\\\\f171\\"}  .fa-bitbucket-square:before{content:\\"\\\\f172\\"}  .fa-tumblr:before{content:\\"\\\\f173\\"}  .fa-tumblr-square:before{content:\\"\\\\f174\\"}  .fa-long-arrow-down:before{content:\\"\\\\f175\\"}  .fa-long-arrow-up:before{content:\\"\\\\f176\\"}  .fa-long-arrow-left:before{content:\\"\\\\f177\\"}  .fa-long-arrow-right:before{content:\\"\\\\f178\\"}  .fa-apple:before{content:\\"\\\\f179\\"}  .fa-windows:before{content:\\"\\\\f17a\\"}  .fa-android:before{content:\\"\\\\f17b\\"}  .fa-linux:before{content:\\"\\\\f17c\\"}  .fa-dribbble:before{content:\\"\\\\f17d\\"}  .fa-skype:before{content:\\"\\\\f17e\\"}  .fa-foursquare:before{content:\\"\\\\f180\\"}  .fa-trello:before{content:\\"\\\\f181\\"}  .fa-female:before{content:\\"\\\\f182\\"}  .fa-male:before{content:\\"\\\\f183\\"}  .fa-gittip:before,.fa-gratipay:before{content:\\"\\\\f184\\"}  .fa-sun-o:before{content:\\"\\\\f185\\"}  .fa-moon-o:before{content:\\"\\\\f186\\"}  .fa-archive:before{content:\\"\\\\f187\\"}  .fa-bug:before{content:\\"\\\\f188\\"}  .fa-vk:before{content:\\"\\\\f189\\"}  .fa-weibo:before{content:\\"\\\\f18a\\"}  .fa-renren:before{content:\\"\\\\f18b\\"}  .fa-pagelines:before{content:\\"\\\\f18c\\"}  .fa-stack-exchange:before{content:\\"\\\\f18d\\"}  .fa-arrow-circle-o-right:before{content:\\"\\\\f18e\\"}  .fa-arrow-circle-o-left:before{content:\\"\\\\f190\\"}  .fa-toggle-left:before,.fa-caret-square-o-left:before{content:\\"\\\\f191\\"}  .fa-dot-circle-o:before{content:\\"\\\\f192\\"}  .fa-wheelchair:before{content:\\"\\\\f193\\"}  .fa-vimeo-square:before{content:\\"\\\\f194\\"}  .fa-turkish-lira:before,.fa-try:before{content:\\"\\\\f195\\"}  .fa-plus-square-o:before{content:\\"\\\\f196\\"}  .fa-space-shuttle:before{content:\\"\\\\f197\\"}  .fa-slack:before{content:\\"\\\\f198\\"}  .fa-envelope-square:before{content:\\"\\\\f199\\"}  .fa-wordpress:before{content:\\"\\\\f19a\\"}  .fa-openid:before{content:\\"\\\\f19b\\"}  .fa-institution:before,.fa-bank:before,.fa-university:before{content:\\"\\\\f19c\\"}  .fa-mortar-board:before,.fa-graduation-cap:before{content:\\"\\\\f19d\\"}  .fa-yahoo:before{content:\\"\\\\f19e\\"}  .fa-google:before{content:\\"\\\\f1a0\\"}  .fa-reddit:before{content:\\"\\\\f1a1\\"}  .fa-reddit-square:before{content:\\"\\\\f1a2\\"}  .fa-stumbleupon-circle:before{content:\\"\\\\f1a3\\"}  .fa-stumbleupon:before{content:\\"\\\\f1a4\\"}  .fa-delicious:before{content:\\"\\\\f1a5\\"}  .fa-digg:before{content:\\"\\\\f1a6\\"}  .fa-pied-piper-pp:before{content:\\"\\\\f1a7\\"}  .fa-pied-piper-alt:before{content:\\"\\\\f1a8\\"}  .fa-drupal:before{content:\\"\\\\f1a9\\"}  .fa-joomla:before{content:\\"\\\\f1aa\\"}  .fa-language:before{content:\\"\\\\f1ab\\"}  .fa-fax:before{content:\\"\\\\f1ac\\"}  .fa-building:before{content:\\"\\\\f1ad\\"}  .fa-child:before{content:\\"\\\\f1ae\\"}  .fa-paw:before{content:\\"\\\\f1b0\\"}  .fa-spoon:before{content:\\"\\\\f1b1\\"}  .fa-cube:before{content:\\"\\\\f1b2\\"}  .fa-cubes:before{content:\\"\\\\f1b3\\"}  .fa-behance:before{content:\\"\\\\f1b4\\"}  .fa-behance-square:before{content:\\"\\\\f1b5\\"}  .fa-steam:before{content:\\"\\\\f1b6\\"}  .fa-steam-square:before{content:\\"\\\\f1b7\\"}  .fa-recycle:before{content:\\"\\\\f1b8\\"}  .fa-automobile:before,.fa-car:before{content:\\"\\\\f1b9\\"}  .fa-cab:before,.fa-taxi:before{content:\\"\\\\f1ba\\"}  .fa-tree:before{content:\\"\\\\f1bb\\"}  .fa-spotify:before{content:\\"\\\\f1bc\\"}  .fa-deviantart:before{content:\\"\\\\f1bd\\"}  .fa-soundcloud:before{content:\\"\\\\f1be\\"}  .fa-database:before{content:\\"\\\\f1c0\\"}  .fa-file-pdf-o:before{content:\\"\\\\f1c1\\"}  .fa-file-word-o:before{content:\\"\\\\f1c2\\"}  .fa-file-excel-o:before{content:\\"\\\\f1c3\\"}  .fa-file-powerpoint-o:before{content:\\"\\\\f1c4\\"}  .fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\\"\\\\f1c5\\"}  .fa-file-zip-o:before,.fa-file-archive-o:before{content:\\"\\\\f1c6\\"}  .fa-file-sound-o:before,.fa-file-audio-o:before{content:\\"\\\\f1c7\\"}  .fa-file-movie-o:before,.fa-file-video-o:before{content:\\"\\\\f1c8\\"}  .fa-file-code-o:before{content:\\"\\\\f1c9\\"}  .fa-vine:before{content:\\"\\\\f1ca\\"}  .fa-codepen:before{content:\\"\\\\f1cb\\"}  .fa-jsfiddle:before{content:\\"\\\\f1cc\\"}  .fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\\"\\\\f1cd\\"}  .fa-circle-o-notch:before{content:\\"\\\\f1ce\\"}  .fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:\\"\\\\f1d0\\"}  .fa-ge:before,.fa-empire:before{content:\\"\\\\f1d1\\"}  .fa-git-square:before{content:\\"\\\\f1d2\\"}  .fa-git:before{content:\\"\\\\f1d3\\"}  .fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:\\"\\\\f1d4\\"}  .fa-tencent-weibo:before{content:\\"\\\\f1d5\\"}  .fa-qq:before{content:\\"\\\\f1d6\\"}  .fa-wechat:before,.fa-weixin:before{content:\\"\\\\f1d7\\"}  .fa-send:before,.fa-paper-plane:before{content:\\"\\\\f1d8\\"}  .fa-send-o:before,.fa-paper-plane-o:before{content:\\"\\\\f1d9\\"}  .fa-history:before{content:\\"\\\\f1da\\"}  .fa-circle-thin:before{content:\\"\\\\f1db\\"}  .fa-header:before{content:\\"\\\\f1dc\\"}  .fa-paragraph:before{content:\\"\\\\f1dd\\"}  .fa-sliders:before{content:\\"\\\\f1de\\"}  .fa-share-alt:before{content:\\"\\\\f1e0\\"}  .fa-share-alt-square:before{content:\\"\\\\f1e1\\"}  .fa-bomb:before{content:\\"\\\\f1e2\\"}  .fa-soccer-ball-o:before,.fa-futbol-o:before{content:\\"\\\\f1e3\\"}  .fa-tty:before{content:\\"\\\\f1e4\\"}  .fa-binoculars:before{content:\\"\\\\f1e5\\"}  .fa-plug:before{content:\\"\\\\f1e6\\"}  .fa-slideshare:before{content:\\"\\\\f1e7\\"}  .fa-twitch:before{content:\\"\\\\f1e8\\"}  .fa-yelp:before{content:\\"\\\\f1e9\\"}  .fa-newspaper-o:before{content:\\"\\\\f1ea\\"}  .fa-wifi:before{content:\\"\\\\f1eb\\"}  .fa-calculator:before{content:\\"\\\\f1ec\\"}  .fa-paypal:before{content:\\"\\\\f1ed\\"}  .fa-google-wallet:before{content:\\"\\\\f1ee\\"}  .fa-cc-visa:before{content:\\"\\\\f1f0\\"}  .fa-cc-mastercard:before{content:\\"\\\\f1f1\\"}  .fa-cc-discover:before{content:\\"\\\\f1f2\\"}  .fa-cc-amex:before{content:\\"\\\\f1f3\\"}  .fa-cc-paypal:before{content:\\"\\\\f1f4\\"}  .fa-cc-stripe:before{content:\\"\\\\f1f5\\"}  .fa-bell-slash:before{content:\\"\\\\f1f6\\"}  .fa-bell-slash-o:before{content:\\"\\\\f1f7\\"}  .fa-trash:before{content:\\"\\\\f1f8\\"}  .fa-copyright:before{content:\\"\\\\f1f9\\"}  .fa-at:before{content:\\"\\\\f1fa\\"}  .fa-eyedropper:before{content:\\"\\\\f1fb\\"}  .fa-paint-brush:before{content:\\"\\\\f1fc\\"}  .fa-birthday-cake:before{content:\\"\\\\f1fd\\"}  .fa-area-chart:before{content:\\"\\\\f1fe\\"}  .fa-pie-chart:before{content:\\"\\\\f200\\"}  .fa-line-chart:before{content:\\"\\\\f201\\"}  .fa-lastfm:before{content:\\"\\\\f202\\"}  .fa-lastfm-square:before{content:\\"\\\\f203\\"}  .fa-toggle-off:before{content:\\"\\\\f204\\"}  .fa-toggle-on:before{content:\\"\\\\f205\\"}  .fa-bicycle:before{content:\\"\\\\f206\\"}  .fa-bus:before{content:\\"\\\\f207\\"}  .fa-ioxhost:before{content:\\"\\\\f208\\"}  .fa-angellist:before{content:\\"\\\\f209\\"}  .fa-cc:before{content:\\"\\\\f20a\\"}  .fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\\"\\\\f20b\\"}  .fa-meanpath:before{content:\\"\\\\f20c\\"}  .fa-buysellads:before{content:\\"\\\\f20d\\"}  .fa-connectdevelop:before{content:\\"\\\\f20e\\"}  .fa-dashcube:before{content:\\"\\\\f210\\"}  .fa-forumbee:before{content:\\"\\\\f211\\"}  .fa-leanpub:before{content:\\"\\\\f212\\"}  .fa-sellsy:before{content:\\"\\\\f213\\"}  .fa-shirtsinbulk:before{content:\\"\\\\f214\\"}  .fa-simplybuilt:before{content:\\"\\\\f215\\"}  .fa-skyatlas:before{content:\\"\\\\f216\\"}  .fa-cart-plus:before{content:\\"\\\\f217\\"}  .fa-cart-arrow-down:before{content:\\"\\\\f218\\"}  .fa-diamond:before{content:\\"\\\\f219\\"}  .fa-ship:before{content:\\"\\\\f21a\\"}  .fa-user-secret:before{content:\\"\\\\f21b\\"}  .fa-motorcycle:before{content:\\"\\\\f21c\\"}  .fa-street-view:before{content:\\"\\\\f21d\\"}  .fa-heartbeat:before{content:\\"\\\\f21e\\"}  .fa-venus:before{content:\\"\\\\f221\\"}  .fa-mars:before{content:\\"\\\\f222\\"}  .fa-mercury:before{content:\\"\\\\f223\\"}  .fa-intersex:before,.fa-transgender:before{content:\\"\\\\f224\\"}  .fa-transgender-alt:before{content:\\"\\\\f225\\"}  .fa-venus-double:before{content:\\"\\\\f226\\"}  .fa-mars-double:before{content:\\"\\\\f227\\"}  .fa-venus-mars:before{content:\\"\\\\f228\\"}  .fa-mars-stroke:before{content:\\"\\\\f229\\"}  .fa-mars-stroke-v:before{content:\\"\\\\f22a\\"}  .fa-mars-stroke-h:before{content:\\"\\\\f22b\\"}  .fa-neuter:before{content:\\"\\\\f22c\\"}  .fa-genderless:before{content:\\"\\\\f22d\\"}  .fa-facebook-official:before{content:\\"\\\\f230\\"}  .fa-pinterest-p:before{content:\\"\\\\f231\\"}  .fa-whatsapp:before{content:\\"\\\\f232\\"}  .fa-server:before{content:\\"\\\\f233\\"}  .fa-user-plus:before{content:\\"\\\\f234\\"}  .fa-user-times:before{content:\\"\\\\f235\\"}  .fa-hotel:before,.fa-bed:before{content:\\"\\\\f236\\"}  .fa-viacoin:before{content:\\"\\\\f237\\"}  .fa-train:before{content:\\"\\\\f238\\"}  .fa-subway:before{content:\\"\\\\f239\\"}  .fa-medium:before{content:\\"\\\\f23a\\"}  .fa-yc:before,.fa-y-combinator:before{content:\\"\\\\f23b\\"}  .fa-optin-monster:before{content:\\"\\\\f23c\\"}  .fa-opencart:before{content:\\"\\\\f23d\\"}  .fa-expeditedssl:before{content:\\"\\\\f23e\\"}  .fa-battery-4:before,.fa-battery-full:before{content:\\"\\\\f240\\"}  .fa-battery-3:before,.fa-battery-three-quarters:before{content:\\"\\\\f241\\"}  .fa-battery-2:before,.fa-battery-half:before{content:\\"\\\\f242\\"}  .fa-battery-1:before,.fa-battery-quarter:before{content:\\"\\\\f243\\"}  .fa-battery-0:before,.fa-battery-empty:before{content:\\"\\\\f244\\"}  .fa-mouse-pointer:before{content:\\"\\\\f245\\"}  .fa-i-cursor:before{content:\\"\\\\f246\\"}  .fa-object-group:before{content:\\"\\\\f247\\"}  .fa-object-ungroup:before{content:\\"\\\\f248\\"}  .fa-sticky-note:before{content:\\"\\\\f249\\"}  .fa-sticky-note-o:before{content:\\"\\\\f24a\\"}  .fa-cc-jcb:before{content:\\"\\\\f24b\\"}  .fa-cc-diners-club:before{content:\\"\\\\f24c\\"}  .fa-clone:before{content:\\"\\\\f24d\\"}  .fa-balance-scale:before{content:\\"\\\\f24e\\"}  .fa-hourglass-o:before{content:\\"\\\\f250\\"}  .fa-hourglass-1:before,.fa-hourglass-start:before{content:\\"\\\\f251\\"}  .fa-hourglass-2:before,.fa-hourglass-half:before{content:\\"\\\\f252\\"}  .fa-hourglass-3:before,.fa-hourglass-end:before{content:\\"\\\\f253\\"}  .fa-hourglass:before{content:\\"\\\\f254\\"}  .fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\\"\\\\f255\\"}  .fa-hand-stop-o:before,.fa-hand-paper-o:before{content:\\"\\\\f256\\"}  .fa-hand-scissors-o:before{content:\\"\\\\f257\\"}  .fa-hand-lizard-o:before{content:\\"\\\\f258\\"}  .fa-hand-spock-o:before{content:\\"\\\\f259\\"}  .fa-hand-pointer-o:before{content:\\"\\\\f25a\\"}  .fa-hand-peace-o:before{content:\\"\\\\f25b\\"}  .fa-trademark:before{content:\\"\\\\f25c\\"}  .fa-registered:before{content:\\"\\\\f25d\\"}  .fa-creative-commons:before{content:\\"\\\\f25e\\"}  .fa-gg:before{content:\\"\\\\f260\\"}  .fa-gg-circle:before{content:\\"\\\\f261\\"}  .fa-tripadvisor:before{content:\\"\\\\f262\\"}  .fa-odnoklassniki:before{content:\\"\\\\f263\\"}  .fa-odnoklassniki-square:before{content:\\"\\\\f264\\"}  .fa-get-pocket:before{content:\\"\\\\f265\\"}  .fa-wikipedia-w:before{content:\\"\\\\f266\\"}  .fa-safari:before{content:\\"\\\\f267\\"}  .fa-chrome:before{content:\\"\\\\f268\\"}  .fa-firefox:before{content:\\"\\\\f269\\"}  .fa-opera:before{content:\\"\\\\f26a\\"}  .fa-internet-explorer:before{content:\\"\\\\f26b\\"}  .fa-tv:before,.fa-television:before{content:\\"\\\\f26c\\"}  .fa-contao:before{content:\\"\\\\f26d\\"}  .fa-500px:before{content:\\"\\\\f26e\\"}  .fa-amazon:before{content:\\"\\\\f270\\"}  .fa-calendar-plus-o:before{content:\\"\\\\f271\\"}  .fa-calendar-minus-o:before{content:\\"\\\\f272\\"}  .fa-calendar-times-o:before{content:\\"\\\\f273\\"}  .fa-calendar-check-o:before{content:\\"\\\\f274\\"}  .fa-industry:before{content:\\"\\\\f275\\"}  .fa-map-pin:before{content:\\"\\\\f276\\"}  .fa-map-signs:before{content:\\"\\\\f277\\"}  .fa-map-o:before{content:\\"\\\\f278\\"}  .fa-map:before{content:\\"\\\\f279\\"}  .fa-commenting:before{content:\\"\\\\f27a\\"}  .fa-commenting-o:before{content:\\"\\\\f27b\\"}  .fa-houzz:before{content:\\"\\\\f27c\\"}  .fa-vimeo:before{content:\\"\\\\f27d\\"}  .fa-black-tie:before{content:\\"\\\\f27e\\"}  .fa-fonticons:before{content:\\"\\\\f280\\"}  .fa-reddit-alien:before{content:\\"\\\\f281\\"}  .fa-edge:before{content:\\"\\\\f282\\"}  .fa-credit-card-alt:before{content:\\"\\\\f283\\"}  .fa-codiepie:before{content:\\"\\\\f284\\"}  .fa-modx:before{content:\\"\\\\f285\\"}  .fa-fort-awesome:before{content:\\"\\\\f286\\"}  .fa-usb:before{content:\\"\\\\f287\\"}  .fa-product-hunt:before{content:\\"\\\\f288\\"}  .fa-mixcloud:before{content:\\"\\\\f289\\"}  .fa-scribd:before{content:\\"\\\\f28a\\"}  .fa-pause-circle:before{content:\\"\\\\f28b\\"}  .fa-pause-circle-o:before{content:\\"\\\\f28c\\"}  .fa-stop-circle:before{content:\\"\\\\f28d\\"}  .fa-stop-circle-o:before{content:\\"\\\\f28e\\"}  .fa-shopping-bag:before{content:\\"\\\\f290\\"}  .fa-shopping-basket:before{content:\\"\\\\f291\\"}  .fa-hashtag:before{content:\\"\\\\f292\\"}  .fa-bluetooth:before{content:\\"\\\\f293\\"}  .fa-bluetooth-b:before{content:\\"\\\\f294\\"}  .fa-percent:before{content:\\"\\\\f295\\"}  .fa-gitlab:before{content:\\"\\\\f296\\"}  .fa-wpbeginner:before{content:\\"\\\\f297\\"}  .fa-wpforms:before{content:\\"\\\\f298\\"}  .fa-envira:before{content:\\"\\\\f299\\"}  .fa-universal-access:before{content:\\"\\\\f29a\\"}  .fa-wheelchair-alt:before{content:\\"\\\\f29b\\"}  .fa-question-circle-o:before{content:\\"\\\\f29c\\"}  .fa-blind:before{content:\\"\\\\f29d\\"}  .fa-audio-description:before{content:\\"\\\\f29e\\"}  .fa-volume-control-phone:before{content:\\"\\\\f2a0\\"}  .fa-braille:before{content:\\"\\\\f2a1\\"}  .fa-assistive-listening-systems:before{content:\\"\\\\f2a2\\"}  .fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:\\"\\\\f2a3\\"}  .fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:\\"\\\\f2a4\\"}  .fa-glide:before{content:\\"\\\\f2a5\\"}  .fa-glide-g:before{content:\\"\\\\f2a6\\"}  .fa-signing:before,.fa-sign-language:before{content:\\"\\\\f2a7\\"}  .fa-low-vision:before{content:\\"\\\\f2a8\\"}  .fa-viadeo:before{content:\\"\\\\f2a9\\"}  .fa-viadeo-square:before{content:\\"\\\\f2aa\\"}  .fa-snapchat:before{content:\\"\\\\f2ab\\"}  .fa-snapchat-ghost:before{content:\\"\\\\f2ac\\"}  .fa-snapchat-square:before{content:\\"\\\\f2ad\\"}  .fa-pied-piper:before{content:\\"\\\\f2ae\\"}  .fa-first-order:before{content:\\"\\\\f2b0\\"}  .fa-yoast:before{content:\\"\\\\f2b1\\"}  .fa-themeisle:before{content:\\"\\\\f2b2\\"}  .fa-google-plus-circle:before,.fa-google-plus-official:before{content:\\"\\\\f2b3\\"}  .fa-fa:before,.fa-font-awesome:before{content:\\"\\\\f2b4\\"}  .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}  .sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///184\n')},185:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90P2UwODMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///185\n')},186:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90Pzc0ZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///186\n')},187:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff2?0317d582b93c20f68e059e389aecab33");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/NjE2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9GQUF1QiwrREFBK0QiLCJmaWxlIjoiMTg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/MDMxN2Q1ODJiOTNjMjBmNjhlMDU5ZTM4OWFlY2FiMzNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///187\n')},188:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff?f7f1738ca345185e01856ac55885b089");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZj82MmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb0ZBQXVCLDhEQUE4RCIsImZpbGUiOiIxODguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udGF3ZXNvbWUtd2ViZm9udC53b2ZmP2Y3ZjE3MzhjYTM0NTE4NWUwMTg1NmFjNTU4ODViMDg5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///188\n')},189:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.ttf?f0af1680f082547a7aae4af9d841d693");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQudHRmPzYxMzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnR0Zj9mMGFmMTY4MGYwODI1NDdhN2FhZTRhZjlkODQxZDY5M1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///189\n')},19:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9wcm90b2NvbC9TdGF0dXMuanM/ODg4YSJdLCJuYW1lcyI6WyJTdGF0dXMiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIiwiQ0xPU0VEX0VSUk9SIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUc7QUFDbEJDLFlBQVUsRUFBRSxZQURNO0FBRWxCQyxXQUFTLEVBQUcsV0FGTTtBQUdsQkMsY0FBWSxFQUFFLGNBSEk7QUFJbEJDLGNBQVksRUFBRTtBQUpJLENBQWYiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGNvbm5lY3Rpb24gc3RhdHVzLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG4gICAgQ09OTkVDVElORzogXCJjb25uZWN0aW5nXCIsXG4gICAgQ09OTkVDVEVEOiAgXCJjb25uZWN0ZWRcIixcbiAgICBESVNDT05ORUNURUQ6IFwiZGlzY29ubmVjdGVkXCIsXG4gICAgQ0xPU0VEX0VSUk9SOiBcImNsb3NlZC1lcnJvclwiXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n')},190:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.svg?ed6298903ae1554c7f3e1a668c39fdcc");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuc3ZnP2E3NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnN2Zz9lZDYyOTg5MDNhZTE1NTRjN2YzZTFhNjY4YzM5ZmRjY1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///190\n')},20:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(5);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(19);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    this.id = "DataSource-" + Object(Utils["n" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.dataSourceWorker = worker;\n    this.currentRunningProperties = {};\n    this.initDataSource(properties);\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    this.dataSourceWorker.postMessage({\n      message: \'init\',\n      id: this.id,\n      properties: JSON.stringify(properties),\n      topic: this.getTopicId()\n    });\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  disconnect() {\n    this.dataSourceWorker.postMessage({\n      message: \'disconnect\'\n    });\n  }\n  /**\n   * Trigger when the datasource is disconnected for some reason.\n   */\n\n\n  onDisconnect() {\n    return new Promise(resolve => {\n      new BroadcastChannel(this.getTopicId()).onmessage = event => {\n        if (event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          resolve();\n        }\n      };\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    this.dataSourceWorker.postMessage({\n      message: \'connect\'\n    });\n    return this.isConnected();\n  }\n\n  async isConnected() {\n    const promise = new Promise(resolve => {\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.onmessage = event => {\n          if (event.data.message === \'is-connected\') {\n            resolve(event.data.data);\n          }\n        };\n      }\n    });\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'is-connected\'\n      });\n    }\n\n    return promise;\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    // save current running properties\n    this.currentRunningProperties = { ...this.properties,\n      ...properties\n    };\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'update-url\',\n        data: properties\n      });\n    }\n  }\n\n  getCurrentRunningProperties() {\n    return this.currentRunningProperties;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  getVersion() {\n    return 0;\n  }\n\n}\n\n/* harmony default export */ var datasource_DataSource = (DataSource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeriesDataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeriesDataSource_TimeSeriesDataSource extends datasource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {String} [properties.minTime=properties.startTime] the min range time (ISO format)\n   * @param {String} [properties.maxTime=properties.endTime] the max range time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    super(name, properties, worker);\n    Object(Utils["b" /* assertDefined */])(properties, \'Some properties must be defined\');\n    Object(Utils["b" /* assertDefined */])(properties.startTime, \'startTime must must be defined\');\n    Object(Utils["b" /* assertDefined */])(properties.endTime, \'startTime must must be defined\');\n    this.timeSync = null;\n  }\n\n  setDataSynchronizer(timeSync) {\n    this.timeSync = timeSync;\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.timeSync.id,\n      timeTopic: this.getTimeTopicId()\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    super.initDataSource(properties);\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: this.getTopicId(),\n      timeTopic: this.getTimeTopicId()\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  setTimeRange(startTime, endTime, replaySpeed, reconnect = false) {\n    let replay = {};\n\n    if (Object(Utils["k" /* isDefined */])(replaySpeed)) {\n      replay = {\n        replaySpeed: replaySpeed\n      };\n    }\n\n    this.updateProperties({ ...this.currentRunningProperties,\n      startTime: startTime,\n      endTime: endTime,\n      ...replay,\n      reconnect: reconnect\n    });\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    return this.properties.minTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    return this.properties.maxTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    if (Object(Utils["k" /* isDefined */])(this.currentRunningProperties) && Object(Utils["k" /* isDefined */])(this.currentRunningProperties.replaySpeed)) {\n      return this.currentRunningProperties.replaySpeed;\n    } else if (Object(Utils["k" /* isDefined */])(this.properties.replaySpeed)) {\n      return this.properties.replaySpeed;\n    } else {\n      return 1.0;\n    }\n  }\n\n  async getCurrentTime() {\n    if (Object(Utils["k" /* isDefined */])(this.timeSync)) {\n      return this.timeSync.getCurrentTime();\n    } else {\n      const promise = new Promise(resolve => {\n        if (this.dataSourceWorker !== null) {\n          this.dataSourceWorker.onmessage = event => {\n            if (event.data.message === \'last-timestamp\') {\n              resolve(event.data.data);\n            }\n          };\n        }\n      });\n\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.postMessage({\n          message: \'last-timestamp\'\n        });\n      }\n\n      return promise;\n    }\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay speed\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    super.updateProperties(properties);\n  }\n\n  getTimeTopicId() {\n    return Constants["b" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n\n}\n\n/* harmony default export */ var datasource_TimeSeriesDataSource = __webpack_exports__["a"] = (TimeSeriesDataSource_TimeSeriesDataSource);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')},21:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(167);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides generic parsing for JSON response.\n *\n * @extends DataSource\n * @example\n * import SosGetResultJson from \'core/datasource/SosGetResultJson.js\';\n *\n * let androidPhoneGpsDataSource = new SosGetResultJson("android-GPS", {\n    protocol: "ws",\n    service: "SOS",\n    endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n    offeringID: "urn:android:device:060693280a28e015-sos",\n    observedProperty: "http://sensorml.com/ont/swe/property/Location",\n    startTime: "2015-02-16T07:58:00Z",\n    endTime: "2015-02-16T08:09:00Z",\n    replaySpeed: replaySpeed+"",\n    bufferingTime: 1000,\n    timeShift: -16000\n  });\n */\n\nclass SosGetResultJson extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl - the endpoint url\n   * @param {String} properties.service - the service\n   * @param {String} properties.offeringID - the offeringID\n   * @param {String} properties.observedProperty - the observed property\n   * @param {String} properties.startTime - the start time (ISO format)\n   * @param {String} properties.endTime - the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1]  - the replay factor\n   * @param {Number} [properties.responseFormat] - the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL1Nvc0dldFJlc3VsdEpzb24uanM/MTE3NCJdLCJuYW1lcyI6WyJTb3NHZXRSZXN1bHRKc29uIiwiVGltZVNlcmllc0RhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwidGltZVNoaWZ0IiwicmVjb25uZWN0VGltZW91dCIsIlNvc0dldFJlc3VsdEpzb25Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLGdCQUFOLFNBQStCQyx3RUFBL0IsQ0FBb0Q7QUFDaEQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxhQUFXLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQjtBQUMxQixVQUFNRCxJQUFOLEVBQVk7QUFDUkUsZUFBUyxFQUFDLENBREY7QUFFUkMsc0JBQWdCLEVBQUUsT0FBTyxDQUZqQjtBQUVvQjtBQUM1QixTQUFHRjtBQUhLLEtBQVosRUFJRyxJQUFJRywwRUFBSixFQUpIO0FBS0g7O0FBeEIrQzs7QUEyQnJDUCx5RUFBZiIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG5pbXBvcnQgVGltZVNlcmllc0RhdGFTb3VyY2UgZnJvbSAnLi9UaW1lU2VyaWVzRGF0YVNvdXJjZS5qcyc7XG5pbXBvcnQgU29zR2V0UmVzdWx0SnNvbldvcmtlciBmcm9tICcuL3dvcmtlcnMvU29zR2V0UmVzdWx0SnNvbi53b3JrZXIuanMnO1xuXG4vKipcbiAqIFRoaXMgZGF0YXNvdXJjZSBwcm92aWRlcyBnZW5lcmljIHBhcnNpbmcgZm9yIEpTT04gcmVzcG9uc2UuXG4gKlxuICogQGV4dGVuZHMgRGF0YVNvdXJjZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBTb3NHZXRSZXN1bHRKc29uIGZyb20gJ2NvcmUvZGF0YXNvdXJjZS9Tb3NHZXRSZXN1bHRKc29uLmpzJztcbiAqXG4gKiBsZXQgYW5kcm9pZFBob25lR3BzRGF0YVNvdXJjZSA9IG5ldyBTb3NHZXRSZXN1bHRKc29uKFwiYW5kcm9pZC1HUFNcIiwge1xuICAgIHByb3RvY29sOiBcIndzXCIsXG4gICAgc2VydmljZTogXCJTT1NcIixcbiAgICBlbmRwb2ludFVybDogXCJzZW5zaWFzb2Z0Lm5ldDo4MTgxL3NlbnNvcmh1Yi9zb3NcIixcbiAgICBvZmZlcmluZ0lEOiBcInVybjphbmRyb2lkOmRldmljZTowNjA2OTMyODBhMjhlMDE1LXNvc1wiLFxuICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L0xvY2F0aW9uXCIsXG4gICAgc3RhcnRUaW1lOiBcIjIwMTUtMDItMTZUMDc6NTg6MDBaXCIsXG4gICAgZW5kVGltZTogXCIyMDE1LTAyLTE2VDA4OjA5OjAwWlwiLFxuICAgIHJlcGxheVNwZWVkOiByZXBsYXlTcGVlZCtcIlwiLFxuICAgIGJ1ZmZlcmluZ1RpbWU6IDEwMDAsXG4gICAgdGltZVNoaWZ0OiAtMTYwMDBcbiAgfSk7XG4gKi9cblxuY2xhc3MgU29zR2V0UmVzdWx0SnNvbiBleHRlbmRzIFRpbWVTZXJpZXNEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLnRpbWVTaGlmdD1mYWxzZV0gLSBmaXggc29tZSBwcm9ibGVtIHdpdGggc29tZSBhbmRyb2lkIGRldmljZXMgd2l0aCBzb21lIHRpbWVzdGFtcCBzaGlmdCB0byAxNiBzZWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYnVmZmVyaW5nVGltZT0wIC0gZGVmaW5lcyB0aGUgdGltZSBkdXJpbmcgdGhlIGRhdGEgaGFzIHRvIGJlIGJ1ZmZlcmVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVPdXQ9MF0gLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCAtIHRoZSBlbmRwb2ludCB1cmxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zZXJ2aWNlIC0gdGhlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vZmZlcmluZ0lEIC0gdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IC0gdGhlIG9ic2VydmVkIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIC0gdGhlIHN0YXJ0IHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kVGltZSAtIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gIC0gdGhlIHJlcGxheSBmYWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVzcG9uc2VGb3JtYXRdIC0gdGhlIHJlc3BvbnNlIGZvcm1hdCAoZS5nIHZpZGVvL21wNClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVjb25uZWN0VGltZW91dD0xMDAwMF0gLSB0aGUgdGltZSBiZWZvcmUgcmVjb25uZWN0aW5nIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihuYW1lLCB7XG4gICAgICAgICAgICB0aW1lU2hpZnQ6MCxcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgU29zR2V0UmVzdWx0SnNvbldvcmtlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvc0dldFJlc3VsdEpzb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},5:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return TIME_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgREFUQV9TWU5DSFJPTklaRVJfVE9QSUMgPSAnZGF0YS1zeW5jaHJvbml6ZXItJztcbmV4cG9ydCBjb25zdCBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX0RBVEFfVE9QSUMgPSAnZGF0YXNvdXJjZS1kYXRhLSc7XG5leHBvcnQgY29uc3QgREFUQVNPVVJDRV9USU1FX1RPUElDID0gJ2RhdGFzb3VyY2UtdGltZS0nO1xuXG5leHBvcnQgY29uc3QgRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDID0gJ2ZmbXBlZy1kZWNvZGUtJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n")},7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/resources/css/view.css\nvar view = __webpack_require__(178);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(5);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(19);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: \'data\',\n  STATUS: \'status\',\n  TIME_CHANGED: \'time-changed\'\n};\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(8);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/DataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass DataLayer_DataLayer extends Layer["a" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = \'data\';\n  }\n\n  setData(dataSourceId, records, options) {\n    this.props.data = records;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.props.data\n    };\n  }\n\n}\n\n/* harmony default export */ var layer_DataLayer = (DataLayer_DataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\n\nclass View_View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = []; //this.divId = divId;\n\n    this.id = "view-" + Object(Utils["n" /* randomUUID */])();\n    this.css = "";\n\n    if (Object(Utils["k" /* isDefined */])(properties) && Object(Utils["k" /* isDefined */])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(Utils["b" /* assertDefined */])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["a" /* assertArray */])(properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["h" /* assertTrue */])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(Utils["k" /* isDefined */])(properties.container) ? properties.container : document.body;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(Utils["k" /* isDefined */])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(Utils["k" /* isDefined */])(properties)) {\n      if (Object(Utils["k" /* isDefined */])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(Utils["k" /* isDefined */])(properties.dataSourceId)) {\n        this.addLayer(new layer_DataLayer({\n          dataSourceId: properties.dataSourceId\n        }));\n      }\n\n      if (Object(Utils["k" /* isDefined */])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(Utils["k" /* isDefined */])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(Utils["k" /* isDefined */])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {}\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(Utils["h" /* assertTrue */])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n      broadcastChannel.onmessage = event => {\n        if (event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === EventType.DATA) {\n          // transform the data\n          layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          this.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(Constants["b" /* DATASOURCE_TIME_TOPIC */] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === EventType.TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ var view_View = __webpack_exports__["a"] = (View_View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},8:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.dataSourcesToFn = undefined;\n    this.data = [];\n    this.props = {};\n    this.props.id = "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "n"])();\n    this.props.name = \'\';\n    this.props.description = \'\';\n    this.props.dataSourceId = \'\';\n    this.props.visible = true;\n    this.props.filter = true;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.dataSourceId)) {\n      this.props.dataSourceId = properties.dataSourceId;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    this.initEvents();\n    const that = this;\n\n    if (this.checkFn("filter")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.filter = that.getFunc(\'filter\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timeStamp, options) {\n        return true;\n      };\n\n      let fn = function (rec, timeStamp, options) {\n        that.props.filter = that.getFunc(\'filter\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.visible = that.getFunc(\'getVisible\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n  }\n\n  saveState() {\n    this.initialState = { ...this.props\n    };\n  }\n\n  restoreState() {\n    this.props = { ...this.initialState\n    };\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "l"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "b"])(this.properties.dataSourceId, \'dataSourceId\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "i"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      this.dataSourcesToFn[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  setData(dataSourceId, records, options) {\n    // store data into data props\n    this.data = [];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n\n        outer: for (let j = 0; j < records.length; j++) {\n          inner: for (let i = 0; i < fnArr.length; i++) {\n            fnArr[i](records[j].data, records[j].timeStamp, options);\n\n            if (!this.props.filter) {\n              break inner;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "b"])(this.properties.dataSourceId, \'dataSourceId must be defined\');\n      return [this.properties.dataSourceId];\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || [this.properties.dataSourceId];\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init() {}\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.restoreState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9MYXllci5qcz8yZDFkIl0sIm5hbWVzIjpbIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwiZGF0YVNvdXJjZXNUb0ZuIiwidW5kZWZpbmVkIiwiZGF0YSIsInByb3BzIiwiaWQiLCJyYW5kb21VVUlEIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZGF0YVNvdXJjZUlkIiwidmlzaWJsZSIsImZpbHRlciIsImlzRGVmaW5lZCIsImluaXRFdmVudHMiLCJ0aGF0IiwiY2hlY2tGbiIsImZuIiwicmVjIiwidGltZVN0YW1wIiwib3B0aW9ucyIsImdldEZ1bmMiLCJhZGRGbiIsImdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSIsInNhdmVTdGF0ZSIsImluaXRpYWxTdGF0ZSIsInJlc3RvcmVTdGF0ZSIsImZ1bmNOYW1lIiwiaGFuZGxlciIsImZ1bmMiLCJpc0Z1bmN0aW9uIiwiYXNzZXJ0RGVmaW5lZCIsImlzU2V0IiwiaGFzVmFsdWUiLCJhc3NlcnRBcnJheSIsImRhdGFTb3VyY2VJZHMiLCJhc3NlcnRGdW5jdGlvbiIsImNsZWFyIiwiZ2V0SWQiLCJzZWxlY3QiLCJpIiwibGVuZ3RoIiwicHVzaCIsInNldERhdGEiLCJyZWNvcmRzIiwiZm5BcnIiLCJvdXRlciIsImoiLCJpbm5lciIsImdldERhdGFTb3VyY2VzSWRzIiwicmVzIiwiaW5pdCIsImdldFByb3BzIiwidHlwZSIsInZhbHVlcyIsInJlc2V0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBVUE7QUFDQTtBQUNBOztBQUNBLE1BQU1BLEtBQU4sQ0FBWTtBQUNSO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsYUFBVyxDQUFDQyxVQUFELEVBQWE7QUFDcEIsU0FBS0EsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLQyxlQUFMLEdBQXVCQyxTQUF2QjtBQUNBLFNBQUtDLElBQUwsR0FBWSxFQUFaO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDQSxTQUFLQSxLQUFMLENBQVdDLEVBQVgsR0FBZ0IsV0FBV0MsMEVBQVUsRUFBckM7QUFDQSxTQUFLRixLQUFMLENBQVdHLElBQVgsR0FBa0IsRUFBbEI7QUFDQSxTQUFLSCxLQUFMLENBQVdJLFdBQVgsR0FBeUIsRUFBekI7QUFDQSxTQUFLSixLQUFMLENBQVdLLFlBQVgsR0FBMEIsRUFBMUI7QUFDQSxTQUFLTCxLQUFMLENBQVdNLE9BQVgsR0FBcUIsSUFBckI7QUFDQSxTQUFLTixLQUFMLENBQVdPLE1BQVgsR0FBb0IsSUFBcEI7O0FBRUEsUUFBR0MseUVBQVMsQ0FBQ1osVUFBVSxDQUFDTyxJQUFaLENBQVosRUFBK0I7QUFDM0IsV0FBS0gsS0FBTCxDQUFXRyxJQUFYLEdBQWtCUCxVQUFVLENBQUNPLElBQTdCO0FBQ0g7O0FBQ0QsUUFBR0sseUVBQVMsQ0FBQ1osVUFBVSxDQUFDUSxXQUFaLENBQVosRUFBc0M7QUFDbEMsV0FBS0osS0FBTCxDQUFXSSxXQUFYLEdBQXlCUixVQUFVLENBQUNRLFdBQXBDO0FBQ0g7O0FBRUQsUUFBR0kseUVBQVMsQ0FBQ1osVUFBVSxDQUFDUyxZQUFaLENBQVosRUFBdUM7QUFDbkMsV0FBS0wsS0FBTCxDQUFXSyxZQUFYLEdBQTBCVCxVQUFVLENBQUNTLFlBQXJDO0FBQ0g7O0FBRUQsUUFBR0cseUVBQVMsQ0FBQ1osVUFBVSxDQUFDVSxPQUFaLENBQVosRUFBa0M7QUFDOUIsV0FBS04sS0FBTCxDQUFXTSxPQUFYLEdBQXFCVixVQUFVLENBQUNVLE9BQWhDO0FBQ0g7O0FBRUQsU0FBS0csVUFBTDtBQUVBLFVBQU1DLElBQUksR0FBRyxJQUFiOztBQUVBLFFBQUksS0FBS0MsT0FBTCxDQUFhLFFBQWIsQ0FBSixFQUE0QjtBQUN4QixVQUFJQyxFQUFFLEdBQUcsVUFBU0MsR0FBVCxFQUFhQyxTQUFiLEVBQXVCQyxPQUF2QixFQUFnQztBQUNyQ0wsWUFBSSxDQUFDVixLQUFMLENBQVdPLE1BQVgsR0FBb0JHLElBQUksQ0FBQ00sT0FBTCxDQUFhLFFBQWIsRUFBdUJILEdBQXZCLEVBQTJCQyxTQUEzQixFQUFxQ0MsT0FBckMsQ0FBcEI7QUFDSCxPQUZEOztBQUdBLFdBQUtFLEtBQUwsQ0FBV1AsSUFBSSxDQUFDUSwyQkFBTCxDQUFpQyxRQUFqQyxDQUFYLEVBQXNETixFQUF0RDtBQUNILEtBTEQsTUFLTztBQUNILFdBQUtoQixVQUFMLENBQWdCVyxNQUFoQixHQUF5QixVQUFTTSxHQUFULEVBQWFDLFNBQWIsRUFBdUJDLE9BQXZCLEVBQWdDO0FBQ3JELGVBQU8sSUFBUDtBQUNILE9BRkQ7O0FBSUEsVUFBSUgsRUFBRSxHQUFHLFVBQVNDLEdBQVQsRUFBYUMsU0FBYixFQUF1QkMsT0FBdkIsRUFBZ0M7QUFDckNMLFlBQUksQ0FBQ1YsS0FBTCxDQUFXTyxNQUFYLEdBQW9CRyxJQUFJLENBQUNNLE9BQUwsQ0FBYSxRQUFiLEVBQXVCSCxHQUF2QixFQUEyQkMsU0FBM0IsRUFBcUNDLE9BQXJDLENBQXBCO0FBQ0gsT0FGRDs7QUFJQSxXQUFLRSxLQUFMLENBQVdQLElBQUksQ0FBQ1EsMkJBQUwsQ0FBaUMsUUFBakMsQ0FBWCxFQUFzRE4sRUFBdEQ7QUFDSDs7QUFFRCxRQUFJLEtBQUtELE9BQUwsQ0FBYSxZQUFiLENBQUosRUFBZ0M7QUFDNUIsVUFBSUMsRUFBRSxHQUFHLFVBQVNDLEdBQVQsRUFBYUMsU0FBYixFQUF1QkMsT0FBdkIsRUFBZ0M7QUFDckNMLFlBQUksQ0FBQ1YsS0FBTCxDQUFXTSxPQUFYLEdBQXFCSSxJQUFJLENBQUNNLE9BQUwsQ0FBYSxZQUFiLEVBQTJCSCxHQUEzQixFQUErQkMsU0FBL0IsRUFBeUNDLE9BQXpDLENBQXJCO0FBQ0gsT0FGRDs7QUFHQSxXQUFLRSxLQUFMLENBQVdQLElBQUksQ0FBQ1EsMkJBQUwsQ0FBaUMsWUFBakMsQ0FBWCxFQUEwRE4sRUFBMUQ7QUFDSDtBQUNKOztBQUVETyxXQUFTLEdBQUc7QUFDUixTQUFLQyxZQUFMLEdBQW9CLEVBQUMsR0FBRyxLQUFLcEI7QUFBVCxLQUFwQjtBQUNIOztBQUVEcUIsY0FBWSxHQUFHO0FBQ1gsU0FBS3JCLEtBQUwsR0FBYSxFQUFDLEdBQUcsS0FBS29CO0FBQVQsS0FBYjtBQUNIOztBQUNESixTQUFPLENBQUNNLFFBQUQsRUFBVztBQUNkLFdBQU8sS0FBSzFCLFVBQUwsQ0FBZ0IwQixRQUFoQixFQUEwQkMsT0FBMUIsSUFBcUMsS0FBSzNCLFVBQUwsQ0FBZ0IwQixRQUFoQixDQUE1QztBQUNIO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0lYLFNBQU8sQ0FBQ1csUUFBRCxFQUFXO0FBQ2QsUUFBSUUsSUFBSSxHQUFHLEtBQUs1QixVQUFMLENBQWdCMEIsUUFBaEIsQ0FBWDs7QUFDQSxRQUFHRywwRUFBVSxDQUFDRCxJQUFELENBQWIsRUFBcUI7QUFDakJFLG1GQUFhLENBQUMsS0FBSzlCLFVBQUwsQ0FBZ0JTLFlBQWpCLEVBQStCLGNBQS9CLENBQWI7QUFDQSxhQUFPLElBQVA7QUFDSCxLQUhELE1BR087QUFDSCxVQUFJc0IsS0FBSyxHQUFHQyx3RUFBUSxDQUFDSixJQUFELENBQXBCOztBQUNBLFVBQUlHLEtBQUosRUFBVztBQUNQRSxtRkFBVyxDQUFDTCxJQUFJLENBQUNNLGFBQU4sRUFBcUJSLFFBQVEsR0FBRyxnQkFBaEMsQ0FBWDtBQUNBUyxzRkFBYyxDQUFDUCxJQUFJLENBQUNELE9BQU4sRUFBZUQsUUFBUSxHQUFHLFVBQTFCLENBQWQ7QUFDSDs7QUFDRCxhQUFPSyxLQUFQO0FBQ0g7QUFDSjtBQUVEO0FBQ0o7QUFDQTs7O0FBQ0lsQixZQUFVLEdBQUcsQ0FDWjtBQUVEO0FBQ0o7QUFDQTs7O0FBQ0l1QixPQUFLLEdBQUcsQ0FDUDtBQUVEO0FBQ0o7QUFDQTtBQUNBOzs7QUFDSUMsT0FBSyxHQUFHO0FBQ0osV0FBTyxLQUFLaEMsRUFBWjtBQUNIO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7OztBQUNJaUMsUUFBTSxDQUFDSixhQUFELEVBQWdCLENBQ3JCO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0liLE9BQUssQ0FBQ2EsYUFBRCxFQUFnQmxCLEVBQWhCLEVBQW9CO0FBQ3JCLFFBQUksQ0FBQ0oseUVBQVMsQ0FBQyxLQUFLWCxlQUFOLENBQWQsRUFBc0M7QUFDbEMsV0FBS0EsZUFBTCxHQUF1QixFQUF2QjtBQUNIOztBQUNELFNBQUssSUFBSXNDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdMLGFBQWEsQ0FBQ00sTUFBbEMsRUFBMENELENBQUMsRUFBM0MsRUFBK0M7QUFDM0MsVUFBSTlCLFlBQVksR0FBR3lCLGFBQWEsQ0FBQ0ssQ0FBRCxDQUFoQzs7QUFDQSxVQUFJLENBQUMzQix5RUFBUyxDQUFDLEtBQUtYLGVBQUwsQ0FBcUJRLFlBQXJCLENBQUQsQ0FBZCxFQUFvRDtBQUNoRCxhQUFLUixlQUFMLENBQXFCUSxZQUFyQixJQUFxQyxFQUFyQztBQUNIOztBQUNELFdBQUtSLGVBQUwsQ0FBcUJRLFlBQXJCLEVBQW1DZ0MsSUFBbkMsQ0FBd0N6QixFQUF4QztBQUNIO0FBQ0o7QUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNJMEIsU0FBTyxDQUFDakMsWUFBRCxFQUFla0MsT0FBZixFQUF3QnhCLE9BQXhCLEVBQWlDO0FBQ3BDO0FBQ0EsU0FBS2hCLElBQUwsR0FBWSxFQUFaOztBQUNBLFFBQUlTLHlFQUFTLENBQUMsS0FBS1gsZUFBTixDQUFiLEVBQXFDO0FBQ2pDLFVBQUlRLFlBQVksSUFBSSxLQUFLUixlQUF6QixFQUEwQztBQUN0QyxZQUFJMkMsS0FBSyxHQUFHLEtBQUszQyxlQUFMLENBQXFCUSxZQUFyQixDQUFaOztBQUVBb0MsYUFBSyxFQUFFLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsT0FBTyxDQUFDSCxNQUE1QixFQUFvQ00sQ0FBQyxFQUFyQyxFQUF5QztBQUM1Q0MsZUFBSyxFQUFFLEtBQUssSUFBSVIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0ssS0FBSyxDQUFDSixNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUMxQ0ssaUJBQUssQ0FBQ0wsQ0FBRCxDQUFMLENBQVNJLE9BQU8sQ0FBQ0csQ0FBRCxDQUFQLENBQVczQyxJQUFwQixFQUEwQndDLE9BQU8sQ0FBQ0csQ0FBRCxDQUFQLENBQVc1QixTQUFyQyxFQUFnREMsT0FBaEQ7O0FBQ0EsZ0JBQUcsQ0FBQyxLQUFLZixLQUFMLENBQVdPLE1BQWYsRUFBdUI7QUFDbkIsb0JBQU1vQyxLQUFOO0FBQ0g7QUFDSjs7QUFDRCxjQUFHLEtBQUszQyxLQUFMLENBQVdPLE1BQWQsRUFBc0I7QUFDbEIsaUJBQUtSLElBQUwsQ0FBVXNDLElBQVYsQ0FBZSxFQUNYLEdBQUcsS0FBS3JDO0FBREcsYUFBZjtBQUdIO0FBQ0o7QUFDSjtBQUNKO0FBQ0o7QUFFRDtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0k0QyxtQkFBaUIsR0FBRztBQUNoQixRQUFHcEMseUVBQVMsQ0FBQyxLQUFLWCxlQUFOLENBQVosRUFBb0M7QUFDaEMsVUFBSWdELEdBQUcsR0FBRyxFQUFWOztBQUNBLFdBQUssSUFBSVYsQ0FBVCxJQUFjLEtBQUt0QyxlQUFuQixFQUFvQztBQUNoQ2dELFdBQUcsQ0FBQ1IsSUFBSixDQUFTRixDQUFUO0FBQ0g7O0FBQ0QsYUFBT1UsR0FBUDtBQUNILEtBTkQsTUFNTztBQUNIbkIsbUZBQWEsQ0FBQyxLQUFLOUIsVUFBTCxDQUFnQlMsWUFBakIsRUFBK0IsOEJBQS9CLENBQWI7QUFDQSxhQUFPLENBQUMsS0FBS1QsVUFBTCxDQUFnQlMsWUFBakIsQ0FBUDtBQUNIO0FBQ0o7O0FBRURhLDZCQUEyQixDQUFDZixJQUFELEVBQU87QUFDOUIsV0FBTyxLQUFLUCxVQUFMLENBQWdCTyxJQUFoQixFQUFzQjJCLGFBQXRCLElBQXdDLENBQUMsS0FBS2xDLFVBQUwsQ0FBZ0JTLFlBQWpCLENBQS9DO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7OztBQUNJeUMsTUFBSSxHQUFHLENBQ047QUFFRDtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0lDLFVBQVEsR0FBRztBQUNQLFdBQU87QUFDSEMsVUFBSSxFQUFFLEtBQUtBLElBRFI7QUFFSEMsWUFBTSxFQUFFLEtBQUtsRDtBQUZWLEtBQVA7QUFJSDtBQUVEO0FBQ0o7QUFDQTs7O0FBQ0ltRCxPQUFLLEdBQUc7QUFDSixTQUFLN0IsWUFBTDtBQUNIOztBQXROTzs7QUF5TkczQiw4REFBZiIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge1xuICAgIGFzc2VydEFycmF5LFxuICAgIGFzc2VydERlZmluZWQsXG4gICAgYXNzZXJ0RnVuY3Rpb24sXG4gICAgaGFzVmFsdWUsXG4gICAgaXNEZWZpbmVkLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgcmFuZG9tVVVJRFxufSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHMuanNcIjtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGluIGNoYXJnZSBvZiBkZWZpbmluZyBhIExheWVyIG9iamVjdC5cbiAqL1xuY2xhc3MgTGF5ZXIge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSBjb250YWlucyBhIGxpc3Qgb2YgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0aWVzLm5hbWUgLSBkZWZhdWx0IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydGllcy5kZXNjcmlwdGlvbiAtIGRlZmF1bHQgZGVzY3JpcHRpb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydGllcy5kYXRhU291cmNlSWQgLSBkZWZhdWx0IGRhdGFTb3VyY2VJZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJvcGVydGllcy52aXNpYmxlIC0gZGVmaW5lcyBpZiB0aGUgbGF5ZXIgaXMgdmlzaWJsZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICAgICAgdGhpcy5kYXRhU291cmNlc1RvRm4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLnByb3BzID0ge307XG4gICAgICAgIHRoaXMucHJvcHMuaWQgPSBcImxheWVyLVwiICsgcmFuZG9tVVVJRCgpO1xuICAgICAgICB0aGlzLnByb3BzLm5hbWUgPSAnJztcbiAgICAgICAgdGhpcy5wcm9wcy5kZXNjcmlwdGlvbiA9ICcnO1xuICAgICAgICB0aGlzLnByb3BzLmRhdGFTb3VyY2VJZCA9ICcnO1xuICAgICAgICB0aGlzLnByb3BzLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnByb3BzLmZpbHRlciA9IHRydWU7XG5cbiAgICAgICAgaWYoaXNEZWZpbmVkKHByb3BlcnRpZXMubmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMubmFtZSA9IHByb3BlcnRpZXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZihpc0RlZmluZWQocHJvcGVydGllcy5kZXNjcmlwdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGVzY3JpcHRpb24gPSBwcm9wZXJ0aWVzLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoaXNEZWZpbmVkKHByb3BlcnRpZXMuZGF0YVNvdXJjZUlkKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5kYXRhU291cmNlSWQgPSBwcm9wZXJ0aWVzLmRhdGFTb3VyY2VJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGlzRGVmaW5lZChwcm9wZXJ0aWVzLnZpc2libGUpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnZpc2libGUgPSBwcm9wZXJ0aWVzLnZpc2libGU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluaXRFdmVudHMoKTtcblxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZmlsdGVyXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmZpbHRlciA9IHRoYXQuZ2V0RnVuYygnZmlsdGVyJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdmaWx0ZXInKSxmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuZmlsdGVyID0gZnVuY3Rpb24ocmVjLHRpbWVTdGFtcCxvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmZpbHRlciA9IHRoYXQuZ2V0RnVuYygnZmlsdGVyJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2ZpbHRlcicpLGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJnZXRWaXNpYmxlXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLnZpc2libGUgPSB0aGF0LmdldEZ1bmMoJ2dldFZpc2libGUnKShyZWMsdGltZVN0YW1wLG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFZpc2libGUnKSxmbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzYXZlU3RhdGUoKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gey4uLnRoaXMucHJvcHN9O1xuICAgIH1cblxuICAgIHJlc3RvcmVTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHsuLi50aGlzLmluaXRpYWxTdGF0ZX07XG4gICAgfVxuICAgIGdldEZ1bmMoZnVuY05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1tmdW5jTmFtZV0uaGFuZGxlciB8fCB0aGlzLnByb3BlcnRpZXNbZnVuY05hbWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIGZ1bmNOYW1lXG4gICAgICogQHJldHVybiB7Kn1cbiAgICAgKi9cbiAgICBjaGVja0ZuKGZ1bmNOYW1lKSB7XG4gICAgICAgIGxldCBmdW5jID0gdGhpcy5wcm9wZXJ0aWVzW2Z1bmNOYW1lXTtcbiAgICAgICAgaWYoaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICAgICAgYXNzZXJ0RGVmaW5lZCh0aGlzLnByb3BlcnRpZXMuZGF0YVNvdXJjZUlkLCAnZGF0YVNvdXJjZUlkJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpc1NldCA9IGhhc1ZhbHVlKGZ1bmMpO1xuICAgICAgICAgICAgaWYgKGlzU2V0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJyYXkoZnVuYy5kYXRhU291cmNlSWRzLCBmdW5jTmFtZSArIFwiLmRhdGFTb3VyY2VJZHNcIik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0RnVuY3Rpb24oZnVuYy5oYW5kbGVyLCBmdW5jTmFtZSArIFwiLmhhbmRsZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNTZXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGluaXRFdmVudHMoKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGxheWVyLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxheWVyIGlkLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGxheWVyIGlkXG4gICAgICovXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgdGhlIGRhdGFzb3VyY2UgY29udGFpbmVkIGludG8gdGhlIGxpc3RcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhU291cmNlSWRzIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzXG4gICAgICovXG4gICAgc2VsZWN0KGRhdGFTb3VyY2VJZHMpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gYXNzb2NpYXRlZCB0byBhIGxpc3Qgb2YgZGF0YVNvdXJjZSBpZHNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBkYXRhU291cmNlSWRzIC0gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBhZGRcbiAgICAgKi9cbiAgICBhZGRGbihkYXRhU291cmNlSWRzLCBmbikge1xuICAgICAgICBpZiAoIWlzRGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VzVG9GbikpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZXNUb0ZuID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhU291cmNlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZGF0YVNvdXJjZUlkID0gZGF0YVNvdXJjZUlkc1tpXTtcbiAgICAgICAgICAgIGlmICghaXNEZWZpbmVkKHRoaXMuZGF0YVNvdXJjZXNUb0ZuW2RhdGFTb3VyY2VJZF0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlc1RvRm5bZGF0YVNvdXJjZUlkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlc1RvRm5bZGF0YVNvdXJjZUlkXS5wdXNoKGZuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGFTb3VyY2VJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IHJlY29yZHNcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIHNldERhdGEoZGF0YVNvdXJjZUlkLCByZWNvcmRzLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIHN0b3JlIGRhdGEgaW50byBkYXRhIHByb3BzXG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHRoaXMuZGF0YVNvdXJjZXNUb0ZuKSkge1xuICAgICAgICAgICAgaWYgKGRhdGFTb3VyY2VJZCBpbiB0aGlzLmRhdGFTb3VyY2VzVG9Gbikge1xuICAgICAgICAgICAgICAgIGxldCBmbkFyciA9IHRoaXMuZGF0YVNvdXJjZXNUb0ZuW2RhdGFTb3VyY2VJZF07XG5cbiAgICAgICAgICAgICAgICBvdXRlcjogZm9yIChsZXQgaiA9IDA7IGogPCByZWNvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyOiBmb3IgKGxldCBpID0gMDsgaSA8IGZuQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbkFycltpXShyZWNvcmRzW2pdLmRhdGEsIHJlY29yZHNbal0udGltZVN0YW1wLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLnByb3BzLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGlubmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucHJvcHMuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ1tdfSBUaGUgbGlzdCBvZiBkYXRhU291cmNlIGlkc1xuICAgICAqL1xuICAgIGdldERhdGFTb3VyY2VzSWRzKCkge1xuICAgICAgICBpZihpc0RlZmluZWQodGhpcy5kYXRhU291cmNlc1RvRm4pKSB7XG4gICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZGF0YVNvdXJjZXNUb0ZuKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXNzZXJ0RGVmaW5lZCh0aGlzLnByb3BlcnRpZXMuZGF0YVNvdXJjZUlkLCAnZGF0YVNvdXJjZUlkIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnByb3BlcnRpZXMuZGF0YVNvdXJjZUlkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eShuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXNbbmFtZV0uZGF0YVNvdXJjZUlkcyB8fCAgW3RoaXMucHJvcGVydGllcy5kYXRhU291cmNlSWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRzIHRoZSBsYXllci5cbiAgICAgKi9cbiAgICBpbml0KCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb25lIGN1cnJlbnQgbGF5ZXIgcHJvcGVydGllc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ2V0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB2YWx1ZXM6IHRoaXMuZGF0YVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRvIGRlZmF1bHQgTGF5ZXIgdmFsdWVzXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZVN0YXRlKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')}}]);