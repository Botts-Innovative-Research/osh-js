(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return hasValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return hex2rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return hex2rgba; });\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return capitalizeFirstLetter; });\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return merge; });\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGB\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\nfunction hex2rgba(hex) {\n  return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16), parseInt(hex.slice(7, 9), 16) / 255];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Capitalize the first letter of a given string\n * @param {String} str - the input string\n * @returns {String} the result\n */\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91dGlscy9VdGlscy5qcz9mODdlIl0sIm5hbWVzIjpbIk1BWF9MT05HIiwiTWF0aCIsInBvdyIsImlzRGVmaW5lZCIsInYiLCJoYXNWYWx1ZSIsImhleDJyZ2IiLCJoZXgiLCJyIiwiZyIsImIiLCJtYXRjaCIsIm1hcCIsIngiLCJwYXJzZUludCIsImhleDJyZ2JhIiwic2xpY2UiLCJoYXNUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiaGFzVmFsIiwiaXNPYmplY3QiLCJsZXROYW1lIiwiaXNBcnJheSIsIkFycmF5IiwiaXNGdW5jdGlvbiIsImFzc2VydERlZmluZWQiLCJhc3NlcnRUcnVlIiwiYXNzZXJ0VHlwZSIsImFzc2VydEJvb2xlYW4iLCJhc3NlcnRTdHJpbmciLCJhc3NlcnROdW1iZXIiLCJhc3NlcnRQb3NpdGl2ZSIsImFzc2VydE9iamVjdCIsImFzc2VydEFycmF5IiwiYXNzZXJ0RnVuY3Rpb24iLCJhc3NlcnRIYXNWYWx1ZSIsInJhbmRvbVVVSUQiLCJyZXBsYWNlIiwiYyIsInJhbmRvbSIsInRvU3RyaW5nIiwic3RhbXBVVUlEIiwib2JqIiwiX29zaF9pZCIsIlBhcnNlQnl0ZXMiLCJidWZmZXIiLCJvZmZzZXQiLCJ0eXBlIiwidmlldyIsIkRhdGFWaWV3IiwidHlwZU1hcCIsImRvdWJsZSIsInZhbCIsImdldEZsb2F0NjQiLCJieXRlcyIsImZsb2F0NjQiLCJmbG9hdDMyIiwiZ2V0RmxvYXQzMiIsInNpZ25lZEJ5dGUiLCJnZXRJbnQ4Iiwic2lnbmVkSW50IiwiZ2V0SW50MzIiLCJzaWduZWRTaG9ydCIsImdldEludDE2IiwidW5zaWduZWRCeXRlIiwiZ2V0VWludDgiLCJ1bnNpZ25lZEludCIsImdldFVpbnQzMiIsInVuc2lnbmVkU2hvcnQiLCJnZXRVaW50MTYiLCJSZWFkRGF0YSIsInN0cnVjdCIsImRhdGEiLCJvZmZzZXRCeXRlcyIsImkiLCJmaWVsZHMiLCJsZW5ndGgiLCJjdXJyRmllbGRTdHJ1Y3QiLCJyZXQiLCJjb3VudCIsImlzTmFOIiwiaWQiLCJmaWVsZE5hbWUiLCJpZDJGaWVsZE1hcCIsImZpbmRGaWVsZEJ5TmFtZSIsImoiLCJmaWVsZCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInB1c2giLCJHZXRSZXN1bHRPYmplY3QiLCJyZXN1bHRTdHJ1Y3R1cmUiLCJyZXN1bHQiLCJuYW1lIiwiaXRlbSIsImsiLCJpc09wZXJhIiwid2luZG93Iiwib3ByIiwiYWRkb25zIiwib3BlcmEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiaXNGaXJlZm94IiwiSW5zdGFsbFRyaWdnZXIiLCJpc1NhZmFyaSIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJIVE1MRWxlbWVudCIsImlzQ2hyb21lIiwiY2hyb21lIiwid2Vic3RvcmUiLCJpc0JsaW5rIiwiQ1NTIiwiaXNBcnJheUludGVyc2VjdCIsImEiLCJmaWx0ZXIiLCJlbGVtZW50IiwiaXNFbGVtZW50IiwibyIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc1dlYldvcmtlciIsIldvcmtlciIsInRha2VTY3JlZW5TaG90IiwiZGl2IiwicmVtb3ZlQ3NzIiwiY3NzIiwiZGl2Q3NzIiwiY2xhc3NOYW1lIiwiYWRkQ3NzIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlTGFzdENoYXJJZkV4aXN0IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsImNhcGl0YWxpemVGaXJzdExldHRlciIsInN0ciIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwicm91bmRIYWxmIiwibnVtIiwicm91bmQiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0IiwiaW1tZWRpYXRlIiwidGltZW91dCIsImFyZ3MiLCJjb250ZXh0IiwidGltZXN0YW1wIiwibGF0ZXIiLCJub3ciLCJEYXRlIiwiZ2V0VGltZSIsImxhc3QiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjYWxsTm93IiwidGhyb3R0bGUiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJjdHgiLCJwcmV2aW91cyIsInJlbWFpbmluZyIsImNsZWFyVGltZW91dCIsIm1lcmdlIiwidGFyZ2V0Iiwic291cmNlIiwia2V5Iiwia2V5cyIsImFzc2lnbiIsInJnYmFUb0FycmF5Iiwic3RhcnRJZHhWYWx1ZSIsImVuZElkeFZhbHVlIiwidmFsdWVzIiwic3Vic3RyIiwic3BsaXQiLCJOdW1iZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ08sTUFBTUEsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBWixJQUFrQixDQUFuQztBQUVQO0FBQ0E7QUFDQTs7QUFDTyxTQUFTQyxTQUFULENBQW1CQyxDQUFuQixFQUFzQjtFQUN6QixPQUFPLE9BQVFBLENBQVIsS0FBZSxXQUFmLElBQThCQSxDQUFDLEtBQUssSUFBM0M7QUFDSDtBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLFFBQVQsQ0FBa0JELENBQWxCLEVBQXFCO0VBQ3hCLE9BQU9ELFNBQVMsQ0FBQ0MsQ0FBRCxDQUFULElBQWdCQSxDQUFDLEtBQUssSUFBN0I7QUFDSDtBQUVEO0FBQ0E7QUFDQTs7QUFDTyxTQUFTRSxPQUFULENBQWlCQyxHQUFqQixFQUFxQjtFQUN4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QUFBO0FBRU0sU0FBUzhFLEtBQVQsQ0FBZ0JDLE1BQWhCLEVBQXdCQyxNQUF4QixFQUFnQztFQUNuQztFQUNBLEtBQUssTUFBTUMsR0FBWCxJQUFrQmxFLE1BQU0sQ0FBQ21FLElBQVAsQ0FBWUYsTUFBWixDQUFsQixFQUF1QztJQUNuQyxJQUFJQSxNQUFNLENBQUNDLEdBQUQsQ0FBTixZQUF1QmxFLE1BQXZCLElBQWlDa0UsR0FBRyxJQUFJRixNQUE1QyxFQUFvRGhFLE1BQU0sQ0FBQ29FLE1BQVAsQ0FBY0gsTUFBTSxDQUFDQyxHQUFELENBQXBCLEVBQTJCSCxLQUFLLENBQUNDLE1BQU0sQ0FBQ0UsR0FBRCxDQUFQLEVBQWNELE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQixDQUFoQztFQUN2RCxDQUprQyxDQU1uQzs7O0VBQ0FsRSxNQUFNLENBQUNvRSxNQUFQLENBQWNKLE1BQU0sSUFBSSxFQUF4QixFQUE0QkMsTUFBNUI7RUFDQSxPQUFPRCxNQUFQO0FBQ0g7QUFBQTtBQUVNLFNBQVNLLFdBQVQsQ0FBcUJwQyxHQUFyQixFQUEwQjtFQUM3QixJQUFJcUMsYUFBYSxHQUFHckMsR0FBRyxDQUFDckMsT0FBSixDQUFZLEdBQVosSUFBbUIsQ0FBdkM7RUFDQSxJQUFJMkUsV0FBVyxHQUFHdEMsR0FBRyxDQUFDckMsT0FBSixDQUFZLEdBQVosQ0FBbEI7RUFDQSxJQUFJNEUsTUFBTSxHQUFHdkMsR0FBRyxDQUFDd0MsTUFBSixDQUFXSCxhQUFYLEVBQTBCQyxXQUFXLEdBQUNELGFBQXRDLENBQWI7RUFDQSxPQUFPRSxNQUFNLENBQUNFLEtBQVAsQ0FBYSxHQUFiLEVBQWtCMUssR0FBbEIsQ0FBc0IySyxNQUF0QixDQUFQO0FBQ0giLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqICogQG1vZHVsZSBVdGlscyAqL1xuXG4vKiogTWF4aW11bSB2YWx1ZSBvZiBhIGxvbmcgKi9cbmV4cG9ydCBjb25zdCBNQVhfTE9ORyA9IE1hdGgucG93KDIsIDUzKSArIDE7XG5cbi8qKlxuICogR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mICh2KSAhPT0gJ3VuZGVmaW5lZCcgJiYgdiAhPT0gbnVsbDtcbn1cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaGFzIGEgdmFsdWUsXG4gdGhhdCBpcyBpdCBpcyBkZWZpbmVkIGFuZCBub24gbnVsbFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodikge1xuICAgIHJldHVybiBpc0RlZmluZWQodikgJiYgdiAhPT0gbnVsbDtcbn1cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdHJhbnNmb3JtIGhleCBjb2xvciBpbnRvIFJHQlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4MnJnYihoZXgpe1xuICAgIGNvbnN0IFtyLCBnLCBiXSA9IGhleC5tYXRjaCgvXFx3XFx3L2cpLm1hcCh4ID0+IHBhcnNlSW50KHgsIDE2KSk7XG4gICAgcmV0dXJuIFtyLCBnLCBiXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhleDJyZ2JhKGhleCl7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgcGFyc2VJbnQoaGV4LnNsaWNlKDEsIDMpLCAxNiksXG4gICAgICAgIHBhcnNlSW50KGhleC5zbGljZSgzLCA1KSwgMTYpLFxuICAgICAgICBwYXJzZUludChoZXguc2xpY2UoNSwgNyksIDE2KSxcbiAgICAgICAgcGFyc2VJbnQoaGV4LnNsaWNlKDcsIDkpLCAxNikgLyAyNTVcbiAgICBdO1xufVxuXG4vKipcbiBHbG9iYWwgaGVscGVyIG1ldGhvZCB0byB0ZXN0IGlmIGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBvZiBhIHBhcnRpY3VsYXIgdHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzVHlwZSh2LCBleHBlY3RlZFR5cGUpIHtcbiAgICBsZXQgaGFzVmFsID0gaGFzVmFsdWUodik7XG4gICAgcmV0dXJuIGhhc1ZhbCAmJiB0eXBlb2YgKHYpID09PSBleHBlY3RlZFR5cGU7XG59XG5cbi8qKlxuIEdsb2JhbCBoZWxwZXIgbWV0aG9kIHRvIHRlc3QgaWYgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGFuIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QodiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBoYXNUeXBlKHYsICdvYmplY3QnLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkodikge1xuICAgIHJldHVybiBpc0RlZmluZWQodikgJiYgQXJyYXkuaXNBcnJheSh2KTtcbn1cblxuLyoqXG4gR2xvYmFsIGhlbHBlciBtZXRob2QgdG8gdGVzdCBpZiBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYSBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2LCBsZXROYW1lKSB7XG4gICAgcmV0dXJuIGhhc1R5cGUodiwgJ2Z1bmN0aW9uJywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBkZWZpbmVkXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZCh2LCBsZXROYW1lID0gJ2xldGlhYmxlJykge1xuICAgIGlmICghaXNEZWZpbmVkKHYpKSB7XG4gICAgICAgIHRocm93IGxldE5hbWUgKyBcIiBtdXN0IGJlIGRlZmluZWRcIjtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHYsIGxldE5hbWUgPSAnbGV0aWFibGUnKSB7XG4gICAgaWYgKCFpc0RlZmluZWQodikgfHwgIXYpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZCBhbmQgbm9uLW51bGxcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUeXBlKHYsIGV4cGVjdGVkVHlwZSwgbGV0TmFtZSA9ICdsZXRpYWJsZScpIHtcbiAgICBhc3NlcnREZWZpbmVkKHYsIGxldE5hbWUpO1xuICAgIGlmICh0eXBlb2YgKHYpICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3QgYmUgb2YgdHlwZSBcIiArIGV4cGVjdGVkVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIHN0cmluZ1xuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEJvb2xlYW4odiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBhc3NlcnRUeXBlKHYsICdib29sZWFuJywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhIHN0cmluZ1xuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFN0cmluZyh2LCBsZXROYW1lKSB7XG4gICAgcmV0dXJuIGFzc2VydFR5cGUodiwgJ3N0cmluZycsIGxldE5hbWUpO1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYSBudW1iZXJcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodiwgbGV0TmFtZSkge1xuICAgIHJldHVybiBhc3NlcnRUeXBlKHYsICdudW1iZXInLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGEgbnVtYmVyXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UG9zaXRpdmUodiwgbGV0TmFtZSkge1xuICAgIGFzc2VydE51bWJlcih2LCBsZXROYW1lKTtcbiAgICBpZiAodiA8PSAwKSB7XG4gICAgICAgIHRocm93IGxldE5hbWUgKyBcIiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyXCI7XG4gICAgfVxufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYW4gb2JqZWN0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0T2JqZWN0KHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gYXNzZXJ0VHlwZSh2LCAnb2JqZWN0JywgbGV0TmFtZSk7XG59XG5cbi8qKlxuIEFzc2VydCB0aGF0IGEgbGV0aWFibGUgb3Igb2JqZWN0IGF0dHJpYnV0ZSBpcyBhbiBvYmplY3RcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBcnJheSh2LCBsZXROYW1lID0gJ2xldGlhYmxlJykge1xuICAgIGFzc2VydERlZmluZWQodiwgbGV0TmFtZSk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHRocm93IGxldE5hbWUgKyBcIiBtdXN0IGJlIGFuIGFycmF5XCI7XG4gICAgfVxuICAgIHJldHVybiB2O1xufVxuXG4vKipcbiBBc3NlcnQgdGhhdCBhIGxldGlhYmxlIG9yIG9iamVjdCBhdHRyaWJ1dGUgaXMgYSBmdW5jdGlvblxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZ1bmN0aW9uKHYsIGxldE5hbWUpIHtcbiAgICByZXR1cm4gYXNzZXJ0VHlwZSh2LCAnZnVuY3Rpb24nLCBsZXROYW1lKTtcbn1cblxuLyoqXG4gQXNzZXJ0IHRoYXQgYSBsZXRpYWJsZSBvciBvYmplY3QgYXR0cmlidXRlIGlzIGRlZmluZWQgYW5kIG5vbi1udWxsXG4gKiovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SGFzVmFsdWUodiwgbGV0TmFtZSA9ICdsZXRpYWJsZScpIHtcbiAgICBhc3NlcnREZWZpbmVkKHYsIGxldE5hbWUpO1xuICAgIGlmICghaGFzVmFsdWUodikpIHtcbiAgICAgICAgdGhyb3cgbGV0TmFtZSArIFwiIG11c3Qgbm90IGJlIG51bGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVVVSUQoKSB7XG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LXh4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gc3RhbXBzL2VtYmVkcyBhIFVVSUQgaW50byBhbiBvYmplY3QgYW5kIHJldHVybnMgdGhlIFVVSUQgZ2VuZXJhdGVkIGZvciBpdFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhbXBVVUlEKG9iaikge1xuICAgIG9iai5fb3NoX2lkID0gb2JqLl9vc2hfaWQgfHwgcmFuZG9tVVVJRCgpO1xuICAgIHJldHVybiBvYmouX29zaF9pZDtcbn1cblxuLy9idWZmZXIgaXMgYW4gQXJyYXlCdWZmZXIgb2JqZWN0LCB0aGUgb2Zmc2V0IGlmIHNwZWNpZmllZCBpbiBieXRlcywgYW5kIHRoZSB0eXBlIGlzIGEgc3RyaW5nXG4vL2NvcnJlc3BvbmRpbmcgdG8gYW4gT0dDIGRhdGEgdHlwZS5cbi8vU2VlIGh0dHA6Ly9kZWYuc2VlZ3JpZC5jc2lyby5hdS9zaXNzdm9jL29nYy1kZWYvcmVzb3VyY2U/dXJpPWh0dHA6Ly93d3cub3Blbmdpcy5uZXQvZGVmL2RhdGFUeXBlL09HQy8wL1xuLyoqXG4gKlxuICogQHBhcmFtIGJ1ZmZlclxuICogQHBhcmFtIG9mZnNldFxuICogQHBhcmFtIHR5cGVcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQYXJzZUJ5dGVzKGJ1ZmZlciwgb2Zmc2V0LCB0eXBlKSB7XG4gICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcblxuICAgIC8vTm90ZTogVGhlcmUgZXhpc3QgdHlwZXMgbm90IGxpc3RlZCBpbiB0aGUgbWFwIGJlbG93IHRoYXQgaGF2ZSBPR0MgZGVmaW5pdGlvbnMsIGJ1dCBubyBhcHByb3ByaWF0ZVxuICAgIC8vbWV0aG9kcyBvciBjb3JyZXNwb25kaW5nIHR5cGVzIGF2YWlsYWJsZSBmb3IgcGFyc2luZyBpbiBqYXZhc2NyaXB0LiBUaGV5IGFyZSBmbG9hdDEyOCwgZmxvYXQxNiwgc2lnbmVkTG9uZyxcbiAgICAvL2FuZCB1bnNpZ25lZExvbmdcbiAgICBsZXQgdHlwZU1hcCA9IHtcbiAgICAgICAgZG91YmxlOiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRGbG9hdDY0KG9mZnNldCksIGJ5dGVzOiA4fTtcbiAgICAgICAgfSxcbiAgICAgICAgZmxvYXQ2NDogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0RmxvYXQ2NChvZmZzZXQpLCBieXRlczogOH07XG4gICAgICAgIH0sXG4gICAgICAgIGZsb2F0MzI6IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsOiB2aWV3LmdldEZsb2F0MzIob2Zmc2V0KSwgYnl0ZXM6IDR9O1xuICAgICAgICB9LFxuICAgICAgICBzaWduZWRCeXRlOiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRJbnQ4KG9mZnNldCksIGJ5dGVzOiAxfTtcbiAgICAgICAgfSxcbiAgICAgICAgc2lnbmVkSW50OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRJbnQzMihvZmZzZXQpLCBieXRlczogNH07XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25lZFNob3J0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4ge3ZhbDogdmlldy5nZXRJbnQxNihvZmZzZXQpLCBieXRlczogMn07XG4gICAgICAgIH0sXG4gICAgICAgIHVuc2lnbmVkQnl0ZTogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0VWludDgob2Zmc2V0KSwgYnl0ZXM6IDF9O1xuICAgICAgICB9LFxuICAgICAgICB1bnNpZ25lZEludDogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0VWludDMyKG9mZnNldCksIGJ5dGVzOiA0fTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zaWduZWRTaG9ydDogZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHt2YWw6IHZpZXcuZ2V0VWludDE2KG9mZnNldCksIGJ5dGVzOiAyfTtcbiAgICAgICAgfSxcbiAgICAgICAgLy9UT0RPOiBzdHJpbmctdXRmLTg6XG4gICAgfTtcbiAgICByZXR1cm4gdHlwZU1hcFt0eXBlXShvZmZzZXQpO1xufVxuXG4vL1RoaXMgZnVuY3Rpb24gcmVjdXJzaXZsZXkgaXRlcmF0ZXMgb3ZlciB0aGUgcmVzdWx0U3RydWN0dXJlIHRvIGZpbGwgaW5cbi8vdmFsdWVzIHJlYWQgZnJvbSBkYXRhIHdoaWNoIHNob3VsZCBiZSBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBwYXlsb2FkIGZyb20gYSB3ZWJzb2NrZXRcbi8qKlxuICpcbiAqIEBwYXJhbSBzdHJ1Y3RcbiAqIEBwYXJhbSBkYXRhXG4gKiBAcGFyYW0gb2Zmc2V0Qnl0ZXNcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZWFkRGF0YShzdHJ1Y3QsIGRhdGEsIG9mZnNldEJ5dGVzKSB7XG4gICAgbGV0IG9mZnNldCA9IG9mZnNldEJ5dGVzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RydWN0LmZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgY3VyckZpZWxkU3RydWN0ID0gc3RydWN0LmZpZWxkc1tpXTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChjdXJyRmllbGRTdHJ1Y3QudHlwZSkgJiYgY3VyckZpZWxkU3RydWN0LnR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCByZXQgPSBQYXJzZUJ5dGVzKGRhdGEsIG9mZnNldCwgY3VyckZpZWxkU3RydWN0LnR5cGUpO1xuICAgICAgICAgICAgY3VyckZpZWxkU3RydWN0LnZhbCA9IHJldC52YWw7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcmV0LmJ5dGVzO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChjdXJyRmllbGRTdHJ1Y3QuY291bnQpICYmIGN1cnJGaWVsZFN0cnVjdC5jb3VudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy9jaGVjayBpZiBjb3VudCBpcyBhIHJlZmVyZW5jZSB0byBhbm90aGVyIGxldGlhYmxlXG4gICAgICAgICAgICBpZiAoaXNOYU4oY3VyckZpZWxkU3RydWN0LmNvdW50KSkge1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGN1cnJGaWVsZFN0cnVjdC5jb3VudDtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGROYW1lID0gc3RydWN0LmlkMkZpZWxkTWFwW2lkXTtcbiAgICAgICAgICAgICAgICBjdXJyRmllbGRTdHJ1Y3QuY291bnQgPSBzdHJ1Y3QuZmluZEZpZWxkQnlOYW1lKGZpZWxkTmFtZSkudmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjdXJyRmllbGRTdHJ1Y3QuY291bnQ7IGMrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY3VyckZpZWxkU3RydWN0LmZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmllbGQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGN1cnJGaWVsZFN0cnVjdC5maWVsZHNbal0pKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gUmVhZERhdGEoZmllbGQsIGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJGaWVsZFN0cnVjdC52YWwucHVzaChmaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSByZXN1bHRTdHJ1Y3R1cmVcbiAqIEByZXR1cm4ge3t9fVxuICovXG5leHBvcnQgZnVuY3Rpb24gR2V0UmVzdWx0T2JqZWN0KHJlc3VsdFN0cnVjdHVyZSkge1xuICAgIC8vVE9ETzogaGFuZGxlIGNhc2VzIGZvciBuZXN0ZWQgYXJyYXlzIC8gbWF0cml4IGRhdGEgdHlwZXNcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQocmVzdWx0U3RydWN0dXJlLmZpZWxkc1tpXS5jb3VudCkpIHtcbiAgICAgICAgICAgIHJlc3VsdFtyZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLm5hbWVdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHJlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0uY291bnQ7IGMrKykge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtID0ge307XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbFtjXS5maWVsZHMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtyZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbFtjXS5maWVsZHNba10ubmFtZV0gPSByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbFtjXS5maWVsZHNba10udmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0U3RydWN0dXJlLmZpZWxkc1tpXS5uYW1lXS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdFN0cnVjdHVyZS5maWVsZHNbaV0ubmFtZV0gPSByZXN1bHRTdHJ1Y3R1cmUuZmllbGRzW2ldLnZhbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPcGVyYSgpIHtcbiAgICByZXR1cm4gKCEhd2luZG93Lm9wciAmJiAhIW9wci5hZGRvbnMpIHx8ICEhd2luZG93Lm9wZXJhIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIE9QUi8nKSA+PSAwO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNGaXJlZm94KCkge1xuICAgIHJldHVybiB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cuSFRNTEVsZW1lbnQpLmluZGV4T2YoJ0NvbnN0cnVjdG9yJykgPiAwO1xufVxuXG4vKipcbiAqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDaHJvbWUoKSB7XG4gICAgcmV0dXJuICEhd2luZG93LmNocm9tZSAmJiAhIXdpbmRvdy5jaHJvbWUud2Vic3RvcmU7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4geyp8Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmxpbmsoKSB7XG4gICAgcmV0dXJuIChpc0Nocm9tZSB8fCBpc09wZXJhKSAmJiAhIXdpbmRvdy5DU1M7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBhXG4gKiBAcGFyYW0gYlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlJbnRlcnNlY3QoYSwgYikge1xuICAgIHJldHVybiBhLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gYi5pbmRleE9mKGVsZW1lbnQpID4gLTE7XG4gICAgfSkubGVuZ3RoID4gMDtcbn1cblxuXG4vKipcbiAqXG4gKiBAcGFyYW0gb1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudChvKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gXCJvYmplY3RcIiA/IG8gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA6IC8vRE9NMlxuICAgICAgICBvICYmIHR5cGVvZiBvID09PSBcIm9iamVjdFwiICYmIG8gIT09IG51bGwgJiYgby5ub2RlVHlwZSA9PT0gMSAmJiB0eXBlb2Ygby5ub2RlTmFtZSA9PT0gXCJzdHJpbmdcIlxuICAgICk7XG59XG5cbi8qKlxuICpcbiAqIEByZXR1cm4geyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1dlYldvcmtlcigpIHtcbiAgICByZXR1cm4gaXNEZWZpbmVkKFdvcmtlcik7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBkaXZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VTY3JlZW5TaG90KGRpdikge1xufVxuXG4vKipcbiAqIFJlbW92ZSBhIGNzcyBjbGFzcyBmcm9tIGEgdGhlIGRpdiBnaXZlbiBhcyBhcmd1bWVudC5cbiAqIEBwYXJhbSBkaXYgdGhlIGRpdiB0byByZW1vdmUgdGhlIGNsYXNzIGZyb21cbiAqIEBwYXJhbSBjc3MgdGhlIGNzcyBjbGFzcyB0byByZW1vdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNzcyhkaXYsIGNzcykge1xuICAgIGxldCBkaXZDc3MgPSBkaXYuY2xhc3NOYW1lO1xuICAgIGNzcyA9IGRpdkNzcy5yZXBsYWNlKGNzcywgXCJcIik7XG4gICAgZGl2LmNsYXNzTmFtZSA9IGNzcztcbn1cblxuXG4vKipcbiAqIEFkZCBhIGNzcyBjbGFzcyB0byBhIHRoZSBkaXYgZ2l2ZW4gYXMgYXJndW1lbnQuXG4gKiBAcGFyYW0gZGl2IHRoZSBkaXYgdG8gYWRkIHRoZSBjbGFzcyB0b1xuICogQHBhcmFtIGNzcyB0aGUgY3NzIGNsYXNzIHRvIGFkZFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ3NzKGRpdiwgY3NzKSB7XG4gICAgZGl2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGRpdi5jbGFzc05hbWUgKyBcIiBcIiArIGNzcyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgbGFzdCBjaGFyYWN0ZXIgb2YgYSB7c3RyaW5nfSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgaW5wdXQge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhbHVlIHdpdGhvdXQgdGhlIGxhc3QgY2hhcmFjdGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVMYXN0Q2hhcklmRXhpc3QodmFsdWUpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh1bmRlZmluZWQpIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlLmxlbmd0aCA9PT0gMCB8fCAhdmFsdWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmxlbmd0aCAtIDEpO1xufVxuXG4vKipcbiAqIENhcGl0YWxpemUgdGhlIGZpcnN0IGxldHRlciBvZiBhIGdpdmVuIHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHN0ciAtIHRoZSBpbnB1dCBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSByZXN1bHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uICBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufVxuXG4vKipcbiAqIFJvdW5kIG9mZiBudW1iZXIgdG8gbmVhcmVzdCAwLjVcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gLSBUaGUgbnVtYmVyIHRvIHJvdW5kIG9mZlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgcm91bmRlZCBudW1iZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kSGFsZihudW0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0qMikvMjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCxcbiAqIHdpbGwgbm90IGJlIGV4ZWN1dGVkLiBUaGUgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIHdoZW5cbiAqIGl0IHdpbGwgc3RvcCBiZWluZyBjYWxsZWQgZm9yIG1vcmUgdGhhbiBOIG1pbGxpc2Vjb25kcy5cbiAqIElmIHRoZSBgaW1tZWRpYXRlYCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgdGhlbiB0aGUgZnVuY3Rpb25cbiAqIHdpbGwgYmUgZXhlY3V0ZWQgYXQgdGhlIGZpcnN0IGNhbGwgaW5zdGVhZCBvZiB0aGUgbGFzdC5cbiAqIFBhcmFtZXRlcnMgOlxuICogLSBmdW5jOiB0aGUgZnVuY3Rpb24gdG8gYGRlYm91bmNlcmAuXG4gKiAtIHdhaXQ6IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIChOKSB0byB3YWl0IGJlZm9yZVxuICogY2FsbCBmdW5jKClcbiAqIC0gaW1tZWRpYXRlIChvcHRpb25hbCk6IENhbGwgZnVuYygpIGF0IHRoZSBmaXJzdCBpbnZvY2F0aW9uXG4gKiBpbnN0ZWFkIG9mIHRoZSBsYXN0IG9uZSAoRGVmYXVsdCBmYWxzZSlcbiAqIC0gY29udGV4dCAob3B0aW9uYWwpOiB0aGUgY29udGV4dCBpbiB3aGljaCB0byBjYWxsIGZ1bmMoKVxuICogKHRoaXMgYnkgZGVmYXVsdClcbiAqL1xuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4vLyBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4vLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbi8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgdmFyIHRpbWVvdXQsIGFyZ3MsIGNvbnRleHQsIHRpbWVzdGFtcCwgcmVzdWx0O1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgIGxhc3QgPSBub3cgLSB0aW1lc3RhbXA7XG5cbiAgICAgICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICAgICAgaWYgKCF0aW1lb3V0KSB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgIGlmIChjYWxsTm93KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIGxlYWRpbmcsIHRyYWlsaW5nLCBjb250ZXh0KSB7XG4gICAgdmFyIGN0eCwgYXJncywgcmVzdWx0O1xuICAgIHZhciB0aW1lb3V0ID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXMgPSAwO1xuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBwcmV2aW91cyA9IG5ldyBEYXRlO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjdHgsIGFyZ3MpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbm93ID0gbmV3IERhdGU7XG4gICAgICAgIGlmICghcHJldmlvdXMgJiYgIWxlYWRpbmcpIHByZXZpb3VzID0gbm93O1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICAgIGN0eCA9IGNvbnRleHQgfHwgdGhpcztcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjdHgsIGFyZ3MpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIHRyYWlsaW5nKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UgKHRhcmdldCwgc291cmNlKSB7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGBzb3VyY2VgIHByb3BlcnRpZXMgYW5kIGlmIGFuIGBPYmplY3RgIHNldCBwcm9wZXJ0eSB0byBtZXJnZSBvZiBgdGFyZ2V0YCBhbmQgYHNvdXJjZWAgcHJvcGVydGllc1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNvdXJjZSkpIHtcbiAgICAgICAgaWYgKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgT2JqZWN0ICYmIGtleSBpbiB0YXJnZXQpIE9iamVjdC5hc3NpZ24oc291cmNlW2tleV0sIG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSkpXG4gICAgfVxuXG4gICAgLy8gSm9pbiBgdGFyZ2V0YCBhbmQgbW9kaWZpZWQgYHNvdXJjZWBcbiAgICBPYmplY3QuYXNzaWduKHRhcmdldCB8fCB7fSwgc291cmNlKVxuICAgIHJldHVybiB0YXJnZXRcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JhVG9BcnJheShzdHIpIHtcbiAgICBsZXQgc3RhcnRJZHhWYWx1ZSA9IHN0ci5pbmRleE9mKCcoJykgKyAxO1xuICAgIGxldCBlbmRJZHhWYWx1ZSA9IHN0ci5pbmRleE9mKCcpJyk7XG4gICAgbGV0IHZhbHVlcyA9IHN0ci5zdWJzdHIoc3RhcnRJZHhWYWx1ZSwgZW5kSWR4VmFsdWUtc3RhcnRJZHhWYWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlcy5zcGxpdCgnLCcpLm1hcChOdW1iZXIpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')},10:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(181);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);\n/* harmony import */ var _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);\n/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\nclass View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {boolean} [properties.destroyAfterMutation=true]  - call view destroy() function after detecting div root Mutation\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = [];\n    this.broadcastChannels = []; //this.divId = divId;\n\n    this.id = "view-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "q"])();\n    this.css = "";\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.container) ? properties.container : document.body;\n    let destroyAfterMutation = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.destroyAfterMutation) ? properties.destroyAfterMutation : true;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties)) {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n\n    if (destroyAfterMutation) {\n      const rootObserver = new MutationObserver(function (mutations) {\n        // try to get the div element by the id to check if it is still owned by the document object\n        if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(document.getElementById(that.divId))) {\n          this.disconnect();\n          that.destroy();\n        }\n      });\n      rootObserver.observe(document.body, {\n        childList: true\n      });\n    }\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  async setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {\n    this.removeAllFromLayers();\n\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n      console.log(`closing BC..`);\n    }\n\n    this.broadcastChannels = []; // remove DOM element\n    // this.elementDiv?.remove(); // does not compile with older webpack version ..\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.elementDiv)) {\n      this.elementDiv.remove();\n    }\n  }\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_DATA_TOPIC */ "a"] + dataSourceId);\n\n      broadcastChannel.onmessage = async event => {\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].STATUS && event.data.status === _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__[/* Status */ "a"].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].DATA) {\n          const that = this; // transform the data\n\n          await layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          await that.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_TIME_TOPIC */ "b"] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n\n      this.broadcastChannels.push(broadcastChannel);\n      this.broadcastChannels.push(timeBroadcastChannel);\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n')},11:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   * @param {Number} properties.timestamp - defines the timestamp of the data\n   * @param {Function} properties.getTimestamp - function which defines the timestamp of the data\n   * @param {Function} properties.onLeftClick - trigger onLeftClick marker event\n   * @param {Function} properties.onRightClick - trigger onRightClick marker event\n   * @param {Function} properties.onHover - trigger onHover marker event\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.init(properties);\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init(properties = this.properties) {\n    this.data = [];\n    this.propsById = {};\n    this.dataSourcesToFn = undefined;\n    this.props = {\n      id: "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "q"])(),\n      filter: true,\n      name: \'\',\n      description: \'\',\n      visible: true,\n      timestamp: true\n    };\n    this.dataSourceIds = undefined;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.dataSourceId)) {\n      this.dataSourceIds = [properties.dataSourceId];\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.dataSourceIds)) {\n      this.dataSourceIds = properties.dataSourceIds;\n    }\n\n    if (!this.dataSourceIds) {\n      this.dataSourceIds = [];\n    } // assertDefined(this.dataSourceIds, \'[Layer] dataSourceIds[] or dataSourceId\');\n\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.timestamp)) {\n      this.props.timestamp = properties.timestamp;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.initEvents();\n\n    if (this.checkFn("filter")) {\n      let fn = (rec, timestamp, options) => {\n        this.props.filter = this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timestamp, options) {\n        return true;\n      };\n\n      let fn = async (rec, timestamp, options) => {\n        this.props.filter = await this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'visible\', await this.getFunc(\'getVisible\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n\n    if (this.checkFn("getTimestamp")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'timestamp\', await this.getFunc(\'getTimestamp\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getTimestamp\'), fn);\n    }\n\n    if (this.checkFn("getName")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'name\', await this.getFunc(\'getName\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getName\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'description\', await this.getFunc(\'getDescription\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "o"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceIds\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.props.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   * @param {Boolean} [first=false] - set at the first position\n   */\n\n\n  addFn(dataSourceIds, fn, first = false) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      if (first) {\n        this.dataSourcesToFn[dataSourceId].unshift(fn);\n      } else {\n        this.dataSourcesToFn[dataSourceId].push(fn);\n      }\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  async setData(dataSourceId, records, options = {}) {\n    // store data into data props\n    this.data = [];\n    options.dataSourceId = dataSourceId;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n        this.props.filter = true;\n\n        for (let j = 0; j < records.length; j++) {\n          for (let i = 0; i < fnArr.length; i++) {\n            await fnArr[i](records[j].data, records[j].data.timestamp, options);\n\n            if (!this.props.filter) {\n              break;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props,\n              ...this.propsById[this.getId()]\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceId must be defined\');\n      return this.dataSourceIds;\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || this.dataSourceIds;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.init(this.properties);\n  }\n\n  updateProperty(propertyName, value) {\n    this.propsById[this.getId()][propertyName] = value;\n  }\n\n  checkExistingProps(id) {\n    return id in this.propsById;\n  }\n\n  setProps(id, props) {\n    this.propsById[id] = props;\n  }\n\n  setId(id, defaultProps) {\n    this.props.id = id;\n\n    if (!this.checkExistingProps(id)) {\n      this.setProps(id, defaultProps());\n    }\n  }\n\n  definedId(idName, props) {\n    if (this.checkFn(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)) {\n      let fn = async (rec, timestamp, options) => {\n        const id = await this.getFunc(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)(rec, timestamp, options);\n        this.setId(id, () => ({ ...props,\n          [idName]: id\n        }));\n      }; // must be first to assign correctly the first location to the right id if it is defined\n\n\n      this.addFn(this.getDataSourcesIdsByProperty(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`), fn, true);\n    } else {\n      this.setId(this.getId(), () => ({ ...props,\n        [idName]: this.getId()\n      }));\n    }\n  }\n\n  getCurrentProps() {\n    return this.propsById[this.getId()];\n  }\n\n  getIds() {\n    return Object.keys(this.propsById);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9MYXllci5qcz8yZDFkIl0sIm5hbWVzIjpbIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwiaW5pdCIsImRhdGEiLCJwcm9wc0J5SWQiLCJkYXRhU291cmNlc1RvRm4iLCJ1bmRlZmluZWQiLCJwcm9wcyIsImlkIiwicmFuZG9tVVVJRCIsImZpbHRlciIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInZpc2libGUiLCJ0aW1lc3RhbXAiLCJkYXRhU291cmNlSWRzIiwiaXNEZWZpbmVkIiwiZGF0YVNvdXJjZUlkIiwib25MZWZ0Q2xpY2siLCJhc3NlcnRGdW5jdGlvbiIsIm9uUmlnaHRDbGljayIsIm9uSG92ZXIiLCJpbml0RXZlbnRzIiwiY2hlY2tGbiIsImZuIiwicmVjIiwib3B0aW9ucyIsImdldEZ1bmMiLCJhZGRGbiIsImdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSIsInVwZGF0ZVByb3BlcnR5IiwiZnVuY05hbWUiLCJoYW5kbGVyIiwiZnVuYyIsImlzRnVuY3Rpb24iLCJhc3NlcnREZWZpbmVkIiwiaXNTZXQiLCJoYXNWYWx1ZSIsImFzc2VydEFycmF5IiwiY2xlYXIiLCJnZXRJZCIsInNlbGVjdCIsImZpcnN0IiwiaSIsImxlbmd0aCIsInVuc2hpZnQiLCJwdXNoIiwic2V0RGF0YSIsInJlY29yZHMiLCJmbkFyciIsImoiLCJnZXREYXRhU291cmNlc0lkcyIsInJlcyIsImdldFByb3BzIiwidHlwZSIsInZhbHVlcyIsInJlc2V0IiwicHJvcGVydHlOYW1lIiwidmFsdWUiLCJjaGVja0V4aXN0aW5nUHJvcHMiLCJzZXRQcm9wcyIsInNldElkIiwiZGVmYXVsdFByb3BzIiwiZGVmaW5lZElkIiwiaWROYW1lIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwiZ2V0Q3VycmVudFByb3BzIiwiZ2V0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QUF1QlksT0FBdkIsS0FBbUM7UUFDeEMsTUFBTWxCLEVBQUUsR0FBRyxNQUFNLEtBQUttQixPQUFMLENBQWMsTUFBS3NDLHFGQUFxQixDQUFDRCxNQUFELENBQVMsRUFBakQsRUFBb0R2QyxHQUFwRCxFQUF5RFgsU0FBekQsRUFBb0VZLE9BQXBFLENBQWpCO1FBQ0EsS0FBS21DLEtBQUwsQ0FBV3JELEVBQVgsRUFBZSxPQUFPLEVBQUMsR0FBR0QsS0FBSjtVQUFXLENBQUN5RCxNQUFELEdBQVV4RDtRQUFyQixDQUFQLENBQWY7TUFDSCxDQUhELENBRHFELENBS3JEOzs7TUFDQSxLQUFLb0IsS0FBTCxDQUFXLEtBQUtDLDJCQUFMLENBQWtDLE1BQUtvQyxxRkFBcUIsQ0FBQ0QsTUFBRCxDQUFTLEVBQXJFLENBQVgsRUFBb0Z4QyxFQUFwRixFQUF3RixJQUF4RjtJQUNILENBUEQsTUFPTztNQUNILEtBQUtxQyxLQUFMLENBQVcsS0FBS3JCLEtBQUwsRUFBWCxFQUF5QixPQUFPLEVBQUMsR0FBR2pDLEtBQUo7UUFBVyxDQUFDeUQsTUFBRCxHQUFVLEtBQUt4QixLQUFMO01BQXJCLENBQVAsQ0FBekI7SUFDSDtFQUNKOztFQUVEMEIsZUFBZSxHQUFHO0lBQ2QsT0FBUSxLQUFLOUQsU0FBTCxDQUFlLEtBQUtvQyxLQUFMLEVBQWYsQ0FBUjtFQUNIOztFQUVEMkIsTUFBTSxHQUFHO0lBQ0wsT0FBT0MsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS2pFLFNBQWpCLENBQVA7RUFDSDs7QUFuVE87O0FBc1RHTCw4REFBZiIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHtcbiAgICBhc3NlcnRBcnJheSxcbiAgICBhc3NlcnREZWZpbmVkLFxuICAgIGFzc2VydEZ1bmN0aW9uLFxuICAgIGhhc1ZhbHVlLFxuICAgIGlzRGVmaW5lZCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIHJhbmRvbVVVSUQsXG4gICAgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyXG59IGZyb20gXCIuLi8uLi91dGlscy9VdGlscy5qc1wiO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgaW4gY2hhcmdlIG9mIGRlZmluaW5nIGEgTGF5ZXIgb2JqZWN0LlxuICovXG5jbGFzcyBMYXllciB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIGNvbnRhaW5zIGEgbGlzdCBvZiBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnRpZXMubmFtZSAtIGRlZmF1bHQgbmFtZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0aWVzLmRlc2NyaXB0aW9uIC0gZGVmYXVsdCBkZXNjcmlwdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0aWVzLmRhdGFTb3VyY2VJZCAtIGRlZmF1bHQgZGF0YVNvdXJjZUlkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwcm9wZXJ0aWVzLnZpc2libGUgLSBkZWZpbmVzIGlmIHRoZSBsYXllciBpcyB2aXNpYmxlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByb3BlcnRpZXMudGltZXN0YW1wIC0gZGVmaW5lcyB0aGUgdGltZXN0YW1wIG9mIHRoZSBkYXRhXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvcGVydGllcy5nZXRUaW1lc3RhbXAgLSBmdW5jdGlvbiB3aGljaCBkZWZpbmVzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIGRhdGFcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9wZXJ0aWVzLm9uTGVmdENsaWNrIC0gdHJpZ2dlciBvbkxlZnRDbGljayBtYXJrZXIgZXZlbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9wZXJ0aWVzLm9uUmlnaHRDbGljayAtIHRyaWdnZXIgb25SaWdodENsaWNrIG1hcmtlciBldmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3BlcnRpZXMub25Ib3ZlciAtIHRyaWdnZXIgb25Ib3ZlciBtYXJrZXIgZXZlbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gICAgICAgIHRoaXMuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0cyB0aGUgbGF5ZXIuXG4gICAgICovXG4gICAgaW5pdChwcm9wZXJ0aWVzPXRoaXMucHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICAgICAgdGhpcy5wcm9wc0J5SWQgPSB7fTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlc1RvRm4gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdGhpcy5wcm9wcyA9IHtcbiAgICAgICAgICAgIGlkOiBcImxheWVyLVwiICsgcmFuZG9tVVVJRCgpLFxuICAgICAgICAgICAgZmlsdGVyOiB0cnVlLFxuICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhU291cmNlSWRzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm5hbWUgPSBwcm9wZXJ0aWVzLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYoaXNEZWZpbmVkKHByb3BlcnRpZXMuZGVzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRlc2NyaXB0aW9uID0gcHJvcGVydGllcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmRhdGFTb3VyY2VJZCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZUlkcyA9IFtwcm9wZXJ0aWVzLmRhdGFTb3VyY2VJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZihpc0RlZmluZWQocHJvcGVydGllcy5kYXRhU291cmNlSWRzKSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlSWRzID0gcHJvcGVydGllcy5kYXRhU291cmNlSWRzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIXRoaXMuZGF0YVNvdXJjZUlkcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlSWRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXNzZXJ0RGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VJZHMsICdbTGF5ZXJdIGRhdGFTb3VyY2VJZHNbXSBvciBkYXRhU291cmNlSWQnKTtcblxuICAgICAgICBpZihpc0RlZmluZWQocHJvcGVydGllcy52aXNpYmxlKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy52aXNpYmxlID0gcHJvcGVydGllcy52aXNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLnRpbWVzdGFtcCkpe1xuICAgICAgICAgICAgdGhpcy5wcm9wcy50aW1lc3RhbXAgPSBwcm9wZXJ0aWVzLnRpbWVzdGFtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5vbkxlZnRDbGljaykgJiYgYXNzZXJ0RnVuY3Rpb24ocHJvcGVydGllcy5vbkxlZnRDbGljaykpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25MZWZ0Q2xpY2sgPSBwcm9wZXJ0aWVzLm9uTGVmdENsaWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm9uUmlnaHRDbGljaykgJiYgYXNzZXJ0RnVuY3Rpb24ocHJvcGVydGllcy5vblJpZ2h0Q2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uUmlnaHRDbGljayA9IHByb3BlcnRpZXMub25SaWdodENsaWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm9uSG92ZXIpICYmIGFzc2VydEZ1bmN0aW9uKHByb3BlcnRpZXMub25Ib3ZlcikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Ib3ZlciA9IHByb3BlcnRpZXMub25Ib3ZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJmaWx0ZXJcIikpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IChyZWMsdGltZXN0YW1wLG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZpbHRlciA9IHRoaXMuZ2V0RnVuYygnZmlsdGVyJykocmVjLHRpbWVzdGFtcCxvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFkZEZuKHRoaXMuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdmaWx0ZXInKSxmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMuZmlsdGVyID0gZnVuY3Rpb24ocmVjLHRpbWVzdGFtcCxvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZpbHRlciA9IGF3YWl0IHRoaXMuZ2V0RnVuYygnZmlsdGVyJykocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGlzLmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZmlsdGVyJyksZm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tGbihcImdldFZpc2libGVcIikpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ3Zpc2libGUnLGF3YWl0IHRoaXMuZ2V0RnVuYygnZ2V0VmlzaWJsZScpKHJlYywgdGltZXN0YW1wLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGlzLmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0VmlzaWJsZScpLGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJnZXRUaW1lc3RhbXBcIikpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ3RpbWVzdGFtcCcsYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRUaW1lc3RhbXAnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFRpbWVzdGFtcCcpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0TmFtZVwiKSkge1xuICAgICAgICAgICAgbGV0IGZuID0gYXN5bmMgKHJlYyx0aW1lc3RhbXAsb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ25hbWUnLGF3YWl0IHRoaXMuZ2V0RnVuYygnZ2V0TmFtZScpKHJlYywgdGltZXN0YW1wLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGlzLmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0TmFtZScpLGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJnZXREZXNjcmlwdGlvblwiKSkge1xuICAgICAgICAgICAgbGV0IGZuID0gYXN5bmMgKHJlYywgdGltZXN0YW1wLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVQcm9wZXJ0eSgnZGVzY3JpcHRpb24nLGF3YWl0IHRoaXMuZ2V0RnVuYygnZ2V0RGVzY3JpcHRpb24nKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldERlc2NyaXB0aW9uJyksIGZuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEZ1bmMoZnVuY05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1tmdW5jTmFtZV0uaGFuZGxlciB8fCB0aGlzLnByb3BlcnRpZXNbZnVuY05hbWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIGZ1bmNOYW1lXG4gICAgICogQHJldHVybiB7Kn1cbiAgICAgKi9cbiAgICBjaGVja0ZuKGZ1bmNOYW1lKSB7XG4gICAgICAgIGxldCBmdW5jID0gdGhpcy5wcm9wZXJ0aWVzW2Z1bmNOYW1lXTtcbiAgICAgICAgaWYoaXNGdW5jdGlvbihmdW5jKSkge1xuICAgICAgICAgICAgYXNzZXJ0RGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VJZHMsICdkYXRhU291cmNlSWRzJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpc1NldCA9IGhhc1ZhbHVlKGZ1bmMpO1xuICAgICAgICAgICAgaWYgKGlzU2V0KSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0QXJyYXkoZnVuYy5kYXRhU291cmNlSWRzLCBmdW5jTmFtZSArIFwiLmRhdGFTb3VyY2VJZHNcIik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0RnVuY3Rpb24oZnVuYy5oYW5kbGVyLCBmdW5jTmFtZSArIFwiLmhhbmRsZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNTZXQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGluaXRFdmVudHMoKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGxheWVyLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxheWVyIGlkLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGxheWVyIGlkXG4gICAgICovXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgdGhlIGRhdGFzb3VyY2UgY29udGFpbmVkIGludG8gdGhlIGxpc3RcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhU291cmNlSWRzIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzXG4gICAgICovXG4gICAgc2VsZWN0KGRhdGFTb3VyY2VJZHMpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gYXNzb2NpYXRlZCB0byBhIGxpc3Qgb2YgZGF0YVNvdXJjZSBpZHNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBkYXRhU291cmNlSWRzIC0gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBhZGRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmaXJzdD1mYWxzZV0gLSBzZXQgYXQgdGhlIGZpcnN0IHBvc2l0aW9uXG4gICAgICovXG4gICAgYWRkRm4oZGF0YVNvdXJjZUlkcywgZm4sIGZpcnN0ID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKCFpc0RlZmluZWQodGhpcy5kYXRhU291cmNlc1RvRm4pKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2VzVG9GbiA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YVNvdXJjZUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRhdGFTb3VyY2VJZCA9IGRhdGFTb3VyY2VJZHNbaV07XG4gICAgICAgICAgICBpZiAoIWlzRGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VzVG9GbltkYXRhU291cmNlSWRdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZXNUb0ZuW2RhdGFTb3VyY2VJZF0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGZpcnN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlc1RvRm5bZGF0YVNvdXJjZUlkXS51bnNoaWZ0KGZuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlc1RvRm5bZGF0YVNvdXJjZUlkXS5wdXNoKGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGFTb3VyY2VJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IHJlY29yZHNcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIGFzeW5jIHNldERhdGEoZGF0YVNvdXJjZUlkLCByZWNvcmRzLCBvcHRpb25zPXt9KSB7XG4gICAgICAgIC8vIHN0b3JlIGRhdGEgaW50byBkYXRhIHByb3BzXG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICBvcHRpb25zLmRhdGFTb3VyY2VJZCA9IGRhdGFTb3VyY2VJZDtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VzVG9GbikpIHtcbiAgICAgICAgICAgIGlmIChkYXRhU291cmNlSWQgaW4gdGhpcy5kYXRhU291cmNlc1RvRm4pIHtcbiAgICAgICAgICAgICAgICBsZXQgZm5BcnIgPSB0aGlzLmRhdGFTb3VyY2VzVG9GbltkYXRhU291cmNlSWRdO1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZmlsdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJlY29yZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbkFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZm5BcnJbaV0ocmVjb3Jkc1tqXS5kYXRhLCByZWNvcmRzW2pdLmRhdGEudGltZXN0YW1wLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5maWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnByb3BzLmZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wcm9wc0J5SWRbdGhpcy5nZXRJZCgpXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ1tdfSBUaGUgbGlzdCBvZiBkYXRhU291cmNlIGlkc1xuICAgICAqL1xuICAgIGdldERhdGFTb3VyY2VzSWRzKCkge1xuICAgICAgICBpZihpc0RlZmluZWQodGhpcy5kYXRhU291cmNlc1RvRm4pKSB7XG4gICAgICAgICAgICBsZXQgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuZGF0YVNvdXJjZXNUb0ZuKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXNzZXJ0RGVmaW5lZCh0aGlzLmRhdGFTb3VyY2VJZHMsICdkYXRhU291cmNlSWQgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU291cmNlSWRzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1tuYW1lXS5kYXRhU291cmNlSWRzIHx8IHRoaXMuZGF0YVNvdXJjZUlkcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSBjdXJyZW50IGxheWVyIHByb3BlcnRpZXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnQgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdldFByb3BzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgdmFsdWVzOiB0aGlzLmRhdGFcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNldCB0byBkZWZhdWx0IExheWVyIHZhbHVlc1xuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmluaXQodGhpcy5wcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQcm9wZXJ0eShwcm9wZXJ0eU5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMucHJvcHNCeUlkW3RoaXMuZ2V0SWQoKV1bcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNoZWNrRXhpc3RpbmdQcm9wcyhpZCkge1xuICAgICAgICByZXR1cm4gKGlkIGluIHRoaXMucHJvcHNCeUlkKTtcbiAgICB9XG4gICAgc2V0UHJvcHMoaWQsIHByb3BzKSB7XG4gICAgICAgIHRoaXMucHJvcHNCeUlkW2lkXSA9IHByb3BzO1xuICAgIH1cblxuICAgIHNldElkKGlkLCBkZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5pZCA9IGlkO1xuICAgICAgICBpZighdGhpcy5jaGVja0V4aXN0aW5nUHJvcHMoaWQpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFByb3BzKGlkLCBkZWZhdWx0UHJvcHMoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWZpbmVkSWQoaWROYW1lLCBwcm9wcykge1xuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKGBnZXQke2NhcGl0YWxpemVGaXJzdExldHRlcihpZE5hbWUpfWApKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGF3YWl0IHRoaXMuZ2V0RnVuYyhgZ2V0JHtjYXBpdGFsaXplRmlyc3RMZXR0ZXIoaWROYW1lKX1gKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRJZChpZCwgKCkgPT4gKHsuLi5wcm9wcywgW2lkTmFtZV06IGlkfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyc3QgdG8gYXNzaWduIGNvcnJlY3RseSB0aGUgZmlyc3QgbG9jYXRpb24gdG8gdGhlIHJpZ2h0IGlkIGlmIGl0IGlzIGRlZmluZWRcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoYGdldCR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGlkTmFtZSl9YCksIGZuLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0SWQodGhpcy5nZXRJZCgpLCAoKSA9PiAoey4uLnByb3BzLCBbaWROYW1lXTogdGhpcy5nZXRJZCgpfSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q3VycmVudFByb3BzKCkge1xuICAgICAgICByZXR1cm4gIHRoaXMucHJvcHNCeUlkW3RoaXMuZ2V0SWQoKV07XG4gICAgfVxuXG4gICAgZ2V0SWRzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wcm9wc0J5SWQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},12:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n\n\nclass WorkerExt {\n  constructor(worker) {\n    this.worker = worker;\n    this.onmessage = null;\n  }\n\n  postMessage(message, transfer) {\n    // console.log('post no ack');\n    this.worker.postMessage(message, transfer);\n  }\n\n  postMessageWithAck(message, transfer) {\n    const ackId = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ \"q\"])(); // console.log('post ack ' + ackId);\n\n    return new Promise((resolve, reject) => {\n      const controller = new AbortController();\n      this.worker.addEventListener(\"message\", e => {\n        //console.log('resp ' + e.data.ackId);\n        if (e.data.ackId === ackId) {\n          delete e.data.ackId;\n          controller.abort();\n\n          if (e.error) {\n            reject(e.error);\n          } else {\n            resolve(e.data);\n          }\n        }\n      }, {\n        signal: controller.signal\n      });\n      message.ackId = ackId;\n      this.worker.postMessage(message, transfer);\n    });\n  }\n\n  set onmessage(f) {\n    this.worker.onmessage = f;\n  }\n\n  terminate() {\n    if (this.worker) {\n      this.worker.terminate();\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (WorkerExt);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS93b3JrZXIvV29ya2VyRXh0LmpzPzE3ODgiXSwibmFtZXMiOlsiV29ya2VyRXh0IiwiY29uc3RydWN0b3IiLCJ3b3JrZXIiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0cmFuc2ZlciIsInBvc3RNZXNzYWdlV2l0aEFjayIsImFja0lkIiwicmFuZG9tVVVJRCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiZGF0YSIsImFib3J0IiwiZXJyb3IiLCJzaWduYWwiLCJmIiwidGVybWluYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBOztBQUVBLE1BQU1BLFNBQU4sQ0FBZ0I7RUFDWkMsV0FBVyxDQUFDQyxNQUFELEVBQVM7SUFDaEIsS0FBS0EsTUFBTCxHQUFjQSxNQUFkO0lBQ0EsS0FBS0MsU0FBTCxHQUFpQixJQUFqQjtFQUVIOztFQUVEQyxXQUFXLENBQUNDLE9BQUQsRUFBVUMsUUFBVixFQUFvQjtJQUMzQjtJQUNBLEtBQUtKLE1BQUwsQ0FBWUUsV0FBWixDQUF3QkMsT0FBeEIsRUFBaUNDLFFBQWpDO0VBQ0g7O0VBRURDLGtCQUFrQixDQUFDRixPQUFELEVBQVVDLFFBQVYsRUFBb0I7SUFDbEMsTUFBTUUsS0FBSyxHQUFHQyx1RUFBVSxFQUF4QixDQURrQyxDQUVsQzs7SUFFQSxPQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7TUFFcEMsTUFBTUMsVUFBVSxHQUFHLElBQUlDLGVBQUosRUFBbkI7TUFFQSxLQUFLWixNQUFMLENBQVlhLGdCQUFaLENBQTZCLFNBQTdCLEVBQXdDQyxDQUFDLElBQUk7UUFDekM7UUFDQSxJQUFJQSxDQUFDLENBQUNDLElBQUYsQ0FBT1QsS0FBUCxLQUFpQkEsS0FBckIsRUFBNEI7VUFDeEIsT0FBT1EsQ0FBQyxDQUFDQyxJQUFGLENBQU9ULEtBQWQ7VUFDQUssVUFBVSxDQUFDSyxLQUFYOztVQUNBLElBQUdGLENBQUMsQ0FBQ0csS0FBTCxFQUFZO1lBQ1JQLE1BQU0sQ0FBQ0ksQ0FBQyxDQUFDRyxLQUFILENBQU47VUFDSCxDQUZELE1BRU87WUFDSFIsT0FBTyxDQUFDSyxDQUFDLENBQUNDLElBQUgsQ0FBUDtVQUNIO1FBQ0o7TUFFSixDQVpELEVBWUc7UUFBQ0csTUFBTSxFQUFFUCxVQUFVLENBQUNPO01BQXBCLENBWkg7TUFjQWYsT0FBTyxDQUFDRyxLQUFSLEdBQWdCQSxLQUFoQjtNQUNBLEtBQUtOLE1BQUwsQ0FBWUUsV0FBWixDQUF3QkMsT0FBeEIsRUFBaUNDLFFBQWpDO0lBRUgsQ0FyQk0sQ0FBUDtFQXNCSDs7RUFFWSxJQUFUSCxTQUFTLENBQUNrQixDQUFELEVBQUk7SUFDYixLQUFLbkIsTUFBTCxDQUFZQyxTQUFaLEdBQXdCa0IsQ0FBeEI7RUFDSDs7RUFFREMsU0FBUyxHQUFJO0lBQ1QsSUFBRyxLQUFLcEIsTUFBUixFQUFnQjtNQUNaLEtBQUtBLE1BQUwsQ0FBWW9CLFNBQVo7SUFDSDtFQUNKOztBQWhEVzs7QUFtRER0QixrRUFBZiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmFuZG9tVVVJRH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzXCI7XG5cbmNsYXNzIFdvcmtlckV4dCB7XG4gICAgY29uc3RydWN0b3Iod29ya2VyKSB7XG4gICAgICAgIHRoaXMud29ya2VyID0gd29ya2VyO1xuICAgICAgICB0aGlzLm9ubWVzc2FnZSA9IG51bGw7XG5cbiAgICB9XG5cbiAgICBwb3N0TWVzc2FnZShtZXNzYWdlLCB0cmFuc2Zlcikge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygncG9zdCBubyBhY2snKTtcbiAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXIpO1xuICAgIH1cblxuICAgIHBvc3RNZXNzYWdlV2l0aEFjayhtZXNzYWdlLCB0cmFuc2Zlcikge1xuICAgICAgICBjb25zdCBhY2tJZCA9IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Bvc3QgYWNrICcgKyBhY2tJZCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgICAgICAgICAgdGhpcy53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZSA9PiB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzcCAnICsgZS5kYXRhLmFja0lkKTtcbiAgICAgICAgICAgICAgICBpZiAoZS5kYXRhLmFja0lkID09PSBhY2tJZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZS5kYXRhLmFja0lkO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGUuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwge3NpZ25hbDogY29udHJvbGxlci5zaWduYWx9KTtcblxuICAgICAgICAgICAgbWVzc2FnZS5hY2tJZCA9IGFja0lkO1xuICAgICAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXIpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldCBvbm1lc3NhZ2UoZikge1xuICAgICAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSBmO1xuICAgIH1cblxuICAgIHRlcm1pbmF0ZSgpICB7XG4gICAgICAgIGlmKHRoaXMud29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV29ya2VyRXh0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},15:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(3);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/worker/DataSource.worker.js\nvar DataSource_worker = __webpack_require__(169);\nvar DataSource_worker_default = /*#__PURE__*/__webpack_require__.n(DataSource_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/worker/WorkerExt.js\nvar WorkerExt = __webpack_require__(12);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/connector/Status.js\nvar Status = __webpack_require__(9);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/connector/DataConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataConnector is the abstract class used to create different connectors.\n */\n\nclass DataConnector_DataConnector {\n  /**\n   * @param {String} url - The full url used to connect to the data stream\n   */\n  constructor(url, properties) {\n    this.url = url;\n    this.properties = properties;\n    this.id = \"DataConnector-\" + Object(Utils[\"q\" /* randomUUID */])();\n    this.reconnectTimeout = 1000 * 20; // 20 sec\n\n    this.status = Status[\"a\" /* Status */].DISCONNECTED;\n  }\n\n  disconnect() {\n    this.checkStatus(Status[\"a\" /* Status */].DISCONNECTED);\n    this.checkAndClearReconnection();\n  }\n  /**\n   * Sets the url\n   * @param url\n   */\n\n\n  setUrl(url) {\n    this.url = url;\n  }\n  /**\n   * The data protocol default id.\n   * @return {String}\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * The stream url.\n   * @return {String}\n   */\n\n\n  getUrl() {\n    return this.url;\n  }\n  /**\n   * Sets the reconnection timeout\n   * @param {Number} timeout - delay in milliseconds before reconnecting dataSource\n   */\n\n\n  setReconnectTimeout(timeout) {\n    this.reconnectTimeout = timeout;\n  }\n\n  onReconnect() {\n    return true;\n  }\n\n  connect() {}\n\n  forceReconnect() {\n    this.disconnect();\n    this.connect();\n  }\n  /**\n   * Called when the connection STATUS changes\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {}\n  /**\n   * Check a change of the status and call the corresponding callbacks if necessary\n   * @param {Status} status - the currentStatus\n   */\n\n\n  checkStatus(status) {\n    if (status !== this.status) {\n      this.onChangeStatus(status);\n      this.status = status;\n    }\n  }\n  /**\n   * Called when the protocol has been disconnected\n   */\n\n\n  onDisconnect() {}\n  /**\n   * Called when the protocol has been connected\n   */\n\n\n  onConnect() {}\n\n  postRequest() {}\n\n  publishRequest() {}\n\n  reset() {}\n\n  close() {}\n\n  onClose(statusCode) {}\n\n  onError(reason) {}\n\n}\n\n/* harmony default export */ var connector_DataConnector = (DataConnector_DataConnector);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/mqtt/mqtt.min.js\nvar mqtt_min = __webpack_require__(170);\nvar mqtt_min_default = /*#__PURE__*/__webpack_require__.n(mqtt_min);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/mqtt/MqttProvider.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nlet mqttCallbacks = {};\n\nclass MqttProvider_MqttProvider {\n  /**\n   * Build the MqttProvider.\n   * @param {Object} properties - the object properties\n   * @param {String} properties.endpoint - the mqtt endpoint[:port]\n   * @param {String} properties.clientId - the clientId\n   * @param {String} [properties.mqttPrefix='/api'] - a prefix to each topic\n   * @param {Object} properties.options - the MQTT.js property options as defined  [mqtt.Client(streamBuilder, options)]{@link https://github.com/mqttjs/MQTT.js#mqttclientstreambuilder-options}\n   * Note that the credentials are passed in the object options as for the mqtt.js client.\n   */\n  constructor(properties) {\n    this.properties = properties;\n\n    if (!Object(Utils[\"n\" /* isDefined */])(properties)) {\n      throw Error('endpoint and clientId are mandatory properties');\n    }\n\n    if (!Object(Utils[\"n\" /* isDefined */])(properties.endpoint)) {\n      throw Error('endpoint is a mandatory property');\n    }\n\n    if (!Object(Utils[\"n\" /* isDefined */])(properties.clientId)) {\n      throw Error('clientId is a mandatory property');\n    }\n\n    this.mqttPrefix = '/api';\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.mqttPrefix)) {\n      this.mqttPrefix = properties.mqttPrefix;\n    }\n\n    this.topics = [];\n    let options = {\n      reconnectPeriod: 30,\n      connectTimeout: 30 * 1000,\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      wsOptions: {\n        binaryType: 'arraybuffer'\n      }\n    }; // merge generic options\n\n    if (Object(Utils[\"n\" /* isDefined */])(this.properties.options)) {\n      options = { ...options,\n        ...this.properties.options\n      };\n    }\n\n    this.options = options;\n    this.endpoint = properties.endpoint + '/mqtt';\n    this.clientId = properties.clientId;\n    this.client = null;\n  }\n\n  async subscribe(topic, callback) {\n    if (topic in this.topics) {\n      // already subscribed, skipping\n      return;\n    }\n\n    if (!Object(Utils[\"n\" /* isDefined */])(this.client)) {\n      throw Error('You must connect the client before subscribing any topic');\n    } // waiting for the client gets connected\n\n\n    let interval;\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    this.topics.push(topic);\n    return new Promise((resolve, error) => {\n      interval = setInterval(() => {\n        if (this.client.connected) {\n          try {\n            // subscribe\n            // store callback for this topic\n            if (!(topicQuery in mqttCallbacks)) {\n              mqttCallbacks[topicQuery] = [];\n            }\n\n            mqttCallbacks[topicQuery].push({\n              callbackFn: callback,\n              topic: topic\n            });\n            this.client.subscribe(`${topicQuery}`, function (err) {\n              if (err) {\n                callback(err);\n                error(err);\n              } else {\n                console.warn(`Subscribed to ${topicQuery}`);\n                resolve();\n              }\n            });\n          } catch (exception) {\n            console.error(exception);\n          } finally {\n            clearInterval(interval);\n          }\n        }\n      }, 100);\n    });\n  }\n\n  publish(topic, payload) {\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    this.client.publish(topicQuery, payload);\n  }\n  /**\n   * Check to unsuscribe to any topic listened by this dsId\n   * If the topic is only subscribed by the dsId, unsubscribe from broken\n   * Otherwise, remove from the list of subscribe topic/dsId\n   * @param topic\n   */\n\n\n  async unsubscribe(topic) {\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    return this.client.unsubscribe(topicQuery, err => {\n      delete mqttCallbacks[topicQuery];\n\n      if (err) {\n        const messageErr = `Cannot Unsubscribed topic: ${topicQuery} : ${err}`;\n        console.error(messageErr);\n        throw Error(messageErr);\n      } else {\n        console.warn(`Unsubscribed topic: ${topicQuery}`);\n      }\n    });\n  }\n\n  async unsubscribeAll() {\n    // unsubscribe topic\n    for (let topic of this.topics) {\n      await this.unsubscribe(topic);\n    }\n\n    this.topics = [];\n  }\n\n  connect() {\n    if (!Object(Utils[\"n\" /* isDefined */])(this.client)) {\n      // connects to the broker specified by the given url and options and returns a Client.\n      this.client = mqtt_min_default.a.connect(this.endpoint, { ...this.options\n      });\n      const that = this;\n      this.client.on('connect', e => {\n        console.info(`Mqtt client is connected to ${that.endpoint}`);\n      });\n      this.client.on('message', this.onMessage.bind(this));\n      this.client.on('offline', e => {\n        throw new Error(`The server ${that.endpoint} seems offline`);\n      });\n      this.client.on('error', e => {\n        throw new Error(error);\n      });\n    }\n  }\n\n  async onMessage(topic, message) {\n    // console.log(topic)\n    // console.log(new DataView(message.buffer, message.byteOffset).getFloat64(0, false) * 1000)\n    // console.log(new DataView(new Uint8Array(message).subarray(message.byteOffset).buffer).getFloat64(0, false) * 1000)\n    // console.log(String.fromCharCode.apply(null, new Uint8Array(message)));\n    if (topic in mqttCallbacks) {\n      // callback for the corresponding topic\n      for (let callback of mqttCallbacks[topic]) {\n        // callback to all subscription registered\n        callback.callbackFn(new Uint8Array(message).subarray(message.byteOffset).buffer, callback.topic);\n      }\n    }\n  }\n\n  disconnect() {\n    if (!Object(Utils[\"n\" /* isDefined */])(this.client)) {\n      throw Error('The client has not been created yet');\n    } // close the client\n\n\n    this.client.end();\n    mqttCallbacks = {};\n    this.client = null;\n  }\n\n  isConnected() {\n    return Object(Utils[\"n\" /* isDefined */])(this.client) && this.client.connected;\n  }\n\n}\n\n/* harmony default export */ var mqtt_MqttProvider = (MqttProvider_MqttProvider);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/sweapi/Filter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass Filter_SensorWebApiFilter {\n  constructor(props) {\n    this.props = props;\n  }\n  /**\n   *\n   * @param {string[]} [includes=[]] list of parameters to include - all if omitted\n   * @param  {string[]} [excludes=[]] list of parameters to exclude - none if omitted\n   * @return {string}\n   */\n\n\n  toQueryString(includes = [], excludes = []) {\n    let queryString = '';\n    let separator = '';\n    excludes.push('replaySpeed');\n\n    for (let queryParameter in this.props) {\n      if (excludes.includes(queryParameter)) {\n        continue;\n      }\n\n      if ((includes.length === 0 || includes.includes(queryParameter)) && Object(Utils[\"n\" /* isDefined */])(this.props[queryParameter])) {\n        // if(Array.isArray(this.props[queryParameter])) {\n        //     queryString += separator + queryParameter + '=' + encodeURIComponent(this.props[queryParameter].join());\n\n        /*} else*/\n        if (queryParameter === 'f' || queryParameter === 'format' || queryParameter === 'responseFormat' || queryParameter === 'obsFormat') {\n          queryString += separator + queryParameter + '=' + this.props[queryParameter].replaceAll('+', '%2B'); // } else {\n          //     queryString += separator + queryParameter + '=' + encodeURIComponent(this.props[queryParameter]);\n        } else {\n          queryString += separator + queryParameter + '=' + this.props[queryParameter];\n        }\n\n        separator = '&';\n      }\n    }\n\n    return queryString;\n  }\n\n}\n\n/* harmony default export */ var Filter = (Filter_SensorWebApiFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/sweapi/observation/ObservationFilter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass ObservationFilter_ObservationFilter extends Filter {\n  /**\n   *\n   * @param {Object} properties - object properties\n   * @param {any} [properties.phenomenonTime='now'] - time range <00:00:00T00:00:00Z/00:00:00T00:00:00Z> | 'now' | 'latest'\n   * @param {any} [properties.resultTime='now'] - time range <00:00:00T00:00:00Z/00:00:00T00:00:00Z> | 'latest'\n   * @param {string[]} [properties.featureOfInterest=undefined] - Comma separated list of feature of interest IDs to get observations for\n   * @param {string[]} [properties.select=undefined] - Comma separated list of properties to include or exclude from results (use \"!\" prefix to exclude)\n   * @param {number[]} [properties.bbox=undefined] - BBOX to filter resources on their location\n   * @param {string} [properties.location=undefined] - WKT geometry and operator to filter resources on their location or geometry\n   * @param {string} [properties.format='application/json'] - Mime type designating the format to use to encode the response.\n   * @param {string} [properties.replaySpeed=undefined] - Mime type designating the format to use to encode the response.\n   */\n  constructor(properties) {\n    super({\n      phenomenonTime: undefined,\n      resultTime: undefined,\n      featureOfInterest: undefined,\n      select: undefined,\n      bbox: undefined,\n      location: undefined,\n      format: 'application/om+json',\n      replaySpeed: undefined,\n      ...properties // merge defined properties\n\n    });\n  }\n\n}\n\n/* harmony default export */ var observation_ObservationFilter = (ObservationFilter_ObservationFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/connector/MqttConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n/**\n * Defines the MqttConnector to connect to a remote server by creating a Mqtt channel.\n * @extends DataConnector\n * @example\n * import MqttConnector from 'osh-js/dataconnector/MqttConnector.js';\n *\n * let url = ...;\n * let connector = new MqttConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n// TODO: Useless in WebWorker since the WebWorker has its own context.\n\nconst mqttProviders = {};\n\nclass MqttConnector_MqttConnector extends connector_DataConnector {\n  /**\n   *\n   * @param url\n   * @param properties -\n   */\n  constructor(url, properties) {\n    super(url, {\n      mqttPrefix: properties.mqttOpts && properties.mqttOpts.prefix || '/api',\n      ...properties\n    });\n    this.interval = -1;\n    this.id = `mqtt-connector-${Object(Utils[\"q\" /* randomUUID */])()}`;\n  }\n\n  initBc() {\n    this.onMessage = (data, topic) => {\n      this.broadcastChannel.postMessage({\n        data: data,\n        topic: topic\n      }, [data]);\n    };\n\n    this.broadcastChannel = new BroadcastChannel(this.id);\n    let queryString;\n\n    this.broadcastChannel.onmessage = message => {\n      if (message.data.message === 'subscribe') {\n        queryString = message.data.queryString;\n        this.doRequest(message.data.topic, message.data.queryString);\n      } else if (message.data.message === 'unsubscribe') {\n        this.disconnect(message.data.topic + '?' + queryString);\n      }\n    };\n  }\n\n  getMqttProvider() {\n    let fullUrl = this.getUrl(); // only 1 provider by URL\n\n    if (!(fullUrl in mqttProviders)) {\n      let options = {\n        reconnectPeriod: this.reconnectTimeout,\n        connectTimeout: 30 * 1000\n      };\n\n      if (Object(Utils[\"n\" /* isDefined */])(this.properties.mqttOpts)) {\n        options = { ...options,\n          ...this.properties.mqttOpts\n        };\n      }\n\n      mqttProviders[fullUrl] = new mqtt_MqttProvider({\n        endpoint: fullUrl,\n        clientId: Object(Utils[\"q\" /* randomUUID */])(),\n        options: options,\n        mqttPrefix: this.properties.mqttPrefix\n      });\n      console.warn(`Stored MQTT provider into cache: ${fullUrl}`);\n      mqttProviders[fullUrl].connect();\n      mqttProviders[fullUrl].checkStatus = this.checkStatus;\n      this.checkStatus(Status[\"a\" /* Status */].CONNECTED);\n    } else {\n      console.warn(`Getting MQTT provider from cache: ${fullUrl}`);\n    }\n\n    return mqttProviders[fullUrl];\n  }\n\n  checkStatus(status) {\n    this.onChangeStatus(status);\n    this.status = status;\n  }\n  /**\n   * Connect to the Mqtt broker.\n   */\n\n\n  doRequest(topic = '', queryString = undefined) {\n    const mqttProvider = this.getMqttProvider();\n    mqttProvider.subscribe(`${topic}?${queryString}`, this.onMessage).then(() => {\n      this.onChangeStatus(Status[\"a\" /* Status */].CONNECTED);\n    });\n  }\n\n  publishRequest(topic, payload) {\n    const mqttProvider = this.getMqttProvider();\n    mqttProvider.publish(topic, payload);\n  }\n  /**\n   * Disconnects and close the mqtt client.\n   */\n\n\n  async disconnect(topic) {\n    // does not call super to avoid reconnection logic and use the one of the mqtt.js lib\n    // this.checkStatus(Status.DISCONNECTED);\n    // this.init = false;\n    // this.closed = true;\n    // find the client\n    const client = mqttProviders[this.getUrl()];\n\n    if (Object(Utils[\"n\" /* isDefined */])(client) && client.isConnected()) {\n      if (!topic) {\n        // unsubscribe all topics\n        return client.unsubscribeAll(); // client.disconnect();\n      } else {\n        return client.unsubscribe(topic);\n      }\n    } //delete mqttProviders[this.getUrl()];\n    //console.warn(`Disconnected from ${this.getUrl()}`);\n\n  }\n\n  connect() {\n    this.doRequest(this.properties.topic || '');\n  }\n  /**\n   * The onMessage method used by the mqtt client to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n\n  isConnected() {\n    return Object(Utils[\"n\" /* isDefined */])(mqttProviders[this.getUrl()]) && mqttProviders[this.getUrl()].isConnected();\n  }\n\n  reset() {\n    this.disconnect();\n    console.log(`Remove provider from cache: ${this.getUrl()}`);\n    delete mqttProviders[this.getUrl()];\n  }\n\n}\n\n/* harmony default export */ var connector_MqttConnector = (MqttConnector_MqttConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n// global worker\n\nconst maxPoolSize = 5;\nconst workersPool = [];\nlet currentInsertPoolIdx = 0;\nlet dataSourceWorkers = {};\nlet mqttConnectors = {};\nfunction getDataSourceWorkers() {\n  return dataSourceWorkers;\n}\n\nfunction createSharedMqttConnector(properties, topic) {\n  let endpoint = properties.mqttOpts.endpointUrl;\n\n  if (endpoint.endsWith('/')) {\n    endpoint = endpoint.substring(0, endpoint.length - 1);\n  }\n\n  const tls = properties.tls ? 's' : '';\n  const url = 'mqtt' + tls + '://' + endpoint;\n\n  if (!(url in mqttConnectors)) {\n    mqttConnectors[url] = new connector_MqttConnector(url, properties);\n    mqttConnectors[url].initBc();\n  }\n\n  return mqttConnectors[url].id;\n}\n\nclass DataSource_datasource_DataSource {\n  constructor(name, properties) {\n    this.id = properties.id || \"DataSource-\" + Object(Utils[\"q\" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.eventSubscriptionMap = {};\n    this.init = undefined;\n    this.mode = Mode[\"a\" /* Mode */].REAL_TIME;\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.mode)) {\n      this.mode = properties.mode;\n    }\n\n    if (properties.protocol === 'mqtt') {\n      this.properties.mqttOpts.bcId = createSharedMqttConnector(properties);\n    }\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants[\"a\" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  createWorker(properties) {\n    return new WorkerExt[\"a\" /* default */](new DataSource_worker_default.a());\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    this.properties = { ...this.properties,\n      ...properties\n    };\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'update-properties',\n      data: properties,\n      dsId: this.id\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    return this.doConnect();\n  }\n\n  getWorker() {\n    if (!(this.id in dataSourceWorkers)) {\n      // create new worker for this DS\n      if (!Object(Utils[\"n\" /* isDefined */])(workersPool[currentInsertPoolIdx])) {\n        workersPool[currentInsertPoolIdx] = this.createWorker();\n      }\n\n      dataSourceWorkers[this.id] = currentInsertPoolIdx;\n      currentInsertPoolIdx = (currentInsertPoolIdx + 1) % maxPoolSize;\n    } // store worker idx into map for fast-mapping\n\n\n    return workersPool[dataSourceWorkers[this.id]];\n  }\n\n  async initDataSource(properties = this.properties) {\n    this.dataSourceWorker = this.getWorker();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'init',\n      id: this.id,\n      properties: properties,\n      topics: {\n        data: this.getTopicId()\n      },\n      dsId: this.id\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTopicId());\n\n      datasourceBroadcastChannel.onmessage = message => {\n        this.handleMessage(message);\n      };\n\n      this.isInitialized = true;\n    });\n  }\n\n  handleMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  resetInit() {\n    this.init = undefined;\n  }\n\n  async checkInit() {\n    if (!Object(Utils[\"n\" /* isDefined */])(this.init)) {\n      this.init = this.initDataSource();\n    }\n\n    return this.init;\n  }\n\n  async doConnect() {\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'connect',\n      dsId: this.id\n    });\n  }\n\n  async isConnected() {\n    if (!this.init) {\n      return false;\n    } else {\n      return this.checkInit().then(() => {\n        return this.dataSourceWorker.postMessageWithAck({\n          message: 'is-connected',\n          dsId: this.id\n        });\n      });\n    }\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    await this.checkInit();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'disconnect',\n      dsId: this.id\n    });\n  }\n\n  async onDisconnect() {}\n\n  reset() {\n    this.init = undefined;\n  }\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSource_datasource = (DataSource_datasource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.realtime.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_realtime_datasource_TimeSeriesRealtimeDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    this.dataSynchronizer = undefined;\n    this.properties.version = 0;\n  }\n\n  getTimeTopicId() {\n    return Constants[\"b\" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return Mode[\"a\" /* Mode */].REAL_TIME;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return 'now';\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return Date.now();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return 'now';\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return '2055-01-01Z';\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return Date.now(); // or should we use first timestamp of last data received???\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return new Date('2055-01-01Z').toISOString();\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {}\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {}\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {}\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {}\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return 1.0;\n  }\n\n  setReplaySpeed(replaySpeed) {}\n\n  setVersion(version) {\n    this.properties.version = version;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    return this.initDataSynchronizerIfPresent();\n  }\n\n  async initDataSynchronizerIfPresent() {\n    if (this.dataSynchronizer) {\n      await this.checkInit();\n      const topic = Constants[\"c\" /* DATA_SYNCHRONIZER_TOPIC */] + this.dataSynchronizer.id;\n      this.properties.version = this.dataSynchronizer.version();\n      return this.dataSourceWorker.postMessageWithAck({\n        message: 'topics',\n        topics: {\n          data: topic,\n          time: this.getTimeTopicId(),\n          mode: Mode[\"a\" /* Mode */].REAL_TIME,\n          sync: this.dataSynchronizer.getTimeTopicId()\n        },\n        dsId: this.id,\n        mode: Mode[\"a\" /* Mode */].REAL_TIME\n      });\n    }\n  }\n\n  async removeDataSynchronizer() {\n    if (this.dataSourceWorker) {\n      this.dataSourceWorker.terminate();\n      this.dataSynchronizer = undefined;\n    } // this.init = undefined;\n\n\n    return this.checkInit();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    await this.checkInit();\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'disconnect',\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REAL_TIME\n    });\n  }\n\n  async doConnect() {\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'connect',\n      startTime: 'now',\n      version: this.version(),\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REAL_TIME\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    const topics = {\n      data: this.getTopicId(),\n      time: this.getTimeTopicId()\n    };\n\n    if (this.dataSynchronizer) {\n      topics.sync = this.dataSynchronizer.getTimeTopicId();\n    }\n\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'topics',\n      topics: topics,\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REAL_TIME\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n      datasourceBroadcastChannel.onmessage = async message => {\n        await this.handleTimeMessage(message);\n      };\n    });\n  }\n\n  async handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_realtime_datasource = (TimeSeries_realtime_datasource_TimeSeriesRealtimeDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.replay.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_replay_datasource_TimeSeriesReplayDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    this.setMinTime(properties.startTime);\n    this.setMaxTime(properties.endTime);\n    this.properties.startTimestamp = new Date(properties.startTime).getTime();\n    this.properties.endTimestamp = new Date(properties.endTime).getTime();\n    Object(Utils[\"c\" /* assertDefined */])(properties, 'Some properties must be defined');\n    this.dataSynchronizer = undefined;\n    this.properties.version = 0;\n  }\n\n  getTimeTopicId() {\n    return Constants[\"b\" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.properties.mode;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return new Date(this.getStartTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.properties.startTimestamp;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return new Date(this.getEndTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.properties.endTimestamp;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return new Date(this.getMinTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return new Date(this.getMaxTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.properties.minTimestamp;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.properties.maxTimestamp;\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {\n    this.properties.minTimestamp = new Date(time).getTime();\n    this.computeMinMax();\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {\n    this.properties.maxTimestamp = new Date(time).getTime();\n    this.computeMinMax();\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n    this.computeMinMax();\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {\n    this.properties.endTimestamp = timestamp;\n    this.computeMinMax();\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTime(time) {\n    this.setStartTimestamp(new Date(time).getTime());\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTime(time) {\n    this.setEndTimestamp(new Date(time).getTime());\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.properties.replaySpeed;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.properties.replaySpeed = replaySpeed;\n  }\n\n  setVersion(version) {\n    this.properties.version = version;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    return this.initDataSynchronizerIfPresent();\n  }\n\n  async initDataSynchronizerIfPresent() {\n    if (this.dataSynchronizer) {\n      await this.checkInit();\n      const topic = Constants[\"c\" /* DATA_SYNCHRONIZER_TOPIC */] + this.dataSynchronizer.getId();\n      this.properties.version = this.dataSynchronizer.version();\n      return this.dataSourceWorker.postMessageWithAck({\n        message: 'topics',\n        topics: {\n          data: topic,\n          time: this.getTimeTopicId(),\n          sync: this.dataSynchronizer.getTimeTopicId()\n        },\n        dsId: this.id,\n        mode: Mode[\"a\" /* Mode */].REPLAY\n      });\n    }\n  }\n\n  async removeDataSynchronizer() {\n    this.init = undefined;\n    this.dataSynchronizer = undefined;\n    return this.checkInit();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    if (Object(Utils[\"n\" /* isDefined */])(this.init)) {\n      try {\n        return this.dataSourceWorker.postMessageWithAck({\n          message: 'disconnect',\n          dsId: this.id,\n          mode: Mode[\"a\" /* Mode */].REPLAY\n        });\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  async doConnect() {\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'connect',\n      startTime: this.getStartTimeAsIsoDate(),\n      version: this.version(),\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REPLAY\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    const topics = {\n      data: this.getTopicId(),\n      time: this.getTimeTopicId()\n    };\n\n    if (this.dataSynchronizer) {\n      topics.sync = this.dataSynchronizer.getTimeTopicId();\n    }\n\n    return this.dataSourceWorker.postMessageWithAck({\n      message: 'topics',\n      topics: topics,\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REPLAY\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n      datasourceBroadcastChannel.onmessage = message => {\n        this.handleTimeMessage(message);\n      };\n    });\n  }\n\n  handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n\n  computeMinMax() {\n    // intersect end/start depending on the min/max\n    if (this.properties.startTimestamp < this.properties.minTimestamp) {\n      this.properties.startTimestamp = this.properties.minTimestamp;\n    }\n\n    if (this.properties.endTimestamp > this.properties.maxTimestamp) {\n      this.properties.endTimestamp = this.properties.maxTimestamp;\n    }\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   * @param {Number} version - version of data\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode(), version = this.version()) {\n    await this.checkInit();\n\n    if (version !== this.version()) {\n      // update version if come in from other input\n      this.properties.version = version;\n    } // compute intersection\n\n\n    this.properties.startTimestamp = new Date(startTime).getTime();\n    this.properties.endTimestamp = new Date(endTime).getTime();\n    this.computeMinMax();\n    return this.updateProperties({\n      startTime: this.getStartTimeAsIsoDate(),\n      endTime: this.getEndTimeAsIsoDate(),\n      replaySpeed: replaySpeed,\n      reconnect: reconnect,\n      mode: mode,\n      version: version\n    });\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_replay_datasource = (TimeSeries_replay_datasource_TimeSeriesReplayDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeries.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_datasource_TimeSeriesDatasource {\n  constructor(name, properties) {\n    const id = Object(Utils[\"q\" /* randomUUID */])();\n    this.timeSeriesRealtimeDataSource = new TimeSeries_realtime_datasource(name, {\n      id: id,\n      ...properties\n    });\n    this.timeSeriesReplayDataSource = new TimeSeries_replay_datasource(name, {\n      id: id,\n      ...properties\n    });\n    this.setMode(properties.mode);\n  }\n\n  async setMode(mode) {\n    if (this.timeSeriesDataSource) {\n      await this.timeSeriesDataSource.disconnect();\n    }\n\n    if (!this.timeSeriesDataSource || mode !== this.timeSeriesDataSource.getMode()) {\n      if (mode === Mode[\"a\" /* Mode */].REAL_TIME) {\n        this.timeSeriesDataSource = this.timeSeriesRealtimeDataSource;\n      } else {\n        this.timeSeriesDataSource = this.timeSeriesReplayDataSource;\n      }\n\n      this.timeSeriesDataSource.resetInit(); // bind properties\n\n      this.properties = this.timeSeriesDataSource.properties;\n      this.id = this.timeSeriesDataSource.id;\n      this.name = this.timeSeriesDataSource.name;\n      this.properties.mode = mode;\n      return this.timeSeriesDataSource.initDataSynchronizerIfPresent();\n    }\n  }\n\n  getTimeTopicId() {\n    return this.timeSeriesDataSource.getTimeTopicId();\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.timeSeriesDataSource.getMode();\n  }\n\n  setVersion(version) {\n    this.timeSeriesDataSource.setVersion(version);\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getStartTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getStartTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getEndTimeAsIsoDate();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getEndTimeAsTimestamp();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getMinTimeAsIsoDate();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getMaxTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {\n    this.timeSeriesDataSource.setMinTime(time);\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {\n    this.timeSeriesDataSource.setMaxTime(time);\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {\n    this.timeSeriesDataSource.setStartTimestamp(timestamp);\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {\n    this.timeSeriesDataSource.setEndTimestamp(timestamp);\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTime(time) {\n    this.timeSeriesDataSource.setStartTime(time);\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTime(time) {\n    this.timeSeriesDataSource.setEndTime(time);\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.timeSeriesDataSource.getReplaySpeed();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.timeSeriesDataSource.setReplaySpeed(replaySpeed);\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    return this.timeSeriesDataSource.setDataSynchronizer(dataSynchronizer);\n  }\n\n  getDataSynchronizer() {\n    return this.timeSeriesDataSource.dataSynchronizer;\n  }\n\n  async removeDataSynchronizer() {\n    return this.timeSeriesDataSource.removeDataSynchronizer();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    return this.timeSeriesDataSource.disconnect();\n  }\n\n  async doConnect() {\n    return this.timeSeriesDataSource.doConnect();\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    return this.timeSeriesDataSource.initDataSource(properties);\n  }\n\n  version() {\n    return this.timeSeriesDataSource.version();\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   * @param {Number} version - version of data\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode(), version = this.version()) {\n    return this.timeSeriesDataSource.setTimeRange(startTime, endTime, replaySpeed, reconnect, mode, version);\n  }\n  /***********************************/\n\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.timeSeriesDataSource.getId();\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.timeSeriesDataSource.getName();\n  }\n\n  terminate() {\n    this.timeSeriesDataSource.terminate();\n  }\n\n  getTopicId() {\n    return this.timeSeriesDataSource.getTopicId();\n  }\n\n  subscribe(fn, eventTypes) {\n    this.timeSeriesDataSource.subscribe(fn, eventTypes);\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    return this.timeSeriesDataSource.updateProperties(properties);\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    return this.timeSeriesDataSource.connect();\n  }\n\n  async checkInit() {\n    return this.timeSeriesDataSource.checkInit();\n  }\n\n  async isConnected() {\n    return this.timeSeriesDataSource.isConnected();\n  }\n\n  reset() {\n    this.timeSeriesDataSource.reset();\n  }\n\n  onTimeChanged(min, max, start, end) {}\n\n  async autoUpdateTime(activate) {\n    if (activate) {\n      return this.createTimeUpdater();\n    } else {\n      this.destroyTimeUpdater();\n    }\n  } // abstract\n\n\n  async createTimeUpdater() {} // abstract\n\n\n  destroyTimeUpdater() {}\n\n}\n\n/* harmony default export */ var TimeSeries_datasource = (TimeSeries_datasource_TimeSeriesDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/sos/SosGetResult.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_datasource_SosGetResult extends TimeSeries_datasource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}, 'http', 'ws', 'mqtt', 'file', 'topic'\n   * @param {String} properties.endpointUrl the endpoint url, this property is ignored in case of using 'mqtt' protocol, the properties.mqttOpts.endpointUrl will be used instead\n   * @param {String} properties.collection the collection, /procedures, /fois, /observations, /tasks, /datastreams/4778/obs\n   * @param {Boolean} properties.tls - defines if use secure TLS connection\n   * @param {Number} [properties.responseFormat=application/om+json] the response format (e.g application/om+json)\n   * @param {String[]} [properties.prefetchBatchSize=1000000] Number of elements to prefetch at a time\n   * @param {String[]} [properties.prefetchBatchDuration=10000] Duration before prefetching the next batch. N.b the next batch will be prefetched at 80% of this duration\n   */\n  constructor(name, properties) {\n    super(name, {\n      protocol: 'ws',\n      // default for streaming\n      service: \"SOS\",\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      reconnectRetry: 10,\n      tls: false,\n      type: 'SosGetResult',\n      mode: Mode[\"a\" /* Mode */].REAL_TIME,\n      prefetchBatchSize: 250,\n      prefetchBatchDuration: 5000,\n      ...properties\n    });\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_datasource = __webpack_exports__[\"a\"] = (SosGetResult_datasource_SosGetResult);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")},163:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nconst initialStates = {};\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n   * Create the PointMarker\n   * @param {Object} properties\n   * @param {Number[]} properties.location - [x,y,z]\n   * @param {Number} [properties.orientation=0] -\n   * @param {String} properties.icon -\n   * @param {Number} [properties.iconScale=1] - the icon scale size\n   * @param {String} [properties.iconColor="#000000"] - the icon color\n   * @param {Number[]} [properties.iconAnchor=[16,16]] -\n   * @param {Number[]} [properties.iconSize=[16,16]] -\n   * @param {Number} [properties.iconOpacity=0.75] - icon opacity\n   * @param {String} [properties.label=""] - the label to display\n   * @param {String} [properties.labelColor="#000000"] - color\n   * @param {String} [properties.labelOutlineColor=undefined] - color\n   * @param {String} [properties.labelBackgroundColor=undefined] -  color\n   * @param {Number} [properties.labelSize=16] -\n   * @param {Number} [properties.labelScale=1.0] - label scale\n   * @param {Number[]} [properties.labelOffset=[0,0]] -\n   * @param {Number} [properties.zIndex=0] - z-ordering of markers\n   * @param {Number} [properties.allowBillboardRotation=true] - allow billboard rotation\n   * @param {Function} [properties.getLocation] -\n   * @param {Function} [properties.getDescription] -\n   * @param {Function} [properties.getOrientation] -\n   * @param {Function} [properties.getIcon] -\n   * @param {Function} [properties.getIconColor] -\n   * @param {Function} [properties.getIconScale] -\n   * @param {Function} [properties.getLabel] -\n   * @param {Function} [properties.getLabelColor] -\n   * @param {Function} [properties.getLabelSize] -\n   * @param {Function} [properties.getZindex] - z-ordering of markers\n   * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   * @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n   * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      markerId: () => this.getId(),\n      location: null,\n      orientation: {\n        heading: 0\n      },\n      icon: null,\n      iconAnchor: [16, 16],\n      iconSize: [16, 16],\n      iconScale: 1.0,\n      iconColor: undefined,\n      iconOpacity: 0.75,\n      label: null,\n      labelColor: undefined,\n      labelOutlineColor: undefined,\n      labelBackgroundColor: undefined,\n      labelSize: 16,\n      labelScale: 1.0,\n      labelOffset: [0, 0],\n      zoomLevel: 15,\n      defaultToTerrainElevation: false,\n      zIndex: 0,\n      allowBillboardRotation: true,\n      options: {}\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "n"])(properties.defaultToTerrainElevation)) {\n      props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.location, "location");\n      props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.orientation, "orientation");\n      props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.icon, "icon");\n      props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.iconScale, "iconScale");\n      props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconColor, "iconColor");\n      props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconOpacity)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconOpacity, "iconOpacity");\n      props.iconOpacity = properties.iconOpacity;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.label, "label");\n      props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelColor, "labelColor");\n      props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOutlineColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelOutlineColor, "labelOutlineColor");\n      props.labelOutlineColor = properties.labelOutlineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelBackgroundColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelBackgroundColor, "labelBackgroundColor");\n      props.labelBackgroundColor = properties.labelBackgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelSize, "labelSize");\n      props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelScale, "labelScale");\n      props.labelScale = properties.labelScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.zoomLevel, "zoomLevel");\n      props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "e"])(properties.zIndex, "zIndex");\n      props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.allowBillboardRotation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertBoolean */ "b"])(properties.allowBillboardRotation, "allowBillboardRotation");\n      props.allowBillboardRotation = properties.allowBillboardRotation;\n    }\n\n    this.definedId(\'markerId\', props);\n\n    if (this.checkFn("getLocation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'location\', await this.getFunc(\'getLocation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'orientation\', await this.getFunc(\'getOrientation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'icon\', await this.getFunc(\'getIcon\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconColor\', await this.getFunc(\'getIconColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconScale\', await this.getFunc(\'getIconScale\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'label\', await this.getFunc(\'getLabel\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelColor\', await this.getFunc(\'getLabelColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelSize\', await this.getFunc(\'getLabelSize\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'zIndex\', await this.getFunc(\'getZindex\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///163\n')},164:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\n/* harmony import */ var _core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(185);\n/* harmony import */ var _resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_resources_css_noUISlider_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(165);\n/* harmony import */ var nouislider__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nouislider__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(194);\n/* harmony import */ var nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(nouislider_distribute_nouislider_min_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(25);\n/* harmony import */ var wnumb__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(wnumb__WEBPACK_IMPORTED_MODULE_5__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * @extends View\n * @example\n *\n * import RangeSliderView from \'ext/view/RangeSliderView.js\';\n *\n * let rangeSlider = new RangeSliderView("rangeSlider",{\n    dataSourceId: dataSource.id,\n    startTime: "2015-12-19T21:04:30Z",\n    endTime: "2015-12-19T21:09:19Z"\n});\n */\n\nclass RangeSliderViewReplay extends _core_ui_view_View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create the discoveryView\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Number} properties.startTime - The start time (lower handle) as ISO date\n   * @param {Number} properties.endTime - The end time (upper handle) as ISO date\n   * @param {Number} properties.minTimeRange - The min range time as ISO date\n   * @param {Number} properties.maxTimeRange - The max range as ISO date\n   * @param {String} properties.dataSource - The dataSourceObject\n   * @param {Number} [properties.debounce=0] - Debounce time after updating the slider\n   * @param {Boolean} properties.disabled - disabled the range slider\n   * @param {Object} properties.dataSynchronizer - a data synchronizer to get current data time for this set of datasources\n   */\n  constructor(properties) {\n    super({ ...properties,\n      supportedLayers: [\'data\']\n    });\n    this.slider = document.createElement("div");\n    this.slider.setAttribute("class", "core-rangeslider-slider");\n    document.getElementById(this.divId).appendChild(this.slider);\n    let startTimestamp = new Date().getTime();\n    let endTimestamp = new Date("2055-01-01T00:00:00Z").getTime(); //01/01/2055\n\n    let minTimeRangeTimestamp = startTimestamp;\n    let maxTimeRangeTimestamp = endTimestamp;\n    this.update = false;\n    this.dataSourceObject = null;\n    this.debounce = 0;\n    this.options = {};\n    this.sliding = false;\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties)) {\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.startTime)) {\n        startTimestamp = new Date(properties.startTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.endTime)) {\n        endTimestamp = new Date(properties.endTime).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.minTimeRange)) {\n        minTimeRangeTimestamp = new Date(properties.minTimeRange).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.maxTimeRange)) {\n        maxTimeRangeTimestamp = new Date(properties.maxTimeRange).getTime();\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.dataSynchronizer)) {\n        this.dataSourceObject = properties.dataSynchronizer;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.dataSource)) {\n        this.dataSourceObject = properties.dataSource;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.debounce)) {\n        this.debounce = parseInt(properties.debounce);\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.options)) {\n        this.options = properties.options;\n      }\n\n      if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.disabled)) {\n        this.slider.setAttribute(\'disabled\', properties.disabled);\n      }\n    }\n\n    const options = {\n      start: [startTimestamp, endTimestamp]\n      /*,timestamp("2015-02-16T08:09:00Z")]*/\n      ,\n      range: {\n        min: minTimeRangeTimestamp,\n        max: maxTimeRangeTimestamp\n      },\n      //step:  1000* 60* 60,\n      format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n        decimals: 0\n      }),\n      behaviour: \'drag\',\n      connect: true,\n      animate: false,\n      pips: {\n        mode: \'positions\',\n        values: [5, 25, 50, 75],\n        density: 1,\n        //stepped: true,\n        format: wnumb__WEBPACK_IMPORTED_MODULE_5__({\n          edit: function (value) {\n            return new Date(parseInt(value)).toISOString().replace(".000Z", "Z").split("T")[1].split("Z")[0].split(".")[0];\n          }\n        })\n      },\n      ...this.options\n    }; // for above listeners\n\n    this.maxTimeRangeTimestamp = maxTimeRangeTimestamp;\n    nouislider__WEBPACK_IMPORTED_MODULE_3__["create"](this.slider, options);\n    this.createEvents();\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.dataSourceObject)) {\n      // listen for BC\n      const bc = new BroadcastChannel(this.dataSourceObject.getTimeTopicId());\n\n      bc.onmessage = message => {\n        if (!this.update) {\n          this.slider.noUiSlider.set([message.data.timestamp]);\n          this.onChange(message.data.timestamp, parseInt(this.slider.noUiSlider.get()[1]), \'data\');\n        }\n      };\n\n      this.bc = bc;\n    }\n  }\n\n  createActivateButton() {\n    let activateButtonDiv = document.createElement("div");\n    let aTagActivateButton = document.createElement("a");\n    activateButtonDiv.appendChild(aTagActivateButton);\n    activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n    let self = this;\n    activateButtonDiv.addEventListener("click", function (event) {\n      if (activateButtonDiv.className.indexOf("core-rangeslider-control-select") > -1) {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control");\n        self.deactivate();\n      } else {\n        activateButtonDiv.setAttribute("class", "core-rangeslider-control-select");\n        self.activate();\n      }\n    });\n    document.getElementById(this.divId).appendChild(activateButtonDiv);\n  }\n\n  createEvents() {\n    const that = this; //noUi-handle noUi-handle-lower\n    // start->update->end\n\n    this.slider.noUiSlider.on("start", function (values, handle) {\n      that.update = true;\n      that.sliding = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.maxTimeRangeTimestamp);\n      that.onChange(st, end, \'start\');\n    });\n    this.slider.noUiSlider.on("slide", function (values, handle) {\n      that.sliding = true;\n      that.update = true;\n      const st = parseInt(values[0]);\n      const end = parseInt(values[1]) || parseInt(that.maxTimeRangeTimestamp);\n      that.onChange(st, end, \'slide\');\n    });\n    this.slider.noUiSlider.on("end", function (values, handle) {\n      if (that.sliding) {\n        that.sliding = false;\n        const st = parseInt(values[0]);\n        const end = parseInt(values[1]) || parseInt(that.maxTimeRangeTimestamp);\n        that.onChange(st, end, \'end\'); // that.update = false;\n\n        setTimeout(() => that.update = false, that.debounce);\n      }\n    });\n  }\n  /**\n   * Deactivate the timeline bar\n   */\n\n\n  deactivate() {\n    this.slider.setAttribute(\'disabled\', true);\n  }\n  /**\n   * Activate the timeline nar\n   */\n\n\n  activate() {\n    this.slider.removeAttribute(\'disabled\');\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      if (!this.update) {\n        this.slider.noUiSlider.set([values[i].timestamp]);\n      }\n    }\n  }\n\n  setStartTime(timestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([timestamp]);\n    }\n  }\n\n  setTime(startTimestamp, endTimestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.set([startTimestamp, endTimestamp]);\n    }\n  }\n\n  setTimeRange(minRangeTimestamp, maxRangeTimestamp) {\n    if (!this.update) {\n      this.slider.noUiSlider.updateOptions({\n        range: {\n          min: minRangeTimestamp,\n          max: maxRangeTimestamp\n        }\n      });\n    }\n  }\n\n  onChange(startTime, endTime, type) {\n    if (type === \'end\') {\n      this.dataSourceObject.setTimeRange(new Date(startTime).toISOString(), new Date(endTime).toISOString(), this.dataSourceObject.properties.replaySpeed, true);\n    }\n  }\n\n  destroy() {\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider) && Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider.noUiSlider)) {\n      this.slider.noUiSlider.destroy();\n    }\n\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.bc)) {\n      this.bc.close();\n    }\n  }\n\n  disable() {\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider)) {\n      this.slider.setAttribute(\'disabled\', true);\n    }\n  }\n\n  enable() {\n    if (Object(_core_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.slider)) {\n      this.slider.removeAttribute(\'disabled\');\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (RangeSliderViewReplay);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///164\n')},166:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n */\n\nclass CurveLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create the CurveLayer\n   * @param {Object} properties -\n   * @param {String} [properties.xLabel=""] -\n   * @param {String} [properties.yLabel=""] -\n   * @param {String} [properties.lineColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.backgroundColor="#000000"] - color in hex or rgba value\n   * @param {String} [properties.fill=false] -\n   * @param {Number} [properties.maxValues=10] - Defines the max values hold by the layer\n   * @param {Number} [properties.stroke=1] -\n   * @param {Number} [properties.x=0] -\n   * @param {Number} [properties.y=[]] -\n   * @param {Number} [properties.maxValues=10] - The maximum values to display\n   * @param {Function} properties.getStroke -\n   * @param {Function} properties.getLineColor -\n   * @param {Function} properties.getValues -\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'curve\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      xLabel: "",\n      yLabel: "",\n      lineColor: "#399ca5",\n      backgroundColor: "#399ca5",\n      fill: false,\n      stroke: 1,\n      curveId: Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ "q"])(),\n      x: 0,\n      y: 0,\n      maxValues: 10\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.yLabel)) {\n      props.yLabel = properties.yLabel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.stroke)) {\n      props.stroke = properties.stroke;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.maxValues)) {\n      props.maxValues = properties.maxValues;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.lineColor)) {\n      props.lineColor = properties.lineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.backgroundColor)) {\n      props.backgroundColor = properties.backgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.fill)) {\n      props.fill = properties.fill;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.x)) {\n      props.x = properties.x;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.y)) {\n      props.y = properties.y;\n    }\n\n    this.definedId(\'curveId\', props);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getStroke)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'stroke\', await this.getFunc(\'getStroke\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getStroke\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getLineColor)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'lineColor\', await this.getFunc(\'getLineColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getBackgroundColor)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'backgroundColor\', await this.getFunc(\'getBackgroundColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLineColor\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.getValues)) {\n      let fn = async (rec, timestamp, options) => {\n        const value = await this.getFunc(\'getValues\')(rec, timestamp, options);\n        this.updateProperty(\'x\', value.x);\n        this.updateProperty(\'y\', value.y);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getValues\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (CurveLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///166\n')},167:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(13);\n/* harmony import */ var chartjs_adapter_moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(200);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * @extends View\n */\n\nclass ChartJsView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {String} [properties.type='line'] - The  [type]{@link https://www.chartjs.org/docs/3.5.1/} of the graph\n   * @param {Object} [properties.options={}] - Properties which can override the default framework ones\n   * @param {Object} [properties.datasetOptions={}] - Properties which can override the default framework ones (as defined [dataset]{@link https://www.chartjs.org/docs/latest/configuration/#dataset-configuration}\n   * @param {boolean} [properties.override=false] - Defines if options (as defined [Chart options]{@link https://www.chartjs.org/docs/3.5.1/general/options.html}) are completely overridden or merge only. Default is merge\n   @param {boolean} [properties.refreshRate=1000] - Defines the refresh data rate (in millis)\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: ['curve'],\n      ...properties\n    });\n    chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"].register(...chart_js__WEBPACK_IMPORTED_MODULE_2__[/* registerables */ \"c\"]); // #region snippet_chartjsview_default_chartprops\n\n    this.datasetOptions = {};\n    let type = 'line';\n    this.options = {\n      maintainAspectRatio: false,\n      normalized: true,\n      scales: {\n        y: {\n          title: {\n            display: true,\n            text: ''\n          }\n        },\n        x: {\n          type: 'time',\n          time: {\n            unit: 'second'\n          }\n        }\n      },\n      plugins: {},\n      datasets: {},\n      interaction: {},\n      animations: {},\n      layout: {},\n      elements: {}\n    };\n    this.refreshRate = 1000; // #endregion snippet_chartjsview_default_chartprops\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"n\"])(properties)) {\n      if (properties.hasOwnProperty('options')) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* merge */ \"p\"])(properties.options, this.options);\n      }\n\n      if (properties.hasOwnProperty('type')) {\n        type = properties.type;\n      }\n\n      if (properties.hasOwnProperty('datasetOptions')) {\n        this.datasetOptions = properties.datasetOptions;\n      }\n\n      if (properties.hasOwnProperty('refreshRate')) {\n        this.refreshRate = properties.refreshRate;\n      }\n    }\n\n    this.type = type;\n    let domNode = document.getElementById(this.divId);\n    this.id = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* randomUUID */ \"q\"])();\n    let ctx = document.createElement(\"canvas\");\n    ctx.setAttribute(\"id\", this.id);\n    domNode.appendChild(ctx);\n    this.ctx = ctx;\n    this.resetting = false;\n    this.chart = new chart_js__WEBPACK_IMPORTED_MODULE_2__[/* Chart */ \"a\"](this.ctx, {\n      type: type,\n      options: this.options\n    });\n    this.datasets = {};\n    this.buffer = {};\n    this.lastTimestamp = -1;\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === 'curve') {\n      this.updateCurve(data.values);\n    }\n  }\n\n  parseDate(intTimeStamp) {\n    const date = new Date(intTimeStamp);\n    return this.withLeadingZeros(date.getUTCHours()) + \":\" + this.withLeadingZeros(date.getUTCMinutes()) + \":\" + this.withLeadingZeros(date.getUTCSeconds());\n  }\n\n  withLeadingZeros(dt) {\n    return (dt < 10 ? '0' : '') + dt;\n  }\n  /**\n   * Updates the curve associated to the layer.\n   * @param {Curve.props[]} props - The layer properties allowing the update of the curve\n   */\n\n\n  async updateCurve(props) {\n    if (this.resetting) {\n      return;\n    }\n\n    const curveId = props[0].curveId;\n    this.chart.options.scales.y.title.text = props[0].yLabel;\n    let currentDataset = this.datasets[curveId];\n    const values = props.map(item => ({\n      'x': item.x,\n      'y': item.y\n    }));\n    let lineColor = this.getColor(props[0].lineColor);\n    let bgColor = this.getColor(props[0].backgroundColor);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ \"n\"])(currentDataset)) {\n      currentDataset = { ...this.datasetOptions,\n        label: props[0].name,\n        fill: props[0].fill,\n        backgroundColor: bgColor,\n        borderColor: lineColor,\n        borderWidth: props[0].stroke,\n        data: values\n      };\n      currentDataset = { ...this.datasetsProps,\n        ...currentDataset\n      };\n      this.datasets[curveId] = currentDataset;\n      this.chart.data.datasets.push(currentDataset);\n      this.buffer[curveId] = [];\n    } else {\n      this.datasets[curveId].backgroundColor = bgColor;\n      this.datasets[curveId].borderColor = lineColor;\n    }\n\n    this.buffer[curveId] = this.buffer[curveId].concat(values);\n\n    if (this.lastTimestamp === -1 || Date.now() - this.lastTimestamp >= this.refreshRate) {\n      for (let bufferKey in this.buffer) {\n        const currentBuffer = this.buffer[bufferKey];\n        const nbToShift = currentBuffer.length - props[0].maxValues;\n\n        if (nbToShift > 0) {\n          // double buffering\n          this.buffer[bufferKey] = currentBuffer.slice(nbToShift);\n        }\n\n        this.datasets[bufferKey].data = this.buffer[bufferKey];\n      }\n\n      this.lastTimestamp = Date.now();\n      this.chart.update('none');\n    }\n  }\n\n  getColor(value) {\n    let v = value;\n\n    if (v.length > 0 && v.charAt(0) === '#') {\n      if (value.length === 9) {\n        const rgba = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* hex2rgba */ \"m\"])(value);\n        v = 'rgba(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ',' + rgba[3] + ')';\n      } else {\n        const rgb = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* hex2rgb */ \"l\"])(value);\n        v = 'rgba(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ', 1.0)';\n      }\n    }\n\n    return v;\n  }\n\n  reset() {\n    this.resetting = true;\n    super.reset();\n    this.datasets = {};\n    this.chart.data.datasets = [];\n    this.buffer = {}; //\n\n    this.lastTimestamp = -1;\n    this.resetting = false;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ChartJsView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///167\n")},168:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\n import MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id,\n         getFrameData: (rec) => rec.videoFrame,\n         getTimestamp: (rec) => rec.timestamp\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'videoData\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timestamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(properties.showTime) && properties.showTime) {\n      this.timestamp = document.createElement("div");\n      this.timestamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timestamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === \'videoData\') {\n      const values = data.values;\n\n      for (let i = 0; i < values.length; i++) {\n        this.updateVideo(values[i]);\n      }\n    }\n  }\n\n  updateVideo(props) {\n    let imgBlob = new Blob([props.frameData.data]);\n    let url = window.URL.createObjectURL(imgBlob);\n    let oldBlobURL = this.imgTag.src;\n    this.imgTag.src = url;\n\n    if (this.timestamp !== null) {\n      this.timestamp.innerHTML = new Date(props.timestamp).toISOString();\n    }\n\n    window.URL.revokeObjectURL(oldBlobURL);\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "n"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n  async getCanvas() {\n    return this.canvas;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///168\n')},169:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "6a9919a1b421c3c9dac6.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlci9EYXRhU291cmNlLndvcmtlci5qcz8zYTVjIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLE9BQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTY5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjZhOTkxOWExYjQyMWMzYzlkYWM2Lndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///169\n')},170:function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var require;var require;!function (e) {\n  if (true) module.exports = e();else {}\n}(function () {\n  return function () {\n    return function e(t, r, n) {\n      function i(s, a) {\n        if (!r[s]) {\n          if (!t[s]) {\n            var l = "function" == typeof require && require;\n            if (!a && l) return require(s, !0);\n            if (o) return o(s, !0);\n            var u = new Error("Cannot find module \'" + s + "\'");\n            throw u.code = "MODULE_NOT_FOUND", u;\n          }\n\n          var c = r[s] = {\n            exports: {}\n          };\n          t[s][0].call(c.exports, function (e) {\n            return i(t[s][1][e] || e);\n          }, c, c.exports, e, t, r, n);\n        }\n\n        return r[s].exports;\n      }\n\n      for (var o = "function" == typeof require && require, s = 0; s < n.length; s++) i(n[s]);\n\n      return i;\n    };\n  }()({\n    1: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          const i = e("events").EventEmitter,\n                o = e("./store"),\n                s = e("./topic-alias-recv"),\n                a = e("./topic-alias-send"),\n                l = e("mqtt-packet"),\n                u = e("./default-message-id-provider"),\n                c = e("readable-stream").Writable,\n                h = e("inherits"),\n                f = e("reinterval"),\n                p = e("rfdc/default"),\n                d = e("./validations"),\n                g = e("xtend"),\n                y = e("debug")("mqttjs:client"),\n                b = r ? r.nextTick : function (e) {\n            setTimeout(e, 0);\n          },\n                m = n.setImmediate || function (e) {\n            b(e);\n          },\n                v = {\n            keepalive: 60,\n            reschedulePings: !0,\n            protocolId: "MQTT",\n            protocolVersion: 4,\n            reconnectPeriod: 1e3,\n            connectTimeout: 3e4,\n            clean: !0,\n            resubscribe: !0\n          },\n                w = ["ECONNREFUSED", "EADDRINUSE", "ECONNRESET", "ENOTFOUND"],\n                _ = {\n            0: "",\n            1: "Unacceptable protocol version",\n            2: "Identifier rejected",\n            3: "Server unavailable",\n            4: "Bad username or password",\n            5: "Not authorized",\n            16: "No matching subscribers",\n            17: "No subscription existed",\n            128: "Unspecified error",\n            129: "Malformed Packet",\n            130: "Protocol Error",\n            131: "Implementation specific error",\n            132: "Unsupported Protocol Version",\n            133: "Client Identifier not valid",\n            134: "Bad User Name or Password",\n            135: "Not authorized",\n            136: "Server unavailable",\n            137: "Server busy",\n            138: "Banned",\n            139: "Server shutting down",\n            140: "Bad authentication method",\n            141: "Keep Alive timeout",\n            142: "Session taken over",\n            143: "Topic Filter invalid",\n            144: "Topic Name invalid",\n            145: "Packet identifier in use",\n            146: "Packet Identifier not found",\n            147: "Receive Maximum exceeded",\n            148: "Topic Alias invalid",\n            149: "Packet too large",\n            150: "Message rate too high",\n            151: "Quota exceeded",\n            152: "Administrative action",\n            153: "Payload format invalid",\n            154: "Retain not supported",\n            155: "QoS not supported",\n            156: "Use another server",\n            157: "Server moved",\n            158: "Shared Subscriptions not supported",\n            159: "Connection rate exceeded",\n            160: "Maximum connect time",\n            161: "Subscription Identifiers not supported",\n            162: "Wildcard Subscriptions not supported"\n          };\n\n          function k(e, t) {\n            let r;\n            t.properties && (r = t.properties.topicAlias);\n            let n = t.topic.toString();\n\n            if (0 === n.length) {\n              if (void 0 === r) return new Error("Unregistered Topic Alias");\n              if (void 0 === (n = e.topicAliasSend.getTopicByAlias(r))) return new Error("Unregistered Topic Alias");\n              t.topic = n;\n            }\n\n            r && delete t.properties.topicAlias;\n          }\n\n          function S(e, t, r) {\n            y("sendPacket :: packet: %O", t), y("sendPacket :: emitting `packetsend`"), e.emit("packetsend", t), y("sendPacket :: writing to stream");\n            const n = l.writeToStream(t, e.stream, e.options);\n            y("sendPacket :: writeToStream result %s", n), !n && r ? (y("sendPacket :: handle events on `drain` once through callback."), e.stream.once("drain", r)) : r && (y("sendPacket :: invoking cb"), r());\n          }\n\n          function E(e, t, r, n) {\n            y("storeAndSend :: store packet with cmd %s to outgoingStore", t.cmd);\n            let i,\n                o = t;\n            if ("publish" === o.cmd && (o = p(t), i = k(e, o))) return r && r(i);\n            e.outgoingStore.put(o, function (i) {\n              if (i) return r && r(i);\n              n(), S(e, t, r);\n            });\n          }\n\n          function C(e) {\n            y("nop ::", e);\n          }\n\n          function T(e, t) {\n            let r;\n            const n = this;\n            if (!(this instanceof T)) return new T(e, t);\n\n            for (r in this.options = t || {}, v) void 0 === this.options[r] ? this.options[r] = v[r] : this.options[r] = t[r];\n\n            y("MqttClient :: options.protocol", t.protocol), y("MqttClient :: options.protocolVersion", t.protocolVersion), y("MqttClient :: options.username", t.username), y("MqttClient :: options.keepalive", t.keepalive), y("MqttClient :: options.reconnectPeriod", t.reconnectPeriod), y("MqttClient :: options.rejectUnauthorized", t.rejectUnauthorized), y("MqttClient :: options.topicAliasMaximum", t.topicAliasMaximum), this.options.clientId = "string" == typeof t.clientId ? t.clientId : "mqttjs_" + Math.random().toString(16).substr(2, 8), y("MqttClient :: clientId", this.options.clientId), this.options.customHandleAcks = 5 === t.protocolVersion && t.customHandleAcks ? t.customHandleAcks : function () {\n              arguments[3](0);\n            }, this.streamBuilder = e, this.messageIdProvider = void 0 === this.options.messageIdProvider ? new u() : this.options.messageIdProvider, this.outgoingStore = t.outgoingStore || new o(), this.incomingStore = t.incomingStore || new o(), this.queueQoSZero = void 0 === t.queueQoSZero || t.queueQoSZero, this._resubscribeTopics = {}, this.messageIdToTopic = {}, this.pingTimer = null, this.connected = !1, this.disconnecting = !1, this.queue = [], this.connackTimer = null, this.reconnectTimer = null, this._storeProcessing = !1, this._packetIdsDuringStoreProcessing = {}, this._storeProcessingQueue = [], this.outgoing = {}, this._firstConnection = !0, t.topicAliasMaximum > 0 && (t.topicAliasMaximum > 65535 ? y("MqttClient :: options.topicAliasMaximum is out of range") : this.topicAliasRecv = new s(t.topicAliasMaximum)), this.on("connect", function () {\n              const e = this.queue;\n              y("connect :: sending queued packets"), function t() {\n                const r = e.shift();\n                y("deliver :: entry %o", r);\n                let i = null;\n                if (!r) return void n._resubscribe();\n                i = r.packet, y("deliver :: call _sendPacket for %o", i);\n                let o = !0;\n                i.messageId && 0 !== i.messageId && (n.messageIdProvider.register(i.messageId) || (o = !1)), o ? n._sendPacket(i, function (e) {\n                  r.cb && r.cb(e), t();\n                }) : (y("messageId: %d has already used. The message is skipped and removed.", i.messageId), t());\n              }();\n            }), this.on("close", function () {\n              y("close :: connected set to `false`"), this.connected = !1, y("close :: clearing connackTimer"), clearTimeout(this.connackTimer), y("close :: clearing ping timer"), null !== n.pingTimer && (n.pingTimer.clear(), n.pingTimer = null), this.topicAliasRecv && this.topicAliasRecv.clear(), y("close :: calling _setupReconnect"), this._setupReconnect();\n            }), i.call(this), y("MqttClient :: setting up stream"), this._setupStream();\n          }\n\n          h(T, i), T.prototype._setupStream = function () {\n            const e = this,\n                  t = new c(),\n                  r = l.parser(this.options);\n            let n = null;\n            const i = [];\n\n            function o() {\n              if (i.length) b(s);else {\n                const e = n;\n                n = null, e();\n              }\n            }\n\n            function s() {\n              y("work :: getting next packet in queue");\n              const t = i.shift();\n              if (t) y("work :: packet pulled from queue"), e._handlePacket(t, o);else {\n                y("work :: no packets in queue");\n                const e = n;\n                n = null, y("work :: done flag is %s", !!e), e && e();\n              }\n            }\n\n            y("_setupStream :: calling method to clear reconnect"), this._clearReconnect(), y("_setupStream :: using streamBuilder provided to client to create stream"), this.stream = this.streamBuilder(this), r.on("packet", function (e) {\n              y("parser :: on packet push to packets array."), i.push(e);\n            }), t._write = function (e, t, i) {\n              n = i, y("writable stream :: parsing buffer"), r.parse(e), s();\n            }, y("_setupStream :: pipe stream to writable stream"), this.stream.pipe(t), this.stream.on("error", function (t) {\n              y("streamErrorHandler :: error", t.message), w.includes(t.code) ? (y("streamErrorHandler :: emitting error"), e.emit("error", t)) : C(t);\n            }), this.stream.on("close", function () {\n              var t;\n              y("(%s)stream :: on close", e.options.clientId), (t = e.outgoing) && (y("flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function"), Object.keys(t).forEach(function (e) {\n                t[e].volatile && "function" == typeof t[e].cb && (t[e].cb(new Error("Connection closed")), delete t[e]);\n              })), y("stream: emit close to MqttClient"), e.emit("close");\n            }), y("_setupStream: sending packet `connect`");\n            const a = Object.create(this.options);\n\n            if (a.cmd = "connect", this.topicAliasRecv && (a.properties || (a.properties = {}), this.topicAliasRecv && (a.properties.topicAliasMaximum = this.topicAliasRecv.max)), S(this, a), r.on("error", this.emit.bind(this, "error")), this.options.properties) {\n              if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) return e.end(() => this.emit("error", new Error("Packet has no Authentication Method"))), this;\n\n              if (this.options.properties.authenticationMethod && this.options.authPacket && "object" == typeof this.options.authPacket) {\n                S(this, g({\n                  cmd: "auth",\n                  reasonCode: 0\n                }, this.options.authPacket));\n              }\n            }\n\n            this.stream.setMaxListeners(1e3), clearTimeout(this.connackTimer), this.connackTimer = setTimeout(function () {\n              y("!!connectTimeout hit!! Calling _cleanUp with force `true`"), e._cleanUp(!0);\n            }, this.options.connectTimeout);\n          }, T.prototype._handlePacket = function (e, t) {\n            const r = this.options;\n            if (5 === r.protocolVersion && r.properties && r.properties.maximumPacketSize && r.properties.maximumPacketSize < e.length) return this.emit("error", new Error("exceeding packets size " + e.cmd)), this.end({\n              reasonCode: 149,\n              properties: {\n                reasonString: "Maximum packet size was exceeded"\n              }\n            }), this;\n\n            switch (y("_handlePacket :: emitting packetreceive"), this.emit("packetreceive", e), e.cmd) {\n              case "publish":\n                this._handlePublish(e, t);\n\n                break;\n\n              case "puback":\n              case "pubrec":\n              case "pubcomp":\n              case "suback":\n              case "unsuback":\n                this._handleAck(e), t();\n                break;\n\n              case "pubrel":\n                this._handlePubrel(e, t);\n\n                break;\n\n              case "connack":\n                this._handleConnack(e), t();\n                break;\n\n              case "auth":\n                this._handleAuth(e), t();\n                break;\n\n              case "pingresp":\n                this._handlePingresp(e), t();\n                break;\n\n              case "disconnect":\n                this._handleDisconnect(e), t();\n            }\n          }, T.prototype._checkDisconnecting = function (e) {\n            return this.disconnecting && (e ? e(new Error("client disconnecting")) : this.emit("error", new Error("client disconnecting"))), this.disconnecting;\n          }, T.prototype.publish = function (e, t, r, n) {\n            y("publish :: message `%s` to topic `%s`", t, e);\n            const i = this.options;\n            "function" == typeof r && (n = r, r = null);\n            if (r = g({\n              qos: 0,\n              retain: !1,\n              dup: !1\n            }, r), this._checkDisconnecting(n)) return this;\n\n            const o = this,\n                  s = function () {\n              let s = 0;\n              if ((1 === r.qos || 2 === r.qos) && null === (s = o._nextId())) return y("No messageId left"), !1;\n              const a = {\n                cmd: "publish",\n                topic: e,\n                payload: t,\n                qos: r.qos,\n                retain: r.retain,\n                messageId: s,\n                dup: r.dup\n              };\n\n              switch (5 === i.protocolVersion && (a.properties = r.properties), y("publish :: qos", r.qos), r.qos) {\n                case 1:\n                case 2:\n                  o.outgoing[a.messageId] = {\n                    volatile: !1,\n                    cb: n || C\n                  }, y("MqttClient:publish: packet cmd: %s", a.cmd), o._sendPacket(a, void 0, r.cbStorePut);\n                  break;\n\n                default:\n                  y("MqttClient:publish: packet cmd: %s", a.cmd), o._sendPacket(a, n, r.cbStorePut);\n              }\n\n              return !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !s()) && this._storeProcessingQueue.push({\n              invoke: s,\n              cbStorePut: r.cbStorePut,\n              callback: n\n            }), this;\n          }, T.prototype.subscribe = function () {\n            const e = this,\n                  t = new Array(arguments.length);\n\n            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];\n\n            const r = [];\n            let n = t.shift();\n            const i = n.resubscribe;\n            let o = t.pop() || C,\n                s = t.pop();\n            const a = this.options.protocolVersion;\n            delete n.resubscribe, "string" == typeof n && (n = [n]), "function" != typeof o && (s = o, o = C);\n            const l = d.validateTopics(n);\n            if (null !== l) return m(o, new Error("Invalid topic " + l)), this;\n            if (this._checkDisconnecting(o)) return y("subscribe: discconecting true"), this;\n            const u = {\n              qos: 0\n            };\n            if (5 === a && (u.nl = !1, u.rap = !1, u.rh = 0), s = g(u, s), Array.isArray(n) ? n.forEach(function (t) {\n              if (y("subscribe: array topic %s", t), !Object.prototype.hasOwnProperty.call(e._resubscribeTopics, t) || e._resubscribeTopics[t].qos < s.qos || i) {\n                const e = {\n                  topic: t,\n                  qos: s.qos\n                };\n                5 === a && (e.nl = s.nl, e.rap = s.rap, e.rh = s.rh, e.properties = s.properties), y("subscribe: pushing topic `%s` and qos `%s` to subs list", e.topic, e.qos), r.push(e);\n              }\n            }) : Object.keys(n).forEach(function (t) {\n              if (y("subscribe: object topic %s", t), !Object.prototype.hasOwnProperty.call(e._resubscribeTopics, t) || e._resubscribeTopics[t].qos < n[t].qos || i) {\n                const e = {\n                  topic: t,\n                  qos: n[t].qos\n                };\n                5 === a && (e.nl = n[t].nl, e.rap = n[t].rap, e.rh = n[t].rh, e.properties = s.properties), y("subscribe: pushing `%s` to subs list", e), r.push(e);\n              }\n            }), !r.length) return o(null, []), this;\n\n            const c = function () {\n              const t = e._nextId();\n\n              if (null === t) return y("No messageId left"), !1;\n              const n = {\n                cmd: "subscribe",\n                subscriptions: r,\n                qos: 1,\n                retain: !1,\n                dup: !1,\n                messageId: t\n              };\n\n              if (s.properties && (n.properties = s.properties), e.options.resubscribe) {\n                y("subscribe :: resubscribe true");\n                const t = [];\n                r.forEach(function (r) {\n                  if (e.options.reconnectPeriod > 0) {\n                    const n = {\n                      qos: r.qos\n                    };\n                    5 === a && (n.nl = r.nl || !1, n.rap = r.rap || !1, n.rh = r.rh || 0, n.properties = r.properties), e._resubscribeTopics[r.topic] = n, t.push(r.topic);\n                  }\n                }), e.messageIdToTopic[n.messageId] = t;\n              }\n\n              return e.outgoing[n.messageId] = {\n                volatile: !0,\n                cb: function (e, t) {\n                  if (!e) {\n                    const e = t.granted;\n\n                    for (let t = 0; t < e.length; t += 1) r[t].qos = e[t];\n                  }\n\n                  o(e, r);\n                }\n              }, y("subscribe :: call _sendPacket"), e._sendPacket(n), !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !c()) && this._storeProcessingQueue.push({\n              invoke: c,\n              callback: o\n            }), this;\n          }, T.prototype.unsubscribe = function () {\n            const e = this,\n                  t = new Array(arguments.length);\n\n            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];\n\n            let r = t.shift(),\n                n = t.pop() || C,\n                i = t.pop();\n            "string" == typeof r && (r = [r]), "function" != typeof n && (i = n, n = C);\n            const o = d.validateTopics(r);\n            if (null !== o) return m(n, new Error("Invalid topic " + o)), this;\n            if (e._checkDisconnecting(n)) return this;\n\n            const s = function () {\n              const t = e._nextId();\n\n              if (null === t) return y("No messageId left"), !1;\n              const o = {\n                cmd: "unsubscribe",\n                qos: 1,\n                messageId: t\n              };\n              return "string" == typeof r ? o.unsubscriptions = [r] : Array.isArray(r) && (o.unsubscriptions = r), e.options.resubscribe && o.unsubscriptions.forEach(function (t) {\n                delete e._resubscribeTopics[t];\n              }), "object" == typeof i && i.properties && (o.properties = i.properties), e.outgoing[o.messageId] = {\n                volatile: !0,\n                cb: n\n              }, y("unsubscribe: call _sendPacket"), e._sendPacket(o), !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !s()) && this._storeProcessingQueue.push({\n              invoke: s,\n              callback: n\n            }), this;\n          }, T.prototype.end = function (e, t, r) {\n            const n = this;\n\n            function i() {\n              y("end :: (%s) :: finish :: calling _cleanUp with force %s", n.options.clientId, e), n._cleanUp(e, () => {\n                y("end :: finish :: calling process.nextTick on closeStores"), b(function () {\n                  y("end :: closeStores: closing incoming and outgoing stores"), n.disconnected = !0, n.incomingStore.close(function (e) {\n                    n.outgoingStore.close(function (t) {\n                      if (y("end :: closeStores: emitting end"), n.emit("end"), r) {\n                        const n = e || t;\n                        y("end :: closeStores: invoking callback with args"), r(n);\n                      }\n                    });\n                  }), n._deferredReconnect && n._deferredReconnect();\n                }.bind(n));\n              }, t);\n            }\n\n            return y("end :: (%s)", this.options.clientId), null != e && "boolean" == typeof e || (r = t || C, t = e, e = !1, "object" != typeof t && (r = t, t = null, "function" != typeof r && (r = C))), "object" != typeof t && (r = t, t = null), y("end :: cb? %s", !!r), r = r || C, this.disconnecting ? (r(), this) : (this._clearReconnect(), this.disconnecting = !0, !e && Object.keys(this.outgoing).length > 0 ? (y("end :: (%s) :: calling finish in 10ms once outgoing is empty", n.options.clientId), this.once("outgoingEmpty", setTimeout.bind(null, i, 10))) : (y("end :: (%s) :: immediately calling finish", n.options.clientId), i()), this);\n          }, T.prototype.removeOutgoingMessage = function (e) {\n            const t = this.outgoing[e] ? this.outgoing[e].cb : null;\n            return delete this.outgoing[e], this.outgoingStore.del({\n              messageId: e\n            }, function () {\n              t(new Error("Message removed"));\n            }), this;\n          }, T.prototype.reconnect = function (e) {\n            y("client reconnect");\n\n            const t = this,\n                  r = function () {\n              e ? (t.options.incomingStore = e.incomingStore, t.options.outgoingStore = e.outgoingStore) : (t.options.incomingStore = null, t.options.outgoingStore = null), t.incomingStore = t.options.incomingStore || new o(), t.outgoingStore = t.options.outgoingStore || new o(), t.disconnecting = !1, t.disconnected = !1, t._deferredReconnect = null, t._reconnect();\n            };\n\n            return this.disconnecting && !this.disconnected ? this._deferredReconnect = r : r(), this;\n          }, T.prototype._reconnect = function () {\n            y("_reconnect: emitting reconnect to client"), this.emit("reconnect"), this.connected ? (this.end(() => {\n              this._setupStream();\n            }), y("client already connected. disconnecting first.")) : (y("_reconnect: calling _setupStream"), this._setupStream());\n          }, T.prototype._setupReconnect = function () {\n            const e = this;\n            !e.disconnecting && !e.reconnectTimer && e.options.reconnectPeriod > 0 ? (this.reconnecting || (y("_setupReconnect :: emit `offline` state"), this.emit("offline"), y("_setupReconnect :: set `reconnecting` to `true`"), this.reconnecting = !0), y("_setupReconnect :: setting reconnectTimer for %d ms", e.options.reconnectPeriod), e.reconnectTimer = setInterval(function () {\n              y("reconnectTimer :: reconnect triggered!"), e._reconnect();\n            }, e.options.reconnectPeriod)) : y("_setupReconnect :: doing nothing...");\n          }, T.prototype._clearReconnect = function () {\n            y("_clearReconnect : clearing reconnect timer"), this.reconnectTimer && (clearInterval(this.reconnectTimer), this.reconnectTimer = null);\n          }, T.prototype._cleanUp = function (e, t) {\n            const r = arguments[2];\n            if (t && (y("_cleanUp :: done callback provided for on stream close"), this.stream.on("close", t)), y("_cleanUp :: forced? %s", e), e) 0 === this.options.reconnectPeriod && this.options.clean && (n = this.outgoing) && (y("flush: queue exists? %b", !!n), Object.keys(n).forEach(function (e) {\n              "function" == typeof n[e].cb && (n[e].cb(new Error("Connection closed")), delete n[e]);\n            })), y("_cleanUp :: (%s) :: destroying stream", this.options.clientId), this.stream.destroy();else {\n              const e = g({\n                cmd: "disconnect"\n              }, r);\n              y("_cleanUp :: (%s) :: call _sendPacket with disconnect packet", this.options.clientId), this._sendPacket(e, m.bind(null, this.stream.end.bind(this.stream)));\n            }\n            var n;\n            this.disconnecting || (y("_cleanUp :: client not disconnecting. Clearing and resetting reconnect."), this._clearReconnect(), this._setupReconnect()), null !== this.pingTimer && (y("_cleanUp :: clearing pingTimer"), this.pingTimer.clear(), this.pingTimer = null), t && !this.connected && (y("_cleanUp :: (%s) :: removing stream `done` callback `close` listener", this.options.clientId), this.stream.removeListener("close", t), t());\n          }, T.prototype._sendPacket = function (e, t, r) {\n            y("_sendPacket :: (%s) ::  start", this.options.clientId), r = r || C, t = t || C;\n\n            const n = function (e, t) {\n              if (5 === e.options.protocolVersion && "publish" === t.cmd) {\n                let r;\n                t.properties && (r = t.properties.topicAlias);\n                const n = t.topic.toString();\n                if (e.topicAliasSend) {\n                  if (r) {\n                    if (0 !== n.length && (y("applyTopicAlias :: register topic: %s - alias: %d", n, r), !e.topicAliasSend.put(n, r))) return y("applyTopicAlias :: error out of range. topic: %s - alias: %d", n, r), new Error("Sending Topic Alias out of range");\n                  } else 0 !== n.length && (e.options.autoAssignTopicAlias ? (r = e.topicAliasSend.getAliasByTopic(n)) ? (t.topic = "", t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto assign(use) topic: %s - alias: %d", n, r)) : (r = e.topicAliasSend.getLruAlias(), e.topicAliasSend.put(n, r), t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto assign topic: %s - alias: %d", n, r)) : e.options.autoUseTopicAlias && (r = e.topicAliasSend.getAliasByTopic(n)) && (t.topic = "", t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto use topic: %s - alias: %d", n, r)));\n                } else if (r) return y("applyTopicAlias :: error out of range. topic: %s - alias: %d", n, r), new Error("Sending Topic Alias out of range");\n              }\n            }(this, e);\n\n            if (n) t(n);else {\n              if (!this.connected) return "auth" === e.cmd ? (this._shiftPingInterval(), void S(this, e, t)) : (y("_sendPacket :: client not connected. Storing packet offline."), void this._storePacket(e, t, r));\n\n              switch (this._shiftPingInterval(), e.cmd) {\n                case "publish":\n                  break;\n\n                case "pubrel":\n                  return void E(this, e, t, r);\n\n                default:\n                  return void S(this, e, t);\n              }\n\n              switch (e.qos) {\n                case 2:\n                case 1:\n                  E(this, e, t, r);\n                  break;\n\n                case 0:\n                default:\n                  S(this, e, t);\n              }\n\n              y("_sendPacket :: (%s) ::  end", this.options.clientId);\n            }\n          }, T.prototype._storePacket = function (e, t, r) {\n            y("_storePacket :: packet: %o", e), y("_storePacket :: cb? %s", !!t), r = r || C;\n            let n = e;\n\n            if ("publish" === n.cmd) {\n              const r = k(this, n = p(e));\n              if (r) return t && t(r);\n            }\n\n            0 === (n.qos || 0) && this.queueQoSZero || "publish" !== n.cmd ? this.queue.push({\n              packet: n,\n              cb: t\n            }) : n.qos > 0 ? (t = this.outgoing[n.messageId] ? this.outgoing[n.messageId].cb : null, this.outgoingStore.put(n, function (e) {\n              if (e) return t && t(e);\n              r();\n            })) : t && t(new Error("No connection to broker"));\n          }, T.prototype._setupPingTimer = function () {\n            y("_setupPingTimer :: keepalive %d (seconds)", this.options.keepalive);\n            const e = this;\n            !this.pingTimer && this.options.keepalive && (this.pingResp = !0, this.pingTimer = f(function () {\n              e._checkPing();\n            }, 1e3 * this.options.keepalive));\n          }, T.prototype._shiftPingInterval = function () {\n            this.pingTimer && this.options.keepalive && this.options.reschedulePings && this.pingTimer.reschedule(1e3 * this.options.keepalive);\n          }, T.prototype._checkPing = function () {\n            y("_checkPing :: checking ping..."), this.pingResp ? (y("_checkPing :: ping response received. Clearing flag and sending `pingreq`"), this.pingResp = !1, this._sendPacket({\n              cmd: "pingreq"\n            })) : (y("_checkPing :: calling _cleanUp with force true"), this._cleanUp(!0));\n          }, T.prototype._handlePingresp = function () {\n            this.pingResp = !0;\n          }, T.prototype._handleConnack = function (e) {\n            y("_handleConnack");\n            const t = this.options,\n                  r = 5 === t.protocolVersion ? e.reasonCode : e.returnCode;\n\n            if (clearTimeout(this.connackTimer), delete this.topicAliasSend, e.properties) {\n              if (e.properties.topicAliasMaximum) {\n                if (e.properties.topicAliasMaximum > 65535) return void this.emit("error", new Error("topicAliasMaximum from broker is out of range"));\n                e.properties.topicAliasMaximum > 0 && (this.topicAliasSend = new a(e.properties.topicAliasMaximum));\n              }\n\n              e.properties.serverKeepAlive && t.keepalive && (t.keepalive = e.properties.serverKeepAlive, this._shiftPingInterval()), e.properties.maximumPacketSize && (t.properties || (t.properties = {}), t.properties.maximumPacketSize = e.properties.maximumPacketSize);\n            }\n\n            if (0 === r) this.reconnecting = !1, this._onConnect(e);else if (r > 0) {\n              const e = new Error("Connection refused: " + _[r]);\n              e.code = r, this.emit("error", e);\n            }\n          }, T.prototype._handleAuth = function (e) {\n            const t = this.options.protocolVersion,\n                  r = 5 === t ? e.reasonCode : e.returnCode;\n\n            if (5 !== t) {\n              const e = new Error("Protocol error: Auth packets are only supported in MQTT 5. Your version:" + t);\n              return e.code = r, void this.emit("error", e);\n            }\n\n            const n = this;\n            this.handleAuth(e, function (e, t) {\n              if (e) n.emit("error", e);else if (24 === r) n.reconnecting = !1, n._sendPacket(t);else {\n                const t = new Error("Connection refused: " + _[r]);\n                e.code = r, n.emit("error", t);\n              }\n            });\n          }, T.prototype.handleAuth = function (e, t) {\n            t();\n          }, T.prototype._handlePublish = function (e, t) {\n            y("_handlePublish: packet %o", e), t = void 0 !== t ? t : C;\n            let r = e.topic.toString();\n            const n = e.payload,\n                  i = e.qos,\n                  o = e.messageId,\n                  s = this,\n                  a = this.options,\n                  l = [0, 16, 128, 131, 135, 144, 145, 151, 153];\n\n            if (5 === this.options.protocolVersion) {\n              let t;\n              if (e.properties && (t = e.properties.topicAlias), void 0 !== t) if (0 === r.length) {\n                if (!(t > 0 && t <= 65535)) return y("_handlePublish :: topic alias out of range. alias: %d", t), void this.emit("error", new Error("Received Topic Alias is out of range"));\n                {\n                  const e = this.topicAliasRecv.getTopicByAlias(t);\n                  if (!e) return y("_handlePublish :: unregistered topic alias. alias: %d", t), void this.emit("error", new Error("Received unregistered Topic Alias"));\n                  y("_handlePublish :: topic complemented by alias. topic: %s - alias: %d", r = e, t);\n                }\n              } else {\n                if (!this.topicAliasRecv.put(r, t)) return y("_handlePublish :: topic alias out of range. alias: %d", t), void this.emit("error", new Error("Received Topic Alias is out of range"));\n                y("_handlePublish :: registered topic: %s - alias: %d", r, t);\n              }\n            }\n\n            switch (y("_handlePublish: qos %d", i), i) {\n              case 2:\n                a.customHandleAcks(r, n, e, function (r, n) {\n                  return r instanceof Error || (n = r, r = null), r ? s.emit("error", r) : -1 === l.indexOf(n) ? s.emit("error", new Error("Wrong reason code for pubrec")) : void (n ? s._sendPacket({\n                    cmd: "pubrec",\n                    messageId: o,\n                    reasonCode: n\n                  }, t) : s.incomingStore.put(e, function () {\n                    s._sendPacket({\n                      cmd: "pubrec",\n                      messageId: o\n                    }, t);\n                  }));\n                });\n                break;\n\n              case 1:\n                a.customHandleAcks(r, n, e, function (i, a) {\n                  return i instanceof Error || (a = i, i = null), i ? s.emit("error", i) : -1 === l.indexOf(a) ? s.emit("error", new Error("Wrong reason code for puback")) : (a || s.emit("message", r, n, e), void s.handleMessage(e, function (e) {\n                    if (e) return t && t(e);\n\n                    s._sendPacket({\n                      cmd: "puback",\n                      messageId: o,\n                      reasonCode: a\n                    }, t);\n                  }));\n                });\n                break;\n\n              case 0:\n                this.emit("message", r, n, e), this.handleMessage(e, t);\n                break;\n\n              default:\n                y("_handlePublish: unknown QoS. Doing nothing.");\n            }\n          }, T.prototype.handleMessage = function (e, t) {\n            t();\n          }, T.prototype._handleAck = function (e) {\n            const t = e.messageId,\n                  r = e.cmd;\n            let n = null;\n            const i = this.outgoing[t] ? this.outgoing[t].cb : null,\n                  o = this;\n            let s;\n\n            if (i) {\n              switch (y("_handleAck :: packet type", r), r) {\n                case "pubcomp":\n                case "puback":\n                  {\n                    const r = e.reasonCode;\n                    r && r > 0 && 16 !== r && ((s = new Error("Publish error: " + _[r])).code = r, i(s, e)), delete this.outgoing[t], this.outgoingStore.del(e, i), this.messageIdProvider.deallocate(t), this._invokeStoreProcessingQueue();\n                    break;\n                  }\n\n                case "pubrec":\n                  {\n                    n = {\n                      cmd: "pubrel",\n                      qos: 2,\n                      messageId: t\n                    };\n                    const r = e.reasonCode;\n                    r && r > 0 && 16 !== r ? ((s = new Error("Publish error: " + _[r])).code = r, i(s, e)) : this._sendPacket(n);\n                    break;\n                  }\n\n                case "suback":\n                  delete this.outgoing[t], this.messageIdProvider.deallocate(t);\n\n                  for (let r = 0; r < e.granted.length; r++) if (0 != (128 & e.granted[r])) {\n                    const e = this.messageIdToTopic[t];\n                    e && e.forEach(function (e) {\n                      delete o._resubscribeTopics[e];\n                    });\n                  }\n\n                  this._invokeStoreProcessingQueue(), i(null, e);\n                  break;\n\n                case "unsuback":\n                  delete this.outgoing[t], this.messageIdProvider.deallocate(t), this._invokeStoreProcessingQueue(), i(null);\n                  break;\n\n                default:\n                  o.emit("error", new Error("unrecognized packet type"));\n              }\n\n              this.disconnecting && 0 === Object.keys(this.outgoing).length && this.emit("outgoingEmpty");\n            } else y("_handleAck :: Server sent an ack in error. Ignoring.");\n          }, T.prototype._handlePubrel = function (e, t) {\n            y("handling pubrel packet"), t = void 0 !== t ? t : C;\n            const r = this,\n                  n = {\n              cmd: "pubcomp",\n              messageId: e.messageId\n            };\n            r.incomingStore.get(e, function (e, i) {\n              e ? r._sendPacket(n, t) : (r.emit("message", i.topic, i.payload, i), r.handleMessage(i, function (e) {\n                if (e) return t(e);\n                r.incomingStore.del(i, C), r._sendPacket(n, t);\n              }));\n            });\n          }, T.prototype._handleDisconnect = function (e) {\n            this.emit("disconnect", e);\n          }, T.prototype._nextId = function () {\n            return this.messageIdProvider.allocate();\n          }, T.prototype.getLastMessageId = function () {\n            return this.messageIdProvider.getLastAllocated();\n          }, T.prototype._resubscribe = function () {\n            y("_resubscribe");\n            const e = Object.keys(this._resubscribeTopics);\n            if (!this._firstConnection && (this.options.clean || 5 === this.options.protocolVersion && !this.connackPacket.sessionPresent) && e.length > 0) if (this.options.resubscribe) {\n              if (5 === this.options.protocolVersion) {\n                y("_resubscribe: protocolVersion 5");\n\n                for (let t = 0; t < e.length; t++) {\n                  const r = {};\n                  r[e[t]] = this._resubscribeTopics[e[t]], r.resubscribe = !0, this.subscribe(r, {\n                    properties: r[e[t]].properties\n                  });\n                }\n              } else this._resubscribeTopics.resubscribe = !0, this.subscribe(this._resubscribeTopics);\n            } else this._resubscribeTopics = {};\n            this._firstConnection = !1;\n          }, T.prototype._onConnect = function (e) {\n            if (this.disconnected) return void this.emit("connect", e);\n            const t = this;\n            this.connackPacket = e, this.messageIdProvider.clear(), this._setupPingTimer(), this.connected = !0, function r() {\n              let n = t.outgoingStore.createStream();\n\n              function i() {\n                t._storeProcessing = !1, t._packetIdsDuringStoreProcessing = {};\n              }\n\n              function o() {\n                n.destroy(), n = null, t._flushStoreProcessingQueue(), i();\n              }\n\n              t.once("close", o), n.on("error", function (e) {\n                i(), t._flushStoreProcessingQueue(), t.removeListener("close", o), t.emit("error", e);\n              }), n.on("end", function () {\n                let n = !0;\n\n                for (const e in t._packetIdsDuringStoreProcessing) if (!t._packetIdsDuringStoreProcessing[e]) {\n                  n = !1;\n                  break;\n                }\n\n                n ? (i(), t.removeListener("close", o), t._invokeAllStoreProcessingQueue(), t.emit("connect", e)) : r();\n              }), function e() {\n                if (!n) return;\n                t._storeProcessing = !0;\n                const r = n.read(1);\n                let i;\n                r ? t._packetIdsDuringStoreProcessing[r.messageId] ? e() : t.disconnecting || t.reconnectTimer ? n.destroy && n.destroy() : (i = t.outgoing[r.messageId] ? t.outgoing[r.messageId].cb : null, t.outgoing[r.messageId] = {\n                  volatile: !1,\n                  cb: function (t, r) {\n                    i && i(t, r), e();\n                  }\n                }, t._packetIdsDuringStoreProcessing[r.messageId] = !0, t.messageIdProvider.register(r.messageId) ? t._sendPacket(r) : y("messageId: %d has already used.", r.messageId)) : n.once("readable", e);\n              }();\n            }();\n          }, T.prototype._invokeStoreProcessingQueue = function () {\n            if (this._storeProcessingQueue.length > 0) {\n              const e = this._storeProcessingQueue[0];\n              if (e && e.invoke()) return this._storeProcessingQueue.shift(), !0;\n            }\n\n            return !1;\n          }, T.prototype._invokeAllStoreProcessingQueue = function () {\n            for (; this._invokeStoreProcessingQueue(););\n          }, T.prototype._flushStoreProcessingQueue = function () {\n            for (const e of this._storeProcessingQueue) e.cbStorePut && e.cbStorePut(new Error("Connection closed")), e.callback && e.callback(new Error("Connection closed"));\n\n            this._storeProcessingQueue.splice(0);\n          }, t.exports = T;\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "./default-message-id-provider": 7,\n      "./store": 8,\n      "./topic-alias-recv": 9,\n      "./topic-alias-send": 10,\n      "./validations": 11,\n      _process: 50,\n      debug: 18,\n      events: 22,\n      inherits: 24,\n      "mqtt-packet": 40,\n      "readable-stream": 69,\n      reinterval: 70,\n      "rfdc/default": 71,\n      xtend: 81\n    }],\n    2: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("readable-stream").Transform,\n                i = e("duplexify");\n          let o,\n              s,\n              a,\n              l = !1;\n\n          t.exports = function (e, t) {\n            if (t.hostname = t.hostname || t.host, !t.hostname) throw new Error("Could not determine host. Specify host manually.");\n            const u = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt";\n            !function (e) {\n              e.hostname || (e.hostname = "localhost"), e.path || (e.path = "/"), e.wsOptions || (e.wsOptions = {});\n            }(t);\n\n            const c = function (e, t) {\n              const r = "alis" === e.protocol ? "wss" : "ws";\n              let n = r + "://" + e.hostname + e.path;\n              return e.port && 80 !== e.port && 443 !== e.port && (n = r + "://" + e.hostname + ":" + e.port + e.path), "function" == typeof e.transformWsUrl && (n = e.transformWsUrl(n, e, t)), n;\n            }(t, e);\n\n            return (o = t.my).connectSocket({\n              url: c,\n              protocols: u\n            }), s = function () {\n              const e = new n();\n              return e._write = function (e, t, r) {\n                o.sendSocketMessage({\n                  data: e.buffer,\n                  success: function () {\n                    r();\n                  },\n                  fail: function () {\n                    r(new Error());\n                  }\n                });\n              }, e._flush = function (e) {\n                o.closeSocket({\n                  success: function () {\n                    e();\n                  }\n                });\n              }, e;\n            }(), a = i.obj(), l || (l = !0, o.onSocketOpen(function () {\n              a.setReadable(s), a.setWritable(s), a.emit("connect");\n            }), o.onSocketMessage(function (e) {\n              if ("string" == typeof e.data) {\n                const t = r.from(e.data, "base64");\n                s.push(t);\n              } else {\n                const t = new FileReader();\n                t.addEventListener("load", function () {\n                  let e = t.result;\n                  e = e instanceof ArrayBuffer ? r.from(e) : r.from(e, "utf8"), s.push(e);\n                }), t.readAsArrayBuffer(e.data);\n              }\n            }), o.onSocketClose(function () {\n              a.end(), a.destroy();\n            }), o.onSocketError(function (e) {\n              a.destroy(e);\n            })), a;\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17,\n      duplexify: 20,\n      "readable-stream": 69\n    }],\n    3: [function (e, t, r) {\n      "use strict";\n\n      const n = e("net"),\n            i = e("debug")("mqttjs:tcp");\n\n      t.exports = function (e, t) {\n        t.port = t.port || 1883, t.hostname = t.hostname || t.host || "localhost";\n        const r = t.port,\n              o = t.hostname;\n        return i("port %d and host %s", r, o), n.createConnection(r, o);\n      };\n    }, {\n      debug: 18,\n      net: 16\n    }],\n    4: [function (e, t, r) {\n      "use strict";\n\n      const n = e("tls"),\n            i = e("net"),\n            o = e("debug")("mqttjs:tls");\n\n      t.exports = function (e, t) {\n        t.port = t.port || 8883, t.host = t.hostname || t.host || "localhost", 0 === i.isIP(t.host) && (t.servername = t.host), t.rejectUnauthorized = !1 !== t.rejectUnauthorized, delete t.path, o("port %d host %s rejectUnauthorized %b", t.port, t.host, t.rejectUnauthorized);\n        const r = n.connect(t);\n\n        function s(n) {\n          t.rejectUnauthorized && e.emit("error", n), r.end();\n        }\n\n        return r.on("secureConnect", function () {\n          t.rejectUnauthorized && !r.authorized ? r.emit("error", new Error("TLS not authorized")) : r.removeListener("error", s);\n        }), r.on("error", s), r;\n      };\n    }, {\n      debug: 18,\n      net: 16,\n      tls: 16\n    }],\n    5: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          const i = e("ws"),\n                o = e("debug")("mqttjs:ws"),\n                s = e("duplexify"),\n                a = e("readable-stream").Transform,\n                l = ["rejectUnauthorized", "ca", "cert", "key", "pfx", "passphrase"],\n                u = void 0 !== r && "browser" === r.title || "function" == typeof __webpack_require__;\n\n          function c(e, t) {\n            let r = e.protocol + "://" + e.hostname + ":" + e.port + e.path;\n            return "function" == typeof e.transformWsUrl && (r = e.transformWsUrl(r, e, t)), r;\n          }\n\n          function h(e) {\n            const t = e;\n            return e.hostname || (t.hostname = "localhost"), e.port || ("wss" === e.protocol ? t.port = 443 : t.port = 80), e.path || (t.path = "/"), e.wsOptions || (t.wsOptions = {}), u || "wss" !== e.protocol || l.forEach(function (r) {\n              Object.prototype.hasOwnProperty.call(e, r) && !Object.prototype.hasOwnProperty.call(e.wsOptions, r) && (t.wsOptions[r] = e[r]);\n            }), t;\n          }\n\n          t.exports = u ? function (e, t) {\n            let r;\n            o("browserStreamBuilder");\n\n            const i = function (e) {\n              const t = h(e);\n\n              if (t.hostname || (t.hostname = t.host), !t.hostname) {\n                if ("undefined" == typeof document) throw new Error("Could not determine host. Specify host manually.");\n                const e = new URL(document.URL);\n                t.hostname = e.hostname, t.port || (t.port = e.port);\n              }\n\n              return void 0 === t.objectMode && (t.objectMode = !(!0 === t.binary || void 0 === t.binary)), t;\n            }(t).browserBufferSize || 524288,\n                  l = t.browserBufferTimeout || 1e3,\n                  u = !t.objectMode,\n                  f = function (e, t) {\n              const r = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt",\n                    n = c(t, e),\n                    i = new WebSocket(n, [r]);\n              return i.binaryType = "arraybuffer", i;\n            }(e, t),\n                  p = function (e, t, r) {\n              const n = new a({\n                objectModeMode: e.objectMode\n              });\n              return n._write = t, n._flush = r, n;\n            }(t, function e(t, r, o) {\n              f.bufferedAmount > i && setTimeout(e, l, t, r, o), u && "string" == typeof t && (t = n.from(t, "utf8"));\n\n              try {\n                f.send(t);\n              } catch (e) {\n                return o(e);\n              }\n\n              o();\n            }, function (e) {\n              f.close(), e();\n            });\n\n            t.objectMode || (p._writev = v), p.on("close", () => {\n              f.close();\n            });\n            const d = void 0 !== f.addEventListener;\n\n            function g() {\n              r.setReadable(p), r.setWritable(p), r.emit("connect");\n            }\n\n            function y() {\n              r.end(), r.destroy();\n            }\n\n            function b(e) {\n              r.destroy(e);\n            }\n\n            function m(e) {\n              let t = e.data;\n              t = t instanceof ArrayBuffer ? n.from(t) : n.from(t, "utf8"), p.push(t);\n            }\n\n            function v(e, t) {\n              const r = new Array(e.length);\n\n              for (let t = 0; t < e.length; t++) "string" == typeof e[t].chunk ? r[t] = n.from(e[t], "utf8") : r[t] = e[t].chunk;\n\n              this._write(n.concat(r), "binary", t);\n            }\n\n            return f.readyState === f.OPEN ? r = p : (r = r = s(void 0, void 0, t), t.objectMode || (r._writev = v), d ? f.addEventListener("open", g) : f.onopen = g), r.socket = f, d ? (f.addEventListener("close", y), f.addEventListener("error", b), f.addEventListener("message", m)) : (f.onclose = y, f.onerror = b, f.onmessage = m), r;\n          } : function (e, t) {\n            o("streamBuilder");\n\n            const r = h(t),\n                  n = c(r, e),\n                  s = function (e, t, r) {\n              o("createWebSocket"), o("protocol: " + r.protocolId + " " + r.protocolVersion);\n              const n = "MQIsdp" === r.protocolId && 3 === r.protocolVersion ? "mqttv3.1" : "mqtt";\n              return o("creating new Websocket for url: " + t + " and protocol: " + n), new i(t, [n], r.wsOptions);\n            }(0, n, r),\n                  a = i.createWebSocketStream(s, r.wsOptions);\n\n            return a.url = n, s.on("close", () => {\n              a.destroy();\n            }), a;\n          };\n        }).call(this);\n      }).call(this, e("_process"), e("buffer").Buffer);\n    }, {\n      _process: 50,\n      buffer: 17,\n      debug: 18,\n      duplexify: 20,\n      "readable-stream": 69,\n      ws: 80\n    }],\n    6: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("readable-stream").Transform,\n                i = e("duplexify");\n          let o, s, a;\n\n          t.exports = function (e, t) {\n            if (t.hostname = t.hostname || t.host, !t.hostname) throw new Error("Could not determine host. Specify host manually.");\n            const l = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt";\n            !function (e) {\n              e.hostname || (e.hostname = "localhost"), e.path || (e.path = "/"), e.wsOptions || (e.wsOptions = {});\n            }(t);\n\n            const u = function (e, t) {\n              const r = "wxs" === e.protocol ? "wss" : "ws";\n              let n = r + "://" + e.hostname + e.path;\n              return e.port && 80 !== e.port && 443 !== e.port && (n = r + "://" + e.hostname + ":" + e.port + e.path), "function" == typeof e.transformWsUrl && (n = e.transformWsUrl(n, e, t)), n;\n            }(t, e);\n\n            o = wx.connectSocket({\n              url: u,\n              protocols: [l]\n            }), s = function () {\n              const e = new n();\n              return e._write = function (e, t, r) {\n                o.send({\n                  data: e.buffer,\n                  success: function () {\n                    r();\n                  },\n                  fail: function (e) {\n                    r(new Error(e));\n                  }\n                });\n              }, e._flush = function (e) {\n                o.close({\n                  success: function () {\n                    e();\n                  }\n                });\n              }, e;\n            }(), (a = i.obj())._destroy = function (e, t) {\n              o.close({\n                success: function () {\n                  t && t(e);\n                }\n              });\n            };\n            const c = a.destroy;\n            return a.destroy = function () {\n              a.destroy = c;\n              const e = this;\n              setTimeout(function () {\n                o.close({\n                  fail: function () {\n                    e._destroy(new Error());\n                  }\n                });\n              }, 0);\n            }.bind(a), o.onOpen(function () {\n              a.setReadable(s), a.setWritable(s), a.emit("connect");\n            }), o.onMessage(function (e) {\n              let t = e.data;\n              t = t instanceof ArrayBuffer ? r.from(t) : r.from(t, "utf8"), s.push(t);\n            }), o.onClose(function () {\n              a.end(), a.destroy();\n            }), o.onError(function (e) {\n              a.destroy(new Error(e.errMsg));\n            }), a;\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17,\n      duplexify: 20,\n      "readable-stream": 69\n    }],\n    7: [function (e, t, r) {\n      "use strict";\n\n      function n() {\n        if (!(this instanceof n)) return new n();\n        this.nextId = Math.max(1, Math.floor(65535 * Math.random()));\n      }\n\n      n.prototype.allocate = function () {\n        const e = this.nextId++;\n        return 65536 === this.nextId && (this.nextId = 1), e;\n      }, n.prototype.getLastAllocated = function () {\n        return 1 === this.nextId ? 65535 : this.nextId - 1;\n      }, n.prototype.register = function (e) {\n        return !0;\n      }, n.prototype.deallocate = function (e) {}, n.prototype.clear = function () {}, t.exports = n;\n    }, {}],\n    8: [function (e, t, r) {\n      "use strict";\n\n      const n = e("xtend"),\n            i = e("readable-stream").Readable,\n            o = {\n        objectMode: !0\n      },\n            s = {\n        clean: !0\n      };\n\n      function a(e) {\n        if (!(this instanceof a)) return new a(e);\n        this.options = e || {}, this.options = n(s, e), this._inflights = new Map();\n      }\n\n      a.prototype.put = function (e, t) {\n        return this._inflights.set(e.messageId, e), t && t(), this;\n      }, a.prototype.createStream = function () {\n        const e = new i(o),\n              t = [];\n        let r = !1,\n            n = 0;\n        return this._inflights.forEach(function (e, r) {\n          t.push(e);\n        }), e._read = function () {\n          !r && n < t.length ? this.push(t[n++]) : this.push(null);\n        }, e.destroy = function () {\n          if (r) return;\n          const e = this;\n          r = !0, setTimeout(function () {\n            e.emit("close");\n          }, 0);\n        }, e;\n      }, a.prototype.del = function (e, t) {\n        return (e = this._inflights.get(e.messageId)) ? (this._inflights.delete(e.messageId), t(null, e)) : t && t(new Error("missing packet")), this;\n      }, a.prototype.get = function (e, t) {\n        return (e = this._inflights.get(e.messageId)) ? t(null, e) : t && t(new Error("missing packet")), this;\n      }, a.prototype.close = function (e) {\n        this.options.clean && (this._inflights = null), e && e();\n      }, t.exports = a;\n    }, {\n      "readable-stream": 69,\n      xtend: 81\n    }],\n    9: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        if (!(this instanceof n)) return new n(e);\n        this.aliasToTopic = {}, this.max = e;\n      }\n\n      n.prototype.put = function (e, t) {\n        return !(0 === t || t > this.max) && (this.aliasToTopic[t] = e, this.length = Object.keys(this.aliasToTopic).length, !0);\n      }, n.prototype.getTopicByAlias = function (e) {\n        return this.aliasToTopic[e];\n      }, n.prototype.clear = function () {\n        this.aliasToTopic = {};\n      }, t.exports = n;\n    }, {}],\n    10: [function (e, t, r) {\n      "use strict";\n\n      const n = e("lru-cache"),\n            i = e("number-allocator").NumberAllocator;\n\n      function o(e) {\n        if (!(this instanceof o)) return new o(e);\n        e > 0 && (this.aliasToTopic = new n({\n          max: e\n        }), this.topicToAlias = {}, this.numberAllocator = new i(1, e), this.max = e, this.length = 0);\n      }\n\n      o.prototype.put = function (e, t) {\n        if (0 === t || t > this.max) return !1;\n        const r = this.aliasToTopic.get(t);\n        return r && delete this.topicToAlias[r], this.aliasToTopic.set(t, e), this.topicToAlias[e] = t, this.numberAllocator.use(t), this.length = this.aliasToTopic.length, !0;\n      }, o.prototype.getTopicByAlias = function (e) {\n        return this.aliasToTopic.get(e);\n      }, o.prototype.getAliasByTopic = function (e) {\n        const t = this.topicToAlias[e];\n        return void 0 !== t && this.aliasToTopic.get(t), t;\n      }, o.prototype.clear = function () {\n        this.aliasToTopic.reset(), this.topicToAlias = {}, this.numberAllocator.clear(), this.length = 0;\n      }, o.prototype.getLruAlias = function () {\n        const e = this.numberAllocator.firstVacant();\n        return e || this.aliasToTopic.keys()[this.aliasToTopic.length - 1];\n      }, t.exports = o;\n    }, {\n      "lru-cache": 37,\n      "number-allocator": 46\n    }],\n    11: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        const t = e.split("/");\n\n        for (let e = 0; e < t.length; e++) if ("+" !== t[e]) {\n          if ("#" === t[e]) return e === t.length - 1;\n          if (-1 !== t[e].indexOf("+") || -1 !== t[e].indexOf("#")) return !1;\n        }\n\n        return !0;\n      }\n\n      t.exports = {\n        validateTopics: function (e) {\n          if (0 === e.length) return "empty_topic_list";\n\n          for (let t = 0; t < e.length; t++) if (!n(e[t])) return e[t];\n\n          return null;\n        }\n      };\n    }, {}],\n    12: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("../client"),\n                i = e("../store"),\n                o = e("url"),\n                s = e("xtend"),\n                a = e("debug")("mqttjs"),\n                l = {};\n\n          function u(e, t) {\n            if (a("connecting to an MQTT broker..."), "object" != typeof e || t || (t = e, e = null), t = t || {}, e) {\n              const r = o.parse(e, !0);\n              if (null != r.port && (r.port = Number(r.port)), null === (t = s(r, t)).protocol) throw new Error("Missing protocol");\n              t.protocol = t.protocol.replace(/:$/, "");\n            }\n\n            if (function (e) {\n              let t;\n              e.auth && ((t = e.auth.match(/^(.+):(.+)$/)) ? (e.username = t[1], e.password = t[2]) : e.username = e.auth);\n            }(t), t.query && "string" == typeof t.query.clientId && (t.clientId = t.query.clientId), t.cert && t.key) {\n              if (!t.protocol) throw new Error("Missing secure protocol key");\n              if (-1 === ["mqtts", "wss", "wxs", "alis"].indexOf(t.protocol)) switch (t.protocol) {\n                case "mqtt":\n                  t.protocol = "mqtts";\n                  break;\n\n                case "ws":\n                  t.protocol = "wss";\n                  break;\n\n                case "wx":\n                  t.protocol = "wxs";\n                  break;\n\n                case "ali":\n                  t.protocol = "alis";\n                  break;\n\n                default:\n                  throw new Error(\'Unknown protocol for secure connection: "\' + t.protocol + \'"!\');\n              }\n            }\n\n            if (!l[t.protocol]) {\n              const e = -1 !== ["mqtts", "wss"].indexOf(t.protocol);\n              t.protocol = ["mqtt", "mqtts", "ws", "wss", "wx", "wxs", "ali", "alis"].filter(function (t, r) {\n                return (!e || r % 2 != 0) && "function" == typeof l[t];\n              })[0];\n            }\n\n            if (!1 === t.clean && !t.clientId) throw new Error("Missing clientId for unclean clients");\n            t.protocol && (t.defaultProtocol = t.protocol);\n            const r = new n(function (e) {\n              return t.servers && (e._reconnectCount && e._reconnectCount !== t.servers.length || (e._reconnectCount = 0), t.host = t.servers[e._reconnectCount].host, t.port = t.servers[e._reconnectCount].port, t.protocol = t.servers[e._reconnectCount].protocol ? t.servers[e._reconnectCount].protocol : t.defaultProtocol, t.hostname = t.host, e._reconnectCount++), a("calling streambuilder for", t.protocol), l[t.protocol](e, t);\n            }, t);\n            return r.on("error", function () {}), r;\n          }\n\n          void 0 !== r && "browser" !== r.title || "function" != typeof __webpack_require__ ? (l.mqtt = e("./tcp"), l.tcp = e("./tcp"), l.ssl = e("./tls"), l.tls = e("./tls"), l.mqtts = e("./tls")) : (l.wx = e("./wx"), l.wxs = e("./wx"), l.ali = e("./ali"), l.alis = e("./ali")), l.ws = e("./ws"), l.wss = e("./ws"), t.exports = u, t.exports.connect = u, t.exports.MqttClient = n, t.exports.Store = i;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "../client": 1,\n      "../store": 8,\n      "./ali": 2,\n      "./tcp": 3,\n      "./tls": 4,\n      "./ws": 5,\n      "./wx": 6,\n      _process: 50,\n      debug: 18,\n      url: 76,\n      xtend: 81\n    }],\n    13: [function (e, t, r) {\n      "use strict";\n\n      r.byteLength = function (e) {\n        var t = u(e),\n            r = t[0],\n            n = t[1];\n        return 3 * (r + n) / 4 - n;\n      }, r.toByteArray = function (e) {\n        var t,\n            r,\n            n = u(e),\n            s = n[0],\n            a = n[1],\n            l = new o(function (e, t, r) {\n          return 3 * (t + r) / 4 - r;\n        }(0, s, a)),\n            c = 0,\n            h = a > 0 ? s - 4 : s;\n\n        for (r = 0; r < h; r += 4) t = i[e.charCodeAt(r)] << 18 | i[e.charCodeAt(r + 1)] << 12 | i[e.charCodeAt(r + 2)] << 6 | i[e.charCodeAt(r + 3)], l[c++] = t >> 16 & 255, l[c++] = t >> 8 & 255, l[c++] = 255 & t;\n\n        2 === a && (t = i[e.charCodeAt(r)] << 2 | i[e.charCodeAt(r + 1)] >> 4, l[c++] = 255 & t);\n        1 === a && (t = i[e.charCodeAt(r)] << 10 | i[e.charCodeAt(r + 1)] << 4 | i[e.charCodeAt(r + 2)] >> 2, l[c++] = t >> 8 & 255, l[c++] = 255 & t);\n        return l;\n      }, r.fromByteArray = function (e) {\n        for (var t, r = e.length, i = r % 3, o = [], s = 0, a = r - i; s < a; s += 16383) o.push(c(e, s, s + 16383 > a ? a : s + 16383));\n\n        1 === i ? (t = e[r - 1], o.push(n[t >> 2] + n[t << 4 & 63] + "==")) : 2 === i && (t = (e[r - 2] << 8) + e[r - 1], o.push(n[t >> 10] + n[t >> 4 & 63] + n[t << 2 & 63] + "="));\n        return o.join("");\n      };\n\n      for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, l = s.length; a < l; ++a) n[a] = s[a], i[s.charCodeAt(a)] = a;\n\n      function u(e) {\n        var t = e.length;\n        if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");\n        var r = e.indexOf("=");\n        return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];\n      }\n\n      function c(e, t, r) {\n        for (var i, o, s = [], a = t; a < r; a += 3) i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(n[(o = i) >> 18 & 63] + n[o >> 12 & 63] + n[o >> 6 & 63] + n[63 & o]);\n\n        return s.join("");\n      }\n\n      i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;\n    }, {}],\n    14: [function (e, t, r) {\n      "use strict";\n\n      const {\n        Buffer: n\n      } = e("buffer"),\n            i = Symbol.for("BufferList");\n\n      function o(e) {\n        if (!(this instanceof o)) return new o(e);\n\n        o._init.call(this, e);\n      }\n\n      o._init = function (e) {\n        Object.defineProperty(this, i, {\n          value: !0\n        }), this._bufs = [], this.length = 0, e && this.append(e);\n      }, o.prototype._new = function (e) {\n        return new o(e);\n      }, o.prototype._offset = function (e) {\n        if (0 === e) return [0, 0];\n        let t = 0;\n\n        for (let r = 0; r < this._bufs.length; r++) {\n          const n = t + this._bufs[r].length;\n          if (e < n || r === this._bufs.length - 1) return [r, e - t];\n          t = n;\n        }\n      }, o.prototype._reverseOffset = function (e) {\n        const t = e[0];\n        let r = e[1];\n\n        for (let e = 0; e < t; e++) r += this._bufs[e].length;\n\n        return r;\n      }, o.prototype.get = function (e) {\n        if (e > this.length || e < 0) return;\n\n        const t = this._offset(e);\n\n        return this._bufs[t[0]][t[1]];\n      }, o.prototype.slice = function (e, t) {\n        return "number" == typeof e && e < 0 && (e += this.length), "number" == typeof t && t < 0 && (t += this.length), this.copy(null, 0, e, t);\n      }, o.prototype.copy = function (e, t, r, i) {\n        if (("number" != typeof r || r < 0) && (r = 0), ("number" != typeof i || i > this.length) && (i = this.length), r >= this.length) return e || n.alloc(0);\n        if (i <= 0) return e || n.alloc(0);\n\n        const o = !!e,\n              s = this._offset(r),\n              a = i - r;\n\n        let l = a,\n            u = o && t || 0,\n            c = s[1];\n\n        if (0 === r && i === this.length) {\n          if (!o) return 1 === this._bufs.length ? this._bufs[0] : n.concat(this._bufs, this.length);\n\n          for (let t = 0; t < this._bufs.length; t++) this._bufs[t].copy(e, u), u += this._bufs[t].length;\n\n          return e;\n        }\n\n        if (l <= this._bufs[s[0]].length - c) return o ? this._bufs[s[0]].copy(e, t, c, c + l) : this._bufs[s[0]].slice(c, c + l);\n        o || (e = n.allocUnsafe(a));\n\n        for (let t = s[0]; t < this._bufs.length; t++) {\n          const r = this._bufs[t].length - c;\n\n          if (!(l > r)) {\n            this._bufs[t].copy(e, u, c, c + l), u += r;\n            break;\n          }\n\n          this._bufs[t].copy(e, u, c), u += r, l -= r, c && (c = 0);\n        }\n\n        return e.length > u ? e.slice(0, u) : e;\n      }, o.prototype.shallowSlice = function (e, t) {\n        if (e = e || 0, t = "number" != typeof t ? this.length : t, e < 0 && (e += this.length), t < 0 && (t += this.length), e === t) return this._new();\n\n        const r = this._offset(e),\n              n = this._offset(t),\n              i = this._bufs.slice(r[0], n[0] + 1);\n\n        return 0 === n[1] ? i.pop() : i[i.length - 1] = i[i.length - 1].slice(0, n[1]), 0 !== r[1] && (i[0] = i[0].slice(r[1])), this._new(i);\n      }, o.prototype.toString = function (e, t, r) {\n        return this.slice(t, r).toString(e);\n      }, o.prototype.consume = function (e) {\n        if (e = Math.trunc(e), Number.isNaN(e) || e <= 0) return this;\n\n        for (; this._bufs.length;) {\n          if (!(e >= this._bufs[0].length)) {\n            this._bufs[0] = this._bufs[0].slice(e), this.length -= e;\n            break;\n          }\n\n          e -= this._bufs[0].length, this.length -= this._bufs[0].length, this._bufs.shift();\n        }\n\n        return this;\n      }, o.prototype.duplicate = function () {\n        const e = this._new();\n\n        for (let t = 0; t < this._bufs.length; t++) e.append(this._bufs[t]);\n\n        return e;\n      }, o.prototype.append = function (e) {\n        if (null == e) return this;\n        if (e.buffer) this._appendBuffer(n.from(e.buffer, e.byteOffset, e.byteLength));else if (Array.isArray(e)) for (let t = 0; t < e.length; t++) this.append(e[t]);else if (this._isBufferList(e)) for (let t = 0; t < e._bufs.length; t++) this.append(e._bufs[t]);else "number" == typeof e && (e = e.toString()), this._appendBuffer(n.from(e));\n        return this;\n      }, o.prototype._appendBuffer = function (e) {\n        this._bufs.push(e), this.length += e.length;\n      }, o.prototype.indexOf = function (e, t, r) {\n        if (void 0 === r && "string" == typeof t && (r = t, t = void 0), "function" == typeof e || Array.isArray(e)) throw new TypeError(\'The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.\');\n        if ("number" == typeof e ? e = n.from([e]) : "string" == typeof e ? e = n.from(e, r) : this._isBufferList(e) ? e = e.slice() : Array.isArray(e.buffer) ? e = n.from(e.buffer, e.byteOffset, e.byteLength) : n.isBuffer(e) || (e = n.from(e)), t = Number(t || 0), isNaN(t) && (t = 0), t < 0 && (t = this.length + t), t < 0 && (t = 0), 0 === e.length) return t > this.length ? this.length : t;\n\n        const i = this._offset(t);\n\n        let o = i[0],\n            s = i[1];\n\n        for (; o < this._bufs.length; o++) {\n          const t = this._bufs[o];\n\n          for (; s < t.length;) {\n            if (t.length - s >= e.length) {\n              const r = t.indexOf(e, s);\n              if (-1 !== r) return this._reverseOffset([o, r]);\n              s = t.length - e.length + 1;\n            } else {\n              const t = this._reverseOffset([o, s]);\n\n              if (this._match(t, e)) return t;\n              s++;\n            }\n          }\n\n          s = 0;\n        }\n\n        return -1;\n      }, o.prototype._match = function (e, t) {\n        if (this.length - e < t.length) return !1;\n\n        for (let r = 0; r < t.length; r++) if (this.get(e + r) !== t[r]) return !1;\n\n        return !0;\n      }, function () {\n        const e = {\n          readDoubleBE: 8,\n          readDoubleLE: 8,\n          readFloatBE: 4,\n          readFloatLE: 4,\n          readInt32BE: 4,\n          readInt32LE: 4,\n          readUInt32BE: 4,\n          readUInt32LE: 4,\n          readInt16BE: 2,\n          readInt16LE: 2,\n          readUInt16BE: 2,\n          readUInt16LE: 2,\n          readInt8: 1,\n          readUInt8: 1,\n          readIntBE: null,\n          readIntLE: null,\n          readUIntBE: null,\n          readUIntLE: null\n        };\n\n        for (const t in e) !function (t) {\n          o.prototype[t] = null === e[t] ? function (e, r) {\n            return this.slice(e, e + r)[t](0, r);\n          } : function (r = 0) {\n            return this.slice(r, r + e[t])[t](0);\n          };\n        }(t);\n      }(), o.prototype._isBufferList = function (e) {\n        return e instanceof o || o.isBufferList(e);\n      }, o.isBufferList = function (e) {\n        return null != e && e[i];\n      }, t.exports = o;\n    }, {\n      buffer: 17\n    }],\n    15: [function (e, t, r) {\n      "use strict";\n\n      const n = e("readable-stream").Duplex,\n            i = e("inherits"),\n            o = e("./BufferList");\n\n      function s(e) {\n        if (!(this instanceof s)) return new s(e);\n\n        if ("function" == typeof e) {\n          this._callback = e;\n\n          const t = function (e) {\n            this._callback && (this._callback(e), this._callback = null);\n          }.bind(this);\n\n          this.on("pipe", function (e) {\n            e.on("error", t);\n          }), this.on("unpipe", function (e) {\n            e.removeListener("error", t);\n          }), e = null;\n        }\n\n        o._init.call(this, e), n.call(this);\n      }\n\n      i(s, n), Object.assign(s.prototype, o.prototype), s.prototype._new = function (e) {\n        return new s(e);\n      }, s.prototype._write = function (e, t, r) {\n        this._appendBuffer(e), "function" == typeof r && r();\n      }, s.prototype._read = function (e) {\n        if (!this.length) return this.push(null);\n        e = Math.min(e, this.length), this.push(this.slice(0, e)), this.consume(e);\n      }, s.prototype.end = function (e) {\n        n.prototype.end.call(this, e), this._callback && (this._callback(null, this.slice()), this._callback = null);\n      }, s.prototype._destroy = function (e, t) {\n        this._bufs.length = 0, this.length = 0, t(e);\n      }, s.prototype._isBufferList = function (e) {\n        return e instanceof s || e instanceof o || s.isBufferList(e);\n      }, s.isBufferList = o.isBufferList, t.exports = s, t.exports.BufferListStream = s, t.exports.BufferList = o;\n    }, {\n      "./BufferList": 14,\n      inherits: 24,\n      "readable-stream": 69\n    }],\n    16: [function (e, t, r) {}, {}],\n    17: [function (e, t, r) {\n      (function (t) {\n        (function () {\n          "use strict";\n\n          var t = e("base64-js"),\n              n = e("ieee754");\n          r.Buffer = s, r.SlowBuffer = function (e) {\n            +e != e && (e = 0);\n            return s.alloc(+e);\n          }, r.INSPECT_MAX_BYTES = 50;\n          var i = 2147483647;\n\n          function o(e) {\n            if (e > i) throw new RangeError(\'The value "\' + e + \'" is invalid for option "size"\');\n            var t = new Uint8Array(e);\n            return t.__proto__ = s.prototype, t;\n          }\n\n          function s(e, t, r) {\n            if ("number" == typeof e) {\n              if ("string" == typeof t) throw new TypeError(\'The "string" argument must be of type string. Received type number\');\n              return u(e);\n            }\n\n            return a(e, t, r);\n          }\n\n          function a(e, t, r) {\n            if ("string" == typeof e) return function (e, t) {\n              "string" == typeof t && "" !== t || (t = "utf8");\n              if (!s.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);\n              var r = 0 | f(e, t),\n                  n = o(r),\n                  i = n.write(e, t);\n              i !== r && (n = n.slice(0, i));\n              return n;\n            }(e, t);\n            if (ArrayBuffer.isView(e)) return c(e);\n            if (null == e) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);\n            if (q(e, ArrayBuffer) || e && q(e.buffer, ArrayBuffer)) return function (e, t, r) {\n              if (t < 0 || e.byteLength < t) throw new RangeError(\'"offset" is outside of buffer bounds\');\n              if (e.byteLength < t + (r || 0)) throw new RangeError(\'"length" is outside of buffer bounds\');\n              var n;\n              n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);\n              return n.__proto__ = s.prototype, n;\n            }(e, t, r);\n            if ("number" == typeof e) throw new TypeError(\'The "value" argument must not be of type number. Received type number\');\n            var n = e.valueOf && e.valueOf();\n            if (null != n && n !== e) return s.from(n, t, r);\n\n            var i = function (e) {\n              if (s.isBuffer(e)) {\n                var t = 0 | h(e.length),\n                    r = o(t);\n                return 0 === r.length ? r : (e.copy(r, 0, 0, t), r);\n              }\n\n              if (void 0 !== e.length) return "number" != typeof e.length || D(e.length) ? o(0) : c(e);\n              if ("Buffer" === e.type && Array.isArray(e.data)) return c(e.data);\n            }(e);\n\n            if (i) return i;\n            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return s.from(e[Symbol.toPrimitive]("string"), t, r);\n            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);\n          }\n\n          function l(e) {\n            if ("number" != typeof e) throw new TypeError(\'"size" argument must be of type number\');\n            if (e < 0) throw new RangeError(\'The value "\' + e + \'" is invalid for option "size"\');\n          }\n\n          function u(e) {\n            return l(e), o(e < 0 ? 0 : 0 | h(e));\n          }\n\n          function c(e) {\n            for (var t = e.length < 0 ? 0 : 0 | h(e.length), r = o(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];\n\n            return r;\n          }\n\n          function h(e) {\n            if (e >= i) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");\n            return 0 | e;\n          }\n\n          function f(e, t) {\n            if (s.isBuffer(e)) return e.length;\n            if (ArrayBuffer.isView(e) || q(e, ArrayBuffer)) return e.byteLength;\n            if ("string" != typeof e) throw new TypeError(\'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type \' + typeof e);\n            var r = e.length,\n                n = arguments.length > 2 && !0 === arguments[2];\n            if (!n && 0 === r) return 0;\n\n            for (var i = !1;;) switch (t) {\n              case "ascii":\n              case "latin1":\n              case "binary":\n                return r;\n\n              case "utf8":\n              case "utf-8":\n                return L(e).length;\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return 2 * r;\n\n              case "hex":\n                return r >>> 1;\n\n              case "base64":\n                return j(e).length;\n\n              default:\n                if (i) return n ? -1 : L(e).length;\n                t = ("" + t).toLowerCase(), i = !0;\n            }\n          }\n\n          function p(e, t, r) {\n            var n = e[t];\n            e[t] = e[r], e[r] = n;\n          }\n\n          function d(e, t, r, n, i) {\n            if (0 === e.length) return -1;\n\n            if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), D(r = +r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {\n              if (i) return -1;\n              r = e.length - 1;\n            } else if (r < 0) {\n              if (!i) return -1;\n              r = 0;\n            }\n\n            if ("string" == typeof t && (t = s.from(t, n)), s.isBuffer(t)) return 0 === t.length ? -1 : g(e, t, r, n, i);\n            if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : g(e, [t], r, n, i);\n            throw new TypeError("val must be string, number or Buffer");\n          }\n\n          function g(e, t, r, n, i) {\n            var o,\n                s = 1,\n                a = e.length,\n                l = t.length;\n\n            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {\n              if (e.length < 2 || t.length < 2) return -1;\n              s = 2, a /= 2, l /= 2, r /= 2;\n            }\n\n            function u(e, t) {\n              return 1 === s ? e[t] : e.readUInt16BE(t * s);\n            }\n\n            if (i) {\n              var c = -1;\n\n              for (o = r; o < a; o++) if (u(e, o) === u(t, -1 === c ? 0 : o - c)) {\n                if (-1 === c && (c = o), o - c + 1 === l) return c * s;\n              } else -1 !== c && (o -= o - c), c = -1;\n            } else for (r + l > a && (r = a - l), o = r; o >= 0; o--) {\n              for (var h = !0, f = 0; f < l; f++) if (u(e, o + f) !== u(t, f)) {\n                h = !1;\n                break;\n              }\n\n              if (h) return o;\n            }\n\n            return -1;\n          }\n\n          function y(e, t, r, n) {\n            r = Number(r) || 0;\n            var i = e.length - r;\n            n ? (n = Number(n)) > i && (n = i) : n = i;\n            var o = t.length;\n            n > o / 2 && (n = o / 2);\n\n            for (var s = 0; s < n; ++s) {\n              var a = parseInt(t.substr(2 * s, 2), 16);\n              if (D(a)) return s;\n              e[r + s] = a;\n            }\n\n            return s;\n          }\n\n          function b(e, t, r, n) {\n            return U(L(t, e.length - r), e, r, n);\n          }\n\n          function m(e, t, r, n) {\n            return U(function (e) {\n              for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));\n\n              return t;\n            }(t), e, r, n);\n          }\n\n          function v(e, t, r, n) {\n            return m(e, t, r, n);\n          }\n\n          function w(e, t, r, n) {\n            return U(j(t), e, r, n);\n          }\n\n          function _(e, t, r, n) {\n            return U(function (e, t) {\n              for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);\n\n              return o;\n            }(t, e.length - r), e, r, n);\n          }\n\n          function k(e, r, n) {\n            return 0 === r && n === e.length ? t.fromByteArray(e) : t.fromByteArray(e.slice(r, n));\n          }\n\n          function S(e, t, r) {\n            r = Math.min(e.length, r);\n\n            for (var n = [], i = t; i < r;) {\n              var o,\n                  s,\n                  a,\n                  l,\n                  u = e[i],\n                  c = null,\n                  h = u > 239 ? 4 : u > 223 ? 3 : u > 191 ? 2 : 1;\n              if (i + h <= r) switch (h) {\n                case 1:\n                  u < 128 && (c = u);\n                  break;\n\n                case 2:\n                  128 == (192 & (o = e[i + 1])) && (l = (31 & u) << 6 | 63 & o) > 127 && (c = l);\n                  break;\n\n                case 3:\n                  o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (l = (15 & u) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (l < 55296 || l > 57343) && (c = l);\n                  break;\n\n                case 4:\n                  o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (l = (15 & u) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && l < 1114112 && (c = l);\n              }\n              null === c ? (c = 65533, h = 1) : c > 65535 && (c -= 65536, n.push(c >>> 10 & 1023 | 55296), c = 56320 | 1023 & c), n.push(c), i += h;\n            }\n\n            return function (e) {\n              var t = e.length;\n              if (t <= E) return String.fromCharCode.apply(String, e);\n              var r = "",\n                  n = 0;\n\n              for (; n < t;) r += String.fromCharCode.apply(String, e.slice(n, n += E));\n\n              return r;\n            }(n);\n          }\n\n          r.kMaxLength = i, s.TYPED_ARRAY_SUPPORT = function () {\n            try {\n              var e = new Uint8Array(1);\n              return e.__proto__ = {\n                __proto__: Uint8Array.prototype,\n                foo: function () {\n                  return 42;\n                }\n              }, 42 === e.foo();\n            } catch (e) {\n              return !1;\n            }\n          }(), s.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(s.prototype, "parent", {\n            enumerable: !0,\n            get: function () {\n              if (s.isBuffer(this)) return this.buffer;\n            }\n          }), Object.defineProperty(s.prototype, "offset", {\n            enumerable: !0,\n            get: function () {\n              if (s.isBuffer(this)) return this.byteOffset;\n            }\n          }), "undefined" != typeof Symbol && null != Symbol.species && s[Symbol.species] === s && Object.defineProperty(s, Symbol.species, {\n            value: null,\n            configurable: !0,\n            enumerable: !1,\n            writable: !1\n          }), s.poolSize = 8192, s.from = function (e, t, r) {\n            return a(e, t, r);\n          }, s.prototype.__proto__ = Uint8Array.prototype, s.__proto__ = Uint8Array, s.alloc = function (e, t, r) {\n            return function (e, t, r) {\n              return l(e), e <= 0 ? o(e) : void 0 !== t ? "string" == typeof r ? o(e).fill(t, r) : o(e).fill(t) : o(e);\n            }(e, t, r);\n          }, s.allocUnsafe = function (e) {\n            return u(e);\n          }, s.allocUnsafeSlow = function (e) {\n            return u(e);\n          }, s.isBuffer = function (e) {\n            return null != e && !0 === e._isBuffer && e !== s.prototype;\n          }, s.compare = function (e, t) {\n            if (q(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)), q(t, Uint8Array) && (t = s.from(t, t.offset, t.byteLength)), !s.isBuffer(e) || !s.isBuffer(t)) throw new TypeError(\'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array\');\n            if (e === t) return 0;\n\n            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {\n              r = e[i], n = t[i];\n              break;\n            }\n\n            return r < n ? -1 : n < r ? 1 : 0;\n          }, s.isEncoding = function (e) {\n            switch (String(e).toLowerCase()) {\n              case "hex":\n              case "utf8":\n              case "utf-8":\n              case "ascii":\n              case "latin1":\n              case "binary":\n              case "base64":\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return !0;\n\n              default:\n                return !1;\n            }\n          }, s.concat = function (e, t) {\n            if (!Array.isArray(e)) throw new TypeError(\'"list" argument must be an Array of Buffers\');\n            if (0 === e.length) return s.alloc(0);\n            var r;\n            if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;\n            var n = s.allocUnsafe(t),\n                i = 0;\n\n            for (r = 0; r < e.length; ++r) {\n              var o = e[r];\n              if (q(o, Uint8Array) && (o = s.from(o)), !s.isBuffer(o)) throw new TypeError(\'"list" argument must be an Array of Buffers\');\n              o.copy(n, i), i += o.length;\n            }\n\n            return n;\n          }, s.byteLength = f, s.prototype._isBuffer = !0, s.prototype.swap16 = function () {\n            var e = this.length;\n            if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");\n\n            for (var t = 0; t < e; t += 2) p(this, t, t + 1);\n\n            return this;\n          }, s.prototype.swap32 = function () {\n            var e = this.length;\n            if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");\n\n            for (var t = 0; t < e; t += 4) p(this, t, t + 3), p(this, t + 1, t + 2);\n\n            return this;\n          }, s.prototype.swap64 = function () {\n            var e = this.length;\n            if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");\n\n            for (var t = 0; t < e; t += 8) p(this, t, t + 7), p(this, t + 1, t + 6), p(this, t + 2, t + 5), p(this, t + 3, t + 4);\n\n            return this;\n          }, s.prototype.toString = function () {\n            var e = this.length;\n            return 0 === e ? "" : 0 === arguments.length ? S(this, 0, e) : function (e, t, r) {\n              var n = !1;\n              if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";\n              if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";\n              if ((r >>>= 0) <= (t >>>= 0)) return "";\n\n              for (e || (e = "utf8");;) switch (e) {\n                case "hex":\n                  return x(this, t, r);\n\n                case "utf8":\n                case "utf-8":\n                  return S(this, t, r);\n\n                case "ascii":\n                  return C(this, t, r);\n\n                case "latin1":\n                case "binary":\n                  return T(this, t, r);\n\n                case "base64":\n                  return k(this, t, r);\n\n                case "ucs2":\n                case "ucs-2":\n                case "utf16le":\n                case "utf-16le":\n                  return A(this, t, r);\n\n                default:\n                  if (n) throw new TypeError("Unknown encoding: " + e);\n                  e = (e + "").toLowerCase(), n = !0;\n              }\n            }.apply(this, arguments);\n          }, s.prototype.toLocaleString = s.prototype.toString, s.prototype.equals = function (e) {\n            if (!s.isBuffer(e)) throw new TypeError("Argument must be a Buffer");\n            return this === e || 0 === s.compare(this, e);\n          }, s.prototype.inspect = function () {\n            var e = "",\n                t = r.INSPECT_MAX_BYTES;\n            return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">";\n          }, s.prototype.compare = function (e, t, r, n, i) {\n            if (q(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)), !s.isBuffer(e)) throw new TypeError(\'The "target" argument must be one of type Buffer or Uint8Array. Received type \' + typeof e);\n            if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");\n            if (n >= i && t >= r) return 0;\n            if (n >= i) return -1;\n            if (t >= r) return 1;\n            if (t >>>= 0, r >>>= 0, n >>>= 0, i >>>= 0, this === e) return 0;\n\n            for (var o = i - n, a = r - t, l = Math.min(o, a), u = this.slice(n, i), c = e.slice(t, r), h = 0; h < l; ++h) if (u[h] !== c[h]) {\n              o = u[h], a = c[h];\n              break;\n            }\n\n            return o < a ? -1 : a < o ? 1 : 0;\n          }, s.prototype.includes = function (e, t, r) {\n            return -1 !== this.indexOf(e, t, r);\n          }, s.prototype.indexOf = function (e, t, r) {\n            return d(this, e, t, r, !0);\n          }, s.prototype.lastIndexOf = function (e, t, r) {\n            return d(this, e, t, r, !1);\n          }, s.prototype.write = function (e, t, r, n) {\n            if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {\n              if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");\n              t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);\n            }\n            var i = this.length - t;\n            if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");\n            n || (n = "utf8");\n\n            for (var o = !1;;) switch (n) {\n              case "hex":\n                return y(this, e, t, r);\n\n              case "utf8":\n              case "utf-8":\n                return b(this, e, t, r);\n\n              case "ascii":\n                return m(this, e, t, r);\n\n              case "latin1":\n              case "binary":\n                return v(this, e, t, r);\n\n              case "base64":\n                return w(this, e, t, r);\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return _(this, e, t, r);\n\n              default:\n                if (o) throw new TypeError("Unknown encoding: " + n);\n                n = ("" + n).toLowerCase(), o = !0;\n            }\n          }, s.prototype.toJSON = function () {\n            return {\n              type: "Buffer",\n              data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n          };\n          var E = 4096;\n\n          function C(e, t, r) {\n            var n = "";\n            r = Math.min(e.length, r);\n\n            for (var i = t; i < r; ++i) n += String.fromCharCode(127 & e[i]);\n\n            return n;\n          }\n\n          function T(e, t, r) {\n            var n = "";\n            r = Math.min(e.length, r);\n\n            for (var i = t; i < r; ++i) n += String.fromCharCode(e[i]);\n\n            return n;\n          }\n\n          function x(e, t, r) {\n            var n = e.length;\n            (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);\n\n            for (var i = "", o = t; o < r; ++o) i += N(e[o]);\n\n            return i;\n          }\n\n          function A(e, t, r) {\n            for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);\n\n            return i;\n          }\n\n          function I(e, t, r) {\n            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");\n            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");\n          }\n\n          function P(e, t, r, n, i, o) {\n            if (!s.isBuffer(e)) throw new TypeError(\'"buffer" argument must be a Buffer instance\');\n            if (t > i || t < o) throw new RangeError(\'"value" argument is out of bounds\');\n            if (r + n > e.length) throw new RangeError("Index out of range");\n          }\n\n          function O(e, t, r, n, i, o) {\n            if (r + n > e.length) throw new RangeError("Index out of range");\n            if (r < 0) throw new RangeError("Index out of range");\n          }\n\n          function B(e, t, r, i, o) {\n            return t = +t, r >>>= 0, o || O(e, 0, r, 4), n.write(e, t, r, i, 23, 4), r + 4;\n          }\n\n          function R(e, t, r, i, o) {\n            return t = +t, r >>>= 0, o || O(e, 0, r, 8), n.write(e, t, r, i, 52, 8), r + 8;\n          }\n\n          s.prototype.slice = function (e, t) {\n            var r = this.length;\n            e = ~~e, t = void 0 === t ? r : ~~t, e < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), t < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), t < e && (t = e);\n            var n = this.subarray(e, t);\n            return n.__proto__ = s.prototype, n;\n          }, s.prototype.readUIntLE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;\n\n            return n;\n          }, s.prototype.readUIntBE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e + --t], i = 1; t > 0 && (i *= 256);) n += this[e + --t] * i;\n\n            return n;\n          }, s.prototype.readUInt8 = function (e, t) {\n            return e >>>= 0, t || I(e, 1, this.length), this[e];\n          }, s.prototype.readUInt16LE = function (e, t) {\n            return e >>>= 0, t || I(e, 2, this.length), this[e] | this[e + 1] << 8;\n          }, s.prototype.readUInt16BE = function (e, t) {\n            return e >>>= 0, t || I(e, 2, this.length), this[e] << 8 | this[e + 1];\n          }, s.prototype.readUInt32LE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];\n          }, s.prototype.readUInt32BE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n          }, s.prototype.readIntLE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;\n\n            return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;\n          }, s.prototype.readIntBE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256);) o += this[e + --n] * i;\n\n            return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;\n          }, s.prototype.readInt8 = function (e, t) {\n            return e >>>= 0, t || I(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];\n          }, s.prototype.readInt16LE = function (e, t) {\n            e >>>= 0, t || I(e, 2, this.length);\n            var r = this[e] | this[e + 1] << 8;\n            return 32768 & r ? 4294901760 | r : r;\n          }, s.prototype.readInt16BE = function (e, t) {\n            e >>>= 0, t || I(e, 2, this.length);\n            var r = this[e + 1] | this[e] << 8;\n            return 32768 & r ? 4294901760 | r : r;\n          }, s.prototype.readInt32LE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n          }, s.prototype.readInt32BE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n          }, s.prototype.readFloatLE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), n.read(this, e, !0, 23, 4);\n          }, s.prototype.readFloatBE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), n.read(this, e, !1, 23, 4);\n          }, s.prototype.readDoubleLE = function (e, t) {\n            return e >>>= 0, t || I(e, 8, this.length), n.read(this, e, !0, 52, 8);\n          }, s.prototype.readDoubleBE = function (e, t) {\n            return e >>>= 0, t || I(e, 8, this.length), n.read(this, e, !1, 52, 8);\n          }, s.prototype.writeUIntLE = function (e, t, r, n) {\n            (e = +e, t >>>= 0, r >>>= 0, n) || P(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);\n            var i = 1,\n                o = 0;\n\n            for (this[t] = 255 & e; ++o < r && (i *= 256);) this[t + o] = e / i & 255;\n\n            return t + r;\n          }, s.prototype.writeUIntBE = function (e, t, r, n) {\n            (e = +e, t >>>= 0, r >>>= 0, n) || P(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);\n            var i = r - 1,\n                o = 1;\n\n            for (this[t + i] = 255 & e; --i >= 0 && (o *= 256);) this[t + i] = e / o & 255;\n\n            return t + r;\n          }, s.prototype.writeUInt8 = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;\n          }, s.prototype.writeUInt16LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;\n          }, s.prototype.writeUInt16BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;\n          }, s.prototype.writeUInt32LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;\n          }, s.prototype.writeUInt32BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;\n          }, s.prototype.writeIntLE = function (e, t, r, n) {\n            if (e = +e, t >>>= 0, !n) {\n              var i = Math.pow(2, 8 * r - 1);\n              P(this, e, t, r, i - 1, -i);\n            }\n\n            var o = 0,\n                s = 1,\n                a = 0;\n\n            for (this[t] = 255 & e; ++o < r && (s *= 256);) e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n\n            return t + r;\n          }, s.prototype.writeIntBE = function (e, t, r, n) {\n            if (e = +e, t >>>= 0, !n) {\n              var i = Math.pow(2, 8 * r - 1);\n              P(this, e, t, r, i - 1, -i);\n            }\n\n            var o = r - 1,\n                s = 1,\n                a = 0;\n\n            for (this[t + o] = 255 & e; --o >= 0 && (s *= 256);) e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n\n            return t + r;\n          }, s.prototype.writeInt8 = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;\n          }, s.prototype.writeInt16LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;\n          }, s.prototype.writeInt16BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;\n          }, s.prototype.writeInt32LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n          }, s.prototype.writeInt32BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;\n          }, s.prototype.writeFloatLE = function (e, t, r) {\n            return B(this, e, t, !0, r);\n          }, s.prototype.writeFloatBE = function (e, t, r) {\n            return B(this, e, t, !1, r);\n          }, s.prototype.writeDoubleLE = function (e, t, r) {\n            return R(this, e, t, !0, r);\n          }, s.prototype.writeDoubleBE = function (e, t, r) {\n            return R(this, e, t, !1, r);\n          }, s.prototype.copy = function (e, t, r, n) {\n            if (!s.isBuffer(e)) throw new TypeError("argument should be a Buffer");\n            if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r) return 0;\n            if (0 === e.length || 0 === this.length) return 0;\n            if (t < 0) throw new RangeError("targetStart out of bounds");\n            if (r < 0 || r >= this.length) throw new RangeError("Index out of range");\n            if (n < 0) throw new RangeError("sourceEnd out of bounds");\n            n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);\n            var i = n - r;\n            if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);else if (this === e && r < t && t < n) for (var o = i - 1; o >= 0; --o) e[o + t] = this[o + r];else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);\n            return i;\n          }, s.prototype.fill = function (e, t, r, n) {\n            if ("string" == typeof e) {\n              if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");\n              if ("string" == typeof n && !s.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);\n\n              if (1 === e.length) {\n                var i = e.charCodeAt(0);\n                ("utf8" === n && i < 128 || "latin1" === n) && (e = i);\n              }\n            } else "number" == typeof e && (e &= 255);\n\n            if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");\n            if (r <= t) return this;\n            var o;\n            if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) this[o] = e;else {\n              var a = s.isBuffer(e) ? e : s.from(e, n),\n                  l = a.length;\n              if (0 === l) throw new TypeError(\'The value "\' + e + \'" is invalid for argument "value"\');\n\n              for (o = 0; o < r - t; ++o) this[o + t] = a[o % l];\n            }\n            return this;\n          };\n          var M = /[^+/0-9A-Za-z-_]/g;\n\n          function N(e) {\n            return e < 16 ? "0" + e.toString(16) : e.toString(16);\n          }\n\n          function L(e, t) {\n            var r;\n            t = t || 1 / 0;\n\n            for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {\n              if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {\n                if (!i) {\n                  if (r > 56319) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                  }\n\n                  if (s + 1 === n) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                  }\n\n                  i = r;\n                  continue;\n                }\n\n                if (r < 56320) {\n                  (t -= 3) > -1 && o.push(239, 191, 189), i = r;\n                  continue;\n                }\n\n                r = 65536 + (i - 55296 << 10 | r - 56320);\n              } else i && (t -= 3) > -1 && o.push(239, 191, 189);\n\n              if (i = null, r < 128) {\n                if ((t -= 1) < 0) break;\n                o.push(r);\n              } else if (r < 2048) {\n                if ((t -= 2) < 0) break;\n                o.push(r >> 6 | 192, 63 & r | 128);\n              } else if (r < 65536) {\n                if ((t -= 3) < 0) break;\n                o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);\n              } else {\n                if (!(r < 1114112)) throw new Error("Invalid code point");\n                if ((t -= 4) < 0) break;\n                o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);\n              }\n            }\n\n            return o;\n          }\n\n          function j(e) {\n            return t.toByteArray(function (e) {\n              if ((e = (e = e.split("=")[0]).trim().replace(M, "")).length < 2) return "";\n\n              for (; e.length % 4 != 0;) e += "=";\n\n              return e;\n            }(e));\n          }\n\n          function U(e, t, r, n) {\n            for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];\n\n            return i;\n          }\n\n          function q(e, t) {\n            return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;\n          }\n\n          function D(e) {\n            return e != e;\n          }\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "base64-js": 13,\n      buffer: 17,\n      ieee754: 23\n    }],\n    18: [function (e, t, r) {\n      (function (n) {\n        (function () {\n          r.formatArgs = function (e) {\n            if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), !this.useColors) return;\n            const r = "color: " + this.color;\n            e.splice(1, 0, r, "color: inherit");\n            let n = 0,\n                i = 0;\n            e[0].replace(/%[a-zA-Z%]/g, e => {\n              "%%" !== e && "%c" === e && (i = ++n);\n            }), e.splice(i, 0, r);\n          }, r.save = function (e) {\n            try {\n              e ? r.storage.setItem("debug", e) : r.storage.removeItem("debug");\n            } catch (e) {}\n          }, r.load = function () {\n            let e;\n\n            try {\n              e = r.storage.getItem("debug");\n            } catch (e) {}\n\n            !e && void 0 !== n && "env" in n && (e = n.env.DEBUG);\n            return e;\n          }, r.useColors = function () {\n            if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return !0;\n            if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) return !1;\n            return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n          }, r.storage = function () {\n            try {\n              return localStorage;\n            } catch (e) {}\n          }(), r.destroy = (() => {\n            let e = !1;\n            return () => {\n              e || (e = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));\n            };\n          })(), r.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], r.log = console.debug || console.log || (() => {}), t.exports = e("./common")(r);\n          const {\n            formatters: i\n          } = t.exports;\n\n          i.j = function (e) {\n            try {\n              return JSON.stringify(e);\n            } catch (e) {\n              return "[UnexpectedJSONParseError]: " + e.message;\n            }\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./common": 19,\n      _process: 50\n    }],\n    19: [function (e, t, r) {\n      t.exports = function (t) {\n        function r(e) {\n          let t,\n              i,\n              o,\n              s = null;\n\n          function a(...e) {\n            if (!a.enabled) return;\n            const n = a,\n                  i = Number(new Date()),\n                  o = i - (t || i);\n            n.diff = o, n.prev = t, n.curr = i, t = i, e[0] = r.coerce(e[0]), "string" != typeof e[0] && e.unshift("%O");\n            let s = 0;\n            e[0] = e[0].replace(/%([a-zA-Z%])/g, (t, i) => {\n              if ("%%" === t) return "%";\n              s++;\n              const o = r.formatters[i];\n\n              if ("function" == typeof o) {\n                const r = e[s];\n                t = o.call(n, r), e.splice(s, 1), s--;\n              }\n\n              return t;\n            }), r.formatArgs.call(n, e), (n.log || r.log).apply(n, e);\n          }\n\n          return a.namespace = e, a.useColors = r.useColors(), a.color = r.selectColor(e), a.extend = n, a.destroy = r.destroy, Object.defineProperty(a, "enabled", {\n            enumerable: !0,\n            configurable: !1,\n            get: () => null !== s ? s : (i !== r.namespaces && (i = r.namespaces, o = r.enabled(e)), o),\n            set: e => {\n              s = e;\n            }\n          }), "function" == typeof r.init && r.init(a), a;\n        }\n\n        function n(e, t) {\n          const n = r(this.namespace + (void 0 === t ? ":" : t) + e);\n          return n.log = this.log, n;\n        }\n\n        function i(e) {\n          return e.toString().substring(2, e.toString().length - 2).replace(/\\.\\*\\?$/, "*");\n        }\n\n        return r.debug = r, r.default = r, r.coerce = function (e) {\n          return e instanceof Error ? e.stack || e.message : e;\n        }, r.disable = function () {\n          const e = [...r.names.map(i), ...r.skips.map(i).map(e => "-" + e)].join(",");\n          return r.enable(""), e;\n        }, r.enable = function (e) {\n          let t;\n          r.save(e), r.namespaces = e, r.names = [], r.skips = [];\n          const n = ("string" == typeof e ? e : "").split(/[\\s,]+/),\n                i = n.length;\n\n          for (t = 0; t < i; t++) n[t] && ("-" === (e = n[t].replace(/\\*/g, ".*?"))[0] ? r.skips.push(new RegExp("^" + e.substr(1) + "$")) : r.names.push(new RegExp("^" + e + "$")));\n        }, r.enabled = function (e) {\n          if ("*" === e[e.length - 1]) return !0;\n          let t, n;\n\n          for (t = 0, n = r.skips.length; t < n; t++) if (r.skips[t].test(e)) return !1;\n\n          for (t = 0, n = r.names.length; t < n; t++) if (r.names[t].test(e)) return !0;\n\n          return !1;\n        }, r.humanize = e("ms"), r.destroy = function () {\n          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");\n        }, Object.keys(t).forEach(e => {\n          r[e] = t[e];\n        }), r.names = [], r.skips = [], r.formatters = {}, r.selectColor = function (e) {\n          let t = 0;\n\n          for (let r = 0; r < e.length; r++) t = (t << 5) - t + e.charCodeAt(r), t |= 0;\n\n          return r.colors[Math.abs(t) % r.colors.length];\n        }, r.enable(r.load()), r;\n      };\n    }, {\n      ms: 45\n    }],\n    20: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          var i = e("readable-stream"),\n              o = e("end-of-stream"),\n              s = e("inherits"),\n              a = e("stream-shift"),\n              l = n.from && n.from !== Uint8Array.from ? n.from([0]) : new n([0]),\n              u = function (e, t) {\n            e._corked ? e.once("uncork", t) : t();\n          },\n              c = function (e, t) {\n            return function (r) {\n              r ? function (e, t) {\n                e._autoDestroy && e.destroy(t);\n              }(e, "premature close" === r.message ? null : r) : t && !e._ended && e.end();\n            };\n          },\n              h = function () {},\n              f = function (e, t, r) {\n            if (!(this instanceof f)) return new f(e, t, r);\n            i.Duplex.call(this, r), this._writable = null, this._readable = null, this._readable2 = null, this._autoDestroy = !r || !1 !== r.autoDestroy, this._forwardDestroy = !r || !1 !== r.destroy, this._forwardEnd = !r || !1 !== r.end, this._corked = 1, this._ondrain = null, this._drained = !1, this._forwarding = !1, this._unwrite = null, this._unread = null, this._ended = !1, this.destroyed = !1, e && this.setWritable(e), t && this.setReadable(t);\n          };\n\n          s(f, i.Duplex), f.obj = function (e, t, r) {\n            return r || (r = {}), r.objectMode = !0, r.highWaterMark = 16, new f(e, t, r);\n          }, f.prototype.cork = function () {\n            1 == ++this._corked && this.emit("cork");\n          }, f.prototype.uncork = function () {\n            this._corked && 0 == --this._corked && this.emit("uncork");\n          }, f.prototype.setWritable = function (e) {\n            if (this._unwrite && this._unwrite(), this.destroyed) e && e.destroy && e.destroy();else if (null !== e && !1 !== e) {\n              var t = this,\n                  n = o(e, {\n                writable: !0,\n                readable: !1\n              }, c(this, this._forwardEnd)),\n                  i = function () {\n                var e = t._ondrain;\n                t._ondrain = null, e && e();\n              };\n\n              this._unwrite && r.nextTick(i), this._writable = e, this._writable.on("drain", i), this._unwrite = function () {\n                t._writable.removeListener("drain", i), n();\n              }, this.uncork();\n            } else this.end();\n          }, f.prototype.setReadable = function (e) {\n            if (this._unread && this._unread(), this.destroyed) e && e.destroy && e.destroy();else {\n              if (null === e || !1 === e) return this.push(null), void this.resume();\n\n              var t,\n                  r = this,\n                  n = o(e, {\n                writable: !1,\n                readable: !0\n              }, c(this)),\n                  s = function () {\n                r._forward();\n              },\n                  a = function () {\n                r.push(null);\n              };\n\n              this._drained = !0, this._readable = e, this._readable2 = e._readableState ? e : (t = e, new i.Readable({\n                objectMode: !0,\n                highWaterMark: 16\n              }).wrap(t)), this._readable2.on("readable", s), this._readable2.on("end", a), this._unread = function () {\n                r._readable2.removeListener("readable", s), r._readable2.removeListener("end", a), n();\n              }, this._forward();\n            }\n          }, f.prototype._read = function () {\n            this._drained = !0, this._forward();\n          }, f.prototype._forward = function () {\n            if (!this._forwarding && this._readable2 && this._drained) {\n              var e;\n\n              for (this._forwarding = !0; this._drained && null !== (e = a(this._readable2));) this.destroyed || (this._drained = this.push(e));\n\n              this._forwarding = !1;\n            }\n          }, f.prototype.destroy = function (e, t) {\n            if (t || (t = h), this.destroyed) return t(null);\n            this.destroyed = !0;\n            var n = this;\n            r.nextTick(function () {\n              n._destroy(e), t(null);\n            });\n          }, f.prototype._destroy = function (e) {\n            if (e) {\n              var t = this._ondrain;\n              this._ondrain = null, t ? t(e) : this.emit("error", e);\n            }\n\n            this._forwardDestroy && (this._readable && this._readable.destroy && this._readable.destroy(), this._writable && this._writable.destroy && this._writable.destroy()), this.emit("close");\n          }, f.prototype._write = function (e, t, r) {\n            if (!this.destroyed) return this._corked ? u(this, this._write.bind(this, e, t, r)) : e === l ? this._finish(r) : this._writable ? void (!1 === this._writable.write(e) ? this._ondrain = r : this.destroyed || r()) : r();\n          }, f.prototype._finish = function (e) {\n            var t = this;\n            this.emit("preend"), u(this, function () {\n              var r, n;\n              r = t._forwardEnd && t._writable, n = function () {\n                !1 === t._writableState.prefinished && (t._writableState.prefinished = !0), t.emit("prefinish"), u(t, e);\n              }, r ? r._writableState && r._writableState.finished ? n() : r._writableState ? r.end(n) : (r.end(), n()) : n();\n            });\n          }, f.prototype.end = function (e, t, r) {\n            return "function" == typeof e ? this.end(null, null, e) : "function" == typeof t ? this.end(e, null, t) : (this._ended = !0, e && this.write(e), this._writableState.ending || this._writableState.destroyed || this.write(l), i.Writable.prototype.end.call(this, r));\n          }, t.exports = f;\n        }).call(this);\n      }).call(this, e("_process"), e("buffer").Buffer);\n    }, {\n      _process: 50,\n      buffer: 17,\n      "end-of-stream": 21,\n      inherits: 24,\n      "readable-stream": 69,\n      "stream-shift": 74\n    }],\n    21: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          var n = e("once"),\n              i = function () {},\n              o = function (e, t, s) {\n            if ("function" == typeof t) return o(e, null, t);\n            t || (t = {}), s = n(s || i);\n\n            var a = e._writableState,\n                l = e._readableState,\n                u = t.readable || !1 !== t.readable && e.readable,\n                c = t.writable || !1 !== t.writable && e.writable,\n                h = !1,\n                f = function () {\n              e.writable || p();\n            },\n                p = function () {\n              c = !1, u || s.call(e);\n            },\n                d = function () {\n              u = !1, c || s.call(e);\n            },\n                g = function (t) {\n              s.call(e, t ? new Error("exited with error code: " + t) : null);\n            },\n                y = function (t) {\n              s.call(e, t);\n            },\n                b = function () {\n              r.nextTick(m);\n            },\n                m = function () {\n              if (!h) return (!u || l && l.ended && !l.destroyed) && (!c || a && a.ended && !a.destroyed) ? void 0 : s.call(e, new Error("premature close"));\n            },\n                v = function () {\n              e.req.on("finish", p);\n            };\n\n            return !function (e) {\n              return e.setHeader && "function" == typeof e.abort;\n            }(e) ? c && !a && (e.on("end", f), e.on("close", f)) : (e.on("complete", p), e.on("abort", b), e.req ? v() : e.on("request", v)), function (e) {\n              return e.stdio && Array.isArray(e.stdio) && 3 === e.stdio.length;\n            }(e) && e.on("exit", g), e.on("end", d), e.on("finish", p), !1 !== t.error && e.on("error", y), e.on("close", b), function () {\n              h = !0, e.removeListener("complete", p), e.removeListener("abort", b), e.removeListener("request", v), e.req && e.req.removeListener("finish", p), e.removeListener("end", f), e.removeListener("close", f), e.removeListener("finish", p), e.removeListener("exit", g), e.removeListener("end", d), e.removeListener("error", y), e.removeListener("close", b);\n            };\n          };\n\n          t.exports = o;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50,\n      once: 48\n    }],\n    22: [function (e, t, r) {\n      var n = Object.create || function (e) {\n        var t = function () {};\n\n        return t.prototype = e, new t();\n      },\n          i = Object.keys || function (e) {\n        var t = [];\n\n        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);\n\n        return r;\n      },\n          o = Function.prototype.bind || function (e) {\n        var t = this;\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n\n      function s() {\n        this._events && Object.prototype.hasOwnProperty.call(this, "_events") || (this._events = n(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n      }\n\n      t.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._maxListeners = void 0;\n      var a,\n          l = 10;\n\n      try {\n        var u = {};\n        Object.defineProperty && Object.defineProperty(u, "x", {\n          value: 0\n        }), a = 0 === u.x;\n      } catch (e) {\n        a = !1;\n      }\n\n      function c(e) {\n        return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners;\n      }\n\n      function h(e, t, r, i) {\n        var o, s, a;\n        if ("function" != typeof r) throw new TypeError(\'"listener" argument must be a function\');\n\n        if ((s = e._events) ? (s.newListener && (e.emit("newListener", t, r.listener ? r.listener : r), s = e._events), a = s[t]) : (s = e._events = n(null), e._eventsCount = 0), a) {\n          if ("function" == typeof a ? a = s[t] = i ? [r, a] : [a, r] : i ? a.unshift(r) : a.push(r), !a.warned && (o = c(e)) && o > 0 && a.length > o) {\n            a.warned = !0;\n            var l = new Error("Possible EventEmitter memory leak detected. " + a.length + \' "\' + String(t) + \'" listeners added. Use emitter.setMaxListeners() to increase limit.\');\n            l.name = "MaxListenersExceededWarning", l.emitter = e, l.type = t, l.count = a.length, "object" == typeof console && console.warn && console.warn("%s: %s", l.name, l.message);\n          }\n        } else a = s[t] = r, ++e._eventsCount;\n\n        return e;\n      }\n\n      function f() {\n        if (!this.fired) switch (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length) {\n          case 0:\n            return this.listener.call(this.target);\n\n          case 1:\n            return this.listener.call(this.target, arguments[0]);\n\n          case 2:\n            return this.listener.call(this.target, arguments[0], arguments[1]);\n\n          case 3:\n            return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);\n\n          default:\n            for (var e = new Array(arguments.length), t = 0; t < e.length; ++t) e[t] = arguments[t];\n\n            this.listener.apply(this.target, e);\n        }\n      }\n\n      function p(e, t, r) {\n        var n = {\n          fired: !1,\n          wrapFn: void 0,\n          target: e,\n          type: t,\n          listener: r\n        },\n            i = o.call(f, n);\n        return i.listener = r, n.wrapFn = i, i;\n      }\n\n      function d(e, t, r) {\n        var n = e._events;\n        if (!n) return [];\n        var i = n[t];\n        return i ? "function" == typeof i ? r ? [i.listener || i] : [i] : r ? function (e) {\n          for (var t = new Array(e.length), r = 0; r < t.length; ++r) t[r] = e[r].listener || e[r];\n\n          return t;\n        }(i) : y(i, i.length) : [];\n      }\n\n      function g(e) {\n        var t = this._events;\n\n        if (t) {\n          var r = t[e];\n          if ("function" == typeof r) return 1;\n          if (r) return r.length;\n        }\n\n        return 0;\n      }\n\n      function y(e, t) {\n        for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];\n\n        return r;\n      }\n\n      a ? Object.defineProperty(s, "defaultMaxListeners", {\n        enumerable: !0,\n        get: function () {\n          return l;\n        },\n        set: function (e) {\n          if ("number" != typeof e || e < 0 || e != e) throw new TypeError(\'"defaultMaxListeners" must be a positive number\');\n          l = e;\n        }\n      }) : s.defaultMaxListeners = l, s.prototype.setMaxListeners = function (e) {\n        if ("number" != typeof e || e < 0 || isNaN(e)) throw new TypeError(\'"n" argument must be a positive number\');\n        return this._maxListeners = e, this;\n      }, s.prototype.getMaxListeners = function () {\n        return c(this);\n      }, s.prototype.emit = function (e) {\n        var t,\n            r,\n            n,\n            i,\n            o,\n            s,\n            a = "error" === e;\n        if (s = this._events) a = a && null == s.error;else if (!a) return !1;\n\n        if (a) {\n          if (arguments.length > 1 && (t = arguments[1]), t instanceof Error) throw t;\n          var l = new Error(\'Unhandled "error" event. (\' + t + ")");\n          throw l.context = t, l;\n        }\n\n        if (!(r = s[e])) return !1;\n        var u = "function" == typeof r;\n\n        switch (n = arguments.length) {\n          case 1:\n            !function (e, t, r) {\n              if (t) e.call(r);else for (var n = e.length, i = y(e, n), o = 0; o < n; ++o) i[o].call(r);\n            }(r, u, this);\n            break;\n\n          case 2:\n            !function (e, t, r, n) {\n              if (t) e.call(r, n);else for (var i = e.length, o = y(e, i), s = 0; s < i; ++s) o[s].call(r, n);\n            }(r, u, this, arguments[1]);\n            break;\n\n          case 3:\n            !function (e, t, r, n, i) {\n              if (t) e.call(r, n, i);else for (var o = e.length, s = y(e, o), a = 0; a < o; ++a) s[a].call(r, n, i);\n            }(r, u, this, arguments[1], arguments[2]);\n            break;\n\n          case 4:\n            !function (e, t, r, n, i, o) {\n              if (t) e.call(r, n, i, o);else for (var s = e.length, a = y(e, s), l = 0; l < s; ++l) a[l].call(r, n, i, o);\n            }(r, u, this, arguments[1], arguments[2], arguments[3]);\n            break;\n\n          default:\n            for (i = new Array(n - 1), o = 1; o < n; o++) i[o - 1] = arguments[o];\n\n            !function (e, t, r, n) {\n              if (t) e.apply(r, n);else for (var i = e.length, o = y(e, i), s = 0; s < i; ++s) o[s].apply(r, n);\n            }(r, u, this, i);\n        }\n\n        return !0;\n      }, s.prototype.addListener = function (e, t) {\n        return h(this, e, t, !1);\n      }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function (e, t) {\n        return h(this, e, t, !0);\n      }, s.prototype.once = function (e, t) {\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        return this.on(e, p(this, e, t)), this;\n      }, s.prototype.prependOnceListener = function (e, t) {\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        return this.prependListener(e, p(this, e, t)), this;\n      }, s.prototype.removeListener = function (e, t) {\n        var r, i, o, s, a;\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        if (!(i = this._events)) return this;\n        if (!(r = i[e])) return this;\n        if (r === t || r.listener === t) 0 == --this._eventsCount ? this._events = n(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || t));else if ("function" != typeof r) {\n          for (o = -1, s = r.length - 1; s >= 0; s--) if (r[s] === t || r[s].listener === t) {\n            a = r[s].listener, o = s;\n            break;\n          }\n\n          if (o < 0) return this;\n          0 === o ? r.shift() : function (e, t) {\n            for (var r = t, n = r + 1, i = e.length; n < i; r += 1, n += 1) e[r] = e[n];\n\n            e.pop();\n          }(r, o), 1 === r.length && (i[e] = r[0]), i.removeListener && this.emit("removeListener", e, a || t);\n        }\n        return this;\n      }, s.prototype.removeAllListeners = function (e) {\n        var t, r, o;\n        if (!(r = this._events)) return this;\n        if (!r.removeListener) return 0 === arguments.length ? (this._events = n(null), this._eventsCount = 0) : r[e] && (0 == --this._eventsCount ? this._events = n(null) : delete r[e]), this;\n\n        if (0 === arguments.length) {\n          var s,\n              a = i(r);\n\n          for (o = 0; o < a.length; ++o) "removeListener" !== (s = a[o]) && this.removeAllListeners(s);\n\n          return this.removeAllListeners("removeListener"), this._events = n(null), this._eventsCount = 0, this;\n        }\n\n        if ("function" == typeof (t = r[e])) this.removeListener(e, t);else if (t) for (o = t.length - 1; o >= 0; o--) this.removeListener(e, t[o]);\n        return this;\n      }, s.prototype.listeners = function (e) {\n        return d(this, e, !0);\n      }, s.prototype.rawListeners = function (e) {\n        return d(this, e, !1);\n      }, s.listenerCount = function (e, t) {\n        return "function" == typeof e.listenerCount ? e.listenerCount(t) : g.call(e, t);\n      }, s.prototype.listenerCount = g, s.prototype.eventNames = function () {\n        return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n      };\n    }, {}],\n    23: [function (e, t, r) {\n      r.read = function (e, t, r, n, i) {\n        var o,\n            s,\n            a = 8 * i - n - 1,\n            l = (1 << a) - 1,\n            u = l >> 1,\n            c = -7,\n            h = r ? i - 1 : 0,\n            f = r ? -1 : 1,\n            p = e[t + h];\n\n        for (h += f, o = p & (1 << -c) - 1, p >>= -c, c += a; c > 0; o = 256 * o + e[t + h], h += f, c -= 8);\n\n        for (s = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; s = 256 * s + e[t + h], h += f, c -= 8);\n\n        if (0 === o) o = 1 - u;else {\n          if (o === l) return s ? NaN : 1 / 0 * (p ? -1 : 1);\n          s += Math.pow(2, n), o -= u;\n        }\n        return (p ? -1 : 1) * s * Math.pow(2, o - n);\n      }, r.write = function (e, t, r, n, i, o) {\n        var s,\n            a,\n            l,\n            u = 8 * o - i - 1,\n            c = (1 << u) - 1,\n            h = c >> 1,\n            f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n            p = n ? 0 : o - 1,\n            d = n ? 1 : -1,\n            g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;\n\n        for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = c) : (s = Math.floor(Math.log(t) / Math.LN2), t * (l = Math.pow(2, -s)) < 1 && (s--, l *= 2), (t += s + h >= 1 ? f / l : f * Math.pow(2, 1 - h)) * l >= 2 && (s++, l /= 2), s + h >= c ? (a = 0, s = c) : s + h >= 1 ? (a = (t * l - 1) * Math.pow(2, i), s += h) : (a = t * Math.pow(2, h - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + p] = 255 & a, p += d, a /= 256, i -= 8);\n\n        for (s = s << i | a, u += i; u > 0; e[r + p] = 255 & s, p += d, s /= 256, u -= 8);\n\n        e[r + p - d] |= 128 * g;\n      };\n    }, {}],\n    24: [function (e, t, r) {\n      "function" == typeof Object.create ? t.exports = function (e, t) {\n        t && (e.super_ = t, e.prototype = Object.create(t.prototype, {\n          constructor: {\n            value: e,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n          }\n        }));\n      } : t.exports = function (e, t) {\n        if (t) {\n          e.super_ = t;\n\n          var r = function () {};\n\n          r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;\n        }\n      };\n    }, {}],\n    25: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n\n      var n = function () {\n        function e(e, t) {\n          this.color = !0, this.key = void 0, this.value = void 0, this.parent = void 0, this.brother = void 0, this.leftChild = void 0, this.rightChild = void 0, this.key = e, this.value = t;\n        }\n\n        return e.prototype.rotateLeft = function () {\n          var e = this.parent,\n              t = this.brother,\n              r = this.leftChild,\n              n = this.rightChild;\n          if (!n) throw new Error("unknown error");\n          var i = n.leftChild,\n              o = n.rightChild;\n          return e && (e.leftChild === this ? e.leftChild = n : e.rightChild === this && (e.rightChild = n)), n.parent = e, n.brother = t, n.leftChild = this, n.rightChild = o, t && (t.brother = n), this.parent = n, this.brother = o, this.leftChild = r, this.rightChild = i, o && (o.parent = n, o.brother = this), r && (r.parent = this, r.brother = i), i && (i.parent = this, i.brother = r), n;\n        }, e.prototype.rotateRight = function () {\n          var e = this.parent,\n              t = this.brother,\n              r = this.leftChild;\n          if (!r) throw new Error("unknown error");\n          var n = this.rightChild,\n              i = r.leftChild,\n              o = r.rightChild;\n          return e && (e.leftChild === this ? e.leftChild = r : e.rightChild === this && (e.rightChild = r)), r.parent = e, r.brother = t, r.leftChild = i, r.rightChild = this, t && (t.brother = r), i && (i.parent = r, i.brother = this), this.parent = r, this.brother = i, this.leftChild = o, this.rightChild = n, o && (o.parent = this, o.brother = n), n && (n.parent = this, n.brother = o), r;\n        }, e.prototype.remove = function () {\n          if (this.leftChild || this.rightChild) throw new Error("can only remove leaf node");\n          this.parent && (this === this.parent.leftChild ? this.parent.leftChild = void 0 : this === this.parent.rightChild && (this.parent.rightChild = void 0)), this.brother && (this.brother.brother = void 0), this.key = void 0, this.value = void 0, this.parent = void 0, this.brother = void 0;\n        }, e.TreeNodeColorType = {\n          red: !0,\n          black: !1\n        }, e;\n      }();\n\n      Object.freeze(n), r.default = n;\n    }, {}],\n    26: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      };\n\n      function i(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = [],\n            o = 0,\n            s = 0,\n            a = 0,\n            l = 0,\n            u = 0,\n            c = 0;\n        this.size = function () {\n          return c;\n        }, this.empty = function () {\n          return 0 === c;\n        }, this.clear = function () {\n          o = a = s = l = u = c = 0, f.call(this, i.bucketSize), c = 0;\n        }, this.front = function () {\n          return r[o][s];\n        }, this.back = function () {\n          return r[a][l];\n        }, this.forEach = function (e) {\n          if (!this.empty()) {\n            var t = 0;\n\n            if (o !== a) {\n              for (u = s; u < i.bucketSize; ++u) e(r[o][u], t++);\n\n              for (u = o + 1; u < a; ++u) for (var n = 0; n < i.bucketSize; ++n) e(r[u][n], t++);\n\n              for (u = 0; u <= l; ++u) e(r[a][u], t++);\n            } else for (var u = s; u <= l; ++u) e(r[o][u], t++);\n          }\n        };\n\n        var h = function (e) {\n          var t = o * i.bucketSize + s,\n              r = t + e,\n              n = a * i.bucketSize + l;\n          if (r < t || r > n) throw new Error("pos should more than 0 and less than queue\'s size");\n          return {\n            curNodeBucketIndex: Math.floor(r / i.bucketSize),\n            curNodePointerIndex: r % i.bucketSize\n          };\n        };\n\n        this.getElementByPos = function (e) {\n          var t = h(e),\n              n = t.curNodeBucketIndex,\n              i = t.curNodePointerIndex;\n          return r[n][i];\n        }, this.eraseElementByPos = function (e) {\n          var t = this;\n          if (e < 0 || e > c) throw new Error("pos should more than 0 and less than queue\'s size");\n          if (0 === e) this.popFront();else if (e === this.size()) this.popBack();else {\n            for (var r = [], n = e + 1; n < c; ++n) r.push(this.getElementByPos(n));\n\n            this.cut(e), this.popBack(), r.forEach(function (e) {\n              return t.pushBack(e);\n            });\n          }\n        }, this.eraseElementByValue = function (e) {\n          if (!this.empty()) {\n            var t = [];\n            this.forEach(function (r) {\n              r !== e && t.push(r);\n            });\n\n            for (var r = t.length, n = 0; n < r; ++n) this.setElementByPos(n, t[n]);\n\n            this.cut(r - 1);\n          }\n        };\n\n        var f = function (e) {\n          for (var t = [], n = e * i.sigma, h = Math.max(Math.ceil(n / i.bucketSize), 2), f = 0; f < h; ++f) t.push(new Array(i.bucketSize));\n\n          var p = Math.ceil(e / i.bucketSize),\n              d = Math.floor(h / 2) - Math.floor(p / 2),\n              g = d,\n              y = 0;\n          if (this.size()) for (f = 0; f < p; ++f) {\n            for (var b = 0; b < i.bucketSize; ++b) if (t[d + f][b] = this.front(), this.popFront(), this.empty()) {\n              g = d + f, y = b;\n              break;\n            }\n\n            if (this.empty()) break;\n          }\n          r = t, o = d, s = 0, a = g, l = y, u = h, c = e;\n        };\n\n        this.pushBack = function (e) {\n          this.empty() || (a === u - 1 && l === i.bucketSize - 1 && f.call(this, this.size()), l < i.bucketSize - 1 ? ++l : a < u - 1 && (++a, l = 0)), ++c, r[a][l] = e;\n        }, this.popBack = function () {\n          this.empty() || (1 !== this.size() && (l > 0 ? --l : o < a && (--a, l = i.bucketSize - 1)), c > 0 && --c);\n        }, this.setElementByPos = function (e, t) {\n          var n = h(e),\n              i = n.curNodeBucketIndex,\n              o = n.curNodePointerIndex;\n          r[i][o] = t;\n        }, this.insert = function (e, t, r) {\n          var n = this;\n          if (void 0 === r && (r = 1), 0 === e) for (; r--;) this.pushFront(t);else if (e === this.size()) for (; r--;) this.pushBack(t);else {\n            for (var i = [], o = e; o < c; ++o) i.push(this.getElementByPos(o));\n\n            this.cut(e - 1);\n\n            for (o = 0; o < r; ++o) this.pushBack(t);\n\n            i.forEach(function (e) {\n              return n.pushBack(e);\n            });\n          }\n        }, this.find = function (e) {\n          if (o === a) {\n            for (var t = s; t <= l; ++t) if (r[o][t] === e) return !0;\n\n            return !1;\n          }\n\n          for (t = s; t < i.bucketSize; ++t) if (r[o][t] === e) return !0;\n\n          for (t = o + 1; t < a; ++t) for (var n = 0; n < i.bucketSize; ++n) if (r[t][n] === e) return !0;\n\n          for (t = 0; t <= l; ++t) if (r[a][t] === e) return !0;\n\n          return !1;\n        }, this.reverse = function () {\n          for (var e = 0, t = c - 1; e < t;) {\n            var r = this.getElementByPos(e);\n            this.setElementByPos(e, this.getElementByPos(t)), this.setElementByPos(t, r), ++e, --t;\n          }\n        }, this.unique = function () {\n          if (!this.empty()) {\n            var e = [],\n                t = this.front();\n            this.forEach(function (r, n) {\n              0 !== n && r === t || (e.push(r), t = r);\n            });\n\n            for (var r = 0; r < c; ++r) this.setElementByPos(r, e[r]);\n\n            this.cut(e.length - 1);\n          }\n        }, this.sort = function (e) {\n          var t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          }), t.sort(e);\n\n          for (var r = 0; r < c; ++r) this.setElementByPos(r, t[r]);\n        }, this.pushFront = function (e) {\n          this.empty() || (0 === o && 0 === s && f.call(this, this.size()), s > 0 ? --s : o > 0 && (--o, s = i.bucketSize - 1)), ++c, r[o][s] = e;\n        }, this.popFront = function () {\n          this.empty() || (1 !== this.size() && (s < i.bucketSize - 1 ? ++s : o < a && (++o, s = 0)), c > 0 && --c);\n        }, this.shrinkToFit = function () {\n          var e = this,\n              t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          });\n          var n = t.length;\n          r = [];\n\n          for (var o = Math.ceil(n / i.bucketSize), s = 0; s < o; ++s) r.push(new Array(i.bucketSize));\n\n          this.clear(), t.forEach(function (t) {\n            return e.pushBack(t);\n          });\n        }, this.cut = function (e) {\n          if (e < 0) this.clear();else {\n            var t = h(e),\n                r = t.curNodeBucketIndex,\n                n = t.curNodePointerIndex;\n            a = r, l = n, c = e + 1;\n          }\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  if (0 === c) return [2];\n                  if (o !== a) return [3, 5];\n                  t = s, n.label = 1;\n\n                case 1:\n                  return t <= l ? [4, r[o][t]] : [3, 4];\n\n                case 2:\n                  n.sent(), n.label = 3;\n\n                case 3:\n                  return ++t, [3, 1];\n\n                case 4:\n                  return [2];\n\n                case 5:\n                  t = s, n.label = 6;\n\n                case 6:\n                  return t < i.bucketSize ? [4, r[o][t]] : [3, 9];\n\n                case 7:\n                  n.sent(), n.label = 8;\n\n                case 8:\n                  return ++t, [3, 6];\n\n                case 9:\n                  t = o + 1, n.label = 10;\n\n                case 10:\n                  if (!(t < a)) return [3, 15];\n                  e = 0, n.label = 11;\n\n                case 11:\n                  return e < i.bucketSize ? [4, r[t][e]] : [3, 14];\n\n                case 12:\n                  n.sent(), n.label = 13;\n\n                case 13:\n                  return ++e, [3, 11];\n\n                case 14:\n                  return ++t, [3, 10];\n\n                case 15:\n                  t = 0, n.label = 16;\n\n                case 16:\n                  return t <= l ? [4, r[a][t]] : [3, 19];\n\n                case 17:\n                  n.sent(), n.label = 18;\n\n                case 18:\n                  return ++t, [3, 16];\n\n                case 19:\n                  return [2];\n              }\n            });\n          }();\n        }, function () {\n          var n = i.bucketSize;\n          e.size ? n = e.size() : e.length && (n = e.length);\n          var s = n * i.sigma;\n          u = Math.ceil(s / i.bucketSize), u = Math.max(u, 3);\n\n          for (var l = 0; l < u; ++l) r.push(new Array(i.bucketSize));\n\n          var c = Math.ceil(n / i.bucketSize);\n          o = Math.floor(u / 2) - Math.floor(c / 2), a = o, e.forEach(function (e) {\n            return t.pushBack(e);\n          });\n        }(), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), i.sigma = 3, i.bucketSize = 5e3, Object.freeze(i), r.default = i;\n    }, {}],\n    27: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../LinkList/LinkList"),\n          s = e("../Map/Map");\n\n      function a(e, t, r) {\n        var l = this;\n        if (void 0 === e && (e = []), void 0 === t && (t = a.initSize), r = r || function (e) {\n          var t,\n              r,\n              n = 0,\n              o = "";\n          if ("number" == typeof e) n = ((n = Math.floor(e)) << 5) - n, n &= n;else {\n            o = "string" != typeof e ? JSON.stringify(e) : e;\n\n            try {\n              for (var s = i(o), a = s.next(); !a.done; a = s.next()) {\n                n = (n << 5) - n + a.value.charCodeAt(0), n &= n;\n              }\n            } catch (e) {\n              t = {\n                error: e\n              };\n            } finally {\n              try {\n                a && !a.done && (r = s.return) && r.call(s);\n              } finally {\n                if (t) throw t.error;\n              }\n            }\n          }\n          return n ^= n >>> 16;\n        }, 0 != (t & t - 1)) throw new Error("initBucketNum must be 2 to the power of n");\n        var u = 0,\n            c = [],\n            h = Math.max(a.initSize, Math.min(a.maxSize, t));\n        this.size = function () {\n          return u;\n        }, this.empty = function () {\n          return 0 === u;\n        }, this.clear = function () {\n          u = 0, h = t, c = [];\n        }, this.forEach = function (e) {\n          var t = 0;\n          c.forEach(function (r) {\n            r.forEach(function (r) {\n              e(r, t++);\n            });\n          });\n        };\n        this.setElement = function (e, t) {\n          var n, l;\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n\n          if (null !== t && void 0 !== t) {\n            var f = r(e) & h - 1;\n\n            if (c[f]) {\n              var p = c[f].size();\n\n              if (c[f] instanceof o.default) {\n                try {\n                  for (var d = i(c[f]), g = d.next(); !g.done; g = d.next()) {\n                    var y = g.value;\n                    if (y.key === e) return void (y.value = t);\n                  }\n                } catch (e) {\n                  n = {\n                    error: e\n                  };\n                } finally {\n                  try {\n                    g && !g.done && (l = d.return) && l.call(d);\n                  } finally {\n                    if (n) throw n.error;\n                  }\n                }\n\n                c[f].pushBack({\n                  key: e,\n                  value: t\n                }), c[f].size() >= a.treeifyThreshold && (c[f] = new s.default(c[f]));\n              } else c[f].setElement(e, t);\n\n              var b = c[f].size();\n              u += b - p;\n            } else ++u, c[f] = new o.default([{\n              key: e,\n              value: t\n            }]);\n\n            u > h * a.sigma && function (e) {\n              if (!(e >= a.maxSize)) {\n                h = 2 * e;\n                var t = [];\n                c.forEach(function (n, i) {\n                  if (!n.empty()) {\n                    if (n instanceof o.default && 1 === n.size()) {\n                      var l = n.front(),\n                          u = l.key,\n                          f = l.value;\n                      t[r(u) & h - 1] = new o.default([{\n                        key: u,\n                        value: f\n                      }]);\n                    } else if (n instanceof s.default) {\n                      var p = new o.default(),\n                          d = new o.default();\n                      n.forEach(function (t) {\n                        0 == (r(t.key) & e) ? p.pushBack(t) : d.pushBack(t);\n                      }), p.size() > a.untreeifyThreshold ? t[i] = new s.default(p) : p.size() && (t[i] = p), d.size() > a.untreeifyThreshold ? t[i + e] = new s.default(d) : d.size() && (t[i + e] = d);\n                    } else {\n                      var g = new o.default(),\n                          y = new o.default();\n                      n.forEach(function (t) {\n                        0 == (r(t.key) & e) ? g.pushBack(t) : y.pushBack(t);\n                      }), g.size() && (t[i] = g), y.size() && (t[i + e] = y);\n                    }\n\n                    c[i].clear();\n                  }\n                }), c = t;\n              }\n            }.call(this, h);\n          } else this.eraseElementByKey(e);\n        }, this.getElementByKey = function (e) {\n          var t,\n              n,\n              o = r(e) & h - 1;\n\n          if (c[o]) {\n            if (c[o] instanceof s.default) return c[o].getElementByKey(e);\n\n            try {\n              for (var a = i(c[o]), l = a.next(); !l.done; l = a.next()) {\n                var u = l.value;\n                if (u.key === e) return u.value;\n              }\n            } catch (e) {\n              t = {\n                error: e\n              };\n            } finally {\n              try {\n                l && !l.done && (n = a.return) && n.call(a);\n              } finally {\n                if (t) throw t.error;\n              }\n            }\n          }\n        }, this.eraseElementByKey = function (e) {\n          var t,\n              n,\n              l = r(e) & h - 1;\n\n          if (c[l]) {\n            var f = c[l].size();\n            if (c[l] instanceof s.default) c[l].eraseElementByKey(e), c[l].size() <= a.untreeifyThreshold && (c[l] = new o.default(c[l]));else {\n              var p = -1;\n\n              try {\n                for (var d = i(c[l]), g = d.next(); !g.done; g = d.next()) {\n                  if (++p, g.value.key === e) {\n                    c[l].eraseElementByPos(p);\n                    break;\n                  }\n                }\n              } catch (e) {\n                t = {\n                  error: e\n                };\n              } finally {\n                try {\n                  g && !g.done && (n = d.return) && n.call(d);\n                } finally {\n                  if (t) throw t.error;\n                }\n              }\n            }\n            var y = c[l].size();\n            u += y - f;\n          }\n        }, this.find = function (e) {\n          var t,\n              n,\n              o = r(e) & h - 1;\n          if (!c[o]) return !1;\n          if (c[o] instanceof s.default) return c[o].find(e);\n\n          try {\n            for (var a = i(c[o]), l = a.next(); !l.done; l = a.next()) {\n              if (l.value.key === e) return !0;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              l && !l.done && (n = a.return) && n.call(a);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          return !1;\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t, r, o, s, a;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  e = 0, n.label = 1;\n\n                case 1:\n                  if (!(e < h)) return [3, 10];\n\n                  for (; e < h && !c[e];) ++e;\n\n                  if (e >= h) return [3, 10];\n                  n.label = 2;\n\n                case 2:\n                  n.trys.push([2, 7, 8, 9]), s = void 0, t = i(c[e]), r = t.next(), n.label = 3;\n\n                case 3:\n                  return r.done ? [3, 6] : [4, r.value];\n\n                case 4:\n                  n.sent(), n.label = 5;\n\n                case 5:\n                  return r = t.next(), [3, 3];\n\n                case 6:\n                  return [3, 9];\n\n                case 7:\n                  return o = n.sent(), s = {\n                    error: o\n                  }, [3, 9];\n\n                case 8:\n                  try {\n                    r && !r.done && (a = t.return) && a.call(t);\n                  } finally {\n                    if (s) throw s.error;\n                  }\n\n                  return [7];\n\n                case 9:\n                  return ++e, [3, 1];\n\n                case 10:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          var t = e.key,\n              r = e.value;\n          return l.setElement(t, r);\n        }), Object.freeze(this);\n      }\n\n      a.initSize = 16, a.maxSize = 1 << 30, a.sigma = .75, a.treeifyThreshold = 8, a.untreeifyThreshold = 6, a.minTreeifySize = 64, Object.freeze(a), r.default = a;\n    }, {\n      "../LinkList/LinkList": 29,\n      "../Map/Map": 30\n    }],\n    28: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Set/Set"),\n          s = e("../LinkList/LinkList");\n\n      function a(e, t, r) {\n        var l = this;\n        if (void 0 === e && (e = []), void 0 === t && (t = a.initSize), r = r || function (e) {\n          var t = 0,\n              r = "";\n          if ("number" == typeof e) t = ((t = Math.floor(e)) << 5) - t, t &= t;else {\n            r = "string" != typeof e ? JSON.stringify(e) : e;\n\n            for (var n = 0; n < r.length; n++) {\n              t = (t << 5) - t + r.charCodeAt(n), t &= t;\n            }\n          }\n          return t ^= t >>> 16;\n        }, 0 != (t & t - 1)) throw new Error("initBucketNum must be 2 to the power of n");\n        var u = 0,\n            c = [],\n            h = Math.max(a.initSize, Math.min(a.maxSize, t));\n        this.size = function () {\n          return u;\n        }, this.empty = function () {\n          return 0 === u;\n        }, this.clear = function () {\n          u = 0, h = t, c = [];\n        }, this.forEach = function (e) {\n          var t = 0;\n          c.forEach(function (r) {\n            r.forEach(function (r) {\n              e(r, t++);\n            });\n          });\n        };\n        this.insert = function (e) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n          var t = r(e) & h - 1;\n\n          if (c[t]) {\n            var n = c[t].size();\n\n            if (c[t] instanceof s.default) {\n              if (c[t].find(e)) return;\n              c[t].pushBack(e), c[t].size() >= a.treeifyThreshold && (c[t] = new o.default(c[t]));\n            } else c[t].insert(e);\n\n            var i = c[t].size();\n            u += i - n;\n          } else c[t] = new s.default([e]), ++u;\n\n          u > h * a.sigma && function (e) {\n            if (!(e >= a.maxSize)) {\n              h = 2 * e;\n              var t = [];\n              c.forEach(function (n, i) {\n                if (!n.empty()) {\n                  if (n instanceof s.default && 1 === n.size()) {\n                    var l = n.front();\n                    if (void 0 === l) throw new Error("unknown error");\n                    t[r(l) & h - 1] = new s.default([l]);\n                  } else if (n instanceof o.default) {\n                    var u = new s.default(),\n                        f = new s.default();\n                    n.forEach(function (t) {\n                      0 == (r(t) & e) ? u.pushBack(t) : f.pushBack(t);\n                    }), u.size() > a.untreeifyThreshold ? t[i] = new o.default(u) : u.size() && (t[i] = u), f.size() > a.untreeifyThreshold ? t[i + e] = new o.default(f) : f.size() && (t[i + e] = f);\n                  } else {\n                    var p = new s.default(),\n                        d = new s.default();\n                    n.forEach(function (t) {\n                      0 == (r(t) & e) ? p.pushBack(t) : d.pushBack(t);\n                    }), p.size() && (t[i] = p), d.size() && (t[i + e] = d);\n                  }\n\n                  c[i].clear();\n                }\n              }), c = t;\n            }\n          }.call(this, h);\n        }, this.eraseElementByValue = function (e) {\n          var t = r(e) & h - 1;\n\n          if (c[t]) {\n            var n = c[t].size();\n            c[t].eraseElementByValue(e), c[t] instanceof o.default && c[t].size() <= a.untreeifyThreshold && (c[t] = new s.default(c[t]));\n            var i = c[t].size();\n            u += i - n;\n          }\n        }, this.find = function (e) {\n          var t = r(e) & h - 1;\n          return !!c[t] && c[t].find(e);\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t, r, o, s, a;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  e = 0, n.label = 1;\n\n                case 1:\n                  if (!(e < h)) return [3, 10];\n\n                  for (; e < h && !c[e];) ++e;\n\n                  if (e >= h) return [3, 10];\n                  n.label = 2;\n\n                case 2:\n                  n.trys.push([2, 7, 8, 9]), s = void 0, t = i(c[e]), r = t.next(), n.label = 3;\n\n                case 3:\n                  return r.done ? [3, 6] : [4, r.value];\n\n                case 4:\n                  n.sent(), n.label = 5;\n\n                case 5:\n                  return r = t.next(), [3, 3];\n\n                case 6:\n                  return [3, 9];\n\n                case 7:\n                  return o = n.sent(), s = {\n                    error: o\n                  }, [3, 9];\n\n                case 8:\n                  try {\n                    r && !r.done && (a = t.return) && a.call(t);\n                  } finally {\n                    if (s) throw s.error;\n                  }\n\n                  return [7];\n\n                case 9:\n                  return ++e, [3, 1];\n\n                case 10:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return l.insert(e);\n        }), Object.freeze(this);\n      }\n\n      a.initSize = 16, a.maxSize = 1 << 30, a.sigma = .75, a.treeifyThreshold = 8, a.untreeifyThreshold = 6, a.minTreeifySize = 64, Object.freeze(a), r.default = a;\n    }, {\n      "../LinkList/LinkList": 29,\n      "../Set/Set": 33\n    }],\n    29: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n\n      var i = function () {\n        return function (e) {\n          this.value = void 0, this.pre = void 0, this.next = void 0, this.value = e;\n        };\n      }();\n\n      function o(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            o = void 0,\n            s = void 0;\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          o = s = void 0, r = 0;\n        }, this.front = function () {\n          return null === o || void 0 === o ? void 0 : o.value;\n        }, this.back = function () {\n          return null === s || void 0 === s ? void 0 : s.value;\n        }, this.forEach = function (e) {\n          for (var t = o, r = 0; t;) {\n            if (void 0 === t.value) throw new Error("unknown error");\n            e(t.value, r++), t = t.next;\n          }\n        }, this.getElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more then 0 and less then the list length");\n\n          for (var t = o; e-- && t;) t = t.next;\n\n          if (!t || void 0 === t.value) throw new Error("unknown error");\n          return t.value;\n        }, this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("erase pos must more then 0 and less then the list length");\n          if (0 === e) this.popFront();else if (e === r - 1) this.popBack();else {\n            for (var t = o; e--;) {\n              if (!(null === t || void 0 === t ? void 0 : t.next)) throw new Error("unknown error");\n              t = t.next;\n            }\n\n            if (!t || !t.pre || !t.next) throw new Error("unknown error");\n            var n = t.pre,\n                i = t.next;\n            i.pre = n, n.next = i, r > 0 && --r;\n          }\n        }, this.eraseElementByValue = function (e) {\n          for (; o && o.value === e;) this.popFront();\n\n          for (; s && s.value === e;) this.popBack();\n\n          if (o) for (var t = o; t;) {\n            if (t.value === e) {\n              var n = t.pre,\n                  i = t.next;\n              i && (i.pre = n), n && (n.next = i), r > 0 && --r;\n            }\n\n            t = t.next;\n          }\n        }, this.pushBack = function (e) {\n          if (null === e || void 0 === e) throw new Error("you can\'t push null or undefined here");\n          ++r;\n          var t = new i(e);\n          s ? (s.next = t, t.pre = s, s = t) : o = s = t;\n        }, this.popBack = function () {\n          s && (r > 0 && --r, s && (o === s ? o = s = void 0 : (s = s.pre) && (s.next = void 0)));\n        }, this.setElementByPos = function (e, t) {\n          if (null === t || void 0 === t) throw new Error("you can\'t set null or undefined here");\n          if (e < 0 || e >= r) throw new Error("pos must more then 0 and less then the list length");\n\n          for (var n = o; e--;) {\n            if (!n) throw new Error("unknown error");\n            n = n.next;\n          }\n\n          n && (n.value = t);\n        }, this.insert = function (e, t, n) {\n          if (void 0 === n && (n = 1), null === t || void 0 === t) throw new Error("you can\'t insert null or undefined here");\n          if (e < 0 || e > r) throw new Error("insert pos must more then 0 and less then or equal to the list length");\n          if (n < 0) throw new Error("insert size must more than 0");\n          if (0 === e) for (; n--;) this.pushFront(t);else if (e === r) for (; n--;) this.pushBack(t);else {\n            for (var s = o, a = 1; a < e; ++a) {\n              if (!(null === s || void 0 === s ? void 0 : s.next)) throw new Error("unknown error");\n              s = null === s || void 0 === s ? void 0 : s.next;\n            }\n\n            if (!s) throw new Error("unknown error");\n            var l = s.next;\n\n            for (r += n; n--;) s.next = new i(t), s.next.pre = s, s = s.next;\n\n            s.next = l, l && (l.pre = s);\n          }\n        }, this.find = function (e) {\n          for (var t = o; t;) {\n            if (t.value === e) return !0;\n            t = t.next;\n          }\n\n          return !1;\n        }, this.reverse = function () {\n          for (var e = o, t = s, n = 0; e && t && 2 * n < r;) {\n            var i = e.value;\n            e.value = t.value, t.value = i, e = e.next, t = t.pre, ++n;\n          }\n        }, this.unique = function () {\n          for (var e = o; e;) {\n            for (var t = e; t && t.next && t.value === t.next.value;) t = t.next, r > 0 && --r;\n\n            e.next = t.next, e.next && (e.next.pre = e), e = e.next;\n          }\n        }, this.sort = function (e) {\n          var t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          }), t.sort(e);\n          var r = o;\n          t.forEach(function (e) {\n            r && (r.value = e, r = r.next);\n          });\n        }, this.pushFront = function (e) {\n          if (null === e || void 0 === e) throw new Error("you can\'t push null or undefined here");\n          ++r;\n          var t = new i(e);\n          o ? (t.next = o, o.pre = t, o = t) : o = s = t;\n        }, this.popFront = function () {\n          o && (r > 0 && --r, o && (o === s ? o = s = void 0 : (o = o.next) && (o.pre = void 0)));\n        }, this.merge = function (e) {\n          var t = this,\n              n = o;\n          e.forEach(function (e) {\n            for (; n && void 0 !== n.value && n.value <= e;) n = n.next;\n\n            if (void 0 === n) t.pushBack(e), n = s;else if (n === o) t.pushFront(e), n = o;else {\n              ++r;\n              var a = n.pre;\n              a && (a.next = new i(e), a.next.pre = a, a.next.next = n, n && (n.pre = a.next));\n            }\n          });\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e;\n            return n(this, function (t) {\n              switch (t.label) {\n                case 0:\n                  e = o, t.label = 1;\n\n                case 1:\n                  if (void 0 === e) return [3, 3];\n                  if (!e.value) throw new Error("unknown error");\n                  return [4, e.value];\n\n                case 2:\n                  return t.sent(), e = e.next, [3, 1];\n\n                case 3:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return t.pushBack(e);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(o), r.default = o;\n    }, {}],\n    30: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Base/TreeNode");\n\n      function s(e, t) {\n        var r = this;\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e < t ? -1 : e > t ? 1 : 0;\n        };\n        var s = 0,\n            a = new o.default();\n        a.color = o.default.TreeNodeColorType.black, this.size = function () {\n          return s;\n        }, this.empty = function () {\n          return 0 === s;\n        }, this.clear = function () {\n          s = 0, a.key = a.value = void 0, a.leftChild = a.rightChild = a.brother = void 0;\n        };\n\n        var l = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.leftChild ? l(e.leftChild) : e;\n        },\n            u = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.rightChild ? u(e.rightChild) : e;\n        };\n\n        this.front = function () {\n          if (!this.empty()) {\n            var e = l(a);\n            if (void 0 === e.key || void 0 === e.value) throw new Error("unknown error");\n            return {\n              key: e.key,\n              value: e.value\n            };\n          }\n        }, this.back = function () {\n          if (!this.empty()) {\n            var e = u(a);\n            if (void 0 === e.key || void 0 === e.value) throw new Error("unknown error");\n            return {\n              key: e.key,\n              value: e.value\n            };\n          }\n        }, this.forEach = function (e) {\n          var t,\n              r,\n              n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              e(s.value, n++);\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        }, this.getElementByPos = function (e) {\n          var t, r;\n          if (e < 0 || e >= this.size()) throw new Error("pos must more than 0 and less than set\'s size");\n          var n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              var a = s.value;\n              if (n === e) return a;\n              ++n;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          throw new Error("unknown Error");\n        };\n\n        var c = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) {\n            var n = t(e.key, r);\n            return 0 === n ? {\n              key: e.key,\n              value: e.value\n            } : n < 0 ? c(e.rightChild, r) : c(e.leftChild, r) || {\n              key: e.key,\n              value: e.value\n            };\n          }\n        };\n\n        this.lowerBound = function (e) {\n          return c(a, e);\n        };\n\n        var h = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) return t(e.key, r) <= 0 ? h(e.rightChild, r) : h(e.leftChild, r) || {\n            key: e.key,\n            value: e.value\n          };\n        };\n\n        this.upperBound = function (e) {\n          return h(a, e);\n        };\n\n        var f = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) {\n            var n = t(e.key, r);\n            return 0 === n ? {\n              key: e.key,\n              value: e.value\n            } : n > 0 ? f(e.leftChild, r) : f(e.rightChild, r) || {\n              key: e.key,\n              value: e.value\n            };\n          }\n        };\n\n        this.reverseLowerBound = function (e) {\n          return f(a, e);\n        };\n\n        var p = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) return t(e.key, r) >= 0 ? p(e.leftChild, r) : p(e.rightChild, r) || {\n            key: e.key,\n            value: e.value\n          };\n        };\n\n        this.reverseUpperBound = function (e) {\n          return p(a, e);\n        };\n\n        var d = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (e.color !== o.default.TreeNodeColorType.red) {\n            var r = e.brother;\n            if (!r) throw new Error("unknown error");\n\n            if (e === t.leftChild) {\n              if (r.color === o.default.TreeNodeColorType.red) {\n                r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n                var n = t.rotateLeft();\n                a === t && (a = n), d(e);\n              } else if (r.color === o.default.TreeNodeColorType.black) if (r.rightChild && r.rightChild.color === o.default.TreeNodeColorType.red) {\n                r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n                n = t.rotateLeft();\n                a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n              } else if (r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || !r.leftChild || r.leftChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, d(t));else {\n                r.color = o.default.TreeNodeColorType.red, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n                n = r.rotateRight();\n                a === r && (a = n), d(e);\n              }\n            } else if (e === t.rightChild) if (r.color === o.default.TreeNodeColorType.red) {\n              r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n              n = t.rotateRight();\n              a === t && (a = n), d(e);\n            } else if (r.color === o.default.TreeNodeColorType.black) if (r.leftChild && r.leftChild.color === o.default.TreeNodeColorType.red) {\n              r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n              n = t.rotateRight();\n              a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n            } else if (r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || !r.rightChild || r.rightChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, d(t));else {\n              r.color = o.default.TreeNodeColorType.red, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n              n = r.rotateLeft();\n              a === r && (a = n), d(e);\n            }\n          } else e.color = o.default.TreeNodeColorType.black;\n        },\n            g = function (e) {\n          for (var t = e; t.leftChild || t.rightChild;) {\n            if (t.rightChild) {\n              t = l(t.rightChild);\n              var r = e.key;\n              e.key = t.key, t.key = r;\n              var n = e.value;\n              e.value = t.value, t.value = n, e = t;\n            }\n\n            if (t.leftChild) {\n              t = u(t.leftChild);\n              r = e.key;\n              e.key = t.key, t.key = r;\n              n = e.value;\n              e.value = t.value, t.value = n, e = t;\n            }\n          }\n\n          d(t), t && t.remove(), --s, a.color = o.default.TreeNodeColorType.black;\n        },\n            y = function (e, t) {\n          return !(!e || void 0 === e.key) && (!!y(e.leftChild, t) || !!t(e) || y(e.rightChild, t));\n        };\n\n        this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= s) throw new Error("pos must more than 0 and less than set\'s size");\n          var t = 0;\n          y(a, function (r) {\n            return e === t ? (g(r), !0) : (++t, !1);\n          });\n        }, this.eraseElementByKey = function (e) {\n          if (!this.empty()) {\n            var r = v(a, e);\n            void 0 !== r && void 0 !== r.key && 0 === t(r.key, e) && g(r);\n          }\n        };\n\n        var b = function (e, r) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          var n = t(r, e.key);\n          return n < 0 ? e.leftChild ? b(e.leftChild, r) : (e.leftChild = new o.default(), e.leftChild.parent = e, e.leftChild.brother = e.rightChild, e.rightChild && (e.rightChild.brother = e.leftChild), e.leftChild) : n > 0 ? e.rightChild ? b(e.rightChild, r) : (e.rightChild = new o.default(), e.rightChild.parent = e, e.rightChild.brother = e.leftChild, e.leftChild && (e.leftChild.brother = e.rightChild), e.rightChild) : e;\n        },\n            m = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (t.color !== o.default.TreeNodeColorType.black && t.color === o.default.TreeNodeColorType.red) {\n            var r = t.brother,\n                n = t.parent;\n            if (!n) throw new Error("unknown error");\n            if (r && r.color === o.default.TreeNodeColorType.red) r.color = t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red, m(n);else if (!r || r.color === o.default.TreeNodeColorType.black) if (t === n.leftChild) {\n              if (e === t.leftChild) {\n                t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n                var i = n.rotateRight();\n                n === a && (a = i);\n              } else if (e === t.rightChild) {\n                i = t.rotateLeft();\n                n === a && (a = i), m(t);\n              }\n            } else if (t === n.rightChild) if (e === t.leftChild) {\n              i = t.rotateRight();\n              n === a && (a = i), m(t);\n            } else if (e === t.rightChild) {\n              t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n              i = n.rotateLeft();\n              n === a && (a = i);\n            }\n          }\n        };\n\n        this.setElement = function (e, r) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n\n          if (null !== r && void 0 !== r) {\n            if (this.empty()) return ++s, a.key = e, a.value = r, void (a.color = o.default.TreeNodeColorType.black);\n            var n = b(a, e);\n            void 0 === n.key || 0 !== t(n.key, e) ? (++s, n.key = e, n.value = r, m(n), a.color = o.default.TreeNodeColorType.black) : n.value = r;\n          } else this.eraseElementByKey(e);\n        };\n\n        var v = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(r, e.key);\n            return n < 0 ? v(e.leftChild, r) : n > 0 ? v(e.rightChild, r) : e;\n          }\n        };\n\n        this.find = function (e) {\n          return !!v(a, e);\n        }, this.getElementByKey = function (e) {\n          var t = v(a, e);\n          if (void 0 === (null === t || void 0 === t ? void 0 : t.key) || void 0 === (null === t || void 0 === t ? void 0 : t.value)) throw new Error("unknown error");\n          return t.value;\n        }, this.union = function (e) {\n          var t = this;\n          e.forEach(function (e) {\n            var r = e.key,\n                n = e.value;\n            return t.setElement(r, n);\n          });\n        }, this.getHeight = function () {\n          if (this.empty()) return 0;\n\n          var e = function (t) {\n            return t ? Math.max(e(t.leftChild), e(t.rightChild)) + 1 : 1;\n          };\n\n          return e(a);\n        };\n\n        var w = function (e) {\n          return n(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e && void 0 !== e.key && void 0 !== e.value ? [5, i(w(e.leftChild))] : [2];\n\n              case 1:\n                return t.sent(), [4, {\n                  key: e.key,\n                  value: e.value\n                }];\n\n              case 2:\n                return t.sent(), [5, i(w(e.rightChild))];\n\n              case 3:\n                return t.sent(), [2];\n            }\n          });\n        };\n\n        this[Symbol.iterator] = function () {\n          return w(a);\n        }, e.forEach(function (e) {\n          var t = e.key,\n              n = e.value;\n          return r.setElement(t, n);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(s), r.default = s;\n    }, {\n      "../Base/TreeNode": 25\n    }],\n    31: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e > t ? -1 : e < t ? 1 : 0;\n        };\n        var r = [];\n        e.forEach(function (e) {\n          return r.push(e);\n        });\n\n        var n = r.length,\n            i = function (e, t) {\n          if (e < 0 || e >= n) throw new Error("unknown error");\n          if (t < 0 || t >= n) throw new Error("unknown error");\n          var i = r[e];\n          r[e] = r[t], r[t] = i;\n        },\n            o = function (e) {\n          if (e < 0 || e >= n) throw new Error("unknown error");\n          var o = 2 * e + 1,\n              s = 2 * e + 2;\n          o < n && t(r[e], r[o]) > 0 && i(e, o), s < n && t(r[e], r[s]) > 0 && i(e, s);\n        };\n\n        !function () {\n          for (var e = Math.floor((n - 1) / 2); e >= 0; --e) for (var o = e, s = 2 * o + 1; s < n;) {\n            var a = s + 1,\n                l = s;\n            if (a < n && t(r[s], r[a]) > 0 && (l = a), t(r[o], r[l]) <= 0) break;\n            i(o, l), s = 2 * (o = l) + 1;\n          }\n        }(), this.size = function () {\n          return n;\n        }, this.empty = function () {\n          return 0 === n;\n        }, this.clear = function () {\n          n = 0, r.length = 0;\n        }, this.push = function (e) {\n          if (r.push(e), 1 !== ++n) for (var i = n - 1; i > 0;) {\n            var s = Math.floor((i - 1) / 2);\n            if (t(r[s], e) <= 0) break;\n            o(s), i = s;\n          }\n        }, this.pop = function () {\n          if (!this.empty()) if (1 !== this.size()) {\n            var e = r[n - 1];\n            --n;\n\n            for (var i = 0; i < this.size();) {\n              var o = 2 * i + 1,\n                  s = 2 * i + 2;\n              if (o >= this.size()) break;\n              var a = o;\n              if (s < this.size() && t(r[o], r[s]) > 0 && (a = s), t(r[a], e) >= 0) break;\n              r[i] = r[a], i = a;\n            }\n\n            r[i] = e;\n          } else --n;\n        }, this.top = function () {\n          return r[0];\n        }, Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(n), r.default = n;\n    }, {}],\n    32: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var n = e("../LinkList/LinkList");\n\n      function i(e) {\n        void 0 === e && (e = []);\n        var t = new n.default(e);\n        this.size = function () {\n          return t.size();\n        }, this.empty = function () {\n          return t.empty();\n        }, this.clear = function () {\n          t.clear();\n        }, this.push = function (e) {\n          t.pushBack(e);\n        }, this.pop = function () {\n          t.popFront();\n        }, this.front = function () {\n          return t.front();\n        }, Object.freeze(this);\n      }\n\n      Object.freeze(i), r.default = i;\n    }, {\n      "../LinkList/LinkList": 29\n    }],\n    33: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Base/TreeNode");\n\n      function s(e, t) {\n        var r = this;\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e < t ? -1 : e > t ? 1 : 0;\n        };\n        var s = 0,\n            a = new o.default();\n        a.color = o.default.TreeNodeColorType.black, this.size = function () {\n          return s;\n        }, this.empty = function () {\n          return 0 === s;\n        }, this.clear = function () {\n          s = 0, a.key = void 0, a.leftChild = a.rightChild = a.brother = a.parent = void 0, a.color = o.default.TreeNodeColorType.black;\n        };\n\n        var l = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.leftChild ? l(e.leftChild) : e;\n        },\n            u = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.rightChild ? u(e.rightChild) : e;\n        };\n\n        this.front = function () {\n          if (!this.empty()) return l(a).key;\n        }, this.back = function () {\n          if (!this.empty()) return u(a).key;\n        }, this.forEach = function (e) {\n          var t,\n              r,\n              n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              e(s.value, n++);\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        }, this.getElementByPos = function (e) {\n          var t, r;\n          if (e < 0 || e >= this.size()) throw new Error("pos must more than 0 and less than set\'s size");\n          var n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              var a = s.value;\n              if (n === e) return a;\n              ++n;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          throw new Error("unknown error");\n        };\n\n        var c = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (e.color !== o.default.TreeNodeColorType.red) {\n            var r = e.brother;\n            if (!r) throw new Error("unknown error");\n\n            if (e === t.leftChild) {\n              if (r.color === o.default.TreeNodeColorType.red) {\n                r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n                var n = t.rotateLeft();\n                a === t && (a = n), c(e);\n              } else if (r.color === o.default.TreeNodeColorType.black) if (r.rightChild && r.rightChild.color === o.default.TreeNodeColorType.red) {\n                r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n                n = t.rotateLeft();\n                a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n              } else if (r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || !r.leftChild || r.leftChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, c(t));else {\n                r.color = o.default.TreeNodeColorType.red, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n                n = r.rotateRight();\n                a === r && (a = n), c(e);\n              }\n            } else if (e === t.rightChild) if (r.color === o.default.TreeNodeColorType.red) {\n              r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n              n = t.rotateRight();\n              a === t && (a = n), c(e);\n            } else if (r.color === o.default.TreeNodeColorType.black) if (r.leftChild && r.leftChild.color === o.default.TreeNodeColorType.red) {\n              r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n              n = t.rotateRight();\n              a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n            } else if (r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || !r.rightChild || r.rightChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, c(t));else {\n              r.color = o.default.TreeNodeColorType.red, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n              n = r.rotateLeft();\n              a === r && (a = n), c(e);\n            }\n          } else e.color = o.default.TreeNodeColorType.black;\n        },\n            h = function (e) {\n          for (var t = e; t.leftChild || t.rightChild;) {\n            if (t.rightChild) {\n              t = l(t.rightChild);\n              var r = e.key;\n              e.key = t.key, t.key = r, e = t;\n            }\n\n            if (t.leftChild) {\n              t = u(t.leftChild);\n              r = e.key;\n              e.key = t.key, t.key = r, e = t;\n            }\n          }\n\n          c(t), t && t.remove(), --s, a.color = o.default.TreeNodeColorType.black;\n        },\n            f = function (e, t) {\n          return !(!e || void 0 === e.key) && (!!f(e.leftChild, t) || !!t(e) || f(e.rightChild, t));\n        };\n\n        this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= s) throw new Error("pos must more than 0 and less than set\'s size");\n          var t = 0;\n          f(a, function (r) {\n            return e === t ? (h(r), !0) : (++t, !1);\n          });\n        }, this.eraseElementByValue = function (e) {\n          if (!this.empty()) {\n            var r = g(a, e);\n            void 0 !== r && void 0 !== r.key && 0 === t(r.key, e) && h(r);\n          }\n        };\n\n        var p = function (e, r) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          var n = t(r, e.key);\n          return n < 0 ? e.leftChild ? p(e.leftChild, r) : (e.leftChild = new o.default(), e.leftChild.parent = e, e.leftChild.brother = e.rightChild, e.rightChild && (e.rightChild.brother = e.leftChild), e.leftChild) : n > 0 ? e.rightChild ? p(e.rightChild, r) : (e.rightChild = new o.default(), e.rightChild.parent = e, e.rightChild.brother = e.leftChild, e.leftChild && (e.leftChild.brother = e.rightChild), e.rightChild) : e;\n        },\n            d = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (t.color !== o.default.TreeNodeColorType.black && t.color === o.default.TreeNodeColorType.red) {\n            var r = t.brother,\n                n = t.parent;\n            if (!n) throw new Error("unknown error");\n            if (r && r.color === o.default.TreeNodeColorType.red) r.color = t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red, d(n);else if (!r || r.color === o.default.TreeNodeColorType.black) if (t === n.leftChild) {\n              if (e === t.leftChild) {\n                t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n                var i = n.rotateRight();\n                n === a && (a = i);\n              } else if (e === t.rightChild) {\n                i = t.rotateLeft();\n                n === a && (a = i), d(t);\n              }\n            } else if (t === n.rightChild) if (e === t.leftChild) {\n              i = t.rotateRight();\n              n === a && (a = i), d(t);\n            } else if (e === t.rightChild) {\n              t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n              i = n.rotateLeft();\n              n === a && (a = i);\n            }\n          }\n        };\n\n        this.insert = function (e) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n          if (this.empty()) return ++s, a.key = e, void (a.color = o.default.TreeNodeColorType.black);\n          var r = p(a, e);\n          void 0 !== r.key && 0 === t(r.key, e) || (++s, r.key = e, d(r), a.color = o.default.TreeNodeColorType.black);\n        };\n\n        var g = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(r, e.key);\n            return n < 0 ? g(e.leftChild, r) : n > 0 ? g(e.rightChild, r) : e;\n          }\n        };\n\n        this.find = function (e) {\n          var r = g(a, e);\n          return void 0 !== r && void 0 !== r.key && 0 === t(r.key, e);\n        };\n\n        var y = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(e.key, r);\n            return 0 === n ? e.key : n < 0 ? y(e.rightChild, r) : y(e.leftChild, r) || e.key;\n          }\n        };\n\n        this.lowerBound = function (e) {\n          return y(a, e);\n        };\n\n        var b = function (e, r) {\n          if (e && void 0 !== e.key) return t(e.key, r) <= 0 ? b(e.rightChild, r) : b(e.leftChild, r) || e.key;\n        };\n\n        this.upperBound = function (e) {\n          return b(a, e);\n        };\n\n        var m = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(e.key, r);\n            return 0 === n ? e.key : n > 0 ? m(e.leftChild, r) : m(e.rightChild, r) || e.key;\n          }\n        };\n\n        this.reverseLowerBound = function (e) {\n          return m(a, e);\n        };\n\n        var v = function (e, r) {\n          if (e && void 0 !== e.key) return t(e.key, r) >= 0 ? v(e.leftChild, r) : v(e.rightChild, r) || e.key;\n        };\n\n        this.reverseUpperBound = function (e) {\n          return v(a, e);\n        }, this.union = function (e) {\n          var t = this;\n          e.forEach(function (e) {\n            return t.insert(e);\n          });\n        }, this.getHeight = function () {\n          if (this.empty()) return 0;\n\n          var e = function (t) {\n            return t ? Math.max(e(t.leftChild), e(t.rightChild)) + 1 : 1;\n          };\n\n          return e(a);\n        };\n\n        var w = function (e) {\n          return n(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e && void 0 !== e.key ? [5, i(w(e.leftChild))] : [2];\n\n              case 1:\n                return t.sent(), [4, e.key];\n\n              case 2:\n                return t.sent(), [5, i(w(e.rightChild))];\n\n              case 3:\n                return t.sent(), [2];\n            }\n          });\n        };\n\n        this[Symbol.iterator] = function () {\n          return w(a);\n        }, e.forEach(function (e) {\n          return r.insert(e);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(s), r.default = s;\n    }, {\n      "../Base/TreeNode": 25\n    }],\n    34: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            n = [];\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          r = 0, n.length = 0;\n        }, this.push = function (e) {\n          n.push(e), ++r;\n        }, this.pop = function () {\n          n.pop(), r > 0 && --r;\n        }, this.top = function () {\n          return n[r - 1];\n        }, e.forEach(function (e) {\n          return t.push(e);\n        }), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(n), r.default = n;\n    }, {}],\n    35: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__read || function (e, t) {\n        var r = "function" == typeof Symbol && e[Symbol.iterator];\n        if (!r) return e;\n        var n,\n            i,\n            o = r.call(e),\n            s = [];\n\n        try {\n          for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) s.push(n.value);\n        } catch (e) {\n          i = {\n            error: e\n          };\n        } finally {\n          try {\n            n && !n.done && (r = o.return) && r.call(o);\n          } finally {\n            if (i) throw i.error;\n          }\n        }\n\n        return s;\n      },\n          o = this && this.__spreadArray || function (e, t, r) {\n        if (r || 2 === arguments.length) for (var n, i = 0, o = t.length; i < o; i++) !n && i in t || (n || (n = Array.prototype.slice.call(t, 0, i)), n[i] = t[i]);\n        return e.concat(n || Array.prototype.slice.call(t));\n      },\n          s = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      function a(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            a = [];\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          r = 0, a.length = 0;\n        }, this.front = function () {\n          if (!this.empty()) return a[0];\n        }, this.back = function () {\n          if (!this.empty()) return a[r - 1];\n        }, this.forEach = function (e) {\n          a.forEach(e);\n        }, this.getElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n          return a[e];\n        }, this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n\n          for (var t = e; t < r - 1; ++t) a[t] = a[t + 1];\n\n          this.popBack();\n        }, this.eraseElementByValue = function (e) {\n          var t = [];\n          this.forEach(function (r) {\n            r !== e && t.push(r);\n          }), t.forEach(function (e, t) {\n            a[t] = e;\n          });\n\n          for (var n = t.length; r > n;) this.popBack();\n        }, this.pushBack = function (e) {\n          a.push(e), ++r;\n        }, this.popBack = function () {\n          a.pop(), r > 0 && --r;\n        }, this.setElementByPos = function (e, t) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n          a[e] = t;\n        }, this.insert = function (e, t, n) {\n          if (void 0 === n && (n = 1), e < 0 || e > r) throw new Error("pos must more than 0 and less than or equal to vector\'s size");\n          a.splice.apply(a, o([e, 0], i(new Array(n).fill(t)), !1)), r += n;\n        }, this.find = function (e) {\n          return a.includes(e);\n        }, this.reverse = function () {\n          a.reverse();\n        }, this.unique = function () {\n          var e,\n              t = [];\n          this.forEach(function (r, n) {\n            0 !== n && r === e || (t.push(r), e = r);\n          }), t.forEach(function (e, t) {\n            a[t] = e;\n          });\n\n          for (var n = t.length; r > n;) this.popBack();\n        }, this.sort = function (e) {\n          a.sort(e);\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            return n(this, function (e) {\n              switch (e.label) {\n                case 0:\n                  return [5, s(a)];\n\n                case 1:\n                  return [2, e.sent()];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return t.pushBack(e);\n        }), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(a), r.default = a;\n    }, {}],\n    36: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), r.HashMap = r.HashSet = r.Map = r.Set = r.PriorityQueue = r.Deque = r.LinkList = r.Queue = r.Stack = r.Vector = void 0;\n      var n = e("./Vector/Vector");\n      r.Vector = n.default;\n      var i = e("./Stack/Stack");\n      r.Stack = i.default;\n      var o = e("./Queue/Queue");\n      r.Queue = o.default;\n      var s = e("./LinkList/LinkList");\n      r.LinkList = s.default;\n      var a = e("./Deque/Deque");\n      r.Deque = a.default;\n      var l = e("./PriorityQueue/PriorityQueue");\n      r.PriorityQueue = l.default;\n      var u = e("./Set/Set");\n      r.Set = u.default;\n      var c = e("./Map/Map");\n      r.Map = c.default;\n      var h = e("./HashSet/HashSet");\n      r.HashSet = h.default;\n      var f = e("./HashMap/HashMap");\n      r.HashMap = f.default;\n    }, {\n      "./Deque/Deque": 26,\n      "./HashMap/HashMap": 27,\n      "./HashSet/HashSet": 28,\n      "./LinkList/LinkList": 29,\n      "./Map/Map": 30,\n      "./PriorityQueue/PriorityQueue": 31,\n      "./Queue/Queue": 32,\n      "./Set/Set": 33,\n      "./Stack/Stack": 34,\n      "./Vector/Vector": 35\n    }],\n    37: [function (e, t, r) {\n      "use strict";\n\n      const n = e("yallist"),\n            i = Symbol("max"),\n            o = Symbol("length"),\n            s = Symbol("lengthCalculator"),\n            a = Symbol("allowStale"),\n            l = Symbol("maxAge"),\n            u = Symbol("dispose"),\n            c = Symbol("noDisposeOnSet"),\n            h = Symbol("lruList"),\n            f = Symbol("cache"),\n            p = Symbol("updateAgeOnGet"),\n            d = () => 1;\n\n      const g = (e, t, r) => {\n        const n = e[f].get(t);\n\n        if (n) {\n          const t = n.value;\n\n          if (y(e, t)) {\n            if (m(e, n), !e[a]) return;\n          } else r && (e[p] && (n.value.now = Date.now()), e[h].unshiftNode(n));\n\n          return t.value;\n        }\n      },\n            y = (e, t) => {\n        if (!t || !t.maxAge && !e[l]) return !1;\n        const r = Date.now() - t.now;\n        return t.maxAge ? r > t.maxAge : e[l] && r > e[l];\n      },\n            b = e => {\n        if (e[o] > e[i]) for (let t = e[h].tail; e[o] > e[i] && null !== t;) {\n          const r = t.prev;\n          m(e, t), t = r;\n        }\n      },\n            m = (e, t) => {\n        if (t) {\n          const r = t.value;\n          e[u] && e[u](r.key, r.value), e[o] -= r.length, e[f].delete(r.key), e[h].removeNode(t);\n        }\n      };\n\n      class v {\n        constructor(e, t, r, n, i) {\n          this.key = e, this.value = t, this.length = r, this.now = n, this.maxAge = i || 0;\n        }\n\n      }\n\n      const w = (e, t, r, n) => {\n        let i = r.value;\n        y(e, i) && (m(e, r), e[a] || (i = void 0)), i && t.call(n, i.value, i.key, e);\n      };\n\n      t.exports = class {\n        constructor(e) {\n          if ("number" == typeof e && (e = {\n            max: e\n          }), e || (e = {}), e.max && ("number" != typeof e.max || e.max < 0)) throw new TypeError("max must be a non-negative number");\n          this[i] = e.max || 1 / 0;\n          const t = e.length || d;\n          if (this[s] = "function" != typeof t ? d : t, this[a] = e.stale || !1, e.maxAge && "number" != typeof e.maxAge) throw new TypeError("maxAge must be a number");\n          this[l] = e.maxAge || 0, this[u] = e.dispose, this[c] = e.noDisposeOnSet || !1, this[p] = e.updateAgeOnGet || !1, this.reset();\n        }\n\n        set max(e) {\n          if ("number" != typeof e || e < 0) throw new TypeError("max must be a non-negative number");\n          this[i] = e || 1 / 0, b(this);\n        }\n\n        get max() {\n          return this[i];\n        }\n\n        set allowStale(e) {\n          this[a] = !!e;\n        }\n\n        get allowStale() {\n          return this[a];\n        }\n\n        set maxAge(e) {\n          if ("number" != typeof e) throw new TypeError("maxAge must be a non-negative number");\n          this[l] = e, b(this);\n        }\n\n        get maxAge() {\n          return this[l];\n        }\n\n        set lengthCalculator(e) {\n          "function" != typeof e && (e = d), e !== this[s] && (this[s] = e, this[o] = 0, this[h].forEach(e => {\n            e.length = this[s](e.value, e.key), this[o] += e.length;\n          })), b(this);\n        }\n\n        get lengthCalculator() {\n          return this[s];\n        }\n\n        get length() {\n          return this[o];\n        }\n\n        get itemCount() {\n          return this[h].length;\n        }\n\n        rforEach(e, t) {\n          t = t || this;\n\n          for (let r = this[h].tail; null !== r;) {\n            const n = r.prev;\n            w(this, e, r, t), r = n;\n          }\n        }\n\n        forEach(e, t) {\n          t = t || this;\n\n          for (let r = this[h].head; null !== r;) {\n            const n = r.next;\n            w(this, e, r, t), r = n;\n          }\n        }\n\n        keys() {\n          return this[h].toArray().map(e => e.key);\n        }\n\n        values() {\n          return this[h].toArray().map(e => e.value);\n        }\n\n        reset() {\n          this[u] && this[h] && this[h].length && this[h].forEach(e => this[u](e.key, e.value)), this[f] = new Map(), this[h] = new n(), this[o] = 0;\n        }\n\n        dump() {\n          return this[h].map(e => !y(this, e) && {\n            k: e.key,\n            v: e.value,\n            e: e.now + (e.maxAge || 0)\n          }).toArray().filter(e => e);\n        }\n\n        dumpLru() {\n          return this[h];\n        }\n\n        set(e, t, r) {\n          if ((r = r || this[l]) && "number" != typeof r) throw new TypeError("maxAge must be a number");\n          const n = r ? Date.now() : 0,\n                a = this[s](t, e);\n\n          if (this[f].has(e)) {\n            if (a > this[i]) return m(this, this[f].get(e)), !1;\n            const s = this[f].get(e).value;\n            return this[u] && (this[c] || this[u](e, s.value)), s.now = n, s.maxAge = r, s.value = t, this[o] += a - s.length, s.length = a, this.get(e), b(this), !0;\n          }\n\n          const p = new v(e, t, a, n, r);\n          return p.length > this[i] ? (this[u] && this[u](e, t), !1) : (this[o] += p.length, this[h].unshift(p), this[f].set(e, this[h].head), b(this), !0);\n        }\n\n        has(e) {\n          if (!this[f].has(e)) return !1;\n          const t = this[f].get(e).value;\n          return !y(this, t);\n        }\n\n        get(e) {\n          return g(this, e, !0);\n        }\n\n        peek(e) {\n          return g(this, e, !1);\n        }\n\n        pop() {\n          const e = this[h].tail;\n          return e ? (m(this, e), e.value) : null;\n        }\n\n        del(e) {\n          m(this, this[f].get(e));\n        }\n\n        load(e) {\n          this.reset();\n          const t = Date.now();\n\n          for (let r = e.length - 1; r >= 0; r--) {\n            const n = e[r],\n                  i = n.e || 0;\n            if (0 === i) this.set(n.k, n.v);else {\n              const e = i - t;\n              e > 0 && this.set(n.k, n.v, e);\n            }\n          }\n        }\n\n        prune() {\n          this[f].forEach((e, t) => g(this, t, !1));\n        }\n\n      };\n    }, {\n      yallist: 83\n    }],\n    38: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          const r = t.exports;\n          r.types = {\n            0: "reserved",\n            1: "connect",\n            2: "connack",\n            3: "publish",\n            4: "puback",\n            5: "pubrec",\n            6: "pubrel",\n            7: "pubcomp",\n            8: "subscribe",\n            9: "suback",\n            10: "unsubscribe",\n            11: "unsuback",\n            12: "pingreq",\n            13: "pingresp",\n            14: "disconnect",\n            15: "auth"\n          }, r.codes = {};\n\n          for (const e in r.types) {\n            const t = r.types[e];\n            r.codes[t] = e;\n          }\n\n          r.CMD_SHIFT = 4, r.CMD_MASK = 240, r.DUP_MASK = 8, r.QOS_MASK = 3, r.QOS_SHIFT = 1, r.RETAIN_MASK = 1, r.VARBYTEINT_MASK = 127, r.VARBYTEINT_FIN_MASK = 128, r.VARBYTEINT_MAX = 268435455, r.SESSIONPRESENT_MASK = 1, r.SESSIONPRESENT_HEADER = e.from([r.SESSIONPRESENT_MASK]), r.CONNACK_HEADER = e.from([r.codes.connack << r.CMD_SHIFT]), r.USERNAME_MASK = 128, r.PASSWORD_MASK = 64, r.WILL_RETAIN_MASK = 32, r.WILL_QOS_MASK = 24, r.WILL_QOS_SHIFT = 3, r.WILL_FLAG_MASK = 4, r.CLEAN_SESSION_MASK = 2, r.CONNECT_HEADER = e.from([r.codes.connect << r.CMD_SHIFT]), r.properties = {\n            sessionExpiryInterval: 17,\n            willDelayInterval: 24,\n            receiveMaximum: 33,\n            maximumPacketSize: 39,\n            topicAliasMaximum: 34,\n            requestResponseInformation: 25,\n            requestProblemInformation: 23,\n            userProperties: 38,\n            authenticationMethod: 21,\n            authenticationData: 22,\n            payloadFormatIndicator: 1,\n            messageExpiryInterval: 2,\n            contentType: 3,\n            responseTopic: 8,\n            correlationData: 9,\n            maximumQoS: 36,\n            retainAvailable: 37,\n            assignedClientIdentifier: 18,\n            reasonString: 31,\n            wildcardSubscriptionAvailable: 40,\n            subscriptionIdentifiersAvailable: 41,\n            sharedSubscriptionAvailable: 42,\n            serverKeepAlive: 19,\n            responseInformation: 26,\n            serverReference: 28,\n            topicAlias: 35,\n            subscriptionIdentifier: 11\n          }, r.propertiesCodes = {};\n\n          for (const e in r.properties) {\n            const t = r.properties[e];\n            r.propertiesCodes[t] = e;\n          }\n\n          function n(t) {\n            return [0, 1, 2].map(n => [0, 1].map(i => [0, 1].map(o => {\n              const s = e.alloc(1);\n              return s.writeUInt8(r.codes[t] << r.CMD_SHIFT | (i ? r.DUP_MASK : 0) | n << r.QOS_SHIFT | o, 0, !0), s;\n            })));\n          }\n\n          r.propertiesTypes = {\n            sessionExpiryInterval: "int32",\n            willDelayInterval: "int32",\n            receiveMaximum: "int16",\n            maximumPacketSize: "int32",\n            topicAliasMaximum: "int16",\n            requestResponseInformation: "byte",\n            requestProblemInformation: "byte",\n            userProperties: "pair",\n            authenticationMethod: "string",\n            authenticationData: "binary",\n            payloadFormatIndicator: "byte",\n            messageExpiryInterval: "int32",\n            contentType: "string",\n            responseTopic: "string",\n            correlationData: "binary",\n            maximumQoS: "int8",\n            retainAvailable: "byte",\n            assignedClientIdentifier: "string",\n            reasonString: "string",\n            wildcardSubscriptionAvailable: "byte",\n            subscriptionIdentifiersAvailable: "byte",\n            sharedSubscriptionAvailable: "byte",\n            serverKeepAlive: "int16",\n            responseInformation: "string",\n            serverReference: "string",\n            topicAlias: "int16",\n            subscriptionIdentifier: "var"\n          }, r.PUBLISH_HEADER = n("publish"), r.SUBSCRIBE_HEADER = n("subscribe"), r.SUBSCRIBE_OPTIONS_QOS_MASK = 3, r.SUBSCRIBE_OPTIONS_NL_MASK = 1, r.SUBSCRIBE_OPTIONS_NL_SHIFT = 2, r.SUBSCRIBE_OPTIONS_RAP_MASK = 1, r.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3, r.SUBSCRIBE_OPTIONS_RH_MASK = 3, r.SUBSCRIBE_OPTIONS_RH_SHIFT = 4, r.SUBSCRIBE_OPTIONS_RH = [0, 16, 32], r.SUBSCRIBE_OPTIONS_NL = 4, r.SUBSCRIBE_OPTIONS_RAP = 8, r.SUBSCRIBE_OPTIONS_QOS = [0, 1, 2], r.UNSUBSCRIBE_HEADER = n("unsubscribe"), r.ACKS = {\n            unsuback: n("unsuback"),\n            puback: n("puback"),\n            pubcomp: n("pubcomp"),\n            pubrel: n("pubrel"),\n            pubrec: n("pubrec")\n          }, r.SUBACK_HEADER = e.from([r.codes.suback << r.CMD_SHIFT]), r.VERSION3 = e.from([3]), r.VERSION4 = e.from([4]), r.VERSION5 = e.from([5]), r.VERSION131 = e.from([131]), r.VERSION132 = e.from([132]), r.QOS = [0, 1, 2].map(t => e.from([t])), r.EMPTY = {\n            pingreq: e.from([r.codes.pingreq << 4, 0]),\n            pingresp: e.from([r.codes.pingresp << 4, 0]),\n            disconnect: e.from([r.codes.disconnect << 4, 0])\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    39: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          const n = e("./writeToStream"),\n                i = e("events");\n\n          class o extends i {\n            constructor() {\n              super(), this._array = new Array(20), this._i = 0;\n            }\n\n            write(e) {\n              return this._array[this._i++] = e, !0;\n            }\n\n            concat() {\n              let e = 0;\n              const t = new Array(this._array.length),\n                    n = this._array;\n              let i,\n                  o = 0;\n\n              for (i = 0; i < n.length && void 0 !== n[i]; i++) "string" != typeof n[i] ? t[i] = n[i].length : t[i] = r.byteLength(n[i]), e += t[i];\n\n              const s = r.allocUnsafe(e);\n\n              for (i = 0; i < n.length && void 0 !== n[i]; i++) "string" != typeof n[i] ? (n[i].copy(s, o), o += t[i]) : (s.write(n[i], o), o += t[i]);\n\n              return s;\n            }\n\n          }\n\n          t.exports = function (e, t) {\n            const r = new o();\n            return n(e, r, t), r.concat();\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "./writeToStream": 44,\n      buffer: 17,\n      events: 22\n    }],\n    40: [function (e, t, r) {\n      r.parser = e("./parser").parser, r.generate = e("./generate"), r.writeToStream = e("./writeToStream");\n    }, {\n      "./generate": 39,\n      "./parser": 43,\n      "./writeToStream": 44\n    }],\n    41: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          const r = 65536,\n                n = {},\n                i = e.isBuffer(e.from([1, 2]).subarray(0, 1));\n\n          function o(t) {\n            const r = e.allocUnsafe(2);\n            return r.writeUInt8(t >> 8, 0), r.writeUInt8(255 & t, 1), r;\n          }\n\n          t.exports = {\n            cache: n,\n            generateCache: function () {\n              for (let e = 0; e < r; e++) n[e] = o(e);\n            },\n            generateNumber: o,\n            genBufVariableByteInt: function (t) {\n              let r = 0,\n                  n = 0;\n              const o = e.allocUnsafe(4);\n\n              do {\n                r = t % 128 | 0, (t = t / 128 | 0) > 0 && (r |= 128), o.writeUInt8(r, n++);\n              } while (t > 0 && n < 4);\n\n              return t > 0 && (n = 0), i ? o.subarray(0, n) : o.slice(0, n);\n            },\n            generate4ByteBuffer: function (t) {\n              const r = e.allocUnsafe(4);\n              return r.writeUInt32BE(t, 0), r;\n            }\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    42: [function (e, t, r) {\n      t.exports = class {\n        constructor() {\n          this.cmd = null, this.retain = !1, this.qos = 0, this.dup = !1, this.length = -1, this.topic = null, this.payload = null;\n        }\n\n      };\n    }, {}],\n    43: [function (e, t, r) {\n      const n = e("bl"),\n            i = e("events"),\n            o = e("./packet"),\n            s = e("./constants"),\n            a = e("debug")("mqtt-packet:parser");\n\n      class l extends i {\n        constructor() {\n          super(), this.parser = this.constructor.parser;\n        }\n\n        static parser(e) {\n          return this instanceof l ? (this.settings = e || {}, this._states = ["_parseHeader", "_parseLength", "_parsePayload", "_newPacket"], this._resetState(), this) : new l().parser(e);\n        }\n\n        _resetState() {\n          a("_resetState: resetting packet, error, _list, and _stateCounter"), this.packet = new o(), this.error = null, this._list = n(), this._stateCounter = 0;\n        }\n\n        parse(e) {\n          for (this.error && this._resetState(), this._list.append(e), a("parse: current state: %s", this._states[this._stateCounter]); (-1 !== this.packet.length || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error;) this._stateCounter++, a("parse: state complete. _stateCounter is now: %d", this._stateCounter), a("parse: packet.length: %d, buffer list length: %d", this.packet.length, this._list.length), this._stateCounter >= this._states.length && (this._stateCounter = 0);\n\n          return a("parse: exited while loop. packet: %d, buffer list length: %d", this.packet.length, this._list.length), this._list.length;\n        }\n\n        _parseHeader() {\n          const e = this._list.readUInt8(0);\n\n          return this.packet.cmd = s.types[e >> s.CMD_SHIFT], this.packet.retain = 0 != (e & s.RETAIN_MASK), this.packet.qos = e >> s.QOS_SHIFT & s.QOS_MASK, this.packet.dup = 0 != (e & s.DUP_MASK), a("_parseHeader: packet: %o", this.packet), this._list.consume(1), !0;\n        }\n\n        _parseLength() {\n          const e = this._parseVarByteNum(!0);\n\n          return e && (this.packet.length = e.value, this._list.consume(e.bytes)), a("_parseLength %d", e.value), !!e;\n        }\n\n        _parsePayload() {\n          a("_parsePayload: payload %O", this._list);\n          let e = !1;\n\n          if (0 === this.packet.length || this._list.length >= this.packet.length) {\n            switch (this._pos = 0, this.packet.cmd) {\n              case "connect":\n                this._parseConnect();\n\n                break;\n\n              case "connack":\n                this._parseConnack();\n\n                break;\n\n              case "publish":\n                this._parsePublish();\n\n                break;\n\n              case "puback":\n              case "pubrec":\n              case "pubrel":\n              case "pubcomp":\n                this._parseConfirmation();\n\n                break;\n\n              case "subscribe":\n                this._parseSubscribe();\n\n                break;\n\n              case "suback":\n                this._parseSuback();\n\n                break;\n\n              case "unsubscribe":\n                this._parseUnsubscribe();\n\n                break;\n\n              case "unsuback":\n                this._parseUnsuback();\n\n                break;\n\n              case "pingreq":\n              case "pingresp":\n                break;\n\n              case "disconnect":\n                this._parseDisconnect();\n\n                break;\n\n              case "auth":\n                this._parseAuth();\n\n                break;\n\n              default:\n                this._emitError(new Error("Not supported"));\n\n            }\n\n            e = !0;\n          }\n\n          return a("_parsePayload complete result: %s", e), e;\n        }\n\n        _parseConnect() {\n          let e, t, r, n;\n          a("_parseConnect");\n\n          const i = {},\n                o = this.packet,\n                l = this._parseString();\n\n          if (null === l) return this._emitError(new Error("Cannot parse protocolId"));\n          if ("MQTT" !== l && "MQIsdp" !== l) return this._emitError(new Error("Invalid protocolId"));\n          if (o.protocolId = l, this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));\n          if (o.protocolVersion = this._list.readUInt8(this._pos), o.protocolVersion >= 128 && (o.bridgeMode = !0, o.protocolVersion = o.protocolVersion - 128), 3 !== o.protocolVersion && 4 !== o.protocolVersion && 5 !== o.protocolVersion) return this._emitError(new Error("Invalid protocol version"));\n          if (this._pos++, this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));\n          if (i.username = this._list.readUInt8(this._pos) & s.USERNAME_MASK, i.password = this._list.readUInt8(this._pos) & s.PASSWORD_MASK, i.will = this._list.readUInt8(this._pos) & s.WILL_FLAG_MASK, i.will && (o.will = {}, o.will.retain = 0 != (this._list.readUInt8(this._pos) & s.WILL_RETAIN_MASK), o.will.qos = (this._list.readUInt8(this._pos) & s.WILL_QOS_MASK) >> s.WILL_QOS_SHIFT), o.clean = 0 != (this._list.readUInt8(this._pos) & s.CLEAN_SESSION_MASK), this._pos++, o.keepalive = this._parseNum(), -1 === o.keepalive) return this._emitError(new Error("Packet too short"));\n\n          if (5 === o.protocolVersion) {\n            const e = this._parseProperties();\n\n            Object.getOwnPropertyNames(e).length && (o.properties = e);\n          }\n\n          const u = this._parseString();\n\n          if (null === u) return this._emitError(new Error("Packet too short"));\n\n          if (o.clientId = u, a("_parseConnect: packet.clientId: %s", o.clientId), i.will) {\n            if (5 === o.protocolVersion) {\n              const e = this._parseProperties();\n\n              Object.getOwnPropertyNames(e).length && (o.will.properties = e);\n            }\n\n            if (null === (e = this._parseString())) return this._emitError(new Error("Cannot parse will topic"));\n            if (o.will.topic = e, a("_parseConnect: packet.will.topic: %s", o.will.topic), null === (t = this._parseBuffer())) return this._emitError(new Error("Cannot parse will payload"));\n            o.will.payload = t, a("_parseConnect: packet.will.paylaod: %s", o.will.payload);\n          }\n\n          if (i.username) {\n            if (null === (n = this._parseString())) return this._emitError(new Error("Cannot parse username"));\n            o.username = n, a("_parseConnect: packet.username: %s", o.username);\n          }\n\n          if (i.password) {\n            if (null === (r = this._parseBuffer())) return this._emitError(new Error("Cannot parse password"));\n            o.password = r;\n          }\n\n          return this.settings = o, a("_parseConnect: complete"), o;\n        }\n\n        _parseConnack() {\n          a("_parseConnack");\n          const e = this.packet;\n          if (this._list.length < 1) return null;\n          if (e.sessionPresent = !!(this._list.readUInt8(this._pos++) & s.SESSIONPRESENT_MASK), 5 === this.settings.protocolVersion) this._list.length >= 2 ? e.reasonCode = this._list.readUInt8(this._pos++) : e.reasonCode = 0;else {\n            if (this._list.length < 2) return null;\n            e.returnCode = this._list.readUInt8(this._pos++);\n          }\n          if (-1 === e.returnCode || -1 === e.reasonCode) return this._emitError(new Error("Cannot parse return code"));\n\n          if (5 === this.settings.protocolVersion) {\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          a("_parseConnack: complete");\n        }\n\n        _parsePublish() {\n          a("_parsePublish");\n          const e = this.packet;\n          if (e.topic = this._parseString(), null === e.topic) return this._emitError(new Error("Cannot parse topic"));\n\n          if (!(e.qos > 0) || this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            e.payload = this._list.slice(this._pos, e.length), a("_parsePublish: payload from buffer list: %o", e.payload);\n          }\n        }\n\n        _parseSubscribe() {\n          a("_parseSubscribe");\n          const e = this.packet;\n          let t, r, n, i, o, l, u;\n          if (1 !== e.qos) return this._emitError(new Error("Wrong subscribe header"));\n\n          if (e.subscriptions = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < e.length;) {\n              if (null === (t = this._parseString())) return this._emitError(new Error("Cannot parse topic"));\n              if (this._pos >= e.length) return this._emitError(new Error("Malformed Subscribe Payload"));\n              n = (r = this._parseByte()) & s.SUBSCRIBE_OPTIONS_QOS_MASK, l = 0 != (r >> s.SUBSCRIBE_OPTIONS_NL_SHIFT & s.SUBSCRIBE_OPTIONS_NL_MASK), o = 0 != (r >> s.SUBSCRIBE_OPTIONS_RAP_SHIFT & s.SUBSCRIBE_OPTIONS_RAP_MASK), i = r >> s.SUBSCRIBE_OPTIONS_RH_SHIFT & s.SUBSCRIBE_OPTIONS_RH_MASK, u = {\n                topic: t,\n                qos: n\n              }, 5 === this.settings.protocolVersion ? (u.nl = l, u.rap = o, u.rh = i) : this.settings.bridgeMode && (u.rh = 0, u.rap = !0, u.nl = !0), a("_parseSubscribe: push subscription `%s` to subscription", u), e.subscriptions.push(u);\n            }\n          }\n        }\n\n        _parseSuback() {\n          a("_parseSuback");\n          const e = this.packet;\n\n          if (this.packet.granted = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < this.packet.length;) this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n\n        _parseUnsubscribe() {\n          a("_parseUnsubscribe");\n          const e = this.packet;\n\n          if (e.unsubscriptions = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < e.length;) {\n              const t = this._parseString();\n\n              if (null === t) return this._emitError(new Error("Cannot parse topic"));\n              a("_parseUnsubscribe: push topic `%s` to unsubscriptions", t), e.unsubscriptions.push(t);\n            }\n          }\n        }\n\n        _parseUnsuback() {\n          a("_parseUnsuback");\n          const e = this.packet;\n          if (!this._parseMessageId()) return this._emitError(new Error("Cannot parse messageId"));\n\n          if (5 === this.settings.protocolVersion) {\n            const t = this._parseProperties();\n\n            for (Object.getOwnPropertyNames(t).length && (e.properties = t), e.granted = []; this._pos < this.packet.length;) this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n\n        _parseConfirmation() {\n          a("_parseConfirmation: packet.cmd: `%s`", this.packet.cmd);\n          const e = this.packet;\n\n          if (this._parseMessageId(), 5 === this.settings.protocolVersion && (e.length > 2 ? (e.reasonCode = this._parseByte(), a("_parseConfirmation: packet.reasonCode `%d`", e.reasonCode)) : e.reasonCode = 0, e.length > 3)) {\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          return !0;\n        }\n\n        _parseDisconnect() {\n          const e = this.packet;\n\n          if (a("_parseDisconnect"), 5 === this.settings.protocolVersion) {\n            this._list.length > 0 ? e.reasonCode = this._parseByte() : e.reasonCode = 0;\n\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          return a("_parseDisconnect result: true"), !0;\n        }\n\n        _parseAuth() {\n          a("_parseAuth");\n          const e = this.packet;\n          if (5 !== this.settings.protocolVersion) return this._emitError(new Error("Not supported auth packet for this version MQTT"));\n          e.reasonCode = this._parseByte();\n\n          const t = this._parseProperties();\n\n          return Object.getOwnPropertyNames(t).length && (e.properties = t), a("_parseAuth: result: true"), !0;\n        }\n\n        _parseMessageId() {\n          const e = this.packet;\n          return e.messageId = this._parseNum(), null === e.messageId ? (this._emitError(new Error("Cannot parse messageId")), !1) : (a("_parseMessageId: packet.messageId %d", e.messageId), !0);\n        }\n\n        _parseString(e) {\n          const t = this._parseNum(),\n                r = t + this._pos;\n\n          if (-1 === t || r > this._list.length || r > this.packet.length) return null;\n\n          const n = this._list.toString("utf8", this._pos, r);\n\n          return this._pos += t, a("_parseString: result: %s", n), n;\n        }\n\n        _parseStringPair() {\n          return a("_parseStringPair"), {\n            name: this._parseString(),\n            value: this._parseString()\n          };\n        }\n\n        _parseBuffer() {\n          const e = this._parseNum(),\n                t = e + this._pos;\n\n          if (-1 === e || t > this._list.length || t > this.packet.length) return null;\n\n          const r = this._list.slice(this._pos, t);\n\n          return this._pos += e, a("_parseBuffer: result: %o", r), r;\n        }\n\n        _parseNum() {\n          if (this._list.length - this._pos < 2) return -1;\n\n          const e = this._list.readUInt16BE(this._pos);\n\n          return this._pos += 2, a("_parseNum: result: %s", e), e;\n        }\n\n        _parse4ByteNum() {\n          if (this._list.length - this._pos < 4) return -1;\n\n          const e = this._list.readUInt32BE(this._pos);\n\n          return this._pos += 4, a("_parse4ByteNum: result: %s", e), e;\n        }\n\n        _parseVarByteNum(e) {\n          a("_parseVarByteNum");\n          let t,\n              r = 0,\n              n = 1,\n              i = 0,\n              o = !1;\n          const l = this._pos ? this._pos : 0;\n\n          for (; r < 4 && l + r < this._list.length;) {\n            if (i += n * ((t = this._list.readUInt8(l + r++)) & s.VARBYTEINT_MASK), n *= 128, 0 == (t & s.VARBYTEINT_FIN_MASK)) {\n              o = !0;\n              break;\n            }\n\n            if (this._list.length <= r) break;\n          }\n\n          return !o && 4 === r && this._list.length >= r && this._emitError(new Error("Invalid variable byte integer")), l && (this._pos += r), a("_parseVarByteNum: result: %o", o = !!o && (e ? {\n            bytes: r,\n            value: i\n          } : i)), o;\n        }\n\n        _parseByte() {\n          let e;\n          return this._pos < this._list.length && (e = this._list.readUInt8(this._pos), this._pos++), a("_parseByte: result: %o", e), e;\n        }\n\n        _parseByType(e) {\n          switch (a("_parseByType: type: %s", e), e) {\n            case "byte":\n              return 0 !== this._parseByte();\n\n            case "int8":\n              return this._parseByte();\n\n            case "int16":\n              return this._parseNum();\n\n            case "int32":\n              return this._parse4ByteNum();\n\n            case "var":\n              return this._parseVarByteNum();\n\n            case "string":\n              return this._parseString();\n\n            case "pair":\n              return this._parseStringPair();\n\n            case "binary":\n              return this._parseBuffer();\n          }\n        }\n\n        _parseProperties() {\n          a("_parseProperties");\n\n          const e = this._parseVarByteNum(),\n                t = this._pos + e,\n                r = {};\n\n          for (; this._pos < t;) {\n            const e = this._parseByte();\n\n            if (!e) return this._emitError(new Error("Cannot parse property code type")), !1;\n            const t = s.propertiesCodes[e];\n            if (!t) return this._emitError(new Error("Unknown property")), !1;\n            if ("userProperties" !== t) r[t] ? Array.isArray(r[t]) ? r[t].push(this._parseByType(s.propertiesTypes[t])) : (r[t] = [r[t]], r[t].push(this._parseByType(s.propertiesTypes[t]))) : r[t] = this._parseByType(s.propertiesTypes[t]);else {\n              r[t] || (r[t] = Object.create(null));\n\n              const e = this._parseByType(s.propertiesTypes[t]);\n\n              if (r[t][e.name]) {\n                if (Array.isArray(r[t][e.name])) r[t][e.name].push(e.value);else {\n                  const n = r[t][e.name];\n                  r[t][e.name] = [n], r[t][e.name].push(e.value);\n                }\n              } else r[t][e.name] = e.value;\n            }\n          }\n\n          return r;\n        }\n\n        _newPacket() {\n          return a("_newPacket"), this.packet && (this._list.consume(this.packet.length), a("_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d", this.packet.cmd, this.packet.payload, this.packet.length), this.emit("packet", this.packet)), a("_newPacket: new packet"), this.packet = new o(), this._pos = 0, !0;\n        }\n\n        _emitError(e) {\n          a("_emitError"), this.error = e, this.emit("error", e);\n        }\n\n      }\n\n      t.exports = l;\n    }, {\n      "./constants": 38,\n      "./packet": 42,\n      bl: 15,\n      debug: 18,\n      events: 22\n    }],\n    44: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          const n = e("./constants"),\n                i = r.allocUnsafe(0),\n                o = r.from([0]),\n                s = e("./numbers"),\n                a = e("process-nextick-args").nextTick,\n                l = e("debug")("mqtt-packet:writeToStream"),\n                u = s.cache,\n                c = s.generateNumber,\n                h = s.generateCache,\n                f = s.genBufVariableByteInt,\n                p = s.generate4ByteBuffer;\n          let d = k,\n              g = !0;\n\n          function y(e, t, s) {\n            switch (l("generate called"), t.cork && (t.cork(), a(b, t)), g && (g = !1, h()), l("generate: packet.cmd: %s", e.cmd), e.cmd) {\n              case "connect":\n                return function (e, t, i) {\n                  const o = e || {},\n                        s = o.protocolId || "MQTT";\n                  let a = o.protocolVersion || 4;\n                  const l = o.will;\n                  let u = o.clean;\n                  const c = o.keepalive || 0,\n                        h = o.clientId || "",\n                        f = o.username,\n                        p = o.password,\n                        g = o.properties;\n                  void 0 === u && (u = !0);\n                  let y = 0;\n                  if (!s || "string" != typeof s && !r.isBuffer(s)) return t.emit("error", new Error("Invalid protocolId")), !1;\n                  y += s.length + 2;\n                  if (3 !== a && 4 !== a && 5 !== a) return t.emit("error", new Error("Invalid protocol version")), !1;\n                  y += 1;\n                  if (("string" == typeof h || r.isBuffer(h)) && (h || a >= 4) && (h || u)) y += r.byteLength(h) + 2;else {\n                    if (a < 4) return t.emit("error", new Error("clientId must be supplied before 3.1.1")), !1;\n                    if (1 * u == 0) return t.emit("error", new Error("clientId must be given if cleanSession set to 0")), !1;\n                  }\n                  if ("number" != typeof c || c < 0 || c > 65535 || c % 1 != 0) return t.emit("error", new Error("Invalid keepalive")), !1;\n                  y += 2;\n\n                  if (y += 1, 5 === a) {\n                    var b = C(t, g);\n                    if (!b) return !1;\n                    y += b.length;\n                  }\n\n                  if (l) {\n                    if ("object" != typeof l) return t.emit("error", new Error("Invalid will")), !1;\n                    if (!l.topic || "string" != typeof l.topic) return t.emit("error", new Error("Invalid will topic")), !1;\n\n                    if (y += r.byteLength(l.topic) + 2, y += 2, l.payload) {\n                      if (!(l.payload.length >= 0)) return t.emit("error", new Error("Invalid will payload")), !1;\n                      "string" == typeof l.payload ? y += r.byteLength(l.payload) : y += l.payload.length;\n                    }\n\n                    var m = {};\n\n                    if (5 === a) {\n                      if (!(m = C(t, l.properties))) return !1;\n                      y += m.length;\n                    }\n                  }\n\n                  let _ = !1;\n\n                  if (null != f) {\n                    if (!P(f)) return t.emit("error", new Error("Invalid username")), !1;\n                    _ = !0, y += r.byteLength(f) + 2;\n                  }\n\n                  if (null != p) {\n                    if (!_) return t.emit("error", new Error("Username is required to use password")), !1;\n                    if (!P(p)) return t.emit("error", new Error("Invalid password")), !1;\n                    y += I(p) + 2;\n                  }\n\n                  t.write(n.CONNECT_HEADER), v(t, y), E(t, s), o.bridgeMode && (a += 128);\n                  t.write(131 === a ? n.VERSION131 : 132 === a ? n.VERSION132 : 4 === a ? n.VERSION4 : 5 === a ? n.VERSION5 : n.VERSION3);\n                  let k = 0;\n                  k |= null != f ? n.USERNAME_MASK : 0, k |= null != p ? n.PASSWORD_MASK : 0, k |= l && l.retain ? n.WILL_RETAIN_MASK : 0, k |= l && l.qos ? l.qos << n.WILL_QOS_SHIFT : 0, k |= l ? n.WILL_FLAG_MASK : 0, k |= u ? n.CLEAN_SESSION_MASK : 0, t.write(r.from([k])), d(t, c), 5 === a && b.write();\n                  E(t, h), l && (5 === a && m.write(), w(t, l.topic), E(t, l.payload));\n                  null != f && E(t, f);\n                  null != p && E(t, p);\n                  return !0;\n                }(e, t);\n\n              case "connack":\n                return function (e, t, i) {\n                  const s = i ? i.protocolVersion : 4,\n                        a = e || {},\n                        l = 5 === s ? a.reasonCode : a.returnCode,\n                        u = a.properties;\n                  let c = 2;\n                  if ("number" != typeof l) return t.emit("error", new Error("Invalid return code")), !1;\n                  let h = null;\n\n                  if (5 === s) {\n                    if (!(h = C(t, u))) return !1;\n                    c += h.length;\n                  }\n\n                  t.write(n.CONNACK_HEADER), v(t, c), t.write(a.sessionPresent ? n.SESSIONPRESENT_HEADER : o), t.write(r.from([l])), null != h && h.write();\n                  return !0;\n                }(e, t, s);\n\n              case "publish":\n                return function (e, t, o) {\n                  l("publish: packet: %o", e);\n                  const s = o ? o.protocolVersion : 4,\n                        a = e || {},\n                        u = a.qos || 0,\n                        c = a.retain ? n.RETAIN_MASK : 0,\n                        h = a.topic,\n                        f = a.payload || i,\n                        p = a.messageId,\n                        g = a.properties;\n                  let y = 0;\n                  if ("string" == typeof h) y += r.byteLength(h) + 2;else {\n                    if (!r.isBuffer(h)) return t.emit("error", new Error("Invalid topic")), !1;\n                    y += h.length + 2;\n                  }\n                  r.isBuffer(f) ? y += f.length : y += r.byteLength(f);\n                  if (u && "number" != typeof p) return t.emit("error", new Error("Invalid messageId")), !1;\n                  u && (y += 2);\n                  let b = null;\n\n                  if (5 === s) {\n                    if (!(b = C(t, g))) return !1;\n                    y += b.length;\n                  }\n\n                  t.write(n.PUBLISH_HEADER[u][a.dup ? 1 : 0][c ? 1 : 0]), v(t, y), d(t, I(h)), t.write(h), u > 0 && d(t, p);\n                  null != b && b.write();\n                  return l("publish: payload: %o", f), t.write(f);\n                }(e, t, s);\n\n              case "puback":\n              case "pubrec":\n              case "pubrel":\n              case "pubcomp":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.cmd || "puback",\n                        l = s.messageId,\n                        u = s.dup && "pubrel" === a ? n.DUP_MASK : 0;\n                  let c = 0;\n                  const h = s.reasonCode,\n                        f = s.properties;\n                  let p = 5 === o ? 3 : 2;\n                  "pubrel" === a && (c = 1);\n                  if ("number" != typeof l) return t.emit("error", new Error("Invalid messageId")), !1;\n                  let g = null;\n\n                  if (5 === o && "object" == typeof f) {\n                    if (!(g = T(t, f, i, p))) return !1;\n                    p += g.length;\n                  }\n\n                  t.write(n.ACKS[a][c][u][0]), v(t, p), d(t, l), 5 === o && t.write(r.from([h]));\n                  null !== g && g.write();\n                  return !0;\n                }(e, t, s);\n\n              case "subscribe":\n                return function (e, t, i) {\n                  l("subscribe: packet: ");\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.dup ? n.DUP_MASK : 0,\n                        u = s.messageId,\n                        c = s.subscriptions,\n                        h = s.properties;\n                  let f = 0;\n                  if ("number" != typeof u) return t.emit("error", new Error("Invalid messageId")), !1;\n                  f += 2;\n                  let p = null;\n\n                  if (5 === o) {\n                    if (!(p = C(t, h))) return !1;\n                    f += p.length;\n                  }\n\n                  if ("object" != typeof c || !c.length) return t.emit("error", new Error("Invalid subscriptions")), !1;\n\n                  for (let e = 0; e < c.length; e += 1) {\n                    const n = c[e].topic,\n                          i = c[e].qos;\n                    if ("string" != typeof n) return t.emit("error", new Error("Invalid subscriptions - invalid topic")), !1;\n                    if ("number" != typeof i) return t.emit("error", new Error("Invalid subscriptions - invalid qos")), !1;\n\n                    if (5 === o) {\n                      const r = c[e].nl || !1;\n                      if ("boolean" != typeof r) return t.emit("error", new Error("Invalid subscriptions - invalid No Local")), !1;\n                      const n = c[e].rap || !1;\n                      if ("boolean" != typeof n) return t.emit("error", new Error("Invalid subscriptions - invalid Retain as Published")), !1;\n                      const i = c[e].rh || 0;\n                      if ("number" != typeof i || i > 2) return t.emit("error", new Error("Invalid subscriptions - invalid Retain Handling")), !1;\n                    }\n\n                    f += r.byteLength(n) + 2 + 1;\n                  }\n\n                  l("subscribe: writing to stream: %o", n.SUBSCRIBE_HEADER), t.write(n.SUBSCRIBE_HEADER[1][a ? 1 : 0][0]), v(t, f), d(t, u), null !== p && p.write();\n                  let g = !0;\n\n                  for (const e of c) {\n                    const i = e.topic,\n                          s = e.qos,\n                          a = +e.nl,\n                          l = +e.rap,\n                          u = e.rh;\n                    let c;\n                    w(t, i), c = n.SUBSCRIBE_OPTIONS_QOS[s], 5 === o && (c |= a ? n.SUBSCRIBE_OPTIONS_NL : 0, c |= l ? n.SUBSCRIBE_OPTIONS_RAP : 0, c |= u ? n.SUBSCRIBE_OPTIONS_RH[u] : 0), g = t.write(r.from([c]));\n                  }\n\n                  return g;\n                }(e, t, s);\n\n              case "suback":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.granted,\n                        u = s.properties;\n                  let c = 0;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n                  c += 2;\n                  if ("object" != typeof l || !l.length) return t.emit("error", new Error("Invalid qos vector")), !1;\n\n                  for (let e = 0; e < l.length; e += 1) {\n                    if ("number" != typeof l[e]) return t.emit("error", new Error("Invalid qos vector")), !1;\n                    c += 1;\n                  }\n\n                  let h = null;\n\n                  if (5 === o) {\n                    if (!(h = T(t, u, i, c))) return !1;\n                    c += h.length;\n                  }\n\n                  t.write(n.SUBACK_HEADER), v(t, c), d(t, a), null !== h && h.write();\n                  return t.write(r.from(l));\n                }(e, t, s);\n\n              case "unsubscribe":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.dup ? n.DUP_MASK : 0,\n                        u = s.unsubscriptions,\n                        c = s.properties;\n                  let h = 0;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n                  h += 2;\n                  if ("object" != typeof u || !u.length) return t.emit("error", new Error("Invalid unsubscriptions")), !1;\n\n                  for (let e = 0; e < u.length; e += 1) {\n                    if ("string" != typeof u[e]) return t.emit("error", new Error("Invalid unsubscriptions")), !1;\n                    h += r.byteLength(u[e]) + 2;\n                  }\n\n                  let f = null;\n\n                  if (5 === o) {\n                    if (!(f = C(t, c))) return !1;\n                    h += f.length;\n                  }\n\n                  t.write(n.UNSUBSCRIBE_HEADER[1][l ? 1 : 0][0]), v(t, h), d(t, a), null !== f && f.write();\n                  let p = !0;\n\n                  for (let e = 0; e < u.length; e++) p = w(t, u[e]);\n\n                  return p;\n                }(e, t, s);\n\n              case "unsuback":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.dup ? n.DUP_MASK : 0,\n                        u = s.granted,\n                        c = s.properties,\n                        h = s.cmd;\n                  let f = 2;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n\n                  if (5 === o) {\n                    if ("object" != typeof u || !u.length) return t.emit("error", new Error("Invalid qos vector")), !1;\n\n                    for (let e = 0; e < u.length; e += 1) {\n                      if ("number" != typeof u[e]) return t.emit("error", new Error("Invalid qos vector")), !1;\n                      f += 1;\n                    }\n                  }\n\n                  let p = null;\n\n                  if (5 === o) {\n                    if (!(p = T(t, c, i, f))) return !1;\n                    f += p.length;\n                  }\n\n                  t.write(n.ACKS[h][0][l][0]), v(t, f), d(t, a), null !== p && p.write();\n                  5 === o && t.write(r.from(u));\n                  return !0;\n                }(e, t, s);\n\n              case "pingreq":\n              case "pingresp":\n                return function (e, t, r) {\n                  return t.write(n.EMPTY[e.cmd]);\n                }(e, t);\n\n              case "disconnect":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.reasonCode,\n                        l = s.properties;\n                  let u = 5 === o ? 1 : 0,\n                      c = null;\n\n                  if (5 === o) {\n                    if (!(c = T(t, l, i, u))) return !1;\n                    u += c.length;\n                  }\n\n                  t.write(r.from([n.codes.disconnect << 4])), v(t, u), 5 === o && t.write(r.from([a]));\n                  null !== c && c.write();\n                  return !0;\n                }(e, t, s);\n\n              case "auth":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.reasonCode,\n                        l = s.properties;\n                  let u = 5 === o ? 1 : 0;\n                  5 !== o && t.emit("error", new Error("Invalid mqtt version for auth packet"));\n                  const c = T(t, l, i, u);\n                  if (!c) return !1;\n                  u += c.length, t.write(r.from([n.codes.auth << 4])), v(t, u), t.write(r.from([a])), null !== c && c.write();\n                  return !0;\n                }(e, t, s);\n\n              default:\n                return t.emit("error", new Error("Unknown command")), !1;\n            }\n          }\n\n          function b(e) {\n            e.uncork();\n          }\n\n          Object.defineProperty(y, "cacheNumbers", {\n            get: () => d === k,\n\n            set(e) {\n              e ? (u && 0 !== Object.keys(u).length || (g = !0), d = k) : (g = !1, d = S);\n            }\n\n          });\n          const m = {};\n\n          function v(e, t) {\n            if (t > n.VARBYTEINT_MAX) return e.emit("error", new Error(`Invalid variable byte integer: ${t}`)), !1;\n            let r = m[t];\n            return r || (r = f(t), t < 16384 && (m[t] = r)), l("writeVarByteInt: writing to stream: %o", r), e.write(r);\n          }\n\n          function w(e, t) {\n            const n = r.byteLength(t);\n            return d(e, n), l("writeString: %s", t), e.write(t, "utf8");\n          }\n\n          function _(e, t, r) {\n            w(e, t), w(e, r);\n          }\n\n          function k(e, t) {\n            return l("writeNumberCached: number: %d", t), l("writeNumberCached: %o", u[t]), e.write(u[t]);\n          }\n\n          function S(e, t) {\n            const r = c(t);\n            return l("writeNumberGenerated: %o", r), e.write(r);\n          }\n\n          function E(e, t) {\n            "string" == typeof t ? w(e, t) : t ? (d(e, t.length), e.write(t)) : d(e, 0);\n          }\n\n          function C(e, t) {\n            if ("object" != typeof t || null != t.length) return {\n              length: 1,\n\n              write() {\n                A(e, {}, 0);\n              }\n\n            };\n            let i = 0;\n\n            function o(t, i) {\n              let o = 0;\n\n              switch (n.propertiesTypes[t]) {\n                case "byte":\n                  if ("boolean" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 2;\n                  break;\n\n                case "int8":\n                  if ("number" != typeof i || i < 0 || i > 255) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 2;\n                  break;\n\n                case "binary":\n                  if (i && null === i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 1 + r.byteLength(i) + 2;\n                  break;\n\n                case "int16":\n                  if ("number" != typeof i || i < 0 || i > 65535) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 3;\n                  break;\n\n                case "int32":\n                  if ("number" != typeof i || i < 0 || i > 4294967295) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 5;\n                  break;\n\n                case "var":\n                  if ("number" != typeof i || i < 0 || i > 268435455) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 1 + r.byteLength(f(i));\n                  break;\n\n                case "string":\n                  if ("string" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 3 + r.byteLength(i.toString());\n                  break;\n\n                case "pair":\n                  if ("object" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += Object.getOwnPropertyNames(i).reduce((e, t) => {\n                    const n = i[t];\n                    return Array.isArray(n) ? e += n.reduce((e, n) => e += 3 + r.byteLength(t.toString()) + 2 + r.byteLength(n.toString()), 0) : e += 3 + r.byteLength(t.toString()) + 2 + r.byteLength(i[t].toString()), e;\n                  }, 0);\n                  break;\n\n                default:\n                  return e.emit("error", new Error(`Invalid property ${t}: ${i}`)), !1;\n              }\n\n              return o;\n            }\n\n            if (t) for (const e in t) {\n              let r = 0,\n                  n = 0;\n              const s = t[e];\n              if (Array.isArray(s)) for (let t = 0; t < s.length; t++) {\n                if (!(n = o(e, s[t]))) return !1;\n                r += n;\n              } else {\n                if (!(n = o(e, s))) return !1;\n                r = n;\n              }\n              if (!r) return !1;\n              i += r;\n            }\n            return {\n              length: r.byteLength(f(i)) + i,\n\n              write() {\n                A(e, t, i);\n              }\n\n            };\n          }\n\n          function T(e, t, r, n) {\n            const i = ["reasonString", "userProperties"],\n                  o = r && r.properties && r.properties.maximumPacketSize ? r.properties.maximumPacketSize : 0;\n            let s = C(e, t);\n            if (o) for (; n + s.length > o;) {\n              const r = i.shift();\n              if (!r || !t[r]) return !1;\n              delete t[r], s = C(e, t);\n            }\n            return s;\n          }\n\n          function x(e, t, i) {\n            switch (n.propertiesTypes[t]) {\n              case "byte":\n                e.write(r.from([n.properties[t]])), e.write(r.from([+i]));\n                break;\n\n              case "int8":\n                e.write(r.from([n.properties[t]])), e.write(r.from([i]));\n                break;\n\n              case "binary":\n                e.write(r.from([n.properties[t]])), E(e, i);\n                break;\n\n              case "int16":\n                e.write(r.from([n.properties[t]])), d(e, i);\n                break;\n\n              case "int32":\n                e.write(r.from([n.properties[t]])), function (e, t) {\n                  const r = p(t);\n                  l("write4ByteNumber: %o", r), e.write(r);\n                }(e, i);\n                break;\n\n              case "var":\n                e.write(r.from([n.properties[t]])), v(e, i);\n                break;\n\n              case "string":\n                e.write(r.from([n.properties[t]])), w(e, i);\n                break;\n\n              case "pair":\n                Object.getOwnPropertyNames(i).forEach(o => {\n                  const s = i[o];\n                  Array.isArray(s) ? s.forEach(i => {\n                    e.write(r.from([n.properties[t]])), _(e, o.toString(), i.toString());\n                  }) : (e.write(r.from([n.properties[t]])), _(e, o.toString(), s.toString()));\n                });\n                break;\n\n              default:\n                return e.emit("error", new Error(`Invalid property ${t} value: ${i}`)), !1;\n            }\n          }\n\n          function A(e, t, r) {\n            v(e, r);\n\n            for (const r in t) if (Object.prototype.hasOwnProperty.call(t, r) && null !== t[r]) {\n              const n = t[r];\n              if (Array.isArray(n)) for (let t = 0; t < n.length; t++) x(e, r, n[t]);else x(e, r, n);\n            }\n          }\n\n          function I(e) {\n            return e ? e instanceof r ? e.length : r.byteLength(e) : 0;\n          }\n\n          function P(e) {\n            return "string" == typeof e || e instanceof r;\n          }\n\n          t.exports = y;\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "./constants": 38,\n      "./numbers": 41,\n      buffer: 17,\n      debug: 18,\n      "process-nextick-args": 49\n    }],\n    45: [function (e, t, r) {\n      var n = 1e3,\n          i = 60 * n,\n          o = 60 * i,\n          s = 24 * o,\n          a = 7 * s,\n          l = 365.25 * s;\n\n      function u(e, t, r, n) {\n        var i = t >= 1.5 * r;\n        return Math.round(e / r) + " " + n + (i ? "s" : "");\n      }\n\n      t.exports = function (e, t) {\n        t = t || {};\n        var r = typeof e;\n        if ("string" === r && e.length > 0) return function (e) {\n          if ((e = String(e)).length > 100) return;\n          var t = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);\n          if (!t) return;\n          var r = parseFloat(t[1]);\n\n          switch ((t[2] || "ms").toLowerCase()) {\n            case "years":\n            case "year":\n            case "yrs":\n            case "yr":\n            case "y":\n              return r * l;\n\n            case "weeks":\n            case "week":\n            case "w":\n              return r * a;\n\n            case "days":\n            case "day":\n            case "d":\n              return r * s;\n\n            case "hours":\n            case "hour":\n            case "hrs":\n            case "hr":\n            case "h":\n              return r * o;\n\n            case "minutes":\n            case "minute":\n            case "mins":\n            case "min":\n            case "m":\n              return r * i;\n\n            case "seconds":\n            case "second":\n            case "secs":\n            case "sec":\n            case "s":\n              return r * n;\n\n            case "milliseconds":\n            case "millisecond":\n            case "msecs":\n            case "msec":\n            case "ms":\n              return r;\n\n            default:\n              return;\n          }\n        }(e);\n        if ("number" === r && isFinite(e)) return t.long ? function (e) {\n          var t = Math.abs(e);\n          if (t >= s) return u(e, t, s, "day");\n          if (t >= o) return u(e, t, o, "hour");\n          if (t >= i) return u(e, t, i, "minute");\n          if (t >= n) return u(e, t, n, "second");\n          return e + " ms";\n        }(e) : function (e) {\n          var t = Math.abs(e);\n          if (t >= s) return Math.round(e / s) + "d";\n          if (t >= o) return Math.round(e / o) + "h";\n          if (t >= i) return Math.round(e / i) + "m";\n          if (t >= n) return Math.round(e / n) + "s";\n          return e + "ms";\n        }(e);\n        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));\n      };\n    }, {}],\n    46: [function (e, t, r) {\n      const n = e("./lib/number-allocator.js");\n      t.exports.NumberAllocator = n;\n    }, {\n      "./lib/number-allocator.js": 47\n    }],\n    47: [function (e, t, r) {\n      "use strict";\n\n      const n = e("js-sdsl").Set,\n            i = e("debug")("number-allocator:trace"),\n            o = e("debug")("number-allocator:error");\n\n      function s(e, t) {\n        this.low = e, this.high = t;\n      }\n\n      function a(e, t) {\n        if (!(this instanceof a)) return new a(e, t);\n        this.min = e, this.max = t, this.ss = new n([], (e, t) => e.compare(t)), i("Create"), this.clear();\n      }\n\n      s.prototype.equals = function (e) {\n        return this.low === e.low && this.high === e.high;\n      }, s.prototype.compare = function (e) {\n        return this.low < e.low && this.high < e.low ? -1 : e.low < this.low && e.high < this.low ? 1 : 0;\n      }, a.prototype.firstVacant = function () {\n        return 0 === this.ss.size() ? null : this.ss.front().low;\n      }, a.prototype.alloc = function () {\n        if (0 === this.ss.size()) return i("alloc():empty"), null;\n        const e = this.ss.front(),\n              t = e.low;\n        return t + 1 <= e.high ? ++e.low : this.ss.eraseElementByPos(0), i("alloc():" + t), t;\n      }, a.prototype.use = function (e) {\n        const t = new s(e, e),\n              r = this.ss.lowerBound(t);\n\n        if (r) {\n          if (r.equals(t)) return this.ss.eraseElementByValue(r), i("use():" + e), !0;\n          if (r.low > e) return !1;\n          if (r.low === e) return ++r.low, i("use():" + e), !0;\n          if (r.high === e) return --r.high, i("use():" + e), !0;\n          const n = r.low;\n          return r.low = e + 1, this.ss.insert(new s(n, e - 1)), i("use():" + e), !0;\n        }\n\n        return i("use():failed"), !1;\n      }, a.prototype.free = function (e) {\n        if (e < this.min || e > this.max) return void o("free():" + e + " is out of range");\n        const t = new s(e, e),\n              r = this.ss.lowerBound(t);\n\n        if (r) {\n          if (r.low <= e && e <= r.high) return void o("free():" + e + " has already been vacant");\n          if (r === this.ss.front()) e + 1 === r.low ? --r.low : this.ss.insert(t);else {\n            const n = this.ss.reverseLowerBound(t);\n            n.high + 1 === e ? e + 1 === r.low ? (this.ss.eraseElementByValue(n), r.low = n.low) : n.high = e : e + 1 === r.low ? r.low = e : this.ss.insert(t);\n          }\n        } else {\n          if (r === this.ss.front()) return void this.ss.insert(t);\n          const n = this.ss.reverseLowerBound(t);\n          n.high + 1 === e ? n.high = e : this.ss.insert(t);\n        }\n\n        i("free():" + e);\n      }, a.prototype.clear = function () {\n        i("clear()"), this.ss.clear(), this.ss.insert(new s(this.min, this.max));\n      }, a.prototype.intervalCount = function () {\n        return this.ss.size();\n      }, a.prototype.dump = function () {\n        console.log("length:" + this.ss.size());\n\n        for (const e of this.ss) console.log(e);\n      }, t.exports = a;\n    }, {\n      debug: 18,\n      "js-sdsl": 36\n    }],\n    48: [function (e, t, r) {\n      var n = e("wrappy");\n\n      function i(e) {\n        var t = function () {\n          return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));\n        };\n\n        return t.called = !1, t;\n      }\n\n      function o(e) {\n        var t = function () {\n          if (t.called) throw new Error(t.onceError);\n          return t.called = !0, t.value = e.apply(this, arguments);\n        },\n            r = e.name || "Function wrapped with `once`";\n\n        return t.onceError = r + " shouldn\'t be called more than once", t.called = !1, t;\n      }\n\n      t.exports = n(i), t.exports.strict = n(o), i.proto = i(function () {\n        Object.defineProperty(Function.prototype, "once", {\n          value: function () {\n            return i(this);\n          },\n          configurable: !0\n        }), Object.defineProperty(Function.prototype, "onceStrict", {\n          value: function () {\n            return o(this);\n          },\n          configurable: !0\n        });\n      });\n    }, {\n      wrappy: 79\n    }],\n    49: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          void 0 === e || !e.version || 0 === e.version.indexOf("v0.") || 0 === e.version.indexOf("v1.") && 0 !== e.version.indexOf("v1.8.") ? t.exports = {\n            nextTick: function (t, r, n, i) {\n              if ("function" != typeof t) throw new TypeError(\'"callback" argument must be a function\');\n              var o,\n                  s,\n                  a = arguments.length;\n\n              switch (a) {\n                case 0:\n                case 1:\n                  return e.nextTick(t);\n\n                case 2:\n                  return e.nextTick(function () {\n                    t.call(null, r);\n                  });\n\n                case 3:\n                  return e.nextTick(function () {\n                    t.call(null, r, n);\n                  });\n\n                case 4:\n                  return e.nextTick(function () {\n                    t.call(null, r, n, i);\n                  });\n\n                default:\n                  for (o = new Array(a - 1), s = 0; s < o.length;) o[s++] = arguments[s];\n\n                  return e.nextTick(function () {\n                    t.apply(null, o);\n                  });\n              }\n            }\n          } : t.exports = e;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50\n    }],\n    50: [function (e, t, r) {\n      var n,\n          i,\n          o = t.exports = {};\n\n      function s() {\n        throw new Error("setTimeout has not been defined");\n      }\n\n      function a() {\n        throw new Error("clearTimeout has not been defined");\n      }\n\n      function l(e) {\n        if (n === setTimeout) return setTimeout(e, 0);\n        if ((n === s || !n) && setTimeout) return n = setTimeout, setTimeout(e, 0);\n\n        try {\n          return n(e, 0);\n        } catch (t) {\n          try {\n            return n.call(null, e, 0);\n          } catch (t) {\n            return n.call(this, e, 0);\n          }\n        }\n      }\n\n      !function () {\n        try {\n          n = "function" == typeof setTimeout ? setTimeout : s;\n        } catch (e) {\n          n = s;\n        }\n\n        try {\n          i = "function" == typeof clearTimeout ? clearTimeout : a;\n        } catch (e) {\n          i = a;\n        }\n      }();\n      var u,\n          c = [],\n          h = !1,\n          f = -1;\n\n      function p() {\n        h && u && (h = !1, u.length ? c = u.concat(c) : f = -1, c.length && d());\n      }\n\n      function d() {\n        if (!h) {\n          var e = l(p);\n          h = !0;\n\n          for (var t = c.length; t;) {\n            for (u = c, c = []; ++f < t;) u && u[f].run();\n\n            f = -1, t = c.length;\n          }\n\n          u = null, h = !1, function (e) {\n            if (i === clearTimeout) return clearTimeout(e);\n            if ((i === a || !i) && clearTimeout) return i = clearTimeout, clearTimeout(e);\n\n            try {\n              i(e);\n            } catch (t) {\n              try {\n                return i.call(null, e);\n              } catch (t) {\n                return i.call(this, e);\n              }\n            }\n          }(e);\n        }\n      }\n\n      function g(e, t) {\n        this.fun = e, this.array = t;\n      }\n\n      function y() {}\n\n      o.nextTick = function (e) {\n        var t = new Array(arguments.length - 1);\n        if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];\n        c.push(new g(e, t)), 1 !== c.length || h || l(d);\n      }, g.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      }, o.title = "browser", o.browser = !0, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = y, o.addListener = y, o.once = y, o.off = y, o.removeListener = y, o.removeAllListeners = y, o.emit = y, o.prependListener = y, o.prependOnceListener = y, o.listeners = function (e) {\n        return [];\n      }, o.binding = function (e) {\n        throw new Error("process.binding is not supported");\n      }, o.cwd = function () {\n        return "/";\n      }, o.chdir = function (e) {\n        throw new Error("process.chdir is not supported");\n      }, o.umask = function () {\n        return 0;\n      };\n    }, {}],\n    51: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          !function (n) {\n            var i = "object" == typeof r && r && !r.nodeType && r,\n                o = "object" == typeof t && t && !t.nodeType && t,\n                s = "object" == typeof e && e;\n            s.global !== s && s.window !== s && s.self !== s || (n = s);\n            var a,\n                l,\n                u = 2147483647,\n                c = 36,\n                h = 1,\n                f = 26,\n                p = 38,\n                d = 700,\n                g = 72,\n                y = 128,\n                b = "-",\n                m = /^xn--/,\n                v = /[^\\x20-\\x7E]/,\n                w = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n                _ = {\n              overflow: "Overflow: input needs wider integers to process",\n              "not-basic": "Illegal input >= 0x80 (not a basic code point)",\n              "invalid-input": "Invalid input"\n            },\n                k = c - h,\n                S = Math.floor,\n                E = String.fromCharCode;\n\n            function C(e) {\n              throw new RangeError(_[e]);\n            }\n\n            function T(e, t) {\n              for (var r = e.length, n = []; r--;) n[r] = t(e[r]);\n\n              return n;\n            }\n\n            function x(e, t) {\n              var r = e.split("@"),\n                  n = "";\n              return r.length > 1 && (n = r[0] + "@", e = r[1]), n + T((e = e.replace(w, ".")).split("."), t).join(".");\n            }\n\n            function A(e) {\n              for (var t, r, n = [], i = 0, o = e.length; i < o;) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);\n\n              return n;\n            }\n\n            function I(e) {\n              return T(e, function (e) {\n                var t = "";\n                return e > 65535 && (t += E((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += E(e);\n              }).join("");\n            }\n\n            function P(e, t) {\n              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);\n            }\n\n            function O(e, t, r) {\n              var n = 0;\n\n              for (e = r ? S(e / d) : e >> 1, e += S(e / t); e > k * f >> 1; n += c) e = S(e / k);\n\n              return S(n + (k + 1) * e / (e + p));\n            }\n\n            function B(e) {\n              var t,\n                  r,\n                  n,\n                  i,\n                  o,\n                  s,\n                  a,\n                  l,\n                  p,\n                  d,\n                  m,\n                  v = [],\n                  w = e.length,\n                  _ = 0,\n                  k = y,\n                  E = g;\n\n              for ((r = e.lastIndexOf(b)) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && C("not-basic"), v.push(e.charCodeAt(n));\n\n              for (i = r > 0 ? r + 1 : 0; i < w;) {\n                for (o = _, s = 1, a = c; i >= w && C("invalid-input"), ((l = (m = e.charCodeAt(i++)) - 48 < 10 ? m - 22 : m - 65 < 26 ? m - 65 : m - 97 < 26 ? m - 97 : c) >= c || l > S((u - _) / s)) && C("overflow"), _ += l * s, !(l < (p = a <= E ? h : a >= E + f ? f : a - E)); a += c) s > S(u / (d = c - p)) && C("overflow"), s *= d;\n\n                E = O(_ - o, t = v.length + 1, 0 == o), S(_ / t) > u - k && C("overflow"), k += S(_ / t), _ %= t, v.splice(_++, 0, k);\n              }\n\n              return I(v);\n            }\n\n            function R(e) {\n              var t,\n                  r,\n                  n,\n                  i,\n                  o,\n                  s,\n                  a,\n                  l,\n                  p,\n                  d,\n                  m,\n                  v,\n                  w,\n                  _,\n                  k,\n                  T = [];\n\n              for (v = (e = A(e)).length, t = y, r = 0, o = g, s = 0; s < v; ++s) (m = e[s]) < 128 && T.push(E(m));\n\n              for (n = i = T.length, i && T.push(b); n < v;) {\n                for (a = u, s = 0; s < v; ++s) (m = e[s]) >= t && m < a && (a = m);\n\n                for (a - t > S((u - r) / (w = n + 1)) && C("overflow"), r += (a - t) * w, t = a, s = 0; s < v; ++s) if ((m = e[s]) < t && ++r > u && C("overflow"), m == t) {\n                  for (l = r, p = c; !(l < (d = p <= o ? h : p >= o + f ? f : p - o)); p += c) k = l - d, _ = c - d, T.push(E(P(d + k % _, 0))), l = S(k / _);\n\n                  T.push(E(P(l, 0))), o = O(r, w, n == i), r = 0, ++n;\n                }\n\n                ++r, ++t;\n              }\n\n              return T.join("");\n            }\n\n            if (a = {\n              version: "1.4.1",\n              ucs2: {\n                decode: A,\n                encode: I\n              },\n              decode: B,\n              encode: R,\n              toASCII: function (e) {\n                return x(e, function (e) {\n                  return v.test(e) ? "xn--" + R(e) : e;\n                });\n              },\n              toUnicode: function (e) {\n                return x(e, function (e) {\n                  return m.test(e) ? B(e.slice(4).toLowerCase()) : e;\n                });\n              }\n            }, i && o) {\n              if (t.exports == i) o.exports = a;else for (l in a) a.hasOwnProperty(l) && (i[l] = a[l]);\n            } else n.punycode = a;\n          }(this);\n        }).call(this);\n      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {}],\n    52: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        return Object.prototype.hasOwnProperty.call(e, t);\n      }\n\n      t.exports = function (e, t, r, o) {\n        t = t || "&", r = r || "=";\n        var s = {};\n        if ("string" != typeof e || 0 === e.length) return s;\n        var a = /\\+/g;\n        e = e.split(t);\n        var l = 1e3;\n        o && "number" == typeof o.maxKeys && (l = o.maxKeys);\n        var u = e.length;\n        l > 0 && u > l && (u = l);\n\n        for (var c = 0; c < u; ++c) {\n          var h,\n              f,\n              p,\n              d,\n              g = e[c].replace(a, "%20"),\n              y = g.indexOf(r);\n          y >= 0 ? (h = g.substr(0, y), f = g.substr(y + 1)) : (h = g, f = ""), p = decodeURIComponent(h), d = decodeURIComponent(f), n(s, p) ? i(s[p]) ? s[p].push(d) : s[p] = [s[p], d] : s[p] = d;\n        }\n\n        return s;\n      };\n\n      var i = Array.isArray || function (e) {\n        return "[object Array]" === Object.prototype.toString.call(e);\n      };\n    }, {}],\n    53: [function (e, t, r) {\n      "use strict";\n\n      var n = function (e) {\n        switch (typeof e) {\n          case "string":\n            return e;\n\n          case "boolean":\n            return e ? "true" : "false";\n\n          case "number":\n            return isFinite(e) ? e : "";\n\n          default:\n            return "";\n        }\n      };\n\n      t.exports = function (e, t, r, a) {\n        return t = t || "&", r = r || "=", null === e && (e = void 0), "object" == typeof e ? o(s(e), function (s) {\n          var a = encodeURIComponent(n(s)) + r;\n          return i(e[s]) ? o(e[s], function (e) {\n            return a + encodeURIComponent(n(e));\n          }).join(t) : a + encodeURIComponent(n(e[s]));\n        }).join(t) : a ? encodeURIComponent(n(a)) + r + encodeURIComponent(n(e)) : "";\n      };\n\n      var i = Array.isArray || function (e) {\n        return "[object Array]" === Object.prototype.toString.call(e);\n      };\n\n      function o(e, t) {\n        if (e.map) return e.map(t);\n\n        for (var r = [], n = 0; n < e.length; n++) r.push(t(e[n], n));\n\n        return r;\n      }\n\n      var s = Object.keys || function (e) {\n        var t = [];\n\n        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);\n\n        return t;\n      };\n    }, {}],\n    54: [function (e, t, r) {\n      "use strict";\n\n      r.decode = r.parse = e("./decode"), r.encode = r.stringify = e("./encode");\n    }, {\n      "./decode": 52,\n      "./encode": 53\n    }],\n    55: [function (e, t, r) {\n      "use strict";\n\n      var n = {};\n\n      function i(e, t, r) {\n        r || (r = Error);\n\n        var i = function (e) {\n          var r, n;\n\n          function i(r, n, i) {\n            return e.call(this, function (e, r, n) {\n              return "string" == typeof t ? t : t(e, r, n);\n            }(r, n, i)) || this;\n          }\n\n          return n = e, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n, i;\n        }(r);\n\n        i.prototype.name = r.name, i.prototype.code = e, n[e] = i;\n      }\n\n      function o(e, t) {\n        if (Array.isArray(e)) {\n          var r = e.length;\n          return e = e.map(function (e) {\n            return String(e);\n          }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);\n        }\n\n        return "of ".concat(t, " ").concat(String(e));\n      }\n\n      i("ERR_INVALID_OPT_VALUE", function (e, t) {\n        return \'The value "\' + t + \'" is invalid for option "\' + e + \'"\';\n      }, TypeError), i("ERR_INVALID_ARG_TYPE", function (e, t, r) {\n        var n, i, s, a;\n        if ("string" == typeof t && (i = "not ", t.substr(!s || s < 0 ? 0 : +s, i.length) === i) ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be", function (e, t, r) {\n          return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;\n        }(e, " argument")) a = "The ".concat(e, " ").concat(n, " ").concat(o(t, "type"));else {\n          var l = function (e, t, r) {\n            return "number" != typeof r && (r = 0), !(r + t.length > e.length) && -1 !== e.indexOf(t, r);\n          }(e, ".") ? "property" : "argument";\n          a = \'The "\'.concat(e, \'" \').concat(l, " ").concat(n, " ").concat(o(t, "type"));\n        }\n        return a += ". Received type ".concat(typeof r);\n      }, TypeError), i("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), i("ERR_METHOD_NOT_IMPLEMENTED", function (e) {\n        return "The " + e + " method is not implemented";\n      }), i("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), i("ERR_STREAM_DESTROYED", function (e) {\n        return "Cannot call " + e + " after a stream was destroyed";\n      }), i("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), i("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), i("ERR_STREAM_WRITE_AFTER_END", "write after end"), i("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), i("ERR_UNKNOWN_ENCODING", function (e) {\n        return "Unknown encoding: " + e;\n      }, TypeError), i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), t.exports.codes = n;\n    }, {}],\n    56: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          var n = Object.keys || function (e) {\n            var t = [];\n\n            for (var r in e) t.push(r);\n\n            return t;\n          };\n\n          t.exports = u;\n          var i = e("./_stream_readable"),\n              o = e("./_stream_writable");\n          e("inherits")(u, i);\n\n          for (var s = n(o.prototype), a = 0; a < s.length; a++) {\n            var l = s[a];\n            u.prototype[l] || (u.prototype[l] = o.prototype[l]);\n          }\n\n          function u(e) {\n            if (!(this instanceof u)) return new u(e);\n            i.call(this, e), o.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", c)));\n          }\n\n          function c() {\n            this._writableState.ended || r.nextTick(h, this);\n          }\n\n          function h(e) {\n            e.end();\n          }\n\n          Object.defineProperty(u.prototype, "writableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.highWaterMark;\n            }\n          }), Object.defineProperty(u.prototype, "writableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState && this._writableState.getBuffer();\n            }\n          }), Object.defineProperty(u.prototype, "writableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.length;\n            }\n          }), Object.defineProperty(u.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;\n            },\n            set: function (e) {\n              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);\n            }\n          });\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./_stream_readable": 58,\n      "./_stream_writable": 60,\n      _process: 50,\n      inherits: 24\n    }],\n    57: [function (e, t, r) {\n      "use strict";\n\n      t.exports = i;\n      var n = e("./_stream_transform");\n\n      function i(e) {\n        if (!(this instanceof i)) return new i(e);\n        n.call(this, e);\n      }\n\n      e("inherits")(i, n), i.prototype._transform = function (e, t, r) {\n        r(null, e);\n      };\n    }, {\n      "./_stream_transform": 59,\n      inherits: 24\n    }],\n    58: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          var i;\n          t.exports = C, C.ReadableState = E;\n          e("events").EventEmitter;\n\n          var o = function (e, t) {\n            return e.listeners(t).length;\n          },\n              s = e("./internal/streams/stream"),\n              a = e("buffer").Buffer,\n              l = n.Uint8Array || function () {};\n\n          var u,\n              c = e("util");\n          u = c && c.debuglog ? c.debuglog("stream") : function () {};\n          var h,\n              f,\n              p,\n              d = e("./internal/streams/buffer_list"),\n              g = e("./internal/streams/destroy"),\n              y = e("./internal/streams/state").getHighWaterMark,\n              b = e("../errors").codes,\n              m = b.ERR_INVALID_ARG_TYPE,\n              v = b.ERR_STREAM_PUSH_AFTER_EOF,\n              w = b.ERR_METHOD_NOT_IMPLEMENTED,\n              _ = b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n          e("inherits")(C, s);\n          var k = g.errorOrDestroy,\n              S = ["error", "close", "destroy", "pause", "resume"];\n\n          function E(t, r, n) {\n            i = i || e("./_stream_duplex"), t = t || {}, "boolean" != typeof n && (n = r instanceof i), this.objectMode = !!t.objectMode, n && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = y(this, t, "readableHighWaterMark", n), this.buffer = new d(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (h || (h = e("string_decoder/").StringDecoder), this.decoder = new h(t.encoding), this.encoding = t.encoding);\n          }\n\n          function C(t) {\n            if (i = i || e("./_stream_duplex"), !(this instanceof C)) return new C(t);\n            var r = this instanceof i;\n            this._readableState = new E(t, this, r), this.readable = !0, t && ("function" == typeof t.read && (this._read = t.read), "function" == typeof t.destroy && (this._destroy = t.destroy)), s.call(this);\n          }\n\n          function T(e, t, r, n, i) {\n            u("readableAddChunk", t);\n            var o,\n                s = e._readableState;\n            if (null === t) s.reading = !1, function (e, t) {\n              if (u("onEofChunk"), t.ended) return;\n\n              if (t.decoder) {\n                var r = t.decoder.end();\n                r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);\n              }\n\n              t.ended = !0, t.sync ? P(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, O(e)));\n            }(e, s);else if (i || (o = function (e, t) {\n              var r;\n              n = t, a.isBuffer(n) || n instanceof l || "string" == typeof t || void 0 === t || e.objectMode || (r = new m("chunk", ["string", "Buffer", "Uint8Array"], t));\n              var n;\n              return r;\n            }(s, t)), o) k(e, o);else if (s.objectMode || t && t.length > 0) {\n              if ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === a.prototype || (t = function (e) {\n                return a.from(e);\n              }(t)), n) s.endEmitted ? k(e, new _()) : x(e, s, t, !0);else if (s.ended) k(e, new v());else {\n                if (s.destroyed) return !1;\n                s.reading = !1, s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? x(e, s, t, !1) : B(e, s)) : x(e, s, t, !1);\n              }\n            } else n || (s.reading = !1, B(e, s));\n            return !s.ended && (s.length < s.highWaterMark || 0 === s.length);\n          }\n\n          function x(e, t, r, n) {\n            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && P(e)), B(e, t);\n          }\n\n          Object.defineProperty(C.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._readableState && this._readableState.destroyed;\n            },\n            set: function (e) {\n              this._readableState && (this._readableState.destroyed = e);\n            }\n          }), C.prototype.destroy = g.destroy, C.prototype._undestroy = g.undestroy, C.prototype._destroy = function (e, t) {\n            t(e);\n          }, C.prototype.push = function (e, t) {\n            var r,\n                n = this._readableState;\n            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = a.from(e, t), t = ""), r = !0), T(this, e, t, !1, r);\n          }, C.prototype.unshift = function (e) {\n            return T(this, e, null, !0, !1);\n          }, C.prototype.isPaused = function () {\n            return !1 === this._readableState.flowing;\n          }, C.prototype.setEncoding = function (t) {\n            h || (h = e("string_decoder/").StringDecoder);\n            var r = new h(t);\n            this._readableState.decoder = r, this._readableState.encoding = this._readableState.decoder.encoding;\n\n            for (var n = this._readableState.buffer.head, i = ""; null !== n;) i += r.write(n.data), n = n.next;\n\n            return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, this;\n          };\n          var A = 1073741824;\n\n          function I(e, t) {\n            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function (e) {\n              return e >= A ? e = A : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;\n            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));\n          }\n\n          function P(e) {\n            var t = e._readableState;\n            u("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (u("emitReadable", t.flowing), t.emittedReadable = !0, r.nextTick(O, e));\n          }\n\n          function O(e) {\n            var t = e._readableState;\n            u("emitReadable_", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit("readable"), t.emittedReadable = !1), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, j(e);\n          }\n\n          function B(e, t) {\n            t.readingMore || (t.readingMore = !0, r.nextTick(R, e, t));\n          }\n\n          function R(e, t) {\n            for (; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length);) {\n              var r = t.length;\n              if (u("maybeReadMore read 0"), e.read(0), r === t.length) break;\n            }\n\n            t.readingMore = !1;\n          }\n\n          function M(e) {\n            var t = e._readableState;\n            t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume();\n          }\n\n          function N(e) {\n            u("readable nexttick read 0"), e.read(0);\n          }\n\n          function L(e, t) {\n            u("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit("resume"), j(e), t.flowing && !t.reading && e.read(0);\n          }\n\n          function j(e) {\n            var t = e._readableState;\n\n            for (u("flow", t.flowing); t.flowing && null !== e.read(););\n          }\n\n          function U(e, t) {\n            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r);\n            var r;\n          }\n\n          function q(e) {\n            var t = e._readableState;\n            u("endReadable", t.endEmitted), t.endEmitted || (t.ended = !0, r.nextTick(D, t, e));\n          }\n\n          function D(e, t) {\n            if (u("endReadableNT", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, t.emit("end"), e.autoDestroy)) {\n              var r = t._writableState;\n              (!r || r.autoDestroy && r.finished) && t.destroy();\n            }\n          }\n\n          function z(e, t) {\n            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;\n\n            return -1;\n          }\n\n          C.prototype.read = function (e) {\n            u("read", e), e = parseInt(e, 10);\n            var t = this._readableState,\n                r = e;\n            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return u("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? q(this) : P(this), null;\n            if (0 === (e = I(e, t)) && t.ended) return 0 === t.length && q(this), null;\n            var n,\n                i = t.needReadable;\n            return u("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && u("length less than watermark", i = !0), t.ended || t.reading ? u("reading or ended", i = !1) : i && (u("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = I(r, t))), null === (n = e > 0 ? U(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && q(this)), null !== n && this.emit("data", n), n;\n          }, C.prototype._read = function (e) {\n            k(this, new w("_read()"));\n          }, C.prototype.pipe = function (e, t) {\n            var n = this,\n                i = this._readableState;\n\n            switch (i.pipesCount) {\n              case 0:\n                i.pipes = e;\n                break;\n\n              case 1:\n                i.pipes = [i.pipes, e];\n                break;\n\n              default:\n                i.pipes.push(e);\n            }\n\n            i.pipesCount += 1, u("pipe count=%d opts=%j", i.pipesCount, t);\n            var s = (!t || !1 !== t.end) && e !== r.stdout && e !== r.stderr ? l : y;\n\n            function a(t, r) {\n              u("onunpipe"), t === n && r && !1 === r.hasUnpiped && (r.hasUnpiped = !0, u("cleanup"), e.removeListener("close", d), e.removeListener("finish", g), e.removeListener("drain", c), e.removeListener("error", p), e.removeListener("unpipe", a), n.removeListener("end", l), n.removeListener("end", y), n.removeListener("data", f), h = !0, !i.awaitDrain || e._writableState && !e._writableState.needDrain || c());\n            }\n\n            function l() {\n              u("onend"), e.end();\n            }\n\n            i.endEmitted ? r.nextTick(s) : n.once("end", s), e.on("unpipe", a);\n\n            var c = function (e) {\n              return function () {\n                var t = e._readableState;\n                u("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && o(e, "data") && (t.flowing = !0, j(e));\n              };\n            }(n);\n\n            e.on("drain", c);\n            var h = !1;\n\n            function f(t) {\n              u("ondata");\n              var r = e.write(t);\n              u("dest.write", r), !1 === r && ((1 === i.pipesCount && i.pipes === e || i.pipesCount > 1 && -1 !== z(i.pipes, e)) && !h && (u("false write response, pause", i.awaitDrain), i.awaitDrain++), n.pause());\n            }\n\n            function p(t) {\n              u("onerror", t), y(), e.removeListener("error", p), 0 === o(e, "error") && k(e, t);\n            }\n\n            function d() {\n              e.removeListener("finish", g), y();\n            }\n\n            function g() {\n              u("onfinish"), e.removeListener("close", d), y();\n            }\n\n            function y() {\n              u("unpipe"), n.unpipe(e);\n            }\n\n            return n.on("data", f), function (e, t, r) {\n              if ("function" == typeof e.prependListener) return e.prependListener(t, r);\n              e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);\n            }(e, "error", p), e.once("close", d), e.once("finish", g), e.emit("pipe", n), i.flowing || (u("pipe resume"), n.resume()), e;\n          }, C.prototype.unpipe = function (e) {\n            var t = this._readableState,\n                r = {\n              hasUnpiped: !1\n            };\n            if (0 === t.pipesCount) return this;\n            if (1 === t.pipesCount) return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r), this);\n\n            if (!e) {\n              var n = t.pipes,\n                  i = t.pipesCount;\n              t.pipes = null, t.pipesCount = 0, t.flowing = !1;\n\n              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, {\n                hasUnpiped: !1\n              });\n\n              return this;\n            }\n\n            var s = z(t.pipes, e);\n            return -1 === s ? this : (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);\n          }, C.prototype.on = function (e, t) {\n            var n = s.prototype.on.call(this, e, t),\n                i = this._readableState;\n            return "data" === e ? (i.readableListening = this.listenerCount("readable") > 0, !1 !== i.flowing && this.resume()) : "readable" === e && (i.endEmitted || i.readableListening || (i.readableListening = i.needReadable = !0, i.flowing = !1, i.emittedReadable = !1, u("on readable", i.length, i.reading), i.length ? P(this) : i.reading || r.nextTick(N, this))), n;\n          }, C.prototype.addListener = C.prototype.on, C.prototype.removeListener = function (e, t) {\n            var n = s.prototype.removeListener.call(this, e, t);\n            return "readable" === e && r.nextTick(M, this), n;\n          }, C.prototype.removeAllListeners = function (e) {\n            var t = s.prototype.removeAllListeners.apply(this, arguments);\n            return "readable" !== e && void 0 !== e || r.nextTick(M, this), t;\n          }, C.prototype.resume = function () {\n            var e = this._readableState;\n            return e.flowing || (u("resume"), e.flowing = !e.readableListening, function (e, t) {\n              t.resumeScheduled || (t.resumeScheduled = !0, r.nextTick(L, e, t));\n            }(this, e)), e.paused = !1, this;\n          }, C.prototype.pause = function () {\n            return u("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (u("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;\n          }, C.prototype.wrap = function (e) {\n            var t = this,\n                r = this._readableState,\n                n = !1;\n\n            for (var i in e.on("end", function () {\n              if (u("wrapped end"), r.decoder && !r.ended) {\n                var e = r.decoder.end();\n                e && e.length && t.push(e);\n              }\n\n              t.push(null);\n            }), e.on("data", function (i) {\n              (u("wrapped data"), r.decoder && (i = r.decoder.write(i)), !r.objectMode || null !== i && void 0 !== i) && (r.objectMode || i && i.length) && (t.push(i) || (n = !0, e.pause()));\n            }), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function (t) {\n              return function () {\n                return e[t].apply(e, arguments);\n              };\n            }(i));\n\n            for (var o = 0; o < S.length; o++) e.on(S[o], this.emit.bind(this, S[o]));\n\n            return this._read = function (t) {\n              u("wrapped _read", t), n && (n = !1, e.resume());\n            }, this;\n          }, "function" == typeof Symbol && (C.prototype[Symbol.asyncIterator] = function () {\n            return void 0 === f && (f = e("./internal/streams/async_iterator")), f(this);\n          }), Object.defineProperty(C.prototype, "readableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.highWaterMark;\n            }\n          }), Object.defineProperty(C.prototype, "readableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState && this._readableState.buffer;\n            }\n          }), Object.defineProperty(C.prototype, "readableFlowing", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.flowing;\n            },\n            set: function (e) {\n              this._readableState && (this._readableState.flowing = e);\n            }\n          }), C._fromList = U, Object.defineProperty(C.prototype, "readableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.length;\n            }\n          }), "function" == typeof Symbol && (C.from = function (t, r) {\n            return void 0 === p && (p = e("./internal/streams/from")), p(C, t, r);\n          });\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      "./internal/streams/async_iterator": 61,\n      "./internal/streams/buffer_list": 62,\n      "./internal/streams/destroy": 63,\n      "./internal/streams/from": 65,\n      "./internal/streams/state": 67,\n      "./internal/streams/stream": 68,\n      _process: 50,\n      buffer: 17,\n      events: 22,\n      inherits: 24,\n      "string_decoder/": 75,\n      util: 16\n    }],\n    59: [function (e, t, r) {\n      "use strict";\n\n      t.exports = u;\n      var n = e("../errors").codes,\n          i = n.ERR_METHOD_NOT_IMPLEMENTED,\n          o = n.ERR_MULTIPLE_CALLBACK,\n          s = n.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n          a = n.ERR_TRANSFORM_WITH_LENGTH_0,\n          l = e("./_stream_duplex");\n\n      function u(e) {\n        if (!(this instanceof u)) return new u(e);\n        l.call(this, e), this._transformState = {\n          afterTransform: function (e, t) {\n            var r = this._transformState;\n            r.transforming = !1;\n            var n = r.writecb;\n            if (null === n) return this.emit("error", new o());\n            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);\n            var i = this._readableState;\n            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n          }.bind(this),\n          needTransform: !1,\n          transforming: !1,\n          writecb: null,\n          writechunk: null,\n          writeencoding: null\n        }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", c);\n      }\n\n      function c() {\n        var e = this;\n        "function" != typeof this._flush || this._readableState.destroyed ? h(this, null, null) : this._flush(function (t, r) {\n          h(e, t, r);\n        });\n      }\n\n      function h(e, t, r) {\n        if (t) return e.emit("error", t);\n        if (null != r && e.push(r), e._writableState.length) throw new a();\n        if (e._transformState.transforming) throw new s();\n        return e.push(null);\n      }\n\n      e("inherits")(u, l), u.prototype.push = function (e, t) {\n        return this._transformState.needTransform = !1, l.prototype.push.call(this, e, t);\n      }, u.prototype._transform = function (e, t, r) {\n        r(new i("_transform()"));\n      }, u.prototype._write = function (e, t, r) {\n        var n = this._transformState;\n\n        if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {\n          var i = this._readableState;\n          (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n        }\n      }, u.prototype._read = function (e) {\n        var t = this._transformState;\n        null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));\n      }, u.prototype._destroy = function (e, t) {\n        l.prototype._destroy.call(this, e, function (e) {\n          t(e);\n        });\n      };\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      inherits: 24\n    }],\n    60: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          function i(e) {\n            var t = this;\n            this.next = null, this.entry = null, this.finish = function () {\n              !function (e, t, r) {\n                var n = e.entry;\n                e.entry = null;\n\n                for (; n;) {\n                  var i = n.callback;\n                  t.pendingcb--, i(r), n = n.next;\n                }\n\n                t.corkedRequestsFree.next = e;\n              }(t, e);\n            };\n          }\n\n          var o;\n          t.exports = C, C.WritableState = E;\n\n          var s = {\n            deprecate: e("util-deprecate")\n          },\n              a = e("./internal/streams/stream"),\n              l = e("buffer").Buffer,\n              u = n.Uint8Array || function () {};\n\n          var c,\n              h = e("./internal/streams/destroy"),\n              f = e("./internal/streams/state").getHighWaterMark,\n              p = e("../errors").codes,\n              d = p.ERR_INVALID_ARG_TYPE,\n              g = p.ERR_METHOD_NOT_IMPLEMENTED,\n              y = p.ERR_MULTIPLE_CALLBACK,\n              b = p.ERR_STREAM_CANNOT_PIPE,\n              m = p.ERR_STREAM_DESTROYED,\n              v = p.ERR_STREAM_NULL_VALUES,\n              w = p.ERR_STREAM_WRITE_AFTER_END,\n              _ = p.ERR_UNKNOWN_ENCODING,\n              k = h.errorOrDestroy;\n\n          function S() {}\n\n          function E(t, n, s) {\n            o = o || e("./_stream_duplex"), t = t || {}, "boolean" != typeof s && (s = n instanceof o), this.objectMode = !!t.objectMode, s && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = f(this, t, "writableHighWaterMark", s), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;\n            var a = !1 === t.decodeStrings;\n            this.decodeStrings = !a, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {\n              !function (e, t) {\n                var n = e._writableState,\n                    i = n.sync,\n                    o = n.writecb;\n                if ("function" != typeof o) throw new y();\n                if (function (e) {\n                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;\n                }(n), t) !function (e, t, n, i, o) {\n                  --t.pendingcb, n ? (r.nextTick(o, i), r.nextTick(O, e, t), e._writableState.errorEmitted = !0, k(e, i)) : (o(i), e._writableState.errorEmitted = !0, k(e, i), O(e, t));\n                }(e, n, i, t, o);else {\n                  var s = I(n) || e.destroyed;\n                  s || n.corked || n.bufferProcessing || !n.bufferedRequest || A(e, n), i ? r.nextTick(x, e, n, s, o) : x(e, n, s, o);\n                }\n              }(n, e);\n            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new i(this);\n          }\n\n          function C(t) {\n            var r = this instanceof (o = o || e("./_stream_duplex"));\n            if (!r && !c.call(C, this)) return new C(t);\n            this._writableState = new E(t, this, r), this.writable = !0, t && ("function" == typeof t.write && (this._write = t.write), "function" == typeof t.writev && (this._writev = t.writev), "function" == typeof t.destroy && (this._destroy = t.destroy), "function" == typeof t.final && (this._final = t.final)), a.call(this);\n          }\n\n          function T(e, t, r, n, i, o, s) {\n            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new m("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;\n          }\n\n          function x(e, t, r, n) {\n            r || function (e, t) {\n              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));\n            }(e, t), t.pendingcb--, n(), O(e, t);\n          }\n\n          function A(e, t) {\n            t.bufferProcessing = !0;\n            var r = t.bufferedRequest;\n\n            if (e._writev && r && r.next) {\n              var n = t.bufferedRequestCount,\n                  o = new Array(n),\n                  s = t.corkedRequestsFree;\n              s.entry = r;\n\n              for (var a = 0, l = !0; r;) o[a] = r, r.isBuf || (l = !1), r = r.next, a += 1;\n\n              o.allBuffers = l, T(e, t, !0, t.length, o, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, s.next = null) : t.corkedRequestsFree = new i(t), t.bufferedRequestCount = 0;\n            } else {\n              for (; r;) {\n                var u = r.chunk,\n                    c = r.encoding,\n                    h = r.callback;\n                if (T(e, t, !1, t.objectMode ? 1 : u.length, u, c, h), r = r.next, t.bufferedRequestCount--, t.writing) break;\n              }\n\n              null === r && (t.lastBufferedRequest = null);\n            }\n\n            t.bufferedRequest = r, t.bufferProcessing = !1;\n          }\n\n          function I(e) {\n            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;\n          }\n\n          function P(e, t) {\n            e._final(function (r) {\n              t.pendingcb--, r && k(e, r), t.prefinished = !0, e.emit("prefinish"), O(e, t);\n            });\n          }\n\n          function O(e, t) {\n            var n = I(t);\n\n            if (n && (function (e, t) {\n              t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit("prefinish")) : (t.pendingcb++, t.finalCalled = !0, r.nextTick(P, e, t)));\n            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"), t.autoDestroy))) {\n              var i = e._readableState;\n              (!i || i.autoDestroy && i.endEmitted) && e.destroy();\n            }\n\n            return n;\n          }\n\n          e("inherits")(C, a), E.prototype.getBuffer = function () {\n            for (var e = this.bufferedRequest, t = []; e;) t.push(e), e = e.next;\n\n            return t;\n          }, function () {\n            try {\n              Object.defineProperty(E.prototype, "buffer", {\n                get: s.deprecate(function () {\n                  return this.getBuffer();\n                }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")\n              });\n            } catch (e) {}\n          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c = Function.prototype[Symbol.hasInstance], Object.defineProperty(C, Symbol.hasInstance, {\n            value: function (e) {\n              return !!c.call(this, e) || this === C && e && e._writableState instanceof E;\n            }\n          })) : c = function (e) {\n            return e instanceof this;\n          }, C.prototype.pipe = function () {\n            k(this, new b());\n          }, C.prototype.write = function (e, t, n) {\n            var i,\n                o = this._writableState,\n                s = !1,\n                a = !o.objectMode && (i = e, l.isBuffer(i) || i instanceof u);\n            return a && !l.isBuffer(e) && (e = function (e) {\n              return l.from(e);\n            }(e)), "function" == typeof t && (n = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof n && (n = S), o.ending ? function (e, t) {\n              var n = new w();\n              k(e, n), r.nextTick(t, n);\n            }(this, n) : (a || function (e, t, n, i) {\n              var o;\n              return null === n ? o = new v() : "string" == typeof n || t.objectMode || (o = new d("chunk", ["string", "Buffer"], n)), !o || (k(e, o), r.nextTick(i, o), !1);\n            }(this, o, e, n)) && (o.pendingcb++, s = function (e, t, r, n, i, o) {\n              if (!r) {\n                var s = function (e, t, r) {\n                  e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = l.from(t, r));\n                  return t;\n                }(t, n, i);\n\n                n !== s && (r = !0, i = "buffer", n = s);\n              }\n\n              var a = t.objectMode ? 1 : n.length;\n              t.length += a;\n              var u = t.length < t.highWaterMark;\n              u || (t.needDrain = !0);\n\n              if (t.writing || t.corked) {\n                var c = t.lastBufferedRequest;\n                t.lastBufferedRequest = {\n                  chunk: n,\n                  encoding: i,\n                  isBuf: r,\n                  callback: o,\n                  next: null\n                }, c ? c.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;\n              } else T(e, t, !1, a, n, i, o);\n\n              return u;\n            }(this, o, a, e, t, n)), s;\n          }, C.prototype.cork = function () {\n            this._writableState.corked++;\n          }, C.prototype.uncork = function () {\n            var e = this._writableState;\n            e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || A(this, e));\n          }, C.prototype.setDefaultEncoding = function (e) {\n            if ("string" == typeof e && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new _(e);\n            return this._writableState.defaultEncoding = e, this;\n          }, Object.defineProperty(C.prototype, "writableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState && this._writableState.getBuffer();\n            }\n          }), Object.defineProperty(C.prototype, "writableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.highWaterMark;\n            }\n          }), C.prototype._write = function (e, t, r) {\n            r(new g("_write()"));\n          }, C.prototype._writev = null, C.prototype.end = function (e, t, n) {\n            var i = this._writableState;\n            return "function" == typeof e ? (n = e, e = null, t = null) : "function" == typeof t && (n = t, t = null), null !== e && void 0 !== e && this.write(e, t), i.corked && (i.corked = 1, this.uncork()), i.ending || function (e, t, n) {\n              t.ending = !0, O(e, t), n && (t.finished ? r.nextTick(n) : e.once("finish", n));\n              t.ended = !0, e.writable = !1;\n            }(this, i, n), this;\n          }, Object.defineProperty(C.prototype, "writableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.length;\n            }\n          }), Object.defineProperty(C.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._writableState && this._writableState.destroyed;\n            },\n            set: function (e) {\n              this._writableState && (this._writableState.destroyed = e);\n            }\n          }), C.prototype.destroy = h.destroy, C.prototype._undestroy = h.undestroy, C.prototype._destroy = function (e, t) {\n            t(e);\n          };\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      "./internal/streams/destroy": 63,\n      "./internal/streams/state": 67,\n      "./internal/streams/stream": 68,\n      _process: 50,\n      buffer: 17,\n      inherits: 24,\n      "util-deprecate": 78\n    }],\n    61: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          var n;\n\n          function i(e, t, r) {\n            return t in e ? Object.defineProperty(e, t, {\n              value: r,\n              enumerable: !0,\n              configurable: !0,\n              writable: !0\n            }) : e[t] = r, e;\n          }\n\n          var o = e("./end-of-stream"),\n              s = Symbol("lastResolve"),\n              a = Symbol("lastReject"),\n              l = Symbol("error"),\n              u = Symbol("ended"),\n              c = Symbol("lastPromise"),\n              h = Symbol("handlePromise"),\n              f = Symbol("stream");\n\n          function p(e, t) {\n            return {\n              value: e,\n              done: t\n            };\n          }\n\n          function d(e) {\n            var t = e[s];\n\n            if (null !== t) {\n              var r = e[f].read();\n              null !== r && (e[c] = null, e[s] = null, e[a] = null, t(p(r, !1)));\n            }\n          }\n\n          var g = Object.getPrototypeOf(function () {}),\n              y = Object.setPrototypeOf((i(n = {\n            get stream() {\n              return this[f];\n            },\n\n            next: function () {\n              var e = this,\n                  t = this[l];\n              if (null !== t) return Promise.reject(t);\n              if (this[u]) return Promise.resolve(p(void 0, !0));\n              if (this[f].destroyed) return new Promise(function (t, n) {\n                r.nextTick(function () {\n                  e[l] ? n(e[l]) : t(p(void 0, !0));\n                });\n              });\n              var n,\n                  i = this[c];\n              if (i) n = new Promise(function (e, t) {\n                return function (r, n) {\n                  e.then(function () {\n                    t[u] ? r(p(void 0, !0)) : t[h](r, n);\n                  }, n);\n                };\n              }(i, this));else {\n                var o = this[f].read();\n                if (null !== o) return Promise.resolve(p(o, !1));\n                n = new Promise(this[h]);\n              }\n              return this[c] = n, n;\n            }\n          }, Symbol.asyncIterator, function () {\n            return this;\n          }), i(n, "return", function () {\n            var e = this;\n            return new Promise(function (t, r) {\n              e[f].destroy(null, function (e) {\n                e ? r(e) : t(p(void 0, !0));\n              });\n            });\n          }), n), g);\n\n          t.exports = function (e) {\n            var t,\n                n = Object.create(y, (i(t = {}, f, {\n              value: e,\n              writable: !0\n            }), i(t, s, {\n              value: null,\n              writable: !0\n            }), i(t, a, {\n              value: null,\n              writable: !0\n            }), i(t, l, {\n              value: null,\n              writable: !0\n            }), i(t, u, {\n              value: e._readableState.endEmitted,\n              writable: !0\n            }), i(t, h, {\n              value: function (e, t) {\n                var r = n[f].read();\n                r ? (n[c] = null, n[s] = null, n[a] = null, e(p(r, !1))) : (n[s] = e, n[a] = t);\n              },\n              writable: !0\n            }), t));\n            return n[c] = null, o(e, function (e) {\n              if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {\n                var t = n[a];\n                return null !== t && (n[c] = null, n[s] = null, n[a] = null, t(e)), void (n[l] = e);\n              }\n\n              var r = n[s];\n              null !== r && (n[c] = null, n[s] = null, n[a] = null, r(p(void 0, !0))), n[u] = !0;\n            }), e.on("readable", function (e) {\n              r.nextTick(d, e);\n            }.bind(null, n)), n;\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./end-of-stream": 64,\n      _process: 50\n    }],\n    62: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        var r = Object.keys(e);\n\n        if (Object.getOwnPropertySymbols) {\n          var n = Object.getOwnPropertySymbols(e);\n          t && (n = n.filter(function (t) {\n            return Object.getOwnPropertyDescriptor(e, t).enumerable;\n          })), r.push.apply(r, n);\n        }\n\n        return r;\n      }\n\n      function i(e, t, r) {\n        return t in e ? Object.defineProperty(e, t, {\n          value: r,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[t] = r, e;\n      }\n\n      function o(e, t) {\n        for (var r = 0; r < t.length; r++) {\n          var n = t[r];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }\n\n      var s = e("buffer").Buffer,\n          a = e("util").inspect,\n          l = a && a.custom || "inspect";\n\n      t.exports = function () {\n        function e() {\n          !function (e, t) {\n            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");\n          }(this, e), this.head = null, this.tail = null, this.length = 0;\n        }\n\n        var t, r, u;\n        return t = e, (r = [{\n          key: "push",\n          value: function (e) {\n            var t = {\n              data: e,\n              next: null\n            };\n            this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;\n          }\n        }, {\n          key: "unshift",\n          value: function (e) {\n            var t = {\n              data: e,\n              next: this.head\n            };\n            0 === this.length && (this.tail = t), this.head = t, ++this.length;\n          }\n        }, {\n          key: "shift",\n          value: function () {\n            if (0 !== this.length) {\n              var e = this.head.data;\n              return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;\n            }\n          }\n        }, {\n          key: "clear",\n          value: function () {\n            this.head = this.tail = null, this.length = 0;\n          }\n        }, {\n          key: "join",\n          value: function (e) {\n            if (0 === this.length) return "";\n\n            for (var t = this.head, r = "" + t.data; t = t.next;) r += e + t.data;\n\n            return r;\n          }\n        }, {\n          key: "concat",\n          value: function (e) {\n            if (0 === this.length) return s.alloc(0);\n\n            for (var t, r, n, i = s.allocUnsafe(e >>> 0), o = this.head, a = 0; o;) t = o.data, r = i, n = a, s.prototype.copy.call(t, r, n), a += o.data.length, o = o.next;\n\n            return i;\n          }\n        }, {\n          key: "consume",\n          value: function (e, t) {\n            var r;\n            return e < this.head.data.length ? (r = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), r;\n          }\n        }, {\n          key: "first",\n          value: function () {\n            return this.head.data;\n          }\n        }, {\n          key: "_getString",\n          value: function (e) {\n            var t = this.head,\n                r = 1,\n                n = t.data;\n\n            for (e -= n.length; t = t.next;) {\n              var i = t.data,\n                  o = e > i.length ? i.length : e;\n\n              if (o === i.length ? n += i : n += i.slice(0, e), 0 === (e -= o)) {\n                o === i.length ? (++r, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));\n                break;\n              }\n\n              ++r;\n            }\n\n            return this.length -= r, n;\n          }\n        }, {\n          key: "_getBuffer",\n          value: function (e) {\n            var t = s.allocUnsafe(e),\n                r = this.head,\n                n = 1;\n\n            for (r.data.copy(t), e -= r.data.length; r = r.next;) {\n              var i = r.data,\n                  o = e > i.length ? i.length : e;\n\n              if (i.copy(t, t.length - e, 0, o), 0 === (e -= o)) {\n                o === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(o));\n                break;\n              }\n\n              ++n;\n            }\n\n            return this.length -= n, t;\n          }\n        }, {\n          key: l,\n          value: function (e, t) {\n            return a(this, function (e) {\n              for (var t = 1; t < arguments.length; t++) {\n                var r = null != arguments[t] ? arguments[t] : {};\n                t % 2 ? n(Object(r), !0).forEach(function (t) {\n                  i(e, t, r[t]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function (t) {\n                  Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));\n                });\n              }\n\n              return e;\n            }({}, t, {\n              depth: 0,\n              customInspect: !1\n            }));\n          }\n        }]) && o(t.prototype, r), u && o(t, u), e;\n      }();\n    }, {\n      buffer: 17,\n      util: 16\n    }],\n    63: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          function r(e, t) {\n            i(e, t), n(e);\n          }\n\n          function n(e) {\n            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");\n          }\n\n          function i(e, t) {\n            e.emit("error", t);\n          }\n\n          t.exports = {\n            destroy: function (t, o) {\n              var s = this,\n                  a = this._readableState && this._readableState.destroyed,\n                  l = this._writableState && this._writableState.destroyed;\n              return a || l ? (o ? o(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, e.nextTick(i, this, t)) : e.nextTick(i, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function (t) {\n                !o && t ? s._writableState ? s._writableState.errorEmitted ? e.nextTick(n, s) : (s._writableState.errorEmitted = !0, e.nextTick(r, s, t)) : e.nextTick(r, s, t) : o ? (e.nextTick(n, s), o(t)) : e.nextTick(n, s);\n              }), this);\n            },\n            undestroy: function () {\n              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);\n            },\n            errorOrDestroy: function (e, t) {\n              var r = e._readableState,\n                  n = e._writableState;\n              r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);\n            }\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50\n    }],\n    64: [function (e, t, r) {\n      "use strict";\n\n      var n = e("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;\n\n      function i() {}\n\n      t.exports = function e(t, r, o) {\n        if ("function" == typeof r) return e(t, null, r);\n        r || (r = {}), o = function (e) {\n          var t = !1;\n          return function () {\n            if (!t) {\n              t = !0;\n\n              for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];\n\n              e.apply(this, n);\n            }\n          };\n        }(o || i);\n\n        var s = r.readable || !1 !== r.readable && t.readable,\n            a = r.writable || !1 !== r.writable && t.writable,\n            l = function () {\n          t.writable || c();\n        },\n            u = t._writableState && t._writableState.finished,\n            c = function () {\n          a = !1, u = !0, s || o.call(t);\n        },\n            h = t._readableState && t._readableState.endEmitted,\n            f = function () {\n          s = !1, h = !0, a || o.call(t);\n        },\n            p = function (e) {\n          o.call(t, e);\n        },\n            d = function () {\n          var e;\n          return s && !h ? (t._readableState && t._readableState.ended || (e = new n()), o.call(t, e)) : a && !u ? (t._writableState && t._writableState.ended || (e = new n()), o.call(t, e)) : void 0;\n        },\n            g = function () {\n          t.req.on("finish", c);\n        };\n\n        return function (e) {\n          return e.setHeader && "function" == typeof e.abort;\n        }(t) ? (t.on("complete", c), t.on("abort", d), t.req ? g() : t.on("request", g)) : a && !t._writableState && (t.on("end", l), t.on("close", l)), t.on("end", f), t.on("finish", c), !1 !== r.error && t.on("error", p), t.on("close", d), function () {\n          t.removeListener("complete", c), t.removeListener("abort", d), t.removeListener("request", g), t.req && t.req.removeListener("finish", c), t.removeListener("end", l), t.removeListener("close", l), t.removeListener("finish", c), t.removeListener("end", f), t.removeListener("error", p), t.removeListener("close", d);\n        };\n      };\n    }, {\n      "../../../errors": 55\n    }],\n    65: [function (e, t, r) {\n      t.exports = function () {\n        throw new Error("Readable.from is not available in the browser");\n      };\n    }, {}],\n    66: [function (e, t, r) {\n      "use strict";\n\n      var n;\n      var i = e("../../../errors").codes,\n          o = i.ERR_MISSING_ARGS,\n          s = i.ERR_STREAM_DESTROYED;\n\n      function a(e) {\n        if (e) throw e;\n      }\n\n      function l(e) {\n        e();\n      }\n\n      function u(e, t) {\n        return e.pipe(t);\n      }\n\n      t.exports = function () {\n        for (var t = arguments.length, r = new Array(t), i = 0; i < t; i++) r[i] = arguments[i];\n\n        var c,\n            h = function (e) {\n          return e.length ? "function" != typeof e[e.length - 1] ? a : e.pop() : a;\n        }(r);\n\n        if (Array.isArray(r[0]) && (r = r[0]), r.length < 2) throw new o("streams");\n        var f = r.map(function (t, i) {\n          var o = i < r.length - 1;\n          return function (t, r, i, o) {\n            o = function (e) {\n              var t = !1;\n              return function () {\n                t || (t = !0, e.apply(void 0, arguments));\n              };\n            }(o);\n\n            var a = !1;\n            t.on("close", function () {\n              a = !0;\n            }), void 0 === n && (n = e("./end-of-stream")), n(t, {\n              readable: r,\n              writable: i\n            }, function (e) {\n              if (e) return o(e);\n              a = !0, o();\n            });\n            var l = !1;\n            return function (e) {\n              if (!a && !l) return l = !0, function (e) {\n                return e.setHeader && "function" == typeof e.abort;\n              }(t) ? t.abort() : "function" == typeof t.destroy ? t.destroy() : void o(e || new s("pipe"));\n            };\n          }(t, o, i > 0, function (e) {\n            c || (c = e), e && f.forEach(l), o || (f.forEach(l), h(c));\n          });\n        });\n        return r.reduce(u);\n      };\n    }, {\n      "../../../errors": 55,\n      "./end-of-stream": 64\n    }],\n    67: [function (e, t, r) {\n      "use strict";\n\n      var n = e("../../../errors").codes.ERR_INVALID_OPT_VALUE;\n      t.exports = {\n        getHighWaterMark: function (e, t, r, i) {\n          var o = function (e, t, r) {\n            return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null;\n          }(t, i, r);\n\n          if (null != o) {\n            if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);\n            return Math.floor(o);\n          }\n\n          return e.objectMode ? 16 : 16384;\n        }\n      };\n    }, {\n      "../../../errors": 55\n    }],\n    68: [function (e, t, r) {\n      t.exports = e("events").EventEmitter;\n    }, {\n      events: 22\n    }],\n    69: [function (e, t, r) {\n      (r = t.exports = e("./lib/_stream_readable.js")).Stream = r, r.Readable = r, r.Writable = e("./lib/_stream_writable.js"), r.Duplex = e("./lib/_stream_duplex.js"), r.Transform = e("./lib/_stream_transform.js"), r.PassThrough = e("./lib/_stream_passthrough.js"), r.finished = e("./lib/internal/streams/end-of-stream.js"), r.pipeline = e("./lib/internal/streams/pipeline.js");\n    }, {\n      "./lib/_stream_duplex.js": 56,\n      "./lib/_stream_passthrough.js": 57,\n      "./lib/_stream_readable.js": 58,\n      "./lib/_stream_transform.js": 59,\n      "./lib/_stream_writable.js": 60,\n      "./lib/internal/streams/end-of-stream.js": 64,\n      "./lib/internal/streams/pipeline.js": 66\n    }],\n    70: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function () {\n        if ("function" != typeof arguments[0]) throw new Error("callback needed");\n        if ("number" != typeof arguments[1]) throw new Error("interval needed");\n        var e;\n\n        if (arguments.length > 0) {\n          e = new Array(arguments.length - 2);\n\n          for (var t = 0; t < e.length; t++) e[t] = arguments[t + 2];\n        }\n\n        return new function (e, t, r) {\n          var n = this;\n          this._callback = e, this._args = r, this._interval = setInterval(e, t, this._args), this.reschedule = function (e) {\n            e || (e = n._interval), n._interval && clearInterval(n._interval), n._interval = setInterval(n._callback, e, n._args);\n          }, this.clear = function () {\n            n._interval && (clearInterval(n._interval), n._interval = void 0);\n          }, this.destroy = function () {\n            n._interval && clearInterval(n._interval), n._callback = void 0, n._interval = void 0, n._args = void 0;\n          };\n        }(arguments[0], arguments[1], e);\n      };\n    }, {}],\n    71: [function (e, t, r) {\n      "use strict";\n\n      t.exports = e("./index.js")();\n    }, {\n      "./index.js": 72\n    }],\n    72: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          function r(t) {\n            return t instanceof e ? e.from(t) : new t.constructor(t.buffer.slice(), t.byteOffset, t.length);\n          }\n\n          t.exports = function (e) {\n            return (e = e || {}).circles ? function (e) {\n              var t = [],\n                  n = [];\n              return e.proto ? function e(o) {\n                if ("object" != typeof o || null === o) return o;\n                if (o instanceof Date) return new Date(o);\n                if (Array.isArray(o)) return i(o, e);\n                if (o instanceof Map) return new Map(i(Array.from(o), e));\n                if (o instanceof Set) return new Set(i(Array.from(o), e));\n                var s = {};\n\n                for (var a in t.push(o), n.push(s), o) {\n                  var l = o[a];\n                  if ("object" != typeof l || null === l) s[a] = l;else if (l instanceof Date) s[a] = new Date(l);else if (l instanceof Map) s[a] = new Map(i(Array.from(l), e));else if (l instanceof Set) s[a] = new Set(i(Array.from(l), e));else if (ArrayBuffer.isView(l)) s[a] = r(l);else {\n                    var u = t.indexOf(l);\n                    s[a] = -1 !== u ? n[u] : e(l);\n                  }\n                }\n\n                return t.pop(), n.pop(), s;\n              } : function e(o) {\n                if ("object" != typeof o || null === o) return o;\n                if (o instanceof Date) return new Date(o);\n                if (Array.isArray(o)) return i(o, e);\n                if (o instanceof Map) return new Map(i(Array.from(o), e));\n                if (o instanceof Set) return new Set(i(Array.from(o), e));\n                var s = {};\n\n                for (var a in t.push(o), n.push(s), o) if (!1 !== Object.hasOwnProperty.call(o, a)) {\n                  var l = o[a];\n                  if ("object" != typeof l || null === l) s[a] = l;else if (l instanceof Date) s[a] = new Date(l);else if (l instanceof Map) s[a] = new Map(i(Array.from(l), e));else if (l instanceof Set) s[a] = new Set(i(Array.from(l), e));else if (ArrayBuffer.isView(l)) s[a] = r(l);else {\n                    var u = t.indexOf(l);\n                    s[a] = -1 !== u ? n[u] : e(l);\n                  }\n                }\n\n                return t.pop(), n.pop(), s;\n              };\n\n              function i(e, i) {\n                for (var o = Object.keys(e), s = new Array(o.length), a = 0; a < o.length; a++) {\n                  var l = o[a],\n                      u = e[l];\n                  if ("object" != typeof u || null === u) s[l] = u;else if (u instanceof Date) s[l] = new Date(u);else if (ArrayBuffer.isView(u)) s[l] = r(u);else {\n                    var c = t.indexOf(u);\n                    s[l] = -1 !== c ? n[c] : i(u);\n                  }\n                }\n\n                return s;\n              }\n            }(e) : e.proto ? function e(n) {\n              if ("object" != typeof n || null === n) return n;\n              if (n instanceof Date) return new Date(n);\n              if (Array.isArray(n)) return t(n, e);\n              if (n instanceof Map) return new Map(t(Array.from(n), e));\n              if (n instanceof Set) return new Set(t(Array.from(n), e));\n              var i = {};\n\n              for (var o in n) {\n                var s = n[o];\n                "object" != typeof s || null === s ? i[o] = s : s instanceof Date ? i[o] = new Date(s) : s instanceof Map ? i[o] = new Map(t(Array.from(s), e)) : s instanceof Set ? i[o] = new Set(t(Array.from(s), e)) : ArrayBuffer.isView(s) ? i[o] = r(s) : i[o] = e(s);\n              }\n\n              return i;\n            } : function e(n) {\n              if ("object" != typeof n || null === n) return n;\n              if (n instanceof Date) return new Date(n);\n              if (Array.isArray(n)) return t(n, e);\n              if (n instanceof Map) return new Map(t(Array.from(n), e));\n              if (n instanceof Set) return new Set(t(Array.from(n), e));\n              var i = {};\n\n              for (var o in n) if (!1 !== Object.hasOwnProperty.call(n, o)) {\n                var s = n[o];\n                "object" != typeof s || null === s ? i[o] = s : s instanceof Date ? i[o] = new Date(s) : s instanceof Map ? i[o] = new Map(t(Array.from(s), e)) : s instanceof Set ? i[o] = new Set(t(Array.from(s), e)) : ArrayBuffer.isView(s) ? i[o] = r(s) : i[o] = e(s);\n              }\n\n              return i;\n            };\n\n            function t(e, t) {\n              for (var n = Object.keys(e), i = new Array(n.length), o = 0; o < n.length; o++) {\n                var s = n[o],\n                    a = e[s];\n                "object" != typeof a || null === a ? i[s] = a : a instanceof Date ? i[s] = new Date(a) : ArrayBuffer.isView(a) ? i[s] = r(a) : i[s] = t(a);\n              }\n\n              return i;\n            }\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    73: [function (e, t, r) {\n      var n = e("buffer"),\n          i = n.Buffer;\n\n      function o(e, t) {\n        for (var r in e) t[r] = e[r];\n      }\n\n      function s(e, t, r) {\n        return i(e, t, r);\n      }\n\n      i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, r), r.Buffer = s), s.prototype = Object.create(i.prototype), o(i, s), s.from = function (e, t, r) {\n        if ("number" == typeof e) throw new TypeError("Argument must not be a number");\n        return i(e, t, r);\n      }, s.alloc = function (e, t, r) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        var n = i(e);\n        return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;\n      }, s.allocUnsafe = function (e) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        return i(e);\n      }, s.allocUnsafeSlow = function (e) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        return n.SlowBuffer(e);\n      };\n    }, {\n      buffer: 17\n    }],\n    74: [function (e, t, r) {\n      t.exports = function (e) {\n        var t = e._readableState;\n        return t ? t.objectMode || "number" == typeof e._duplexState ? e.read() : e.read((r = t, r.buffer.length ? r.buffer.head ? r.buffer.head.data.length : r.buffer[0].length : r.length)) : null;\n        var r;\n      };\n    }, {}],\n    75: [function (e, t, r) {\n      "use strict";\n\n      var n = e("safe-buffer").Buffer,\n          i = n.isEncoding || function (e) {\n        switch ((e = "" + e) && e.toLowerCase()) {\n          case "hex":\n          case "utf8":\n          case "utf-8":\n          case "ascii":\n          case "binary":\n          case "base64":\n          case "ucs2":\n          case "ucs-2":\n          case "utf16le":\n          case "utf-16le":\n          case "raw":\n            return !0;\n\n          default:\n            return !1;\n        }\n      };\n\n      function o(e) {\n        var t;\n\n        switch (this.encoding = function (e) {\n          var t = function (e) {\n            if (!e) return "utf8";\n\n            for (var t;;) switch (e) {\n              case "utf8":\n              case "utf-8":\n                return "utf8";\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return "utf16le";\n\n              case "latin1":\n              case "binary":\n                return "latin1";\n\n              case "base64":\n              case "ascii":\n              case "hex":\n                return e;\n\n              default:\n                if (t) return;\n                e = ("" + e).toLowerCase(), t = !0;\n            }\n          }(e);\n\n          if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);\n          return t || e;\n        }(e), this.encoding) {\n          case "utf16le":\n            this.text = l, this.end = u, t = 4;\n            break;\n\n          case "utf8":\n            this.fillLast = a, t = 4;\n            break;\n\n          case "base64":\n            this.text = c, this.end = h, t = 3;\n            break;\n\n          default:\n            return this.write = f, void (this.end = p);\n        }\n\n        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);\n      }\n\n      function s(e) {\n        return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;\n      }\n\n      function a(e) {\n        var t = this.lastTotal - this.lastNeed,\n            r = function (e, t, r) {\n          if (128 != (192 & t[0])) return e.lastNeed = 0, "�";\n\n          if (e.lastNeed > 1 && t.length > 1) {\n            if (128 != (192 & t[1])) return e.lastNeed = 1, "�";\n            if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";\n          }\n        }(this, e);\n\n        return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));\n      }\n\n      function l(e, t) {\n        if ((e.length - t) % 2 == 0) {\n          var r = e.toString("utf16le", t);\n\n          if (r) {\n            var n = r.charCodeAt(r.length - 1);\n            if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);\n          }\n\n          return r;\n        }\n\n        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);\n      }\n\n      function u(e) {\n        var t = e && e.length ? this.write(e) : "";\n\n        if (this.lastNeed) {\n          var r = this.lastTotal - this.lastNeed;\n          return t + this.lastChar.toString("utf16le", 0, r);\n        }\n\n        return t;\n      }\n\n      function c(e, t) {\n        var r = (e.length - t) % 3;\n        return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));\n      }\n\n      function h(e) {\n        var t = e && e.length ? this.write(e) : "";\n        return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;\n      }\n\n      function f(e) {\n        return e.toString(this.encoding);\n      }\n\n      function p(e) {\n        return e && e.length ? this.write(e) : "";\n      }\n\n      r.StringDecoder = o, o.prototype.write = function (e) {\n        if (0 === e.length) return "";\n        var t, r;\n\n        if (this.lastNeed) {\n          if (void 0 === (t = this.fillLast(e))) return "";\n          r = this.lastNeed, this.lastNeed = 0;\n        } else r = 0;\n\n        return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";\n      }, o.prototype.end = function (e) {\n        var t = e && e.length ? this.write(e) : "";\n        return this.lastNeed ? t + "�" : t;\n      }, o.prototype.text = function (e, t) {\n        var r = function (e, t, r) {\n          var n = t.length - 1;\n          if (n < r) return 0;\n          var i = s(t[n]);\n          if (i >= 0) return i > 0 && (e.lastNeed = i - 1), i;\n          if (--n < r || -2 === i) return 0;\n          if ((i = s(t[n])) >= 0) return i > 0 && (e.lastNeed = i - 2), i;\n          if (--n < r || -2 === i) return 0;\n          if ((i = s(t[n])) >= 0) return i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i;\n          return 0;\n        }(this, e, t);\n\n        if (!this.lastNeed) return e.toString("utf8", t);\n        this.lastTotal = r;\n        var n = e.length - (r - this.lastNeed);\n        return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);\n      }, o.prototype.fillLast = function (e) {\n        if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;\n      };\n    }, {\n      "safe-buffer": 73\n    }],\n    76: [function (e, t, r) {\n      "use strict";\n\n      var n = e("punycode"),\n          i = e("./util");\n\n      function o() {\n        this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;\n      }\n\n      r.parse = v, r.resolve = function (e, t) {\n        return v(e, !1, !0).resolve(t);\n      }, r.resolveObject = function (e, t) {\n        return e ? v(e, !1, !0).resolveObject(t) : t;\n      }, r.format = function (e) {\n        i.isString(e) && (e = v(e));\n        return e instanceof o ? e.format() : o.prototype.format.call(e);\n      }, r.Url = o;\n      var s = /^([a-z0-9.+-]+:)/i,\n          a = /:[0-9]*$/,\n          l = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n          u = ["{", "}", "|", "\\\\", "^", "`"].concat(["<", ">", \'"\', "`", " ", "\\r", "\\n", "\\t"]),\n          c = ["\'"].concat(u),\n          h = ["%", "/", "?", ";", "#"].concat(c),\n          f = ["/", "?", "#"],\n          p = /^[+a-z0-9A-Z_-]{0,63}$/,\n          d = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n          g = {\n        javascript: !0,\n        "javascript:": !0\n      },\n          y = {\n        javascript: !0,\n        "javascript:": !0\n      },\n          b = {\n        http: !0,\n        https: !0,\n        ftp: !0,\n        gopher: !0,\n        file: !0,\n        "http:": !0,\n        "https:": !0,\n        "ftp:": !0,\n        "gopher:": !0,\n        "file:": !0\n      },\n          m = e("querystring");\n\n      function v(e, t, r) {\n        if (e && i.isObject(e) && e instanceof o) return e;\n        var n = new o();\n        return n.parse(e, t, r), n;\n      }\n\n      o.prototype.parse = function (e, t, r) {\n        if (!i.isString(e)) throw new TypeError("Parameter \'url\' must be a string, not " + typeof e);\n        var o = e.indexOf("?"),\n            a = -1 !== o && o < e.indexOf("#") ? "?" : "#",\n            u = e.split(a);\n        u[0] = u[0].replace(/\\\\/g, "/");\n        var v = e = u.join(a);\n\n        if (v = v.trim(), !r && 1 === e.split("#").length) {\n          var w = l.exec(v);\n          if (w) return this.path = v, this.href = v, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? m.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;\n        }\n\n        var _ = s.exec(v);\n\n        if (_) {\n          var k = (_ = _[0]).toLowerCase();\n\n          this.protocol = k, v = v.substr(_.length);\n        }\n\n        if (r || _ || v.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n          var S = "//" === v.substr(0, 2);\n          !S || _ && y[_] || (v = v.substr(2), this.slashes = !0);\n        }\n\n        if (!y[_] && (S || _ && !b[_])) {\n          for (var E, C, T = -1, x = 0; x < f.length; x++) {\n            -1 !== (A = v.indexOf(f[x])) && (-1 === T || A < T) && (T = A);\n          }\n\n          -1 !== (C = -1 === T ? v.lastIndexOf("@") : v.lastIndexOf("@", T)) && (E = v.slice(0, C), v = v.slice(C + 1), this.auth = decodeURIComponent(E)), T = -1;\n\n          for (x = 0; x < h.length; x++) {\n            var A;\n            -1 !== (A = v.indexOf(h[x])) && (-1 === T || A < T) && (T = A);\n          }\n\n          -1 === T && (T = v.length), this.host = v.slice(0, T), v = v.slice(T), this.parseHost(), this.hostname = this.hostname || "";\n          var I = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];\n          if (!I) for (var P = this.hostname.split(/\\./), O = (x = 0, P.length); x < O; x++) {\n            var B = P[x];\n\n            if (B && !B.match(p)) {\n              for (var R = "", M = 0, N = B.length; M < N; M++) B.charCodeAt(M) > 127 ? R += "x" : R += B[M];\n\n              if (!R.match(p)) {\n                var L = P.slice(0, x),\n                    j = P.slice(x + 1),\n                    U = B.match(d);\n                U && (L.push(U[1]), j.unshift(U[2])), j.length && (v = "/" + j.join(".") + v), this.hostname = L.join(".");\n                break;\n              }\n            }\n          }\n          this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), I || (this.hostname = n.toASCII(this.hostname));\n          var q = this.port ? ":" + this.port : "",\n              D = this.hostname || "";\n          this.host = D + q, this.href += this.host, I && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== v[0] && (v = "/" + v));\n        }\n\n        if (!g[k]) for (x = 0, O = c.length; x < O; x++) {\n          var z = c[x];\n\n          if (-1 !== v.indexOf(z)) {\n            var F = encodeURIComponent(z);\n            F === z && (F = escape(z)), v = v.split(z).join(F);\n          }\n        }\n        var V = v.indexOf("#");\n        -1 !== V && (this.hash = v.substr(V), v = v.slice(0, V));\n        var H = v.indexOf("?");\n\n        if (-1 !== H ? (this.search = v.substr(H), this.query = v.substr(H + 1), t && (this.query = m.parse(this.query)), v = v.slice(0, H)) : t && (this.search = "", this.query = {}), v && (this.pathname = v), b[k] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {\n          q = this.pathname || "";\n          var W = this.search || "";\n          this.path = q + W;\n        }\n\n        return this.href = this.format(), this;\n      }, o.prototype.format = function () {\n        var e = this.auth || "";\n        e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");\n        var t = this.protocol || "",\n            r = this.pathname || "",\n            n = this.hash || "",\n            o = !1,\n            s = "";\n        this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = m.stringify(this.query));\n        var a = this.search || s && "?" + s || "";\n        return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || b[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, function (e) {\n          return encodeURIComponent(e);\n        })) + (a = a.replace("#", "%23")) + n;\n      }, o.prototype.resolve = function (e) {\n        return this.resolveObject(v(e, !1, !0)).format();\n      }, o.prototype.resolveObject = function (e) {\n        if (i.isString(e)) {\n          var t = new o();\n          t.parse(e, !1, !0), e = t;\n        }\n\n        for (var r = new o(), n = Object.keys(this), s = 0; s < n.length; s++) {\n          var a = n[s];\n          r[a] = this[a];\n        }\n\n        if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;\n\n        if (e.slashes && !e.protocol) {\n          for (var l = Object.keys(e), u = 0; u < l.length; u++) {\n            var c = l[u];\n            "protocol" !== c && (r[c] = e[c]);\n          }\n\n          return b[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;\n        }\n\n        if (e.protocol && e.protocol !== r.protocol) {\n          if (!b[e.protocol]) {\n            for (var h = Object.keys(e), f = 0; f < h.length; f++) {\n              var p = h[f];\n              r[p] = e[p];\n            }\n\n            return r.href = r.format(), r;\n          }\n\n          if (r.protocol = e.protocol, e.host || y[e.protocol]) r.pathname = e.pathname;else {\n            for (var d = (e.pathname || "").split("/"); d.length && !(e.host = d.shift()););\n\n            e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== d[0] && d.unshift(""), d.length < 2 && d.unshift(""), r.pathname = d.join("/");\n          }\n\n          if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {\n            var g = r.pathname || "",\n                m = r.search || "";\n            r.path = g + m;\n          }\n\n          return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;\n        }\n\n        var v = r.pathname && "/" === r.pathname.charAt(0),\n            w = e.host || e.pathname && "/" === e.pathname.charAt(0),\n            _ = w || v || r.host && e.pathname,\n            k = _,\n            S = r.pathname && r.pathname.split("/") || [],\n            E = (d = e.pathname && e.pathname.split("/") || [], r.protocol && !b[r.protocol]);\n\n        if (E && (r.hostname = "", r.port = null, r.host && ("" === S[0] ? S[0] = r.host : S.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === d[0] ? d[0] = e.host : d.unshift(e.host)), e.host = null), _ = _ && ("" === d[0] || "" === S[0])), w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, S = d;else if (d.length) S || (S = []), S.pop(), S = S.concat(d), r.search = e.search, r.query = e.query;else if (!i.isNullOrUndefined(e.search)) {\n          if (E) r.hostname = r.host = S.shift(), (I = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = I.shift(), r.host = r.hostname = I.shift());\n          return r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;\n        }\n        if (!S.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;\n\n        for (var C = S.slice(-1)[0], T = (r.host || e.host || S.length > 1) && ("." === C || ".." === C) || "" === C, x = 0, A = S.length; A >= 0; A--) "." === (C = S[A]) ? S.splice(A, 1) : ".." === C ? (S.splice(A, 1), x++) : x && (S.splice(A, 1), x--);\n\n        if (!_ && !k) for (; x--; x) S.unshift("..");\n        !_ || "" === S[0] || S[0] && "/" === S[0].charAt(0) || S.unshift(""), T && "/" !== S.join("/").substr(-1) && S.push("");\n        var I,\n            P = "" === S[0] || S[0] && "/" === S[0].charAt(0);\n        E && (r.hostname = r.host = P ? "" : S.length ? S.shift() : "", (I = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = I.shift(), r.host = r.hostname = I.shift()));\n        return (_ = _ || r.host && S.length) && !P && S.unshift(""), S.length ? r.pathname = S.join("/") : (r.pathname = null, r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;\n      }, o.prototype.parseHost = function () {\n        var e = this.host,\n            t = a.exec(e);\n        t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);\n      };\n    }, {\n      "./util": 77,\n      punycode: 51,\n      querystring: 54\n    }],\n    77: [function (e, t, r) {\n      "use strict";\n\n      t.exports = {\n        isString: function (e) {\n          return "string" == typeof e;\n        },\n        isObject: function (e) {\n          return "object" == typeof e && null !== e;\n        },\n        isNull: function (e) {\n          return null === e;\n        },\n        isNullOrUndefined: function (e) {\n          return null == e;\n        }\n      };\n    }, {}],\n    78: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          function r(t) {\n            try {\n              if (!e.localStorage) return !1;\n            } catch (e) {\n              return !1;\n            }\n\n            var r = e.localStorage[t];\n            return null != r && "true" === String(r).toLowerCase();\n          }\n\n          t.exports = function (e, t) {\n            if (r("noDeprecation")) return e;\n            var n = !1;\n            return function () {\n              if (!n) {\n                if (r("throwDeprecation")) throw new Error(t);\n                r("traceDeprecation") ? console.trace(t) : console.warn(t), n = !0;\n              }\n\n              return e.apply(this, arguments);\n            };\n          };\n        }).call(this);\n      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {}],\n    79: [function (e, t, r) {\n      t.exports = function e(t, r) {\n        if (t && r) return e(t)(r);\n        if ("function" != typeof t) throw new TypeError("need wrapper function");\n        Object.keys(t).forEach(function (e) {\n          n[e] = t[e];\n        });\n        return n;\n\n        function n() {\n          for (var e = new Array(arguments.length), r = 0; r < e.length; r++) e[r] = arguments[r];\n\n          var n = t.apply(this, e),\n              i = e[e.length - 1];\n          return "function" == typeof n && n !== i && Object.keys(i).forEach(function (e) {\n            n[e] = i[e];\n          }), n;\n        }\n      };\n    }, {}],\n    80: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function () {\n        throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");\n      };\n    }, {}],\n    81: [function (e, t, r) {\n      t.exports = function () {\n        for (var e = {}, t = 0; t < arguments.length; t++) {\n          var r = arguments[t];\n\n          for (var i in r) n.call(r, i) && (e[i] = r[i]);\n        }\n\n        return e;\n      };\n\n      var n = Object.prototype.hasOwnProperty;\n    }, {}],\n    82: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function (e) {\n        e.prototype[Symbol.iterator] = function* () {\n          for (let e = this.head; e; e = e.next) yield e.value;\n        };\n      };\n    }, {}],\n    83: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        var t = this;\n        if (t instanceof n || (t = new n()), t.tail = null, t.head = null, t.length = 0, e && "function" == typeof e.forEach) e.forEach(function (e) {\n          t.push(e);\n        });else if (arguments.length > 0) for (var r = 0, i = arguments.length; r < i; r++) t.push(arguments[r]);\n        return t;\n      }\n\n      function i(e, t, r) {\n        var n = t === e.head ? new a(r, null, t, e) : new a(r, t, t.next, e);\n        return null === n.next && (e.tail = n), null === n.prev && (e.head = n), e.length++, n;\n      }\n\n      function o(e, t) {\n        e.tail = new a(t, e.tail, null, e), e.head || (e.head = e.tail), e.length++;\n      }\n\n      function s(e, t) {\n        e.head = new a(t, null, e.head, e), e.tail || (e.tail = e.head), e.length++;\n      }\n\n      function a(e, t, r, n) {\n        if (!(this instanceof a)) return new a(e, t, r, n);\n        this.list = n, this.value = e, t ? (t.next = this, this.prev = t) : this.prev = null, r ? (r.prev = this, this.next = r) : this.next = null;\n      }\n\n      t.exports = n, n.Node = a, n.create = n, n.prototype.removeNode = function (e) {\n        if (e.list !== this) throw new Error("removing node which does not belong to this list");\n        var t = e.next,\n            r = e.prev;\n        return t && (t.prev = r), r && (r.next = t), e === this.head && (this.head = t), e === this.tail && (this.tail = r), e.list.length--, e.next = null, e.prev = null, e.list = null, t;\n      }, n.prototype.unshiftNode = function (e) {\n        if (e !== this.head) {\n          e.list && e.list.removeNode(e);\n          var t = this.head;\n          e.list = this, e.next = t, t && (t.prev = e), this.head = e, this.tail || (this.tail = e), this.length++;\n        }\n      }, n.prototype.pushNode = function (e) {\n        if (e !== this.tail) {\n          e.list && e.list.removeNode(e);\n          var t = this.tail;\n          e.list = this, e.prev = t, t && (t.next = e), this.tail = e, this.head || (this.head = e), this.length++;\n        }\n      }, n.prototype.push = function () {\n        for (var e = 0, t = arguments.length; e < t; e++) o(this, arguments[e]);\n\n        return this.length;\n      }, n.prototype.unshift = function () {\n        for (var e = 0, t = arguments.length; e < t; e++) s(this, arguments[e]);\n\n        return this.length;\n      }, n.prototype.pop = function () {\n        if (this.tail) {\n          var e = this.tail.value;\n          return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, e;\n        }\n      }, n.prototype.shift = function () {\n        if (this.head) {\n          var e = this.head.value;\n          return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, e;\n        }\n      }, n.prototype.forEach = function (e, t) {\n        t = t || this;\n\n        for (var r = this.head, n = 0; null !== r; n++) e.call(t, r.value, n, this), r = r.next;\n      }, n.prototype.forEachReverse = function (e, t) {\n        t = t || this;\n\n        for (var r = this.tail, n = this.length - 1; null !== r; n--) e.call(t, r.value, n, this), r = r.prev;\n      }, n.prototype.get = function (e) {\n        for (var t = 0, r = this.head; null !== r && t < e; t++) r = r.next;\n\n        if (t === e && null !== r) return r.value;\n      }, n.prototype.getReverse = function (e) {\n        for (var t = 0, r = this.tail; null !== r && t < e; t++) r = r.prev;\n\n        if (t === e && null !== r) return r.value;\n      }, n.prototype.map = function (e, t) {\n        t = t || this;\n\n        for (var r = new n(), i = this.head; null !== i;) r.push(e.call(t, i.value, this)), i = i.next;\n\n        return r;\n      }, n.prototype.mapReverse = function (e, t) {\n        t = t || this;\n\n        for (var r = new n(), i = this.tail; null !== i;) r.push(e.call(t, i.value, this)), i = i.prev;\n\n        return r;\n      }, n.prototype.reduce = function (e, t) {\n        var r,\n            n = this.head;\n        if (arguments.length > 1) r = t;else {\n          if (!this.head) throw new TypeError("Reduce of empty list with no initial value");\n          n = this.head.next, r = this.head.value;\n        }\n\n        for (var i = 0; null !== n; i++) r = e(r, n.value, i), n = n.next;\n\n        return r;\n      }, n.prototype.reduceReverse = function (e, t) {\n        var r,\n            n = this.tail;\n        if (arguments.length > 1) r = t;else {\n          if (!this.tail) throw new TypeError("Reduce of empty list with no initial value");\n          n = this.tail.prev, r = this.tail.value;\n        }\n\n        for (var i = this.length - 1; null !== n; i--) r = e(r, n.value, i), n = n.prev;\n\n        return r;\n      }, n.prototype.toArray = function () {\n        for (var e = new Array(this.length), t = 0, r = this.head; null !== r; t++) e[t] = r.value, r = r.next;\n\n        return e;\n      }, n.prototype.toArrayReverse = function () {\n        for (var e = new Array(this.length), t = 0, r = this.tail; null !== r; t++) e[t] = r.value, r = r.prev;\n\n        return e;\n      }, n.prototype.slice = function (e, t) {\n        (t = t || this.length) < 0 && (t += this.length), (e = e || 0) < 0 && (e += this.length);\n        var r = new n();\n        if (t < e || t < 0) return r;\n        e < 0 && (e = 0), t > this.length && (t = this.length);\n\n        for (var i = 0, o = this.head; null !== o && i < e; i++) o = o.next;\n\n        for (; null !== o && i < t; i++, o = o.next) r.push(o.value);\n\n        return r;\n      }, n.prototype.sliceReverse = function (e, t) {\n        (t = t || this.length) < 0 && (t += this.length), (e = e || 0) < 0 && (e += this.length);\n        var r = new n();\n        if (t < e || t < 0) return r;\n        e < 0 && (e = 0), t > this.length && (t = this.length);\n\n        for (var i = this.length, o = this.tail; null !== o && i > t; i--) o = o.prev;\n\n        for (; null !== o && i > e; i--, o = o.prev) r.push(o.value);\n\n        return r;\n      }, n.prototype.splice = function (e, t, ...r) {\n        e > this.length && (e = this.length - 1), e < 0 && (e = this.length + e);\n\n        for (var n = 0, o = this.head; null !== o && n < e; n++) o = o.next;\n\n        var s = [];\n\n        for (n = 0; o && n < t; n++) s.push(o.value), o = this.removeNode(o);\n\n        null === o && (o = this.tail), o !== this.head && o !== this.tail && (o = o.prev);\n\n        for (n = 0; n < r.length; n++) o = i(this, o, r[n]);\n\n        return s;\n      }, n.prototype.reverse = function () {\n        for (var e = this.head, t = this.tail, r = e; null !== r; r = r.prev) {\n          var n = r.prev;\n          r.prev = r.next, r.next = n;\n        }\n\n        return this.head = t, this.tail = e, this;\n      };\n\n      try {\n        e("./iterator.js")(n);\n      } catch (e) {}\n    }, {\n      "./iterator.js": 82\n    }]\n  }, {}, [12])(12);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9tcXR0L21xdHQubWluLmpzPzA0NDgiXSwibmFtZXMiOlsiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0IiwiciIsIm4iLCJpIiwicyIsImEiLCJsIiwicmVxdWlyZSIsIm8iLCJ1IiwiRXJyb3IiLCJjb2RlIiwiYyIsImNhbGwiLCJsZW5ndGgiLCJFdmVudEVtaXR0ZXIiLCJXcml0YWJsZSIsImgiLCJmIiwicCIsImQiLCJnIiwieSIsImIiLCJuZXh0VGljayIsInNldFRpbWVvdXQiLCJtIiwic2V0SW1tZWRpYXRlIiwidiIsImtlZXBhbGl2ZSIsInJlc2NoZWR1bGVQaW5ncyIsInByb3RvY29sSWQiLCJwcm90b2NvbFZlcnNpb24iLCJyZWNvbm5lY3RQZXJpb2QiLCJjb25uZWN0VGltZW91dCIsImNsZWFuIiwicmVzdWJzY3JpYmUiLCJ3IiwiXyIsImsiLCJwcm9wZXJ0aWVzIiwidG9waWNBbGlhcyIsInRvcGljIiwidG9TdHJpbmciLCJ0b3BpY0FsaWFzU2VuZCIsImdldFRvcGljQnlBbGlhcyIsIlMiLCJlbWl0Iiwid3JpdGVUb1N0cmVhbSIsInN0cmVhbSIsIm9wdGlvbnMiLCJvbmNlIiwiRSIsImNtZCIsIm91dGdvaW5nU3RvcmUiLCJwdXQiLCJDIiwiVCIsInByb3RvY29sIiwidXNlcm5hbWUiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJ0b3BpY0FsaWFzTWF4aW11bSIsImNsaWVudElkIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0ciIsImN1c3RvbUhhbmRsZUFja3MiLCJhcmd1bWVudHMiLCJzdHJlYW1CdWlsZGVyIiwibWVzc2FnZUlkUHJvdmlkZXIiLCJpbmNvbWluZ1N0b3JlIiwicXVldWVRb1NaZXJvIiwiX3Jlc3Vic2NyaWJlVG9waWNzIiwibWVzc2FnZUlkVG9Ub3BpYyIsInBpbmdUaW1lciIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RpbmciLCJxdWV1ZSIsImNvbm5hY2tUaW1lciIsInJlY29ubmVjdFRpbWVyIiwiX3N0b3JlUHJvY2Vzc2luZyIsIl9wYWNrZXRJZHNEdXJpbmdTdG9yZVByb2Nlc3NpbmciLCJfc3RvcmVQcm9jZXNzaW5nUXVldWUiLCJvdXRnb2luZyIsIl9maXJzdENvbm5lY3Rpb24iLCJ0b3BpY0FsaWFzUmVjdiIsIm9uIiwic2hpZnQiLCJfcmVzdWJzY3JpYmUiLCJwYWNrZXQiLCJtZXNzYWdlSWQiLCJyZWdpc3RlciIsIl9zZW5kUGFja2V0IiwiY2IiLCJjbGVhclRpbWVvdXQiLCJjbGVhciIsIl9zZXR1cFJlY29ubmVjdCIsIl9zZXR1cFN0cmVhbSIsInByb3RvdHlwZSIsInBhcnNlciIsIl9oYW5kbGVQYWNrZXQiLCJfY2xlYXJSZWNvbm5lY3QiLCJwdXNoIiwiX3dyaXRlIiwicGFyc2UiLCJwaXBlIiwibWVzc2FnZSIsImluY2x1ZGVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJ2b2xhdGlsZSIsImNyZWF0ZSIsIm1heCIsImJpbmQiLCJhdXRoZW50aWNhdGlvbk1ldGhvZCIsImF1dGhlbnRpY2F0aW9uRGF0YSIsImVuZCIsImF1dGhQYWNrZXQiLCJyZWFzb25Db2RlIiwic2V0TWF4TGlzdGVuZXJzIiwiX2NsZWFuVXAiLCJtYXhpbXVtUGFja2V0U2l6ZSIsInJlYXNvblN0cmluZyIsIl9oYW5kbGVQdWJsaXNoIiwiX2hhbmRsZUFjayIsIl9oYW5kbGVQdWJyZWwiLCJfaGFuZGxlQ29ubmFjayIsIl9oYW5kbGVBdXRoIiwiX2hhbmRsZVBpbmdyZXNwIiwiX2hhbmRsZURpc2Nvbm5lY3QiLCJfY2hlY2tEaXNjb25uZWN0aW5nIiwicHVibGlzaCIsInFvcyIsInJldGFpbiIsImR1cCIsIl9uZXh0SWQiLCJwYXlsb2FkIiwiY2JTdG9yZVB1dCIsImludm9rZSIsImNhbGxiYWNrIiwic3Vic2NyaWJlIiwiQXJyYXkiLCJwb3AiLCJ2YWxpZGF0ZVRvcGljcyIsIm5sIiwicmFwIiwicmgiLCJpc0FycmF5IiwiaGFzT3duUHJvcGVydHkiLCJzdWJzY3JpcHRpb25zIiwiZ3JhbnRlZCIsInVuc3Vic2NyaWJlIiwidW5zdWJzY3JpcHRpb25zIiwiZGlzY29ubmVjdGVkIiwiY2xvc2UiLCJfZGVmZXJyZWRSZWNvbm5lY3QiLCJyZW1vdmVPdXRnb2luZ01lc3NhZ2UiLCJkZWwiLCJyZWNvbm5lY3QiLCJfcmVjb25uZWN0IiwicmVjb25uZWN0aW5nIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiZGVzdHJveSIsInJlbW92ZUxpc3RlbmVyIiwiYXV0b0Fzc2lnblRvcGljQWxpYXMiLCJnZXRBbGlhc0J5VG9waWMiLCJnZXRMcnVBbGlhcyIsImF1dG9Vc2VUb3BpY0FsaWFzIiwiX3NoaWZ0UGluZ0ludGVydmFsIiwiX3N0b3JlUGFja2V0IiwiX3NldHVwUGluZ1RpbWVyIiwicGluZ1Jlc3AiLCJfY2hlY2tQaW5nIiwicmVzY2hlZHVsZSIsInJldHVybkNvZGUiLCJzZXJ2ZXJLZWVwQWxpdmUiLCJfb25Db25uZWN0IiwiaGFuZGxlQXV0aCIsImluZGV4T2YiLCJoYW5kbGVNZXNzYWdlIiwiZGVhbGxvY2F0ZSIsIl9pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSIsImdldCIsImFsbG9jYXRlIiwiZ2V0TGFzdE1lc3NhZ2VJZCIsImdldExhc3RBbGxvY2F0ZWQiLCJjb25uYWNrUGFja2V0Iiwic2Vzc2lvblByZXNlbnQiLCJjcmVhdGVTdHJlYW0iLCJfZmx1c2hTdG9yZVByb2Nlc3NpbmdRdWV1ZSIsIl9pbnZva2VBbGxTdG9yZVByb2Nlc3NpbmdRdWV1ZSIsInJlYWQiLCJzcGxpY2UiLCJnbG9iYWwiLCJzZWxmIiwid2luZG93IiwiX3Byb2Nlc3MiLCJkZWJ1ZyIsImV2ZW50cyIsImluaGVyaXRzIiwicmVpbnRlcnZhbCIsInh0ZW5kIiwiVHJhbnNmb3JtIiwiaG9zdG5hbWUiLCJob3N0IiwicGF0aCIsIndzT3B0aW9ucyIsInBvcnQiLCJ0cmFuc2Zvcm1Xc1VybCIsIm15IiwiY29ubmVjdFNvY2tldCIsInVybCIsInByb3RvY29scyIsInNlbmRTb2NrZXRNZXNzYWdlIiwiZGF0YSIsImJ1ZmZlciIsInN1Y2Nlc3MiLCJmYWlsIiwiX2ZsdXNoIiwiY2xvc2VTb2NrZXQiLCJvYmoiLCJvblNvY2tldE9wZW4iLCJzZXRSZWFkYWJsZSIsInNldFdyaXRhYmxlIiwib25Tb2NrZXRNZXNzYWdlIiwiZnJvbSIsIkZpbGVSZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVzdWx0IiwiQXJyYXlCdWZmZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIm9uU29ja2V0Q2xvc2UiLCJvblNvY2tldEVycm9yIiwiQnVmZmVyIiwiZHVwbGV4aWZ5IiwiY3JlYXRlQ29ubmVjdGlvbiIsIm5ldCIsImlzSVAiLCJzZXJ2ZXJuYW1lIiwiY29ubmVjdCIsImF1dGhvcml6ZWQiLCJ0bHMiLCJ0aXRsZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkb2N1bWVudCIsIlVSTCIsIm9iamVjdE1vZGUiLCJiaW5hcnkiLCJicm93c2VyQnVmZmVyU2l6ZSIsImJyb3dzZXJCdWZmZXJUaW1lb3V0IiwiV2ViU29ja2V0IiwiYmluYXJ5VHlwZSIsIm9iamVjdE1vZGVNb2RlIiwiYnVmZmVyZWRBbW91bnQiLCJzZW5kIiwiX3dyaXRldiIsImNodW5rIiwiY29uY2F0IiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJvbm9wZW4iLCJzb2NrZXQiLCJvbmNsb3NlIiwib25lcnJvciIsIm9ubWVzc2FnZSIsImNyZWF0ZVdlYlNvY2tldFN0cmVhbSIsIndzIiwid3giLCJfZGVzdHJveSIsIm9uT3BlbiIsIm9uTWVzc2FnZSIsIm9uQ2xvc2UiLCJvbkVycm9yIiwiZXJyTXNnIiwibmV4dElkIiwiZmxvb3IiLCJSZWFkYWJsZSIsIl9pbmZsaWdodHMiLCJNYXAiLCJzZXQiLCJfcmVhZCIsImRlbGV0ZSIsImFsaWFzVG9Ub3BpYyIsIk51bWJlckFsbG9jYXRvciIsInRvcGljVG9BbGlhcyIsIm51bWJlckFsbG9jYXRvciIsInVzZSIsInJlc2V0IiwiZmlyc3RWYWNhbnQiLCJzcGxpdCIsIk51bWJlciIsInJlcGxhY2UiLCJhdXRoIiwibWF0Y2giLCJwYXNzd29yZCIsInF1ZXJ5IiwiY2VydCIsImtleSIsImZpbHRlciIsImRlZmF1bHRQcm90b2NvbCIsInNlcnZlcnMiLCJfcmVjb25uZWN0Q291bnQiLCJtcXR0IiwidGNwIiwic3NsIiwibXF0dHMiLCJ3eHMiLCJhbGkiLCJhbGlzIiwid3NzIiwiTXF0dENsaWVudCIsIlN0b3JlIiwiYnl0ZUxlbmd0aCIsInRvQnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJqb2luIiwiVWludDhBcnJheSIsIlN5bWJvbCIsImZvciIsIl9pbml0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9idWZzIiwiYXBwZW5kIiwiX25ldyIsIl9vZmZzZXQiLCJfcmV2ZXJzZU9mZnNldCIsInNsaWNlIiwiY29weSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJzaGFsbG93U2xpY2UiLCJjb25zdW1lIiwidHJ1bmMiLCJpc05hTiIsImR1cGxpY2F0ZSIsIl9hcHBlbmRCdWZmZXIiLCJieXRlT2Zmc2V0IiwiX2lzQnVmZmVyTGlzdCIsIlR5cGVFcnJvciIsImlzQnVmZmVyIiwiX21hdGNoIiwicmVhZERvdWJsZUJFIiwicmVhZERvdWJsZUxFIiwicmVhZEZsb2F0QkUiLCJyZWFkRmxvYXRMRSIsInJlYWRJbnQzMkJFIiwicmVhZEludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkVUludDMyTEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQxNkxFIiwicmVhZFVJbnQxNkJFIiwicmVhZFVJbnQxNkxFIiwicmVhZEludDgiLCJyZWFkVUludDgiLCJyZWFkSW50QkUiLCJyZWFkSW50TEUiLCJyZWFkVUludEJFIiwicmVhZFVJbnRMRSIsImlzQnVmZmVyTGlzdCIsIkR1cGxleCIsIl9jYWxsYmFjayIsImFzc2lnbiIsIm1pbiIsIkJ1ZmZlckxpc3RTdHJlYW0iLCJCdWZmZXJMaXN0IiwiU2xvd0J1ZmZlciIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiUmFuZ2VFcnJvciIsIl9fcHJvdG9fXyIsImlzRW5jb2RpbmciLCJ3cml0ZSIsImlzVmlldyIsInEiLCJ2YWx1ZU9mIiwiRCIsInR5cGUiLCJ0b1ByaW1pdGl2ZSIsIkwiLCJqIiwidG9Mb3dlckNhc2UiLCJsYXN0SW5kZXhPZiIsIlN0cmluZyIsInBhcnNlSW50IiwiVSIsImZyb21DaGFyQ29kZSIsImFwcGx5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJmb28iLCJjb25zb2xlIiwiZXJyb3IiLCJlbnVtZXJhYmxlIiwic3BlY2llcyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicG9vbFNpemUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsIm9mZnNldCIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsIngiLCJBIiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwidHJpbSIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsIk4iLCJJIiwiUCIsIk8iLCJCIiwiUiIsInN1YmFycmF5IiwicG93Iiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsImNvcHlXaXRoaW4iLCJNIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaWVlZTc1NCIsImZvcm1hdEFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjb2xvciIsInNhdmUiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJsb2FkIiwiZ2V0SXRlbSIsImVudiIsIkRFQlVHIiwicHJvY2VzcyIsIl9fbndqcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsIlJlZ0V4cCIsIiQxIiwibG9jYWxTdG9yYWdlIiwid2FybiIsImNvbG9ycyIsImxvZyIsImZvcm1hdHRlcnMiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5hYmxlZCIsIkRhdGUiLCJwcmV2IiwiY3VyciIsImNvZXJjZSIsInVuc2hpZnQiLCJzZWxlY3RDb2xvciIsImV4dGVuZCIsIm5hbWVzcGFjZXMiLCJpbml0Iiwic3Vic3RyaW5nIiwiZGVmYXVsdCIsInN0YWNrIiwiZGlzYWJsZSIsIm5hbWVzIiwibWFwIiwic2tpcHMiLCJlbmFibGUiLCJ0ZXN0IiwiYWJzIiwibXMiLCJfY29ya2VkIiwiX2F1dG9EZXN0cm95IiwiX2VuZGVkIiwiX3dyaXRhYmxlIiwiX3JlYWRhYmxlIiwiX3JlYWRhYmxlMiIsImF1dG9EZXN0cm95IiwiX2ZvcndhcmREZXN0cm95IiwiX2ZvcndhcmRFbmQiLCJfb25kcmFpbiIsIl9kcmFpbmVkIiwiX2ZvcndhcmRpbmciLCJfdW53cml0ZSIsIl91bnJlYWQiLCJkZXN0cm95ZWQiLCJoaWdoV2F0ZXJNYXJrIiwiY29yayIsInVuY29yayIsInJlYWRhYmxlIiwicmVzdW1lIiwiX2ZvcndhcmQiLCJfcmVhZGFibGVTdGF0ZSIsIndyYXAiLCJfZmluaXNoIiwiX3dyaXRhYmxlU3RhdGUiLCJwcmVmaW5pc2hlZCIsImZpbmlzaGVkIiwiZW5kaW5nIiwiZW5kZWQiLCJyZXEiLCJzZXRIZWFkZXIiLCJhYm9ydCIsInN0ZGlvIiwiRnVuY3Rpb24iLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJuZXdMaXN0ZW5lciIsImxpc3RlbmVyIiwid2FybmVkIiwiZW1pdHRlciIsImNvdW50IiwiZmlyZWQiLCJ0YXJnZXQiLCJ3cmFwRm4iLCJnZXRNYXhMaXN0ZW5lcnMiLCJjb250ZXh0IiwiYWRkTGlzdGVuZXIiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwibGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImV2ZW50TmFtZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIk5hTiIsIkxOMiIsInN1cGVyXyIsInBhcmVudCIsImJyb3RoZXIiLCJsZWZ0Q2hpbGQiLCJyaWdodENoaWxkIiwicm90YXRlTGVmdCIsInJvdGF0ZVJpZ2h0IiwicmVtb3ZlIiwiVHJlZU5vZGVDb2xvclR5cGUiLCJyZWQiLCJibGFjayIsImZyZWV6ZSIsIl9fZ2VuZXJhdG9yIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ0aHJvdyIsInJldHVybiIsIml0ZXJhdG9yIiwiZG9uZSIsInNpemUiLCJlbXB0eSIsImJ1Y2tldFNpemUiLCJmcm9udCIsImJhY2siLCJjdXJOb2RlQnVja2V0SW5kZXgiLCJjdXJOb2RlUG9pbnRlckluZGV4IiwiZ2V0RWxlbWVudEJ5UG9zIiwiZXJhc2VFbGVtZW50QnlQb3MiLCJwb3BGcm9udCIsInBvcEJhY2siLCJjdXQiLCJwdXNoQmFjayIsImVyYXNlRWxlbWVudEJ5VmFsdWUiLCJzZXRFbGVtZW50QnlQb3MiLCJzaWdtYSIsImNlaWwiLCJpbnNlcnQiLCJwdXNoRnJvbnQiLCJmaW5kIiwicmV2ZXJzZSIsInVuaXF1ZSIsInNvcnQiLCJzaHJpbmtUb0ZpdCIsIl9fdmFsdWVzIiwiaW5pdFNpemUiLCJtYXhTaXplIiwic2V0RWxlbWVudCIsInRyZWVpZnlUaHJlc2hvbGQiLCJ1bnRyZWVpZnlUaHJlc2hvbGQiLCJlcmFzZUVsZW1lbnRCeUtleSIsImdldEVsZW1lbnRCeUtleSIsIm1pblRyZWVpZnlTaXplIiwicHJlIiwibWVyZ2UiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsInJldmVyc2VMb3dlckJvdW5kIiwicmV2ZXJzZVVwcGVyQm91bmQiLCJ1bmlvbiIsImdldEhlaWdodCIsInRvcCIsIl9fcmVhZCIsIl9fc3ByZWFkQXJyYXkiLCJIYXNoTWFwIiwiSGFzaFNldCIsIlNldCIsIlByaW9yaXR5UXVldWUiLCJEZXF1ZSIsIkxpbmtMaXN0IiwiUXVldWUiLCJTdGFjayIsIlZlY3RvciIsIm5vdyIsInVuc2hpZnROb2RlIiwibWF4QWdlIiwidGFpbCIsInJlbW92ZU5vZGUiLCJzdGFsZSIsImRpc3Bvc2UiLCJub0Rpc3Bvc2VPblNldCIsInVwZGF0ZUFnZU9uR2V0IiwiYWxsb3dTdGFsZSIsImxlbmd0aENhbGN1bGF0b3IiLCJpdGVtQ291bnQiLCJyZm9yRWFjaCIsImhlYWQiLCJ0b0FycmF5IiwidmFsdWVzIiwiZHVtcCIsImR1bXBMcnUiLCJoYXMiLCJwZWVrIiwicHJ1bmUiLCJ5YWxsaXN0IiwidHlwZXMiLCJjb2RlcyIsIkNNRF9TSElGVCIsIkNNRF9NQVNLIiwiRFVQX01BU0siLCJRT1NfTUFTSyIsIlFPU19TSElGVCIsIlJFVEFJTl9NQVNLIiwiVkFSQllURUlOVF9NQVNLIiwiVkFSQllURUlOVF9GSU5fTUFTSyIsIlZBUkJZVEVJTlRfTUFYIiwiU0VTU0lPTlBSRVNFTlRfTUFTSyIsIlNFU1NJT05QUkVTRU5UX0hFQURFUiIsIkNPTk5BQ0tfSEVBREVSIiwiY29ubmFjayIsIlVTRVJOQU1FX01BU0siLCJQQVNTV09SRF9NQVNLIiwiV0lMTF9SRVRBSU5fTUFTSyIsIldJTExfUU9TX01BU0siLCJXSUxMX1FPU19TSElGVCIsIldJTExfRkxBR19NQVNLIiwiQ0xFQU5fU0VTU0lPTl9NQVNLIiwiQ09OTkVDVF9IRUFERVIiLCJzZXNzaW9uRXhwaXJ5SW50ZXJ2YWwiLCJ3aWxsRGVsYXlJbnRlcnZhbCIsInJlY2VpdmVNYXhpbXVtIiwicmVxdWVzdFJlc3BvbnNlSW5mb3JtYXRpb24iLCJyZXF1ZXN0UHJvYmxlbUluZm9ybWF0aW9uIiwidXNlclByb3BlcnRpZXMiLCJwYXlsb2FkRm9ybWF0SW5kaWNhdG9yIiwibWVzc2FnZUV4cGlyeUludGVydmFsIiwiY29udGVudFR5cGUiLCJyZXNwb25zZVRvcGljIiwiY29ycmVsYXRpb25EYXRhIiwibWF4aW11bVFvUyIsInJldGFpbkF2YWlsYWJsZSIsImFzc2lnbmVkQ2xpZW50SWRlbnRpZmllciIsIndpbGRjYXJkU3Vic2NyaXB0aW9uQXZhaWxhYmxlIiwic3Vic2NyaXB0aW9uSWRlbnRpZmllcnNBdmFpbGFibGUiLCJzaGFyZWRTdWJzY3JpcHRpb25BdmFpbGFibGUiLCJyZXNwb25zZUluZm9ybWF0aW9uIiwic2VydmVyUmVmZXJlbmNlIiwic3Vic2NyaXB0aW9uSWRlbnRpZmllciIsInByb3BlcnRpZXNDb2RlcyIsInByb3BlcnRpZXNUeXBlcyIsIlBVQkxJU0hfSEVBREVSIiwiU1VCU0NSSUJFX0hFQURFUiIsIlNVQlNDUklCRV9PUFRJT05TX1FPU19NQVNLIiwiU1VCU0NSSUJFX09QVElPTlNfTkxfTUFTSyIsIlNVQlNDUklCRV9PUFRJT05TX05MX1NISUZUIiwiU1VCU0NSSUJFX09QVElPTlNfUkFQX01BU0siLCJTVUJTQ1JJQkVfT1BUSU9OU19SQVBfU0hJRlQiLCJTVUJTQ1JJQkVfT1BUSU9OU19SSF9NQVNLIiwiU1VCU0NSSUJFX09QVElPTlNfUkhfU0hJRlQiLCJTVUJTQ1JJQkVfT1BUSU9OU19SSCIsIlNVQlNDUklCRV9PUFRJT05TX05MIiwiU1VCU0NSSUJFX09QVElPTlNfUkFQIiwiU1VCU0NSSUJFX09QVElPTlNfUU9TIiwiVU5TVUJTQ1JJQkVfSEVBREVSIiwiQUNLUyIsInVuc3ViYWNrIiwicHViYWNrIiwicHViY29tcCIsInB1YnJlbCIsInB1YnJlYyIsIlNVQkFDS19IRUFERVIiLCJzdWJhY2siLCJWRVJTSU9OMyIsIlZFUlNJT040IiwiVkVSU0lPTjUiLCJWRVJTSU9OMTMxIiwiVkVSU0lPTjEzMiIsIlFPUyIsIkVNUFRZIiwicGluZ3JlcSIsInBpbmdyZXNwIiwiZGlzY29ubmVjdCIsIl9hcnJheSIsIl9pIiwiZ2VuZXJhdGUiLCJjYWNoZSIsImdlbmVyYXRlQ2FjaGUiLCJnZW5lcmF0ZU51bWJlciIsImdlbkJ1ZlZhcmlhYmxlQnl0ZUludCIsImdlbmVyYXRlNEJ5dGVCdWZmZXIiLCJzZXR0aW5ncyIsIl9zdGF0ZXMiLCJfcmVzZXRTdGF0ZSIsIl9saXN0IiwiX3N0YXRlQ291bnRlciIsIl9wYXJzZUhlYWRlciIsIl9wYXJzZUxlbmd0aCIsIl9wYXJzZVZhckJ5dGVOdW0iLCJieXRlcyIsIl9wYXJzZVBheWxvYWQiLCJfcG9zIiwiX3BhcnNlQ29ubmVjdCIsIl9wYXJzZUNvbm5hY2siLCJfcGFyc2VQdWJsaXNoIiwiX3BhcnNlQ29uZmlybWF0aW9uIiwiX3BhcnNlU3Vic2NyaWJlIiwiX3BhcnNlU3ViYWNrIiwiX3BhcnNlVW5zdWJzY3JpYmUiLCJfcGFyc2VVbnN1YmFjayIsIl9wYXJzZURpc2Nvbm5lY3QiLCJfcGFyc2VBdXRoIiwiX2VtaXRFcnJvciIsIl9wYXJzZVN0cmluZyIsImJyaWRnZU1vZGUiLCJ3aWxsIiwiX3BhcnNlTnVtIiwiX3BhcnNlUHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfcGFyc2VCdWZmZXIiLCJfcGFyc2VNZXNzYWdlSWQiLCJfcGFyc2VCeXRlIiwiX3BhcnNlU3RyaW5nUGFpciIsIl9wYXJzZTRCeXRlTnVtIiwiX3BhcnNlQnlUeXBlIiwiX25ld1BhY2tldCIsImJsIiwicmVkdWNlIiwicm91bmQiLCJleGVjIiwicGFyc2VGbG9hdCIsImxvbmciLCJsb3ciLCJoaWdoIiwic3MiLCJmcmVlIiwiaW50ZXJ2YWxDb3VudCIsImNhbGxlZCIsIm9uY2VFcnJvciIsInN0cmljdCIsInByb3RvIiwid3JhcHB5IiwidmVyc2lvbiIsInJ1biIsImZ1biIsImFycmF5IiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9mZiIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwibm9kZVR5cGUiLCJvdmVyZmxvdyIsInVjczIiLCJkZWNvZGUiLCJlbmNvZGUiLCJ0b0FTQ0lJIiwidG9Vbmljb2RlIiwicHVueWNvZGUiLCJtYXhLZXlzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYWxsb3dIYWxmT3BlbiIsImdldEJ1ZmZlciIsIl90cmFuc2Zvcm0iLCJSZWFkYWJsZVN0YXRlIiwiZGVidWdsb2ciLCJnZXRIaWdoV2F0ZXJNYXJrIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GIiwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQiLCJFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UIiwiZXJyb3JPckRlc3Ryb3kiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJwaXBlcyIsInBpcGVzQ291bnQiLCJmbG93aW5nIiwiZW5kRW1pdHRlZCIsInJlYWRpbmciLCJzeW5jIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJwYXVzZWQiLCJlbWl0Q2xvc2UiLCJkZWZhdWx0RW5jb2RpbmciLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwiZW5jb2RpbmciLCJTdHJpbmdEZWNvZGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImZpcnN0IiwieiIsInN0ZG91dCIsInN0ZGVyciIsImhhc1VucGlwZWQiLCJuZWVkRHJhaW4iLCJwYXVzZSIsInVucGlwZSIsImFzeW5jSXRlcmF0b3IiLCJfZnJvbUxpc3QiLCJ1dGlsIiwiRVJSX01VTFRJUExFX0NBTExCQUNLIiwiRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyIsIkVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCIsIl90cmFuc2Zvcm1TdGF0ZSIsImFmdGVyVHJhbnNmb3JtIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjYiIsIndyaXRlY2h1bmsiLCJuZWVkVHJhbnNmb3JtIiwid3JpdGVlbmNvZGluZyIsInRyYW5zZm9ybSIsImZsdXNoIiwiZW50cnkiLCJmaW5pc2giLCJwZW5kaW5nY2IiLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJXcml0YWJsZVN0YXRlIiwiZGVwcmVjYXRlIiwiRVJSX1NUUkVBTV9DQU5OT1RfUElQRSIsIkVSUl9TVFJFQU1fREVTVFJPWUVEIiwiRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyIsIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EIiwiRVJSX1VOS05PV05fRU5DT0RJTkciLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJmaW5hbENhbGxlZCIsImRlY29kZVN0cmluZ3MiLCJ3cml0aW5nIiwiY29ya2VkIiwiYnVmZmVyUHJvY2Vzc2luZyIsIm9ud3JpdGUiLCJ3cml0ZWxlbiIsImVycm9yRW1pdHRlZCIsImJ1ZmZlcmVkUmVxdWVzdCIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsIndyaXRldiIsImZpbmFsIiwiX2ZpbmFsIiwiaXNCdWYiLCJhbGxCdWZmZXJzIiwiaGFzSW5zdGFuY2UiLCJzZXREZWZhdWx0RW5jb2RpbmciLCJzZXRQcm90b3R5cGVPZiIsIlByb21pc2UiLCJyZWplY3QiLCJyZXNvbHZlIiwidGhlbiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImN1c3RvbSIsIl9nZXRTdHJpbmciLCJfZ2V0QnVmZmVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXB0aCIsImN1c3RvbUluc3BlY3QiLCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSIsIkVSUl9NSVNTSU5HX0FSR1MiLCJFUlJfSU5WQUxJRF9PUFRfVkFMVUUiLCJTdHJlYW0iLCJQYXNzVGhyb3VnaCIsInBpcGVsaW5lIiwiX2FyZ3MiLCJfaW50ZXJ2YWwiLCJjaXJjbGVzIiwiX2R1cGxleFN0YXRlIiwidGV4dCIsImZpbGxMYXN0IiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInNsYXNoZXMiLCJoYXNoIiwic2VhcmNoIiwicGF0aG5hbWUiLCJocmVmIiwicmVzb2x2ZU9iamVjdCIsImZvcm1hdCIsImlzU3RyaW5nIiwiVXJsIiwiamF2YXNjcmlwdCIsImh0dHAiLCJodHRwcyIsImZ0cCIsImdvcGhlciIsImZpbGUiLCJpc09iamVjdCIsInBhcnNlSG9zdCIsIkYiLCJlc2NhcGUiLCJWIiwiSCIsIlciLCJjaGFyQXQiLCJpc051bGxPclVuZGVmaW5lZCIsImlzTnVsbCIsInF1ZXJ5c3RyaW5nIiwidHJhY2UiLCJsaXN0IiwiTm9kZSIsInB1c2hOb2RlIiwiZm9yRWFjaFJldmVyc2UiLCJnZXRSZXZlcnNlIiwibWFwUmV2ZXJzZSIsInJlZHVjZVJldmVyc2UiLCJ0b0FycmF5UmV2ZXJzZSIsInNsaWNlUmV2ZXJzZSJdLCJtYXBwaW5ncyI6IkFBQUEsdUVBQUMsVUFBU0EsQ0FBVCxFQUFXO0VBQUMsSUFBRyxJQUFILEVBQXdEQyxNQUFNLENBQUNDLE9BQVAsR0FBZUYsQ0FBQyxFQUFoQixDQUF4RCxLQUFnRixFQUE4SztBQUFBLENBQTFRLENBQTJRLFlBQVU7RUFBQyxPQUFPLFlBQVU7SUFBQyxPQUFPLFNBQVNBLENBQVQsQ0FBV0csQ0FBWCxFQUFhQyxDQUFiLEVBQWVDLENBQWYsRUFBaUI7TUFBQyxTQUFTQyxDQUFULENBQVdDLENBQVgsRUFBYUMsQ0FBYixFQUFlO1FBQUMsSUFBRyxDQUFDSixDQUFDLENBQUNHLENBQUQsQ0FBTCxFQUFTO1VBQUMsSUFBRyxDQUFDSixDQUFDLENBQUNJLENBQUQsQ0FBTCxFQUFTO1lBQUMsSUFBSUUsQ0FBQyxHQUFDLGNBQVksT0FBT0MsT0FBbkIsSUFBNEJBLE9BQWxDO1lBQTBDLElBQUcsQ0FBQ0YsQ0FBRCxJQUFJQyxDQUFQLEVBQVMsT0FBT0EsT0FBQyxDQUFDRixDQUFELEVB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Q0FBQ21lLElBQVI7VUFBYW5lLENBQUMsQ0FBQ21lLElBQUYsR0FBT25lLENBQUMsQ0FBQ21rQixJQUFULEVBQWNua0IsQ0FBQyxDQUFDbWtCLElBQUYsR0FBT2xrQixDQUFyQjtRQUF1Qjs7UUFBQSxPQUFPLEtBQUt5b0IsSUFBTCxHQUFVM29CLENBQVYsRUFBWSxLQUFLaW9CLElBQUwsR0FBVXBvQixDQUF0QixFQUF3QixJQUEvQjtNQUFvQyxDQUEvdkg7O01BQWd3SCxJQUFHO1FBQUNBLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbUJLLENBQW5CO01BQXNCLENBQTFCLENBQTBCLE9BQU1MLENBQU4sRUFBUSxDQUFFO0lBQUMsQ0FBbGlKLEVBQW1pSjtNQUFDLGlCQUFnQjtJQUFqQixDQUFuaUo7RUFBbGdpTyxDQUFqYyxFQUE2L3JPLEVBQTcvck8sRUFBZ2dzTyxDQUFDLEVBQUQsQ0FBaGdzTyxFQUFzZ3NPLEVBQXRnc08sQ0FBUDtBQUFpaHNPLENBQXZ5c08sQ0FBRCxDIiwiZmlsZSI6IjE3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykubXF0dD1lKCl9fShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbiBlKHQscixuKXtmdW5jdGlvbiBpKHMsYSl7aWYoIXJbc10pe2lmKCF0W3NdKXt2YXIgbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFhJiZsKXJldHVybiBsKHMsITApO2lmKG8pcmV0dXJuIG8ocywhMCk7dmFyIHU9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitzK1wiJ1wiKTt0aHJvdyB1LmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsdX12YXIgYz1yW3NdPXtleHBvcnRzOnt9fTt0W3NdWzBdLmNhbGwoYy5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiBpKHRbc11bMV1bZV18fGUpfSxjLGMuZXhwb3J0cyxlLHQscixuKX1yZXR1cm4gcltzXS5leHBvcnRzfWZvcih2YXIgbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLHM9MDtzPG4ubGVuZ3RoO3MrKylpKG5bc10pO3JldHVybiBpfX0oKSh7MTpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyLG4peyhmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2NvbnN0IGk9ZShcImV2ZW50c1wiKS5FdmVudEVtaXR0ZXIsbz1lKFwiLi9zdG9yZVwiKSxzPWUoXCIuL3RvcGljLWFsaWFzLXJlY3ZcIiksYT1lKFwiLi90b3BpYy1hbGlhcy1zZW5kXCIpLGw9ZShcIm1xdHQtcGFja2V0XCIpLHU9ZShcIi4vZGVmYXVsdC1tZXNzYWdlLWlkLXByb3ZpZGVyXCIpLGM9ZShcInJlYWRhYmxlLXN0cmVhbVwiKS5Xcml0YWJsZSxoPWUoXCJpbmhlcml0c1wiKSxmPWUoXCJyZWludGVydmFsXCIpLHA9ZShcInJmZGMvZGVmYXVsdFwiKSxkPWUoXCIuL3ZhbGlkYXRpb25zXCIpLGc9ZShcInh0ZW5kXCIpLHk9ZShcImRlYnVnXCIpKFwibXF0dGpzOmNsaWVudFwiKSxiPXI/ci5uZXh0VGljazpmdW5jdGlvbihlKXtzZXRUaW1lb3V0KGUsMCl9LG09bi5zZXRJbW1lZGlhdGV8fGZ1bmN0aW9uKGUpe2IoZSl9LHY9e2tlZXBhbGl2ZTo2MCxyZXNjaGVkdWxlUGluZ3M6ITAscHJvdG9jb2xJZDpcIk1RVFRcIixwcm90b2NvbFZlcnNpb246NCxyZWNvbm5lY3RQZXJpb2Q6MWUzLGNvbm5lY3RUaW1lb3V0OjNlNCxjbGVhbjohMCxyZXN1YnNjcmliZTohMH0sdz1bXCJFQ09OTlJFRlVTRURcIixcIkVBRERSSU5VU0VcIixcIkVDT05OUkVTRVRcIixcIkVOT1RGT1VORFwiXSxfPXswOlwiXCIsMTpcIlVuYWNjZXB0YWJsZSBwcm90b2NvbCB2ZXJzaW9uXCIsMjpcIklkZW50aWZpZXIgcmVqZWN0ZWRcIiwzOlwiU2VydmVyIHVuYXZhaWxhYmxlXCIsNDpcIkJhZCB1c2VybmFtZSBvciBwYXNzd29yZFwiLDU6XCJOb3QgYXV0aG9yaXplZFwiLDE2OlwiTm8gbWF0Y2hpbmcgc3Vic2NyaWJlcnNcIiwxNzpcIk5vIHN1YnNjcmlwdGlvbiBleGlzdGVkXCIsMTI4OlwiVW5zcGVjaWZpZWQgZXJyb3JcIiwxMjk6XCJNYWxmb3JtZWQgUGFja2V0XCIsMTMwOlwiUHJvdG9jb2wgRXJyb3JcIiwxMzE6XCJJbXBsZW1lbnRhdGlvbiBzcGVjaWZpYyBlcnJvclwiLDEzMjpcIlVuc3VwcG9ydGVkIFByb3RvY29sIFZlcnNpb25cIiwxMzM6XCJDbGllbnQgSWRlbnRpZmllciBub3QgdmFsaWRcIiwxMzQ6XCJCYWQgVXNlciBOYW1lIG9yIFBhc3N3b3JkXCIsMTM1OlwiTm90IGF1dGhvcml6ZWRcIiwxMzY6XCJTZXJ2ZXIgdW5hdmFpbGFibGVcIiwxMzc6XCJTZXJ2ZXIgYnVzeVwiLDEzODpcIkJhbm5lZFwiLDEzOTpcIlNlcnZlciBzaHV0dGluZyBkb3duXCIsMTQwOlwiQmFkIGF1dGhlbnRpY2F0aW9uIG1ldGhvZFwiLDE0MTpcIktlZXAgQWxpdmUgdGltZW91dFwiLDE0MjpcIlNlc3Npb24gdGFrZW4gb3ZlclwiLDE0MzpcIlRvcGljIEZpbHRlciBpbnZhbGlkXCIsMTQ0OlwiVG9waWMgTmFtZSBpbnZhbGlkXCIsMTQ1OlwiUGFja2V0IGlkZW50aWZpZXIgaW4gdXNlXCIsMTQ2OlwiUGFja2V0IElkZW50aWZpZXIgbm90IGZvdW5kXCIsMTQ3OlwiUmVjZWl2ZSBNYXhpbXVtIGV4Y2VlZGVkXCIsMTQ4OlwiVG9waWMgQWxpYXMgaW52YWxpZFwiLDE0OTpcIlBhY2tldCB0b28gbGFyZ2VcIiwxNTA6XCJNZXNzYWdlIHJhdGUgdG9vIGhpZ2hcIiwxNTE6XCJRdW90YSBleGNlZWRlZFwiLDE1MjpcIkFkbWluaXN0cmF0aXZlIGFjdGlvblwiLDE1MzpcIlBheWxvYWQgZm9ybWF0IGludmFsaWRcIiwxNTQ6XCJSZXRhaW4gbm90IHN1cHBvcnRlZFwiLDE1NTpcIlFvUyBub3Qgc3VwcG9ydGVkXCIsMTU2OlwiVXNlIGFub3RoZXIgc2VydmVyXCIsMTU3OlwiU2VydmVyIG1vdmVkXCIsMTU4OlwiU2hhcmVkIFN1YnNjcmlwdGlvbnMgbm90IHN1cHBvcnRlZFwiLDE1OTpcIkNvbm5lY3Rpb24gcmF0ZSBleGNlZWRlZFwiLDE2MDpcIk1heGltdW0gY29ubmVjdCB0aW1lXCIsMTYxOlwiU3Vic2NyaXB0aW9uIElkZW50aWZpZXJzIG5vdCBzdXBwb3J0ZWRcIiwxNjI6XCJXaWxkY2FyZCBTdWJzY3JpcHRpb25zIG5vdCBzdXBwb3J0ZWRcIn07ZnVuY3Rpb24gayhlLHQpe2xldCByO3QucHJvcGVydGllcyYmKHI9dC5wcm9wZXJ0aWVzLnRvcGljQWxpYXMpO2xldCBuPXQudG9waWMudG9TdHJpbmcoKTtpZigwPT09bi5sZW5ndGgpe2lmKHZvaWQgMD09PXIpcmV0dXJuIG5ldyBFcnJvcihcIlVucmVnaXN0ZXJlZCBUb3BpYyBBbGlhc1wiKTtpZih2b2lkIDA9PT0obj1lLnRvcGljQWxpYXNTZW5kLmdldFRvcGljQnlBbGlhcyhyKSkpcmV0dXJuIG5ldyBFcnJvcihcIlVucmVnaXN0ZXJlZCBUb3BpYyBBbGlhc1wiKTt0LnRvcGljPW59ciYmZGVsZXRlIHQucHJvcGVydGllcy50b3BpY0FsaWFzfWZ1bmN0aW9uIFMoZSx0LHIpe3koXCJzZW5kUGFja2V0IDo6IHBhY2tldDogJU9cIix0KSx5KFwic2VuZFBhY2tldCA6OiBlbWl0dGluZyBgcGFja2V0c2VuZGBcIiksZS5lbWl0KFwicGFja2V0c2VuZFwiLHQpLHkoXCJzZW5kUGFja2V0IDo6IHdyaXRpbmcgdG8gc3RyZWFtXCIpO2NvbnN0IG49bC53cml0ZVRvU3RyZWFtKHQsZS5zdHJlYW0sZS5vcHRpb25zKTt5KFwic2VuZFBhY2tldCA6OiB3cml0ZVRvU3RyZWFtIHJlc3VsdCAlc1wiLG4pLCFuJiZyPyh5KFwic2VuZFBhY2tldCA6OiBoYW5kbGUgZXZlbnRzIG9uIGBkcmFpbmAgb25jZSB0aHJvdWdoIGNhbGxiYWNrLlwiKSxlLnN0cmVhbS5vbmNlKFwiZHJhaW5cIixyKSk6ciYmKHkoXCJzZW5kUGFja2V0IDo6IGludm9raW5nIGNiXCIpLHIoKSl9ZnVuY3Rpb24gRShlLHQscixuKXt5KFwic3RvcmVBbmRTZW5kIDo6IHN0b3JlIHBhY2tldCB3aXRoIGNtZCAlcyB0byBvdXRnb2luZ1N0b3JlXCIsdC5jbWQpO2xldCBpLG89dDtpZihcInB1Ymxpc2hcIj09PW8uY21kJiYobz1wKHQpLGk9ayhlLG8pKSlyZXR1cm4gciYmcihpKTtlLm91dGdvaW5nU3RvcmUucHV0KG8sZnVuY3Rpb24oaSl7aWYoaSlyZXR1cm4gciYmcihpKTtuKCksUyhlLHQscil9KX1mdW5jdGlvbiBDKGUpe3koXCJub3AgOjpcIixlKX1mdW5jdGlvbiBUKGUsdCl7bGV0IHI7Y29uc3Qgbj10aGlzO2lmKCEodGhpcyBpbnN0YW5jZW9mIFQpKXJldHVybiBuZXcgVChlLHQpO2ZvcihyIGluIHRoaXMub3B0aW9ucz10fHx7fSx2KXZvaWQgMD09PXRoaXMub3B0aW9uc1tyXT90aGlzLm9wdGlvbnNbcl09dltyXTp0aGlzLm9wdGlvbnNbcl09dFtyXTt5KFwiTXF0dENsaWVudCA6OiBvcHRpb25zLnByb3RvY29sXCIsdC5wcm90b2NvbCkseShcIk1xdHRDbGllbnQgOjogb3B0aW9ucy5wcm90b2NvbFZlcnNpb25cIix0LnByb3RvY29sVmVyc2lvbikseShcIk1xdHRDbGllbnQgOjogb3B0aW9ucy51c2VybmFtZVwiLHQudXNlcm5hbWUpLHkoXCJNcXR0Q2xpZW50IDo6IG9wdGlvbnMua2VlcGFsaXZlXCIsdC5rZWVwYWxpdmUpLHkoXCJNcXR0Q2xpZW50IDo6IG9wdGlvbnMucmVjb25uZWN0UGVyaW9kXCIsdC5yZWNvbm5lY3RQZXJpb2QpLHkoXCJNcXR0Q2xpZW50IDo6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkXCIsdC5yZWplY3RVbmF1dGhvcml6ZWQpLHkoXCJNcXR0Q2xpZW50IDo6IG9wdGlvbnMudG9waWNBbGlhc01heGltdW1cIix0LnRvcGljQWxpYXNNYXhpbXVtKSx0aGlzLm9wdGlvbnMuY2xpZW50SWQ9XCJzdHJpbmdcIj09dHlwZW9mIHQuY2xpZW50SWQ/dC5jbGllbnRJZDpcIm1xdHRqc19cIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMiw4KSx5KFwiTXF0dENsaWVudCA6OiBjbGllbnRJZFwiLHRoaXMub3B0aW9ucy5jbGllbnRJZCksdGhpcy5vcHRpb25zLmN1c3RvbUhhbmRsZUFja3M9NT09PXQucHJvdG9jb2xWZXJzaW9uJiZ0LmN1c3RvbUhhbmRsZUFja3M/dC5jdXN0b21IYW5kbGVBY2tzOmZ1bmN0aW9uKCl7YXJndW1lbnRzWzNdKDApfSx0aGlzLnN0cmVhbUJ1aWxkZXI9ZSx0aGlzLm1lc3NhZ2VJZFByb3ZpZGVyPXZvaWQgMD09PXRoaXMub3B0aW9ucy5tZXNzYWdlSWRQcm92aWRlcj9uZXcgdTp0aGlzLm9wdGlvbnMubWVzc2FnZUlkUHJvdmlkZXIsdGhpcy5vdXRnb2luZ1N0b3JlPXQub3V0Z29pbmdTdG9yZXx8bmV3IG8sdGhpcy5pbmNvbWluZ1N0b3JlPXQuaW5jb21pbmdTdG9yZXx8bmV3IG8sdGhpcy5xdWV1ZVFvU1plcm89dm9pZCAwPT09dC5xdWV1ZVFvU1plcm98fHQucXVldWVRb1NaZXJvLHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzPXt9LHRoaXMubWVzc2FnZUlkVG9Ub3BpYz17fSx0aGlzLnBpbmdUaW1lcj1udWxsLHRoaXMuY29ubmVjdGVkPSExLHRoaXMuZGlzY29ubmVjdGluZz0hMSx0aGlzLnF1ZXVlPVtdLHRoaXMuY29ubmFja1RpbWVyPW51bGwsdGhpcy5yZWNvbm5lY3RUaW1lcj1udWxsLHRoaXMuX3N0b3JlUHJvY2Vzc2luZz0hMSx0aGlzLl9wYWNrZXRJZHNEdXJpbmdTdG9yZVByb2Nlc3Npbmc9e30sdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWU9W10sdGhpcy5vdXRnb2luZz17fSx0aGlzLl9maXJzdENvbm5lY3Rpb249ITAsdC50b3BpY0FsaWFzTWF4aW11bT4wJiYodC50b3BpY0FsaWFzTWF4aW11bT42NTUzNT95KFwiTXF0dENsaWVudCA6OiBvcHRpb25zLnRvcGljQWxpYXNNYXhpbXVtIGlzIG91dCBvZiByYW5nZVwiKTp0aGlzLnRvcGljQWxpYXNSZWN2PW5ldyBzKHQudG9waWNBbGlhc01heGltdW0pKSx0aGlzLm9uKFwiY29ubmVjdFwiLGZ1bmN0aW9uKCl7Y29uc3QgZT10aGlzLnF1ZXVlO3koXCJjb25uZWN0IDo6IHNlbmRpbmcgcXVldWVkIHBhY2tldHNcIiksZnVuY3Rpb24gdCgpe2NvbnN0IHI9ZS5zaGlmdCgpO3koXCJkZWxpdmVyIDo6IGVudHJ5ICVvXCIscik7bGV0IGk9bnVsbDtpZighcilyZXR1cm4gdm9pZCBuLl9yZXN1YnNjcmliZSgpO2k9ci5wYWNrZXQseShcImRlbGl2ZXIgOjogY2FsbCBfc2VuZFBhY2tldCBmb3IgJW9cIixpKTtsZXQgbz0hMDtpLm1lc3NhZ2VJZCYmMCE9PWkubWVzc2FnZUlkJiYobi5tZXNzYWdlSWRQcm92aWRlci5yZWdpc3RlcihpLm1lc3NhZ2VJZCl8fChvPSExKSksbz9uLl9zZW5kUGFja2V0KGksZnVuY3Rpb24oZSl7ci5jYiYmci5jYihlKSx0KCl9KTooeShcIm1lc3NhZ2VJZDogJWQgaGFzIGFscmVhZHkgdXNlZC4gVGhlIG1lc3NhZ2UgaXMgc2tpcHBlZCBhbmQgcmVtb3ZlZC5cIixpLm1lc3NhZ2VJZCksdCgpKX0oKX0pLHRoaXMub24oXCJjbG9zZVwiLGZ1bmN0aW9uKCl7eShcImNsb3NlIDo6IGNvbm5lY3RlZCBzZXQgdG8gYGZhbHNlYFwiKSx0aGlzLmNvbm5lY3RlZD0hMSx5KFwiY2xvc2UgOjogY2xlYXJpbmcgY29ubmFja1RpbWVyXCIpLGNsZWFyVGltZW91dCh0aGlzLmNvbm5hY2tUaW1lcikseShcImNsb3NlIDo6IGNsZWFyaW5nIHBpbmcgdGltZXJcIiksbnVsbCE9PW4ucGluZ1RpbWVyJiYobi5waW5nVGltZXIuY2xlYXIoKSxuLnBpbmdUaW1lcj1udWxsKSx0aGlzLnRvcGljQWxpYXNSZWN2JiZ0aGlzLnRvcGljQWxpYXNSZWN2LmNsZWFyKCkseShcImNsb3NlIDo6IGNhbGxpbmcgX3NldHVwUmVjb25uZWN0XCIpLHRoaXMuX3NldHVwUmVjb25uZWN0KCl9KSxpLmNhbGwodGhpcykseShcIk1xdHRDbGllbnQgOjogc2V0dGluZyB1cCBzdHJlYW1cIiksdGhpcy5fc2V0dXBTdHJlYW0oKX1oKFQsaSksVC5wcm90b3R5cGUuX3NldHVwU3RyZWFtPWZ1bmN0aW9uKCl7Y29uc3QgZT10aGlzLHQ9bmV3IGMscj1sLnBhcnNlcih0aGlzLm9wdGlvbnMpO2xldCBuPW51bGw7Y29uc3QgaT1bXTtmdW5jdGlvbiBvKCl7aWYoaS5sZW5ndGgpYihzKTtlbHNle2NvbnN0IGU9bjtuPW51bGwsZSgpfX1mdW5jdGlvbiBzKCl7eShcIndvcmsgOjogZ2V0dGluZyBuZXh0IHBhY2tldCBpbiBxdWV1ZVwiKTtjb25zdCB0PWkuc2hpZnQoKTtpZih0KXkoXCJ3b3JrIDo6IHBhY2tldCBwdWxsZWQgZnJvbSBxdWV1ZVwiKSxlLl9oYW5kbGVQYWNrZXQodCxvKTtlbHNle3koXCJ3b3JrIDo6IG5vIHBhY2tldHMgaW4gcXVldWVcIik7Y29uc3QgZT1uO249bnVsbCx5KFwid29yayA6OiBkb25lIGZsYWcgaXMgJXNcIiwhIWUpLGUmJmUoKX19eShcIl9zZXR1cFN0cmVhbSA6OiBjYWxsaW5nIG1ldGhvZCB0byBjbGVhciByZWNvbm5lY3RcIiksdGhpcy5fY2xlYXJSZWNvbm5lY3QoKSx5KFwiX3NldHVwU3RyZWFtIDo6IHVzaW5nIHN0cmVhbUJ1aWxkZXIgcHJvdmlkZWQgdG8gY2xpZW50IHRvIGNyZWF0ZSBzdHJlYW1cIiksdGhpcy5zdHJlYW09dGhpcy5zdHJlYW1CdWlsZGVyKHRoaXMpLHIub24oXCJwYWNrZXRcIixmdW5jdGlvbihlKXt5KFwicGFyc2VyIDo6IG9uIHBhY2tldCBwdXNoIHRvIHBhY2tldHMgYXJyYXkuXCIpLGkucHVzaChlKX0pLHQuX3dyaXRlPWZ1bmN0aW9uKGUsdCxpKXtuPWkseShcIndyaXRhYmxlIHN0cmVhbSA6OiBwYXJzaW5nIGJ1ZmZlclwiKSxyLnBhcnNlKGUpLHMoKX0seShcIl9zZXR1cFN0cmVhbSA6OiBwaXBlIHN0cmVhbSB0byB3cml0YWJsZSBzdHJlYW1cIiksdGhpcy5zdHJlYW0ucGlwZSh0KSx0aGlzLnN0cmVhbS5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7eShcInN0cmVhbUVycm9ySGFuZGxlciA6OiBlcnJvclwiLHQubWVzc2FnZSksdy5pbmNsdWRlcyh0LmNvZGUpPyh5KFwic3RyZWFtRXJyb3JIYW5kbGVyIDo6IGVtaXR0aW5nIGVycm9yXCIpLGUuZW1pdChcImVycm9yXCIsdCkpOkModCl9KSx0aGlzLnN0cmVhbS5vbihcImNsb3NlXCIsZnVuY3Rpb24oKXt2YXIgdDt5KFwiKCVzKXN0cmVhbSA6OiBvbiBjbG9zZVwiLGUub3B0aW9ucy5jbGllbnRJZCksKHQ9ZS5vdXRnb2luZykmJih5KFwiZmx1c2hWb2xhdGlsZSA6OiBkZWxldGluZyB2b2xhdGlsZSBtZXNzYWdlcyBmcm9tIHRoZSBxdWV1ZSBhbmQgc2V0dGluZyB0aGVpciBjYWxsYmFja3MgYXMgZXJyb3IgZnVuY3Rpb25cIiksT2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihlKXt0W2VdLnZvbGF0aWxlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0W2VdLmNiJiYodFtlXS5jYihuZXcgRXJyb3IoXCJDb25uZWN0aW9uIGNsb3NlZFwiKSksZGVsZXRlIHRbZV0pfSkpLHkoXCJzdHJlYW06IGVtaXQgY2xvc2UgdG8gTXF0dENsaWVudFwiKSxlLmVtaXQoXCJjbG9zZVwiKX0pLHkoXCJfc2V0dXBTdHJlYW06IHNlbmRpbmcgcGFja2V0IGBjb25uZWN0YFwiKTtjb25zdCBhPU9iamVjdC5jcmVhdGUodGhpcy5vcHRpb25zKTtpZihhLmNtZD1cImNvbm5lY3RcIix0aGlzLnRvcGljQWxpYXNSZWN2JiYoYS5wcm9wZXJ0aWVzfHwoYS5wcm9wZXJ0aWVzPXt9KSx0aGlzLnRvcGljQWxpYXNSZWN2JiYoYS5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtPXRoaXMudG9waWNBbGlhc1JlY3YubWF4KSksUyh0aGlzLGEpLHIub24oXCJlcnJvclwiLHRoaXMuZW1pdC5iaW5kKHRoaXMsXCJlcnJvclwiKSksdGhpcy5vcHRpb25zLnByb3BlcnRpZXMpe2lmKCF0aGlzLm9wdGlvbnMucHJvcGVydGllcy5hdXRoZW50aWNhdGlvbk1ldGhvZCYmdGhpcy5vcHRpb25zLnByb3BlcnRpZXMuYXV0aGVudGljYXRpb25EYXRhKXJldHVybiBlLmVuZCgoKT0+dGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJQYWNrZXQgaGFzIG5vIEF1dGhlbnRpY2F0aW9uIE1ldGhvZFwiKSkpLHRoaXM7aWYodGhpcy5vcHRpb25zLnByb3BlcnRpZXMuYXV0aGVudGljYXRpb25NZXRob2QmJnRoaXMub3B0aW9ucy5hdXRoUGFja2V0JiZcIm9iamVjdFwiPT10eXBlb2YgdGhpcy5vcHRpb25zLmF1dGhQYWNrZXQpe1ModGhpcyxnKHtjbWQ6XCJhdXRoXCIscmVhc29uQ29kZTowfSx0aGlzLm9wdGlvbnMuYXV0aFBhY2tldCkpfX10aGlzLnN0cmVhbS5zZXRNYXhMaXN0ZW5lcnMoMWUzKSxjbGVhclRpbWVvdXQodGhpcy5jb25uYWNrVGltZXIpLHRoaXMuY29ubmFja1RpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt5KFwiISFjb25uZWN0VGltZW91dCBoaXQhISBDYWxsaW5nIF9jbGVhblVwIHdpdGggZm9yY2UgYHRydWVgXCIpLGUuX2NsZWFuVXAoITApfSx0aGlzLm9wdGlvbnMuY29ubmVjdFRpbWVvdXQpfSxULnByb3RvdHlwZS5faGFuZGxlUGFja2V0PWZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj10aGlzLm9wdGlvbnM7aWYoNT09PXIucHJvdG9jb2xWZXJzaW9uJiZyLnByb3BlcnRpZXMmJnIucHJvcGVydGllcy5tYXhpbXVtUGFja2V0U2l6ZSYmci5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplPGUubGVuZ3RoKXJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcImV4Y2VlZGluZyBwYWNrZXRzIHNpemUgXCIrZS5jbWQpKSx0aGlzLmVuZCh7cmVhc29uQ29kZToxNDkscHJvcGVydGllczp7cmVhc29uU3RyaW5nOlwiTWF4aW11bSBwYWNrZXQgc2l6ZSB3YXMgZXhjZWVkZWRcIn19KSx0aGlzO3N3aXRjaCh5KFwiX2hhbmRsZVBhY2tldCA6OiBlbWl0dGluZyBwYWNrZXRyZWNlaXZlXCIpLHRoaXMuZW1pdChcInBhY2tldHJlY2VpdmVcIixlKSxlLmNtZCl7Y2FzZVwicHVibGlzaFwiOnRoaXMuX2hhbmRsZVB1Ymxpc2goZSx0KTticmVhaztjYXNlXCJwdWJhY2tcIjpjYXNlXCJwdWJyZWNcIjpjYXNlXCJwdWJjb21wXCI6Y2FzZVwic3ViYWNrXCI6Y2FzZVwidW5zdWJhY2tcIjp0aGlzLl9oYW5kbGVBY2soZSksdCgpO2JyZWFrO2Nhc2VcInB1YnJlbFwiOnRoaXMuX2hhbmRsZVB1YnJlbChlLHQpO2JyZWFrO2Nhc2VcImNvbm5hY2tcIjp0aGlzLl9oYW5kbGVDb25uYWNrKGUpLHQoKTticmVhaztjYXNlXCJhdXRoXCI6dGhpcy5faGFuZGxlQXV0aChlKSx0KCk7YnJlYWs7Y2FzZVwicGluZ3Jlc3BcIjp0aGlzLl9oYW5kbGVQaW5ncmVzcChlKSx0KCk7YnJlYWs7Y2FzZVwiZGlzY29ubmVjdFwiOnRoaXMuX2hhbmRsZURpc2Nvbm5lY3QoZSksdCgpfX0sVC5wcm90b3R5cGUuX2NoZWNrRGlzY29ubmVjdGluZz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5kaXNjb25uZWN0aW5nJiYoZT9lKG5ldyBFcnJvcihcImNsaWVudCBkaXNjb25uZWN0aW5nXCIpKTp0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcImNsaWVudCBkaXNjb25uZWN0aW5nXCIpKSksdGhpcy5kaXNjb25uZWN0aW5nfSxULnByb3RvdHlwZS5wdWJsaXNoPWZ1bmN0aW9uKGUsdCxyLG4pe3koXCJwdWJsaXNoIDo6IG1lc3NhZ2UgYCVzYCB0byB0b3BpYyBgJXNgXCIsdCxlKTtjb25zdCBpPXRoaXMub3B0aW9ucztcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYobj1yLHI9bnVsbCk7aWYocj1nKHtxb3M6MCxyZXRhaW46ITEsZHVwOiExfSxyKSx0aGlzLl9jaGVja0Rpc2Nvbm5lY3RpbmcobikpcmV0dXJuIHRoaXM7Y29uc3Qgbz10aGlzLHM9ZnVuY3Rpb24oKXtsZXQgcz0wO2lmKCgxPT09ci5xb3N8fDI9PT1yLnFvcykmJm51bGw9PT0ocz1vLl9uZXh0SWQoKSkpcmV0dXJuIHkoXCJObyBtZXNzYWdlSWQgbGVmdFwiKSwhMTtjb25zdCBhPXtjbWQ6XCJwdWJsaXNoXCIsdG9waWM6ZSxwYXlsb2FkOnQscW9zOnIucW9zLHJldGFpbjpyLnJldGFpbixtZXNzYWdlSWQ6cyxkdXA6ci5kdXB9O3N3aXRjaCg1PT09aS5wcm90b2NvbFZlcnNpb24mJihhLnByb3BlcnRpZXM9ci5wcm9wZXJ0aWVzKSx5KFwicHVibGlzaCA6OiBxb3NcIixyLnFvcyksci5xb3Mpe2Nhc2UgMTpjYXNlIDI6by5vdXRnb2luZ1thLm1lc3NhZ2VJZF09e3ZvbGF0aWxlOiExLGNiOm58fEN9LHkoXCJNcXR0Q2xpZW50OnB1Ymxpc2g6IHBhY2tldCBjbWQ6ICVzXCIsYS5jbWQpLG8uX3NlbmRQYWNrZXQoYSx2b2lkIDAsci5jYlN0b3JlUHV0KTticmVhaztkZWZhdWx0OnkoXCJNcXR0Q2xpZW50OnB1Ymxpc2g6IHBhY2tldCBjbWQ6ICVzXCIsYS5jbWQpLG8uX3NlbmRQYWNrZXQoYSxuLHIuY2JTdG9yZVB1dCl9cmV0dXJuITB9O3JldHVybih0aGlzLl9zdG9yZVByb2Nlc3Npbmd8fHRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLmxlbmd0aD4wfHwhcygpKSYmdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUucHVzaCh7aW52b2tlOnMsY2JTdG9yZVB1dDpyLmNiU3RvcmVQdXQsY2FsbGJhY2s6bn0pLHRoaXN9LFQucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbigpe2NvbnN0IGU9dGhpcyx0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtmb3IobGV0IGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO2NvbnN0IHI9W107bGV0IG49dC5zaGlmdCgpO2NvbnN0IGk9bi5yZXN1YnNjcmliZTtsZXQgbz10LnBvcCgpfHxDLHM9dC5wb3AoKTtjb25zdCBhPXRoaXMub3B0aW9ucy5wcm90b2NvbFZlcnNpb247ZGVsZXRlIG4ucmVzdWJzY3JpYmUsXCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPVtuXSksXCJmdW5jdGlvblwiIT10eXBlb2YgbyYmKHM9byxvPUMpO2NvbnN0IGw9ZC52YWxpZGF0ZVRvcGljcyhuKTtpZihudWxsIT09bClyZXR1cm4gbShvLG5ldyBFcnJvcihcIkludmFsaWQgdG9waWMgXCIrbCkpLHRoaXM7aWYodGhpcy5fY2hlY2tEaXNjb25uZWN0aW5nKG8pKXJldHVybiB5KFwic3Vic2NyaWJlOiBkaXNjY29uZWN0aW5nIHRydWVcIiksdGhpcztjb25zdCB1PXtxb3M6MH07aWYoNT09PWEmJih1Lm5sPSExLHUucmFwPSExLHUucmg9MCkscz1nKHUscyksQXJyYXkuaXNBcnJheShuKT9uLmZvckVhY2goZnVuY3Rpb24odCl7aWYoeShcInN1YnNjcmliZTogYXJyYXkgdG9waWMgJXNcIix0KSwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUuX3Jlc3Vic2NyaWJlVG9waWNzLHQpfHxlLl9yZXN1YnNjcmliZVRvcGljc1t0XS5xb3M8cy5xb3N8fGkpe2NvbnN0IGU9e3RvcGljOnQscW9zOnMucW9zfTs1PT09YSYmKGUubmw9cy5ubCxlLnJhcD1zLnJhcCxlLnJoPXMucmgsZS5wcm9wZXJ0aWVzPXMucHJvcGVydGllcykseShcInN1YnNjcmliZTogcHVzaGluZyB0b3BpYyBgJXNgIGFuZCBxb3MgYCVzYCB0byBzdWJzIGxpc3RcIixlLnRvcGljLGUucW9zKSxyLnB1c2goZSl9fSk6T2JqZWN0LmtleXMobikuZm9yRWFjaChmdW5jdGlvbih0KXtpZih5KFwic3Vic2NyaWJlOiBvYmplY3QgdG9waWMgJXNcIix0KSwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUuX3Jlc3Vic2NyaWJlVG9waWNzLHQpfHxlLl9yZXN1YnNjcmliZVRvcGljc1t0XS5xb3M8blt0XS5xb3N8fGkpe2NvbnN0IGU9e3RvcGljOnQscW9zOm5bdF0ucW9zfTs1PT09YSYmKGUubmw9blt0XS5ubCxlLnJhcD1uW3RdLnJhcCxlLnJoPW5bdF0ucmgsZS5wcm9wZXJ0aWVzPXMucHJvcGVydGllcykseShcInN1YnNjcmliZTogcHVzaGluZyBgJXNgIHRvIHN1YnMgbGlzdFwiLGUpLHIucHVzaChlKX19KSwhci5sZW5ndGgpcmV0dXJuIG8obnVsbCxbXSksdGhpcztjb25zdCBjPWZ1bmN0aW9uKCl7Y29uc3QgdD1lLl9uZXh0SWQoKTtpZihudWxsPT09dClyZXR1cm4geShcIk5vIG1lc3NhZ2VJZCBsZWZ0XCIpLCExO2NvbnN0IG49e2NtZDpcInN1YnNjcmliZVwiLHN1YnNjcmlwdGlvbnM6cixxb3M6MSxyZXRhaW46ITEsZHVwOiExLG1lc3NhZ2VJZDp0fTtpZihzLnByb3BlcnRpZXMmJihuLnByb3BlcnRpZXM9cy5wcm9wZXJ0aWVzKSxlLm9wdGlvbnMucmVzdWJzY3JpYmUpe3koXCJzdWJzY3JpYmUgOjogcmVzdWJzY3JpYmUgdHJ1ZVwiKTtjb25zdCB0PVtdO3IuZm9yRWFjaChmdW5jdGlvbihyKXtpZihlLm9wdGlvbnMucmVjb25uZWN0UGVyaW9kPjApe2NvbnN0IG49e3FvczpyLnFvc307NT09PWEmJihuLm5sPXIubmx8fCExLG4ucmFwPXIucmFwfHwhMSxuLnJoPXIucmh8fDAsbi5wcm9wZXJ0aWVzPXIucHJvcGVydGllcyksZS5fcmVzdWJzY3JpYmVUb3BpY3Nbci50b3BpY109bix0LnB1c2goci50b3BpYyl9fSksZS5tZXNzYWdlSWRUb1RvcGljW24ubWVzc2FnZUlkXT10fXJldHVybiBlLm91dGdvaW5nW24ubWVzc2FnZUlkXT17dm9sYXRpbGU6ITAsY2I6ZnVuY3Rpb24oZSx0KXtpZighZSl7Y29uc3QgZT10LmdyYW50ZWQ7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kz0xKXJbdF0ucW9zPWVbdF19byhlLHIpfX0seShcInN1YnNjcmliZSA6OiBjYWxsIF9zZW5kUGFja2V0XCIpLGUuX3NlbmRQYWNrZXQobiksITB9O3JldHVybih0aGlzLl9zdG9yZVByb2Nlc3Npbmd8fHRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLmxlbmd0aD4wfHwhYygpKSYmdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUucHVzaCh7aW52b2tlOmMsY2FsbGJhY2s6b30pLHRoaXN9LFQucHJvdG90eXBlLnVuc3Vic2NyaWJlPWZ1bmN0aW9uKCl7Y29uc3QgZT10aGlzLHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO2ZvcihsZXQgZT0wO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspdFtlXT1hcmd1bWVudHNbZV07bGV0IHI9dC5zaGlmdCgpLG49dC5wb3AoKXx8QyxpPXQucG9wKCk7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtyXSksXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmKGk9bixuPUMpO2NvbnN0IG89ZC52YWxpZGF0ZVRvcGljcyhyKTtpZihudWxsIT09bylyZXR1cm4gbShuLG5ldyBFcnJvcihcIkludmFsaWQgdG9waWMgXCIrbykpLHRoaXM7aWYoZS5fY2hlY2tEaXNjb25uZWN0aW5nKG4pKXJldHVybiB0aGlzO2NvbnN0IHM9ZnVuY3Rpb24oKXtjb25zdCB0PWUuX25leHRJZCgpO2lmKG51bGw9PT10KXJldHVybiB5KFwiTm8gbWVzc2FnZUlkIGxlZnRcIiksITE7Y29uc3Qgbz17Y21kOlwidW5zdWJzY3JpYmVcIixxb3M6MSxtZXNzYWdlSWQ6dH07cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHI/by51bnN1YnNjcmlwdGlvbnM9W3JdOkFycmF5LmlzQXJyYXkocikmJihvLnVuc3Vic2NyaXB0aW9ucz1yKSxlLm9wdGlvbnMucmVzdWJzY3JpYmUmJm8udW5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24odCl7ZGVsZXRlIGUuX3Jlc3Vic2NyaWJlVG9waWNzW3RdfSksXCJvYmplY3RcIj09dHlwZW9mIGkmJmkucHJvcGVydGllcyYmKG8ucHJvcGVydGllcz1pLnByb3BlcnRpZXMpLGUub3V0Z29pbmdbby5tZXNzYWdlSWRdPXt2b2xhdGlsZTohMCxjYjpufSx5KFwidW5zdWJzY3JpYmU6IGNhbGwgX3NlbmRQYWNrZXRcIiksZS5fc2VuZFBhY2tldChvKSwhMH07cmV0dXJuKHRoaXMuX3N0b3JlUHJvY2Vzc2luZ3x8dGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUubGVuZ3RoPjB8fCFzKCkpJiZ0aGlzLl9zdG9yZVByb2Nlc3NpbmdRdWV1ZS5wdXNoKHtpbnZva2U6cyxjYWxsYmFjazpufSksdGhpc30sVC5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUsdCxyKXtjb25zdCBuPXRoaXM7ZnVuY3Rpb24gaSgpe3koXCJlbmQgOjogKCVzKSA6OiBmaW5pc2ggOjogY2FsbGluZyBfY2xlYW5VcCB3aXRoIGZvcmNlICVzXCIsbi5vcHRpb25zLmNsaWVudElkLGUpLG4uX2NsZWFuVXAoZSwoKT0+e3koXCJlbmQgOjogZmluaXNoIDo6IGNhbGxpbmcgcHJvY2Vzcy5uZXh0VGljayBvbiBjbG9zZVN0b3Jlc1wiKSxiKGZ1bmN0aW9uKCl7eShcImVuZCA6OiBjbG9zZVN0b3JlczogY2xvc2luZyBpbmNvbWluZyBhbmQgb3V0Z29pbmcgc3RvcmVzXCIpLG4uZGlzY29ubmVjdGVkPSEwLG4uaW5jb21pbmdTdG9yZS5jbG9zZShmdW5jdGlvbihlKXtuLm91dGdvaW5nU3RvcmUuY2xvc2UoZnVuY3Rpb24odCl7aWYoeShcImVuZCA6OiBjbG9zZVN0b3JlczogZW1pdHRpbmcgZW5kXCIpLG4uZW1pdChcImVuZFwiKSxyKXtjb25zdCBuPWV8fHQ7eShcImVuZCA6OiBjbG9zZVN0b3JlczogaW52b2tpbmcgY2FsbGJhY2sgd2l0aCBhcmdzXCIpLHIobil9fSl9KSxuLl9kZWZlcnJlZFJlY29ubmVjdCYmbi5fZGVmZXJyZWRSZWNvbm5lY3QoKX0uYmluZChuKSl9LHQpfXJldHVybiB5KFwiZW5kIDo6ICglcylcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLG51bGwhPWUmJlwiYm9vbGVhblwiPT10eXBlb2YgZXx8KHI9dHx8Qyx0PWUsZT0hMSxcIm9iamVjdFwiIT10eXBlb2YgdCYmKHI9dCx0PW51bGwsXCJmdW5jdGlvblwiIT10eXBlb2YgciYmKHI9QykpKSxcIm9iamVjdFwiIT10eXBlb2YgdCYmKHI9dCx0PW51bGwpLHkoXCJlbmQgOjogY2I/ICVzXCIsISFyKSxyPXJ8fEMsdGhpcy5kaXNjb25uZWN0aW5nPyhyKCksdGhpcyk6KHRoaXMuX2NsZWFyUmVjb25uZWN0KCksdGhpcy5kaXNjb25uZWN0aW5nPSEwLCFlJiZPYmplY3Qua2V5cyh0aGlzLm91dGdvaW5nKS5sZW5ndGg+MD8oeShcImVuZCA6OiAoJXMpIDo6IGNhbGxpbmcgZmluaXNoIGluIDEwbXMgb25jZSBvdXRnb2luZyBpcyBlbXB0eVwiLG4ub3B0aW9ucy5jbGllbnRJZCksdGhpcy5vbmNlKFwib3V0Z29pbmdFbXB0eVwiLHNldFRpbWVvdXQuYmluZChudWxsLGksMTApKSk6KHkoXCJlbmQgOjogKCVzKSA6OiBpbW1lZGlhdGVseSBjYWxsaW5nIGZpbmlzaFwiLG4ub3B0aW9ucy5jbGllbnRJZCksaSgpKSx0aGlzKX0sVC5wcm90b3R5cGUucmVtb3ZlT3V0Z29pbmdNZXNzYWdlPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy5vdXRnb2luZ1tlXT90aGlzLm91dGdvaW5nW2VdLmNiOm51bGw7cmV0dXJuIGRlbGV0ZSB0aGlzLm91dGdvaW5nW2VdLHRoaXMub3V0Z29pbmdTdG9yZS5kZWwoe21lc3NhZ2VJZDplfSxmdW5jdGlvbigpe3QobmV3IEVycm9yKFwiTWVzc2FnZSByZW1vdmVkXCIpKX0pLHRoaXN9LFQucHJvdG90eXBlLnJlY29ubmVjdD1mdW5jdGlvbihlKXt5KFwiY2xpZW50IHJlY29ubmVjdFwiKTtjb25zdCB0PXRoaXMscj1mdW5jdGlvbigpe2U/KHQub3B0aW9ucy5pbmNvbWluZ1N0b3JlPWUuaW5jb21pbmdTdG9yZSx0Lm9wdGlvbnMub3V0Z29pbmdTdG9yZT1lLm91dGdvaW5nU3RvcmUpOih0Lm9wdGlvbnMuaW5jb21pbmdTdG9yZT1udWxsLHQub3B0aW9ucy5vdXRnb2luZ1N0b3JlPW51bGwpLHQuaW5jb21pbmdTdG9yZT10Lm9wdGlvbnMuaW5jb21pbmdTdG9yZXx8bmV3IG8sdC5vdXRnb2luZ1N0b3JlPXQub3B0aW9ucy5vdXRnb2luZ1N0b3JlfHxuZXcgbyx0LmRpc2Nvbm5lY3Rpbmc9ITEsdC5kaXNjb25uZWN0ZWQ9ITEsdC5fZGVmZXJyZWRSZWNvbm5lY3Q9bnVsbCx0Ll9yZWNvbm5lY3QoKX07cmV0dXJuIHRoaXMuZGlzY29ubmVjdGluZyYmIXRoaXMuZGlzY29ubmVjdGVkP3RoaXMuX2RlZmVycmVkUmVjb25uZWN0PXI6cigpLHRoaXN9LFQucHJvdG90eXBlLl9yZWNvbm5lY3Q9ZnVuY3Rpb24oKXt5KFwiX3JlY29ubmVjdDogZW1pdHRpbmcgcmVjb25uZWN0IHRvIGNsaWVudFwiKSx0aGlzLmVtaXQoXCJyZWNvbm5lY3RcIiksdGhpcy5jb25uZWN0ZWQ/KHRoaXMuZW5kKCgpPT57dGhpcy5fc2V0dXBTdHJlYW0oKX0pLHkoXCJjbGllbnQgYWxyZWFkeSBjb25uZWN0ZWQuIGRpc2Nvbm5lY3RpbmcgZmlyc3QuXCIpKTooeShcIl9yZWNvbm5lY3Q6IGNhbGxpbmcgX3NldHVwU3RyZWFtXCIpLHRoaXMuX3NldHVwU3RyZWFtKCkpfSxULnByb3RvdHlwZS5fc2V0dXBSZWNvbm5lY3Q9ZnVuY3Rpb24oKXtjb25zdCBlPXRoaXM7IWUuZGlzY29ubmVjdGluZyYmIWUucmVjb25uZWN0VGltZXImJmUub3B0aW9ucy5yZWNvbm5lY3RQZXJpb2Q+MD8odGhpcy5yZWNvbm5lY3Rpbmd8fCh5KFwiX3NldHVwUmVjb25uZWN0IDo6IGVtaXQgYG9mZmxpbmVgIHN0YXRlXCIpLHRoaXMuZW1pdChcIm9mZmxpbmVcIikseShcIl9zZXR1cFJlY29ubmVjdCA6OiBzZXQgYHJlY29ubmVjdGluZ2AgdG8gYHRydWVgXCIpLHRoaXMucmVjb25uZWN0aW5nPSEwKSx5KFwiX3NldHVwUmVjb25uZWN0IDo6IHNldHRpbmcgcmVjb25uZWN0VGltZXIgZm9yICVkIG1zXCIsZS5vcHRpb25zLnJlY29ubmVjdFBlcmlvZCksZS5yZWNvbm5lY3RUaW1lcj1zZXRJbnRlcnZhbChmdW5jdGlvbigpe3koXCJyZWNvbm5lY3RUaW1lciA6OiByZWNvbm5lY3QgdHJpZ2dlcmVkIVwiKSxlLl9yZWNvbm5lY3QoKX0sZS5vcHRpb25zLnJlY29ubmVjdFBlcmlvZCkpOnkoXCJfc2V0dXBSZWNvbm5lY3QgOjogZG9pbmcgbm90aGluZy4uLlwiKX0sVC5wcm90b3R5cGUuX2NsZWFyUmVjb25uZWN0PWZ1bmN0aW9uKCl7eShcIl9jbGVhclJlY29ubmVjdCA6IGNsZWFyaW5nIHJlY29ubmVjdCB0aW1lclwiKSx0aGlzLnJlY29ubmVjdFRpbWVyJiYoY2xlYXJJbnRlcnZhbCh0aGlzLnJlY29ubmVjdFRpbWVyKSx0aGlzLnJlY29ubmVjdFRpbWVyPW51bGwpfSxULnByb3RvdHlwZS5fY2xlYW5VcD1mdW5jdGlvbihlLHQpe2NvbnN0IHI9YXJndW1lbnRzWzJdO2lmKHQmJih5KFwiX2NsZWFuVXAgOjogZG9uZSBjYWxsYmFjayBwcm92aWRlZCBmb3Igb24gc3RyZWFtIGNsb3NlXCIpLHRoaXMuc3RyZWFtLm9uKFwiY2xvc2VcIix0KSkseShcIl9jbGVhblVwIDo6IGZvcmNlZD8gJXNcIixlKSxlKTA9PT10aGlzLm9wdGlvbnMucmVjb25uZWN0UGVyaW9kJiZ0aGlzLm9wdGlvbnMuY2xlYW4mJihuPXRoaXMub3V0Z29pbmcpJiYoeShcImZsdXNoOiBxdWV1ZSBleGlzdHM/ICViXCIsISFuKSxPYmplY3Qua2V5cyhuKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIG5bZV0uY2ImJihuW2VdLmNiKG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gY2xvc2VkXCIpKSxkZWxldGUgbltlXSl9KSkseShcIl9jbGVhblVwIDo6ICglcykgOjogZGVzdHJveWluZyBzdHJlYW1cIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMuc3RyZWFtLmRlc3Ryb3koKTtlbHNle2NvbnN0IGU9Zyh7Y21kOlwiZGlzY29ubmVjdFwifSxyKTt5KFwiX2NsZWFuVXAgOjogKCVzKSA6OiBjYWxsIF9zZW5kUGFja2V0IHdpdGggZGlzY29ubmVjdCBwYWNrZXRcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMuX3NlbmRQYWNrZXQoZSxtLmJpbmQobnVsbCx0aGlzLnN0cmVhbS5lbmQuYmluZCh0aGlzLnN0cmVhbSkpKX12YXIgbjt0aGlzLmRpc2Nvbm5lY3Rpbmd8fCh5KFwiX2NsZWFuVXAgOjogY2xpZW50IG5vdCBkaXNjb25uZWN0aW5nLiBDbGVhcmluZyBhbmQgcmVzZXR0aW5nIHJlY29ubmVjdC5cIiksdGhpcy5fY2xlYXJSZWNvbm5lY3QoKSx0aGlzLl9zZXR1cFJlY29ubmVjdCgpKSxudWxsIT09dGhpcy5waW5nVGltZXImJih5KFwiX2NsZWFuVXAgOjogY2xlYXJpbmcgcGluZ1RpbWVyXCIpLHRoaXMucGluZ1RpbWVyLmNsZWFyKCksdGhpcy5waW5nVGltZXI9bnVsbCksdCYmIXRoaXMuY29ubmVjdGVkJiYoeShcIl9jbGVhblVwIDo6ICglcykgOjogcmVtb3Zpbmcgc3RyZWFtIGBkb25lYCBjYWxsYmFjayBgY2xvc2VgIGxpc3RlbmVyXCIsdGhpcy5vcHRpb25zLmNsaWVudElkKSx0aGlzLnN0cmVhbS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsdCksdCgpKX0sVC5wcm90b3R5cGUuX3NlbmRQYWNrZXQ9ZnVuY3Rpb24oZSx0LHIpe3koXCJfc2VuZFBhY2tldCA6OiAoJXMpIDo6ICBzdGFydFwiLHRoaXMub3B0aW9ucy5jbGllbnRJZCkscj1yfHxDLHQ9dHx8Qztjb25zdCBuPWZ1bmN0aW9uKGUsdCl7aWYoNT09PWUub3B0aW9ucy5wcm90b2NvbFZlcnNpb24mJlwicHVibGlzaFwiPT09dC5jbWQpe2xldCByO3QucHJvcGVydGllcyYmKHI9dC5wcm9wZXJ0aWVzLnRvcGljQWxpYXMpO2NvbnN0IG49dC50b3BpYy50b1N0cmluZygpO2lmKGUudG9waWNBbGlhc1NlbmQpaWYocil7aWYoMCE9PW4ubGVuZ3RoJiYoeShcImFwcGx5VG9waWNBbGlhcyA6OiByZWdpc3RlciB0b3BpYzogJXMgLSBhbGlhczogJWRcIixuLHIpLCFlLnRvcGljQWxpYXNTZW5kLnB1dChuLHIpKSlyZXR1cm4geShcImFwcGx5VG9waWNBbGlhcyA6OiBlcnJvciBvdXQgb2YgcmFuZ2UuIHRvcGljOiAlcyAtIGFsaWFzOiAlZFwiLG4sciksbmV3IEVycm9yKFwiU2VuZGluZyBUb3BpYyBBbGlhcyBvdXQgb2YgcmFuZ2VcIil9ZWxzZSAwIT09bi5sZW5ndGgmJihlLm9wdGlvbnMuYXV0b0Fzc2lnblRvcGljQWxpYXM/KHI9ZS50b3BpY0FsaWFzU2VuZC5nZXRBbGlhc0J5VG9waWMobikpPyh0LnRvcGljPVwiXCIsdC5wcm9wZXJ0aWVzPXsuLi50LnByb3BlcnRpZXMsdG9waWNBbGlhczpyfSx5KFwiYXBwbHlUb3BpY0FsaWFzIDo6IGF1dG8gYXNzaWduKHVzZSkgdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIsbixyKSk6KHI9ZS50b3BpY0FsaWFzU2VuZC5nZXRMcnVBbGlhcygpLGUudG9waWNBbGlhc1NlbmQucHV0KG4sciksdC5wcm9wZXJ0aWVzPXsuLi50LnByb3BlcnRpZXMsdG9waWNBbGlhczpyfSx5KFwiYXBwbHlUb3BpY0FsaWFzIDo6IGF1dG8gYXNzaWduIHRvcGljOiAlcyAtIGFsaWFzOiAlZFwiLG4scikpOmUub3B0aW9ucy5hdXRvVXNlVG9waWNBbGlhcyYmKHI9ZS50b3BpY0FsaWFzU2VuZC5nZXRBbGlhc0J5VG9waWMobikpJiYodC50b3BpYz1cIlwiLHQucHJvcGVydGllcz17Li4udC5wcm9wZXJ0aWVzLHRvcGljQWxpYXM6cn0seShcImFwcGx5VG9waWNBbGlhcyA6OiBhdXRvIHVzZSB0b3BpYzogJXMgLSBhbGlhczogJWRcIixuLHIpKSk7ZWxzZSBpZihyKXJldHVybiB5KFwiYXBwbHlUb3BpY0FsaWFzIDo6IGVycm9yIG91dCBvZiByYW5nZS4gdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIsbixyKSxuZXcgRXJyb3IoXCJTZW5kaW5nIFRvcGljIEFsaWFzIG91dCBvZiByYW5nZVwiKX19KHRoaXMsZSk7aWYobil0KG4pO2Vsc2V7aWYoIXRoaXMuY29ubmVjdGVkKXJldHVyblwiYXV0aFwiPT09ZS5jbWQ/KHRoaXMuX3NoaWZ0UGluZ0ludGVydmFsKCksdm9pZCBTKHRoaXMsZSx0KSk6KHkoXCJfc2VuZFBhY2tldCA6OiBjbGllbnQgbm90IGNvbm5lY3RlZC4gU3RvcmluZyBwYWNrZXQgb2ZmbGluZS5cIiksdm9pZCB0aGlzLl9zdG9yZVBhY2tldChlLHQscikpO3N3aXRjaCh0aGlzLl9zaGlmdFBpbmdJbnRlcnZhbCgpLGUuY21kKXtjYXNlXCJwdWJsaXNoXCI6YnJlYWs7Y2FzZVwicHVicmVsXCI6cmV0dXJuIHZvaWQgRSh0aGlzLGUsdCxyKTtkZWZhdWx0OnJldHVybiB2b2lkIFModGhpcyxlLHQpfXN3aXRjaChlLnFvcyl7Y2FzZSAyOmNhc2UgMTpFKHRoaXMsZSx0LHIpO2JyZWFrO2Nhc2UgMDpkZWZhdWx0OlModGhpcyxlLHQpfXkoXCJfc2VuZFBhY2tldCA6OiAoJXMpIDo6ICBlbmRcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpfX0sVC5wcm90b3R5cGUuX3N0b3JlUGFja2V0PWZ1bmN0aW9uKGUsdCxyKXt5KFwiX3N0b3JlUGFja2V0IDo6IHBhY2tldDogJW9cIixlKSx5KFwiX3N0b3JlUGFja2V0IDo6IGNiPyAlc1wiLCEhdCkscj1yfHxDO2xldCBuPWU7aWYoXCJwdWJsaXNoXCI9PT1uLmNtZCl7Y29uc3Qgcj1rKHRoaXMsbj1wKGUpKTtpZihyKXJldHVybiB0JiZ0KHIpfTA9PT0obi5xb3N8fDApJiZ0aGlzLnF1ZXVlUW9TWmVyb3x8XCJwdWJsaXNoXCIhPT1uLmNtZD90aGlzLnF1ZXVlLnB1c2goe3BhY2tldDpuLGNiOnR9KTpuLnFvcz4wPyh0PXRoaXMub3V0Z29pbmdbbi5tZXNzYWdlSWRdP3RoaXMub3V0Z29pbmdbbi5tZXNzYWdlSWRdLmNiOm51bGwsdGhpcy5vdXRnb2luZ1N0b3JlLnB1dChuLGZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIHQmJnQoZSk7cigpfSkpOnQmJnQobmV3IEVycm9yKFwiTm8gY29ubmVjdGlvbiB0byBicm9rZXJcIikpfSxULnByb3RvdHlwZS5fc2V0dXBQaW5nVGltZXI9ZnVuY3Rpb24oKXt5KFwiX3NldHVwUGluZ1RpbWVyIDo6IGtlZXBhbGl2ZSAlZCAoc2Vjb25kcylcIix0aGlzLm9wdGlvbnMua2VlcGFsaXZlKTtjb25zdCBlPXRoaXM7IXRoaXMucGluZ1RpbWVyJiZ0aGlzLm9wdGlvbnMua2VlcGFsaXZlJiYodGhpcy5waW5nUmVzcD0hMCx0aGlzLnBpbmdUaW1lcj1mKGZ1bmN0aW9uKCl7ZS5fY2hlY2tQaW5nKCl9LDFlMyp0aGlzLm9wdGlvbnMua2VlcGFsaXZlKSl9LFQucHJvdG90eXBlLl9zaGlmdFBpbmdJbnRlcnZhbD1mdW5jdGlvbigpe3RoaXMucGluZ1RpbWVyJiZ0aGlzLm9wdGlvbnMua2VlcGFsaXZlJiZ0aGlzLm9wdGlvbnMucmVzY2hlZHVsZVBpbmdzJiZ0aGlzLnBpbmdUaW1lci5yZXNjaGVkdWxlKDFlMyp0aGlzLm9wdGlvbnMua2VlcGFsaXZlKX0sVC5wcm90b3R5cGUuX2NoZWNrUGluZz1mdW5jdGlvbigpe3koXCJfY2hlY2tQaW5nIDo6IGNoZWNraW5nIHBpbmcuLi5cIiksdGhpcy5waW5nUmVzcD8oeShcIl9jaGVja1BpbmcgOjogcGluZyByZXNwb25zZSByZWNlaXZlZC4gQ2xlYXJpbmcgZmxhZyBhbmQgc2VuZGluZyBgcGluZ3JlcWBcIiksdGhpcy5waW5nUmVzcD0hMSx0aGlzLl9zZW5kUGFja2V0KHtjbWQ6XCJwaW5ncmVxXCJ9KSk6KHkoXCJfY2hlY2tQaW5nIDo6IGNhbGxpbmcgX2NsZWFuVXAgd2l0aCBmb3JjZSB0cnVlXCIpLHRoaXMuX2NsZWFuVXAoITApKX0sVC5wcm90b3R5cGUuX2hhbmRsZVBpbmdyZXNwPWZ1bmN0aW9uKCl7dGhpcy5waW5nUmVzcD0hMH0sVC5wcm90b3R5cGUuX2hhbmRsZUNvbm5hY2s9ZnVuY3Rpb24oZSl7eShcIl9oYW5kbGVDb25uYWNrXCIpO2NvbnN0IHQ9dGhpcy5vcHRpb25zLHI9NT09PXQucHJvdG9jb2xWZXJzaW9uP2UucmVhc29uQ29kZTplLnJldHVybkNvZGU7aWYoY2xlYXJUaW1lb3V0KHRoaXMuY29ubmFja1RpbWVyKSxkZWxldGUgdGhpcy50b3BpY0FsaWFzU2VuZCxlLnByb3BlcnRpZXMpe2lmKGUucHJvcGVydGllcy50b3BpY0FsaWFzTWF4aW11bSl7aWYoZS5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtPjY1NTM1KXJldHVybiB2b2lkIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwidG9waWNBbGlhc01heGltdW0gZnJvbSBicm9rZXIgaXMgb3V0IG9mIHJhbmdlXCIpKTtlLnByb3BlcnRpZXMudG9waWNBbGlhc01heGltdW0+MCYmKHRoaXMudG9waWNBbGlhc1NlbmQ9bmV3IGEoZS5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtKSl9ZS5wcm9wZXJ0aWVzLnNlcnZlcktlZXBBbGl2ZSYmdC5rZWVwYWxpdmUmJih0LmtlZXBhbGl2ZT1lLnByb3BlcnRpZXMuc2VydmVyS2VlcEFsaXZlLHRoaXMuX3NoaWZ0UGluZ0ludGVydmFsKCkpLGUucHJvcGVydGllcy5tYXhpbXVtUGFja2V0U2l6ZSYmKHQucHJvcGVydGllc3x8KHQucHJvcGVydGllcz17fSksdC5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplPWUucHJvcGVydGllcy5tYXhpbXVtUGFja2V0U2l6ZSl9aWYoMD09PXIpdGhpcy5yZWNvbm5lY3Rpbmc9ITEsdGhpcy5fb25Db25uZWN0KGUpO2Vsc2UgaWYocj4wKXtjb25zdCBlPW5ldyBFcnJvcihcIkNvbm5lY3Rpb24gcmVmdXNlZDogXCIrX1tyXSk7ZS5jb2RlPXIsdGhpcy5lbWl0KFwiZXJyb3JcIixlKX19LFQucHJvdG90eXBlLl9oYW5kbGVBdXRoPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy5vcHRpb25zLnByb3RvY29sVmVyc2lvbixyPTU9PT10P2UucmVhc29uQ29kZTplLnJldHVybkNvZGU7aWYoNSE9PXQpe2NvbnN0IGU9bmV3IEVycm9yKFwiUHJvdG9jb2wgZXJyb3I6IEF1dGggcGFja2V0cyBhcmUgb25seSBzdXBwb3J0ZWQgaW4gTVFUVCA1LiBZb3VyIHZlcnNpb246XCIrdCk7cmV0dXJuIGUuY29kZT1yLHZvaWQgdGhpcy5lbWl0KFwiZXJyb3JcIixlKX1jb25zdCBuPXRoaXM7dGhpcy5oYW5kbGVBdXRoKGUsZnVuY3Rpb24oZSx0KXtpZihlKW4uZW1pdChcImVycm9yXCIsZSk7ZWxzZSBpZigyND09PXIpbi5yZWNvbm5lY3Rpbmc9ITEsbi5fc2VuZFBhY2tldCh0KTtlbHNle2NvbnN0IHQ9bmV3IEVycm9yKFwiQ29ubmVjdGlvbiByZWZ1c2VkOiBcIitfW3JdKTtlLmNvZGU9cixuLmVtaXQoXCJlcnJvclwiLHQpfX0pfSxULnByb3RvdHlwZS5oYW5kbGVBdXRoPWZ1bmN0aW9uKGUsdCl7dCgpfSxULnByb3RvdHlwZS5faGFuZGxlUHVibGlzaD1mdW5jdGlvbihlLHQpe3koXCJfaGFuZGxlUHVibGlzaDogcGFja2V0ICVvXCIsZSksdD12b2lkIDAhPT10P3Q6QztsZXQgcj1lLnRvcGljLnRvU3RyaW5nKCk7Y29uc3Qgbj1lLnBheWxvYWQsaT1lLnFvcyxvPWUubWVzc2FnZUlkLHM9dGhpcyxhPXRoaXMub3B0aW9ucyxsPVswLDE2LDEyOCwxMzEsMTM1LDE0NCwxNDUsMTUxLDE1M107aWYoNT09PXRoaXMub3B0aW9ucy5wcm90b2NvbFZlcnNpb24pe2xldCB0O2lmKGUucHJvcGVydGllcyYmKHQ9ZS5wcm9wZXJ0aWVzLnRvcGljQWxpYXMpLHZvaWQgMCE9PXQpaWYoMD09PXIubGVuZ3RoKXtpZighKHQ+MCYmdDw9NjU1MzUpKXJldHVybiB5KFwiX2hhbmRsZVB1Ymxpc2ggOjogdG9waWMgYWxpYXMgb3V0IG9mIHJhbmdlLiBhbGlhczogJWRcIix0KSx2b2lkIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiUmVjZWl2ZWQgVG9waWMgQWxpYXMgaXMgb3V0IG9mIHJhbmdlXCIpKTt7Y29uc3QgZT10aGlzLnRvcGljQWxpYXNSZWN2LmdldFRvcGljQnlBbGlhcyh0KTtpZighZSlyZXR1cm4geShcIl9oYW5kbGVQdWJsaXNoIDo6IHVucmVnaXN0ZXJlZCB0b3BpYyBhbGlhcy4gYWxpYXM6ICVkXCIsdCksdm9pZCB0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlJlY2VpdmVkIHVucmVnaXN0ZXJlZCBUb3BpYyBBbGlhc1wiKSk7eShcIl9oYW5kbGVQdWJsaXNoIDo6IHRvcGljIGNvbXBsZW1lbnRlZCBieSBhbGlhcy4gdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIscj1lLHQpfX1lbHNle2lmKCF0aGlzLnRvcGljQWxpYXNSZWN2LnB1dChyLHQpKXJldHVybiB5KFwiX2hhbmRsZVB1Ymxpc2ggOjogdG9waWMgYWxpYXMgb3V0IG9mIHJhbmdlLiBhbGlhczogJWRcIix0KSx2b2lkIHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiUmVjZWl2ZWQgVG9waWMgQWxpYXMgaXMgb3V0IG9mIHJhbmdlXCIpKTt5KFwiX2hhbmRsZVB1Ymxpc2ggOjogcmVnaXN0ZXJlZCB0b3BpYzogJXMgLSBhbGlhczogJWRcIixyLHQpfX1zd2l0Y2goeShcIl9oYW5kbGVQdWJsaXNoOiBxb3MgJWRcIixpKSxpKXtjYXNlIDI6YS5jdXN0b21IYW5kbGVBY2tzKHIsbixlLGZ1bmN0aW9uKHIsbil7cmV0dXJuIHIgaW5zdGFuY2VvZiBFcnJvcnx8KG49cixyPW51bGwpLHI/cy5lbWl0KFwiZXJyb3JcIixyKTotMT09PWwuaW5kZXhPZihuKT9zLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIldyb25nIHJlYXNvbiBjb2RlIGZvciBwdWJyZWNcIikpOnZvaWQobj9zLl9zZW5kUGFja2V0KHtjbWQ6XCJwdWJyZWNcIixtZXNzYWdlSWQ6byxyZWFzb25Db2RlOm59LHQpOnMuaW5jb21pbmdTdG9yZS5wdXQoZSxmdW5jdGlvbigpe3MuX3NlbmRQYWNrZXQoe2NtZDpcInB1YnJlY1wiLG1lc3NhZ2VJZDpvfSx0KX0pKX0pO2JyZWFrO2Nhc2UgMTphLmN1c3RvbUhhbmRsZUFja3MocixuLGUsZnVuY3Rpb24oaSxhKXtyZXR1cm4gaSBpbnN0YW5jZW9mIEVycm9yfHwoYT1pLGk9bnVsbCksaT9zLmVtaXQoXCJlcnJvclwiLGkpOi0xPT09bC5pbmRleE9mKGEpP3MuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiV3JvbmcgcmVhc29uIGNvZGUgZm9yIHB1YmFja1wiKSk6KGF8fHMuZW1pdChcIm1lc3NhZ2VcIixyLG4sZSksdm9pZCBzLmhhbmRsZU1lc3NhZ2UoZSxmdW5jdGlvbihlKXtpZihlKXJldHVybiB0JiZ0KGUpO3MuX3NlbmRQYWNrZXQoe2NtZDpcInB1YmFja1wiLG1lc3NhZ2VJZDpvLHJlYXNvbkNvZGU6YX0sdCl9KSl9KTticmVhaztjYXNlIDA6dGhpcy5lbWl0KFwibWVzc2FnZVwiLHIsbixlKSx0aGlzLmhhbmRsZU1lc3NhZ2UoZSx0KTticmVhaztkZWZhdWx0OnkoXCJfaGFuZGxlUHVibGlzaDogdW5rbm93biBRb1MuIERvaW5nIG5vdGhpbmcuXCIpfX0sVC5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZT1mdW5jdGlvbihlLHQpe3QoKX0sVC5wcm90b3R5cGUuX2hhbmRsZUFjaz1mdW5jdGlvbihlKXtjb25zdCB0PWUubWVzc2FnZUlkLHI9ZS5jbWQ7bGV0IG49bnVsbDtjb25zdCBpPXRoaXMub3V0Z29pbmdbdF0/dGhpcy5vdXRnb2luZ1t0XS5jYjpudWxsLG89dGhpcztsZXQgcztpZihpKXtzd2l0Y2goeShcIl9oYW5kbGVBY2sgOjogcGFja2V0IHR5cGVcIixyKSxyKXtjYXNlXCJwdWJjb21wXCI6Y2FzZVwicHViYWNrXCI6e2NvbnN0IHI9ZS5yZWFzb25Db2RlO3ImJnI+MCYmMTYhPT1yJiYoKHM9bmV3IEVycm9yKFwiUHVibGlzaCBlcnJvcjogXCIrX1tyXSkpLmNvZGU9cixpKHMsZSkpLGRlbGV0ZSB0aGlzLm91dGdvaW5nW3RdLHRoaXMub3V0Z29pbmdTdG9yZS5kZWwoZSxpKSx0aGlzLm1lc3NhZ2VJZFByb3ZpZGVyLmRlYWxsb2NhdGUodCksdGhpcy5faW52b2tlU3RvcmVQcm9jZXNzaW5nUXVldWUoKTticmVha31jYXNlXCJwdWJyZWNcIjp7bj17Y21kOlwicHVicmVsXCIscW9zOjIsbWVzc2FnZUlkOnR9O2NvbnN0IHI9ZS5yZWFzb25Db2RlO3ImJnI+MCYmMTYhPT1yPygocz1uZXcgRXJyb3IoXCJQdWJsaXNoIGVycm9yOiBcIitfW3JdKSkuY29kZT1yLGkocyxlKSk6dGhpcy5fc2VuZFBhY2tldChuKTticmVha31jYXNlXCJzdWJhY2tcIjpkZWxldGUgdGhpcy5vdXRnb2luZ1t0XSx0aGlzLm1lc3NhZ2VJZFByb3ZpZGVyLmRlYWxsb2NhdGUodCk7Zm9yKGxldCByPTA7cjxlLmdyYW50ZWQubGVuZ3RoO3IrKylpZigwIT0oMTI4JmUuZ3JhbnRlZFtyXSkpe2NvbnN0IGU9dGhpcy5tZXNzYWdlSWRUb1RvcGljW3RdO2UmJmUuZm9yRWFjaChmdW5jdGlvbihlKXtkZWxldGUgby5fcmVzdWJzY3JpYmVUb3BpY3NbZV19KX10aGlzLl9pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSgpLGkobnVsbCxlKTticmVhaztjYXNlXCJ1bnN1YmFja1wiOmRlbGV0ZSB0aGlzLm91dGdvaW5nW3RdLHRoaXMubWVzc2FnZUlkUHJvdmlkZXIuZGVhbGxvY2F0ZSh0KSx0aGlzLl9pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSgpLGkobnVsbCk7YnJlYWs7ZGVmYXVsdDpvLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcInVucmVjb2duaXplZCBwYWNrZXQgdHlwZVwiKSl9dGhpcy5kaXNjb25uZWN0aW5nJiYwPT09T2JqZWN0LmtleXModGhpcy5vdXRnb2luZykubGVuZ3RoJiZ0aGlzLmVtaXQoXCJvdXRnb2luZ0VtcHR5XCIpfWVsc2UgeShcIl9oYW5kbGVBY2sgOjogU2VydmVyIHNlbnQgYW4gYWNrIGluIGVycm9yLiBJZ25vcmluZy5cIil9LFQucHJvdG90eXBlLl9oYW5kbGVQdWJyZWw9ZnVuY3Rpb24oZSx0KXt5KFwiaGFuZGxpbmcgcHVicmVsIHBhY2tldFwiKSx0PXZvaWQgMCE9PXQ/dDpDO2NvbnN0IHI9dGhpcyxuPXtjbWQ6XCJwdWJjb21wXCIsbWVzc2FnZUlkOmUubWVzc2FnZUlkfTtyLmluY29taW5nU3RvcmUuZ2V0KGUsZnVuY3Rpb24oZSxpKXtlP3IuX3NlbmRQYWNrZXQobix0KTooci5lbWl0KFwibWVzc2FnZVwiLGkudG9waWMsaS5wYXlsb2FkLGkpLHIuaGFuZGxlTWVzc2FnZShpLGZ1bmN0aW9uKGUpe2lmKGUpcmV0dXJuIHQoZSk7ci5pbmNvbWluZ1N0b3JlLmRlbChpLEMpLHIuX3NlbmRQYWNrZXQobix0KX0pKX0pfSxULnByb3RvdHlwZS5faGFuZGxlRGlzY29ubmVjdD1mdW5jdGlvbihlKXt0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIsZSl9LFQucHJvdG90eXBlLl9uZXh0SWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tZXNzYWdlSWRQcm92aWRlci5hbGxvY2F0ZSgpfSxULnByb3RvdHlwZS5nZXRMYXN0TWVzc2FnZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVzc2FnZUlkUHJvdmlkZXIuZ2V0TGFzdEFsbG9jYXRlZCgpfSxULnByb3RvdHlwZS5fcmVzdWJzY3JpYmU9ZnVuY3Rpb24oKXt5KFwiX3Jlc3Vic2NyaWJlXCIpO2NvbnN0IGU9T2JqZWN0LmtleXModGhpcy5fcmVzdWJzY3JpYmVUb3BpY3MpO2lmKCF0aGlzLl9maXJzdENvbm5lY3Rpb24mJih0aGlzLm9wdGlvbnMuY2xlYW58fDU9PT10aGlzLm9wdGlvbnMucHJvdG9jb2xWZXJzaW9uJiYhdGhpcy5jb25uYWNrUGFja2V0LnNlc3Npb25QcmVzZW50KSYmZS5sZW5ndGg+MClpZih0aGlzLm9wdGlvbnMucmVzdWJzY3JpYmUpaWYoNT09PXRoaXMub3B0aW9ucy5wcm90b2NvbFZlcnNpb24pe3koXCJfcmVzdWJzY3JpYmU6IHByb3RvY29sVmVyc2lvbiA1XCIpO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCByPXt9O3JbZVt0XV09dGhpcy5fcmVzdWJzY3JpYmVUb3BpY3NbZVt0XV0sci5yZXN1YnNjcmliZT0hMCx0aGlzLnN1YnNjcmliZShyLHtwcm9wZXJ0aWVzOnJbZVt0XV0ucHJvcGVydGllc30pfX1lbHNlIHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzLnJlc3Vic2NyaWJlPSEwLHRoaXMuc3Vic2NyaWJlKHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzKTtlbHNlIHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzPXt9O3RoaXMuX2ZpcnN0Q29ubmVjdGlvbj0hMX0sVC5wcm90b3R5cGUuX29uQ29ubmVjdD1mdW5jdGlvbihlKXtpZih0aGlzLmRpc2Nvbm5lY3RlZClyZXR1cm4gdm9pZCB0aGlzLmVtaXQoXCJjb25uZWN0XCIsZSk7Y29uc3QgdD10aGlzO3RoaXMuY29ubmFja1BhY2tldD1lLHRoaXMubWVzc2FnZUlkUHJvdmlkZXIuY2xlYXIoKSx0aGlzLl9zZXR1cFBpbmdUaW1lcigpLHRoaXMuY29ubmVjdGVkPSEwLGZ1bmN0aW9uIHIoKXtsZXQgbj10Lm91dGdvaW5nU3RvcmUuY3JlYXRlU3RyZWFtKCk7ZnVuY3Rpb24gaSgpe3QuX3N0b3JlUHJvY2Vzc2luZz0hMSx0Ll9wYWNrZXRJZHNEdXJpbmdTdG9yZVByb2Nlc3Npbmc9e319ZnVuY3Rpb24gbygpe24uZGVzdHJveSgpLG49bnVsbCx0Ll9mbHVzaFN0b3JlUHJvY2Vzc2luZ1F1ZXVlKCksaSgpfXQub25jZShcImNsb3NlXCIsbyksbi5vbihcImVycm9yXCIsZnVuY3Rpb24oZSl7aSgpLHQuX2ZsdXNoU3RvcmVQcm9jZXNzaW5nUXVldWUoKSx0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixvKSx0LmVtaXQoXCJlcnJvclwiLGUpfSksbi5vbihcImVuZFwiLGZ1bmN0aW9uKCl7bGV0IG49ITA7Zm9yKGNvbnN0IGUgaW4gdC5fcGFja2V0SWRzRHVyaW5nU3RvcmVQcm9jZXNzaW5nKWlmKCF0Ll9wYWNrZXRJZHNEdXJpbmdTdG9yZVByb2Nlc3NpbmdbZV0pe249ITE7YnJlYWt9bj8oaSgpLHQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLG8pLHQuX2ludm9rZUFsbFN0b3JlUHJvY2Vzc2luZ1F1ZXVlKCksdC5lbWl0KFwiY29ubmVjdFwiLGUpKTpyKCl9KSxmdW5jdGlvbiBlKCl7aWYoIW4pcmV0dXJuO3QuX3N0b3JlUHJvY2Vzc2luZz0hMDtjb25zdCByPW4ucmVhZCgxKTtsZXQgaTtyP3QuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZ1tyLm1lc3NhZ2VJZF0/ZSgpOnQuZGlzY29ubmVjdGluZ3x8dC5yZWNvbm5lY3RUaW1lcj9uLmRlc3Ryb3kmJm4uZGVzdHJveSgpOihpPXQub3V0Z29pbmdbci5tZXNzYWdlSWRdP3Qub3V0Z29pbmdbci5tZXNzYWdlSWRdLmNiOm51bGwsdC5vdXRnb2luZ1tyLm1lc3NhZ2VJZF09e3ZvbGF0aWxlOiExLGNiOmZ1bmN0aW9uKHQscil7aSYmaSh0LHIpLGUoKX19LHQuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZ1tyLm1lc3NhZ2VJZF09ITAsdC5tZXNzYWdlSWRQcm92aWRlci5yZWdpc3RlcihyLm1lc3NhZ2VJZCk/dC5fc2VuZFBhY2tldChyKTp5KFwibWVzc2FnZUlkOiAlZCBoYXMgYWxyZWFkeSB1c2VkLlwiLHIubWVzc2FnZUlkKSk6bi5vbmNlKFwicmVhZGFibGVcIixlKX0oKX0oKX0sVC5wcm90b3R5cGUuX2ludm9rZVN0b3JlUHJvY2Vzc2luZ1F1ZXVlPWZ1bmN0aW9uKCl7aWYodGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUubGVuZ3RoPjApe2NvbnN0IGU9dGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWVbMF07aWYoZSYmZS5pbnZva2UoKSlyZXR1cm4gdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUuc2hpZnQoKSwhMH1yZXR1cm4hMX0sVC5wcm90b3R5cGUuX2ludm9rZUFsbFN0b3JlUHJvY2Vzc2luZ1F1ZXVlPWZ1bmN0aW9uKCl7Zm9yKDt0aGlzLl9pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSgpOyk7fSxULnByb3RvdHlwZS5fZmx1c2hTdG9yZVByb2Nlc3NpbmdRdWV1ZT1mdW5jdGlvbigpe2Zvcihjb25zdCBlIG9mIHRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlKWUuY2JTdG9yZVB1dCYmZS5jYlN0b3JlUHV0KG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gY2xvc2VkXCIpKSxlLmNhbGxiYWNrJiZlLmNhbGxiYWNrKG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gY2xvc2VkXCIpKTt0aGlzLl9zdG9yZVByb2Nlc3NpbmdRdWV1ZS5zcGxpY2UoMCl9LHQuZXhwb3J0cz1UfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIiksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4vZGVmYXVsdC1tZXNzYWdlLWlkLXByb3ZpZGVyXCI6NyxcIi4vc3RvcmVcIjo4LFwiLi90b3BpYy1hbGlhcy1yZWN2XCI6OSxcIi4vdG9waWMtYWxpYXMtc2VuZFwiOjEwLFwiLi92YWxpZGF0aW9uc1wiOjExLF9wcm9jZXNzOjUwLGRlYnVnOjE4LGV2ZW50czoyMixpbmhlcml0czoyNCxcIm1xdHQtcGFja2V0XCI6NDAsXCJyZWFkYWJsZS1zdHJlYW1cIjo2OSxyZWludGVydmFsOjcwLFwicmZkYy9kZWZhdWx0XCI6NzEseHRlbmQ6ODF9XSwyOltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpeyhmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2NvbnN0IG49ZShcInJlYWRhYmxlLXN0cmVhbVwiKS5UcmFuc2Zvcm0saT1lKFwiZHVwbGV4aWZ5XCIpO2xldCBvLHMsYSxsPSExO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKHQuaG9zdG5hbWU9dC5ob3N0bmFtZXx8dC5ob3N0LCF0Lmhvc3RuYW1lKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgaG9zdC4gU3BlY2lmeSBob3N0IG1hbnVhbGx5LlwiKTtjb25zdCB1PVwiTVFJc2RwXCI9PT10LnByb3RvY29sSWQmJjM9PT10LnByb3RvY29sVmVyc2lvbj9cIm1xdHR2My4xXCI6XCJtcXR0XCI7IWZ1bmN0aW9uKGUpe2UuaG9zdG5hbWV8fChlLmhvc3RuYW1lPVwibG9jYWxob3N0XCIpLGUucGF0aHx8KGUucGF0aD1cIi9cIiksZS53c09wdGlvbnN8fChlLndzT3B0aW9ucz17fSl9KHQpO2NvbnN0IGM9ZnVuY3Rpb24oZSx0KXtjb25zdCByPVwiYWxpc1wiPT09ZS5wcm90b2NvbD9cIndzc1wiOlwid3NcIjtsZXQgbj1yK1wiOi8vXCIrZS5ob3N0bmFtZStlLnBhdGg7cmV0dXJuIGUucG9ydCYmODAhPT1lLnBvcnQmJjQ0MyE9PWUucG9ydCYmKG49citcIjovL1wiK2UuaG9zdG5hbWUrXCI6XCIrZS5wb3J0K2UucGF0aCksXCJmdW5jdGlvblwiPT10eXBlb2YgZS50cmFuc2Zvcm1Xc1VybCYmKG49ZS50cmFuc2Zvcm1Xc1VybChuLGUsdCkpLG59KHQsZSk7cmV0dXJuKG89dC5teSkuY29ubmVjdFNvY2tldCh7dXJsOmMscHJvdG9jb2xzOnV9KSxzPWZ1bmN0aW9uKCl7Y29uc3QgZT1uZXcgbjtyZXR1cm4gZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LHIpe28uc2VuZFNvY2tldE1lc3NhZ2Uoe2RhdGE6ZS5idWZmZXIsc3VjY2VzczpmdW5jdGlvbigpe3IoKX0sZmFpbDpmdW5jdGlvbigpe3IobmV3IEVycm9yKX19KX0sZS5fZmx1c2g9ZnVuY3Rpb24oZSl7by5jbG9zZVNvY2tldCh7c3VjY2VzczpmdW5jdGlvbigpe2UoKX19KX0sZX0oKSxhPWkub2JqKCksbHx8KGw9ITAsby5vblNvY2tldE9wZW4oZnVuY3Rpb24oKXthLnNldFJlYWRhYmxlKHMpLGEuc2V0V3JpdGFibGUocyksYS5lbWl0KFwiY29ubmVjdFwiKX0pLG8ub25Tb2NrZXRNZXNzYWdlKGZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlLmRhdGEpe2NvbnN0IHQ9ci5mcm9tKGUuZGF0YSxcImJhc2U2NFwiKTtzLnB1c2godCl9ZWxzZXtjb25zdCB0PW5ldyBGaWxlUmVhZGVyO3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe2xldCBlPXQucmVzdWx0O2U9ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP3IuZnJvbShlKTpyLmZyb20oZSxcInV0ZjhcIikscy5wdXNoKGUpfSksdC5yZWFkQXNBcnJheUJ1ZmZlcihlLmRhdGEpfX0pLG8ub25Tb2NrZXRDbG9zZShmdW5jdGlvbigpe2EuZW5kKCksYS5kZXN0cm95KCl9KSxvLm9uU29ja2V0RXJyb3IoZnVuY3Rpb24oZSl7YS5kZXN0cm95KGUpfSkpLGF9fSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtidWZmZXI6MTcsZHVwbGV4aWZ5OjIwLFwicmVhZGFibGUtc3RyZWFtXCI6Njl9XSwzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgbj1lKFwibmV0XCIpLGk9ZShcImRlYnVnXCIpKFwibXF0dGpzOnRjcFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt0LnBvcnQ9dC5wb3J0fHwxODgzLHQuaG9zdG5hbWU9dC5ob3N0bmFtZXx8dC5ob3N0fHxcImxvY2FsaG9zdFwiO2NvbnN0IHI9dC5wb3J0LG89dC5ob3N0bmFtZTtyZXR1cm4gaShcInBvcnQgJWQgYW5kIGhvc3QgJXNcIixyLG8pLG4uY3JlYXRlQ29ubmVjdGlvbihyLG8pfX0se2RlYnVnOjE4LG5ldDoxNn1dLDQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBuPWUoXCJ0bHNcIiksaT1lKFwibmV0XCIpLG89ZShcImRlYnVnXCIpKFwibXF0dGpzOnRsc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt0LnBvcnQ9dC5wb3J0fHw4ODgzLHQuaG9zdD10Lmhvc3RuYW1lfHx0Lmhvc3R8fFwibG9jYWxob3N0XCIsMD09PWkuaXNJUCh0Lmhvc3QpJiYodC5zZXJ2ZXJuYW1lPXQuaG9zdCksdC5yZWplY3RVbmF1dGhvcml6ZWQ9ITEhPT10LnJlamVjdFVuYXV0aG9yaXplZCxkZWxldGUgdC5wYXRoLG8oXCJwb3J0ICVkIGhvc3QgJXMgcmVqZWN0VW5hdXRob3JpemVkICViXCIsdC5wb3J0LHQuaG9zdCx0LnJlamVjdFVuYXV0aG9yaXplZCk7Y29uc3Qgcj1uLmNvbm5lY3QodCk7ZnVuY3Rpb24gcyhuKXt0LnJlamVjdFVuYXV0aG9yaXplZCYmZS5lbWl0KFwiZXJyb3JcIixuKSxyLmVuZCgpfXJldHVybiByLm9uKFwic2VjdXJlQ29ubmVjdFwiLGZ1bmN0aW9uKCl7dC5yZWplY3RVbmF1dGhvcml6ZWQmJiFyLmF1dGhvcml6ZWQ/ci5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJUTFMgbm90IGF1dGhvcml6ZWRcIikpOnIucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLHMpfSksci5vbihcImVycm9yXCIscykscn19LHtkZWJ1ZzoxOCxuZXQ6MTYsdGxzOjE2fV0sNTpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyLG4peyhmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2NvbnN0IGk9ZShcIndzXCIpLG89ZShcImRlYnVnXCIpKFwibXF0dGpzOndzXCIpLHM9ZShcImR1cGxleGlmeVwiKSxhPWUoXCJyZWFkYWJsZS1zdHJlYW1cIikuVHJhbnNmb3JtLGw9W1wicmVqZWN0VW5hdXRob3JpemVkXCIsXCJjYVwiLFwiY2VydFwiLFwia2V5XCIsXCJwZnhcIixcInBhc3NwaHJhc2VcIl0sdT12b2lkIDAhPT1yJiZcImJyb3dzZXJcIj09PXIudGl0bGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIF9fd2VicGFja19yZXF1aXJlX187ZnVuY3Rpb24gYyhlLHQpe2xldCByPWUucHJvdG9jb2wrXCI6Ly9cIitlLmhvc3RuYW1lK1wiOlwiK2UucG9ydCtlLnBhdGg7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZS50cmFuc2Zvcm1Xc1VybCYmKHI9ZS50cmFuc2Zvcm1Xc1VybChyLGUsdCkpLHJ9ZnVuY3Rpb24gaChlKXtjb25zdCB0PWU7cmV0dXJuIGUuaG9zdG5hbWV8fCh0Lmhvc3RuYW1lPVwibG9jYWxob3N0XCIpLGUucG9ydHx8KFwid3NzXCI9PT1lLnByb3RvY29sP3QucG9ydD00NDM6dC5wb3J0PTgwKSxlLnBhdGh8fCh0LnBhdGg9XCIvXCIpLGUud3NPcHRpb25zfHwodC53c09wdGlvbnM9e30pLHV8fFwid3NzXCIhPT1lLnByb3RvY29sfHxsLmZvckVhY2goZnVuY3Rpb24ocil7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJiFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZS53c09wdGlvbnMscikmJih0LndzT3B0aW9uc1tyXT1lW3JdKX0pLHR9dC5leHBvcnRzPXU/ZnVuY3Rpb24oZSx0KXtsZXQgcjtvKFwiYnJvd3NlclN0cmVhbUJ1aWxkZXJcIik7Y29uc3QgaT1mdW5jdGlvbihlKXtjb25zdCB0PWgoZSk7aWYodC5ob3N0bmFtZXx8KHQuaG9zdG5hbWU9dC5ob3N0KSwhdC5ob3N0bmFtZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgaG9zdC4gU3BlY2lmeSBob3N0IG1hbnVhbGx5LlwiKTtjb25zdCBlPW5ldyBVUkwoZG9jdW1lbnQuVVJMKTt0Lmhvc3RuYW1lPWUuaG9zdG5hbWUsdC5wb3J0fHwodC5wb3J0PWUucG9ydCl9cmV0dXJuIHZvaWQgMD09PXQub2JqZWN0TW9kZSYmKHQub2JqZWN0TW9kZT0hKCEwPT09dC5iaW5hcnl8fHZvaWQgMD09PXQuYmluYXJ5KSksdH0odCkuYnJvd3NlckJ1ZmZlclNpemV8fDUyNDI4OCxsPXQuYnJvd3NlckJ1ZmZlclRpbWVvdXR8fDFlMyx1PSF0Lm9iamVjdE1vZGUsZj1mdW5jdGlvbihlLHQpe2NvbnN0IHI9XCJNUUlzZHBcIj09PXQucHJvdG9jb2xJZCYmMz09PXQucHJvdG9jb2xWZXJzaW9uP1wibXF0dHYzLjFcIjpcIm1xdHRcIixuPWModCxlKSxpPW5ldyBXZWJTb2NrZXQobixbcl0pO3JldHVybiBpLmJpbmFyeVR5cGU9XCJhcnJheWJ1ZmZlclwiLGl9KGUsdCkscD1mdW5jdGlvbihlLHQscil7Y29uc3Qgbj1uZXcgYSh7b2JqZWN0TW9kZU1vZGU6ZS5vYmplY3RNb2RlfSk7cmV0dXJuIG4uX3dyaXRlPXQsbi5fZmx1c2g9cixufSh0LGZ1bmN0aW9uIGUodCxyLG8pe2YuYnVmZmVyZWRBbW91bnQ+aSYmc2V0VGltZW91dChlLGwsdCxyLG8pLHUmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1uLmZyb20odCxcInV0ZjhcIikpO3RyeXtmLnNlbmQodCl9Y2F0Y2goZSl7cmV0dXJuIG8oZSl9bygpfSxmdW5jdGlvbihlKXtmLmNsb3NlKCksZSgpfSk7dC5vYmplY3RNb2RlfHwocC5fd3JpdGV2PXYpLHAub24oXCJjbG9zZVwiLCgpPT57Zi5jbG9zZSgpfSk7Y29uc3QgZD12b2lkIDAhPT1mLmFkZEV2ZW50TGlzdGVuZXI7ZnVuY3Rpb24gZygpe3Iuc2V0UmVhZGFibGUocCksci5zZXRXcml0YWJsZShwKSxyLmVtaXQoXCJjb25uZWN0XCIpfWZ1bmN0aW9uIHkoKXtyLmVuZCgpLHIuZGVzdHJveSgpfWZ1bmN0aW9uIGIoZSl7ci5kZXN0cm95KGUpfWZ1bmN0aW9uIG0oZSl7bGV0IHQ9ZS5kYXRhO3Q9dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP24uZnJvbSh0KTpuLmZyb20odCxcInV0ZjhcIikscC5wdXNoKHQpfWZ1bmN0aW9uIHYoZSx0KXtjb25zdCByPW5ldyBBcnJheShlLmxlbmd0aCk7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0KyspXCJzdHJpbmdcIj09dHlwZW9mIGVbdF0uY2h1bms/clt0XT1uLmZyb20oZVt0XSxcInV0ZjhcIik6clt0XT1lW3RdLmNodW5rO3RoaXMuX3dyaXRlKG4uY29uY2F0KHIpLFwiYmluYXJ5XCIsdCl9cmV0dXJuIGYucmVhZHlTdGF0ZT09PWYuT1BFTj9yPXA6KHI9cj1zKHZvaWQgMCx2b2lkIDAsdCksdC5vYmplY3RNb2RlfHwoci5fd3JpdGV2PXYpLGQ/Zi5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLGcpOmYub25vcGVuPWcpLHIuc29ja2V0PWYsZD8oZi5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIix5KSxmLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGIpLGYuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixtKSk6KGYub25jbG9zZT15LGYub25lcnJvcj1iLGYub25tZXNzYWdlPW0pLHJ9OmZ1bmN0aW9uKGUsdCl7byhcInN0cmVhbUJ1aWxkZXJcIik7Y29uc3Qgcj1oKHQpLG49YyhyLGUpLHM9ZnVuY3Rpb24oZSx0LHIpe28oXCJjcmVhdGVXZWJTb2NrZXRcIiksbyhcInByb3RvY29sOiBcIityLnByb3RvY29sSWQrXCIgXCIrci5wcm90b2NvbFZlcnNpb24pO2NvbnN0IG49XCJNUUlzZHBcIj09PXIucHJvdG9jb2xJZCYmMz09PXIucHJvdG9jb2xWZXJzaW9uP1wibXF0dHYzLjFcIjpcIm1xdHRcIjtyZXR1cm4gbyhcImNyZWF0aW5nIG5ldyBXZWJzb2NrZXQgZm9yIHVybDogXCIrdCtcIiBhbmQgcHJvdG9jb2w6IFwiK24pLG5ldyBpKHQsW25dLHIud3NPcHRpb25zKX0oMCxuLHIpLGE9aS5jcmVhdGVXZWJTb2NrZXRTdHJlYW0ocyxyLndzT3B0aW9ucyk7cmV0dXJuIGEudXJsPW4scy5vbihcImNsb3NlXCIsKCk9PnthLmRlc3Ryb3koKX0pLGF9fSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIiksZShcImJ1ZmZlclwiKS5CdWZmZXIpfSx7X3Byb2Nlc3M6NTAsYnVmZmVyOjE3LGRlYnVnOjE4LGR1cGxleGlmeToyMCxcInJlYWRhYmxlLXN0cmVhbVwiOjY5LHdzOjgwfV0sNjpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyKXsoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtjb25zdCBuPWUoXCJyZWFkYWJsZS1zdHJlYW1cIikuVHJhbnNmb3JtLGk9ZShcImR1cGxleGlmeVwiKTtsZXQgbyxzLGE7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYodC5ob3N0bmFtZT10Lmhvc3RuYW1lfHx0Lmhvc3QsIXQuaG9zdG5hbWUpdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGRldGVybWluZSBob3N0LiBTcGVjaWZ5IGhvc3QgbWFudWFsbHkuXCIpO2NvbnN0IGw9XCJNUUlzZHBcIj09PXQucHJvdG9jb2xJZCYmMz09PXQucHJvdG9jb2xWZXJzaW9uP1wibXF0dHYzLjFcIjpcIm1xdHRcIjshZnVuY3Rpb24oZSl7ZS5ob3N0bmFtZXx8KGUuaG9zdG5hbWU9XCJsb2NhbGhvc3RcIiksZS5wYXRofHwoZS5wYXRoPVwiL1wiKSxlLndzT3B0aW9uc3x8KGUud3NPcHRpb25zPXt9KX0odCk7Y29uc3QgdT1mdW5jdGlvbihlLHQpe2NvbnN0IHI9XCJ3eHNcIj09PWUucHJvdG9jb2w/XCJ3c3NcIjpcIndzXCI7bGV0IG49citcIjovL1wiK2UuaG9zdG5hbWUrZS5wYXRoO3JldHVybiBlLnBvcnQmJjgwIT09ZS5wb3J0JiY0NDMhPT1lLnBvcnQmJihuPXIrXCI6Ly9cIitlLmhvc3RuYW1lK1wiOlwiK2UucG9ydCtlLnBhdGgpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudHJhbnNmb3JtV3NVcmwmJihuPWUudHJhbnNmb3JtV3NVcmwobixlLHQpKSxufSh0LGUpO289d3guY29ubmVjdFNvY2tldCh7dXJsOnUscHJvdG9jb2xzOltsXX0pLHM9ZnVuY3Rpb24oKXtjb25zdCBlPW5ldyBuO3JldHVybiBlLl93cml0ZT1mdW5jdGlvbihlLHQscil7by5zZW5kKHtkYXRhOmUuYnVmZmVyLHN1Y2Nlc3M6ZnVuY3Rpb24oKXtyKCl9LGZhaWw6ZnVuY3Rpb24oZSl7cihuZXcgRXJyb3IoZSkpfX0pfSxlLl9mbHVzaD1mdW5jdGlvbihlKXtvLmNsb3NlKHtzdWNjZXNzOmZ1bmN0aW9uKCl7ZSgpfX0pfSxlfSgpLChhPWkub2JqKCkpLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7by5jbG9zZSh7c3VjY2VzczpmdW5jdGlvbigpe3QmJnQoZSl9fSl9O2NvbnN0IGM9YS5kZXN0cm95O3JldHVybiBhLmRlc3Ryb3k9ZnVuY3Rpb24oKXthLmRlc3Ryb3k9Yztjb25zdCBlPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe28uY2xvc2Uoe2ZhaWw6ZnVuY3Rpb24oKXtlLl9kZXN0cm95KG5ldyBFcnJvcil9fSl9LDApfS5iaW5kKGEpLG8ub25PcGVuKGZ1bmN0aW9uKCl7YS5zZXRSZWFkYWJsZShzKSxhLnNldFdyaXRhYmxlKHMpLGEuZW1pdChcImNvbm5lY3RcIil9KSxvLm9uTWVzc2FnZShmdW5jdGlvbihlKXtsZXQgdD1lLmRhdGE7dD10IGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ci5mcm9tKHQpOnIuZnJvbSh0LFwidXRmOFwiKSxzLnB1c2godCl9KSxvLm9uQ2xvc2UoZnVuY3Rpb24oKXthLmVuZCgpLGEuZGVzdHJveSgpfSksby5vbkVycm9yKGZ1bmN0aW9uKGUpe2EuZGVzdHJveShuZXcgRXJyb3IoZS5lcnJNc2cpKX0pLGF9fSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtidWZmZXI6MTcsZHVwbGV4aWZ5OjIwLFwicmVhZGFibGUtc3RyZWFtXCI6Njl9XSw3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbigpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbjt0aGlzLm5leHRJZD1NYXRoLm1heCgxLE1hdGguZmxvb3IoNjU1MzUqTWF0aC5yYW5kb20oKSkpfW4ucHJvdG90eXBlLmFsbG9jYXRlPWZ1bmN0aW9uKCl7Y29uc3QgZT10aGlzLm5leHRJZCsrO3JldHVybiA2NTUzNj09PXRoaXMubmV4dElkJiYodGhpcy5uZXh0SWQ9MSksZX0sbi5wcm90b3R5cGUuZ2V0TGFzdEFsbG9jYXRlZD1mdW5jdGlvbigpe3JldHVybiAxPT09dGhpcy5uZXh0SWQ/NjU1MzU6dGhpcy5uZXh0SWQtMX0sbi5wcm90b3R5cGUucmVnaXN0ZXI9ZnVuY3Rpb24oZSl7cmV0dXJuITB9LG4ucHJvdG90eXBlLmRlYWxsb2NhdGU9ZnVuY3Rpb24oZSl7fSxuLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe30sdC5leHBvcnRzPW59LHt9XSw4OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgbj1lKFwieHRlbmRcIiksaT1lKFwicmVhZGFibGUtc3RyZWFtXCIpLlJlYWRhYmxlLG89e29iamVjdE1vZGU6ITB9LHM9e2NsZWFuOiEwfTtmdW5jdGlvbiBhKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGEpKXJldHVybiBuZXcgYShlKTt0aGlzLm9wdGlvbnM9ZXx8e30sdGhpcy5vcHRpb25zPW4ocyxlKSx0aGlzLl9pbmZsaWdodHM9bmV3IE1hcH1hLnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5faW5mbGlnaHRzLnNldChlLm1lc3NhZ2VJZCxlKSx0JiZ0KCksdGhpc30sYS5wcm90b3R5cGUuY3JlYXRlU3RyZWFtPWZ1bmN0aW9uKCl7Y29uc3QgZT1uZXcgaShvKSx0PVtdO2xldCByPSExLG49MDtyZXR1cm4gdGhpcy5faW5mbGlnaHRzLmZvckVhY2goZnVuY3Rpb24oZSxyKXt0LnB1c2goZSl9KSxlLl9yZWFkPWZ1bmN0aW9uKCl7IXImJm48dC5sZW5ndGg/dGhpcy5wdXNoKHRbbisrXSk6dGhpcy5wdXNoKG51bGwpfSxlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtpZihyKXJldHVybjtjb25zdCBlPXRoaXM7cj0hMCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5lbWl0KFwiY2xvc2VcIil9LDApfSxlfSxhLnByb3RvdHlwZS5kZWw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZT10aGlzLl9pbmZsaWdodHMuZ2V0KGUubWVzc2FnZUlkKSk/KHRoaXMuX2luZmxpZ2h0cy5kZWxldGUoZS5tZXNzYWdlSWQpLHQobnVsbCxlKSk6dCYmdChuZXcgRXJyb3IoXCJtaXNzaW5nIHBhY2tldFwiKSksdGhpc30sYS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuKGU9dGhpcy5faW5mbGlnaHRzLmdldChlLm1lc3NhZ2VJZCkpP3QobnVsbCxlKTp0JiZ0KG5ldyBFcnJvcihcIm1pc3NpbmcgcGFja2V0XCIpKSx0aGlzfSxhLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbihlKXt0aGlzLm9wdGlvbnMuY2xlYW4mJih0aGlzLl9pbmZsaWdodHM9bnVsbCksZSYmZSgpfSx0LmV4cG9ydHM9YX0se1wicmVhZGFibGUtc3RyZWFtXCI6NjkseHRlbmQ6ODF9XSw5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBuKSlyZXR1cm4gbmV3IG4oZSk7dGhpcy5hbGlhc1RvVG9waWM9e30sdGhpcy5tYXg9ZX1uLnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hKDA9PT10fHx0PnRoaXMubWF4KSYmKHRoaXMuYWxpYXNUb1RvcGljW3RdPWUsdGhpcy5sZW5ndGg9T2JqZWN0LmtleXModGhpcy5hbGlhc1RvVG9waWMpLmxlbmd0aCwhMCl9LG4ucHJvdG90eXBlLmdldFRvcGljQnlBbGlhcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hbGlhc1RvVG9waWNbZV19LG4ucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hbGlhc1RvVG9waWM9e319LHQuZXhwb3J0cz1ufSx7fV0sMTA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtjb25zdCBuPWUoXCJscnUtY2FjaGVcIiksaT1lKFwibnVtYmVyLWFsbG9jYXRvclwiKS5OdW1iZXJBbGxvY2F0b3I7ZnVuY3Rpb24gbyhlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBvKSlyZXR1cm4gbmV3IG8oZSk7ZT4wJiYodGhpcy5hbGlhc1RvVG9waWM9bmV3IG4oe21heDplfSksdGhpcy50b3BpY1RvQWxpYXM9e30sdGhpcy5udW1iZXJBbGxvY2F0b3I9bmV3IGkoMSxlKSx0aGlzLm1heD1lLHRoaXMubGVuZ3RoPTApfW8ucHJvdG90eXBlLnB1dD1mdW5jdGlvbihlLHQpe2lmKDA9PT10fHx0PnRoaXMubWF4KXJldHVybiExO2NvbnN0IHI9dGhpcy5hbGlhc1RvVG9waWMuZ2V0KHQpO3JldHVybiByJiZkZWxldGUgdGhpcy50b3BpY1RvQWxpYXNbcl0sdGhpcy5hbGlhc1RvVG9waWMuc2V0KHQsZSksdGhpcy50b3BpY1RvQWxpYXNbZV09dCx0aGlzLm51bWJlckFsbG9jYXRvci51c2UodCksdGhpcy5sZW5ndGg9dGhpcy5hbGlhc1RvVG9waWMubGVuZ3RoLCEwfSxvLnByb3RvdHlwZS5nZXRUb3BpY0J5QWxpYXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWxpYXNUb1RvcGljLmdldChlKX0sby5wcm90b3R5cGUuZ2V0QWxpYXNCeVRvcGljPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy50b3BpY1RvQWxpYXNbZV07cmV0dXJuIHZvaWQgMCE9PXQmJnRoaXMuYWxpYXNUb1RvcGljLmdldCh0KSx0fSxvLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuYWxpYXNUb1RvcGljLnJlc2V0KCksdGhpcy50b3BpY1RvQWxpYXM9e30sdGhpcy5udW1iZXJBbGxvY2F0b3IuY2xlYXIoKSx0aGlzLmxlbmd0aD0wfSxvLnByb3RvdHlwZS5nZXRMcnVBbGlhcz1mdW5jdGlvbigpe2NvbnN0IGU9dGhpcy5udW1iZXJBbGxvY2F0b3IuZmlyc3RWYWNhbnQoKTtyZXR1cm4gZXx8dGhpcy5hbGlhc1RvVG9waWMua2V5cygpW3RoaXMuYWxpYXNUb1RvcGljLmxlbmd0aC0xXX0sdC5leHBvcnRzPW99LHtcImxydS1jYWNoZVwiOjM3LFwibnVtYmVyLWFsbG9jYXRvclwiOjQ2fV0sMTE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe2NvbnN0IHQ9ZS5zcGxpdChcIi9cIik7Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYoXCIrXCIhPT10W2VdKXtpZihcIiNcIj09PXRbZV0pcmV0dXJuIGU9PT10Lmxlbmd0aC0xO2lmKC0xIT09dFtlXS5pbmRleE9mKFwiK1wiKXx8LTEhPT10W2VdLmluZGV4T2YoXCIjXCIpKXJldHVybiExfXJldHVybiEwfXQuZXhwb3J0cz17dmFsaWRhdGVUb3BpY3M6ZnVuY3Rpb24oZSl7aWYoMD09PWUubGVuZ3RoKXJldHVyblwiZW1wdHlfdG9waWNfbGlzdFwiO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKWlmKCFuKGVbdF0pKXJldHVybiBlW3RdO3JldHVybiBudWxsfX19LHt9XSwxMjpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyKXsoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtjb25zdCBuPWUoXCIuLi9jbGllbnRcIiksaT1lKFwiLi4vc3RvcmVcIiksbz1lKFwidXJsXCIpLHM9ZShcInh0ZW5kXCIpLGE9ZShcImRlYnVnXCIpKFwibXF0dGpzXCIpLGw9e307ZnVuY3Rpb24gdShlLHQpe2lmKGEoXCJjb25uZWN0aW5nIHRvIGFuIE1RVFQgYnJva2VyLi4uXCIpLFwib2JqZWN0XCIhPXR5cGVvZiBlfHx0fHwodD1lLGU9bnVsbCksdD10fHx7fSxlKXtjb25zdCByPW8ucGFyc2UoZSwhMCk7aWYobnVsbCE9ci5wb3J0JiYoci5wb3J0PU51bWJlcihyLnBvcnQpKSxudWxsPT09KHQ9cyhyLHQpKS5wcm90b2NvbCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHByb3RvY29sXCIpO3QucHJvdG9jb2w9dC5wcm90b2NvbC5yZXBsYWNlKC86JC8sXCJcIil9aWYoZnVuY3Rpb24oZSl7bGV0IHQ7ZS5hdXRoJiYoKHQ9ZS5hdXRoLm1hdGNoKC9eKC4rKTooLispJC8pKT8oZS51c2VybmFtZT10WzFdLGUucGFzc3dvcmQ9dFsyXSk6ZS51c2VybmFtZT1lLmF1dGgpfSh0KSx0LnF1ZXJ5JiZcInN0cmluZ1wiPT10eXBlb2YgdC5xdWVyeS5jbGllbnRJZCYmKHQuY2xpZW50SWQ9dC5xdWVyeS5jbGllbnRJZCksdC5jZXJ0JiZ0LmtleSl7aWYoIXQucHJvdG9jb2wpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBzZWN1cmUgcHJvdG9jb2wga2V5XCIpO2lmKC0xPT09W1wibXF0dHNcIixcIndzc1wiLFwid3hzXCIsXCJhbGlzXCJdLmluZGV4T2YodC5wcm90b2NvbCkpc3dpdGNoKHQucHJvdG9jb2wpe2Nhc2VcIm1xdHRcIjp0LnByb3RvY29sPVwibXF0dHNcIjticmVhaztjYXNlXCJ3c1wiOnQucHJvdG9jb2w9XCJ3c3NcIjticmVhaztjYXNlXCJ3eFwiOnQucHJvdG9jb2w9XCJ3eHNcIjticmVhaztjYXNlXCJhbGlcIjp0LnByb3RvY29sPVwiYWxpc1wiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByb3RvY29sIGZvciBzZWN1cmUgY29ubmVjdGlvbjogXCInK3QucHJvdG9jb2wrJ1wiIScpfX1pZighbFt0LnByb3RvY29sXSl7Y29uc3QgZT0tMSE9PVtcIm1xdHRzXCIsXCJ3c3NcIl0uaW5kZXhPZih0LnByb3RvY29sKTt0LnByb3RvY29sPVtcIm1xdHRcIixcIm1xdHRzXCIsXCJ3c1wiLFwid3NzXCIsXCJ3eFwiLFwid3hzXCIsXCJhbGlcIixcImFsaXNcIl0uZmlsdGVyKGZ1bmN0aW9uKHQscil7cmV0dXJuKCFlfHxyJTIhPTApJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBsW3RdfSlbMF19aWYoITE9PT10LmNsZWFuJiYhdC5jbGllbnRJZCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNsaWVudElkIGZvciB1bmNsZWFuIGNsaWVudHNcIik7dC5wcm90b2NvbCYmKHQuZGVmYXVsdFByb3RvY29sPXQucHJvdG9jb2wpO2NvbnN0IHI9bmV3IG4oZnVuY3Rpb24oZSl7cmV0dXJuIHQuc2VydmVycyYmKGUuX3JlY29ubmVjdENvdW50JiZlLl9yZWNvbm5lY3RDb3VudCE9PXQuc2VydmVycy5sZW5ndGh8fChlLl9yZWNvbm5lY3RDb3VudD0wKSx0Lmhvc3Q9dC5zZXJ2ZXJzW2UuX3JlY29ubmVjdENvdW50XS5ob3N0LHQucG9ydD10LnNlcnZlcnNbZS5fcmVjb25uZWN0Q291bnRdLnBvcnQsdC5wcm90b2NvbD10LnNlcnZlcnNbZS5fcmVjb25uZWN0Q291bnRdLnByb3RvY29sP3Quc2VydmVyc1tlLl9yZWNvbm5lY3RDb3VudF0ucHJvdG9jb2w6dC5kZWZhdWx0UHJvdG9jb2wsdC5ob3N0bmFtZT10Lmhvc3QsZS5fcmVjb25uZWN0Q291bnQrKyksYShcImNhbGxpbmcgc3RyZWFtYnVpbGRlciBmb3JcIix0LnByb3RvY29sKSxsW3QucHJvdG9jb2xdKGUsdCl9LHQpO3JldHVybiByLm9uKFwiZXJyb3JcIixmdW5jdGlvbigpe30pLHJ9dm9pZCAwIT09ciYmXCJicm93c2VyXCIhPT1yLnRpdGxlfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fPyhsLm1xdHQ9ZShcIi4vdGNwXCIpLGwudGNwPWUoXCIuL3RjcFwiKSxsLnNzbD1lKFwiLi90bHNcIiksbC50bHM9ZShcIi4vdGxzXCIpLGwubXF0dHM9ZShcIi4vdGxzXCIpKToobC53eD1lKFwiLi93eFwiKSxsLnd4cz1lKFwiLi93eFwiKSxsLmFsaT1lKFwiLi9hbGlcIiksbC5hbGlzPWUoXCIuL2FsaVwiKSksbC53cz1lKFwiLi93c1wiKSxsLndzcz1lKFwiLi93c1wiKSx0LmV4cG9ydHM9dSx0LmV4cG9ydHMuY29ubmVjdD11LHQuZXhwb3J0cy5NcXR0Q2xpZW50PW4sdC5leHBvcnRzLlN0b3JlPWl9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSl9LHtcIi4uL2NsaWVudFwiOjEsXCIuLi9zdG9yZVwiOjgsXCIuL2FsaVwiOjIsXCIuL3RjcFwiOjMsXCIuL3Rsc1wiOjQsXCIuL3dzXCI6NSxcIi4vd3hcIjo2LF9wcm9jZXNzOjUwLGRlYnVnOjE4LHVybDo3Nix4dGVuZDo4MX1dLDEzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5ieXRlTGVuZ3RoPWZ1bmN0aW9uKGUpe3ZhciB0PXUoZSkscj10WzBdLG49dFsxXTtyZXR1cm4gMyoocituKS80LW59LHIudG9CeXRlQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIHQscixuPXUoZSkscz1uWzBdLGE9blsxXSxsPW5ldyBvKGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gMyoodCtyKS80LXJ9KDAscyxhKSksYz0wLGg9YT4wP3MtNDpzO2ZvcihyPTA7cjxoO3IrPTQpdD1pW2UuY2hhckNvZGVBdChyKV08PDE4fGlbZS5jaGFyQ29kZUF0KHIrMSldPDwxMnxpW2UuY2hhckNvZGVBdChyKzIpXTw8NnxpW2UuY2hhckNvZGVBdChyKzMpXSxsW2MrK109dD4+MTYmMjU1LGxbYysrXT10Pj44JjI1NSxsW2MrK109MjU1JnQ7Mj09PWEmJih0PWlbZS5jaGFyQ29kZUF0KHIpXTw8MnxpW2UuY2hhckNvZGVBdChyKzEpXT4+NCxsW2MrK109MjU1JnQpOzE9PT1hJiYodD1pW2UuY2hhckNvZGVBdChyKV08PDEwfGlbZS5jaGFyQ29kZUF0KHIrMSldPDw0fGlbZS5jaGFyQ29kZUF0KHIrMildPj4yLGxbYysrXT10Pj44JjI1NSxsW2MrK109MjU1JnQpO3JldHVybiBsfSxyLmZyb21CeXRlQXJyYXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9ZS5sZW5ndGgsaT1yJTMsbz1bXSxzPTAsYT1yLWk7czxhO3MrPTE2MzgzKW8ucHVzaChjKGUscyxzKzE2MzgzPmE/YTpzKzE2MzgzKSk7MT09PWk/KHQ9ZVtyLTFdLG8ucHVzaChuW3Q+PjJdK25bdDw8NCY2M10rXCI9PVwiKSk6Mj09PWkmJih0PShlW3ItMl08PDgpK2Vbci0xXSxvLnB1c2goblt0Pj4xMF0rblt0Pj40JjYzXStuW3Q8PDImNjNdK1wiPVwiKSk7cmV0dXJuIG8uam9pbihcIlwiKX07Zm9yKHZhciBuPVtdLGk9W10sbz1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheT9VaW50OEFycmF5OkFycmF5LHM9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIsYT0wLGw9cy5sZW5ndGg7YTxsOysrYSluW2FdPXNbYV0saVtzLmNoYXJDb2RlQXQoYSldPWE7ZnVuY3Rpb24gdShlKXt2YXIgdD1lLmxlbmd0aDtpZih0JTQ+MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0XCIpO3ZhciByPWUuaW5kZXhPZihcIj1cIik7cmV0dXJuLTE9PT1yJiYocj10KSxbcixyPT09dD8wOjQtciU0XX1mdW5jdGlvbiBjKGUsdCxyKXtmb3IodmFyIGksbyxzPVtdLGE9dDthPHI7YSs9MylpPShlW2FdPDwxNiYxNjcxMTY4MCkrKGVbYSsxXTw8OCY2NTI4MCkrKDI1NSZlW2ErMl0pLHMucHVzaChuWyhvPWkpPj4xOCY2M10rbltvPj4xMiY2M10rbltvPj42JjYzXStuWzYzJm9dKTtyZXR1cm4gcy5qb2luKFwiXCIpfWlbXCItXCIuY2hhckNvZGVBdCgwKV09NjIsaVtcIl9cIi5jaGFyQ29kZUF0KDApXT02M30se31dLDE0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3R7QnVmZmVyOm59PWUoXCJidWZmZXJcIiksaT1TeW1ib2wuZm9yKFwiQnVmZmVyTGlzdFwiKTtmdW5jdGlvbiBvKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG8pKXJldHVybiBuZXcgbyhlKTtvLl9pbml0LmNhbGwodGhpcyxlKX1vLl9pbml0PWZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGkse3ZhbHVlOiEwfSksdGhpcy5fYnVmcz1bXSx0aGlzLmxlbmd0aD0wLGUmJnRoaXMuYXBwZW5kKGUpfSxvLnByb3RvdHlwZS5fbmV3PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgbyhlKX0sby5wcm90b3R5cGUuX29mZnNldD1mdW5jdGlvbihlKXtpZigwPT09ZSlyZXR1cm5bMCwwXTtsZXQgdD0wO2ZvcihsZXQgcj0wO3I8dGhpcy5fYnVmcy5sZW5ndGg7cisrKXtjb25zdCBuPXQrdGhpcy5fYnVmc1tyXS5sZW5ndGg7aWYoZTxufHxyPT09dGhpcy5fYnVmcy5sZW5ndGgtMSlyZXR1cm5bcixlLXRdO3Q9bn19LG8ucHJvdG90eXBlLl9yZXZlcnNlT2Zmc2V0PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZVswXTtsZXQgcj1lWzFdO2ZvcihsZXQgZT0wO2U8dDtlKyspcis9dGhpcy5fYnVmc1tlXS5sZW5ndGg7cmV0dXJuIHJ9LG8ucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtpZihlPnRoaXMubGVuZ3RofHxlPDApcmV0dXJuO2NvbnN0IHQ9dGhpcy5fb2Zmc2V0KGUpO3JldHVybiB0aGlzLl9idWZzW3RbMF1dW3RbMV1dfSxvLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbihlLHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlJiZlPDAmJihlKz10aGlzLmxlbmd0aCksXCJudW1iZXJcIj09dHlwZW9mIHQmJnQ8MCYmKHQrPXRoaXMubGVuZ3RoKSx0aGlzLmNvcHkobnVsbCwwLGUsdCl9LG8ucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oZSx0LHIsaSl7aWYoKFwibnVtYmVyXCIhPXR5cGVvZiByfHxyPDApJiYocj0wKSwoXCJudW1iZXJcIiE9dHlwZW9mIGl8fGk+dGhpcy5sZW5ndGgpJiYoaT10aGlzLmxlbmd0aCkscj49dGhpcy5sZW5ndGgpcmV0dXJuIGV8fG4uYWxsb2MoMCk7aWYoaTw9MClyZXR1cm4gZXx8bi5hbGxvYygwKTtjb25zdCBvPSEhZSxzPXRoaXMuX29mZnNldChyKSxhPWktcjtsZXQgbD1hLHU9byYmdHx8MCxjPXNbMV07aWYoMD09PXImJmk9PT10aGlzLmxlbmd0aCl7aWYoIW8pcmV0dXJuIDE9PT10aGlzLl9idWZzLmxlbmd0aD90aGlzLl9idWZzWzBdOm4uY29uY2F0KHRoaXMuX2J1ZnMsdGhpcy5sZW5ndGgpO2ZvcihsZXQgdD0wO3Q8dGhpcy5fYnVmcy5sZW5ndGg7dCsrKXRoaXMuX2J1ZnNbdF0uY29weShlLHUpLHUrPXRoaXMuX2J1ZnNbdF0ubGVuZ3RoO3JldHVybiBlfWlmKGw8PXRoaXMuX2J1ZnNbc1swXV0ubGVuZ3RoLWMpcmV0dXJuIG8/dGhpcy5fYnVmc1tzWzBdXS5jb3B5KGUsdCxjLGMrbCk6dGhpcy5fYnVmc1tzWzBdXS5zbGljZShjLGMrbCk7b3x8KGU9bi5hbGxvY1Vuc2FmZShhKSk7Zm9yKGxldCB0PXNbMF07dDx0aGlzLl9idWZzLmxlbmd0aDt0Kyspe2NvbnN0IHI9dGhpcy5fYnVmc1t0XS5sZW5ndGgtYztpZighKGw+cikpe3RoaXMuX2J1ZnNbdF0uY29weShlLHUsYyxjK2wpLHUrPXI7YnJlYWt9dGhpcy5fYnVmc1t0XS5jb3B5KGUsdSxjKSx1Kz1yLGwtPXIsYyYmKGM9MCl9cmV0dXJuIGUubGVuZ3RoPnU/ZS5zbGljZSgwLHUpOmV9LG8ucHJvdG90eXBlLnNoYWxsb3dTbGljZT1mdW5jdGlvbihlLHQpe2lmKGU9ZXx8MCx0PVwibnVtYmVyXCIhPXR5cGVvZiB0P3RoaXMubGVuZ3RoOnQsZTwwJiYoZSs9dGhpcy5sZW5ndGgpLHQ8MCYmKHQrPXRoaXMubGVuZ3RoKSxlPT09dClyZXR1cm4gdGhpcy5fbmV3KCk7Y29uc3Qgcj10aGlzLl9vZmZzZXQoZSksbj10aGlzLl9vZmZzZXQodCksaT10aGlzLl9idWZzLnNsaWNlKHJbMF0sblswXSsxKTtyZXR1cm4gMD09PW5bMV0/aS5wb3AoKTppW2kubGVuZ3RoLTFdPWlbaS5sZW5ndGgtMV0uc2xpY2UoMCxuWzFdKSwwIT09clsxXSYmKGlbMF09aVswXS5zbGljZShyWzFdKSksdGhpcy5fbmV3KGkpfSxvLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMuc2xpY2UodCxyKS50b1N0cmluZyhlKX0sby5wcm90b3R5cGUuY29uc3VtZT1mdW5jdGlvbihlKXtpZihlPU1hdGgudHJ1bmMoZSksTnVtYmVyLmlzTmFOKGUpfHxlPD0wKXJldHVybiB0aGlzO2Zvcig7dGhpcy5fYnVmcy5sZW5ndGg7KXtpZighKGU+PXRoaXMuX2J1ZnNbMF0ubGVuZ3RoKSl7dGhpcy5fYnVmc1swXT10aGlzLl9idWZzWzBdLnNsaWNlKGUpLHRoaXMubGVuZ3RoLT1lO2JyZWFrfWUtPXRoaXMuX2J1ZnNbMF0ubGVuZ3RoLHRoaXMubGVuZ3RoLT10aGlzLl9idWZzWzBdLmxlbmd0aCx0aGlzLl9idWZzLnNoaWZ0KCl9cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLmR1cGxpY2F0ZT1mdW5jdGlvbigpe2NvbnN0IGU9dGhpcy5fbmV3KCk7Zm9yKGxldCB0PTA7dDx0aGlzLl9idWZzLmxlbmd0aDt0KyspZS5hcHBlbmQodGhpcy5fYnVmc1t0XSk7cmV0dXJuIGV9LG8ucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihlKXtpZihudWxsPT1lKXJldHVybiB0aGlzO2lmKGUuYnVmZmVyKXRoaXMuX2FwcGVuZEJ1ZmZlcihuLmZyb20oZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCkpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShlKSlmb3IobGV0IHQ9MDt0PGUubGVuZ3RoO3QrKyl0aGlzLmFwcGVuZChlW3RdKTtlbHNlIGlmKHRoaXMuX2lzQnVmZmVyTGlzdChlKSlmb3IobGV0IHQ9MDt0PGUuX2J1ZnMubGVuZ3RoO3QrKyl0aGlzLmFwcGVuZChlLl9idWZzW3RdKTtlbHNlXCJudW1iZXJcIj09dHlwZW9mIGUmJihlPWUudG9TdHJpbmcoKSksdGhpcy5fYXBwZW5kQnVmZmVyKG4uZnJvbShlKSk7cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLl9hcHBlbmRCdWZmZXI9ZnVuY3Rpb24oZSl7dGhpcy5fYnVmcy5wdXNoKGUpLHRoaXMubGVuZ3RoKz1lLmxlbmd0aH0sby5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09ciYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJihyPXQsdD12b2lkIDApLFwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fEFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBCdWZmZXJMaXN0LCBvciBVaW50OEFycmF5LicpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlP2U9bi5mcm9tKFtlXSk6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZT1uLmZyb20oZSxyKTp0aGlzLl9pc0J1ZmZlckxpc3QoZSk/ZT1lLnNsaWNlKCk6QXJyYXkuaXNBcnJheShlLmJ1ZmZlcik/ZT1uLmZyb20oZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCk6bi5pc0J1ZmZlcihlKXx8KGU9bi5mcm9tKGUpKSx0PU51bWJlcih0fHwwKSxpc05hTih0KSYmKHQ9MCksdDwwJiYodD10aGlzLmxlbmd0aCt0KSx0PDAmJih0PTApLDA9PT1lLmxlbmd0aClyZXR1cm4gdD50aGlzLmxlbmd0aD90aGlzLmxlbmd0aDp0O2NvbnN0IGk9dGhpcy5fb2Zmc2V0KHQpO2xldCBvPWlbMF0scz1pWzFdO2Zvcig7bzx0aGlzLl9idWZzLmxlbmd0aDtvKyspe2NvbnN0IHQ9dGhpcy5fYnVmc1tvXTtmb3IoO3M8dC5sZW5ndGg7KXtpZih0Lmxlbmd0aC1zPj1lLmxlbmd0aCl7Y29uc3Qgcj10LmluZGV4T2YoZSxzKTtpZigtMSE9PXIpcmV0dXJuIHRoaXMuX3JldmVyc2VPZmZzZXQoW28scl0pO3M9dC5sZW5ndGgtZS5sZW5ndGgrMX1lbHNle2NvbnN0IHQ9dGhpcy5fcmV2ZXJzZU9mZnNldChbbyxzXSk7aWYodGhpcy5fbWF0Y2godCxlKSlyZXR1cm4gdDtzKyt9fXM9MH1yZXR1cm4tMX0sby5wcm90b3R5cGUuX21hdGNoPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5sZW5ndGgtZTx0Lmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IHI9MDtyPHQubGVuZ3RoO3IrKylpZih0aGlzLmdldChlK3IpIT09dFtyXSlyZXR1cm4hMTtyZXR1cm4hMH0sZnVuY3Rpb24oKXtjb25zdCBlPXtyZWFkRG91YmxlQkU6OCxyZWFkRG91YmxlTEU6OCxyZWFkRmxvYXRCRTo0LHJlYWRGbG9hdExFOjQscmVhZEludDMyQkU6NCxyZWFkSW50MzJMRTo0LHJlYWRVSW50MzJCRTo0LHJlYWRVSW50MzJMRTo0LHJlYWRJbnQxNkJFOjIscmVhZEludDE2TEU6MixyZWFkVUludDE2QkU6MixyZWFkVUludDE2TEU6MixyZWFkSW50ODoxLHJlYWRVSW50ODoxLHJlYWRJbnRCRTpudWxsLHJlYWRJbnRMRTpudWxsLHJlYWRVSW50QkU6bnVsbCxyZWFkVUludExFOm51bGx9O2Zvcihjb25zdCB0IGluIGUpIWZ1bmN0aW9uKHQpe28ucHJvdG90eXBlW3RdPW51bGw9PT1lW3RdP2Z1bmN0aW9uKGUscil7cmV0dXJuIHRoaXMuc2xpY2UoZSxlK3IpW3RdKDAscil9OmZ1bmN0aW9uKHI9MCl7cmV0dXJuIHRoaXMuc2xpY2UocixyK2VbdF0pW3RdKDApfX0odCl9KCksby5wcm90b3R5cGUuX2lzQnVmZmVyTGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIG98fG8uaXNCdWZmZXJMaXN0KGUpfSxvLmlzQnVmZmVyTGlzdD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmZVtpXX0sdC5leHBvcnRzPW99LHtidWZmZXI6MTd9XSwxNTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IG49ZShcInJlYWRhYmxlLXN0cmVhbVwiKS5EdXBsZXgsaT1lKFwiaW5oZXJpdHNcIiksbz1lKFwiLi9CdWZmZXJMaXN0XCIpO2Z1bmN0aW9uIHMoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBzKGUpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpe3RoaXMuX2NhbGxiYWNrPWU7Y29uc3QgdD1mdW5jdGlvbihlKXt0aGlzLl9jYWxsYmFjayYmKHRoaXMuX2NhbGxiYWNrKGUpLHRoaXMuX2NhbGxiYWNrPW51bGwpfS5iaW5kKHRoaXMpO3RoaXMub24oXCJwaXBlXCIsZnVuY3Rpb24oZSl7ZS5vbihcImVycm9yXCIsdCl9KSx0aGlzLm9uKFwidW5waXBlXCIsZnVuY3Rpb24oZSl7ZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsdCl9KSxlPW51bGx9by5faW5pdC5jYWxsKHRoaXMsZSksbi5jYWxsKHRoaXMpfWkocyxuKSxPYmplY3QuYXNzaWduKHMucHJvdG90eXBlLG8ucHJvdG90eXBlKSxzLnByb3RvdHlwZS5fbmV3PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcyhlKX0scy5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLl9hcHBlbmRCdWZmZXIoZSksXCJmdW5jdGlvblwiPT10eXBlb2YgciYmcigpfSxzLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbihlKXtpZighdGhpcy5sZW5ndGgpcmV0dXJuIHRoaXMucHVzaChudWxsKTtlPU1hdGgubWluKGUsdGhpcy5sZW5ndGgpLHRoaXMucHVzaCh0aGlzLnNsaWNlKDAsZSkpLHRoaXMuY29uc3VtZShlKX0scy5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUpe24ucHJvdG90eXBlLmVuZC5jYWxsKHRoaXMsZSksdGhpcy5fY2FsbGJhY2smJih0aGlzLl9jYWxsYmFjayhudWxsLHRoaXMuc2xpY2UoKSksdGhpcy5fY2FsbGJhY2s9bnVsbCl9LHMucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7dGhpcy5fYnVmcy5sZW5ndGg9MCx0aGlzLmxlbmd0aD0wLHQoZSl9LHMucHJvdG90eXBlLl9pc0J1ZmZlckxpc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBzfHxlIGluc3RhbmNlb2Ygb3x8cy5pc0J1ZmZlckxpc3QoZSl9LHMuaXNCdWZmZXJMaXN0PW8uaXNCdWZmZXJMaXN0LHQuZXhwb3J0cz1zLHQuZXhwb3J0cy5CdWZmZXJMaXN0U3RyZWFtPXMsdC5leHBvcnRzLkJ1ZmZlckxpc3Q9b30se1wiLi9CdWZmZXJMaXN0XCI6MTQsaW5oZXJpdHM6MjQsXCJyZWFkYWJsZS1zdHJlYW1cIjo2OX1dLDE2OltmdW5jdGlvbihlLHQscil7fSx7fV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24odCl7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9ZShcImJhc2U2NC1qc1wiKSxuPWUoXCJpZWVlNzU0XCIpO3IuQnVmZmVyPXMsci5TbG93QnVmZmVyPWZ1bmN0aW9uKGUpeytlIT1lJiYoZT0wKTtyZXR1cm4gcy5hbGxvYygrZSl9LHIuSU5TUEVDVF9NQVhfQllURVM9NTA7dmFyIGk9MjE0NzQ4MzY0NztmdW5jdGlvbiBvKGUpe2lmKGU+aSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKTt2YXIgdD1uZXcgVWludDhBcnJheShlKTtyZXR1cm4gdC5fX3Byb3RvX189cy5wcm90b3R5cGUsdH1mdW5jdGlvbiBzKGUsdCxyKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTtyZXR1cm4gdShlKX1yZXR1cm4gYShlLHQscil9ZnVuY3Rpb24gYShlLHQscil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGZ1bmN0aW9uKGUsdCl7XCJzdHJpbmdcIj09dHlwZW9mIHQmJlwiXCIhPT10fHwodD1cInV0ZjhcIik7aWYoIXMuaXNFbmNvZGluZyh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrdCk7dmFyIHI9MHxmKGUsdCksbj1vKHIpLGk9bi53cml0ZShlLHQpO2khPT1yJiYobj1uLnNsaWNlKDAsaSkpO3JldHVybiBufShlLHQpO2lmKEFycmF5QnVmZmVyLmlzVmlldyhlKSlyZXR1cm4gYyhlKTtpZihudWxsPT1lKXRocm93IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiBlKTtpZihxKGUsQXJyYXlCdWZmZXIpfHxlJiZxKGUuYnVmZmVyLEFycmF5QnVmZmVyKSlyZXR1cm4gZnVuY3Rpb24oZSx0LHIpe2lmKHQ8MHx8ZS5ieXRlTGVuZ3RoPHQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wib2Zmc2V0XCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7aWYoZS5ieXRlTGVuZ3RoPHQrKHJ8fDApKXRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpO3ZhciBuO249dm9pZCAwPT09dCYmdm9pZCAwPT09cj9uZXcgVWludDhBcnJheShlKTp2b2lkIDA9PT1yP25ldyBVaW50OEFycmF5KGUsdCk6bmV3IFVpbnQ4QXJyYXkoZSx0LHIpO3JldHVybiBuLl9fcHJvdG9fXz1zLnByb3RvdHlwZSxufShlLHQscik7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTt2YXIgbj1lLnZhbHVlT2YmJmUudmFsdWVPZigpO2lmKG51bGwhPW4mJm4hPT1lKXJldHVybiBzLmZyb20obix0LHIpO3ZhciBpPWZ1bmN0aW9uKGUpe2lmKHMuaXNCdWZmZXIoZSkpe3ZhciB0PTB8aChlLmxlbmd0aCkscj1vKHQpO3JldHVybiAwPT09ci5sZW5ndGg/cjooZS5jb3B5KHIsMCwwLHQpLHIpfWlmKHZvaWQgMCE9PWUubGVuZ3RoKXJldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlLmxlbmd0aHx8RChlLmxlbmd0aCk/bygwKTpjKGUpO2lmKFwiQnVmZmVyXCI9PT1lLnR5cGUmJkFycmF5LmlzQXJyYXkoZS5kYXRhKSlyZXR1cm4gYyhlLmRhdGEpfShlKTtpZihpKXJldHVybiBpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJm51bGwhPVN5bWJvbC50b1ByaW1pdGl2ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZVtTeW1ib2wudG9QcmltaXRpdmVdKXJldHVybiBzLmZyb20oZVtTeW1ib2wudG9QcmltaXRpdmVdKFwic3RyaW5nXCIpLHQscik7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiBlKX1mdW5jdGlvbiBsKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKTtpZihlPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrZSsnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gbChlKSxvKGU8MD8wOjB8aChlKSl9ZnVuY3Rpb24gYyhlKXtmb3IodmFyIHQ9ZS5sZW5ndGg8MD8wOjB8aChlLmxlbmd0aCkscj1vKHQpLG49MDtuPHQ7bis9MSlyW25dPTI1NSZlW25dO3JldHVybiByfWZ1bmN0aW9uIGgoZSl7aWYoZT49aSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gc2l6ZTogMHhcIitpLnRvU3RyaW5nKDE2KStcIiBieXRlc1wiKTtyZXR1cm4gMHxlfWZ1bmN0aW9uIGYoZSx0KXtpZihzLmlzQnVmZmVyKGUpKXJldHVybiBlLmxlbmd0aDtpZihBcnJheUJ1ZmZlci5pc1ZpZXcoZSl8fHEoZSxBcnJheUJ1ZmZlcikpcmV0dXJuIGUuYnl0ZUxlbmd0aDtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKTt2YXIgcj1lLmxlbmd0aCxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmITA9PT1hcmd1bWVudHNbMl07aWYoIW4mJjA9PT1yKXJldHVybiAwO2Zvcih2YXIgaT0hMTs7KXN3aXRjaCh0KXtjYXNlXCJhc2NpaVwiOmNhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiByO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBMKGUpLmxlbmd0aDtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gMipyO2Nhc2VcImhleFwiOnJldHVybiByPj4+MTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gaihlKS5sZW5ndGg7ZGVmYXVsdDppZihpKXJldHVybiBuPy0xOkwoZSkubGVuZ3RoO3Q9KFwiXCIrdCkudG9Mb3dlckNhc2UoKSxpPSEwfX1mdW5jdGlvbiBwKGUsdCxyKXt2YXIgbj1lW3RdO2VbdF09ZVtyXSxlW3JdPW59ZnVuY3Rpb24gZChlLHQscixuLGkpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm4tMTtpZihcInN0cmluZ1wiPT10eXBlb2Ygcj8obj1yLHI9MCk6cj4yMTQ3NDgzNjQ3P3I9MjE0NzQ4MzY0NzpyPC0yMTQ3NDgzNjQ4JiYocj0tMjE0NzQ4MzY0OCksRChyPStyKSYmKHI9aT8wOmUubGVuZ3RoLTEpLHI8MCYmKHI9ZS5sZW5ndGgrcikscj49ZS5sZW5ndGgpe2lmKGkpcmV0dXJuLTE7cj1lLmxlbmd0aC0xfWVsc2UgaWYocjwwKXtpZighaSlyZXR1cm4tMTtyPTB9aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PXMuZnJvbSh0LG4pKSxzLmlzQnVmZmVyKHQpKXJldHVybiAwPT09dC5sZW5ndGg/LTE6ZyhlLHQscixuLGkpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0Jj0yNTUsXCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZj9pP1VpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChlLHQscik6VWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChlLHQscik6ZyhlLFt0XSxyLG4saSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlclwiKX1mdW5jdGlvbiBnKGUsdCxyLG4saSl7dmFyIG8scz0xLGE9ZS5sZW5ndGgsbD10Lmxlbmd0aDtpZih2b2lkIDAhPT1uJiYoXCJ1Y3MyXCI9PT0obj1TdHJpbmcobikudG9Mb3dlckNhc2UoKSl8fFwidWNzLTJcIj09PW58fFwidXRmMTZsZVwiPT09bnx8XCJ1dGYtMTZsZVwiPT09bikpe2lmKGUubGVuZ3RoPDJ8fHQubGVuZ3RoPDIpcmV0dXJuLTE7cz0yLGEvPTIsbC89MixyLz0yfWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4gMT09PXM/ZVt0XTplLnJlYWRVSW50MTZCRSh0KnMpfWlmKGkpe3ZhciBjPS0xO2ZvcihvPXI7bzxhO28rKylpZih1KGUsbyk9PT11KHQsLTE9PT1jPzA6by1jKSl7aWYoLTE9PT1jJiYoYz1vKSxvLWMrMT09PWwpcmV0dXJuIGMqc31lbHNlLTEhPT1jJiYoby09by1jKSxjPS0xfWVsc2UgZm9yKHIrbD5hJiYocj1hLWwpLG89cjtvPj0wO28tLSl7Zm9yKHZhciBoPSEwLGY9MDtmPGw7ZisrKWlmKHUoZSxvK2YpIT09dSh0LGYpKXtoPSExO2JyZWFrfWlmKGgpcmV0dXJuIG99cmV0dXJuLTF9ZnVuY3Rpb24geShlLHQscixuKXtyPU51bWJlcihyKXx8MDt2YXIgaT1lLmxlbmd0aC1yO24/KG49TnVtYmVyKG4pKT5pJiYobj1pKTpuPWk7dmFyIG89dC5sZW5ndGg7bj5vLzImJihuPW8vMik7Zm9yKHZhciBzPTA7czxuOysrcyl7dmFyIGE9cGFyc2VJbnQodC5zdWJzdHIoMipzLDIpLDE2KTtpZihEKGEpKXJldHVybiBzO2VbcitzXT1hfXJldHVybiBzfWZ1bmN0aW9uIGIoZSx0LHIsbil7cmV0dXJuIFUoTCh0LGUubGVuZ3RoLXIpLGUscixuKX1mdW5jdGlvbiBtKGUsdCxyLG4pe3JldHVybiBVKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDsrK3IpdC5wdXNoKDI1NSZlLmNoYXJDb2RlQXQocikpO3JldHVybiB0fSh0KSxlLHIsbil9ZnVuY3Rpb24gdihlLHQscixuKXtyZXR1cm4gbShlLHQscixuKX1mdW5jdGlvbiB3KGUsdCxyLG4pe3JldHVybiBVKGoodCksZSxyLG4pfWZ1bmN0aW9uIF8oZSx0LHIsbil7cmV0dXJuIFUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbixpLG89W10scz0wO3M8ZS5sZW5ndGgmJiEoKHQtPTIpPDApOysrcylyPWUuY2hhckNvZGVBdChzKSxuPXI+PjgsaT1yJTI1NixvLnB1c2goaSksby5wdXNoKG4pO3JldHVybiBvfSh0LGUubGVuZ3RoLXIpLGUscixuKX1mdW5jdGlvbiBrKGUscixuKXtyZXR1cm4gMD09PXImJm49PT1lLmxlbmd0aD90LmZyb21CeXRlQXJyYXkoZSk6dC5mcm9tQnl0ZUFycmF5KGUuc2xpY2UocixuKSl9ZnVuY3Rpb24gUyhlLHQscil7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIG49W10saT10O2k8cjspe3ZhciBvLHMsYSxsLHU9ZVtpXSxjPW51bGwsaD11PjIzOT80OnU+MjIzPzM6dT4xOTE/MjoxO2lmKGkraDw9cilzd2l0Y2goaCl7Y2FzZSAxOnU8MTI4JiYoYz11KTticmVhaztjYXNlIDI6MTI4PT0oMTkyJihvPWVbaSsxXSkpJiYobD0oMzEmdSk8PDZ8NjMmbyk+MTI3JiYoYz1sKTticmVhaztjYXNlIDM6bz1lW2krMV0scz1lW2krMl0sMTI4PT0oMTkyJm8pJiYxMjg9PSgxOTImcykmJihsPSgxNSZ1KTw8MTJ8KDYzJm8pPDw2fDYzJnMpPjIwNDcmJihsPDU1Mjk2fHxsPjU3MzQzKSYmKGM9bCk7YnJlYWs7Y2FzZSA0Om89ZVtpKzFdLHM9ZVtpKzJdLGE9ZVtpKzNdLDEyOD09KDE5MiZvKSYmMTI4PT0oMTkyJnMpJiYxMjg9PSgxOTImYSkmJihsPSgxNSZ1KTw8MTh8KDYzJm8pPDwxMnwoNjMmcyk8PDZ8NjMmYSk+NjU1MzUmJmw8MTExNDExMiYmKGM9bCl9bnVsbD09PWM/KGM9NjU1MzMsaD0xKTpjPjY1NTM1JiYoYy09NjU1MzYsbi5wdXNoKGM+Pj4xMCYxMDIzfDU1Mjk2KSxjPTU2MzIwfDEwMjMmYyksbi5wdXNoKGMpLGkrPWh9cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PWUubGVuZ3RoO2lmKHQ8PUUpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGUpO3ZhciByPVwiXCIsbj0wO2Zvcig7bjx0OylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlLnNsaWNlKG4sbis9RSkpO3JldHVybiByfShuKX1yLmtNYXhMZW5ndGg9aSxzLlRZUEVEX0FSUkFZX1NVUFBPUlQ9ZnVuY3Rpb24oKXt0cnl7dmFyIGU9bmV3IFVpbnQ4QXJyYXkoMSk7cmV0dXJuIGUuX19wcm90b19fPXtfX3Byb3RvX186VWludDhBcnJheS5wcm90b3R5cGUsZm9vOmZ1bmN0aW9uKCl7cmV0dXJuIDQyfX0sNDI9PT1lLmZvbygpfWNhdGNoKGUpe3JldHVybiExfX0oKSxzLlRZUEVEX0FSUkFZX1NVUFBPUlR8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjb25zb2xlfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBjb25zb2xlLmVycm9yfHxjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5IGBidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuXCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSxcInBhcmVudFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2lmKHMuaXNCdWZmZXIodGhpcykpcmV0dXJuIHRoaXMuYnVmZmVyfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLnByb3RvdHlwZSxcIm9mZnNldFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2lmKHMuaXNCdWZmZXIodGhpcykpcmV0dXJuIHRoaXMuYnl0ZU9mZnNldH19KSxcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZudWxsIT1TeW1ib2wuc3BlY2llcyYmc1tTeW1ib2wuc3BlY2llc109PT1zJiZPYmplY3QuZGVmaW5lUHJvcGVydHkocyxTeW1ib2wuc3BlY2llcyx7dmFsdWU6bnVsbCxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMX0pLHMucG9vbFNpemU9ODE5MixzLmZyb209ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBhKGUsdCxyKX0scy5wcm90b3R5cGUuX19wcm90b19fPVVpbnQ4QXJyYXkucHJvdG90eXBlLHMuX19wcm90b19fPVVpbnQ4QXJyYXkscy5hbGxvYz1mdW5jdGlvbihlLHQscil7cmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbChlKSxlPD0wP28oZSk6dm9pZCAwIT09dD9cInN0cmluZ1wiPT10eXBlb2Ygcj9vKGUpLmZpbGwodCxyKTpvKGUpLmZpbGwodCk6byhlKX0oZSx0LHIpfSxzLmFsbG9jVW5zYWZlPWZ1bmN0aW9uKGUpe3JldHVybiB1KGUpfSxzLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbihlKXtyZXR1cm4gdShlKX0scy5pc0J1ZmZlcj1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmITA9PT1lLl9pc0J1ZmZlciYmZSE9PXMucHJvdG90eXBlfSxzLmNvbXBhcmU9ZnVuY3Rpb24oZSx0KXtpZihxKGUsVWludDhBcnJheSkmJihlPXMuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLHEodCxVaW50OEFycmF5KSYmKHQ9cy5mcm9tKHQsdC5vZmZzZXQsdC5ieXRlTGVuZ3RoKSksIXMuaXNCdWZmZXIoZSl8fCFzLmlzQnVmZmVyKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKTtpZihlPT09dClyZXR1cm4gMDtmb3IodmFyIHI9ZS5sZW5ndGgsbj10Lmxlbmd0aCxpPTAsbz1NYXRoLm1pbihyLG4pO2k8bzsrK2kpaWYoZVtpXSE9PXRbaV0pe3I9ZVtpXSxuPXRbaV07YnJlYWt9cmV0dXJuIHI8bj8tMTpuPHI/MTowfSxzLmlzRW5jb2Rpbmc9ZnVuY3Rpb24oZSl7c3dpdGNoKFN0cmluZyhlKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJoZXhcIjpjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOmNhc2VcImJhc2U2NFwiOmNhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSxzLmNvbmNhdD1mdW5jdGlvbihlLHQpe2lmKCFBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gcy5hbGxvYygwKTt2YXIgcjtpZih2b2lkIDA9PT10KWZvcih0PTAscj0wO3I8ZS5sZW5ndGg7KytyKXQrPWVbcl0ubGVuZ3RoO3ZhciBuPXMuYWxsb2NVbnNhZmUodCksaT0wO2ZvcihyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07aWYocShvLFVpbnQ4QXJyYXkpJiYobz1zLmZyb20obykpLCFzLmlzQnVmZmVyKG8pKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO28uY29weShuLGkpLGkrPW8ubGVuZ3RofXJldHVybiBufSxzLmJ5dGVMZW5ndGg9ZixzLnByb3RvdHlwZS5faXNCdWZmZXI9ITAscy5wcm90b3R5cGUuc3dhcDE2PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSUyIT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHNcIik7Zm9yKHZhciB0PTA7dDxlO3QrPTIpcCh0aGlzLHQsdCsxKTtyZXR1cm4gdGhpc30scy5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSU0IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHNcIik7Zm9yKHZhciB0PTA7dDxlO3QrPTQpcCh0aGlzLHQsdCszKSxwKHRoaXMsdCsxLHQrMik7cmV0dXJuIHRoaXN9LHMucHJvdG90eXBlLnN3YXA2ND1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlOCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz04KXAodGhpcyx0LHQrNykscCh0aGlzLHQrMSx0KzYpLHAodGhpcyx0KzIsdCs1KSxwKHRoaXMsdCszLHQrNCk7cmV0dXJuIHRoaXN9LHMucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7cmV0dXJuIDA9PT1lP1wiXCI6MD09PWFyZ3VtZW50cy5sZW5ndGg/Uyh0aGlzLDAsZSk6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPSExO2lmKCh2b2lkIDA9PT10fHx0PDApJiYodD0wKSx0PnRoaXMubGVuZ3RoKXJldHVyblwiXCI7aWYoKHZvaWQgMD09PXJ8fHI+dGhpcy5sZW5ndGgpJiYocj10aGlzLmxlbmd0aCkscjw9MClyZXR1cm5cIlwiO2lmKChyPj4+PTApPD0odD4+Pj0wKSlyZXR1cm5cIlwiO2ZvcihlfHwoZT1cInV0ZjhcIik7Oylzd2l0Y2goZSl7Y2FzZVwiaGV4XCI6cmV0dXJuIHgodGhpcyx0LHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBTKHRoaXMsdCxyKTtjYXNlXCJhc2NpaVwiOnJldHVybiBDKHRoaXMsdCxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gVCh0aGlzLHQscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIGsodGhpcyx0LHIpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBBKHRoaXMsdCxyKTtkZWZhdWx0OmlmKG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2UpO2U9KGUrXCJcIikudG9Mb3dlckNhc2UoKSxuPSEwfX0uYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZz1zLnByb3RvdHlwZS50b1N0cmluZyxzLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oZSl7aWYoIXMuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7cmV0dXJuIHRoaXM9PT1lfHwwPT09cy5jb21wYXJlKHRoaXMsZSl9LHMucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24oKXt2YXIgZT1cIlwiLHQ9ci5JTlNQRUNUX01BWF9CWVRFUztyZXR1cm4gZT10aGlzLnRvU3RyaW5nKFwiaGV4XCIsMCx0KS5yZXBsYWNlKC8oLnsyfSkvZyxcIiQxIFwiKS50cmltKCksdGhpcy5sZW5ndGg+dCYmKGUrPVwiIC4uLiBcIiksXCI8QnVmZmVyIFwiK2UrXCI+XCJ9LHMucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24oZSx0LHIsbixpKXtpZihxKGUsVWludDhBcnJheSkmJihlPXMuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLCFzLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7aWYodm9pZCAwPT09dCYmKHQ9MCksdm9pZCAwPT09ciYmKHI9ZT9lLmxlbmd0aDowKSx2b2lkIDA9PT1uJiYobj0wKSx2b2lkIDA9PT1pJiYoaT10aGlzLmxlbmd0aCksdDwwfHxyPmUubGVuZ3RofHxuPDB8fGk+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYobj49aSYmdD49cilyZXR1cm4gMDtpZihuPj1pKXJldHVybi0xO2lmKHQ+PXIpcmV0dXJuIDE7aWYodD4+Pj0wLHI+Pj49MCxuPj4+PTAsaT4+Pj0wLHRoaXM9PT1lKXJldHVybiAwO2Zvcih2YXIgbz1pLW4sYT1yLXQsbD1NYXRoLm1pbihvLGEpLHU9dGhpcy5zbGljZShuLGkpLGM9ZS5zbGljZSh0LHIpLGg9MDtoPGw7KytoKWlmKHVbaF0hPT1jW2hdKXtvPXVbaF0sYT1jW2hdO2JyZWFrfXJldHVybiBvPGE/LTE6YTxvPzE6MH0scy5wcm90b3R5cGUuaW5jbHVkZXM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybi0xIT09dGhpcy5pbmRleE9mKGUsdCxyKX0scy5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlLHQscil7cmV0dXJuIGQodGhpcyxlLHQsciwhMCl9LHMucHJvdG90eXBlLmxhc3RJbmRleE9mPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZCh0aGlzLGUsdCxyLCExKX0scy5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LHIsbil7aWYodm9pZCAwPT09dCluPVwidXRmOFwiLHI9dGhpcy5sZW5ndGgsdD0wO2Vsc2UgaWYodm9pZCAwPT09ciYmXCJzdHJpbmdcIj09dHlwZW9mIHQpbj10LHI9dGhpcy5sZW5ndGgsdD0wO2Vsc2V7aWYoIWlzRmluaXRlKHQpKXRocm93IG5ldyBFcnJvcihcIkJ1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkXCIpO3Q+Pj49MCxpc0Zpbml0ZShyKT8ocj4+Pj0wLHZvaWQgMD09PW4mJihuPVwidXRmOFwiKSk6KG49cixyPXZvaWQgMCl9dmFyIGk9dGhpcy5sZW5ndGgtdDtpZigodm9pZCAwPT09cnx8cj5pKSYmKHI9aSksZS5sZW5ndGg+MCYmKHI8MHx8dDwwKXx8dD50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO258fChuPVwidXRmOFwiKTtmb3IodmFyIG89ITE7Oylzd2l0Y2gobil7Y2FzZVwiaGV4XCI6cmV0dXJuIHkodGhpcyxlLHQscik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIGIodGhpcyxlLHQscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gbSh0aGlzLGUsdCxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdih0aGlzLGUsdCxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gdyh0aGlzLGUsdCxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gXyh0aGlzLGUsdCxyKTtkZWZhdWx0OmlmKG8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK24pO249KFwiXCIrbikudG9Mb3dlckNhc2UoKSxvPSEwfX0scy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJCdWZmZXJcIixkYXRhOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2Fycnx8dGhpcywwKX19O3ZhciBFPTQwOTY7ZnVuY3Rpb24gQyhlLHQscil7dmFyIG49XCJcIjtyPU1hdGgubWluKGUubGVuZ3RoLHIpO2Zvcih2YXIgaT10O2k8cjsrK2kpbis9U3RyaW5nLmZyb21DaGFyQ29kZSgxMjcmZVtpXSk7cmV0dXJuIG59ZnVuY3Rpb24gVChlLHQscil7dmFyIG49XCJcIjtyPU1hdGgubWluKGUubGVuZ3RoLHIpO2Zvcih2YXIgaT10O2k8cjsrK2kpbis9U3RyaW5nLmZyb21DaGFyQ29kZShlW2ldKTtyZXR1cm4gbn1mdW5jdGlvbiB4KGUsdCxyKXt2YXIgbj1lLmxlbmd0aDsoIXR8fHQ8MCkmJih0PTApLCghcnx8cjwwfHxyPm4pJiYocj1uKTtmb3IodmFyIGk9XCJcIixvPXQ7bzxyOysrbylpKz1OKGVbb10pO3JldHVybiBpfWZ1bmN0aW9uIEEoZSx0LHIpe2Zvcih2YXIgbj1lLnNsaWNlKHQsciksaT1cIlwiLG89MDtvPG4ubGVuZ3RoO28rPTIpaSs9U3RyaW5nLmZyb21DaGFyQ29kZShuW29dKzI1NipuW28rMV0pO3JldHVybiBpfWZ1bmN0aW9uIEkoZSx0LHIpe2lmKGUlMSE9MHx8ZTwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwib2Zmc2V0IGlzIG5vdCB1aW50XCIpO2lmKGUrdD5yKXRocm93IG5ldyBSYW5nZUVycm9yKFwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKX1mdW5jdGlvbiBQKGUsdCxyLG4saSxvKXtpZighcy5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZih0Pml8fHQ8byl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKTtpZihyK24+ZS5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9ZnVuY3Rpb24gTyhlLHQscixuLGksbyl7aWYocituPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKHI8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBCKGUsdCxyLGksbyl7cmV0dXJuIHQ9K3Qscj4+Pj0wLG98fE8oZSwwLHIsNCksbi53cml0ZShlLHQscixpLDIzLDQpLHIrNH1mdW5jdGlvbiBSKGUsdCxyLGksbyl7cmV0dXJuIHQ9K3Qscj4+Pj0wLG98fE8oZSwwLHIsOCksbi53cml0ZShlLHQscixpLDUyLDgpLHIrOH1zLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMubGVuZ3RoO2U9fn5lLHQ9dm9pZCAwPT09dD9yOn5+dCxlPDA/KGUrPXIpPDAmJihlPTApOmU+ciYmKGU9ciksdDwwPyh0Kz1yKTwwJiYodD0wKTp0PnImJih0PXIpLHQ8ZSYmKHQ9ZSk7dmFyIG49dGhpcy5zdWJhcnJheShlLHQpO3JldHVybiBuLl9fcHJvdG9fXz1zLnByb3RvdHlwZSxufSxzLnByb3RvdHlwZS5yZWFkVUludExFPWZ1bmN0aW9uKGUsdCxyKXtlPj4+PTAsdD4+Pj0wLHJ8fEkoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG49dGhpc1tlXSxpPTEsbz0wOysrbzx0JiYoaSo9MjU2KTspbis9dGhpc1tlK29dKmk7cmV0dXJuIG59LHMucHJvdG90eXBlLnJlYWRVSW50QkU9ZnVuY3Rpb24oZSx0LHIpe2U+Pj49MCx0Pj4+PTAscnx8SShlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10aGlzW2UrLS10XSxpPTE7dD4wJiYoaSo9MjU2KTspbis9dGhpc1tlKy0tdF0qaTtyZXR1cm4gbn0scy5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsMSx0aGlzLmxlbmd0aCksdGhpc1tlXX0scy5wcm90b3R5cGUucmVhZFVJbnQxNkxFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsMix0aGlzLmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh9LHMucHJvdG90eXBlLnJlYWRVSW50MTZCRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDh8dGhpc1tlKzFdfSxzLnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw0LHRoaXMubGVuZ3RoKSwodGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNikrMTY3NzcyMTYqdGhpc1tlKzNdfSxzLnByb3RvdHlwZS5yZWFkVUludDMyQkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw0LHRoaXMubGVuZ3RoKSwxNjc3NzIxNip0aGlzW2VdKyh0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM10pfSxzLnByb3RvdHlwZS5yZWFkSW50TEU9ZnVuY3Rpb24oZSx0LHIpe2U+Pj49MCx0Pj4+PTAscnx8SShlLHQsdGhpcy5sZW5ndGgpO2Zvcih2YXIgbj10aGlzW2VdLGk9MSxvPTA7KytvPHQmJihpKj0yNTYpOyluKz10aGlzW2Urb10qaTtyZXR1cm4gbj49KGkqPTEyOCkmJihuLT1NYXRoLnBvdygyLDgqdCkpLG59LHMucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbihlLHQscil7ZT4+Pj0wLHQ+Pj49MCxyfHxJKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBuPXQsaT0xLG89dGhpc1tlKy0tbl07bj4wJiYoaSo9MjU2KTspbys9dGhpc1tlKy0tbl0qaTtyZXR1cm4gbz49KGkqPTEyOCkmJihvLT1NYXRoLnBvdygyLDgqdCkpLG99LHMucHJvdG90eXBlLnJlYWRJbnQ4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsMSx0aGlzLmxlbmd0aCksMTI4JnRoaXNbZV0/LTEqKDI1NS10aGlzW2VdKzEpOnRoaXNbZV19LHMucHJvdG90eXBlLnJlYWRJbnQxNkxFPWZ1bmN0aW9uKGUsdCl7ZT4+Pj0wLHR8fEkoZSwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW2VdfHRoaXNbZSsxXTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0scy5wcm90b3R5cGUucmVhZEludDE2QkU9ZnVuY3Rpb24oZSx0KXtlPj4+PTAsdHx8SShlLDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbZSsxXXx0aGlzW2VdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSxzLnByb3RvdHlwZS5yZWFkSW50MzJMRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDQsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTZ8dGhpc1tlKzNdPDwyNH0scy5wcm90b3R5cGUucmVhZEludDMyQkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw0LHRoaXMubGVuZ3RoKSx0aGlzW2VdPDwyNHx0aGlzW2UrMV08PDE2fHRoaXNbZSsyXTw8OHx0aGlzW2UrM119LHMucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsNCx0aGlzLmxlbmd0aCksbi5yZWFkKHRoaXMsZSwhMCwyMyw0KX0scy5wcm90b3R5cGUucmVhZEZsb2F0QkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw0LHRoaXMubGVuZ3RoKSxuLnJlYWQodGhpcyxlLCExLDIzLDQpfSxzLnByb3RvdHlwZS5yZWFkRG91YmxlTEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw4LHRoaXMubGVuZ3RoKSxuLnJlYWQodGhpcyxlLCEwLDUyLDgpfSxzLnByb3RvdHlwZS5yZWFkRG91YmxlQkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw4LHRoaXMubGVuZ3RoKSxuLnJlYWQodGhpcyxlLCExLDUyLDgpfSxzLnByb3RvdHlwZS53cml0ZVVJbnRMRT1mdW5jdGlvbihlLHQscixuKXsoZT0rZSx0Pj4+PTAscj4+Pj0wLG4pfHxQKHRoaXMsZSx0LHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9MSxvPTA7Zm9yKHRoaXNbdF09MjU1JmU7KytvPHImJihpKj0yNTYpOyl0aGlzW3Qrb109ZS9pJjI1NTtyZXR1cm4gdCtyfSxzLnByb3RvdHlwZS53cml0ZVVJbnRCRT1mdW5jdGlvbihlLHQscixuKXsoZT0rZSx0Pj4+PTAscj4+Pj0wLG4pfHxQKHRoaXMsZSx0LHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIGk9ci0xLG89MTtmb3IodGhpc1t0K2ldPTI1NSZlOy0taT49MCYmKG8qPTI1Nik7KXRoaXNbdCtpXT1lL28mMjU1O3JldHVybiB0K3J9LHMucHJvdG90eXBlLndyaXRlVUludDg9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxQKHRoaXMsZSx0LDEsMjU1LDApLHRoaXNbdF09MjU1JmUsdCsxfSxzLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8UCh0aGlzLGUsdCwyLDY1NTM1LDApLHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44LHQrMn0scy5wcm90b3R5cGUud3JpdGVVSW50MTZCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fFAodGhpcyxlLHQsMiw2NTUzNSwwKSx0aGlzW3RdPWU+Pj44LHRoaXNbdCsxXT0yNTUmZSx0KzJ9LHMucHJvdG90eXBlLndyaXRlVUludDMyTEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxQKHRoaXMsZSx0LDQsNDI5NDk2NzI5NSwwKSx0aGlzW3QrM109ZT4+PjI0LHRoaXNbdCsyXT1lPj4+MTYsdGhpc1t0KzFdPWU+Pj44LHRoaXNbdF09MjU1JmUsdCs0fSxzLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8UCh0aGlzLGUsdCw0LDQyOTQ5NjcyOTUsMCksdGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPTI1NSZlLHQrNH0scy5wcm90b3R5cGUud3JpdGVJbnRMRT1mdW5jdGlvbihlLHQscixuKXtpZihlPStlLHQ+Pj49MCwhbil7dmFyIGk9TWF0aC5wb3coMiw4KnItMSk7UCh0aGlzLGUsdCxyLGktMSwtaSl9dmFyIG89MCxzPTEsYT0wO2Zvcih0aGlzW3RdPTI1NSZlOysrbzxyJiYocyo9MjU2KTspZTwwJiYwPT09YSYmMCE9PXRoaXNbdCtvLTFdJiYoYT0xKSx0aGlzW3Qrb109KGUvcz4+MCktYSYyNTU7cmV0dXJuIHQrcn0scy5wcm90b3R5cGUud3JpdGVJbnRCRT1mdW5jdGlvbihlLHQscixuKXtpZihlPStlLHQ+Pj49MCwhbil7dmFyIGk9TWF0aC5wb3coMiw4KnItMSk7UCh0aGlzLGUsdCxyLGktMSwtaSl9dmFyIG89ci0xLHM9MSxhPTA7Zm9yKHRoaXNbdCtvXT0yNTUmZTstLW8+PTAmJihzKj0yNTYpOyllPDAmJjA9PT1hJiYwIT09dGhpc1t0K28rMV0mJihhPTEpLHRoaXNbdCtvXT0oZS9zPj4wKS1hJjI1NTtyZXR1cm4gdCtyfSxzLnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxQKHRoaXMsZSx0LDEsMTI3LC0xMjgpLGU8MCYmKGU9MjU1K2UrMSksdGhpc1t0XT0yNTUmZSx0KzF9LHMucHJvdG90eXBlLndyaXRlSW50MTZMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fFAodGhpcyxlLHQsMiwzMjc2NywtMzI3NjgpLHRoaXNbdF09MjU1JmUsdGhpc1t0KzFdPWU+Pj44LHQrMn0scy5wcm90b3R5cGUud3JpdGVJbnQxNkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8UCh0aGlzLGUsdCwyLDMyNzY3LC0zMjc2OCksdGhpc1t0XT1lPj4+OCx0aGlzW3QrMV09MjU1JmUsdCsyfSxzLnByb3RvdHlwZS53cml0ZUludDMyTEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxQKHRoaXMsZSx0LDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksdGhpc1t0XT0yNTUmZSx0aGlzW3QrMV09ZT4+PjgsdGhpc1t0KzJdPWU+Pj4xNix0aGlzW3QrM109ZT4+PjI0LHQrNH0scy5wcm90b3R5cGUud3JpdGVJbnQzMkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8UCh0aGlzLGUsdCw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLGU8MCYmKGU9NDI5NDk2NzI5NStlKzEpLHRoaXNbdF09ZT4+PjI0LHRoaXNbdCsxXT1lPj4+MTYsdGhpc1t0KzJdPWU+Pj44LHRoaXNbdCszXT0yNTUmZSx0KzR9LHMucHJvdG90eXBlLndyaXRlRmxvYXRMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEIodGhpcyxlLHQsITAscil9LHMucHJvdG90eXBlLndyaXRlRmxvYXRCRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEIodGhpcyxlLHQsITEscil9LHMucHJvdG90eXBlLndyaXRlRG91YmxlTEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBSKHRoaXMsZSx0LCEwLHIpfSxzLnByb3RvdHlwZS53cml0ZURvdWJsZUJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gUih0aGlzLGUsdCwhMSxyKX0scy5wcm90b3R5cGUuY29weT1mdW5jdGlvbihlLHQscixuKXtpZighcy5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyXCIpO2lmKHJ8fChyPTApLG58fDA9PT1ufHwobj10aGlzLmxlbmd0aCksdD49ZS5sZW5ndGgmJih0PWUubGVuZ3RoKSx0fHwodD0wKSxuPjAmJm48ciYmKG49ciksbj09PXIpcmV0dXJuIDA7aWYoMD09PWUubGVuZ3RofHwwPT09dGhpcy5sZW5ndGgpcmV0dXJuIDA7aWYodDwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwidGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kc1wiKTtpZihyPDB8fHI+PXRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKG48MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInNvdXJjZUVuZCBvdXQgb2YgYm91bmRzXCIpO24+dGhpcy5sZW5ndGgmJihuPXRoaXMubGVuZ3RoKSxlLmxlbmd0aC10PG4tciYmKG49ZS5sZW5ndGgtdCtyKTt2YXIgaT1uLXI7aWYodGhpcz09PWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4pdGhpcy5jb3B5V2l0aGluKHQscixuKTtlbHNlIGlmKHRoaXM9PT1lJiZyPHQmJnQ8bilmb3IodmFyIG89aS0xO28+PTA7LS1vKWVbbyt0XT10aGlzW28rcl07ZWxzZSBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChlLHRoaXMuc3ViYXJyYXkocixuKSx0KTtyZXR1cm4gaX0scy5wcm90b3R5cGUuZmlsbD1mdW5jdGlvbihlLHQscixuKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQ/KG49dCx0PTAscj10aGlzLmxlbmd0aCk6XCJzdHJpbmdcIj09dHlwZW9mIHImJihuPXIscj10aGlzLmxlbmd0aCksdm9pZCAwIT09biYmXCJzdHJpbmdcIiE9dHlwZW9mIG4pdGhyb3cgbmV3IFR5cGVFcnJvcihcImVuY29kaW5nIG11c3QgYmUgYSBzdHJpbmdcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIG4mJiFzLmlzRW5jb2RpbmcobikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK24pO2lmKDE9PT1lLmxlbmd0aCl7dmFyIGk9ZS5jaGFyQ29kZUF0KDApOyhcInV0ZjhcIj09PW4mJmk8MTI4fHxcImxhdGluMVwiPT09bikmJihlPWkpfX1lbHNlXCJudW1iZXJcIj09dHlwZW9mIGUmJihlJj0yNTUpO2lmKHQ8MHx8dGhpcy5sZW5ndGg8dHx8dGhpcy5sZW5ndGg8cil0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk91dCBvZiByYW5nZSBpbmRleFwiKTtpZihyPD10KXJldHVybiB0aGlzO3ZhciBvO2lmKHQ+Pj49MCxyPXZvaWQgMD09PXI/dGhpcy5sZW5ndGg6cj4+PjAsZXx8KGU9MCksXCJudW1iZXJcIj09dHlwZW9mIGUpZm9yKG89dDtvPHI7KytvKXRoaXNbb109ZTtlbHNle3ZhciBhPXMuaXNCdWZmZXIoZSk/ZTpzLmZyb20oZSxuKSxsPWEubGVuZ3RoO2lmKDA9PT1sKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrZSsnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJyk7Zm9yKG89MDtvPHItdDsrK28pdGhpc1tvK3RdPWFbbyVsXX1yZXR1cm4gdGhpc307dmFyIE09L1teKy8wLTlBLVphLXotX10vZztmdW5jdGlvbiBOKGUpe3JldHVybiBlPDE2P1wiMFwiK2UudG9TdHJpbmcoMTYpOmUudG9TdHJpbmcoMTYpfWZ1bmN0aW9uIEwoZSx0KXt2YXIgcjt0PXR8fDEvMDtmb3IodmFyIG49ZS5sZW5ndGgsaT1udWxsLG89W10scz0wO3M8bjsrK3Mpe2lmKChyPWUuY2hhckNvZGVBdChzKSk+NTUyOTUmJnI8NTczNDQpe2lmKCFpKXtpZihyPjU2MzE5KXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9aWYocysxPT09bil7KHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWk9cjtjb250aW51ZX1pZihyPDU2MzIwKXsodC09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSksaT1yO2NvbnRpbnVlfXI9NjU1MzYrKGktNTUyOTY8PDEwfHItNTYzMjApfWVsc2UgaSYmKHQtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2lmKGk9bnVsbCxyPDEyOCl7aWYoKHQtPTEpPDApYnJlYWs7by5wdXNoKHIpfWVsc2UgaWYocjwyMDQ4KXtpZigodC09Mik8MClicmVhaztvLnB1c2gocj4+NnwxOTIsNjMmcnwxMjgpfWVsc2UgaWYocjw2NTUzNil7aWYoKHQtPTMpPDApYnJlYWs7by5wdXNoKHI+PjEyfDIyNCxyPj42JjYzfDEyOCw2MyZyfDEyOCl9ZWxzZXtpZighKHI8MTExNDExMikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50XCIpO2lmKCh0LT00KTwwKWJyZWFrO28ucHVzaChyPj4xOHwyNDAscj4+MTImNjN8MTI4LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KX19cmV0dXJuIG99ZnVuY3Rpb24gaihlKXtyZXR1cm4gdC50b0J5dGVBcnJheShmdW5jdGlvbihlKXtpZigoZT0oZT1lLnNwbGl0KFwiPVwiKVswXSkudHJpbSgpLnJlcGxhY2UoTSxcIlwiKSkubGVuZ3RoPDIpcmV0dXJuXCJcIjtmb3IoO2UubGVuZ3RoJTQhPTA7KWUrPVwiPVwiO3JldHVybiBlfShlKSl9ZnVuY3Rpb24gVShlLHQscixuKXtmb3IodmFyIGk9MDtpPG4mJiEoaStyPj10Lmxlbmd0aHx8aT49ZS5sZW5ndGgpOysraSl0W2krcl09ZVtpXTtyZXR1cm4gaX1mdW5jdGlvbiBxKGUsdCl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0fHxudWxsIT1lJiZudWxsIT1lLmNvbnN0cnVjdG9yJiZudWxsIT1lLmNvbnN0cnVjdG9yLm5hbWUmJmUuY29uc3RydWN0b3IubmFtZT09PXQubmFtZX1mdW5jdGlvbiBEKGUpe3JldHVybiBlIT1lfX0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMsZShcImJ1ZmZlclwiKS5CdWZmZXIpfSx7XCJiYXNlNjQtanNcIjoxMyxidWZmZXI6MTcsaWVlZTc1NDoyM31dLDE4OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKG4peyhmdW5jdGlvbigpe3IuZm9ybWF0QXJncz1mdW5jdGlvbihlKXtpZihlWzBdPSh0aGlzLnVzZUNvbG9ycz9cIiVjXCI6XCJcIikrdGhpcy5uYW1lc3BhY2UrKHRoaXMudXNlQ29sb3JzP1wiICVjXCI6XCIgXCIpK2VbMF0rKHRoaXMudXNlQ29sb3JzP1wiJWMgXCI6XCIgXCIpK1wiK1wiK3QuZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpLCF0aGlzLnVzZUNvbG9ycylyZXR1cm47Y29uc3Qgcj1cImNvbG9yOiBcIit0aGlzLmNvbG9yO2Uuc3BsaWNlKDEsMCxyLFwiY29sb3I6IGluaGVyaXRcIik7bGV0IG49MCxpPTA7ZVswXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csZT0+e1wiJSVcIiE9PWUmJlwiJWNcIj09PWUmJihpPSsrbil9KSxlLnNwbGljZShpLDAscil9LHIuc2F2ZT1mdW5jdGlvbihlKXt0cnl7ZT9yLnN0b3JhZ2Uuc2V0SXRlbShcImRlYnVnXCIsZSk6ci5zdG9yYWdlLnJlbW92ZUl0ZW0oXCJkZWJ1Z1wiKX1jYXRjaChlKXt9fSxyLmxvYWQ9ZnVuY3Rpb24oKXtsZXQgZTt0cnl7ZT1yLnN0b3JhZ2UuZ2V0SXRlbShcImRlYnVnXCIpfWNhdGNoKGUpe30hZSYmdm9pZCAwIT09biYmXCJlbnZcImluIG4mJihlPW4uZW52LkRFQlVHKTtyZXR1cm4gZX0sci51c2VDb2xvcnM9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cucHJvY2VzcyYmKFwicmVuZGVyZXJcIj09PXdpbmRvdy5wcm9jZXNzLnR5cGV8fHdpbmRvdy5wcm9jZXNzLl9fbndqcykpcmV0dXJuITA7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudCYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKXJldHVybiExO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlfHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuY29uc29sZSYmKHdpbmRvdy5jb25zb2xlLmZpcmVidWd8fHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiYmd2luZG93LmNvbnNvbGUudGFibGUpfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IudXNlckFnZW50JiZuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSYmcGFyc2VJbnQoUmVnRXhwLiQxLDEwKT49MzF8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci51c2VyQWdlbnQmJm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKX0sci5zdG9yYWdlPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBsb2NhbFN0b3JhZ2V9Y2F0Y2goZSl7fX0oKSxyLmRlc3Ryb3k9KCgpPT57bGV0IGU9ITE7cmV0dXJuKCk9PntlfHwoZT0hMCxjb25zb2xlLndhcm4oXCJJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuXCIpKX19KSgpLHIuY29sb3JzPVtcIiMwMDAwQ0NcIixcIiMwMDAwRkZcIixcIiMwMDMzQ0NcIixcIiMwMDMzRkZcIixcIiMwMDY2Q0NcIixcIiMwMDY2RkZcIixcIiMwMDk5Q0NcIixcIiMwMDk5RkZcIixcIiMwMENDMDBcIixcIiMwMENDMzNcIixcIiMwMENDNjZcIixcIiMwMENDOTlcIixcIiMwMENDQ0NcIixcIiMwMENDRkZcIixcIiMzMzAwQ0NcIixcIiMzMzAwRkZcIixcIiMzMzMzQ0NcIixcIiMzMzMzRkZcIixcIiMzMzY2Q0NcIixcIiMzMzY2RkZcIixcIiMzMzk5Q0NcIixcIiMzMzk5RkZcIixcIiMzM0NDMDBcIixcIiMzM0NDMzNcIixcIiMzM0NDNjZcIixcIiMzM0NDOTlcIixcIiMzM0NDQ0NcIixcIiMzM0NDRkZcIixcIiM2NjAwQ0NcIixcIiM2NjAwRkZcIixcIiM2NjMzQ0NcIixcIiM2NjMzRkZcIixcIiM2NkNDMDBcIixcIiM2NkNDMzNcIixcIiM5OTAwQ0NcIixcIiM5OTAwRkZcIixcIiM5OTMzQ0NcIixcIiM5OTMzRkZcIixcIiM5OUNDMDBcIixcIiM5OUNDMzNcIixcIiNDQzAwMDBcIixcIiNDQzAwMzNcIixcIiNDQzAwNjZcIixcIiNDQzAwOTlcIixcIiNDQzAwQ0NcIixcIiNDQzAwRkZcIixcIiNDQzMzMDBcIixcIiNDQzMzMzNcIixcIiNDQzMzNjZcIixcIiNDQzMzOTlcIixcIiNDQzMzQ0NcIixcIiNDQzMzRkZcIixcIiNDQzY2MDBcIixcIiNDQzY2MzNcIixcIiNDQzk5MDBcIixcIiNDQzk5MzNcIixcIiNDQ0NDMDBcIixcIiNDQ0NDMzNcIixcIiNGRjAwMDBcIixcIiNGRjAwMzNcIixcIiNGRjAwNjZcIixcIiNGRjAwOTlcIixcIiNGRjAwQ0NcIixcIiNGRjAwRkZcIixcIiNGRjMzMDBcIixcIiNGRjMzMzNcIixcIiNGRjMzNjZcIixcIiNGRjMzOTlcIixcIiNGRjMzQ0NcIixcIiNGRjMzRkZcIixcIiNGRjY2MDBcIixcIiNGRjY2MzNcIixcIiNGRjk5MDBcIixcIiNGRjk5MzNcIixcIiNGRkNDMDBcIixcIiNGRkNDMzNcIl0sci5sb2c9Y29uc29sZS5kZWJ1Z3x8Y29uc29sZS5sb2d8fCgoKT0+e30pLHQuZXhwb3J0cz1lKFwiLi9jb21tb25cIikocik7Y29uc3R7Zm9ybWF0dGVyczppfT10LmV4cG9ydHM7aS5qPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSl9Y2F0Y2goZSl7cmV0dXJuXCJbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogXCIrZS5tZXNzYWdlfX19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSl9LHtcIi4vY29tbW9uXCI6MTksX3Byb2Nlc3M6NTB9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtmdW5jdGlvbiByKGUpe2xldCB0LGksbyxzPW51bGw7ZnVuY3Rpb24gYSguLi5lKXtpZighYS5lbmFibGVkKXJldHVybjtjb25zdCBuPWEsaT1OdW1iZXIobmV3IERhdGUpLG89aS0odHx8aSk7bi5kaWZmPW8sbi5wcmV2PXQsbi5jdXJyPWksdD1pLGVbMF09ci5jb2VyY2UoZVswXSksXCJzdHJpbmdcIiE9dHlwZW9mIGVbMF0mJmUudW5zaGlmdChcIiVPXCIpO2xldCBzPTA7ZVswXT1lWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCh0LGkpPT57aWYoXCIlJVwiPT09dClyZXR1cm5cIiVcIjtzKys7Y29uc3Qgbz1yLmZvcm1hdHRlcnNbaV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygbyl7Y29uc3Qgcj1lW3NdO3Q9by5jYWxsKG4sciksZS5zcGxpY2UocywxKSxzLS19cmV0dXJuIHR9KSxyLmZvcm1hdEFyZ3MuY2FsbChuLGUpLChuLmxvZ3x8ci5sb2cpLmFwcGx5KG4sZSl9cmV0dXJuIGEubmFtZXNwYWNlPWUsYS51c2VDb2xvcnM9ci51c2VDb2xvcnMoKSxhLmNvbG9yPXIuc2VsZWN0Q29sb3IoZSksYS5leHRlbmQ9bixhLmRlc3Ryb3k9ci5kZXN0cm95LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiZW5hYmxlZFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6KCk9Pm51bGwhPT1zP3M6KGkhPT1yLm5hbWVzcGFjZXMmJihpPXIubmFtZXNwYWNlcyxvPXIuZW5hYmxlZChlKSksbyksc2V0OmU9PntzPWV9fSksXCJmdW5jdGlvblwiPT10eXBlb2Ygci5pbml0JiZyLmluaXQoYSksYX1mdW5jdGlvbiBuKGUsdCl7Y29uc3Qgbj1yKHRoaXMubmFtZXNwYWNlKyh2b2lkIDA9PT10P1wiOlwiOnQpK2UpO3JldHVybiBuLmxvZz10aGlzLmxvZyxufWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMixlLnRvU3RyaW5nKCkubGVuZ3RoLTIpLnJlcGxhY2UoL1xcLlxcKlxcPyQvLFwiKlwiKX1yZXR1cm4gci5kZWJ1Zz1yLHIuZGVmYXVsdD1yLHIuY29lcmNlPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRXJyb3I/ZS5zdGFja3x8ZS5tZXNzYWdlOmV9LHIuZGlzYWJsZT1mdW5jdGlvbigpe2NvbnN0IGU9Wy4uLnIubmFtZXMubWFwKGkpLC4uLnIuc2tpcHMubWFwKGkpLm1hcChlPT5cIi1cIitlKV0uam9pbihcIixcIik7cmV0dXJuIHIuZW5hYmxlKFwiXCIpLGV9LHIuZW5hYmxlPWZ1bmN0aW9uKGUpe2xldCB0O3Iuc2F2ZShlKSxyLm5hbWVzcGFjZXM9ZSxyLm5hbWVzPVtdLHIuc2tpcHM9W107Y29uc3Qgbj0oXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTpcIlwiKS5zcGxpdCgvW1xccyxdKy8pLGk9bi5sZW5ndGg7Zm9yKHQ9MDt0PGk7dCsrKW5bdF0mJihcIi1cIj09PShlPW5bdF0ucmVwbGFjZSgvXFwqL2csXCIuKj9cIikpWzBdP3Iuc2tpcHMucHVzaChuZXcgUmVnRXhwKFwiXlwiK2Uuc3Vic3RyKDEpK1wiJFwiKSk6ci5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoXCJeXCIrZStcIiRcIikpKX0sci5lbmFibGVkPWZ1bmN0aW9uKGUpe2lmKFwiKlwiPT09ZVtlLmxlbmd0aC0xXSlyZXR1cm4hMDtsZXQgdCxuO2Zvcih0PTAsbj1yLnNraXBzLmxlbmd0aDt0PG47dCsrKWlmKHIuc2tpcHNbdF0udGVzdChlKSlyZXR1cm4hMTtmb3IodD0wLG49ci5uYW1lcy5sZW5ndGg7dDxuO3QrKylpZihyLm5hbWVzW3RdLnRlc3QoZSkpcmV0dXJuITA7cmV0dXJuITF9LHIuaHVtYW5pemU9ZShcIm1zXCIpLHIuZGVzdHJveT1mdW5jdGlvbigpe2NvbnNvbGUud2FybihcIkluc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC5cIil9LE9iamVjdC5rZXlzKHQpLmZvckVhY2goZT0+e3JbZV09dFtlXX0pLHIubmFtZXM9W10sci5za2lwcz1bXSxyLmZvcm1hdHRlcnM9e30sci5zZWxlY3RDb2xvcj1mdW5jdGlvbihlKXtsZXQgdD0wO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKXQ9KHQ8PDUpLXQrZS5jaGFyQ29kZUF0KHIpLHR8PTA7cmV0dXJuIHIuY29sb3JzW01hdGguYWJzKHQpJXIuY29sb3JzLmxlbmd0aF19LHIuZW5hYmxlKHIubG9hZCgpKSxyfX0se21zOjQ1fV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocixuKXsoZnVuY3Rpb24oKXt2YXIgaT1lKFwicmVhZGFibGUtc3RyZWFtXCIpLG89ZShcImVuZC1vZi1zdHJlYW1cIikscz1lKFwiaW5oZXJpdHNcIiksYT1lKFwic3RyZWFtLXNoaWZ0XCIpLGw9bi5mcm9tJiZuLmZyb20hPT1VaW50OEFycmF5LmZyb20/bi5mcm9tKFswXSk6bmV3IG4oWzBdKSx1PWZ1bmN0aW9uKGUsdCl7ZS5fY29ya2VkP2Uub25jZShcInVuY29ya1wiLHQpOnQoKX0sYz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihyKXtyP2Z1bmN0aW9uKGUsdCl7ZS5fYXV0b0Rlc3Ryb3kmJmUuZGVzdHJveSh0KX0oZSxcInByZW1hdHVyZSBjbG9zZVwiPT09ci5tZXNzYWdlP251bGw6cik6dCYmIWUuX2VuZGVkJiZlLmVuZCgpfX0saD1mdW5jdGlvbigpe30sZj1mdW5jdGlvbihlLHQscil7aWYoISh0aGlzIGluc3RhbmNlb2YgZikpcmV0dXJuIG5ldyBmKGUsdCxyKTtpLkR1cGxleC5jYWxsKHRoaXMsciksdGhpcy5fd3JpdGFibGU9bnVsbCx0aGlzLl9yZWFkYWJsZT1udWxsLHRoaXMuX3JlYWRhYmxlMj1udWxsLHRoaXMuX2F1dG9EZXN0cm95PSFyfHwhMSE9PXIuYXV0b0Rlc3Ryb3ksdGhpcy5fZm9yd2FyZERlc3Ryb3k9IXJ8fCExIT09ci5kZXN0cm95LHRoaXMuX2ZvcndhcmRFbmQ9IXJ8fCExIT09ci5lbmQsdGhpcy5fY29ya2VkPTEsdGhpcy5fb25kcmFpbj1udWxsLHRoaXMuX2RyYWluZWQ9ITEsdGhpcy5fZm9yd2FyZGluZz0hMSx0aGlzLl91bndyaXRlPW51bGwsdGhpcy5fdW5yZWFkPW51bGwsdGhpcy5fZW5kZWQ9ITEsdGhpcy5kZXN0cm95ZWQ9ITEsZSYmdGhpcy5zZXRXcml0YWJsZShlKSx0JiZ0aGlzLnNldFJlYWRhYmxlKHQpfTtzKGYsaS5EdXBsZXgpLGYub2JqPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gcnx8KHI9e30pLHIub2JqZWN0TW9kZT0hMCxyLmhpZ2hXYXRlck1hcms9MTYsbmV3IGYoZSx0LHIpfSxmLnByb3RvdHlwZS5jb3JrPWZ1bmN0aW9uKCl7MT09Kyt0aGlzLl9jb3JrZWQmJnRoaXMuZW1pdChcImNvcmtcIil9LGYucHJvdG90eXBlLnVuY29yaz1mdW5jdGlvbigpe3RoaXMuX2NvcmtlZCYmMD09LS10aGlzLl9jb3JrZWQmJnRoaXMuZW1pdChcInVuY29ya1wiKX0sZi5wcm90b3R5cGUuc2V0V3JpdGFibGU9ZnVuY3Rpb24oZSl7aWYodGhpcy5fdW53cml0ZSYmdGhpcy5fdW53cml0ZSgpLHRoaXMuZGVzdHJveWVkKWUmJmUuZGVzdHJveSYmZS5kZXN0cm95KCk7ZWxzZSBpZihudWxsIT09ZSYmITEhPT1lKXt2YXIgdD10aGlzLG49byhlLHt3cml0YWJsZTohMCxyZWFkYWJsZTohMX0sYyh0aGlzLHRoaXMuX2ZvcndhcmRFbmQpKSxpPWZ1bmN0aW9uKCl7dmFyIGU9dC5fb25kcmFpbjt0Ll9vbmRyYWluPW51bGwsZSYmZSgpfTt0aGlzLl91bndyaXRlJiZyLm5leHRUaWNrKGkpLHRoaXMuX3dyaXRhYmxlPWUsdGhpcy5fd3JpdGFibGUub24oXCJkcmFpblwiLGkpLHRoaXMuX3Vud3JpdGU9ZnVuY3Rpb24oKXt0Ll93cml0YWJsZS5yZW1vdmVMaXN0ZW5lcihcImRyYWluXCIsaSksbigpfSx0aGlzLnVuY29yaygpfWVsc2UgdGhpcy5lbmQoKX0sZi5wcm90b3R5cGUuc2V0UmVhZGFibGU9ZnVuY3Rpb24oZSl7aWYodGhpcy5fdW5yZWFkJiZ0aGlzLl91bnJlYWQoKSx0aGlzLmRlc3Ryb3llZCllJiZlLmRlc3Ryb3kmJmUuZGVzdHJveSgpO2Vsc2V7aWYobnVsbD09PWV8fCExPT09ZSlyZXR1cm4gdGhpcy5wdXNoKG51bGwpLHZvaWQgdGhpcy5yZXN1bWUoKTt2YXIgdCxyPXRoaXMsbj1vKGUse3dyaXRhYmxlOiExLHJlYWRhYmxlOiEwfSxjKHRoaXMpKSxzPWZ1bmN0aW9uKCl7ci5fZm9yd2FyZCgpfSxhPWZ1bmN0aW9uKCl7ci5wdXNoKG51bGwpfTt0aGlzLl9kcmFpbmVkPSEwLHRoaXMuX3JlYWRhYmxlPWUsdGhpcy5fcmVhZGFibGUyPWUuX3JlYWRhYmxlU3RhdGU/ZToodD1lLG5ldyBpLlJlYWRhYmxlKHtvYmplY3RNb2RlOiEwLGhpZ2hXYXRlck1hcms6MTZ9KS53cmFwKHQpKSx0aGlzLl9yZWFkYWJsZTIub24oXCJyZWFkYWJsZVwiLHMpLHRoaXMuX3JlYWRhYmxlMi5vbihcImVuZFwiLGEpLHRoaXMuX3VucmVhZD1mdW5jdGlvbigpe3IuX3JlYWRhYmxlMi5yZW1vdmVMaXN0ZW5lcihcInJlYWRhYmxlXCIscyksci5fcmVhZGFibGUyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsYSksbigpfSx0aGlzLl9mb3J3YXJkKCl9fSxmLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbigpe3RoaXMuX2RyYWluZWQ9ITAsdGhpcy5fZm9yd2FyZCgpfSxmLnByb3RvdHlwZS5fZm9yd2FyZD1mdW5jdGlvbigpe2lmKCF0aGlzLl9mb3J3YXJkaW5nJiZ0aGlzLl9yZWFkYWJsZTImJnRoaXMuX2RyYWluZWQpe3ZhciBlO2Zvcih0aGlzLl9mb3J3YXJkaW5nPSEwO3RoaXMuX2RyYWluZWQmJm51bGwhPT0oZT1hKHRoaXMuX3JlYWRhYmxlMikpOyl0aGlzLmRlc3Ryb3llZHx8KHRoaXMuX2RyYWluZWQ9dGhpcy5wdXNoKGUpKTt0aGlzLl9mb3J3YXJkaW5nPSExfX0sZi5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbihlLHQpe2lmKHR8fCh0PWgpLHRoaXMuZGVzdHJveWVkKXJldHVybiB0KG51bGwpO3RoaXMuZGVzdHJveWVkPSEwO3ZhciBuPXRoaXM7ci5uZXh0VGljayhmdW5jdGlvbigpe24uX2Rlc3Ryb3koZSksdChudWxsKX0pfSxmLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbihlKXtpZihlKXt2YXIgdD10aGlzLl9vbmRyYWluO3RoaXMuX29uZHJhaW49bnVsbCx0P3QoZSk6dGhpcy5lbWl0KFwiZXJyb3JcIixlKX10aGlzLl9mb3J3YXJkRGVzdHJveSYmKHRoaXMuX3JlYWRhYmxlJiZ0aGlzLl9yZWFkYWJsZS5kZXN0cm95JiZ0aGlzLl9yZWFkYWJsZS5kZXN0cm95KCksdGhpcy5fd3JpdGFibGUmJnRoaXMuX3dyaXRhYmxlLmRlc3Ryb3kmJnRoaXMuX3dyaXRhYmxlLmRlc3Ryb3koKSksdGhpcy5lbWl0KFwiY2xvc2VcIil9LGYucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHQscil7aWYoIXRoaXMuZGVzdHJveWVkKXJldHVybiB0aGlzLl9jb3JrZWQ/dSh0aGlzLHRoaXMuX3dyaXRlLmJpbmQodGhpcyxlLHQscikpOmU9PT1sP3RoaXMuX2ZpbmlzaChyKTp0aGlzLl93cml0YWJsZT92b2lkKCExPT09dGhpcy5fd3JpdGFibGUud3JpdGUoZSk/dGhpcy5fb25kcmFpbj1yOnRoaXMuZGVzdHJveWVkfHxyKCkpOnIoKX0sZi5wcm90b3R5cGUuX2ZpbmlzaD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuZW1pdChcInByZWVuZFwiKSx1KHRoaXMsZnVuY3Rpb24oKXt2YXIgcixuO3I9dC5fZm9yd2FyZEVuZCYmdC5fd3JpdGFibGUsbj1mdW5jdGlvbigpeyExPT09dC5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZCYmKHQuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQ9ITApLHQuZW1pdChcInByZWZpbmlzaFwiKSx1KHQsZSl9LHI/ci5fd3JpdGFibGVTdGF0ZSYmci5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZD9uKCk6ci5fd3JpdGFibGVTdGF0ZT9yLmVuZChuKTooci5lbmQoKSxuKCkpOm4oKX0pfSxmLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/dGhpcy5lbmQobnVsbCxudWxsLGUpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dGhpcy5lbmQoZSxudWxsLHQpOih0aGlzLl9lbmRlZD0hMCxlJiZ0aGlzLndyaXRlKGUpLHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nfHx0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZHx8dGhpcy53cml0ZShsKSxpLldyaXRhYmxlLnByb3RvdHlwZS5lbmQuY2FsbCh0aGlzLHIpKX0sdC5leHBvcnRzPWZ9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSxlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtfcHJvY2Vzczo1MCxidWZmZXI6MTcsXCJlbmQtb2Ytc3RyZWFtXCI6MjEsaW5oZXJpdHM6MjQsXCJyZWFkYWJsZS1zdHJlYW1cIjo2OSxcInN0cmVhbS1zaGlmdFwiOjc0fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7KGZ1bmN0aW9uKCl7dmFyIG49ZShcIm9uY2VcIiksaT1mdW5jdGlvbigpe30sbz1mdW5jdGlvbihlLHQscyl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gbyhlLG51bGwsdCk7dHx8KHQ9e30pLHM9bihzfHxpKTt2YXIgYT1lLl93cml0YWJsZVN0YXRlLGw9ZS5fcmVhZGFibGVTdGF0ZSx1PXQucmVhZGFibGV8fCExIT09dC5yZWFkYWJsZSYmZS5yZWFkYWJsZSxjPXQud3JpdGFibGV8fCExIT09dC53cml0YWJsZSYmZS53cml0YWJsZSxoPSExLGY9ZnVuY3Rpb24oKXtlLndyaXRhYmxlfHxwKCl9LHA9ZnVuY3Rpb24oKXtjPSExLHV8fHMuY2FsbChlKX0sZD1mdW5jdGlvbigpe3U9ITEsY3x8cy5jYWxsKGUpfSxnPWZ1bmN0aW9uKHQpe3MuY2FsbChlLHQ/bmV3IEVycm9yKFwiZXhpdGVkIHdpdGggZXJyb3IgY29kZTogXCIrdCk6bnVsbCl9LHk9ZnVuY3Rpb24odCl7cy5jYWxsKGUsdCl9LGI9ZnVuY3Rpb24oKXtyLm5leHRUaWNrKG0pfSxtPWZ1bmN0aW9uKCl7aWYoIWgpcmV0dXJuKCF1fHxsJiZsLmVuZGVkJiYhbC5kZXN0cm95ZWQpJiYoIWN8fGEmJmEuZW5kZWQmJiFhLmRlc3Ryb3llZCk/dm9pZCAwOnMuY2FsbChlLG5ldyBFcnJvcihcInByZW1hdHVyZSBjbG9zZVwiKSl9LHY9ZnVuY3Rpb24oKXtlLnJlcS5vbihcImZpbmlzaFwiLHApfTtyZXR1cm4hZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2V0SGVhZGVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmFib3J0fShlKT9jJiYhYSYmKGUub24oXCJlbmRcIixmKSxlLm9uKFwiY2xvc2VcIixmKSk6KGUub24oXCJjb21wbGV0ZVwiLHApLGUub24oXCJhYm9ydFwiLGIpLGUucmVxP3YoKTplLm9uKFwicmVxdWVzdFwiLHYpKSxmdW5jdGlvbihlKXtyZXR1cm4gZS5zdGRpbyYmQXJyYXkuaXNBcnJheShlLnN0ZGlvKSYmMz09PWUuc3RkaW8ubGVuZ3RofShlKSYmZS5vbihcImV4aXRcIixnKSxlLm9uKFwiZW5kXCIsZCksZS5vbihcImZpbmlzaFwiLHApLCExIT09dC5lcnJvciYmZS5vbihcImVycm9yXCIseSksZS5vbihcImNsb3NlXCIsYiksZnVuY3Rpb24oKXtoPSEwLGUucmVtb3ZlTGlzdGVuZXIoXCJjb21wbGV0ZVwiLHApLGUucmVtb3ZlTGlzdGVuZXIoXCJhYm9ydFwiLGIpLGUucmVtb3ZlTGlzdGVuZXIoXCJyZXF1ZXN0XCIsdiksZS5yZXEmJmUucmVxLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIscCksZS5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGYpLGUucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGYpLGUucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixwKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXhpdFwiLGcpLGUucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixkKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix5KSxlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixiKX19O3QuZXhwb3J0cz1vfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7X3Byb2Nlc3M6NTAsb25jZTo0OH1dLDIyOltmdW5jdGlvbihlLHQscil7dmFyIG49T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24oKXt9O3JldHVybiB0LnByb3RvdHlwZT1lLG5ldyB0fSxpPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmdC5wdXNoKHIpO3JldHVybiByfSxvPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kfHxmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KGUsYXJndW1lbnRzKX19O2Z1bmN0aW9uIHMoKXt0aGlzLl9ldmVudHMmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLFwiX2V2ZW50c1wiKXx8KHRoaXMuX2V2ZW50cz1uKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApLHRoaXMuX21heExpc3RlbmVycz10aGlzLl9tYXhMaXN0ZW5lcnN8fHZvaWQgMH10LmV4cG9ydHM9cyxzLkV2ZW50RW1pdHRlcj1zLHMucHJvdG90eXBlLl9ldmVudHM9dm9pZCAwLHMucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnM9dm9pZCAwO3ZhciBhLGw9MTA7dHJ5e3ZhciB1PXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHUsXCJ4XCIse3ZhbHVlOjB9KSxhPTA9PT11Lnh9Y2F0Y2goZSl7YT0hMX1mdW5jdGlvbiBjKGUpe3JldHVybiB2b2lkIDA9PT1lLl9tYXhMaXN0ZW5lcnM/cy5kZWZhdWx0TWF4TGlzdGVuZXJzOmUuX21heExpc3RlbmVyc31mdW5jdGlvbiBoKGUsdCxyLGkpe3ZhciBvLHMsYTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtpZigocz1lLl9ldmVudHMpPyhzLm5ld0xpc3RlbmVyJiYoZS5lbWl0KFwibmV3TGlzdGVuZXJcIix0LHIubGlzdGVuZXI/ci5saXN0ZW5lcjpyKSxzPWUuX2V2ZW50cyksYT1zW3RdKToocz1lLl9ldmVudHM9bihudWxsKSxlLl9ldmVudHNDb3VudD0wKSxhKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2E9c1t0XT1pP1tyLGFdOlthLHJdOmk/YS51bnNoaWZ0KHIpOmEucHVzaChyKSwhYS53YXJuZWQmJihvPWMoZSkpJiZvPjAmJmEubGVuZ3RoPm8pe2Eud2FybmVkPSEwO3ZhciBsPW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrYS5sZW5ndGgrJyBcIicrU3RyaW5nKHQpKydcIiBsaXN0ZW5lcnMgYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicpO2wubmFtZT1cIk1heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZ1wiLGwuZW1pdHRlcj1lLGwudHlwZT10LGwuY291bnQ9YS5sZW5ndGgsXCJvYmplY3RcIj09dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKFwiJXM6ICVzXCIsbC5uYW1lLGwubWVzc2FnZSl9fWVsc2UgYT1zW3RdPXIsKytlLl9ldmVudHNDb3VudDtyZXR1cm4gZX1mdW5jdGlvbiBmKCl7aWYoIXRoaXMuZmlyZWQpc3dpdGNoKHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSx0aGlzLndyYXBGbiksdGhpcy5maXJlZD0hMCxhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7Y2FzZSAxOnJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQsYXJndW1lbnRzWzBdKTtjYXNlIDI6cmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCxhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdKTtjYXNlIDM6cmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCxhcmd1bWVudHNbMF0sYXJndW1lbnRzWzFdLGFyZ3VtZW50c1syXSk7ZGVmYXVsdDpmb3IodmFyIGU9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpLHQ9MDt0PGUubGVuZ3RoOysrdCllW3RdPWFyZ3VtZW50c1t0XTt0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGUpfX1mdW5jdGlvbiBwKGUsdCxyKXt2YXIgbj17ZmlyZWQ6ITEsd3JhcEZuOnZvaWQgMCx0YXJnZXQ6ZSx0eXBlOnQsbGlzdGVuZXI6cn0saT1vLmNhbGwoZixuKTtyZXR1cm4gaS5saXN0ZW5lcj1yLG4ud3JhcEZuPWksaX1mdW5jdGlvbiBkKGUsdCxyKXt2YXIgbj1lLl9ldmVudHM7aWYoIW4pcmV0dXJuW107dmFyIGk9blt0XTtyZXR1cm4gaT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP3I/W2kubGlzdGVuZXJ8fGldOltpXTpyP2Z1bmN0aW9uKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLHI9MDtyPHQubGVuZ3RoOysrcil0W3JdPWVbcl0ubGlzdGVuZXJ8fGVbcl07cmV0dXJuIHR9KGkpOnkoaSxpLmxlbmd0aCk6W119ZnVuY3Rpb24gZyhlKXt2YXIgdD10aGlzLl9ldmVudHM7aWYodCl7dmFyIHI9dFtlXTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXJldHVybiAxO2lmKHIpcmV0dXJuIHIubGVuZ3RofXJldHVybiAwfWZ1bmN0aW9uIHkoZSx0KXtmb3IodmFyIHI9bmV3IEFycmF5KHQpLG49MDtuPHQ7KytuKXJbbl09ZVtuXTtyZXR1cm4gcn1hP09iamVjdC5kZWZpbmVQcm9wZXJ0eShzLFwiZGVmYXVsdE1heExpc3RlbmVyc1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8ZSE9ZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7bD1lfX0pOnMuZGVmYXVsdE1heExpc3RlbmVycz1sLHMucHJvdG90eXBlLnNldE1heExpc3RlbmVycz1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZXx8ZTwwfHxpc05hTihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcIm5cIiBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LHMucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBjKHRoaXMpfSxzLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe3ZhciB0LHIsbixpLG8scyxhPVwiZXJyb3JcIj09PWU7aWYocz10aGlzLl9ldmVudHMpYT1hJiZudWxsPT1zLmVycm9yO2Vsc2UgaWYoIWEpcmV0dXJuITE7aWYoYSl7aWYoYXJndW1lbnRzLmxlbmd0aD4xJiYodD1hcmd1bWVudHNbMV0pLHQgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyB0O3ZhciBsPW5ldyBFcnJvcignVW5oYW5kbGVkIFwiZXJyb3JcIiBldmVudC4gKCcrdCtcIilcIik7dGhyb3cgbC5jb250ZXh0PXQsbH1pZighKHI9c1tlXSkpcmV0dXJuITE7dmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2Ygcjtzd2l0Y2gobj1hcmd1bWVudHMubGVuZ3RoKXtjYXNlIDE6IWZ1bmN0aW9uKGUsdCxyKXtpZih0KWUuY2FsbChyKTtlbHNlIGZvcih2YXIgbj1lLmxlbmd0aCxpPXkoZSxuKSxvPTA7bzxuOysrbylpW29dLmNhbGwocil9KHIsdSx0aGlzKTticmVhaztjYXNlIDI6IWZ1bmN0aW9uKGUsdCxyLG4pe2lmKHQpZS5jYWxsKHIsbik7ZWxzZSBmb3IodmFyIGk9ZS5sZW5ndGgsbz15KGUsaSkscz0wO3M8aTsrK3Mpb1tzXS5jYWxsKHIsbil9KHIsdSx0aGlzLGFyZ3VtZW50c1sxXSk7YnJlYWs7Y2FzZSAzOiFmdW5jdGlvbihlLHQscixuLGkpe2lmKHQpZS5jYWxsKHIsbixpKTtlbHNlIGZvcih2YXIgbz1lLmxlbmd0aCxzPXkoZSxvKSxhPTA7YTxvOysrYSlzW2FdLmNhbGwocixuLGkpfShyLHUsdGhpcyxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdKTticmVhaztjYXNlIDQ6IWZ1bmN0aW9uKGUsdCxyLG4saSxvKXtpZih0KWUuY2FsbChyLG4saSxvKTtlbHNlIGZvcih2YXIgcz1lLmxlbmd0aCxhPXkoZSxzKSxsPTA7bDxzOysrbClhW2xdLmNhbGwocixuLGksbyl9KHIsdSx0aGlzLGFyZ3VtZW50c1sxXSxhcmd1bWVudHNbMl0sYXJndW1lbnRzWzNdKTticmVhaztkZWZhdWx0OmZvcihpPW5ldyBBcnJheShuLTEpLG89MTtvPG47bysrKWlbby0xXT1hcmd1bWVudHNbb107IWZ1bmN0aW9uKGUsdCxyLG4pe2lmKHQpZS5hcHBseShyLG4pO2Vsc2UgZm9yKHZhciBpPWUubGVuZ3RoLG89eShlLGkpLHM9MDtzPGk7KytzKW9bc10uYXBwbHkocixuKX0ocix1LHRoaXMsaSl9cmV0dXJuITB9LHMucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGgodGhpcyxlLHQsITEpfSxzLnByb3RvdHlwZS5vbj1zLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixzLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaCh0aGlzLGUsdCwhMCl9LHMucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtyZXR1cm4gdGhpcy5vbihlLHAodGhpcyxlLHQpKSx0aGlzfSxzLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7cmV0dXJuIHRoaXMucHJlcGVuZExpc3RlbmVyKGUscCh0aGlzLGUsdCkpLHRoaXN9LHMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaSxvLHMsYTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtpZighKGk9dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZighKHI9aVtlXSkpcmV0dXJuIHRoaXM7aWYocj09PXR8fHIubGlzdGVuZXI9PT10KTA9PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPW4obnVsbCk6KGRlbGV0ZSBpW2VdLGkucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsZSxyLmxpc3RlbmVyfHx0KSk7ZWxzZSBpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiByKXtmb3Iobz0tMSxzPXIubGVuZ3RoLTE7cz49MDtzLS0paWYocltzXT09PXR8fHJbc10ubGlzdGVuZXI9PT10KXthPXJbc10ubGlzdGVuZXIsbz1zO2JyZWFrfWlmKG88MClyZXR1cm4gdGhpczswPT09bz9yLnNoaWZ0KCk6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dCxuPXIrMSxpPWUubGVuZ3RoO248aTtyKz0xLG4rPTEpZVtyXT1lW25dO2UucG9wKCl9KHIsbyksMT09PXIubGVuZ3RoJiYoaVtlXT1yWzBdKSxpLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsYXx8dCl9cmV0dXJuIHRoaXN9LHMucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxyLG87aWYoIShyPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYoIXIucmVtb3ZlTGlzdGVuZXIpcmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoPyh0aGlzLl9ldmVudHM9bihudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTpyW2VdJiYoMD09LS10aGlzLl9ldmVudHNDb3VudD90aGlzLl9ldmVudHM9bihudWxsKTpkZWxldGUgcltlXSksdGhpcztpZigwPT09YXJndW1lbnRzLmxlbmd0aCl7dmFyIHMsYT1pKHIpO2ZvcihvPTA7bzxhLmxlbmd0aDsrK28pXCJyZW1vdmVMaXN0ZW5lclwiIT09KHM9YVtvXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKHMpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1uKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZih0PXJbZV0pKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0KTtlbHNlIGlmKHQpZm9yKG89dC5sZW5ndGgtMTtvPj0wO28tLSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdFtvXSk7cmV0dXJuIHRoaXN9LHMucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gZCh0aGlzLGUsITApfSxzLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGQodGhpcyxlLCExKX0scy5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZS5saXN0ZW5lckNvdW50P2UubGlzdGVuZXJDb3VudCh0KTpnLmNhbGwoZSx0KX0scy5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1nLHMucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9SZWZsZWN0Lm93bktleXModGhpcy5fZXZlbnRzKTpbXX19LHt9XSwyMzpbZnVuY3Rpb24oZSx0LHIpe3IucmVhZD1mdW5jdGlvbihlLHQscixuLGkpe3ZhciBvLHMsYT04Kmktbi0xLGw9KDE8PGEpLTEsdT1sPj4xLGM9LTcsaD1yP2ktMTowLGY9cj8tMToxLHA9ZVt0K2hdO2ZvcihoKz1mLG89cCYoMTw8LWMpLTEscD4+PS1jLGMrPWE7Yz4wO289MjU2Km8rZVt0K2hdLGgrPWYsYy09OCk7Zm9yKHM9byYoMTw8LWMpLTEsbz4+PS1jLGMrPW47Yz4wO3M9MjU2KnMrZVt0K2hdLGgrPWYsYy09OCk7aWYoMD09PW8pbz0xLXU7ZWxzZXtpZihvPT09bClyZXR1cm4gcz9OYU46MS8wKihwPy0xOjEpO3MrPU1hdGgucG93KDIsbiksby09dX1yZXR1cm4ocD8tMToxKSpzKk1hdGgucG93KDIsby1uKX0sci53cml0ZT1mdW5jdGlvbihlLHQscixuLGksbyl7dmFyIHMsYSxsLHU9OCpvLWktMSxjPSgxPDx1KS0xLGg9Yz4+MSxmPTIzPT09aT9NYXRoLnBvdygyLC0yNCktTWF0aC5wb3coMiwtNzcpOjAscD1uPzA6by0xLGQ9bj8xOi0xLGc9dDwwfHwwPT09dCYmMS90PDA/MTowO2Zvcih0PU1hdGguYWJzKHQpLGlzTmFOKHQpfHx0PT09MS8wPyhhPWlzTmFOKHQpPzE6MCxzPWMpOihzPU1hdGguZmxvb3IoTWF0aC5sb2codCkvTWF0aC5MTjIpLHQqKGw9TWF0aC5wb3coMiwtcykpPDEmJihzLS0sbCo9MiksKHQrPXMraD49MT9mL2w6ZipNYXRoLnBvdygyLDEtaCkpKmw+PTImJihzKyssbC89MikscytoPj1jPyhhPTAscz1jKTpzK2g+PTE/KGE9KHQqbC0xKSpNYXRoLnBvdygyLGkpLHMrPWgpOihhPXQqTWF0aC5wb3coMixoLTEpKk1hdGgucG93KDIsaSkscz0wKSk7aT49ODtlW3IrcF09MjU1JmEscCs9ZCxhLz0yNTYsaS09OCk7Zm9yKHM9czw8aXxhLHUrPWk7dT4wO2VbcitwXT0yNTUmcyxwKz1kLHMvPTI1Nix1LT04KTtlW3IrcC1kXXw9MTI4Kmd9fSx7fV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuY3JlYXRlP3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3QmJihlLnN1cGVyXz10LGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pKX06dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYodCl7ZS5zdXBlcl89dDt2YXIgcj1mdW5jdGlvbigpe307ci5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHIsZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZX19fSx7fV0sMjU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLmNvbG9yPSEwLHRoaXMua2V5PXZvaWQgMCx0aGlzLnZhbHVlPXZvaWQgMCx0aGlzLnBhcmVudD12b2lkIDAsdGhpcy5icm90aGVyPXZvaWQgMCx0aGlzLmxlZnRDaGlsZD12b2lkIDAsdGhpcy5yaWdodENoaWxkPXZvaWQgMCx0aGlzLmtleT1lLHRoaXMudmFsdWU9dH1yZXR1cm4gZS5wcm90b3R5cGUucm90YXRlTGVmdD1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGFyZW50LHQ9dGhpcy5icm90aGVyLHI9dGhpcy5sZWZ0Q2hpbGQsbj10aGlzLnJpZ2h0Q2hpbGQ7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTt2YXIgaT1uLmxlZnRDaGlsZCxvPW4ucmlnaHRDaGlsZDtyZXR1cm4gZSYmKGUubGVmdENoaWxkPT09dGhpcz9lLmxlZnRDaGlsZD1uOmUucmlnaHRDaGlsZD09PXRoaXMmJihlLnJpZ2h0Q2hpbGQ9bikpLG4ucGFyZW50PWUsbi5icm90aGVyPXQsbi5sZWZ0Q2hpbGQ9dGhpcyxuLnJpZ2h0Q2hpbGQ9byx0JiYodC5icm90aGVyPW4pLHRoaXMucGFyZW50PW4sdGhpcy5icm90aGVyPW8sdGhpcy5sZWZ0Q2hpbGQ9cix0aGlzLnJpZ2h0Q2hpbGQ9aSxvJiYoby5wYXJlbnQ9bixvLmJyb3RoZXI9dGhpcyksciYmKHIucGFyZW50PXRoaXMsci5icm90aGVyPWkpLGkmJihpLnBhcmVudD10aGlzLGkuYnJvdGhlcj1yKSxufSxlLnByb3RvdHlwZS5yb3RhdGVSaWdodD1mdW5jdGlvbigpe3ZhciBlPXRoaXMucGFyZW50LHQ9dGhpcy5icm90aGVyLHI9dGhpcy5sZWZ0Q2hpbGQ7aWYoIXIpdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTt2YXIgbj10aGlzLnJpZ2h0Q2hpbGQsaT1yLmxlZnRDaGlsZCxvPXIucmlnaHRDaGlsZDtyZXR1cm4gZSYmKGUubGVmdENoaWxkPT09dGhpcz9lLmxlZnRDaGlsZD1yOmUucmlnaHRDaGlsZD09PXRoaXMmJihlLnJpZ2h0Q2hpbGQ9cikpLHIucGFyZW50PWUsci5icm90aGVyPXQsci5sZWZ0Q2hpbGQ9aSxyLnJpZ2h0Q2hpbGQ9dGhpcyx0JiYodC5icm90aGVyPXIpLGkmJihpLnBhcmVudD1yLGkuYnJvdGhlcj10aGlzKSx0aGlzLnBhcmVudD1yLHRoaXMuYnJvdGhlcj1pLHRoaXMubGVmdENoaWxkPW8sdGhpcy5yaWdodENoaWxkPW4sbyYmKG8ucGFyZW50PXRoaXMsby5icm90aGVyPW4pLG4mJihuLnBhcmVudD10aGlzLG4uYnJvdGhlcj1vKSxyfSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXtpZih0aGlzLmxlZnRDaGlsZHx8dGhpcy5yaWdodENoaWxkKXRocm93IG5ldyBFcnJvcihcImNhbiBvbmx5IHJlbW92ZSBsZWFmIG5vZGVcIik7dGhpcy5wYXJlbnQmJih0aGlzPT09dGhpcy5wYXJlbnQubGVmdENoaWxkP3RoaXMucGFyZW50LmxlZnRDaGlsZD12b2lkIDA6dGhpcz09PXRoaXMucGFyZW50LnJpZ2h0Q2hpbGQmJih0aGlzLnBhcmVudC5yaWdodENoaWxkPXZvaWQgMCkpLHRoaXMuYnJvdGhlciYmKHRoaXMuYnJvdGhlci5icm90aGVyPXZvaWQgMCksdGhpcy5rZXk9dm9pZCAwLHRoaXMudmFsdWU9dm9pZCAwLHRoaXMucGFyZW50PXZvaWQgMCx0aGlzLmJyb3RoZXI9dm9pZCAwfSxlLlRyZWVOb2RlQ29sb3JUeXBlPXtyZWQ6ITAsYmxhY2s6ITF9LGV9KCk7T2JqZWN0LmZyZWV6ZShuKSxyLmRlZmF1bHQ9bn0se31dLDI2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIGEobyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7czspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBzLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OnMubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89cy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPShpPXMudHJ5cykubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pJiYoNj09PW9bMF18fDI9PT1vWzBdKSl7cz0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7cy5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZzLmxhYmVsPGlbMV0pe3MubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmcy5sYWJlbDxpWzJdKXtzLmxhYmVsPWlbMl0scy5vcHMucHVzaChvKTticmVha31pWzJdJiZzLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxzKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxhXSl9fX07ZnVuY3Rpb24gaShlKXt2YXIgdD10aGlzO3ZvaWQgMD09PWUmJihlPVtdKTt2YXIgcj1bXSxvPTAscz0wLGE9MCxsPTAsdT0wLGM9MDt0aGlzLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gY30sdGhpcy5lbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09Y30sdGhpcy5jbGVhcj1mdW5jdGlvbigpe289YT1zPWw9dT1jPTAsZi5jYWxsKHRoaXMsaS5idWNrZXRTaXplKSxjPTB9LHRoaXMuZnJvbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gcltvXVtzXX0sdGhpcy5iYWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHJbYV1bbF19LHRoaXMuZm9yRWFjaD1mdW5jdGlvbihlKXtpZighdGhpcy5lbXB0eSgpKXt2YXIgdD0wO2lmKG8hPT1hKXtmb3IodT1zO3U8aS5idWNrZXRTaXplOysrdSllKHJbb11bdV0sdCsrKTtmb3IodT1vKzE7dTxhOysrdSlmb3IodmFyIG49MDtuPGkuYnVja2V0U2l6ZTsrK24pZShyW3VdW25dLHQrKyk7Zm9yKHU9MDt1PD1sOysrdSllKHJbYV1bdV0sdCsrKX1lbHNlIGZvcih2YXIgdT1zO3U8PWw7Kyt1KWUocltvXVt1XSx0KyspfX07dmFyIGg9ZnVuY3Rpb24oZSl7dmFyIHQ9byppLmJ1Y2tldFNpemUrcyxyPXQrZSxuPWEqaS5idWNrZXRTaXplK2w7aWYocjx0fHxyPm4pdGhyb3cgbmV3IEVycm9yKFwicG9zIHNob3VsZCBtb3JlIHRoYW4gMCBhbmQgbGVzcyB0aGFuIHF1ZXVlJ3Mgc2l6ZVwiKTtyZXR1cm57Y3VyTm9kZUJ1Y2tldEluZGV4Ok1hdGguZmxvb3Ioci9pLmJ1Y2tldFNpemUpLGN1ck5vZGVQb2ludGVySW5kZXg6ciVpLmJ1Y2tldFNpemV9fTt0aGlzLmdldEVsZW1lbnRCeVBvcz1mdW5jdGlvbihlKXt2YXIgdD1oKGUpLG49dC5jdXJOb2RlQnVja2V0SW5kZXgsaT10LmN1ck5vZGVQb2ludGVySW5kZXg7cmV0dXJuIHJbbl1baV19LHRoaXMuZXJhc2VFbGVtZW50QnlQb3M9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZihlPDB8fGU+Yyl0aHJvdyBuZXcgRXJyb3IoXCJwb3Mgc2hvdWxkIG1vcmUgdGhhbiAwIGFuZCBsZXNzIHRoYW4gcXVldWUncyBzaXplXCIpO2lmKDA9PT1lKXRoaXMucG9wRnJvbnQoKTtlbHNlIGlmKGU9PT10aGlzLnNpemUoKSl0aGlzLnBvcEJhY2soKTtlbHNle2Zvcih2YXIgcj1bXSxuPWUrMTtuPGM7KytuKXIucHVzaCh0aGlzLmdldEVsZW1lbnRCeVBvcyhuKSk7dGhpcy5jdXQoZSksdGhpcy5wb3BCYWNrKCksci5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LnB1c2hCYWNrKGUpfSl9fSx0aGlzLmVyYXNlRWxlbWVudEJ5VmFsdWU9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuZW1wdHkoKSl7dmFyIHQ9W107dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHIpe3IhPT1lJiZ0LnB1c2gocil9KTtmb3IodmFyIHI9dC5sZW5ndGgsbj0wO248cjsrK24pdGhpcy5zZXRFbGVtZW50QnlQb3Mobix0W25dKTt0aGlzLmN1dChyLTEpfX07dmFyIGY9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49ZSppLnNpZ21hLGg9TWF0aC5tYXgoTWF0aC5jZWlsKG4vaS5idWNrZXRTaXplKSwyKSxmPTA7ZjxoOysrZil0LnB1c2gobmV3IEFycmF5KGkuYnVja2V0U2l6ZSkpO3ZhciBwPU1hdGguY2VpbChlL2kuYnVja2V0U2l6ZSksZD1NYXRoLmZsb29yKGgvMiktTWF0aC5mbG9vcihwLzIpLGc9ZCx5PTA7aWYodGhpcy5zaXplKCkpZm9yKGY9MDtmPHA7KytmKXtmb3IodmFyIGI9MDtiPGkuYnVja2V0U2l6ZTsrK2IpaWYodFtkK2ZdW2JdPXRoaXMuZnJvbnQoKSx0aGlzLnBvcEZyb250KCksdGhpcy5lbXB0eSgpKXtnPWQrZix5PWI7YnJlYWt9aWYodGhpcy5lbXB0eSgpKWJyZWFrfXI9dCxvPWQscz0wLGE9ZyxsPXksdT1oLGM9ZX07dGhpcy5wdXNoQmFjaz1mdW5jdGlvbihlKXt0aGlzLmVtcHR5KCl8fChhPT09dS0xJiZsPT09aS5idWNrZXRTaXplLTEmJmYuY2FsbCh0aGlzLHRoaXMuc2l6ZSgpKSxsPGkuYnVja2V0U2l6ZS0xPysrbDphPHUtMSYmKCsrYSxsPTApKSwrK2MsclthXVtsXT1lfSx0aGlzLnBvcEJhY2s9ZnVuY3Rpb24oKXt0aGlzLmVtcHR5KCl8fCgxIT09dGhpcy5zaXplKCkmJihsPjA/LS1sOm88YSYmKC0tYSxsPWkuYnVja2V0U2l6ZS0xKSksYz4wJiYtLWMpfSx0aGlzLnNldEVsZW1lbnRCeVBvcz1mdW5jdGlvbihlLHQpe3ZhciBuPWgoZSksaT1uLmN1ck5vZGVCdWNrZXRJbmRleCxvPW4uY3VyTm9kZVBvaW50ZXJJbmRleDtyW2ldW29dPXR9LHRoaXMuaW5zZXJ0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzO2lmKHZvaWQgMD09PXImJihyPTEpLDA9PT1lKWZvcig7ci0tOyl0aGlzLnB1c2hGcm9udCh0KTtlbHNlIGlmKGU9PT10aGlzLnNpemUoKSlmb3IoO3ItLTspdGhpcy5wdXNoQmFjayh0KTtlbHNle2Zvcih2YXIgaT1bXSxvPWU7bzxjOysrbylpLnB1c2godGhpcy5nZXRFbGVtZW50QnlQb3MobykpO3RoaXMuY3V0KGUtMSk7Zm9yKG89MDtvPHI7KytvKXRoaXMucHVzaEJhY2sodCk7aS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBuLnB1c2hCYWNrKGUpfSl9fSx0aGlzLmZpbmQ9ZnVuY3Rpb24oZSl7aWYobz09PWEpe2Zvcih2YXIgdD1zO3Q8PWw7Kyt0KWlmKHJbb11bdF09PT1lKXJldHVybiEwO3JldHVybiExfWZvcih0PXM7dDxpLmJ1Y2tldFNpemU7Kyt0KWlmKHJbb11bdF09PT1lKXJldHVybiEwO2Zvcih0PW8rMTt0PGE7Kyt0KWZvcih2YXIgbj0wO248aS5idWNrZXRTaXplOysrbilpZihyW3RdW25dPT09ZSlyZXR1cm4hMDtmb3IodD0wO3Q8PWw7Kyt0KWlmKHJbYV1bdF09PT1lKXJldHVybiEwO3JldHVybiExfSx0aGlzLnJldmVyc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PWMtMTtlPHQ7KXt2YXIgcj10aGlzLmdldEVsZW1lbnRCeVBvcyhlKTt0aGlzLnNldEVsZW1lbnRCeVBvcyhlLHRoaXMuZ2V0RWxlbWVudEJ5UG9zKHQpKSx0aGlzLnNldEVsZW1lbnRCeVBvcyh0LHIpLCsrZSwtLXR9fSx0aGlzLnVuaXF1ZT1mdW5jdGlvbigpe2lmKCF0aGlzLmVtcHR5KCkpe3ZhciBlPVtdLHQ9dGhpcy5mcm9udCgpO3RoaXMuZm9yRWFjaChmdW5jdGlvbihyLG4pezAhPT1uJiZyPT09dHx8KGUucHVzaChyKSx0PXIpfSk7Zm9yKHZhciByPTA7cjxjOysrcil0aGlzLnNldEVsZW1lbnRCeVBvcyhyLGVbcl0pO3RoaXMuY3V0KGUubGVuZ3RoLTEpfX0sdGhpcy5zb3J0PWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3RoaXMuZm9yRWFjaChmdW5jdGlvbihlKXt0LnB1c2goZSl9KSx0LnNvcnQoZSk7Zm9yKHZhciByPTA7cjxjOysrcil0aGlzLnNldEVsZW1lbnRCeVBvcyhyLHRbcl0pfSx0aGlzLnB1c2hGcm9udD1mdW5jdGlvbihlKXt0aGlzLmVtcHR5KCl8fCgwPT09byYmMD09PXMmJmYuY2FsbCh0aGlzLHRoaXMuc2l6ZSgpKSxzPjA/LS1zOm8+MCYmKC0tbyxzPWkuYnVja2V0U2l6ZS0xKSksKytjLHJbb11bc109ZX0sdGhpcy5wb3BGcm9udD1mdW5jdGlvbigpe3RoaXMuZW1wdHkoKXx8KDEhPT10aGlzLnNpemUoKSYmKHM8aS5idWNrZXRTaXplLTE/KytzOm88YSYmKCsrbyxzPTApKSxjPjAmJi0tYyl9LHRoaXMuc2hyaW5rVG9GaXQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9W107dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QucHVzaChlKX0pO3ZhciBuPXQubGVuZ3RoO3I9W107Zm9yKHZhciBvPU1hdGguY2VpbChuL2kuYnVja2V0U2l6ZSkscz0wO3M8bzsrK3Mpci5wdXNoKG5ldyBBcnJheShpLmJ1Y2tldFNpemUpKTt0aGlzLmNsZWFyKCksdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBlLnB1c2hCYWNrKHQpfSl9LHRoaXMuY3V0PWZ1bmN0aW9uKGUpe2lmKGU8MCl0aGlzLmNsZWFyKCk7ZWxzZXt2YXIgdD1oKGUpLHI9dC5jdXJOb2RlQnVja2V0SW5kZXgsbj10LmN1ck5vZGVQb2ludGVySW5kZXg7YT1yLGw9bixjPWUrMX19LHRoaXNbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3ZhciBlLHQ7cmV0dXJuIG4odGhpcyxmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOmlmKDA9PT1jKXJldHVyblsyXTtpZihvIT09YSlyZXR1cm5bMyw1XTt0PXMsbi5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gdDw9bD9bNCxyW29dW3RdXTpbMyw0XTtjYXNlIDI6bi5zZW50KCksbi5sYWJlbD0zO2Nhc2UgMzpyZXR1cm4rK3QsWzMsMV07Y2FzZSA0OnJldHVyblsyXTtjYXNlIDU6dD1zLG4ubGFiZWw9NjtjYXNlIDY6cmV0dXJuIHQ8aS5idWNrZXRTaXplP1s0LHJbb11bdF1dOlszLDldO2Nhc2UgNzpuLnNlbnQoKSxuLmxhYmVsPTg7Y2FzZSA4OnJldHVybisrdCxbMyw2XTtjYXNlIDk6dD1vKzEsbi5sYWJlbD0xMDtjYXNlIDEwOmlmKCEodDxhKSlyZXR1cm5bMywxNV07ZT0wLG4ubGFiZWw9MTE7Y2FzZSAxMTpyZXR1cm4gZTxpLmJ1Y2tldFNpemU/WzQsclt0XVtlXV06WzMsMTRdO2Nhc2UgMTI6bi5zZW50KCksbi5sYWJlbD0xMztjYXNlIDEzOnJldHVybisrZSxbMywxMV07Y2FzZSAxNDpyZXR1cm4rK3QsWzMsMTBdO2Nhc2UgMTU6dD0wLG4ubGFiZWw9MTY7Y2FzZSAxNjpyZXR1cm4gdDw9bD9bNCxyW2FdW3RdXTpbMywxOV07Y2FzZSAxNzpuLnNlbnQoKSxuLmxhYmVsPTE4O2Nhc2UgMTg6cmV0dXJuKyt0LFszLDE2XTtjYXNlIDE5OnJldHVyblsyXX19KX0oKX0sZnVuY3Rpb24oKXt2YXIgbj1pLmJ1Y2tldFNpemU7ZS5zaXplP249ZS5zaXplKCk6ZS5sZW5ndGgmJihuPWUubGVuZ3RoKTt2YXIgcz1uKmkuc2lnbWE7dT1NYXRoLmNlaWwocy9pLmJ1Y2tldFNpemUpLHU9TWF0aC5tYXgodSwzKTtmb3IodmFyIGw9MDtsPHU7KytsKXIucHVzaChuZXcgQXJyYXkoaS5idWNrZXRTaXplKSk7dmFyIGM9TWF0aC5jZWlsKG4vaS5idWNrZXRTaXplKTtvPU1hdGguZmxvb3IodS8yKS1NYXRoLmZsb29yKGMvMiksYT1vLGUuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gdC5wdXNoQmFjayhlKX0pfSgpLE9iamVjdC5mcmVlemUodGhpcyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksaS5zaWdtYT0zLGkuYnVja2V0U2l6ZT01ZTMsT2JqZWN0LmZyZWV6ZShpKSxyLmRlZmF1bHQ9aX0se31dLDI3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIGEobyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7czspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBzLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OnMubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89cy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPShpPXMudHJ5cykubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pJiYoNj09PW9bMF18fDI9PT1vWzBdKSl7cz0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7cy5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZzLmxhYmVsPGlbMV0pe3MubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmcy5sYWJlbDxpWzJdKXtzLmxhYmVsPWlbMl0scy5vcHMucHVzaChvKTticmVha31pWzJdJiZzLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxzKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxhXSl9fX0saT10aGlzJiZ0aGlzLl9fdmFsdWVzfHxmdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixyPXQmJmVbdF0sbj0wO2lmKHIpcmV0dXJuIHIuY2FsbChlKTtpZihlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSYmbj49ZS5sZW5ndGgmJihlPXZvaWQgMCkse3ZhbHVlOmUmJmVbbisrXSxkb25lOiFlfX19O3Rocm93IG5ldyBUeXBlRXJyb3IodD9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1lKFwiLi4vTGlua0xpc3QvTGlua0xpc3RcIikscz1lKFwiLi4vTWFwL01hcFwiKTtmdW5jdGlvbiBhKGUsdCxyKXt2YXIgbD10aGlzO2lmKHZvaWQgMD09PWUmJihlPVtdKSx2b2lkIDA9PT10JiYodD1hLmluaXRTaXplKSxyPXJ8fGZ1bmN0aW9uKGUpe3ZhciB0LHIsbj0wLG89XCJcIjtpZihcIm51bWJlclwiPT10eXBlb2YgZSluPSgobj1NYXRoLmZsb29yKGUpKTw8NSktbixuJj1uO2Vsc2V7bz1cInN0cmluZ1wiIT10eXBlb2YgZT9KU09OLnN0cmluZ2lmeShlKTplO3RyeXtmb3IodmFyIHM9aShvKSxhPXMubmV4dCgpOyFhLmRvbmU7YT1zLm5leHQoKSl7bj0objw8NSktbithLnZhbHVlLmNoYXJDb2RlQXQoMCksbiY9bn19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7YSYmIWEuZG9uZSYmKHI9cy5yZXR1cm4pJiZyLmNhbGwocyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fX1yZXR1cm4gbl49bj4+PjE2fSwwIT0odCZ0LTEpKXRocm93IG5ldyBFcnJvcihcImluaXRCdWNrZXROdW0gbXVzdCBiZSAyIHRvIHRoZSBwb3dlciBvZiBuXCIpO3ZhciB1PTAsYz1bXSxoPU1hdGgubWF4KGEuaW5pdFNpemUsTWF0aC5taW4oYS5tYXhTaXplLHQpKTt0aGlzLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdX0sdGhpcy5lbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dX0sdGhpcy5jbGVhcj1mdW5jdGlvbigpe3U9MCxoPXQsYz1bXX0sdGhpcy5mb3JFYWNoPWZ1bmN0aW9uKGUpe3ZhciB0PTA7Yy5mb3JFYWNoKGZ1bmN0aW9uKHIpe3IuZm9yRWFjaChmdW5jdGlvbihyKXtlKHIsdCsrKX0pfSl9O3RoaXMuc2V0RWxlbWVudD1mdW5jdGlvbihlLHQpe3ZhciBuLGw7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwidG8gYXZvaWQgc29tZSB1bm5lY2Vzc2FyeSBlcnJvcnMsIHdlIGRvbid0IHN1Z2dlc3QgeW91IGluc2VydCBudWxsIG9yIHVuZGVmaW5lZCBoZXJlXCIpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXt2YXIgZj1yKGUpJmgtMTtpZihjW2ZdKXt2YXIgcD1jW2ZdLnNpemUoKTtpZihjW2ZdaW5zdGFuY2VvZiBvLmRlZmF1bHQpe3RyeXtmb3IodmFyIGQ9aShjW2ZdKSxnPWQubmV4dCgpOyFnLmRvbmU7Zz1kLm5leHQoKSl7dmFyIHk9Zy52YWx1ZTtpZih5LmtleT09PWUpcmV0dXJuIHZvaWQoeS52YWx1ZT10KX19Y2F0Y2goZSl7bj17ZXJyb3I6ZX19ZmluYWxseXt0cnl7ZyYmIWcuZG9uZSYmKGw9ZC5yZXR1cm4pJiZsLmNhbGwoZCl9ZmluYWxseXtpZihuKXRocm93IG4uZXJyb3J9fWNbZl0ucHVzaEJhY2soe2tleTplLHZhbHVlOnR9KSxjW2ZdLnNpemUoKT49YS50cmVlaWZ5VGhyZXNob2xkJiYoY1tmXT1uZXcgcy5kZWZhdWx0KGNbZl0pKX1lbHNlIGNbZl0uc2V0RWxlbWVudChlLHQpO3ZhciBiPWNbZl0uc2l6ZSgpO3UrPWItcH1lbHNlKyt1LGNbZl09bmV3IG8uZGVmYXVsdChbe2tleTplLHZhbHVlOnR9XSk7dT5oKmEuc2lnbWEmJmZ1bmN0aW9uKGUpe2lmKCEoZT49YS5tYXhTaXplKSl7aD0yKmU7dmFyIHQ9W107Yy5mb3JFYWNoKGZ1bmN0aW9uKG4saSl7aWYoIW4uZW1wdHkoKSl7aWYobiBpbnN0YW5jZW9mIG8uZGVmYXVsdCYmMT09PW4uc2l6ZSgpKXt2YXIgbD1uLmZyb250KCksdT1sLmtleSxmPWwudmFsdWU7dFtyKHUpJmgtMV09bmV3IG8uZGVmYXVsdChbe2tleTp1LHZhbHVlOmZ9XSl9ZWxzZSBpZihuIGluc3RhbmNlb2Ygcy5kZWZhdWx0KXt2YXIgcD1uZXcgby5kZWZhdWx0LGQ9bmV3IG8uZGVmYXVsdDtuLmZvckVhY2goZnVuY3Rpb24odCl7MD09KHIodC5rZXkpJmUpP3AucHVzaEJhY2sodCk6ZC5wdXNoQmFjayh0KX0pLHAuc2l6ZSgpPmEudW50cmVlaWZ5VGhyZXNob2xkP3RbaV09bmV3IHMuZGVmYXVsdChwKTpwLnNpemUoKSYmKHRbaV09cCksZC5zaXplKCk+YS51bnRyZWVpZnlUaHJlc2hvbGQ/dFtpK2VdPW5ldyBzLmRlZmF1bHQoZCk6ZC5zaXplKCkmJih0W2krZV09ZCl9ZWxzZXt2YXIgZz1uZXcgby5kZWZhdWx0LHk9bmV3IG8uZGVmYXVsdDtuLmZvckVhY2goZnVuY3Rpb24odCl7MD09KHIodC5rZXkpJmUpP2cucHVzaEJhY2sodCk6eS5wdXNoQmFjayh0KX0pLGcuc2l6ZSgpJiYodFtpXT1nKSx5LnNpemUoKSYmKHRbaStlXT15KX1jW2ldLmNsZWFyKCl9fSksYz10fX0uY2FsbCh0aGlzLGgpfWVsc2UgdGhpcy5lcmFzZUVsZW1lbnRCeUtleShlKX0sdGhpcy5nZXRFbGVtZW50QnlLZXk9ZnVuY3Rpb24oZSl7dmFyIHQsbixvPXIoZSkmaC0xO2lmKGNbb10pe2lmKGNbb11pbnN0YW5jZW9mIHMuZGVmYXVsdClyZXR1cm4gY1tvXS5nZXRFbGVtZW50QnlLZXkoZSk7dHJ5e2Zvcih2YXIgYT1pKGNbb10pLGw9YS5uZXh0KCk7IWwuZG9uZTtsPWEubmV4dCgpKXt2YXIgdT1sLnZhbHVlO2lmKHUua2V5PT09ZSlyZXR1cm4gdS52YWx1ZX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7bCYmIWwuZG9uZSYmKG49YS5yZXR1cm4pJiZuLmNhbGwoYSl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fX19LHRoaXMuZXJhc2VFbGVtZW50QnlLZXk9ZnVuY3Rpb24oZSl7dmFyIHQsbixsPXIoZSkmaC0xO2lmKGNbbF0pe3ZhciBmPWNbbF0uc2l6ZSgpO2lmKGNbbF1pbnN0YW5jZW9mIHMuZGVmYXVsdCljW2xdLmVyYXNlRWxlbWVudEJ5S2V5KGUpLGNbbF0uc2l6ZSgpPD1hLnVudHJlZWlmeVRocmVzaG9sZCYmKGNbbF09bmV3IG8uZGVmYXVsdChjW2xdKSk7ZWxzZXt2YXIgcD0tMTt0cnl7Zm9yKHZhciBkPWkoY1tsXSksZz1kLm5leHQoKTshZy5kb25lO2c9ZC5uZXh0KCkpe2lmKCsrcCxnLnZhbHVlLmtleT09PWUpe2NbbF0uZXJhc2VFbGVtZW50QnlQb3MocCk7YnJlYWt9fX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtnJiYhZy5kb25lJiYobj1kLnJldHVybikmJm4uY2FsbChkKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19fXZhciB5PWNbbF0uc2l6ZSgpO3UrPXktZn19LHRoaXMuZmluZD1mdW5jdGlvbihlKXt2YXIgdCxuLG89cihlKSZoLTE7aWYoIWNbb10pcmV0dXJuITE7aWYoY1tvXWluc3RhbmNlb2Ygcy5kZWZhdWx0KXJldHVybiBjW29dLmZpbmQoZSk7dHJ5e2Zvcih2YXIgYT1pKGNbb10pLGw9YS5uZXh0KCk7IWwuZG9uZTtsPWEubmV4dCgpKXtpZihsLnZhbHVlLmtleT09PWUpcmV0dXJuITB9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2wmJiFsLmRvbmUmJihuPWEucmV0dXJuKSYmbi5jYWxsKGEpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX1yZXR1cm4hMX0sdGhpc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUsdCxyLG8scyxhO3JldHVybiBuKHRoaXMsZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDplPTAsbi5sYWJlbD0xO2Nhc2UgMTppZighKGU8aCkpcmV0dXJuWzMsMTBdO2Zvcig7ZTxoJiYhY1tlXTspKytlO2lmKGU+PWgpcmV0dXJuWzMsMTBdO24ubGFiZWw9MjtjYXNlIDI6bi50cnlzLnB1c2goWzIsNyw4LDldKSxzPXZvaWQgMCx0PWkoY1tlXSkscj10Lm5leHQoKSxuLmxhYmVsPTM7Y2FzZSAzOnJldHVybiByLmRvbmU/WzMsNl06WzQsci52YWx1ZV07Y2FzZSA0Om4uc2VudCgpLG4ubGFiZWw9NTtjYXNlIDU6cmV0dXJuIHI9dC5uZXh0KCksWzMsM107Y2FzZSA2OnJldHVyblszLDldO2Nhc2UgNzpyZXR1cm4gbz1uLnNlbnQoKSxzPXtlcnJvcjpvfSxbMyw5XTtjYXNlIDg6dHJ5e3ImJiFyLmRvbmUmJihhPXQucmV0dXJuKSYmYS5jYWxsKHQpfWZpbmFsbHl7aWYocyl0aHJvdyBzLmVycm9yfXJldHVybls3XTtjYXNlIDk6cmV0dXJuKytlLFszLDFdO2Nhc2UgMTA6cmV0dXJuWzJdfX0pfSgpfSxlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5rZXkscj1lLnZhbHVlO3JldHVybiBsLnNldEVsZW1lbnQodCxyKX0pLE9iamVjdC5mcmVlemUodGhpcyl9YS5pbml0U2l6ZT0xNixhLm1heFNpemU9MTw8MzAsYS5zaWdtYT0uNzUsYS50cmVlaWZ5VGhyZXNob2xkPTgsYS51bnRyZWVpZnlUaHJlc2hvbGQ9NixhLm1pblRyZWVpZnlTaXplPTY0LE9iamVjdC5mcmVlemUoYSksci5kZWZhdWx0PWF9LHtcIi4uL0xpbmtMaXN0L0xpbmtMaXN0XCI6MjksXCIuLi9NYXAvTWFwXCI6MzB9XSwyODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8scz17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBhKG8pe3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYocil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO3M7KXRyeXtpZihyPTEsbiYmKGk9MiZvWzBdP24ucmV0dXJuOm9bMF0/bi50aHJvd3x8KChpPW4ucmV0dXJuKSYmaS5jYWxsKG4pLDApOm4ubmV4dCkmJiEoaT1pLmNhbGwobixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gobj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gcy5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTpzLmxhYmVsKyssbj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPXMub3BzLnBvcCgpLHMudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT0oaT1zLnRyeXMpLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKSYmKDY9PT1vWzBdfHwyPT09b1swXSkpe3M9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe3MubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmcy5sYWJlbDxpWzFdKXtzLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJnMubGFiZWw8aVsyXSl7cy5sYWJlbD1pWzJdLHMub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmcy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUscyl9Y2F0Y2goZSl7bz1bNixlXSxuPTB9ZmluYWxseXtyPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sYV0pfX19LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZShcIi4uL1NldC9TZXRcIikscz1lKFwiLi4vTGlua0xpc3QvTGlua0xpc3RcIik7ZnVuY3Rpb24gYShlLHQscil7dmFyIGw9dGhpcztpZih2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09dCYmKHQ9YS5pbml0U2l6ZSkscj1yfHxmdW5jdGlvbihlKXt2YXIgdD0wLHI9XCJcIjtpZihcIm51bWJlclwiPT10eXBlb2YgZSl0PSgodD1NYXRoLmZsb29yKGUpKTw8NSktdCx0Jj10O2Vsc2V7cj1cInN0cmluZ1wiIT10eXBlb2YgZT9KU09OLnN0cmluZ2lmeShlKTplO2Zvcih2YXIgbj0wO248ci5sZW5ndGg7bisrKXt0PSh0PDw1KS10K3IuY2hhckNvZGVBdChuKSx0Jj10fX1yZXR1cm4gdF49dD4+PjE2fSwwIT0odCZ0LTEpKXRocm93IG5ldyBFcnJvcihcImluaXRCdWNrZXROdW0gbXVzdCBiZSAyIHRvIHRoZSBwb3dlciBvZiBuXCIpO3ZhciB1PTAsYz1bXSxoPU1hdGgubWF4KGEuaW5pdFNpemUsTWF0aC5taW4oYS5tYXhTaXplLHQpKTt0aGlzLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdX0sdGhpcy5lbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09dX0sdGhpcy5jbGVhcj1mdW5jdGlvbigpe3U9MCxoPXQsYz1bXX0sdGhpcy5mb3JFYWNoPWZ1bmN0aW9uKGUpe3ZhciB0PTA7Yy5mb3JFYWNoKGZ1bmN0aW9uKHIpe3IuZm9yRWFjaChmdW5jdGlvbihyKXtlKHIsdCsrKX0pfSl9O3RoaXMuaW5zZXJ0PWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcInRvIGF2b2lkIHNvbWUgdW5uZWNlc3NhcnkgZXJyb3JzLCB3ZSBkb24ndCBzdWdnZXN0IHlvdSBpbnNlcnQgbnVsbCBvciB1bmRlZmluZWQgaGVyZVwiKTt2YXIgdD1yKGUpJmgtMTtpZihjW3RdKXt2YXIgbj1jW3RdLnNpemUoKTtpZihjW3RdaW5zdGFuY2VvZiBzLmRlZmF1bHQpe2lmKGNbdF0uZmluZChlKSlyZXR1cm47Y1t0XS5wdXNoQmFjayhlKSxjW3RdLnNpemUoKT49YS50cmVlaWZ5VGhyZXNob2xkJiYoY1t0XT1uZXcgby5kZWZhdWx0KGNbdF0pKX1lbHNlIGNbdF0uaW5zZXJ0KGUpO3ZhciBpPWNbdF0uc2l6ZSgpO3UrPWktbn1lbHNlIGNbdF09bmV3IHMuZGVmYXVsdChbZV0pLCsrdTt1PmgqYS5zaWdtYSYmZnVuY3Rpb24oZSl7aWYoIShlPj1hLm1heFNpemUpKXtoPTIqZTt2YXIgdD1bXTtjLmZvckVhY2goZnVuY3Rpb24obixpKXtpZighbi5lbXB0eSgpKXtpZihuIGluc3RhbmNlb2Ygcy5kZWZhdWx0JiYxPT09bi5zaXplKCkpe3ZhciBsPW4uZnJvbnQoKTtpZih2b2lkIDA9PT1sKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7dFtyKGwpJmgtMV09bmV3IHMuZGVmYXVsdChbbF0pfWVsc2UgaWYobiBpbnN0YW5jZW9mIG8uZGVmYXVsdCl7dmFyIHU9bmV3IHMuZGVmYXVsdCxmPW5ldyBzLmRlZmF1bHQ7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpezA9PShyKHQpJmUpP3UucHVzaEJhY2sodCk6Zi5wdXNoQmFjayh0KX0pLHUuc2l6ZSgpPmEudW50cmVlaWZ5VGhyZXNob2xkP3RbaV09bmV3IG8uZGVmYXVsdCh1KTp1LnNpemUoKSYmKHRbaV09dSksZi5zaXplKCk+YS51bnRyZWVpZnlUaHJlc2hvbGQ/dFtpK2VdPW5ldyBvLmRlZmF1bHQoZik6Zi5zaXplKCkmJih0W2krZV09Zil9ZWxzZXt2YXIgcD1uZXcgcy5kZWZhdWx0LGQ9bmV3IHMuZGVmYXVsdDtuLmZvckVhY2goZnVuY3Rpb24odCl7MD09KHIodCkmZSk/cC5wdXNoQmFjayh0KTpkLnB1c2hCYWNrKHQpfSkscC5zaXplKCkmJih0W2ldPXApLGQuc2l6ZSgpJiYodFtpK2VdPWQpfWNbaV0uY2xlYXIoKX19KSxjPXR9fS5jYWxsKHRoaXMsaCl9LHRoaXMuZXJhc2VFbGVtZW50QnlWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1yKGUpJmgtMTtpZihjW3RdKXt2YXIgbj1jW3RdLnNpemUoKTtjW3RdLmVyYXNlRWxlbWVudEJ5VmFsdWUoZSksY1t0XWluc3RhbmNlb2Ygby5kZWZhdWx0JiZjW3RdLnNpemUoKTw9YS51bnRyZWVpZnlUaHJlc2hvbGQmJihjW3RdPW5ldyBzLmRlZmF1bHQoY1t0XSkpO3ZhciBpPWNbdF0uc2l6ZSgpO3UrPWktbn19LHRoaXMuZmluZD1mdW5jdGlvbihlKXt2YXIgdD1yKGUpJmgtMTtyZXR1cm4hIWNbdF0mJmNbdF0uZmluZChlKX0sdGhpc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUsdCxyLG8scyxhO3JldHVybiBuKHRoaXMsZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDplPTAsbi5sYWJlbD0xO2Nhc2UgMTppZighKGU8aCkpcmV0dXJuWzMsMTBdO2Zvcig7ZTxoJiYhY1tlXTspKytlO2lmKGU+PWgpcmV0dXJuWzMsMTBdO24ubGFiZWw9MjtjYXNlIDI6bi50cnlzLnB1c2goWzIsNyw4LDldKSxzPXZvaWQgMCx0PWkoY1tlXSkscj10Lm5leHQoKSxuLmxhYmVsPTM7Y2FzZSAzOnJldHVybiByLmRvbmU/WzMsNl06WzQsci52YWx1ZV07Y2FzZSA0Om4uc2VudCgpLG4ubGFiZWw9NTtjYXNlIDU6cmV0dXJuIHI9dC5uZXh0KCksWzMsM107Y2FzZSA2OnJldHVyblszLDldO2Nhc2UgNzpyZXR1cm4gbz1uLnNlbnQoKSxzPXtlcnJvcjpvfSxbMyw5XTtjYXNlIDg6dHJ5e3ImJiFyLmRvbmUmJihhPXQucmV0dXJuKSYmYS5jYWxsKHQpfWZpbmFsbHl7aWYocyl0aHJvdyBzLmVycm9yfXJldHVybls3XTtjYXNlIDk6cmV0dXJuKytlLFszLDFdO2Nhc2UgMTA6cmV0dXJuWzJdfX0pfSgpfSxlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGwuaW5zZXJ0KGUpfSksT2JqZWN0LmZyZWV6ZSh0aGlzKX1hLmluaXRTaXplPTE2LGEubWF4U2l6ZT0xPDwzMCxhLnNpZ21hPS43NSxhLnRyZWVpZnlUaHJlc2hvbGQ9OCxhLnVudHJlZWlmeVRocmVzaG9sZD02LGEubWluVHJlZWlmeVNpemU9NjQsT2JqZWN0LmZyZWV6ZShhKSxyLmRlZmF1bHQ9YX0se1wiLi4vTGlua0xpc3QvTGlua0xpc3RcIjoyOSxcIi4uL1NldC9TZXRcIjozM31dLDI5OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIGEobyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7czspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBzLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OnMubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89cy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPShpPXMudHJ5cykubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pJiYoNj09PW9bMF18fDI9PT1vWzBdKSl7cz0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7cy5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZzLmxhYmVsPGlbMV0pe3MubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmcy5sYWJlbDxpWzJdKXtzLmxhYmVsPWlbMl0scy5vcHMucHVzaChvKTticmVha31pWzJdJiZzLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxzKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxhXSl9fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dGhpcy52YWx1ZT12b2lkIDAsdGhpcy5wcmU9dm9pZCAwLHRoaXMubmV4dD12b2lkIDAsdGhpcy52YWx1ZT1lfX0oKTtmdW5jdGlvbiBvKGUpe3ZhciB0PXRoaXM7dm9pZCAwPT09ZSYmKGU9W10pO3ZhciByPTAsbz12b2lkIDAscz12b2lkIDA7dGhpcy5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHRoaXMuZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXJ9LHRoaXMuY2xlYXI9ZnVuY3Rpb24oKXtvPXM9dm9pZCAwLHI9MH0sdGhpcy5mcm9udD1mdW5jdGlvbigpe3JldHVybiBudWxsPT09b3x8dm9pZCAwPT09bz92b2lkIDA6by52YWx1ZX0sdGhpcy5iYWNrPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PT1zfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLnZhbHVlfSx0aGlzLmZvckVhY2g9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW8scj0wO3Q7KXtpZih2b2lkIDA9PT10LnZhbHVlKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7ZSh0LnZhbHVlLHIrKyksdD10Lm5leHR9fSx0aGlzLmdldEVsZW1lbnRCeVBvcz1mdW5jdGlvbihlKXtpZihlPDB8fGU+PXIpdGhyb3cgbmV3IEVycm9yKFwicG9zIG11c3QgbW9yZSB0aGVuIDAgYW5kIGxlc3MgdGhlbiB0aGUgbGlzdCBsZW5ndGhcIik7Zm9yKHZhciB0PW87ZS0tJiZ0Oyl0PXQubmV4dDtpZighdHx8dm9pZCAwPT09dC52YWx1ZSl0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO3JldHVybiB0LnZhbHVlfSx0aGlzLmVyYXNlRWxlbWVudEJ5UG9zPWZ1bmN0aW9uKGUpe2lmKGU8MHx8ZT49cil0aHJvdyBuZXcgRXJyb3IoXCJlcmFzZSBwb3MgbXVzdCBtb3JlIHRoZW4gMCBhbmQgbGVzcyB0aGVuIHRoZSBsaXN0IGxlbmd0aFwiKTtpZigwPT09ZSl0aGlzLnBvcEZyb250KCk7ZWxzZSBpZihlPT09ci0xKXRoaXMucG9wQmFjaygpO2Vsc2V7Zm9yKHZhciB0PW87ZS0tOyl7aWYoIShudWxsPT09dHx8dm9pZCAwPT09dD92b2lkIDA6dC5uZXh0KSl0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO3Q9dC5uZXh0fWlmKCF0fHwhdC5wcmV8fCF0Lm5leHQpdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTt2YXIgbj10LnByZSxpPXQubmV4dDtpLnByZT1uLG4ubmV4dD1pLHI+MCYmLS1yfX0sdGhpcy5lcmFzZUVsZW1lbnRCeVZhbHVlPWZ1bmN0aW9uKGUpe2Zvcig7byYmby52YWx1ZT09PWU7KXRoaXMucG9wRnJvbnQoKTtmb3IoO3MmJnMudmFsdWU9PT1lOyl0aGlzLnBvcEJhY2soKTtpZihvKWZvcih2YXIgdD1vO3Q7KXtpZih0LnZhbHVlPT09ZSl7dmFyIG49dC5wcmUsaT10Lm5leHQ7aSYmKGkucHJlPW4pLG4mJihuLm5leHQ9aSkscj4wJiYtLXJ9dD10Lm5leHR9fSx0aGlzLnB1c2hCYWNrPWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcInlvdSBjYW4ndCBwdXNoIG51bGwgb3IgdW5kZWZpbmVkIGhlcmVcIik7KytyO3ZhciB0PW5ldyBpKGUpO3M/KHMubmV4dD10LHQucHJlPXMscz10KTpvPXM9dH0sdGhpcy5wb3BCYWNrPWZ1bmN0aW9uKCl7cyYmKHI+MCYmLS1yLHMmJihvPT09cz9vPXM9dm9pZCAwOihzPXMucHJlKSYmKHMubmV4dD12b2lkIDApKSl9LHRoaXMuc2V0RWxlbWVudEJ5UG9zPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09PXR8fHZvaWQgMD09PXQpdGhyb3cgbmV3IEVycm9yKFwieW91IGNhbid0IHNldCBudWxsIG9yIHVuZGVmaW5lZCBoZXJlXCIpO2lmKGU8MHx8ZT49cil0aHJvdyBuZXcgRXJyb3IoXCJwb3MgbXVzdCBtb3JlIHRoZW4gMCBhbmQgbGVzcyB0aGVuIHRoZSBsaXN0IGxlbmd0aFwiKTtmb3IodmFyIG49bztlLS07KXtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO249bi5uZXh0fW4mJihuLnZhbHVlPXQpfSx0aGlzLmluc2VydD1mdW5jdGlvbihlLHQsbil7aWYodm9pZCAwPT09biYmKG49MSksbnVsbD09PXR8fHZvaWQgMD09PXQpdGhyb3cgbmV3IEVycm9yKFwieW91IGNhbid0IGluc2VydCBudWxsIG9yIHVuZGVmaW5lZCBoZXJlXCIpO2lmKGU8MHx8ZT5yKXRocm93IG5ldyBFcnJvcihcImluc2VydCBwb3MgbXVzdCBtb3JlIHRoZW4gMCBhbmQgbGVzcyB0aGVuIG9yIGVxdWFsIHRvIHRoZSBsaXN0IGxlbmd0aFwiKTtpZihuPDApdGhyb3cgbmV3IEVycm9yKFwiaW5zZXJ0IHNpemUgbXVzdCBtb3JlIHRoYW4gMFwiKTtpZigwPT09ZSlmb3IoO24tLTspdGhpcy5wdXNoRnJvbnQodCk7ZWxzZSBpZihlPT09cilmb3IoO24tLTspdGhpcy5wdXNoQmFjayh0KTtlbHNle2Zvcih2YXIgcz1vLGE9MTthPGU7KythKXtpZighKG51bGw9PT1zfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLm5leHQpKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7cz1udWxsPT09c3x8dm9pZCAwPT09cz92b2lkIDA6cy5uZXh0fWlmKCFzKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7dmFyIGw9cy5uZXh0O2ZvcihyKz1uO24tLTspcy5uZXh0PW5ldyBpKHQpLHMubmV4dC5wcmU9cyxzPXMubmV4dDtzLm5leHQ9bCxsJiYobC5wcmU9cyl9fSx0aGlzLmZpbmQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW87dDspe2lmKHQudmFsdWU9PT1lKXJldHVybiEwO3Q9dC5uZXh0fXJldHVybiExfSx0aGlzLnJldmVyc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGU9byx0PXMsbj0wO2UmJnQmJjIqbjxyOyl7dmFyIGk9ZS52YWx1ZTtlLnZhbHVlPXQudmFsdWUsdC52YWx1ZT1pLGU9ZS5uZXh0LHQ9dC5wcmUsKytufX0sdGhpcy51bmlxdWU9ZnVuY3Rpb24oKXtmb3IodmFyIGU9bztlOyl7Zm9yKHZhciB0PWU7dCYmdC5uZXh0JiZ0LnZhbHVlPT09dC5uZXh0LnZhbHVlOyl0PXQubmV4dCxyPjAmJi0tcjtlLm5leHQ9dC5uZXh0LGUubmV4dCYmKGUubmV4dC5wcmU9ZSksZT1lLm5leHR9fSx0aGlzLnNvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9W107dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QucHVzaChlKX0pLHQuc29ydChlKTt2YXIgcj1vO3QuZm9yRWFjaChmdW5jdGlvbihlKXtyJiYoci52YWx1ZT1lLHI9ci5uZXh0KX0pfSx0aGlzLnB1c2hGcm9udD1mdW5jdGlvbihlKXtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJ5b3UgY2FuJ3QgcHVzaCBudWxsIG9yIHVuZGVmaW5lZCBoZXJlXCIpOysrcjt2YXIgdD1uZXcgaShlKTtvPyh0Lm5leHQ9byxvLnByZT10LG89dCk6bz1zPXR9LHRoaXMucG9wRnJvbnQ9ZnVuY3Rpb24oKXtvJiYocj4wJiYtLXIsbyYmKG89PT1zP289cz12b2lkIDA6KG89by5uZXh0KSYmKG8ucHJlPXZvaWQgMCkpKX0sdGhpcy5tZXJnZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLG49bztlLmZvckVhY2goZnVuY3Rpb24oZSl7Zm9yKDtuJiZ2b2lkIDAhPT1uLnZhbHVlJiZuLnZhbHVlPD1lOyluPW4ubmV4dDtpZih2b2lkIDA9PT1uKXQucHVzaEJhY2soZSksbj1zO2Vsc2UgaWYobj09PW8pdC5wdXNoRnJvbnQoZSksbj1vO2Vsc2V7KytyO3ZhciBhPW4ucHJlO2EmJihhLm5leHQ9bmV3IGkoZSksYS5uZXh0LnByZT1hLGEubmV4dC5uZXh0PW4sbiYmKG4ucHJlPWEubmV4dCkpfX0pfSx0aGlzW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gbih0aGlzLGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6ZT1vLHQubGFiZWw9MTtjYXNlIDE6aWYodm9pZCAwPT09ZSlyZXR1cm5bMywzXTtpZighZS52YWx1ZSl0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO3JldHVybls0LGUudmFsdWVdO2Nhc2UgMjpyZXR1cm4gdC5zZW50KCksZT1lLm5leHQsWzMsMV07Y2FzZSAzOnJldHVyblsyXX19KX0oKX0sZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LnB1c2hCYWNrKGUpfSksT2JqZWN0LmZyZWV6ZSh0aGlzKX1PYmplY3QuZnJlZXplKG8pLHIuZGVmYXVsdD1vfSx7fV0sMzA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fZ2VuZXJhdG9yfHxmdW5jdGlvbihlLHQpe3ZhciByLG4saSxvLHM9e2xhYmVsOjAsc2VudDpmdW5jdGlvbigpe2lmKDEmaVswXSl0aHJvdyBpWzFdO3JldHVybiBpWzFdfSx0cnlzOltdLG9wczpbXX07cmV0dXJuIG89e25leHQ6YSgwKSx0aHJvdzphKDEpLHJldHVybjphKDIpfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihvW1N5bWJvbC5pdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLG87ZnVuY3Rpb24gYShvKXtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKHIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7Zm9yKDtzOyl0cnl7aWYocj0xLG4mJihpPTImb1swXT9uLnJldHVybjpvWzBdP24udGhyb3d8fCgoaT1uLnJldHVybikmJmkuY2FsbChuKSwwKTpuLm5leHQpJiYhKGk9aS5jYWxsKG4sb1sxXSkpLmRvbmUpcmV0dXJuIGk7c3dpdGNoKG49MCxpJiYobz1bMiZvWzBdLGkudmFsdWVdKSxvWzBdKXtjYXNlIDA6Y2FzZSAxOmk9bzticmVhaztjYXNlIDQ6cmV0dXJuIHMubGFiZWwrKyx7dmFsdWU6b1sxXSxkb25lOiExfTtjYXNlIDU6cy5sYWJlbCsrLG49b1sxXSxvPVswXTtjb250aW51ZTtjYXNlIDc6bz1zLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWU7ZGVmYXVsdDppZighKGk9KGk9cy50cnlzKS5sZW5ndGg+MCYmaVtpLmxlbmd0aC0xXSkmJig2PT09b1swXXx8Mj09PW9bMF0pKXtzPTA7Y29udGludWV9aWYoMz09PW9bMF0mJighaXx8b1sxXT5pWzBdJiZvWzFdPGlbM10pKXtzLmxhYmVsPW9bMV07YnJlYWt9aWYoNj09PW9bMF0mJnMubGFiZWw8aVsxXSl7cy5sYWJlbD1pWzFdLGk9bzticmVha31pZihpJiZzLmxhYmVsPGlbMl0pe3MubGFiZWw9aVsyXSxzLm9wcy5wdXNoKG8pO2JyZWFrfWlbMl0mJnMub3BzLnBvcCgpLHMudHJ5cy5wb3AoKTtjb250aW51ZX1vPXQuY2FsbChlLHMpfWNhdGNoKGUpe289WzYsZV0sbj0wfWZpbmFsbHl7cj1pPTB9aWYoNSZvWzBdKXRocm93IG9bMV07cmV0dXJue3ZhbHVlOm9bMF0/b1sxXTp2b2lkIDAsZG9uZTohMH19KFtvLGFdKX19fSxpPXRoaXMmJnRoaXMuX192YWx1ZXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yLHI9dCYmZVt0XSxuPTA7aWYocilyZXR1cm4gci5jYWxsKGUpO2lmKGUmJlwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiBlJiZuPj1lLmxlbmd0aCYmKGU9dm9pZCAwKSx7dmFsdWU6ZSYmZVtuKytdLGRvbmU6IWV9fX07dGhyb3cgbmV3IFR5cGVFcnJvcih0P1wiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIjpcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWUoXCIuLi9CYXNlL1RyZWVOb2RlXCIpO2Z1bmN0aW9uIHMoZSx0KXt2YXIgcj10aGlzO3ZvaWQgMD09PWUmJihlPVtdKSx0PXR8fGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU8dD8tMTplPnQ/MTowfTt2YXIgcz0wLGE9bmV3IG8uZGVmYXVsdDthLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjayx0aGlzLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gc30sdGhpcy5lbXB0eT1mdW5jdGlvbigpe3JldHVybiAwPT09c30sdGhpcy5jbGVhcj1mdW5jdGlvbigpe3M9MCxhLmtleT1hLnZhbHVlPXZvaWQgMCxhLmxlZnRDaGlsZD1hLnJpZ2h0Q2hpbGQ9YS5icm90aGVyPXZvaWQgMH07dmFyIGw9ZnVuY3Rpb24oZSl7aWYoIWV8fHZvaWQgMD09PWUua2V5KXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7cmV0dXJuIGUubGVmdENoaWxkP2woZS5sZWZ0Q2hpbGQpOmV9LHU9ZnVuY3Rpb24oZSl7aWYoIWV8fHZvaWQgMD09PWUua2V5KXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7cmV0dXJuIGUucmlnaHRDaGlsZD91KGUucmlnaHRDaGlsZCk6ZX07dGhpcy5mcm9udD1mdW5jdGlvbigpe2lmKCF0aGlzLmVtcHR5KCkpe3ZhciBlPWwoYSk7aWYodm9pZCAwPT09ZS5rZXl8fHZvaWQgMD09PWUudmFsdWUpdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTtyZXR1cm57a2V5OmUua2V5LHZhbHVlOmUudmFsdWV9fX0sdGhpcy5iYWNrPWZ1bmN0aW9uKCl7aWYoIXRoaXMuZW1wdHkoKSl7dmFyIGU9dShhKTtpZih2b2lkIDA9PT1lLmtleXx8dm9pZCAwPT09ZS52YWx1ZSl0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO3JldHVybntrZXk6ZS5rZXksdmFsdWU6ZS52YWx1ZX19fSx0aGlzLmZvckVhY2g9ZnVuY3Rpb24oZSl7dmFyIHQscixuPTA7dHJ5e2Zvcih2YXIgbz1pKHRoaXMpLHM9by5uZXh0KCk7IXMuZG9uZTtzPW8ubmV4dCgpKXtlKHMudmFsdWUsbisrKX19Y2F0Y2goZSl7dD17ZXJyb3I6ZX19ZmluYWxseXt0cnl7cyYmIXMuZG9uZSYmKHI9by5yZXR1cm4pJiZyLmNhbGwobyl9ZmluYWxseXtpZih0KXRocm93IHQuZXJyb3J9fX0sdGhpcy5nZXRFbGVtZW50QnlQb3M9ZnVuY3Rpb24oZSl7dmFyIHQscjtpZihlPDB8fGU+PXRoaXMuc2l6ZSgpKXRocm93IG5ldyBFcnJvcihcInBvcyBtdXN0IG1vcmUgdGhhbiAwIGFuZCBsZXNzIHRoYW4gc2V0J3Mgc2l6ZVwiKTt2YXIgbj0wO3RyeXtmb3IodmFyIG89aSh0aGlzKSxzPW8ubmV4dCgpOyFzLmRvbmU7cz1vLm5leHQoKSl7dmFyIGE9cy52YWx1ZTtpZihuPT09ZSlyZXR1cm4gYTsrK259fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3MmJiFzLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX10aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIEVycm9yXCIpfTt2YXIgYz1mdW5jdGlvbihlLHIpe2lmKGUmJnZvaWQgMCE9PWUua2V5JiZ2b2lkIDAhPT1lLnZhbHVlKXt2YXIgbj10KGUua2V5LHIpO3JldHVybiAwPT09bj97a2V5OmUua2V5LHZhbHVlOmUudmFsdWV9Om48MD9jKGUucmlnaHRDaGlsZCxyKTpjKGUubGVmdENoaWxkLHIpfHx7a2V5OmUua2V5LHZhbHVlOmUudmFsdWV9fX07dGhpcy5sb3dlckJvdW5kPWZ1bmN0aW9uKGUpe3JldHVybiBjKGEsZSl9O3ZhciBoPWZ1bmN0aW9uKGUscil7aWYoZSYmdm9pZCAwIT09ZS5rZXkmJnZvaWQgMCE9PWUudmFsdWUpcmV0dXJuIHQoZS5rZXkscik8PTA/aChlLnJpZ2h0Q2hpbGQscik6aChlLmxlZnRDaGlsZCxyKXx8e2tleTplLmtleSx2YWx1ZTplLnZhbHVlfX07dGhpcy51cHBlckJvdW5kPWZ1bmN0aW9uKGUpe3JldHVybiBoKGEsZSl9O3ZhciBmPWZ1bmN0aW9uKGUscil7aWYoZSYmdm9pZCAwIT09ZS5rZXkmJnZvaWQgMCE9PWUudmFsdWUpe3ZhciBuPXQoZS5rZXkscik7cmV0dXJuIDA9PT1uP3trZXk6ZS5rZXksdmFsdWU6ZS52YWx1ZX06bj4wP2YoZS5sZWZ0Q2hpbGQscik6ZihlLnJpZ2h0Q2hpbGQscil8fHtrZXk6ZS5rZXksdmFsdWU6ZS52YWx1ZX19fTt0aGlzLnJldmVyc2VMb3dlckJvdW5kPWZ1bmN0aW9uKGUpe3JldHVybiBmKGEsZSl9O3ZhciBwPWZ1bmN0aW9uKGUscil7aWYoZSYmdm9pZCAwIT09ZS5rZXkmJnZvaWQgMCE9PWUudmFsdWUpcmV0dXJuIHQoZS5rZXkscik+PTA/cChlLmxlZnRDaGlsZCxyKTpwKGUucmlnaHRDaGlsZCxyKXx8e2tleTplLmtleSx2YWx1ZTplLnZhbHVlfX07dGhpcy5yZXZlcnNlVXBwZXJCb3VuZD1mdW5jdGlvbihlKXtyZXR1cm4gcChhLGUpfTt2YXIgZD1mdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudDtpZighdCl7aWYoZT09PWEpcmV0dXJuO3Rocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIil9aWYoZS5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQpe3ZhciByPWUuYnJvdGhlcjtpZighcil0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO2lmKGU9PT10LmxlZnRDaGlsZCl7aWYoci5jb2xvcj09PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQpe3IuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLHQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZDt2YXIgbj10LnJvdGF0ZUxlZnQoKTthPT09dCYmKGE9biksZChlKX1lbHNlIGlmKHIuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spaWYoci5yaWdodENoaWxkJiZyLnJpZ2h0Q2hpbGQuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXtyLmNvbG9yPXQuY29sb3IsdC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2ssci5yaWdodENoaWxkJiYoci5yaWdodENoaWxkLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjayk7bj10LnJvdGF0ZUxlZnQoKTthPT09dCYmKGE9biksZS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t9ZWxzZSBpZihyLnJpZ2h0Q2hpbGQmJnIucmlnaHRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja3x8IXIubGVmdENoaWxkfHxyLmxlZnRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQpci5sZWZ0Q2hpbGQmJnIubGVmdENoaWxkLmNvbG9yIT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrfHxyLnJpZ2h0Q2hpbGQmJnIucmlnaHRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja3x8KHIuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCxkKHQpKTtlbHNle3IuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCxyLmxlZnRDaGlsZCYmKHIubGVmdENoaWxkLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjayk7bj1yLnJvdGF0ZVJpZ2h0KCk7YT09PXImJihhPW4pLGQoZSl9fWVsc2UgaWYoZT09PXQucmlnaHRDaGlsZClpZihyLmNvbG9yPT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCl7ci5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2ssdC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkO249dC5yb3RhdGVSaWdodCgpO2E9PT10JiYoYT1uKSxkKGUpfWVsc2UgaWYoci5jb2xvcj09PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjaylpZihyLmxlZnRDaGlsZCYmci5sZWZ0Q2hpbGQuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXtyLmNvbG9yPXQuY29sb3IsdC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2ssci5sZWZ0Q2hpbGQmJihyLmxlZnRDaGlsZC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spO249dC5yb3RhdGVSaWdodCgpO2E9PT10JiYoYT1uKSxlLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja31lbHNlIGlmKHIubGVmdENoaWxkJiZyLmxlZnRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja3x8IXIucmlnaHRDaGlsZHx8ci5yaWdodENoaWxkLmNvbG9yIT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZClyLmxlZnRDaGlsZCYmci5sZWZ0Q2hpbGQuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t8fHIucmlnaHRDaGlsZCYmci5yaWdodENoaWxkLmNvbG9yIT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrfHwoci5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkLGQodCkpO2Vsc2V7ci5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkLHIucmlnaHRDaGlsZCYmKHIucmlnaHRDaGlsZC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spO249ci5yb3RhdGVMZWZ0KCk7YT09PXImJihhPW4pLGQoZSl9fWVsc2UgZS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t9LGc9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWU7dC5sZWZ0Q2hpbGR8fHQucmlnaHRDaGlsZDspe2lmKHQucmlnaHRDaGlsZCl7dD1sKHQucmlnaHRDaGlsZCk7dmFyIHI9ZS5rZXk7ZS5rZXk9dC5rZXksdC5rZXk9cjt2YXIgbj1lLnZhbHVlO2UudmFsdWU9dC52YWx1ZSx0LnZhbHVlPW4sZT10fWlmKHQubGVmdENoaWxkKXt0PXUodC5sZWZ0Q2hpbGQpO3I9ZS5rZXk7ZS5rZXk9dC5rZXksdC5rZXk9cjtuPWUudmFsdWU7ZS52YWx1ZT10LnZhbHVlLHQudmFsdWU9bixlPXR9fWQodCksdCYmdC5yZW1vdmUoKSwtLXMsYS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t9LHk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hKCFlfHx2b2lkIDA9PT1lLmtleSkmJighIXkoZS5sZWZ0Q2hpbGQsdCl8fCghIXQoZSl8fHkoZS5yaWdodENoaWxkLHQpKSl9O3RoaXMuZXJhc2VFbGVtZW50QnlQb3M9ZnVuY3Rpb24oZSl7aWYoZTwwfHxlPj1zKXRocm93IG5ldyBFcnJvcihcInBvcyBtdXN0IG1vcmUgdGhhbiAwIGFuZCBsZXNzIHRoYW4gc2V0J3Mgc2l6ZVwiKTt2YXIgdD0wO3koYSxmdW5jdGlvbihyKXtyZXR1cm4gZT09PXQ/KGcociksITApOigrK3QsITEpfSl9LHRoaXMuZXJhc2VFbGVtZW50QnlLZXk9ZnVuY3Rpb24oZSl7aWYoIXRoaXMuZW1wdHkoKSl7dmFyIHI9dihhLGUpO3ZvaWQgMCE9PXImJnZvaWQgMCE9PXIua2V5JiYwPT09dChyLmtleSxlKSYmZyhyKX19O3ZhciBiPWZ1bmN0aW9uKGUscil7aWYoIWV8fHZvaWQgMD09PWUua2V5KXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7dmFyIG49dChyLGUua2V5KTtyZXR1cm4gbjwwP2UubGVmdENoaWxkP2IoZS5sZWZ0Q2hpbGQscik6KGUubGVmdENoaWxkPW5ldyBvLmRlZmF1bHQsZS5sZWZ0Q2hpbGQucGFyZW50PWUsZS5sZWZ0Q2hpbGQuYnJvdGhlcj1lLnJpZ2h0Q2hpbGQsZS5yaWdodENoaWxkJiYoZS5yaWdodENoaWxkLmJyb3RoZXI9ZS5sZWZ0Q2hpbGQpLGUubGVmdENoaWxkKTpuPjA/ZS5yaWdodENoaWxkP2IoZS5yaWdodENoaWxkLHIpOihlLnJpZ2h0Q2hpbGQ9bmV3IG8uZGVmYXVsdCxlLnJpZ2h0Q2hpbGQucGFyZW50PWUsZS5yaWdodENoaWxkLmJyb3RoZXI9ZS5sZWZ0Q2hpbGQsZS5sZWZ0Q2hpbGQmJihlLmxlZnRDaGlsZC5icm90aGVyPWUucmlnaHRDaGlsZCksZS5yaWdodENoaWxkKTplfSxtPWZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50O2lmKCF0KXtpZihlPT09YSlyZXR1cm47dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKX1pZih0LmNvbG9yIT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrJiZ0LmNvbG9yPT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCl7dmFyIHI9dC5icm90aGVyLG49dC5wYXJlbnQ7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTtpZihyJiZyLmNvbG9yPT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZClyLmNvbG9yPXQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLG4uY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCxtKG4pO2Vsc2UgaWYoIXJ8fHIuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spaWYodD09PW4ubGVmdENoaWxkKXtpZihlPT09dC5sZWZ0Q2hpbGQpe3QuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLG4uY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZDt2YXIgaT1uLnJvdGF0ZVJpZ2h0KCk7bj09PWEmJihhPWkpfWVsc2UgaWYoZT09PXQucmlnaHRDaGlsZCl7aT10LnJvdGF0ZUxlZnQoKTtuPT09YSYmKGE9aSksbSh0KX19ZWxzZSBpZih0PT09bi5yaWdodENoaWxkKWlmKGU9PT10LmxlZnRDaGlsZCl7aT10LnJvdGF0ZVJpZ2h0KCk7bj09PWEmJihhPWkpLG0odCl9ZWxzZSBpZihlPT09dC5yaWdodENoaWxkKXt0LmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjayxuLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQ7aT1uLnJvdGF0ZUxlZnQoKTtuPT09YSYmKGE9aSl9fX07dGhpcy5zZXRFbGVtZW50PWZ1bmN0aW9uKGUscil7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwidG8gYXZvaWQgc29tZSB1bm5lY2Vzc2FyeSBlcnJvcnMsIHdlIGRvbid0IHN1Z2dlc3QgeW91IGluc2VydCBudWxsIG9yIHVuZGVmaW5lZCBoZXJlXCIpO2lmKG51bGwhPT1yJiZ2b2lkIDAhPT1yKXtpZih0aGlzLmVtcHR5KCkpcmV0dXJuKytzLGEua2V5PWUsYS52YWx1ZT1yLHZvaWQoYS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spO3ZhciBuPWIoYSxlKTt2b2lkIDA9PT1uLmtleXx8MCE9PXQobi5rZXksZSk/KCsrcyxuLmtleT1lLG4udmFsdWU9cixtKG4pLGEuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrKTpuLnZhbHVlPXJ9ZWxzZSB0aGlzLmVyYXNlRWxlbWVudEJ5S2V5KGUpfTt2YXIgdj1mdW5jdGlvbihlLHIpe2lmKGUmJnZvaWQgMCE9PWUua2V5KXt2YXIgbj10KHIsZS5rZXkpO3JldHVybiBuPDA/dihlLmxlZnRDaGlsZCxyKTpuPjA/dihlLnJpZ2h0Q2hpbGQscik6ZX19O3RoaXMuZmluZD1mdW5jdGlvbihlKXtyZXR1cm4hIXYoYSxlKX0sdGhpcy5nZXRFbGVtZW50QnlLZXk9ZnVuY3Rpb24oZSl7dmFyIHQ9dihhLGUpO2lmKHZvaWQgMD09PShudWxsPT09dHx8dm9pZCAwPT09dD92b2lkIDA6dC5rZXkpfHx2b2lkIDA9PT0obnVsbD09PXR8fHZvaWQgMD09PXQ/dm9pZCAwOnQudmFsdWUpKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7cmV0dXJuIHQudmFsdWV9LHRoaXMudW5pb249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHI9ZS5rZXksbj1lLnZhbHVlO3JldHVybiB0LnNldEVsZW1lbnQocixuKX0pfSx0aGlzLmdldEhlaWdodD1mdW5jdGlvbigpe2lmKHRoaXMuZW1wdHkoKSlyZXR1cm4gMDt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm4gdD9NYXRoLm1heChlKHQubGVmdENoaWxkKSxlKHQucmlnaHRDaGlsZCkpKzE6MX07cmV0dXJuIGUoYSl9O3ZhciB3PWZ1bmN0aW9uKGUpe3JldHVybiBuKHRoaXMsZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm4gZSYmdm9pZCAwIT09ZS5rZXkmJnZvaWQgMCE9PWUudmFsdWU/WzUsaSh3KGUubGVmdENoaWxkKSldOlsyXTtjYXNlIDE6cmV0dXJuIHQuc2VudCgpLFs0LHtrZXk6ZS5rZXksdmFsdWU6ZS52YWx1ZX1dO2Nhc2UgMjpyZXR1cm4gdC5zZW50KCksWzUsaSh3KGUucmlnaHRDaGlsZCkpXTtjYXNlIDM6cmV0dXJuIHQuc2VudCgpLFsyXX19KX07dGhpc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHcoYSl9LGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmtleSxuPWUudmFsdWU7cmV0dXJuIHIuc2V0RWxlbWVudCh0LG4pfSksT2JqZWN0LmZyZWV6ZSh0aGlzKX1PYmplY3QuZnJlZXplKHMpLHIuZGVmYXVsdD1zfSx7XCIuLi9CYXNlL1RyZWVOb2RlXCI6MjV9XSwzMTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0KXt2b2lkIDA9PT1lJiYoZT1bXSksdD10fHxmdW5jdGlvbihlLHQpe3JldHVybiBlPnQ/LTE6ZTx0PzE6MH07dmFyIHI9W107ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiByLnB1c2goZSl9KTt2YXIgbj1yLmxlbmd0aCxpPWZ1bmN0aW9uKGUsdCl7aWYoZTwwfHxlPj1uKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7aWYodDwwfHx0Pj1uKXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7dmFyIGk9cltlXTtyW2VdPXJbdF0sclt0XT1pfSxvPWZ1bmN0aW9uKGUpe2lmKGU8MHx8ZT49bil0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO3ZhciBvPTIqZSsxLHM9MiplKzI7bzxuJiZ0KHJbZV0scltvXSk+MCYmaShlLG8pLHM8biYmdChyW2VdLHJbc10pPjAmJmkoZSxzKX07IWZ1bmN0aW9uKCl7Zm9yKHZhciBlPU1hdGguZmxvb3IoKG4tMSkvMik7ZT49MDstLWUpZm9yKHZhciBvPWUscz0yKm8rMTtzPG47KXt2YXIgYT1zKzEsbD1zO2lmKGE8biYmdChyW3NdLHJbYV0pPjAmJihsPWEpLHQocltvXSxyW2xdKTw9MClicmVhaztpKG8sbCkscz0yKihvPWwpKzF9fSgpLHRoaXMuc2l6ZT1mdW5jdGlvbigpe3JldHVybiBufSx0aGlzLmVtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1ufSx0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7bj0wLHIubGVuZ3RoPTB9LHRoaXMucHVzaD1mdW5jdGlvbihlKXtpZihyLnB1c2goZSksMSE9PSsrbilmb3IodmFyIGk9bi0xO2k+MDspe3ZhciBzPU1hdGguZmxvb3IoKGktMSkvMik7aWYodChyW3NdLGUpPD0wKWJyZWFrO28ocyksaT1zfX0sdGhpcy5wb3A9ZnVuY3Rpb24oKXtpZighdGhpcy5lbXB0eSgpKWlmKDEhPT10aGlzLnNpemUoKSl7dmFyIGU9cltuLTFdOy0tbjtmb3IodmFyIGk9MDtpPHRoaXMuc2l6ZSgpOyl7dmFyIG89MippKzEscz0yKmkrMjtpZihvPj10aGlzLnNpemUoKSlicmVhazt2YXIgYT1vO2lmKHM8dGhpcy5zaXplKCkmJnQocltvXSxyW3NdKT4wJiYoYT1zKSx0KHJbYV0sZSk+PTApYnJlYWs7cltpXT1yW2FdLGk9YX1yW2ldPWV9ZWxzZS0tbn0sdGhpcy50b3A9ZnVuY3Rpb24oKXtyZXR1cm4gclswXX0sT2JqZWN0LmZyZWV6ZSh0aGlzKX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxPYmplY3QuZnJlZXplKG4pLHIuZGVmYXVsdD1ufSx7fV0sMzI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1lKFwiLi4vTGlua0xpc3QvTGlua0xpc3RcIik7ZnVuY3Rpb24gaShlKXt2b2lkIDA9PT1lJiYoZT1bXSk7dmFyIHQ9bmV3IG4uZGVmYXVsdChlKTt0aGlzLnNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5zaXplKCl9LHRoaXMuZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gdC5lbXB0eSgpfSx0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7dC5jbGVhcigpfSx0aGlzLnB1c2g9ZnVuY3Rpb24oZSl7dC5wdXNoQmFjayhlKX0sdGhpcy5wb3A9ZnVuY3Rpb24oKXt0LnBvcEZyb250KCl9LHRoaXMuZnJvbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5mcm9udCgpfSxPYmplY3QuZnJlZXplKHRoaXMpfU9iamVjdC5mcmVlemUoaSksci5kZWZhdWx0PWl9LHtcIi4uL0xpbmtMaXN0L0xpbmtMaXN0XCI6Mjl9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXRoaXMmJnRoaXMuX19nZW5lcmF0b3J8fGZ1bmN0aW9uKGUsdCl7dmFyIHIsbixpLG8scz17bGFiZWw6MCxzZW50OmZ1bmN0aW9uKCl7aWYoMSZpWzBdKXRocm93IGlbMV07cmV0dXJuIGlbMV19LHRyeXM6W10sb3BzOltdfTtyZXR1cm4gbz17bmV4dDphKDApLHRocm93OmEoMSkscmV0dXJuOmEoMil9LFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKG9bU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksbztmdW5jdGlvbiBhKG8pe3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24obyl7aWYocil0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtmb3IoO3M7KXRyeXtpZihyPTEsbiYmKGk9MiZvWzBdP24ucmV0dXJuOm9bMF0/bi50aHJvd3x8KChpPW4ucmV0dXJuKSYmaS5jYWxsKG4pLDApOm4ubmV4dCkmJiEoaT1pLmNhbGwobixvWzFdKSkuZG9uZSlyZXR1cm4gaTtzd2l0Y2gobj0wLGkmJihvPVsyJm9bMF0saS52YWx1ZV0pLG9bMF0pe2Nhc2UgMDpjYXNlIDE6aT1vO2JyZWFrO2Nhc2UgNDpyZXR1cm4gcy5sYWJlbCsrLHt2YWx1ZTpvWzFdLGRvbmU6ITF9O2Nhc2UgNTpzLmxhYmVsKyssbj1vWzFdLG89WzBdO2NvbnRpbnVlO2Nhc2UgNzpvPXMub3BzLnBvcCgpLHMudHJ5cy5wb3AoKTtjb250aW51ZTtkZWZhdWx0OmlmKCEoaT0oaT1zLnRyeXMpLmxlbmd0aD4wJiZpW2kubGVuZ3RoLTFdKSYmKDY9PT1vWzBdfHwyPT09b1swXSkpe3M9MDtjb250aW51ZX1pZigzPT09b1swXSYmKCFpfHxvWzFdPmlbMF0mJm9bMV08aVszXSkpe3MubGFiZWw9b1sxXTticmVha31pZig2PT09b1swXSYmcy5sYWJlbDxpWzFdKXtzLmxhYmVsPWlbMV0saT1vO2JyZWFrfWlmKGkmJnMubGFiZWw8aVsyXSl7cy5sYWJlbD1pWzJdLHMub3BzLnB1c2gobyk7YnJlYWt9aVsyXSYmcy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlfW89dC5jYWxsKGUscyl9Y2F0Y2goZSl7bz1bNixlXSxuPTB9ZmluYWxseXtyPWk9MH1pZig1Jm9bMF0pdGhyb3cgb1sxXTtyZXR1cm57dmFsdWU6b1swXT9vWzFdOnZvaWQgMCxkb25lOiEwfX0oW28sYV0pfX19LGk9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89ZShcIi4uL0Jhc2UvVHJlZU5vZGVcIik7ZnVuY3Rpb24gcyhlLHQpe3ZhciByPXRoaXM7dm9pZCAwPT09ZSYmKGU9W10pLHQ9dHx8ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTx0Py0xOmU+dD8xOjB9O3ZhciBzPTAsYT1uZXcgby5kZWZhdWx0O2EuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLHRoaXMuc2l6ZT1mdW5jdGlvbigpe3JldHVybiBzfSx0aGlzLmVtcHR5PWZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1zfSx0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7cz0wLGEua2V5PXZvaWQgMCxhLmxlZnRDaGlsZD1hLnJpZ2h0Q2hpbGQ9YS5icm90aGVyPWEucGFyZW50PXZvaWQgMCxhLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja307dmFyIGw9ZnVuY3Rpb24oZSl7aWYoIWV8fHZvaWQgMD09PWUua2V5KXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7cmV0dXJuIGUubGVmdENoaWxkP2woZS5sZWZ0Q2hpbGQpOmV9LHU9ZnVuY3Rpb24oZSl7aWYoIWV8fHZvaWQgMD09PWUua2V5KXRocm93IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7cmV0dXJuIGUucmlnaHRDaGlsZD91KGUucmlnaHRDaGlsZCk6ZX07dGhpcy5mcm9udD1mdW5jdGlvbigpe2lmKCF0aGlzLmVtcHR5KCkpcmV0dXJuIGwoYSkua2V5fSx0aGlzLmJhY2s9ZnVuY3Rpb24oKXtpZighdGhpcy5lbXB0eSgpKXJldHVybiB1KGEpLmtleX0sdGhpcy5mb3JFYWNoPWZ1bmN0aW9uKGUpe3ZhciB0LHIsbj0wO3RyeXtmb3IodmFyIG89aSh0aGlzKSxzPW8ubmV4dCgpOyFzLmRvbmU7cz1vLm5leHQoKSl7ZShzLnZhbHVlLG4rKyl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e3MmJiFzLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX19LHRoaXMuZ2V0RWxlbWVudEJ5UG9zPWZ1bmN0aW9uKGUpe3ZhciB0LHI7aWYoZTwwfHxlPj10aGlzLnNpemUoKSl0aHJvdyBuZXcgRXJyb3IoXCJwb3MgbXVzdCBtb3JlIHRoYW4gMCBhbmQgbGVzcyB0aGFuIHNldCdzIHNpemVcIik7dmFyIG49MDt0cnl7Zm9yKHZhciBvPWkodGhpcykscz1vLm5leHQoKTshcy5kb25lO3M9by5uZXh0KCkpe3ZhciBhPXMudmFsdWU7aWYobj09PWUpcmV0dXJuIGE7KytufX1jYXRjaChlKXt0PXtlcnJvcjplfX1maW5hbGx5e3RyeXtzJiYhcy5kb25lJiYocj1vLnJldHVybikmJnIuY2FsbChvKX1maW5hbGx5e2lmKHQpdGhyb3cgdC5lcnJvcn19dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKX07dmFyIGM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnQ7aWYoIXQpe2lmKGU9PT1hKXJldHVybjt0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpfWlmKGUuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXt2YXIgcj1lLmJyb3RoZXI7aWYoIXIpdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTtpZihlPT09dC5sZWZ0Q2hpbGQpe2lmKHIuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXtyLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjayx0LmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQ7dmFyIG49dC5yb3RhdGVMZWZ0KCk7YT09PXQmJihhPW4pLGMoZSl9ZWxzZSBpZihyLmNvbG9yPT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrKWlmKHIucmlnaHRDaGlsZCYmci5yaWdodENoaWxkLmNvbG9yPT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCl7ci5jb2xvcj10LmNvbG9yLHQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLHIucmlnaHRDaGlsZCYmKHIucmlnaHRDaGlsZC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spO249dC5yb3RhdGVMZWZ0KCk7YT09PXQmJihhPW4pLGUuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrfWVsc2UgaWYoci5yaWdodENoaWxkJiZyLnJpZ2h0Q2hpbGQuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t8fCFyLmxlZnRDaGlsZHx8ci5sZWZ0Q2hpbGQuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXIubGVmdENoaWxkJiZyLmxlZnRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja3x8ci5yaWdodENoaWxkJiZyLnJpZ2h0Q2hpbGQuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t8fChyLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQsYyh0KSk7ZWxzZXtyLmNvbG9yPW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQsci5sZWZ0Q2hpbGQmJihyLmxlZnRDaGlsZC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spO249ci5yb3RhdGVSaWdodCgpO2E9PT1yJiYoYT1uKSxjKGUpfX1lbHNlIGlmKGU9PT10LnJpZ2h0Q2hpbGQpaWYoci5jb2xvcj09PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQpe3IuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLHQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZDtuPXQucm90YXRlUmlnaHQoKTthPT09dCYmKGE9biksYyhlKX1lbHNlIGlmKHIuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spaWYoci5sZWZ0Q2hpbGQmJnIubGVmdENoaWxkLmNvbG9yPT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCl7ci5jb2xvcj10LmNvbG9yLHQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLHIubGVmdENoaWxkJiYoci5sZWZ0Q2hpbGQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrKTtuPXQucm90YXRlUmlnaHQoKTthPT09dCYmKGE9biksZS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t9ZWxzZSBpZihyLmxlZnRDaGlsZCYmci5sZWZ0Q2hpbGQuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t8fCFyLnJpZ2h0Q2hpbGR8fHIucmlnaHRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5yZWQpci5sZWZ0Q2hpbGQmJnIubGVmdENoaWxkLmNvbG9yIT09by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrfHxyLnJpZ2h0Q2hpbGQmJnIucmlnaHRDaGlsZC5jb2xvciE9PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFja3x8KHIuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCxjKHQpKTtlbHNle3IuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZCxyLnJpZ2h0Q2hpbGQmJihyLnJpZ2h0Q2hpbGQuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrKTtuPXIucm90YXRlTGVmdCgpO2E9PT1yJiYoYT1uKSxjKGUpfX1lbHNlIGUuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrfSxoPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lO3QubGVmdENoaWxkfHx0LnJpZ2h0Q2hpbGQ7KXtpZih0LnJpZ2h0Q2hpbGQpe3Q9bCh0LnJpZ2h0Q2hpbGQpO3ZhciByPWUua2V5O2Uua2V5PXQua2V5LHQua2V5PXIsZT10fWlmKHQubGVmdENoaWxkKXt0PXUodC5sZWZ0Q2hpbGQpO3I9ZS5rZXk7ZS5rZXk9dC5rZXksdC5rZXk9cixlPXR9fWModCksdCYmdC5yZW1vdmUoKSwtLXMsYS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2t9LGY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hKCFlfHx2b2lkIDA9PT1lLmtleSkmJighIWYoZS5sZWZ0Q2hpbGQsdCl8fCghIXQoZSl8fGYoZS5yaWdodENoaWxkLHQpKSl9O3RoaXMuZXJhc2VFbGVtZW50QnlQb3M9ZnVuY3Rpb24oZSl7aWYoZTwwfHxlPj1zKXRocm93IG5ldyBFcnJvcihcInBvcyBtdXN0IG1vcmUgdGhhbiAwIGFuZCBsZXNzIHRoYW4gc2V0J3Mgc2l6ZVwiKTt2YXIgdD0wO2YoYSxmdW5jdGlvbihyKXtyZXR1cm4gZT09PXQ/KGgociksITApOigrK3QsITEpfSl9LHRoaXMuZXJhc2VFbGVtZW50QnlWYWx1ZT1mdW5jdGlvbihlKXtpZighdGhpcy5lbXB0eSgpKXt2YXIgcj1nKGEsZSk7dm9pZCAwIT09ciYmdm9pZCAwIT09ci5rZXkmJjA9PT10KHIua2V5LGUpJiZoKHIpfX07dmFyIHA9ZnVuY3Rpb24oZSxyKXtpZighZXx8dm9pZCAwPT09ZS5rZXkpdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBlcnJvclwiKTt2YXIgbj10KHIsZS5rZXkpO3JldHVybiBuPDA/ZS5sZWZ0Q2hpbGQ/cChlLmxlZnRDaGlsZCxyKTooZS5sZWZ0Q2hpbGQ9bmV3IG8uZGVmYXVsdCxlLmxlZnRDaGlsZC5wYXJlbnQ9ZSxlLmxlZnRDaGlsZC5icm90aGVyPWUucmlnaHRDaGlsZCxlLnJpZ2h0Q2hpbGQmJihlLnJpZ2h0Q2hpbGQuYnJvdGhlcj1lLmxlZnRDaGlsZCksZS5sZWZ0Q2hpbGQpOm4+MD9lLnJpZ2h0Q2hpbGQ/cChlLnJpZ2h0Q2hpbGQscik6KGUucmlnaHRDaGlsZD1uZXcgby5kZWZhdWx0LGUucmlnaHRDaGlsZC5wYXJlbnQ9ZSxlLnJpZ2h0Q2hpbGQuYnJvdGhlcj1lLmxlZnRDaGlsZCxlLmxlZnRDaGlsZCYmKGUubGVmdENoaWxkLmJyb3RoZXI9ZS5yaWdodENoaWxkKSxlLnJpZ2h0Q2hpbGQpOmV9LGQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnQ7aWYoIXQpe2lmKGU9PT1hKXJldHVybjt0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpfWlmKHQuY29sb3IhPT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2smJnQuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXt2YXIgcj10LmJyb3RoZXIsbj10LnBhcmVudDtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yXCIpO2lmKHImJnIuY29sb3I9PT1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkKXIuY29sb3I9dC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2ssbi5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkLGQobik7ZWxzZSBpZighcnx8ci5jb2xvcj09PW8uZGVmYXVsdC5UcmVlTm9kZUNvbG9yVHlwZS5ibGFjaylpZih0PT09bi5sZWZ0Q2hpbGQpe2lmKGU9PT10LmxlZnRDaGlsZCl7dC5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2ssbi5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUucmVkO3ZhciBpPW4ucm90YXRlUmlnaHQoKTtuPT09YSYmKGE9aSl9ZWxzZSBpZihlPT09dC5yaWdodENoaWxkKXtpPXQucm90YXRlTGVmdCgpO249PT1hJiYoYT1pKSxkKHQpfX1lbHNlIGlmKHQ9PT1uLnJpZ2h0Q2hpbGQpaWYoZT09PXQubGVmdENoaWxkKXtpPXQucm90YXRlUmlnaHQoKTtuPT09YSYmKGE9aSksZCh0KX1lbHNlIGlmKGU9PT10LnJpZ2h0Q2hpbGQpe3QuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrLG4uY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLnJlZDtpPW4ucm90YXRlTGVmdCgpO249PT1hJiYoYT1pKX19fTt0aGlzLmluc2VydD1mdW5jdGlvbihlKXtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJ0byBhdm9pZCBzb21lIHVubmVjZXNzYXJ5IGVycm9ycywgd2UgZG9uJ3Qgc3VnZ2VzdCB5b3UgaW5zZXJ0IG51bGwgb3IgdW5kZWZpbmVkIGhlcmVcIik7aWYodGhpcy5lbXB0eSgpKXJldHVybisrcyxhLmtleT1lLHZvaWQoYS5jb2xvcj1vLmRlZmF1bHQuVHJlZU5vZGVDb2xvclR5cGUuYmxhY2spO3ZhciByPXAoYSxlKTt2b2lkIDAhPT1yLmtleSYmMD09PXQoci5rZXksZSl8fCgrK3Msci5rZXk9ZSxkKHIpLGEuY29sb3I9by5kZWZhdWx0LlRyZWVOb2RlQ29sb3JUeXBlLmJsYWNrKX07dmFyIGc9ZnVuY3Rpb24oZSxyKXtpZihlJiZ2b2lkIDAhPT1lLmtleSl7dmFyIG49dChyLGUua2V5KTtyZXR1cm4gbjwwP2coZS5sZWZ0Q2hpbGQscik6bj4wP2coZS5yaWdodENoaWxkLHIpOmV9fTt0aGlzLmZpbmQ9ZnVuY3Rpb24oZSl7dmFyIHI9ZyhhLGUpO3JldHVybiB2b2lkIDAhPT1yJiZ2b2lkIDAhPT1yLmtleSYmMD09PXQoci5rZXksZSl9O3ZhciB5PWZ1bmN0aW9uKGUscil7aWYoZSYmdm9pZCAwIT09ZS5rZXkpe3ZhciBuPXQoZS5rZXkscik7cmV0dXJuIDA9PT1uP2Uua2V5Om48MD95KGUucmlnaHRDaGlsZCxyKTp5KGUubGVmdENoaWxkLHIpfHxlLmtleX19O3RoaXMubG93ZXJCb3VuZD1mdW5jdGlvbihlKXtyZXR1cm4geShhLGUpfTt2YXIgYj1mdW5jdGlvbihlLHIpe2lmKGUmJnZvaWQgMCE9PWUua2V5KXJldHVybiB0KGUua2V5LHIpPD0wP2IoZS5yaWdodENoaWxkLHIpOmIoZS5sZWZ0Q2hpbGQscil8fGUua2V5fTt0aGlzLnVwcGVyQm91bmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGIoYSxlKX07dmFyIG09ZnVuY3Rpb24oZSxyKXtpZihlJiZ2b2lkIDAhPT1lLmtleSl7dmFyIG49dChlLmtleSxyKTtyZXR1cm4gMD09PW4/ZS5rZXk6bj4wP20oZS5sZWZ0Q2hpbGQscik6bShlLnJpZ2h0Q2hpbGQscil8fGUua2V5fX07dGhpcy5yZXZlcnNlTG93ZXJCb3VuZD1mdW5jdGlvbihlKXtyZXR1cm4gbShhLGUpfTt2YXIgdj1mdW5jdGlvbihlLHIpe2lmKGUmJnZvaWQgMCE9PWUua2V5KXJldHVybiB0KGUua2V5LHIpPj0wP3YoZS5sZWZ0Q2hpbGQscik6dihlLnJpZ2h0Q2hpbGQscil8fGUua2V5fTt0aGlzLnJldmVyc2VVcHBlckJvdW5kPWZ1bmN0aW9uKGUpe3JldHVybiB2KGEsZSl9LHRoaXMudW5pb249ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuaW5zZXJ0KGUpfSl9LHRoaXMuZ2V0SGVpZ2h0PWZ1bmN0aW9uKCl7aWYodGhpcy5lbXB0eSgpKXJldHVybiAwO3ZhciBlPWZ1bmN0aW9uKHQpe3JldHVybiB0P01hdGgubWF4KGUodC5sZWZ0Q2hpbGQpLGUodC5yaWdodENoaWxkKSkrMToxfTtyZXR1cm4gZShhKX07dmFyIHc9ZnVuY3Rpb24oZSl7cmV0dXJuIG4odGhpcyxmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOnJldHVybiBlJiZ2b2lkIDAhPT1lLmtleT9bNSxpKHcoZS5sZWZ0Q2hpbGQpKV06WzJdO2Nhc2UgMTpyZXR1cm4gdC5zZW50KCksWzQsZS5rZXldO2Nhc2UgMjpyZXR1cm4gdC5zZW50KCksWzUsaSh3KGUucmlnaHRDaGlsZCkpXTtjYXNlIDM6cmV0dXJuIHQuc2VudCgpLFsyXX19KX07dGhpc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHcoYSl9LGUuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gci5pbnNlcnQoZSl9KSxPYmplY3QuZnJlZXplKHRoaXMpfU9iamVjdC5mcmVlemUocyksci5kZWZhdWx0PXN9LHtcIi4uL0Jhc2UvVHJlZU5vZGVcIjoyNX1dLDM0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXt2YXIgdD10aGlzO3ZvaWQgMD09PWUmJihlPVtdKTt2YXIgcj0wLG49W107dGhpcy5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHRoaXMuZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXJ9LHRoaXMuY2xlYXI9ZnVuY3Rpb24oKXtyPTAsbi5sZW5ndGg9MH0sdGhpcy5wdXNoPWZ1bmN0aW9uKGUpe24ucHVzaChlKSwrK3J9LHRoaXMucG9wPWZ1bmN0aW9uKCl7bi5wb3AoKSxyPjAmJi0tcn0sdGhpcy50b3A9ZnVuY3Rpb24oKXtyZXR1cm4gbltyLTFdfSxlLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQucHVzaChlKX0pLE9iamVjdC5mcmVlemUodGhpcyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksT2JqZWN0LmZyZWV6ZShuKSxyLmRlZmF1bHQ9bn0se31dLDM1OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX2dlbmVyYXRvcnx8ZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJmlbMF0pdGhyb3cgaVsxXTtyZXR1cm4gaVsxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBvPXtuZXh0OmEoMCksdGhyb3c6YSgxKSxyZXR1cm46YSgyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYob1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxvO2Z1bmN0aW9uIGEobyl7cmV0dXJuIGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihvKXtpZihyKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7czspdHJ5e2lmKHI9MSxuJiYoaT0yJm9bMF0/bi5yZXR1cm46b1swXT9uLnRocm93fHwoKGk9bi5yZXR1cm4pJiZpLmNhbGwobiksMCk6bi5uZXh0KSYmIShpPWkuY2FsbChuLG9bMV0pKS5kb25lKXJldHVybiBpO3N3aXRjaChuPTAsaSYmKG89WzImb1swXSxpLnZhbHVlXSksb1swXSl7Y2FzZSAwOmNhc2UgMTppPW87YnJlYWs7Y2FzZSA0OnJldHVybiBzLmxhYmVsKysse3ZhbHVlOm9bMV0sZG9uZTohMX07Y2FzZSA1OnMubGFiZWwrKyxuPW9bMV0sbz1bMF07Y29udGludWU7Y2FzZSA3Om89cy5vcHMucG9wKCkscy50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShpPShpPXMudHJ5cykubGVuZ3RoPjAmJmlbaS5sZW5ndGgtMV0pJiYoNj09PW9bMF18fDI9PT1vWzBdKSl7cz0wO2NvbnRpbnVlfWlmKDM9PT1vWzBdJiYoIWl8fG9bMV0+aVswXSYmb1sxXTxpWzNdKSl7cy5sYWJlbD1vWzFdO2JyZWFrfWlmKDY9PT1vWzBdJiZzLmxhYmVsPGlbMV0pe3MubGFiZWw9aVsxXSxpPW87YnJlYWt9aWYoaSYmcy5sYWJlbDxpWzJdKXtzLmxhYmVsPWlbMl0scy5vcHMucHVzaChvKTticmVha31pWzJdJiZzLm9wcy5wb3AoKSxzLnRyeXMucG9wKCk7Y29udGludWV9bz10LmNhbGwoZSxzKX1jYXRjaChlKXtvPVs2LGVdLG49MH1maW5hbGx5e3I9aT0wfWlmKDUmb1swXSl0aHJvdyBvWzFdO3JldHVybnt2YWx1ZTpvWzBdP29bMV06dm9pZCAwLGRvbmU6ITB9fShbbyxhXSl9fX0saT10aGlzJiZ0aGlzLl9fcmVhZHx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXTtpZighcilyZXR1cm4gZTt2YXIgbixpLG89ci5jYWxsKGUpLHM9W107dHJ5e2Zvcig7KHZvaWQgMD09PXR8fHQtLSA+MCkmJiEobj1vLm5leHQoKSkuZG9uZTspcy5wdXNoKG4udmFsdWUpfWNhdGNoKGUpe2k9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e24mJiFuLmRvbmUmJihyPW8ucmV0dXJuKSYmci5jYWxsKG8pfWZpbmFsbHl7aWYoaSl0aHJvdyBpLmVycm9yfX1yZXR1cm4gc30sbz10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXl8fGZ1bmN0aW9uKGUsdCxyKXtpZihyfHwyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIG4saT0wLG89dC5sZW5ndGg7aTxvO2krKykhbiYmaSBpbiB0fHwobnx8KG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodCwwLGkpKSxuW2ldPXRbaV0pO3JldHVybiBlLmNvbmNhdChufHxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0KSl9LHM9dGhpcyYmdGhpcy5fX3ZhbHVlc3x8ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3Iscj10JiZlW3RdLG49MDtpZihyKXJldHVybiByLmNhbGwoZSk7aWYoZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXJldHVybntuZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIGUmJm4+PWUubGVuZ3RoJiYoZT12b2lkIDApLHt2YWx1ZTplJiZlW24rK10sZG9uZTohZX19fTt0aHJvdyBuZXcgVHlwZUVycm9yKHQ/XCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiOlwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKX07ZnVuY3Rpb24gYShlKXt2YXIgdD10aGlzO3ZvaWQgMD09PWUmJihlPVtdKTt2YXIgcj0wLGE9W107dGhpcy5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHRoaXMuZW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXJ9LHRoaXMuY2xlYXI9ZnVuY3Rpb24oKXtyPTAsYS5sZW5ndGg9MH0sdGhpcy5mcm9udD1mdW5jdGlvbigpe2lmKCF0aGlzLmVtcHR5KCkpcmV0dXJuIGFbMF19LHRoaXMuYmFjaz1mdW5jdGlvbigpe2lmKCF0aGlzLmVtcHR5KCkpcmV0dXJuIGFbci0xXX0sdGhpcy5mb3JFYWNoPWZ1bmN0aW9uKGUpe2EuZm9yRWFjaChlKX0sdGhpcy5nZXRFbGVtZW50QnlQb3M9ZnVuY3Rpb24oZSl7aWYoZTwwfHxlPj1yKXRocm93IG5ldyBFcnJvcihcInBvcyBtdXN0IG1vcmUgdGhhbiAwIGFuZCBsZXNzIHRoYW4gdmVjdG9yJ3Mgc2l6ZVwiKTtyZXR1cm4gYVtlXX0sdGhpcy5lcmFzZUVsZW1lbnRCeVBvcz1mdW5jdGlvbihlKXtpZihlPDB8fGU+PXIpdGhyb3cgbmV3IEVycm9yKFwicG9zIG11c3QgbW9yZSB0aGFuIDAgYW5kIGxlc3MgdGhhbiB2ZWN0b3IncyBzaXplXCIpO2Zvcih2YXIgdD1lO3Q8ci0xOysrdClhW3RdPWFbdCsxXTt0aGlzLnBvcEJhY2soKX0sdGhpcy5lcmFzZUVsZW1lbnRCeVZhbHVlPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3RoaXMuZm9yRWFjaChmdW5jdGlvbihyKXtyIT09ZSYmdC5wdXNoKHIpfSksdC5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7YVt0XT1lfSk7Zm9yKHZhciBuPXQubGVuZ3RoO3I+bjspdGhpcy5wb3BCYWNrKCl9LHRoaXMucHVzaEJhY2s9ZnVuY3Rpb24oZSl7YS5wdXNoKGUpLCsrcn0sdGhpcy5wb3BCYWNrPWZ1bmN0aW9uKCl7YS5wb3AoKSxyPjAmJi0tcn0sdGhpcy5zZXRFbGVtZW50QnlQb3M9ZnVuY3Rpb24oZSx0KXtpZihlPDB8fGU+PXIpdGhyb3cgbmV3IEVycm9yKFwicG9zIG11c3QgbW9yZSB0aGFuIDAgYW5kIGxlc3MgdGhhbiB2ZWN0b3IncyBzaXplXCIpO2FbZV09dH0sdGhpcy5pbnNlcnQ9ZnVuY3Rpb24oZSx0LG4pe2lmKHZvaWQgMD09PW4mJihuPTEpLGU8MHx8ZT5yKXRocm93IG5ldyBFcnJvcihcInBvcyBtdXN0IG1vcmUgdGhhbiAwIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdmVjdG9yJ3Mgc2l6ZVwiKTthLnNwbGljZS5hcHBseShhLG8oW2UsMF0saShuZXcgQXJyYXkobikuZmlsbCh0KSksITEpKSxyKz1ufSx0aGlzLmZpbmQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGEuaW5jbHVkZXMoZSl9LHRoaXMucmV2ZXJzZT1mdW5jdGlvbigpe2EucmV2ZXJzZSgpfSx0aGlzLnVuaXF1ZT1mdW5jdGlvbigpe3ZhciBlLHQ9W107dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHIsbil7MCE9PW4mJnI9PT1lfHwodC5wdXNoKHIpLGU9cil9KSx0LmZvckVhY2goZnVuY3Rpb24oZSx0KXthW3RdPWV9KTtmb3IodmFyIG49dC5sZW5ndGg7cj5uOyl0aGlzLnBvcEJhY2soKX0sdGhpcy5zb3J0PWZ1bmN0aW9uKGUpe2Euc29ydChlKX0sdGhpc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyxmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls1LHMoYSldO2Nhc2UgMTpyZXR1cm5bMixlLnNlbnQoKV19fSl9KCl9LGUuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gdC5wdXNoQmFjayhlKX0pLE9iamVjdC5mcmVlemUodGhpcyl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksT2JqZWN0LmZyZWV6ZShhKSxyLmRlZmF1bHQ9YX0se31dLDM2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5IYXNoTWFwPXIuSGFzaFNldD1yLk1hcD1yLlNldD1yLlByaW9yaXR5UXVldWU9ci5EZXF1ZT1yLkxpbmtMaXN0PXIuUXVldWU9ci5TdGFjaz1yLlZlY3Rvcj12b2lkIDA7dmFyIG49ZShcIi4vVmVjdG9yL1ZlY3RvclwiKTtyLlZlY3Rvcj1uLmRlZmF1bHQ7dmFyIGk9ZShcIi4vU3RhY2svU3RhY2tcIik7ci5TdGFjaz1pLmRlZmF1bHQ7dmFyIG89ZShcIi4vUXVldWUvUXVldWVcIik7ci5RdWV1ZT1vLmRlZmF1bHQ7dmFyIHM9ZShcIi4vTGlua0xpc3QvTGlua0xpc3RcIik7ci5MaW5rTGlzdD1zLmRlZmF1bHQ7dmFyIGE9ZShcIi4vRGVxdWUvRGVxdWVcIik7ci5EZXF1ZT1hLmRlZmF1bHQ7dmFyIGw9ZShcIi4vUHJpb3JpdHlRdWV1ZS9Qcmlvcml0eVF1ZXVlXCIpO3IuUHJpb3JpdHlRdWV1ZT1sLmRlZmF1bHQ7dmFyIHU9ZShcIi4vU2V0L1NldFwiKTtyLlNldD11LmRlZmF1bHQ7dmFyIGM9ZShcIi4vTWFwL01hcFwiKTtyLk1hcD1jLmRlZmF1bHQ7dmFyIGg9ZShcIi4vSGFzaFNldC9IYXNoU2V0XCIpO3IuSGFzaFNldD1oLmRlZmF1bHQ7dmFyIGY9ZShcIi4vSGFzaE1hcC9IYXNoTWFwXCIpO3IuSGFzaE1hcD1mLmRlZmF1bHR9LHtcIi4vRGVxdWUvRGVxdWVcIjoyNixcIi4vSGFzaE1hcC9IYXNoTWFwXCI6MjcsXCIuL0hhc2hTZXQvSGFzaFNldFwiOjI4LFwiLi9MaW5rTGlzdC9MaW5rTGlzdFwiOjI5LFwiLi9NYXAvTWFwXCI6MzAsXCIuL1ByaW9yaXR5UXVldWUvUHJpb3JpdHlRdWV1ZVwiOjMxLFwiLi9RdWV1ZS9RdWV1ZVwiOjMyLFwiLi9TZXQvU2V0XCI6MzMsXCIuL1N0YWNrL1N0YWNrXCI6MzQsXCIuL1ZlY3Rvci9WZWN0b3JcIjozNX1dLDM3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7Y29uc3Qgbj1lKFwieWFsbGlzdFwiKSxpPVN5bWJvbChcIm1heFwiKSxvPVN5bWJvbChcImxlbmd0aFwiKSxzPVN5bWJvbChcImxlbmd0aENhbGN1bGF0b3JcIiksYT1TeW1ib2woXCJhbGxvd1N0YWxlXCIpLGw9U3ltYm9sKFwibWF4QWdlXCIpLHU9U3ltYm9sKFwiZGlzcG9zZVwiKSxjPVN5bWJvbChcIm5vRGlzcG9zZU9uU2V0XCIpLGg9U3ltYm9sKFwibHJ1TGlzdFwiKSxmPVN5bWJvbChcImNhY2hlXCIpLHA9U3ltYm9sKFwidXBkYXRlQWdlT25HZXRcIiksZD0oKT0+MTtjb25zdCBnPShlLHQscik9Pntjb25zdCBuPWVbZl0uZ2V0KHQpO2lmKG4pe2NvbnN0IHQ9bi52YWx1ZTtpZih5KGUsdCkpe2lmKG0oZSxuKSwhZVthXSlyZXR1cm59ZWxzZSByJiYoZVtwXSYmKG4udmFsdWUubm93PURhdGUubm93KCkpLGVbaF0udW5zaGlmdE5vZGUobikpO3JldHVybiB0LnZhbHVlfX0seT0oZSx0KT0+e2lmKCF0fHwhdC5tYXhBZ2UmJiFlW2xdKXJldHVybiExO2NvbnN0IHI9RGF0ZS5ub3coKS10Lm5vdztyZXR1cm4gdC5tYXhBZ2U/cj50Lm1heEFnZTplW2xdJiZyPmVbbF19LGI9ZT0+e2lmKGVbb10+ZVtpXSlmb3IobGV0IHQ9ZVtoXS50YWlsO2Vbb10+ZVtpXSYmbnVsbCE9PXQ7KXtjb25zdCByPXQucHJldjttKGUsdCksdD1yfX0sbT0oZSx0KT0+e2lmKHQpe2NvbnN0IHI9dC52YWx1ZTtlW3VdJiZlW3VdKHIua2V5LHIudmFsdWUpLGVbb10tPXIubGVuZ3RoLGVbZl0uZGVsZXRlKHIua2V5KSxlW2hdLnJlbW92ZU5vZGUodCl9fTtjbGFzcyB2e2NvbnN0cnVjdG9yKGUsdCxyLG4saSl7dGhpcy5rZXk9ZSx0aGlzLnZhbHVlPXQsdGhpcy5sZW5ndGg9cix0aGlzLm5vdz1uLHRoaXMubWF4QWdlPWl8fDB9fWNvbnN0IHc9KGUsdCxyLG4pPT57bGV0IGk9ci52YWx1ZTt5KGUsaSkmJihtKGUsciksZVthXXx8KGk9dm9pZCAwKSksaSYmdC5jYWxsKG4saS52YWx1ZSxpLmtleSxlKX07dC5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKGUpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlJiYoZT17bWF4OmV9KSxlfHwoZT17fSksZS5tYXgmJihcIm51bWJlclwiIT10eXBlb2YgZS5tYXh8fGUubWF4PDApKXRocm93IG5ldyBUeXBlRXJyb3IoXCJtYXggbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXJcIik7dGhpc1tpXT1lLm1heHx8MS8wO2NvbnN0IHQ9ZS5sZW5ndGh8fGQ7aWYodGhpc1tzXT1cImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2Q6dCx0aGlzW2FdPWUuc3RhbGV8fCExLGUubWF4QWdlJiZcIm51bWJlclwiIT10eXBlb2YgZS5tYXhBZ2UpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm1heEFnZSBtdXN0IGJlIGEgbnVtYmVyXCIpO3RoaXNbbF09ZS5tYXhBZ2V8fDAsdGhpc1t1XT1lLmRpc3Bvc2UsdGhpc1tjXT1lLm5vRGlzcG9zZU9uU2V0fHwhMSx0aGlzW3BdPWUudXBkYXRlQWdlT25HZXR8fCExLHRoaXMucmVzZXQoKX1zZXQgbWF4KGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDApdGhyb3cgbmV3IFR5cGVFcnJvcihcIm1heCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlclwiKTt0aGlzW2ldPWV8fDEvMCxiKHRoaXMpfWdldCBtYXgoKXtyZXR1cm4gdGhpc1tpXX1zZXQgYWxsb3dTdGFsZShlKXt0aGlzW2FdPSEhZX1nZXQgYWxsb3dTdGFsZSgpe3JldHVybiB0aGlzW2FdfXNldCBtYXhBZ2UoZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm1heEFnZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlclwiKTt0aGlzW2xdPWUsYih0aGlzKX1nZXQgbWF4QWdlKCl7cmV0dXJuIHRoaXNbbF19c2V0IGxlbmd0aENhbGN1bGF0b3IoZSl7XCJmdW5jdGlvblwiIT10eXBlb2YgZSYmKGU9ZCksZSE9PXRoaXNbc10mJih0aGlzW3NdPWUsdGhpc1tvXT0wLHRoaXNbaF0uZm9yRWFjaChlPT57ZS5sZW5ndGg9dGhpc1tzXShlLnZhbHVlLGUua2V5KSx0aGlzW29dKz1lLmxlbmd0aH0pKSxiKHRoaXMpfWdldCBsZW5ndGhDYWxjdWxhdG9yKCl7cmV0dXJuIHRoaXNbc119Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzW29dfWdldCBpdGVtQ291bnQoKXtyZXR1cm4gdGhpc1toXS5sZW5ndGh9cmZvckVhY2goZSx0KXt0PXR8fHRoaXM7Zm9yKGxldCByPXRoaXNbaF0udGFpbDtudWxsIT09cjspe2NvbnN0IG49ci5wcmV2O3codGhpcyxlLHIsdCkscj1ufX1mb3JFYWNoKGUsdCl7dD10fHx0aGlzO2ZvcihsZXQgcj10aGlzW2hdLmhlYWQ7bnVsbCE9PXI7KXtjb25zdCBuPXIubmV4dDt3KHRoaXMsZSxyLHQpLHI9bn19a2V5cygpe3JldHVybiB0aGlzW2hdLnRvQXJyYXkoKS5tYXAoZT0+ZS5rZXkpfXZhbHVlcygpe3JldHVybiB0aGlzW2hdLnRvQXJyYXkoKS5tYXAoZT0+ZS52YWx1ZSl9cmVzZXQoKXt0aGlzW3VdJiZ0aGlzW2hdJiZ0aGlzW2hdLmxlbmd0aCYmdGhpc1toXS5mb3JFYWNoKGU9PnRoaXNbdV0oZS5rZXksZS52YWx1ZSkpLHRoaXNbZl09bmV3IE1hcCx0aGlzW2hdPW5ldyBuLHRoaXNbb109MH1kdW1wKCl7cmV0dXJuIHRoaXNbaF0ubWFwKGU9PiF5KHRoaXMsZSkmJntrOmUua2V5LHY6ZS52YWx1ZSxlOmUubm93KyhlLm1heEFnZXx8MCl9KS50b0FycmF5KCkuZmlsdGVyKGU9PmUpfWR1bXBMcnUoKXtyZXR1cm4gdGhpc1toXX1zZXQoZSx0LHIpe2lmKChyPXJ8fHRoaXNbbF0pJiZcIm51bWJlclwiIT10eXBlb2Ygcil0aHJvdyBuZXcgVHlwZUVycm9yKFwibWF4QWdlIG11c3QgYmUgYSBudW1iZXJcIik7Y29uc3Qgbj1yP0RhdGUubm93KCk6MCxhPXRoaXNbc10odCxlKTtpZih0aGlzW2ZdLmhhcyhlKSl7aWYoYT50aGlzW2ldKXJldHVybiBtKHRoaXMsdGhpc1tmXS5nZXQoZSkpLCExO2NvbnN0IHM9dGhpc1tmXS5nZXQoZSkudmFsdWU7cmV0dXJuIHRoaXNbdV0mJih0aGlzW2NdfHx0aGlzW3VdKGUscy52YWx1ZSkpLHMubm93PW4scy5tYXhBZ2U9cixzLnZhbHVlPXQsdGhpc1tvXSs9YS1zLmxlbmd0aCxzLmxlbmd0aD1hLHRoaXMuZ2V0KGUpLGIodGhpcyksITB9Y29uc3QgcD1uZXcgdihlLHQsYSxuLHIpO3JldHVybiBwLmxlbmd0aD50aGlzW2ldPyh0aGlzW3VdJiZ0aGlzW3VdKGUsdCksITEpOih0aGlzW29dKz1wLmxlbmd0aCx0aGlzW2hdLnVuc2hpZnQocCksdGhpc1tmXS5zZXQoZSx0aGlzW2hdLmhlYWQpLGIodGhpcyksITApfWhhcyhlKXtpZighdGhpc1tmXS5oYXMoZSkpcmV0dXJuITE7Y29uc3QgdD10aGlzW2ZdLmdldChlKS52YWx1ZTtyZXR1cm4heSh0aGlzLHQpfWdldChlKXtyZXR1cm4gZyh0aGlzLGUsITApfXBlZWsoZSl7cmV0dXJuIGcodGhpcyxlLCExKX1wb3AoKXtjb25zdCBlPXRoaXNbaF0udGFpbDtyZXR1cm4gZT8obSh0aGlzLGUpLGUudmFsdWUpOm51bGx9ZGVsKGUpe20odGhpcyx0aGlzW2ZdLmdldChlKSl9bG9hZChlKXt0aGlzLnJlc2V0KCk7Y29uc3QgdD1EYXRlLm5vdygpO2ZvcihsZXQgcj1lLmxlbmd0aC0xO3I+PTA7ci0tKXtjb25zdCBuPWVbcl0saT1uLmV8fDA7aWYoMD09PWkpdGhpcy5zZXQobi5rLG4udik7ZWxzZXtjb25zdCBlPWktdDtlPjAmJnRoaXMuc2V0KG4uayxuLnYsZSl9fX1wcnVuZSgpe3RoaXNbZl0uZm9yRWFjaCgoZSx0KT0+Zyh0aGlzLHQsITEpKX19fSx7eWFsbGlzdDo4M31dLDM4OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUpeyhmdW5jdGlvbigpe2NvbnN0IHI9dC5leHBvcnRzO3IudHlwZXM9ezA6XCJyZXNlcnZlZFwiLDE6XCJjb25uZWN0XCIsMjpcImNvbm5hY2tcIiwzOlwicHVibGlzaFwiLDQ6XCJwdWJhY2tcIiw1OlwicHVicmVjXCIsNjpcInB1YnJlbFwiLDc6XCJwdWJjb21wXCIsODpcInN1YnNjcmliZVwiLDk6XCJzdWJhY2tcIiwxMDpcInVuc3Vic2NyaWJlXCIsMTE6XCJ1bnN1YmFja1wiLDEyOlwicGluZ3JlcVwiLDEzOlwicGluZ3Jlc3BcIiwxNDpcImRpc2Nvbm5lY3RcIiwxNTpcImF1dGhcIn0sci5jb2Rlcz17fTtmb3IoY29uc3QgZSBpbiByLnR5cGVzKXtjb25zdCB0PXIudHlwZXNbZV07ci5jb2Rlc1t0XT1lfXIuQ01EX1NISUZUPTQsci5DTURfTUFTSz0yNDAsci5EVVBfTUFTSz04LHIuUU9TX01BU0s9MyxyLlFPU19TSElGVD0xLHIuUkVUQUlOX01BU0s9MSxyLlZBUkJZVEVJTlRfTUFTSz0xMjcsci5WQVJCWVRFSU5UX0ZJTl9NQVNLPTEyOCxyLlZBUkJZVEVJTlRfTUFYPTI2ODQzNTQ1NSxyLlNFU1NJT05QUkVTRU5UX01BU0s9MSxyLlNFU1NJT05QUkVTRU5UX0hFQURFUj1lLmZyb20oW3IuU0VTU0lPTlBSRVNFTlRfTUFTS10pLHIuQ09OTkFDS19IRUFERVI9ZS5mcm9tKFtyLmNvZGVzLmNvbm5hY2s8PHIuQ01EX1NISUZUXSksci5VU0VSTkFNRV9NQVNLPTEyOCxyLlBBU1NXT1JEX01BU0s9NjQsci5XSUxMX1JFVEFJTl9NQVNLPTMyLHIuV0lMTF9RT1NfTUFTSz0yNCxyLldJTExfUU9TX1NISUZUPTMsci5XSUxMX0ZMQUdfTUFTSz00LHIuQ0xFQU5fU0VTU0lPTl9NQVNLPTIsci5DT05ORUNUX0hFQURFUj1lLmZyb20oW3IuY29kZXMuY29ubmVjdDw8ci5DTURfU0hJRlRdKSxyLnByb3BlcnRpZXM9e3Nlc3Npb25FeHBpcnlJbnRlcnZhbDoxNyx3aWxsRGVsYXlJbnRlcnZhbDoyNCxyZWNlaXZlTWF4aW11bTozMyxtYXhpbXVtUGFja2V0U2l6ZTozOSx0b3BpY0FsaWFzTWF4aW11bTozNCxyZXF1ZXN0UmVzcG9uc2VJbmZvcm1hdGlvbjoyNSxyZXF1ZXN0UHJvYmxlbUluZm9ybWF0aW9uOjIzLHVzZXJQcm9wZXJ0aWVzOjM4LGF1dGhlbnRpY2F0aW9uTWV0aG9kOjIxLGF1dGhlbnRpY2F0aW9uRGF0YToyMixwYXlsb2FkRm9ybWF0SW5kaWNhdG9yOjEsbWVzc2FnZUV4cGlyeUludGVydmFsOjIsY29udGVudFR5cGU6MyxyZXNwb25zZVRvcGljOjgsY29ycmVsYXRpb25EYXRhOjksbWF4aW11bVFvUzozNixyZXRhaW5BdmFpbGFibGU6MzcsYXNzaWduZWRDbGllbnRJZGVudGlmaWVyOjE4LHJlYXNvblN0cmluZzozMSx3aWxkY2FyZFN1YnNjcmlwdGlvbkF2YWlsYWJsZTo0MCxzdWJzY3JpcHRpb25JZGVudGlmaWVyc0F2YWlsYWJsZTo0MSxzaGFyZWRTdWJzY3JpcHRpb25BdmFpbGFibGU6NDIsc2VydmVyS2VlcEFsaXZlOjE5LHJlc3BvbnNlSW5mb3JtYXRpb246MjYsc2VydmVyUmVmZXJlbmNlOjI4LHRvcGljQWxpYXM6MzUsc3Vic2NyaXB0aW9uSWRlbnRpZmllcjoxMX0sci5wcm9wZXJ0aWVzQ29kZXM9e307Zm9yKGNvbnN0IGUgaW4gci5wcm9wZXJ0aWVzKXtjb25zdCB0PXIucHJvcGVydGllc1tlXTtyLnByb3BlcnRpZXNDb2Rlc1t0XT1lfWZ1bmN0aW9uIG4odCl7cmV0dXJuWzAsMSwyXS5tYXAobj0+WzAsMV0ubWFwKGk9PlswLDFdLm1hcChvPT57Y29uc3Qgcz1lLmFsbG9jKDEpO3JldHVybiBzLndyaXRlVUludDgoci5jb2Rlc1t0XTw8ci5DTURfU0hJRlR8KGk/ci5EVVBfTUFTSzowKXxuPDxyLlFPU19TSElGVHxvLDAsITApLHN9KSkpfXIucHJvcGVydGllc1R5cGVzPXtzZXNzaW9uRXhwaXJ5SW50ZXJ2YWw6XCJpbnQzMlwiLHdpbGxEZWxheUludGVydmFsOlwiaW50MzJcIixyZWNlaXZlTWF4aW11bTpcImludDE2XCIsbWF4aW11bVBhY2tldFNpemU6XCJpbnQzMlwiLHRvcGljQWxpYXNNYXhpbXVtOlwiaW50MTZcIixyZXF1ZXN0UmVzcG9uc2VJbmZvcm1hdGlvbjpcImJ5dGVcIixyZXF1ZXN0UHJvYmxlbUluZm9ybWF0aW9uOlwiYnl0ZVwiLHVzZXJQcm9wZXJ0aWVzOlwicGFpclwiLGF1dGhlbnRpY2F0aW9uTWV0aG9kOlwic3RyaW5nXCIsYXV0aGVudGljYXRpb25EYXRhOlwiYmluYXJ5XCIscGF5bG9hZEZvcm1hdEluZGljYXRvcjpcImJ5dGVcIixtZXNzYWdlRXhwaXJ5SW50ZXJ2YWw6XCJpbnQzMlwiLGNvbnRlbnRUeXBlOlwic3RyaW5nXCIscmVzcG9uc2VUb3BpYzpcInN0cmluZ1wiLGNvcnJlbGF0aW9uRGF0YTpcImJpbmFyeVwiLG1heGltdW1Rb1M6XCJpbnQ4XCIscmV0YWluQXZhaWxhYmxlOlwiYnl0ZVwiLGFzc2lnbmVkQ2xpZW50SWRlbnRpZmllcjpcInN0cmluZ1wiLHJlYXNvblN0cmluZzpcInN0cmluZ1wiLHdpbGRjYXJkU3Vic2NyaXB0aW9uQXZhaWxhYmxlOlwiYnl0ZVwiLHN1YnNjcmlwdGlvbklkZW50aWZpZXJzQXZhaWxhYmxlOlwiYnl0ZVwiLHNoYXJlZFN1YnNjcmlwdGlvbkF2YWlsYWJsZTpcImJ5dGVcIixzZXJ2ZXJLZWVwQWxpdmU6XCJpbnQxNlwiLHJlc3BvbnNlSW5mb3JtYXRpb246XCJzdHJpbmdcIixzZXJ2ZXJSZWZlcmVuY2U6XCJzdHJpbmdcIix0b3BpY0FsaWFzOlwiaW50MTZcIixzdWJzY3JpcHRpb25JZGVudGlmaWVyOlwidmFyXCJ9LHIuUFVCTElTSF9IRUFERVI9bihcInB1Ymxpc2hcIiksci5TVUJTQ1JJQkVfSEVBREVSPW4oXCJzdWJzY3JpYmVcIiksci5TVUJTQ1JJQkVfT1BUSU9OU19RT1NfTUFTSz0zLHIuU1VCU0NSSUJFX09QVElPTlNfTkxfTUFTSz0xLHIuU1VCU0NSSUJFX09QVElPTlNfTkxfU0hJRlQ9MixyLlNVQlNDUklCRV9PUFRJT05TX1JBUF9NQVNLPTEsci5TVUJTQ1JJQkVfT1BUSU9OU19SQVBfU0hJRlQ9MyxyLlNVQlNDUklCRV9PUFRJT05TX1JIX01BU0s9MyxyLlNVQlNDUklCRV9PUFRJT05TX1JIX1NISUZUPTQsci5TVUJTQ1JJQkVfT1BUSU9OU19SSD1bMCwxNiwzMl0sci5TVUJTQ1JJQkVfT1BUSU9OU19OTD00LHIuU1VCU0NSSUJFX09QVElPTlNfUkFQPTgsci5TVUJTQ1JJQkVfT1BUSU9OU19RT1M9WzAsMSwyXSxyLlVOU1VCU0NSSUJFX0hFQURFUj1uKFwidW5zdWJzY3JpYmVcIiksci5BQ0tTPXt1bnN1YmFjazpuKFwidW5zdWJhY2tcIikscHViYWNrOm4oXCJwdWJhY2tcIikscHViY29tcDpuKFwicHViY29tcFwiKSxwdWJyZWw6bihcInB1YnJlbFwiKSxwdWJyZWM6bihcInB1YnJlY1wiKX0sci5TVUJBQ0tfSEVBREVSPWUuZnJvbShbci5jb2Rlcy5zdWJhY2s8PHIuQ01EX1NISUZUXSksci5WRVJTSU9OMz1lLmZyb20oWzNdKSxyLlZFUlNJT040PWUuZnJvbShbNF0pLHIuVkVSU0lPTjU9ZS5mcm9tKFs1XSksci5WRVJTSU9OMTMxPWUuZnJvbShbMTMxXSksci5WRVJTSU9OMTMyPWUuZnJvbShbMTMyXSksci5RT1M9WzAsMSwyXS5tYXAodD0+ZS5mcm9tKFt0XSkpLHIuRU1QVFk9e3BpbmdyZXE6ZS5mcm9tKFtyLmNvZGVzLnBpbmdyZXE8PDQsMF0pLHBpbmdyZXNwOmUuZnJvbShbci5jb2Rlcy5waW5ncmVzcDw8NCwwXSksZGlzY29ubmVjdDplLmZyb20oW3IuY29kZXMuZGlzY29ubmVjdDw8NCwwXSl9fSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtidWZmZXI6MTd9XSwzOTpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyKXsoZnVuY3Rpb24oKXtjb25zdCBuPWUoXCIuL3dyaXRlVG9TdHJlYW1cIiksaT1lKFwiZXZlbnRzXCIpO2NsYXNzIG8gZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl9hcnJheT1uZXcgQXJyYXkoMjApLHRoaXMuX2k9MH13cml0ZShlKXtyZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5faSsrXT1lLCEwfWNvbmNhdCgpe2xldCBlPTA7Y29uc3QgdD1uZXcgQXJyYXkodGhpcy5fYXJyYXkubGVuZ3RoKSxuPXRoaXMuX2FycmF5O2xldCBpLG89MDtmb3IoaT0wO2k8bi5sZW5ndGgmJnZvaWQgMCE9PW5baV07aSsrKVwic3RyaW5nXCIhPXR5cGVvZiBuW2ldP3RbaV09bltpXS5sZW5ndGg6dFtpXT1yLmJ5dGVMZW5ndGgobltpXSksZSs9dFtpXTtjb25zdCBzPXIuYWxsb2NVbnNhZmUoZSk7Zm9yKGk9MDtpPG4ubGVuZ3RoJiZ2b2lkIDAhPT1uW2ldO2krKylcInN0cmluZ1wiIT10eXBlb2YgbltpXT8obltpXS5jb3B5KHMsbyksbys9dFtpXSk6KHMud3JpdGUobltpXSxvKSxvKz10W2ldKTtyZXR1cm4gc319dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgcj1uZXcgbztyZXR1cm4gbihlLHIsdCksci5jb25jYXQoKX19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJidWZmZXJcIikuQnVmZmVyKX0se1wiLi93cml0ZVRvU3RyZWFtXCI6NDQsYnVmZmVyOjE3LGV2ZW50czoyMn1dLDQwOltmdW5jdGlvbihlLHQscil7ci5wYXJzZXI9ZShcIi4vcGFyc2VyXCIpLnBhcnNlcixyLmdlbmVyYXRlPWUoXCIuL2dlbmVyYXRlXCIpLHIud3JpdGVUb1N0cmVhbT1lKFwiLi93cml0ZVRvU3RyZWFtXCIpfSx7XCIuL2dlbmVyYXRlXCI6MzksXCIuL3BhcnNlclwiOjQzLFwiLi93cml0ZVRvU3RyZWFtXCI6NDR9XSw0MTpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihlKXsoZnVuY3Rpb24oKXtjb25zdCByPTY1NTM2LG49e30saT1lLmlzQnVmZmVyKGUuZnJvbShbMSwyXSkuc3ViYXJyYXkoMCwxKSk7ZnVuY3Rpb24gbyh0KXtjb25zdCByPWUuYWxsb2NVbnNhZmUoMik7cmV0dXJuIHIud3JpdGVVSW50OCh0Pj44LDApLHIud3JpdGVVSW50OCgyNTUmdCwxKSxyfXQuZXhwb3J0cz17Y2FjaGU6bixnZW5lcmF0ZUNhY2hlOmZ1bmN0aW9uKCl7Zm9yKGxldCBlPTA7ZTxyO2UrKyluW2VdPW8oZSl9LGdlbmVyYXRlTnVtYmVyOm8sZ2VuQnVmVmFyaWFibGVCeXRlSW50OmZ1bmN0aW9uKHQpe2xldCByPTAsbj0wO2NvbnN0IG89ZS5hbGxvY1Vuc2FmZSg0KTtkb3tyPXQlMTI4fDAsKHQ9dC8xMjh8MCk+MCYmKHJ8PTEyOCksby53cml0ZVVJbnQ4KHIsbisrKX13aGlsZSh0PjAmJm48NCk7cmV0dXJuIHQ+MCYmKG49MCksaT9vLnN1YmFycmF5KDAsbik6by5zbGljZSgwLG4pfSxnZW5lcmF0ZTRCeXRlQnVmZmVyOmZ1bmN0aW9uKHQpe2NvbnN0IHI9ZS5hbGxvY1Vuc2FmZSg0KTtyZXR1cm4gci53cml0ZVVJbnQzMkJFKHQsMCkscn19fSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtidWZmZXI6MTd9XSw0MjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuY21kPW51bGwsdGhpcy5yZXRhaW49ITEsdGhpcy5xb3M9MCx0aGlzLmR1cD0hMSx0aGlzLmxlbmd0aD0tMSx0aGlzLnRvcGljPW51bGwsdGhpcy5wYXlsb2FkPW51bGx9fX0se31dLDQzOltmdW5jdGlvbihlLHQscil7Y29uc3Qgbj1lKFwiYmxcIiksaT1lKFwiZXZlbnRzXCIpLG89ZShcIi4vcGFja2V0XCIpLHM9ZShcIi4vY29uc3RhbnRzXCIpLGE9ZShcImRlYnVnXCIpKFwibXF0dC1wYWNrZXQ6cGFyc2VyXCIpO2NsYXNzIGwgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLnBhcnNlcj10aGlzLmNvbnN0cnVjdG9yLnBhcnNlcn1zdGF0aWMgcGFyc2VyKGUpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgbD8odGhpcy5zZXR0aW5ncz1lfHx7fSx0aGlzLl9zdGF0ZXM9W1wiX3BhcnNlSGVhZGVyXCIsXCJfcGFyc2VMZW5ndGhcIixcIl9wYXJzZVBheWxvYWRcIixcIl9uZXdQYWNrZXRcIl0sdGhpcy5fcmVzZXRTdGF0ZSgpLHRoaXMpOihuZXcgbCkucGFyc2VyKGUpfV9yZXNldFN0YXRlKCl7YShcIl9yZXNldFN0YXRlOiByZXNldHRpbmcgcGFja2V0LCBlcnJvciwgX2xpc3QsIGFuZCBfc3RhdGVDb3VudGVyXCIpLHRoaXMucGFja2V0PW5ldyBvLHRoaXMuZXJyb3I9bnVsbCx0aGlzLl9saXN0PW4oKSx0aGlzLl9zdGF0ZUNvdW50ZXI9MH1wYXJzZShlKXtmb3IodGhpcy5lcnJvciYmdGhpcy5fcmVzZXRTdGF0ZSgpLHRoaXMuX2xpc3QuYXBwZW5kKGUpLGEoXCJwYXJzZTogY3VycmVudCBzdGF0ZTogJXNcIix0aGlzLl9zdGF0ZXNbdGhpcy5fc3RhdGVDb3VudGVyXSk7KC0xIT09dGhpcy5wYWNrZXQubGVuZ3RofHx0aGlzLl9saXN0Lmxlbmd0aD4wKSYmdGhpc1t0aGlzLl9zdGF0ZXNbdGhpcy5fc3RhdGVDb3VudGVyXV0oKSYmIXRoaXMuZXJyb3I7KXRoaXMuX3N0YXRlQ291bnRlcisrLGEoXCJwYXJzZTogc3RhdGUgY29tcGxldGUuIF9zdGF0ZUNvdW50ZXIgaXMgbm93OiAlZFwiLHRoaXMuX3N0YXRlQ291bnRlciksYShcInBhcnNlOiBwYWNrZXQubGVuZ3RoOiAlZCwgYnVmZmVyIGxpc3QgbGVuZ3RoOiAlZFwiLHRoaXMucGFja2V0Lmxlbmd0aCx0aGlzLl9saXN0Lmxlbmd0aCksdGhpcy5fc3RhdGVDb3VudGVyPj10aGlzLl9zdGF0ZXMubGVuZ3RoJiYodGhpcy5fc3RhdGVDb3VudGVyPTApO3JldHVybiBhKFwicGFyc2U6IGV4aXRlZCB3aGlsZSBsb29wLiBwYWNrZXQ6ICVkLCBidWZmZXIgbGlzdCBsZW5ndGg6ICVkXCIsdGhpcy5wYWNrZXQubGVuZ3RoLHRoaXMuX2xpc3QubGVuZ3RoKSx0aGlzLl9saXN0Lmxlbmd0aH1fcGFyc2VIZWFkZXIoKXtjb25zdCBlPXRoaXMuX2xpc3QucmVhZFVJbnQ4KDApO3JldHVybiB0aGlzLnBhY2tldC5jbWQ9cy50eXBlc1tlPj5zLkNNRF9TSElGVF0sdGhpcy5wYWNrZXQucmV0YWluPTAhPShlJnMuUkVUQUlOX01BU0spLHRoaXMucGFja2V0LnFvcz1lPj5zLlFPU19TSElGVCZzLlFPU19NQVNLLHRoaXMucGFja2V0LmR1cD0wIT0oZSZzLkRVUF9NQVNLKSxhKFwiX3BhcnNlSGVhZGVyOiBwYWNrZXQ6ICVvXCIsdGhpcy5wYWNrZXQpLHRoaXMuX2xpc3QuY29uc3VtZSgxKSwhMH1fcGFyc2VMZW5ndGgoKXtjb25zdCBlPXRoaXMuX3BhcnNlVmFyQnl0ZU51bSghMCk7cmV0dXJuIGUmJih0aGlzLnBhY2tldC5sZW5ndGg9ZS52YWx1ZSx0aGlzLl9saXN0LmNvbnN1bWUoZS5ieXRlcykpLGEoXCJfcGFyc2VMZW5ndGggJWRcIixlLnZhbHVlKSwhIWV9X3BhcnNlUGF5bG9hZCgpe2EoXCJfcGFyc2VQYXlsb2FkOiBwYXlsb2FkICVPXCIsdGhpcy5fbGlzdCk7bGV0IGU9ITE7aWYoMD09PXRoaXMucGFja2V0Lmxlbmd0aHx8dGhpcy5fbGlzdC5sZW5ndGg+PXRoaXMucGFja2V0Lmxlbmd0aCl7c3dpdGNoKHRoaXMuX3Bvcz0wLHRoaXMucGFja2V0LmNtZCl7Y2FzZVwiY29ubmVjdFwiOnRoaXMuX3BhcnNlQ29ubmVjdCgpO2JyZWFrO2Nhc2VcImNvbm5hY2tcIjp0aGlzLl9wYXJzZUNvbm5hY2soKTticmVhaztjYXNlXCJwdWJsaXNoXCI6dGhpcy5fcGFyc2VQdWJsaXNoKCk7YnJlYWs7Y2FzZVwicHViYWNrXCI6Y2FzZVwicHVicmVjXCI6Y2FzZVwicHVicmVsXCI6Y2FzZVwicHViY29tcFwiOnRoaXMuX3BhcnNlQ29uZmlybWF0aW9uKCk7YnJlYWs7Y2FzZVwic3Vic2NyaWJlXCI6dGhpcy5fcGFyc2VTdWJzY3JpYmUoKTticmVhaztjYXNlXCJzdWJhY2tcIjp0aGlzLl9wYXJzZVN1YmFjaygpO2JyZWFrO2Nhc2VcInVuc3Vic2NyaWJlXCI6dGhpcy5fcGFyc2VVbnN1YnNjcmliZSgpO2JyZWFrO2Nhc2VcInVuc3ViYWNrXCI6dGhpcy5fcGFyc2VVbnN1YmFjaygpO2JyZWFrO2Nhc2VcInBpbmdyZXFcIjpjYXNlXCJwaW5ncmVzcFwiOmJyZWFrO2Nhc2VcImRpc2Nvbm5lY3RcIjp0aGlzLl9wYXJzZURpc2Nvbm5lY3QoKTticmVhaztjYXNlXCJhdXRoXCI6dGhpcy5fcGFyc2VBdXRoKCk7YnJlYWs7ZGVmYXVsdDp0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiTm90IHN1cHBvcnRlZFwiKSl9ZT0hMH1yZXR1cm4gYShcIl9wYXJzZVBheWxvYWQgY29tcGxldGUgcmVzdWx0OiAlc1wiLGUpLGV9X3BhcnNlQ29ubmVjdCgpe2xldCBlLHQscixuO2EoXCJfcGFyc2VDb25uZWN0XCIpO2NvbnN0IGk9e30sbz10aGlzLnBhY2tldCxsPXRoaXMuX3BhcnNlU3RyaW5nKCk7aWYobnVsbD09PWwpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgcHJvdG9jb2xJZFwiKSk7aWYoXCJNUVRUXCIhPT1sJiZcIk1RSXNkcFwiIT09bClyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgcHJvdG9jb2xJZFwiKSk7aWYoby5wcm90b2NvbElkPWwsdGhpcy5fcG9zPj10aGlzLl9saXN0Lmxlbmd0aClyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIlBhY2tldCB0b28gc2hvcnRcIikpO2lmKG8ucHJvdG9jb2xWZXJzaW9uPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3Bvcyksby5wcm90b2NvbFZlcnNpb24+PTEyOCYmKG8uYnJpZGdlTW9kZT0hMCxvLnByb3RvY29sVmVyc2lvbj1vLnByb3RvY29sVmVyc2lvbi0xMjgpLDMhPT1vLnByb3RvY29sVmVyc2lvbiYmNCE9PW8ucHJvdG9jb2xWZXJzaW9uJiY1IT09by5wcm90b2NvbFZlcnNpb24pcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3RvY29sIHZlcnNpb25cIikpO2lmKHRoaXMuX3BvcysrLHRoaXMuX3Bvcz49dGhpcy5fbGlzdC5sZW5ndGgpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJQYWNrZXQgdG9vIHNob3J0XCIpKTtpZihpLnVzZXJuYW1lPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3Bvcykmcy5VU0VSTkFNRV9NQVNLLGkucGFzc3dvcmQ9dGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKSZzLlBBU1NXT1JEX01BU0ssaS53aWxsPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3Bvcykmcy5XSUxMX0ZMQUdfTUFTSyxpLndpbGwmJihvLndpbGw9e30sby53aWxsLnJldGFpbj0wIT0odGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKSZzLldJTExfUkVUQUlOX01BU0spLG8ud2lsbC5xb3M9KHRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3Bvcykmcy5XSUxMX1FPU19NQVNLKT4+cy5XSUxMX1FPU19TSElGVCksby5jbGVhbj0wIT0odGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKSZzLkNMRUFOX1NFU1NJT05fTUFTSyksdGhpcy5fcG9zKyssby5rZWVwYWxpdmU9dGhpcy5fcGFyc2VOdW0oKSwtMT09PW8ua2VlcGFsaXZlKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiUGFja2V0IHRvbyBzaG9ydFwiKSk7aWYoNT09PW8ucHJvdG9jb2xWZXJzaW9uKXtjb25zdCBlPXRoaXMuX3BhcnNlUHJvcGVydGllcygpO09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLmxlbmd0aCYmKG8ucHJvcGVydGllcz1lKX1jb25zdCB1PXRoaXMuX3BhcnNlU3RyaW5nKCk7aWYobnVsbD09PXUpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJQYWNrZXQgdG9vIHNob3J0XCIpKTtpZihvLmNsaWVudElkPXUsYShcIl9wYXJzZUNvbm5lY3Q6IHBhY2tldC5jbGllbnRJZDogJXNcIixvLmNsaWVudElkKSxpLndpbGwpe2lmKDU9PT1vLnByb3RvY29sVmVyc2lvbil7Y29uc3QgZT10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5sZW5ndGgmJihvLndpbGwucHJvcGVydGllcz1lKX1pZihudWxsPT09KGU9dGhpcy5fcGFyc2VTdHJpbmcoKSkpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2Ugd2lsbCB0b3BpY1wiKSk7aWYoby53aWxsLnRvcGljPWUsYShcIl9wYXJzZUNvbm5lY3Q6IHBhY2tldC53aWxsLnRvcGljOiAlc1wiLG8ud2lsbC50b3BpYyksbnVsbD09PSh0PXRoaXMuX3BhcnNlQnVmZmVyKCkpKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHdpbGwgcGF5bG9hZFwiKSk7by53aWxsLnBheWxvYWQ9dCxhKFwiX3BhcnNlQ29ubmVjdDogcGFja2V0LndpbGwucGF5bGFvZDogJXNcIixvLndpbGwucGF5bG9hZCl9aWYoaS51c2VybmFtZSl7aWYobnVsbD09PShuPXRoaXMuX3BhcnNlU3RyaW5nKCkpKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHVzZXJuYW1lXCIpKTtvLnVzZXJuYW1lPW4sYShcIl9wYXJzZUNvbm5lY3Q6IHBhY2tldC51c2VybmFtZTogJXNcIixvLnVzZXJuYW1lKX1pZihpLnBhc3N3b3JkKXtpZihudWxsPT09KHI9dGhpcy5fcGFyc2VCdWZmZXIoKSkpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgcGFzc3dvcmRcIikpO28ucGFzc3dvcmQ9cn1yZXR1cm4gdGhpcy5zZXR0aW5ncz1vLGEoXCJfcGFyc2VDb25uZWN0OiBjb21wbGV0ZVwiKSxvfV9wYXJzZUNvbm5hY2soKXthKFwiX3BhcnNlQ29ubmFja1wiKTtjb25zdCBlPXRoaXMucGFja2V0O2lmKHRoaXMuX2xpc3QubGVuZ3RoPDEpcmV0dXJuIG51bGw7aWYoZS5zZXNzaW9uUHJlc2VudD0hISh0aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MrKykmcy5TRVNTSU9OUFJFU0VOVF9NQVNLKSw1PT09dGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb24pdGhpcy5fbGlzdC5sZW5ndGg+PTI/ZS5yZWFzb25Db2RlPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3BvcysrKTplLnJlYXNvbkNvZGU9MDtlbHNle2lmKHRoaXMuX2xpc3QubGVuZ3RoPDIpcmV0dXJuIG51bGw7ZS5yZXR1cm5Db2RlPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3BvcysrKX1pZigtMT09PWUucmV0dXJuQ29kZXx8LTE9PT1lLnJlYXNvbkNvZGUpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgcmV0dXJuIGNvZGVcIikpO2lmKDU9PT10aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbil7Y29uc3QgdD10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5sZW5ndGgmJihlLnByb3BlcnRpZXM9dCl9YShcIl9wYXJzZUNvbm5hY2s6IGNvbXBsZXRlXCIpfV9wYXJzZVB1Ymxpc2goKXthKFwiX3BhcnNlUHVibGlzaFwiKTtjb25zdCBlPXRoaXMucGFja2V0O2lmKGUudG9waWM9dGhpcy5fcGFyc2VTdHJpbmcoKSxudWxsPT09ZS50b3BpYylyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkNhbm5vdCBwYXJzZSB0b3BpY1wiKSk7aWYoIShlLnFvcz4wKXx8dGhpcy5fcGFyc2VNZXNzYWdlSWQoKSl7aWYoNT09PXRoaXMuc2V0dGluZ3MucHJvdG9jb2xWZXJzaW9uKXtjb25zdCB0PXRoaXMuX3BhcnNlUHJvcGVydGllcygpO09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLmxlbmd0aCYmKGUucHJvcGVydGllcz10KX1lLnBheWxvYWQ9dGhpcy5fbGlzdC5zbGljZSh0aGlzLl9wb3MsZS5sZW5ndGgpLGEoXCJfcGFyc2VQdWJsaXNoOiBwYXlsb2FkIGZyb20gYnVmZmVyIGxpc3Q6ICVvXCIsZS5wYXlsb2FkKX19X3BhcnNlU3Vic2NyaWJlKCl7YShcIl9wYXJzZVN1YnNjcmliZVwiKTtjb25zdCBlPXRoaXMucGFja2V0O2xldCB0LHIsbixpLG8sbCx1O2lmKDEhPT1lLnFvcylyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIldyb25nIHN1YnNjcmliZSBoZWFkZXJcIikpO2lmKGUuc3Vic2NyaXB0aW9ucz1bXSx0aGlzLl9wYXJzZU1lc3NhZ2VJZCgpKXtpZig1PT09dGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb24pe2NvbnN0IHQ9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkubGVuZ3RoJiYoZS5wcm9wZXJ0aWVzPXQpfWZvcig7dGhpcy5fcG9zPGUubGVuZ3RoOyl7aWYobnVsbD09PSh0PXRoaXMuX3BhcnNlU3RyaW5nKCkpKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHRvcGljXCIpKTtpZih0aGlzLl9wb3M+PWUubGVuZ3RoKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiTWFsZm9ybWVkIFN1YnNjcmliZSBQYXlsb2FkXCIpKTtuPShyPXRoaXMuX3BhcnNlQnl0ZSgpKSZzLlNVQlNDUklCRV9PUFRJT05TX1FPU19NQVNLLGw9MCE9KHI+PnMuU1VCU0NSSUJFX09QVElPTlNfTkxfU0hJRlQmcy5TVUJTQ1JJQkVfT1BUSU9OU19OTF9NQVNLKSxvPTAhPShyPj5zLlNVQlNDUklCRV9PUFRJT05TX1JBUF9TSElGVCZzLlNVQlNDUklCRV9PUFRJT05TX1JBUF9NQVNLKSxpPXI+PnMuU1VCU0NSSUJFX09QVElPTlNfUkhfU0hJRlQmcy5TVUJTQ1JJQkVfT1BUSU9OU19SSF9NQVNLLHU9e3RvcGljOnQscW9zOm59LDU9PT10aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj8odS5ubD1sLHUucmFwPW8sdS5yaD1pKTp0aGlzLnNldHRpbmdzLmJyaWRnZU1vZGUmJih1LnJoPTAsdS5yYXA9ITAsdS5ubD0hMCksYShcIl9wYXJzZVN1YnNjcmliZTogcHVzaCBzdWJzY3JpcHRpb24gYCVzYCB0byBzdWJzY3JpcHRpb25cIix1KSxlLnN1YnNjcmlwdGlvbnMucHVzaCh1KX19fV9wYXJzZVN1YmFjaygpe2EoXCJfcGFyc2VTdWJhY2tcIik7Y29uc3QgZT10aGlzLnBhY2tldDtpZih0aGlzLnBhY2tldC5ncmFudGVkPVtdLHRoaXMuX3BhcnNlTWVzc2FnZUlkKCkpe2lmKDU9PT10aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbil7Y29uc3QgdD10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5sZW5ndGgmJihlLnByb3BlcnRpZXM9dCl9Zm9yKDt0aGlzLl9wb3M8dGhpcy5wYWNrZXQubGVuZ3RoOyl0aGlzLnBhY2tldC5ncmFudGVkLnB1c2godGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKyspKX19X3BhcnNlVW5zdWJzY3JpYmUoKXthKFwiX3BhcnNlVW5zdWJzY3JpYmVcIik7Y29uc3QgZT10aGlzLnBhY2tldDtpZihlLnVuc3Vic2NyaXB0aW9ucz1bXSx0aGlzLl9wYXJzZU1lc3NhZ2VJZCgpKXtpZig1PT09dGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb24pe2NvbnN0IHQ9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkubGVuZ3RoJiYoZS5wcm9wZXJ0aWVzPXQpfWZvcig7dGhpcy5fcG9zPGUubGVuZ3RoOyl7Y29uc3QgdD10aGlzLl9wYXJzZVN0cmluZygpO2lmKG51bGw9PT10KXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHRvcGljXCIpKTthKFwiX3BhcnNlVW5zdWJzY3JpYmU6IHB1c2ggdG9waWMgYCVzYCB0byB1bnN1YnNjcmlwdGlvbnNcIix0KSxlLnVuc3Vic2NyaXB0aW9ucy5wdXNoKHQpfX19X3BhcnNlVW5zdWJhY2soKXthKFwiX3BhcnNlVW5zdWJhY2tcIik7Y29uc3QgZT10aGlzLnBhY2tldDtpZighdGhpcy5fcGFyc2VNZXNzYWdlSWQoKSlyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkNhbm5vdCBwYXJzZSBtZXNzYWdlSWRcIikpO2lmKDU9PT10aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbil7Y29uc3QgdD10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtmb3IoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkubGVuZ3RoJiYoZS5wcm9wZXJ0aWVzPXQpLGUuZ3JhbnRlZD1bXTt0aGlzLl9wb3M8dGhpcy5wYWNrZXQubGVuZ3RoOyl0aGlzLnBhY2tldC5ncmFudGVkLnB1c2godGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKyspKX19X3BhcnNlQ29uZmlybWF0aW9uKCl7YShcIl9wYXJzZUNvbmZpcm1hdGlvbjogcGFja2V0LmNtZDogYCVzYFwiLHRoaXMucGFja2V0LmNtZCk7Y29uc3QgZT10aGlzLnBhY2tldDtpZih0aGlzLl9wYXJzZU1lc3NhZ2VJZCgpLDU9PT10aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbiYmKGUubGVuZ3RoPjI/KGUucmVhc29uQ29kZT10aGlzLl9wYXJzZUJ5dGUoKSxhKFwiX3BhcnNlQ29uZmlybWF0aW9uOiBwYWNrZXQucmVhc29uQ29kZSBgJWRgXCIsZS5yZWFzb25Db2RlKSk6ZS5yZWFzb25Db2RlPTAsZS5sZW5ndGg+Mykpe2NvbnN0IHQ9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkubGVuZ3RoJiYoZS5wcm9wZXJ0aWVzPXQpfXJldHVybiEwfV9wYXJzZURpc2Nvbm5lY3QoKXtjb25zdCBlPXRoaXMucGFja2V0O2lmKGEoXCJfcGFyc2VEaXNjb25uZWN0XCIpLDU9PT10aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbil7dGhpcy5fbGlzdC5sZW5ndGg+MD9lLnJlYXNvbkNvZGU9dGhpcy5fcGFyc2VCeXRlKCk6ZS5yZWFzb25Db2RlPTA7Y29uc3QgdD10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5sZW5ndGgmJihlLnByb3BlcnRpZXM9dCl9cmV0dXJuIGEoXCJfcGFyc2VEaXNjb25uZWN0IHJlc3VsdDogdHJ1ZVwiKSwhMH1fcGFyc2VBdXRoKCl7YShcIl9wYXJzZUF1dGhcIik7Y29uc3QgZT10aGlzLnBhY2tldDtpZig1IT09dGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb24pcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIGF1dGggcGFja2V0IGZvciB0aGlzIHZlcnNpb24gTVFUVFwiKSk7ZS5yZWFzb25Db2RlPXRoaXMuX3BhcnNlQnl0ZSgpO2NvbnN0IHQ9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLmxlbmd0aCYmKGUucHJvcGVydGllcz10KSxhKFwiX3BhcnNlQXV0aDogcmVzdWx0OiB0cnVlXCIpLCEwfV9wYXJzZU1lc3NhZ2VJZCgpe2NvbnN0IGU9dGhpcy5wYWNrZXQ7cmV0dXJuIGUubWVzc2FnZUlkPXRoaXMuX3BhcnNlTnVtKCksbnVsbD09PWUubWVzc2FnZUlkPyh0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIG1lc3NhZ2VJZFwiKSksITEpOihhKFwiX3BhcnNlTWVzc2FnZUlkOiBwYWNrZXQubWVzc2FnZUlkICVkXCIsZS5tZXNzYWdlSWQpLCEwKX1fcGFyc2VTdHJpbmcoZSl7Y29uc3QgdD10aGlzLl9wYXJzZU51bSgpLHI9dCt0aGlzLl9wb3M7aWYoLTE9PT10fHxyPnRoaXMuX2xpc3QubGVuZ3RofHxyPnRoaXMucGFja2V0Lmxlbmd0aClyZXR1cm4gbnVsbDtjb25zdCBuPXRoaXMuX2xpc3QudG9TdHJpbmcoXCJ1dGY4XCIsdGhpcy5fcG9zLHIpO3JldHVybiB0aGlzLl9wb3MrPXQsYShcIl9wYXJzZVN0cmluZzogcmVzdWx0OiAlc1wiLG4pLG59X3BhcnNlU3RyaW5nUGFpcigpe3JldHVybiBhKFwiX3BhcnNlU3RyaW5nUGFpclwiKSx7bmFtZTp0aGlzLl9wYXJzZVN0cmluZygpLHZhbHVlOnRoaXMuX3BhcnNlU3RyaW5nKCl9fV9wYXJzZUJ1ZmZlcigpe2NvbnN0IGU9dGhpcy5fcGFyc2VOdW0oKSx0PWUrdGhpcy5fcG9zO2lmKC0xPT09ZXx8dD50aGlzLl9saXN0Lmxlbmd0aHx8dD50aGlzLnBhY2tldC5sZW5ndGgpcmV0dXJuIG51bGw7Y29uc3Qgcj10aGlzLl9saXN0LnNsaWNlKHRoaXMuX3Bvcyx0KTtyZXR1cm4gdGhpcy5fcG9zKz1lLGEoXCJfcGFyc2VCdWZmZXI6IHJlc3VsdDogJW9cIixyKSxyfV9wYXJzZU51bSgpe2lmKHRoaXMuX2xpc3QubGVuZ3RoLXRoaXMuX3BvczwyKXJldHVybi0xO2NvbnN0IGU9dGhpcy5fbGlzdC5yZWFkVUludDE2QkUodGhpcy5fcG9zKTtyZXR1cm4gdGhpcy5fcG9zKz0yLGEoXCJfcGFyc2VOdW06IHJlc3VsdDogJXNcIixlKSxlfV9wYXJzZTRCeXRlTnVtKCl7aWYodGhpcy5fbGlzdC5sZW5ndGgtdGhpcy5fcG9zPDQpcmV0dXJuLTE7Y29uc3QgZT10aGlzLl9saXN0LnJlYWRVSW50MzJCRSh0aGlzLl9wb3MpO3JldHVybiB0aGlzLl9wb3MrPTQsYShcIl9wYXJzZTRCeXRlTnVtOiByZXN1bHQ6ICVzXCIsZSksZX1fcGFyc2VWYXJCeXRlTnVtKGUpe2EoXCJfcGFyc2VWYXJCeXRlTnVtXCIpO2xldCB0LHI9MCxuPTEsaT0wLG89ITE7Y29uc3QgbD10aGlzLl9wb3M/dGhpcy5fcG9zOjA7Zm9yKDtyPDQmJmwrcjx0aGlzLl9saXN0Lmxlbmd0aDspe2lmKGkrPW4qKCh0PXRoaXMuX2xpc3QucmVhZFVJbnQ4KGwrcisrKSkmcy5WQVJCWVRFSU5UX01BU0spLG4qPTEyOCwwPT0odCZzLlZBUkJZVEVJTlRfRklOX01BU0spKXtvPSEwO2JyZWFrfWlmKHRoaXMuX2xpc3QubGVuZ3RoPD1yKWJyZWFrfXJldHVybiFvJiY0PT09ciYmdGhpcy5fbGlzdC5sZW5ndGg+PXImJnRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHZhcmlhYmxlIGJ5dGUgaW50ZWdlclwiKSksbCYmKHRoaXMuX3Bvcys9ciksYShcIl9wYXJzZVZhckJ5dGVOdW06IHJlc3VsdDogJW9cIixvPSEhbyYmKGU/e2J5dGVzOnIsdmFsdWU6aX06aSkpLG99X3BhcnNlQnl0ZSgpe2xldCBlO3JldHVybiB0aGlzLl9wb3M8dGhpcy5fbGlzdC5sZW5ndGgmJihlPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3BvcyksdGhpcy5fcG9zKyspLGEoXCJfcGFyc2VCeXRlOiByZXN1bHQ6ICVvXCIsZSksZX1fcGFyc2VCeVR5cGUoZSl7c3dpdGNoKGEoXCJfcGFyc2VCeVR5cGU6IHR5cGU6ICVzXCIsZSksZSl7Y2FzZVwiYnl0ZVwiOnJldHVybiAwIT09dGhpcy5fcGFyc2VCeXRlKCk7Y2FzZVwiaW50OFwiOnJldHVybiB0aGlzLl9wYXJzZUJ5dGUoKTtjYXNlXCJpbnQxNlwiOnJldHVybiB0aGlzLl9wYXJzZU51bSgpO2Nhc2VcImludDMyXCI6cmV0dXJuIHRoaXMuX3BhcnNlNEJ5dGVOdW0oKTtjYXNlXCJ2YXJcIjpyZXR1cm4gdGhpcy5fcGFyc2VWYXJCeXRlTnVtKCk7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIHRoaXMuX3BhcnNlU3RyaW5nKCk7Y2FzZVwicGFpclwiOnJldHVybiB0aGlzLl9wYXJzZVN0cmluZ1BhaXIoKTtjYXNlXCJiaW5hcnlcIjpyZXR1cm4gdGhpcy5fcGFyc2VCdWZmZXIoKX19X3BhcnNlUHJvcGVydGllcygpe2EoXCJfcGFyc2VQcm9wZXJ0aWVzXCIpO2NvbnN0IGU9dGhpcy5fcGFyc2VWYXJCeXRlTnVtKCksdD10aGlzLl9wb3MrZSxyPXt9O2Zvcig7dGhpcy5fcG9zPHQ7KXtjb25zdCBlPXRoaXMuX3BhcnNlQnl0ZSgpO2lmKCFlKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHByb3BlcnR5IGNvZGUgdHlwZVwiKSksITE7Y29uc3QgdD1zLnByb3BlcnRpZXNDb2Rlc1tlXTtpZighdClyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIlVua25vd24gcHJvcGVydHlcIikpLCExO2lmKFwidXNlclByb3BlcnRpZXNcIiE9PXQpclt0XT9BcnJheS5pc0FycmF5KHJbdF0pP3JbdF0ucHVzaCh0aGlzLl9wYXJzZUJ5VHlwZShzLnByb3BlcnRpZXNUeXBlc1t0XSkpOihyW3RdPVtyW3RdXSxyW3RdLnB1c2godGhpcy5fcGFyc2VCeVR5cGUocy5wcm9wZXJ0aWVzVHlwZXNbdF0pKSk6clt0XT10aGlzLl9wYXJzZUJ5VHlwZShzLnByb3BlcnRpZXNUeXBlc1t0XSk7ZWxzZXtyW3RdfHwoclt0XT1PYmplY3QuY3JlYXRlKG51bGwpKTtjb25zdCBlPXRoaXMuX3BhcnNlQnlUeXBlKHMucHJvcGVydGllc1R5cGVzW3RdKTtpZihyW3RdW2UubmFtZV0paWYoQXJyYXkuaXNBcnJheShyW3RdW2UubmFtZV0pKXJbdF1bZS5uYW1lXS5wdXNoKGUudmFsdWUpO2Vsc2V7Y29uc3Qgbj1yW3RdW2UubmFtZV07clt0XVtlLm5hbWVdPVtuXSxyW3RdW2UubmFtZV0ucHVzaChlLnZhbHVlKX1lbHNlIHJbdF1bZS5uYW1lXT1lLnZhbHVlfX1yZXR1cm4gcn1fbmV3UGFja2V0KCl7cmV0dXJuIGEoXCJfbmV3UGFja2V0XCIpLHRoaXMucGFja2V0JiYodGhpcy5fbGlzdC5jb25zdW1lKHRoaXMucGFja2V0Lmxlbmd0aCksYShcIl9uZXdQYWNrZXQ6IHBhcnNlciBlbWl0IHBhY2tldDogcGFja2V0LmNtZDogJXMsIHBhY2tldC5wYXlsb2FkOiAlcywgcGFja2V0Lmxlbmd0aDogJWRcIix0aGlzLnBhY2tldC5jbWQsdGhpcy5wYWNrZXQucGF5bG9hZCx0aGlzLnBhY2tldC5sZW5ndGgpLHRoaXMuZW1pdChcInBhY2tldFwiLHRoaXMucGFja2V0KSksYShcIl9uZXdQYWNrZXQ6IG5ldyBwYWNrZXRcIiksdGhpcy5wYWNrZXQ9bmV3IG8sdGhpcy5fcG9zPTAsITB9X2VtaXRFcnJvcihlKXthKFwiX2VtaXRFcnJvclwiKSx0aGlzLmVycm9yPWUsdGhpcy5lbWl0KFwiZXJyb3JcIixlKX19dC5leHBvcnRzPWx9LHtcIi4vY29uc3RhbnRzXCI6MzgsXCIuL3BhY2tldFwiOjQyLGJsOjE1LGRlYnVnOjE4LGV2ZW50czoyMn1dLDQ0OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpeyhmdW5jdGlvbigpe2NvbnN0IG49ZShcIi4vY29uc3RhbnRzXCIpLGk9ci5hbGxvY1Vuc2FmZSgwKSxvPXIuZnJvbShbMF0pLHM9ZShcIi4vbnVtYmVyc1wiKSxhPWUoXCJwcm9jZXNzLW5leHRpY2stYXJnc1wiKS5uZXh0VGljayxsPWUoXCJkZWJ1Z1wiKShcIm1xdHQtcGFja2V0OndyaXRlVG9TdHJlYW1cIiksdT1zLmNhY2hlLGM9cy5nZW5lcmF0ZU51bWJlcixoPXMuZ2VuZXJhdGVDYWNoZSxmPXMuZ2VuQnVmVmFyaWFibGVCeXRlSW50LHA9cy5nZW5lcmF0ZTRCeXRlQnVmZmVyO2xldCBkPWssZz0hMDtmdW5jdGlvbiB5KGUsdCxzKXtzd2l0Y2gobChcImdlbmVyYXRlIGNhbGxlZFwiKSx0LmNvcmsmJih0LmNvcmsoKSxhKGIsdCkpLGcmJihnPSExLGgoKSksbChcImdlbmVyYXRlOiBwYWNrZXQuY21kOiAlc1wiLGUuY21kKSxlLmNtZCl7Y2FzZVwiY29ubmVjdFwiOnJldHVybiBmdW5jdGlvbihlLHQsaSl7Y29uc3Qgbz1lfHx7fSxzPW8ucHJvdG9jb2xJZHx8XCJNUVRUXCI7bGV0IGE9by5wcm90b2NvbFZlcnNpb258fDQ7Y29uc3QgbD1vLndpbGw7bGV0IHU9by5jbGVhbjtjb25zdCBjPW8ua2VlcGFsaXZlfHwwLGg9by5jbGllbnRJZHx8XCJcIixmPW8udXNlcm5hbWUscD1vLnBhc3N3b3JkLGc9by5wcm9wZXJ0aWVzO3ZvaWQgMD09PXUmJih1PSEwKTtsZXQgeT0wO2lmKCFzfHxcInN0cmluZ1wiIT10eXBlb2YgcyYmIXIuaXNCdWZmZXIocykpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBwcm90b2NvbElkXCIpKSwhMTt5Kz1zLmxlbmd0aCsyO2lmKDMhPT1hJiY0IT09YSYmNSE9PWEpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBwcm90b2NvbCB2ZXJzaW9uXCIpKSwhMTt5Kz0xO2lmKChcInN0cmluZ1wiPT10eXBlb2YgaHx8ci5pc0J1ZmZlcihoKSkmJihofHxhPj00KSYmKGh8fHUpKXkrPXIuYnl0ZUxlbmd0aChoKSsyO2Vsc2V7aWYoYTw0KXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcImNsaWVudElkIG11c3QgYmUgc3VwcGxpZWQgYmVmb3JlIDMuMS4xXCIpKSwhMTtpZigxKnU9PTApcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiY2xpZW50SWQgbXVzdCBiZSBnaXZlbiBpZiBjbGVhblNlc3Npb24gc2V0IHRvIDBcIikpLCExfWlmKFwibnVtYmVyXCIhPXR5cGVvZiBjfHxjPDB8fGM+NjU1MzV8fGMlMSE9MClyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIGtlZXBhbGl2ZVwiKSksITE7eSs9MjtpZih5Kz0xLDU9PT1hKXt2YXIgYj1DKHQsZyk7aWYoIWIpcmV0dXJuITE7eSs9Yi5sZW5ndGh9aWYobCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGwpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCB3aWxsXCIpKSwhMTtpZighbC50b3BpY3x8XCJzdHJpbmdcIiE9dHlwZW9mIGwudG9waWMpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCB3aWxsIHRvcGljXCIpKSwhMTtpZih5Kz1yLmJ5dGVMZW5ndGgobC50b3BpYykrMix5Kz0yLGwucGF5bG9hZCl7aWYoIShsLnBheWxvYWQubGVuZ3RoPj0wKSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHdpbGwgcGF5bG9hZFwiKSksITE7XCJzdHJpbmdcIj09dHlwZW9mIGwucGF5bG9hZD95Kz1yLmJ5dGVMZW5ndGgobC5wYXlsb2FkKTp5Kz1sLnBheWxvYWQubGVuZ3RofXZhciBtPXt9O2lmKDU9PT1hKXtpZighKG09Qyh0LGwucHJvcGVydGllcykpKXJldHVybiExO3krPW0ubGVuZ3RofX1sZXQgXz0hMTtpZihudWxsIT1mKXtpZighUChmKSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHVzZXJuYW1lXCIpKSwhMTtfPSEwLHkrPXIuYnl0ZUxlbmd0aChmKSsyfWlmKG51bGwhPXApe2lmKCFfKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlVzZXJuYW1lIGlzIHJlcXVpcmVkIHRvIHVzZSBwYXNzd29yZFwiKSksITE7aWYoIVAocCkpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBwYXNzd29yZFwiKSksITE7eSs9SShwKSsyfXQud3JpdGUobi5DT05ORUNUX0hFQURFUiksdih0LHkpLEUodCxzKSxvLmJyaWRnZU1vZGUmJihhKz0xMjgpO3Qud3JpdGUoMTMxPT09YT9uLlZFUlNJT04xMzE6MTMyPT09YT9uLlZFUlNJT04xMzI6ND09PWE/bi5WRVJTSU9ONDo1PT09YT9uLlZFUlNJT041Om4uVkVSU0lPTjMpO2xldCBrPTA7a3w9bnVsbCE9Zj9uLlVTRVJOQU1FX01BU0s6MCxrfD1udWxsIT1wP24uUEFTU1dPUkRfTUFTSzowLGt8PWwmJmwucmV0YWluP24uV0lMTF9SRVRBSU5fTUFTSzowLGt8PWwmJmwucW9zP2wucW9zPDxuLldJTExfUU9TX1NISUZUOjAsa3w9bD9uLldJTExfRkxBR19NQVNLOjAsa3w9dT9uLkNMRUFOX1NFU1NJT05fTUFTSzowLHQud3JpdGUoci5mcm9tKFtrXSkpLGQodCxjKSw1PT09YSYmYi53cml0ZSgpO0UodCxoKSxsJiYoNT09PWEmJm0ud3JpdGUoKSx3KHQsbC50b3BpYyksRSh0LGwucGF5bG9hZCkpO251bGwhPWYmJkUodCxmKTtudWxsIT1wJiZFKHQscCk7cmV0dXJuITB9KGUsdCk7Y2FzZVwiY29ubmFja1wiOnJldHVybiBmdW5jdGlvbihlLHQsaSl7Y29uc3Qgcz1pP2kucHJvdG9jb2xWZXJzaW9uOjQsYT1lfHx7fSxsPTU9PT1zP2EucmVhc29uQ29kZTphLnJldHVybkNvZGUsdT1hLnByb3BlcnRpZXM7bGV0IGM9MjtpZihcIm51bWJlclwiIT10eXBlb2YgbClyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHJldHVybiBjb2RlXCIpKSwhMTtsZXQgaD1udWxsO2lmKDU9PT1zKXtpZighKGg9Qyh0LHUpKSlyZXR1cm4hMTtjKz1oLmxlbmd0aH10LndyaXRlKG4uQ09OTkFDS19IRUFERVIpLHYodCxjKSx0LndyaXRlKGEuc2Vzc2lvblByZXNlbnQ/bi5TRVNTSU9OUFJFU0VOVF9IRUFERVI6byksdC53cml0ZShyLmZyb20oW2xdKSksbnVsbCE9aCYmaC53cml0ZSgpO3JldHVybiEwfShlLHQscyk7Y2FzZVwicHVibGlzaFwiOnJldHVybiBmdW5jdGlvbihlLHQsbyl7bChcInB1Ymxpc2g6IHBhY2tldDogJW9cIixlKTtjb25zdCBzPW8/by5wcm90b2NvbFZlcnNpb246NCxhPWV8fHt9LHU9YS5xb3N8fDAsYz1hLnJldGFpbj9uLlJFVEFJTl9NQVNLOjAsaD1hLnRvcGljLGY9YS5wYXlsb2FkfHxpLHA9YS5tZXNzYWdlSWQsZz1hLnByb3BlcnRpZXM7bGV0IHk9MDtpZihcInN0cmluZ1wiPT10eXBlb2YgaCl5Kz1yLmJ5dGVMZW5ndGgoaCkrMjtlbHNle2lmKCFyLmlzQnVmZmVyKGgpKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgdG9waWNcIikpLCExO3krPWgubGVuZ3RoKzJ9ci5pc0J1ZmZlcihmKT95Kz1mLmxlbmd0aDp5Kz1yLmJ5dGVMZW5ndGgoZik7aWYodSYmXCJudW1iZXJcIiE9dHlwZW9mIHApcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBtZXNzYWdlSWRcIikpLCExO3UmJih5Kz0yKTtsZXQgYj1udWxsO2lmKDU9PT1zKXtpZighKGI9Qyh0LGcpKSlyZXR1cm4hMTt5Kz1iLmxlbmd0aH10LndyaXRlKG4uUFVCTElTSF9IRUFERVJbdV1bYS5kdXA/MTowXVtjPzE6MF0pLHYodCx5KSxkKHQsSShoKSksdC53cml0ZShoKSx1PjAmJmQodCxwKTtudWxsIT1iJiZiLndyaXRlKCk7cmV0dXJuIGwoXCJwdWJsaXNoOiBwYXlsb2FkOiAlb1wiLGYpLHQud3JpdGUoZil9KGUsdCxzKTtjYXNlXCJwdWJhY2tcIjpjYXNlXCJwdWJyZWNcIjpjYXNlXCJwdWJyZWxcIjpjYXNlXCJwdWJjb21wXCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCxpKXtjb25zdCBvPWk/aS5wcm90b2NvbFZlcnNpb246NCxzPWV8fHt9LGE9cy5jbWR8fFwicHViYWNrXCIsbD1zLm1lc3NhZ2VJZCx1PXMuZHVwJiZcInB1YnJlbFwiPT09YT9uLkRVUF9NQVNLOjA7bGV0IGM9MDtjb25zdCBoPXMucmVhc29uQ29kZSxmPXMucHJvcGVydGllcztsZXQgcD01PT09bz8zOjI7XCJwdWJyZWxcIj09PWEmJihjPTEpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBsKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgbWVzc2FnZUlkXCIpKSwhMTtsZXQgZz1udWxsO2lmKDU9PT1vJiZcIm9iamVjdFwiPT10eXBlb2YgZil7aWYoIShnPVQodCxmLGkscCkpKXJldHVybiExO3ArPWcubGVuZ3RofXQud3JpdGUobi5BQ0tTW2FdW2NdW3VdWzBdKSx2KHQscCksZCh0LGwpLDU9PT1vJiZ0LndyaXRlKHIuZnJvbShbaF0pKTtudWxsIT09ZyYmZy53cml0ZSgpO3JldHVybiEwfShlLHQscyk7Y2FzZVwic3Vic2NyaWJlXCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCxpKXtsKFwic3Vic2NyaWJlOiBwYWNrZXQ6IFwiKTtjb25zdCBvPWk/aS5wcm90b2NvbFZlcnNpb246NCxzPWV8fHt9LGE9cy5kdXA/bi5EVVBfTUFTSzowLHU9cy5tZXNzYWdlSWQsYz1zLnN1YnNjcmlwdGlvbnMsaD1zLnByb3BlcnRpZXM7bGV0IGY9MDtpZihcIm51bWJlclwiIT10eXBlb2YgdSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2VJZFwiKSksITE7Zis9MjtsZXQgcD1udWxsO2lmKDU9PT1vKXtpZighKHA9Qyh0LGgpKSlyZXR1cm4hMTtmKz1wLmxlbmd0aH1pZihcIm9iamVjdFwiIT10eXBlb2YgY3x8IWMubGVuZ3RoKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgc3Vic2NyaXB0aW9uc1wiKSksITE7Zm9yKGxldCBlPTA7ZTxjLmxlbmd0aDtlKz0xKXtjb25zdCBuPWNbZV0udG9waWMsaT1jW2VdLnFvcztpZihcInN0cmluZ1wiIT10eXBlb2YgbilyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmlwdGlvbnMgLSBpbnZhbGlkIHRvcGljXCIpKSwhMTtpZihcIm51bWJlclwiIT10eXBlb2YgaSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmlwdGlvbnMgLSBpbnZhbGlkIHFvc1wiKSksITE7aWYoNT09PW8pe2NvbnN0IHI9Y1tlXS5ubHx8ITE7aWYoXCJib29sZWFuXCIhPXR5cGVvZiByKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgc3Vic2NyaXB0aW9ucyAtIGludmFsaWQgTm8gTG9jYWxcIikpLCExO2NvbnN0IG49Y1tlXS5yYXB8fCExO2lmKFwiYm9vbGVhblwiIT10eXBlb2YgbilyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmlwdGlvbnMgLSBpbnZhbGlkIFJldGFpbiBhcyBQdWJsaXNoZWRcIikpLCExO2NvbnN0IGk9Y1tlXS5yaHx8MDtpZihcIm51bWJlclwiIT10eXBlb2YgaXx8aT4yKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgc3Vic2NyaXB0aW9ucyAtIGludmFsaWQgUmV0YWluIEhhbmRsaW5nXCIpKSwhMX1mKz1yLmJ5dGVMZW5ndGgobikrMisxfWwoXCJzdWJzY3JpYmU6IHdyaXRpbmcgdG8gc3RyZWFtOiAlb1wiLG4uU1VCU0NSSUJFX0hFQURFUiksdC53cml0ZShuLlNVQlNDUklCRV9IRUFERVJbMV1bYT8xOjBdWzBdKSx2KHQsZiksZCh0LHUpLG51bGwhPT1wJiZwLndyaXRlKCk7bGV0IGc9ITA7Zm9yKGNvbnN0IGUgb2YgYyl7Y29uc3QgaT1lLnRvcGljLHM9ZS5xb3MsYT0rZS5ubCxsPStlLnJhcCx1PWUucmg7bGV0IGM7dyh0LGkpLGM9bi5TVUJTQ1JJQkVfT1BUSU9OU19RT1Nbc10sNT09PW8mJihjfD1hP24uU1VCU0NSSUJFX09QVElPTlNfTkw6MCxjfD1sP24uU1VCU0NSSUJFX09QVElPTlNfUkFQOjAsY3w9dT9uLlNVQlNDUklCRV9PUFRJT05TX1JIW3VdOjApLGc9dC53cml0ZShyLmZyb20oW2NdKSl9cmV0dXJuIGd9KGUsdCxzKTtjYXNlXCJzdWJhY2tcIjpyZXR1cm4gZnVuY3Rpb24oZSx0LGkpe2NvbnN0IG89aT9pLnByb3RvY29sVmVyc2lvbjo0LHM9ZXx8e30sYT1zLm1lc3NhZ2VJZCxsPXMuZ3JhbnRlZCx1PXMucHJvcGVydGllcztsZXQgYz0wO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBhKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgbWVzc2FnZUlkXCIpKSwhMTtjKz0yO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBsfHwhbC5sZW5ndGgpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBxb3MgdmVjdG9yXCIpKSwhMTtmb3IobGV0IGU9MDtlPGwubGVuZ3RoO2UrPTEpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBsW2VdKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgcW9zIHZlY3RvclwiKSksITE7Yys9MX1sZXQgaD1udWxsO2lmKDU9PT1vKXtpZighKGg9VCh0LHUsaSxjKSkpcmV0dXJuITE7Yys9aC5sZW5ndGh9dC53cml0ZShuLlNVQkFDS19IRUFERVIpLHYodCxjKSxkKHQsYSksbnVsbCE9PWgmJmgud3JpdGUoKTtyZXR1cm4gdC53cml0ZShyLmZyb20obCkpfShlLHQscyk7Y2FzZVwidW5zdWJzY3JpYmVcIjpyZXR1cm4gZnVuY3Rpb24oZSx0LGkpe2NvbnN0IG89aT9pLnByb3RvY29sVmVyc2lvbjo0LHM9ZXx8e30sYT1zLm1lc3NhZ2VJZCxsPXMuZHVwP24uRFVQX01BU0s6MCx1PXMudW5zdWJzY3JpcHRpb25zLGM9cy5wcm9wZXJ0aWVzO2xldCBoPTA7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGEpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBtZXNzYWdlSWRcIikpLCExO2grPTI7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHV8fCF1Lmxlbmd0aClyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHVuc3Vic2NyaXB0aW9uc1wiKSksITE7Zm9yKGxldCBlPTA7ZTx1Lmxlbmd0aDtlKz0xKXtpZihcInN0cmluZ1wiIT10eXBlb2YgdVtlXSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHVuc3Vic2NyaXB0aW9uc1wiKSksITE7aCs9ci5ieXRlTGVuZ3RoKHVbZV0pKzJ9bGV0IGY9bnVsbDtpZig1PT09byl7aWYoIShmPUModCxjKSkpcmV0dXJuITE7aCs9Zi5sZW5ndGh9dC53cml0ZShuLlVOU1VCU0NSSUJFX0hFQURFUlsxXVtsPzE6MF1bMF0pLHYodCxoKSxkKHQsYSksbnVsbCE9PWYmJmYud3JpdGUoKTtsZXQgcD0hMDtmb3IobGV0IGU9MDtlPHUubGVuZ3RoO2UrKylwPXcodCx1W2VdKTtyZXR1cm4gcH0oZSx0LHMpO2Nhc2VcInVuc3ViYWNrXCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCxpKXtjb25zdCBvPWk/aS5wcm90b2NvbFZlcnNpb246NCxzPWV8fHt9LGE9cy5tZXNzYWdlSWQsbD1zLmR1cD9uLkRVUF9NQVNLOjAsdT1zLmdyYW50ZWQsYz1zLnByb3BlcnRpZXMsaD1zLmNtZDtsZXQgZj0yO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBhKXJldHVybiB0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIkludmFsaWQgbWVzc2FnZUlkXCIpKSwhMTtpZig1PT09byl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHV8fCF1Lmxlbmd0aClyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIHFvcyB2ZWN0b3JcIikpLCExO2ZvcihsZXQgZT0wO2U8dS5sZW5ndGg7ZSs9MSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHVbZV0pcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiSW52YWxpZCBxb3MgdmVjdG9yXCIpKSwhMTtmKz0xfX1sZXQgcD1udWxsO2lmKDU9PT1vKXtpZighKHA9VCh0LGMsaSxmKSkpcmV0dXJuITE7Zis9cC5sZW5ndGh9dC53cml0ZShuLkFDS1NbaF1bMF1bbF1bMF0pLHYodCxmKSxkKHQsYSksbnVsbCE9PXAmJnAud3JpdGUoKTs1PT09byYmdC53cml0ZShyLmZyb20odSkpO3JldHVybiEwfShlLHQscyk7Y2FzZVwicGluZ3JlcVwiOmNhc2VcInBpbmdyZXNwXCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdC53cml0ZShuLkVNUFRZW2UuY21kXSl9KGUsdCk7Y2FzZVwiZGlzY29ubmVjdFwiOnJldHVybiBmdW5jdGlvbihlLHQsaSl7Y29uc3Qgbz1pP2kucHJvdG9jb2xWZXJzaW9uOjQscz1lfHx7fSxhPXMucmVhc29uQ29kZSxsPXMucHJvcGVydGllcztsZXQgdT01PT09bz8xOjAsYz1udWxsO2lmKDU9PT1vKXtpZighKGM9VCh0LGwsaSx1KSkpcmV0dXJuITE7dSs9Yy5sZW5ndGh9dC53cml0ZShyLmZyb20oW24uY29kZXMuZGlzY29ubmVjdDw8NF0pKSx2KHQsdSksNT09PW8mJnQud3JpdGUoci5mcm9tKFthXSkpO251bGwhPT1jJiZjLndyaXRlKCk7cmV0dXJuITB9KGUsdCxzKTtjYXNlXCJhdXRoXCI6cmV0dXJuIGZ1bmN0aW9uKGUsdCxpKXtjb25zdCBvPWk/aS5wcm90b2NvbFZlcnNpb246NCxzPWV8fHt9LGE9cy5yZWFzb25Db2RlLGw9cy5wcm9wZXJ0aWVzO2xldCB1PTU9PT1vPzE6MDs1IT09byYmdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJJbnZhbGlkIG1xdHQgdmVyc2lvbiBmb3IgYXV0aCBwYWNrZXRcIikpO2NvbnN0IGM9VCh0LGwsaSx1KTtpZighYylyZXR1cm4hMTt1Kz1jLmxlbmd0aCx0LndyaXRlKHIuZnJvbShbbi5jb2Rlcy5hdXRoPDw0XSkpLHYodCx1KSx0LndyaXRlKHIuZnJvbShbYV0pKSxudWxsIT09YyYmYy53cml0ZSgpO3JldHVybiEwfShlLHQscyk7ZGVmYXVsdDpyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJVbmtub3duIGNvbW1hbmRcIikpLCExfX1mdW5jdGlvbiBiKGUpe2UudW5jb3JrKCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHksXCJjYWNoZU51bWJlcnNcIix7Z2V0OigpPT5kPT09ayxzZXQoZSl7ZT8odSYmMCE9PU9iamVjdC5rZXlzKHUpLmxlbmd0aHx8KGc9ITApLGQ9ayk6KGc9ITEsZD1TKX19KTtjb25zdCBtPXt9O2Z1bmN0aW9uIHYoZSx0KXtpZih0Pm4uVkFSQllURUlOVF9NQVgpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkIHZhcmlhYmxlIGJ5dGUgaW50ZWdlcjogJHt0fWApKSwhMTtsZXQgcj1tW3RdO3JldHVybiByfHwocj1mKHQpLHQ8MTYzODQmJihtW3RdPXIpKSxsKFwid3JpdGVWYXJCeXRlSW50OiB3cml0aW5nIHRvIHN0cmVhbTogJW9cIixyKSxlLndyaXRlKHIpfWZ1bmN0aW9uIHcoZSx0KXtjb25zdCBuPXIuYnl0ZUxlbmd0aCh0KTtyZXR1cm4gZChlLG4pLGwoXCJ3cml0ZVN0cmluZzogJXNcIix0KSxlLndyaXRlKHQsXCJ1dGY4XCIpfWZ1bmN0aW9uIF8oZSx0LHIpe3coZSx0KSx3KGUscil9ZnVuY3Rpb24gayhlLHQpe3JldHVybiBsKFwid3JpdGVOdW1iZXJDYWNoZWQ6IG51bWJlcjogJWRcIix0KSxsKFwid3JpdGVOdW1iZXJDYWNoZWQ6ICVvXCIsdVt0XSksZS53cml0ZSh1W3RdKX1mdW5jdGlvbiBTKGUsdCl7Y29uc3Qgcj1jKHQpO3JldHVybiBsKFwid3JpdGVOdW1iZXJHZW5lcmF0ZWQ6ICVvXCIsciksZS53cml0ZShyKX1mdW5jdGlvbiBFKGUsdCl7XCJzdHJpbmdcIj09dHlwZW9mIHQ/dyhlLHQpOnQ/KGQoZSx0Lmxlbmd0aCksZS53cml0ZSh0KSk6ZChlLDApfWZ1bmN0aW9uIEMoZSx0KXtpZihcIm9iamVjdFwiIT10eXBlb2YgdHx8bnVsbCE9dC5sZW5ndGgpcmV0dXJue2xlbmd0aDoxLHdyaXRlKCl7QShlLHt9LDApfX07bGV0IGk9MDtmdW5jdGlvbiBvKHQsaSl7bGV0IG89MDtzd2l0Y2gobi5wcm9wZXJ0aWVzVHlwZXNbdF0pe2Nhc2VcImJ5dGVcIjppZihcImJvb2xlYW5cIiE9dHlwZW9mIGkpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkICR7dH06ICR7aX1gKSksITE7bys9MjticmVhaztjYXNlXCJpbnQ4XCI6aWYoXCJudW1iZXJcIiE9dHlwZW9mIGl8fGk8MHx8aT4yNTUpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkICR7dH06ICR7aX1gKSksITE7bys9MjticmVhaztjYXNlXCJiaW5hcnlcIjppZihpJiZudWxsPT09aSlyZXR1cm4gZS5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoYEludmFsaWQgJHt0fTogJHtpfWApKSwhMTtvKz0xK3IuYnl0ZUxlbmd0aChpKSsyO2JyZWFrO2Nhc2VcImludDE2XCI6aWYoXCJudW1iZXJcIiE9dHlwZW9mIGl8fGk8MHx8aT42NTUzNSlyZXR1cm4gZS5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoYEludmFsaWQgJHt0fTogJHtpfWApKSwhMTtvKz0zO2JyZWFrO2Nhc2VcImludDMyXCI6aWYoXCJudW1iZXJcIiE9dHlwZW9mIGl8fGk8MHx8aT40Mjk0OTY3Mjk1KXJldHVybiBlLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihgSW52YWxpZCAke3R9OiAke2l9YCkpLCExO28rPTU7YnJlYWs7Y2FzZVwidmFyXCI6aWYoXCJudW1iZXJcIiE9dHlwZW9mIGl8fGk8MHx8aT4yNjg0MzU0NTUpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkICR7dH06ICR7aX1gKSksITE7bys9MStyLmJ5dGVMZW5ndGgoZihpKSk7YnJlYWs7Y2FzZVwic3RyaW5nXCI6aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGkpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkICR7dH06ICR7aX1gKSksITE7bys9MytyLmJ5dGVMZW5ndGgoaS50b1N0cmluZygpKTticmVhaztjYXNlXCJwYWlyXCI6aWYoXCJvYmplY3RcIiE9dHlwZW9mIGkpcmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkICR7dH06ICR7aX1gKSksITE7bys9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaSkucmVkdWNlKChlLHQpPT57Y29uc3Qgbj1pW3RdO3JldHVybiBBcnJheS5pc0FycmF5KG4pP2UrPW4ucmVkdWNlKChlLG4pPT5lKz0zK3IuYnl0ZUxlbmd0aCh0LnRvU3RyaW5nKCkpKzIrci5ieXRlTGVuZ3RoKG4udG9TdHJpbmcoKSksMCk6ZSs9MytyLmJ5dGVMZW5ndGgodC50b1N0cmluZygpKSsyK3IuYnl0ZUxlbmd0aChpW3RdLnRvU3RyaW5nKCkpLGV9LDApO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGUuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKGBJbnZhbGlkIHByb3BlcnR5ICR7dH06ICR7aX1gKSksITF9cmV0dXJuIG99aWYodClmb3IoY29uc3QgZSBpbiB0KXtsZXQgcj0wLG49MDtjb25zdCBzPXRbZV07aWYoQXJyYXkuaXNBcnJheShzKSlmb3IobGV0IHQ9MDt0PHMubGVuZ3RoO3QrKyl7aWYoIShuPW8oZSxzW3RdKSkpcmV0dXJuITE7cis9bn1lbHNle2lmKCEobj1vKGUscykpKXJldHVybiExO3I9bn1pZighcilyZXR1cm4hMTtpKz1yfXJldHVybntsZW5ndGg6ci5ieXRlTGVuZ3RoKGYoaSkpK2ksd3JpdGUoKXtBKGUsdCxpKX19fWZ1bmN0aW9uIFQoZSx0LHIsbil7Y29uc3QgaT1bXCJyZWFzb25TdHJpbmdcIixcInVzZXJQcm9wZXJ0aWVzXCJdLG89ciYmci5wcm9wZXJ0aWVzJiZyLnByb3BlcnRpZXMubWF4aW11bVBhY2tldFNpemU/ci5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplOjA7bGV0IHM9QyhlLHQpO2lmKG8pZm9yKDtuK3MubGVuZ3RoPm87KXtjb25zdCByPWkuc2hpZnQoKTtpZighcnx8IXRbcl0pcmV0dXJuITE7ZGVsZXRlIHRbcl0scz1DKGUsdCl9cmV0dXJuIHN9ZnVuY3Rpb24geChlLHQsaSl7c3dpdGNoKG4ucHJvcGVydGllc1R5cGVzW3RdKXtjYXNlXCJieXRlXCI6ZS53cml0ZShyLmZyb20oW24ucHJvcGVydGllc1t0XV0pKSxlLndyaXRlKHIuZnJvbShbK2ldKSk7YnJlYWs7Y2FzZVwiaW50OFwiOmUud3JpdGUoci5mcm9tKFtuLnByb3BlcnRpZXNbdF1dKSksZS53cml0ZShyLmZyb20oW2ldKSk7YnJlYWs7Y2FzZVwiYmluYXJ5XCI6ZS53cml0ZShyLmZyb20oW24ucHJvcGVydGllc1t0XV0pKSxFKGUsaSk7YnJlYWs7Y2FzZVwiaW50MTZcIjplLndyaXRlKHIuZnJvbShbbi5wcm9wZXJ0aWVzW3RdXSkpLGQoZSxpKTticmVhaztjYXNlXCJpbnQzMlwiOmUud3JpdGUoci5mcm9tKFtuLnByb3BlcnRpZXNbdF1dKSksZnVuY3Rpb24oZSx0KXtjb25zdCByPXAodCk7bChcIndyaXRlNEJ5dGVOdW1iZXI6ICVvXCIsciksZS53cml0ZShyKX0oZSxpKTticmVhaztjYXNlXCJ2YXJcIjplLndyaXRlKHIuZnJvbShbbi5wcm9wZXJ0aWVzW3RdXSkpLHYoZSxpKTticmVhaztjYXNlXCJzdHJpbmdcIjplLndyaXRlKHIuZnJvbShbbi5wcm9wZXJ0aWVzW3RdXSkpLHcoZSxpKTticmVhaztjYXNlXCJwYWlyXCI6T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaSkuZm9yRWFjaChvPT57Y29uc3Qgcz1pW29dO0FycmF5LmlzQXJyYXkocyk/cy5mb3JFYWNoKGk9PntlLndyaXRlKHIuZnJvbShbbi5wcm9wZXJ0aWVzW3RdXSkpLF8oZSxvLnRvU3RyaW5nKCksaS50b1N0cmluZygpKX0pOihlLndyaXRlKHIuZnJvbShbbi5wcm9wZXJ0aWVzW3RdXSkpLF8oZSxvLnRvU3RyaW5nKCkscy50b1N0cmluZygpKSl9KTticmVhaztkZWZhdWx0OnJldHVybiBlLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihgSW52YWxpZCBwcm9wZXJ0eSAke3R9IHZhbHVlOiAke2l9YCkpLCExfX1mdW5jdGlvbiBBKGUsdCxyKXt2KGUscik7Zm9yKGNvbnN0IHIgaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmbnVsbCE9PXRbcl0pe2NvbnN0IG49dFtyXTtpZihBcnJheS5pc0FycmF5KG4pKWZvcihsZXQgdD0wO3Q8bi5sZW5ndGg7dCsrKXgoZSxyLG5bdF0pO2Vsc2UgeChlLHIsbil9fWZ1bmN0aW9uIEkoZSl7cmV0dXJuIGU/ZSBpbnN0YW5jZW9mIHI/ZS5sZW5ndGg6ci5ieXRlTGVuZ3RoKGUpOjB9ZnVuY3Rpb24gUChlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZXx8ZSBpbnN0YW5jZW9mIHJ9dC5leHBvcnRzPXl9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJidWZmZXJcIikuQnVmZmVyKX0se1wiLi9jb25zdGFudHNcIjozOCxcIi4vbnVtYmVyc1wiOjQxLGJ1ZmZlcjoxNyxkZWJ1ZzoxOCxcInByb2Nlc3MtbmV4dGljay1hcmdzXCI6NDl9XSw0NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPTFlMyxpPTYwKm4sbz02MCppLHM9MjQqbyxhPTcqcyxsPTM2NS4yNSpzO2Z1bmN0aW9uIHUoZSx0LHIsbil7dmFyIGk9dD49MS41KnI7cmV0dXJuIE1hdGgucm91bmQoZS9yKStcIiBcIituKyhpP1wic1wiOlwiXCIpfXQuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3Q9dHx8e307dmFyIHI9dHlwZW9mIGU7aWYoXCJzdHJpbmdcIj09PXImJmUubGVuZ3RoPjApcmV0dXJuIGZ1bmN0aW9uKGUpe2lmKChlPVN0cmluZyhlKSkubGVuZ3RoPjEwMClyZXR1cm47dmFyIHQ9L14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKGUpO2lmKCF0KXJldHVybjt2YXIgcj1wYXJzZUZsb2F0KHRbMV0pO3N3aXRjaCgodFsyXXx8XCJtc1wiKS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJ5ZWFyc1wiOmNhc2VcInllYXJcIjpjYXNlXCJ5cnNcIjpjYXNlXCJ5clwiOmNhc2VcInlcIjpyZXR1cm4gcipsO2Nhc2VcIndlZWtzXCI6Y2FzZVwid2Vla1wiOmNhc2VcIndcIjpyZXR1cm4gciphO2Nhc2VcImRheXNcIjpjYXNlXCJkYXlcIjpjYXNlXCJkXCI6cmV0dXJuIHIqcztjYXNlXCJob3Vyc1wiOmNhc2VcImhvdXJcIjpjYXNlXCJocnNcIjpjYXNlXCJoclwiOmNhc2VcImhcIjpyZXR1cm4gcipvO2Nhc2VcIm1pbnV0ZXNcIjpjYXNlXCJtaW51dGVcIjpjYXNlXCJtaW5zXCI6Y2FzZVwibWluXCI6Y2FzZVwibVwiOnJldHVybiByKmk7Y2FzZVwic2Vjb25kc1wiOmNhc2VcInNlY29uZFwiOmNhc2VcInNlY3NcIjpjYXNlXCJzZWNcIjpjYXNlXCJzXCI6cmV0dXJuIHIqbjtjYXNlXCJtaWxsaXNlY29uZHNcIjpjYXNlXCJtaWxsaXNlY29uZFwiOmNhc2VcIm1zZWNzXCI6Y2FzZVwibXNlY1wiOmNhc2VcIm1zXCI6cmV0dXJuIHI7ZGVmYXVsdDpyZXR1cm59fShlKTtpZihcIm51bWJlclwiPT09ciYmaXNGaW5pdGUoZSkpcmV0dXJuIHQubG9uZz9mdW5jdGlvbihlKXt2YXIgdD1NYXRoLmFicyhlKTtpZih0Pj1zKXJldHVybiB1KGUsdCxzLFwiZGF5XCIpO2lmKHQ+PW8pcmV0dXJuIHUoZSx0LG8sXCJob3VyXCIpO2lmKHQ+PWkpcmV0dXJuIHUoZSx0LGksXCJtaW51dGVcIik7aWYodD49bilyZXR1cm4gdShlLHQsbixcInNlY29uZFwiKTtyZXR1cm4gZStcIiBtc1wifShlKTpmdW5jdGlvbihlKXt2YXIgdD1NYXRoLmFicyhlKTtpZih0Pj1zKXJldHVybiBNYXRoLnJvdW5kKGUvcykrXCJkXCI7aWYodD49bylyZXR1cm4gTWF0aC5yb3VuZChlL28pK1wiaFwiO2lmKHQ+PWkpcmV0dXJuIE1hdGgucm91bmQoZS9pKStcIm1cIjtpZih0Pj1uKXJldHVybiBNYXRoLnJvdW5kKGUvbikrXCJzXCI7cmV0dXJuIGUrXCJtc1wifShlKTt0aHJvdyBuZXcgRXJyb3IoXCJ2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPVwiK0pTT04uc3RyaW5naWZ5KGUpKX19LHt9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe2NvbnN0IG49ZShcIi4vbGliL251bWJlci1hbGxvY2F0b3IuanNcIik7dC5leHBvcnRzLk51bWJlckFsbG9jYXRvcj1ufSx7XCIuL2xpYi9udW1iZXItYWxsb2NhdG9yLmpzXCI6NDd9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2NvbnN0IG49ZShcImpzLXNkc2xcIikuU2V0LGk9ZShcImRlYnVnXCIpKFwibnVtYmVyLWFsbG9jYXRvcjp0cmFjZVwiKSxvPWUoXCJkZWJ1Z1wiKShcIm51bWJlci1hbGxvY2F0b3I6ZXJyb3JcIik7ZnVuY3Rpb24gcyhlLHQpe3RoaXMubG93PWUsdGhpcy5oaWdoPXR9ZnVuY3Rpb24gYShlLHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGEpKXJldHVybiBuZXcgYShlLHQpO3RoaXMubWluPWUsdGhpcy5tYXg9dCx0aGlzLnNzPW5ldyBuKFtdLChlLHQpPT5lLmNvbXBhcmUodCkpLGkoXCJDcmVhdGVcIiksdGhpcy5jbGVhcigpfXMucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5sb3c9PT1lLmxvdyYmdGhpcy5oaWdoPT09ZS5oaWdofSxzLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmxvdzxlLmxvdyYmdGhpcy5oaWdoPGUubG93Py0xOmUubG93PHRoaXMubG93JiZlLmhpZ2g8dGhpcy5sb3c/MTowfSxhLnByb3RvdHlwZS5maXJzdFZhY2FudD1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5zcy5zaXplKCk/bnVsbDp0aGlzLnNzLmZyb250KCkubG93fSxhLnByb3RvdHlwZS5hbGxvYz1mdW5jdGlvbigpe2lmKDA9PT10aGlzLnNzLnNpemUoKSlyZXR1cm4gaShcImFsbG9jKCk6ZW1wdHlcIiksbnVsbDtjb25zdCBlPXRoaXMuc3MuZnJvbnQoKSx0PWUubG93O3JldHVybiB0KzE8PWUuaGlnaD8rK2UubG93OnRoaXMuc3MuZXJhc2VFbGVtZW50QnlQb3MoMCksaShcImFsbG9jKCk6XCIrdCksdH0sYS5wcm90b3R5cGUudXNlPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9bmV3IHMoZSxlKSxyPXRoaXMuc3MubG93ZXJCb3VuZCh0KTtpZihyKXtpZihyLmVxdWFscyh0KSlyZXR1cm4gdGhpcy5zcy5lcmFzZUVsZW1lbnRCeVZhbHVlKHIpLGkoXCJ1c2UoKTpcIitlKSwhMDtpZihyLmxvdz5lKXJldHVybiExO2lmKHIubG93PT09ZSlyZXR1cm4rK3IubG93LGkoXCJ1c2UoKTpcIitlKSwhMDtpZihyLmhpZ2g9PT1lKXJldHVybi0tci5oaWdoLGkoXCJ1c2UoKTpcIitlKSwhMDtjb25zdCBuPXIubG93O3JldHVybiByLmxvdz1lKzEsdGhpcy5zcy5pbnNlcnQobmV3IHMobixlLTEpKSxpKFwidXNlKCk6XCIrZSksITB9cmV0dXJuIGkoXCJ1c2UoKTpmYWlsZWRcIiksITF9LGEucHJvdG90eXBlLmZyZWU9ZnVuY3Rpb24oZSl7aWYoZTx0aGlzLm1pbnx8ZT50aGlzLm1heClyZXR1cm4gdm9pZCBvKFwiZnJlZSgpOlwiK2UrXCIgaXMgb3V0IG9mIHJhbmdlXCIpO2NvbnN0IHQ9bmV3IHMoZSxlKSxyPXRoaXMuc3MubG93ZXJCb3VuZCh0KTtpZihyKXtpZihyLmxvdzw9ZSYmZTw9ci5oaWdoKXJldHVybiB2b2lkIG8oXCJmcmVlKCk6XCIrZStcIiBoYXMgYWxyZWFkeSBiZWVuIHZhY2FudFwiKTtpZihyPT09dGhpcy5zcy5mcm9udCgpKWUrMT09PXIubG93Py0tci5sb3c6dGhpcy5zcy5pbnNlcnQodCk7ZWxzZXtjb25zdCBuPXRoaXMuc3MucmV2ZXJzZUxvd2VyQm91bmQodCk7bi5oaWdoKzE9PT1lP2UrMT09PXIubG93Pyh0aGlzLnNzLmVyYXNlRWxlbWVudEJ5VmFsdWUobiksci5sb3c9bi5sb3cpOm4uaGlnaD1lOmUrMT09PXIubG93P3IubG93PWU6dGhpcy5zcy5pbnNlcnQodCl9fWVsc2V7aWYocj09PXRoaXMuc3MuZnJvbnQoKSlyZXR1cm4gdm9pZCB0aGlzLnNzLmluc2VydCh0KTtjb25zdCBuPXRoaXMuc3MucmV2ZXJzZUxvd2VyQm91bmQodCk7bi5oaWdoKzE9PT1lP24uaGlnaD1lOnRoaXMuc3MuaW5zZXJ0KHQpfWkoXCJmcmVlKCk6XCIrZSl9LGEucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7aShcImNsZWFyKClcIiksdGhpcy5zcy5jbGVhcigpLHRoaXMuc3MuaW5zZXJ0KG5ldyBzKHRoaXMubWluLHRoaXMubWF4KSl9LGEucHJvdG90eXBlLmludGVydmFsQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zcy5zaXplKCl9LGEucHJvdG90eXBlLmR1bXA9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcImxlbmd0aDpcIit0aGlzLnNzLnNpemUoKSk7Zm9yKGNvbnN0IGUgb2YgdGhpcy5zcyljb25zb2xlLmxvZyhlKX0sdC5leHBvcnRzPWF9LHtkZWJ1ZzoxOCxcImpzLXNkc2xcIjozNn1dLDQ4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIndyYXBweVwiKTtmdW5jdGlvbiBpKGUpe3ZhciB0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FsbGVkP3QudmFsdWU6KHQuY2FsbGVkPSEwLHQudmFsdWU9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfTtyZXR1cm4gdC5jYWxsZWQ9ITEsdH1mdW5jdGlvbiBvKGUpe3ZhciB0PWZ1bmN0aW9uKCl7aWYodC5jYWxsZWQpdGhyb3cgbmV3IEVycm9yKHQub25jZUVycm9yKTtyZXR1cm4gdC5jYWxsZWQ9ITAsdC52YWx1ZT1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0scj1lLm5hbWV8fFwiRnVuY3Rpb24gd3JhcHBlZCB3aXRoIGBvbmNlYFwiO3JldHVybiB0Lm9uY2VFcnJvcj1yK1wiIHNob3VsZG4ndCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2VcIix0LmNhbGxlZD0hMSx0fXQuZXhwb3J0cz1uKGkpLHQuZXhwb3J0cy5zdHJpY3Q9bihvKSxpLnByb3RvPWkoZnVuY3Rpb24oKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLFwib25jZVwiLHt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBpKHRoaXMpfSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLFwib25jZVN0cmljdFwiLHt2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBvKHRoaXMpfSxjb25maWd1cmFibGU6ITB9KX0pfSx7d3JhcHB5Ojc5fV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSl7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dm9pZCAwPT09ZXx8IWUudmVyc2lvbnx8MD09PWUudmVyc2lvbi5pbmRleE9mKFwidjAuXCIpfHwwPT09ZS52ZXJzaW9uLmluZGV4T2YoXCJ2MS5cIikmJjAhPT1lLnZlcnNpb24uaW5kZXhPZihcInYxLjguXCIpP3QuZXhwb3J0cz17bmV4dFRpY2s6ZnVuY3Rpb24odCxyLG4saSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7dmFyIG8scyxhPWFyZ3VtZW50cy5sZW5ndGg7c3dpdGNoKGEpe2Nhc2UgMDpjYXNlIDE6cmV0dXJuIGUubmV4dFRpY2sodCk7Y2FzZSAyOnJldHVybiBlLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5jYWxsKG51bGwscil9KTtjYXNlIDM6cmV0dXJuIGUubmV4dFRpY2soZnVuY3Rpb24oKXt0LmNhbGwobnVsbCxyLG4pfSk7Y2FzZSA0OnJldHVybiBlLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5jYWxsKG51bGwscixuLGkpfSk7ZGVmYXVsdDpmb3Iobz1uZXcgQXJyYXkoYS0xKSxzPTA7czxvLmxlbmd0aDspb1tzKytdPWFyZ3VtZW50c1tzXTtyZXR1cm4gZS5uZXh0VGljayhmdW5jdGlvbigpe3QuYXBwbHkobnVsbCxvKX0pfX19OnQuZXhwb3J0cz1lfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7X3Byb2Nlc3M6NTB9XSw1MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbz10LmV4cG9ydHM9e307ZnVuY3Rpb24gcygpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gYSgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBsKGUpe2lmKG49PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KGUsMCk7aWYoKG49PT1zfHwhbikmJnNldFRpbWVvdXQpcmV0dXJuIG49c2V0VGltZW91dCxzZXRUaW1lb3V0KGUsMCk7dHJ5e3JldHVybiBuKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiBuLmNhbGwodGhpcyxlLDApfX19IWZ1bmN0aW9uKCl7dHJ5e249XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnN9Y2F0Y2goZSl7bj1zfXRyeXtpPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6YX1jYXRjaChlKXtpPWF9fSgpO3ZhciB1LGM9W10saD0hMSxmPS0xO2Z1bmN0aW9uIHAoKXtoJiZ1JiYoaD0hMSx1Lmxlbmd0aD9jPXUuY29uY2F0KGMpOmY9LTEsYy5sZW5ndGgmJmQoKSl9ZnVuY3Rpb24gZCgpe2lmKCFoKXt2YXIgZT1sKHApO2g9ITA7Zm9yKHZhciB0PWMubGVuZ3RoO3Q7KXtmb3IodT1jLGM9W107KytmPHQ7KXUmJnVbZl0ucnVuKCk7Zj0tMSx0PWMubGVuZ3RofXU9bnVsbCxoPSExLGZ1bmN0aW9uKGUpe2lmKGk9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoaT09PWF8fCFpKSYmY2xlYXJUaW1lb3V0KXJldHVybiBpPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e2koZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBpLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gaS5jYWxsKHRoaXMsZSl9fX0oZSl9fWZ1bmN0aW9uIGcoZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiB5KCl7fW8ubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTtjLnB1c2gobmV3IGcoZSx0KSksMSE9PWMubGVuZ3RofHxofHxsKGQpfSxnLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxvLnRpdGxlPVwiYnJvd3NlclwiLG8uYnJvd3Nlcj0hMCxvLmVudj17fSxvLmFyZ3Y9W10sby52ZXJzaW9uPVwiXCIsby52ZXJzaW9ucz17fSxvLm9uPXksby5hZGRMaXN0ZW5lcj15LG8ub25jZT15LG8ub2ZmPXksby5yZW1vdmVMaXN0ZW5lcj15LG8ucmVtb3ZlQWxsTGlzdGVuZXJzPXksby5lbWl0PXksby5wcmVwZW5kTGlzdGVuZXI9eSxvLnByZXBlbmRPbmNlTGlzdGVuZXI9eSxvLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX0sby5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxvLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxvLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0sby51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDUxOltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUpeyhmdW5jdGlvbigpeyFmdW5jdGlvbihuKXt2YXIgaT1cIm9iamVjdFwiPT10eXBlb2YgciYmciYmIXIubm9kZVR5cGUmJnIsbz1cIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmIXQubm9kZVR5cGUmJnQscz1cIm9iamVjdFwiPT10eXBlb2YgZSYmZTtzLmdsb2JhbCE9PXMmJnMud2luZG93IT09cyYmcy5zZWxmIT09c3x8KG49cyk7dmFyIGEsbCx1PTIxNDc0ODM2NDcsYz0zNixoPTEsZj0yNixwPTM4LGQ9NzAwLGc9NzIseT0xMjgsYj1cIi1cIixtPS9eeG4tLS8sdj0vW15cXHgyMC1cXHg3RV0vLHc9L1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZyxfPXtvdmVyZmxvdzpcIk92ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzXCIsXCJub3QtYmFzaWNcIjpcIklsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludClcIixcImludmFsaWQtaW5wdXRcIjpcIkludmFsaWQgaW5wdXRcIn0saz1jLWgsUz1NYXRoLmZsb29yLEU9U3RyaW5nLmZyb21DaGFyQ29kZTtmdW5jdGlvbiBDKGUpe3Rocm93IG5ldyBSYW5nZUVycm9yKF9bZV0pfWZ1bmN0aW9uIFQoZSx0KXtmb3IodmFyIHI9ZS5sZW5ndGgsbj1bXTtyLS07KW5bcl09dChlW3JdKTtyZXR1cm4gbn1mdW5jdGlvbiB4KGUsdCl7dmFyIHI9ZS5zcGxpdChcIkBcIiksbj1cIlwiO3JldHVybiByLmxlbmd0aD4xJiYobj1yWzBdK1wiQFwiLGU9clsxXSksbitUKChlPWUucmVwbGFjZSh3LFwiLlwiKSkuc3BsaXQoXCIuXCIpLHQpLmpvaW4oXCIuXCIpfWZ1bmN0aW9uIEEoZSl7Zm9yKHZhciB0LHIsbj1bXSxpPTAsbz1lLmxlbmd0aDtpPG87KSh0PWUuY2hhckNvZGVBdChpKyspKT49NTUyOTYmJnQ8PTU2MzE5JiZpPG8/NTYzMjA9PSg2NDUxMiYocj1lLmNoYXJDb2RlQXQoaSsrKSkpP24ucHVzaCgoKDEwMjMmdCk8PDEwKSsoMTAyMyZyKSs2NTUzNik6KG4ucHVzaCh0KSxpLS0pOm4ucHVzaCh0KTtyZXR1cm4gbn1mdW5jdGlvbiBJKGUpe3JldHVybiBUKGUsZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtyZXR1cm4gZT42NTUzNSYmKHQrPUUoKGUtPTY1NTM2KT4+PjEwJjEwMjN8NTUyOTYpLGU9NTYzMjB8MTAyMyZlKSx0Kz1FKGUpfSkuam9pbihcIlwiKX1mdW5jdGlvbiBQKGUsdCl7cmV0dXJuIGUrMjIrNzUqKGU8MjYpLSgoMCE9dCk8PDUpfWZ1bmN0aW9uIE8oZSx0LHIpe3ZhciBuPTA7Zm9yKGU9cj9TKGUvZCk6ZT4+MSxlKz1TKGUvdCk7ZT5rKmY+PjE7bis9YyllPVMoZS9rKTtyZXR1cm4gUyhuKyhrKzEpKmUvKGUrcCkpfWZ1bmN0aW9uIEIoZSl7dmFyIHQscixuLGksbyxzLGEsbCxwLGQsbSx2PVtdLHc9ZS5sZW5ndGgsXz0wLGs9eSxFPWc7Zm9yKChyPWUubGFzdEluZGV4T2YoYikpPDAmJihyPTApLG49MDtuPHI7KytuKWUuY2hhckNvZGVBdChuKT49MTI4JiZDKFwibm90LWJhc2ljXCIpLHYucHVzaChlLmNoYXJDb2RlQXQobikpO2ZvcihpPXI+MD9yKzE6MDtpPHc7KXtmb3Iobz1fLHM9MSxhPWM7aT49dyYmQyhcImludmFsaWQtaW5wdXRcIiksKChsPShtPWUuY2hhckNvZGVBdChpKyspKS00ODwxMD9tLTIyOm0tNjU8MjY/bS02NTptLTk3PDI2P20tOTc6Yyk+PWN8fGw+UygodS1fKS9zKSkmJkMoXCJvdmVyZmxvd1wiKSxfKz1sKnMsIShsPChwPWE8PUU/aDphPj1FK2Y/ZjphLUUpKTthKz1jKXM+Uyh1LyhkPWMtcCkpJiZDKFwib3ZlcmZsb3dcIikscyo9ZDtFPU8oXy1vLHQ9di5sZW5ndGgrMSwwPT1vKSxTKF8vdCk+dS1rJiZDKFwib3ZlcmZsb3dcIiksays9UyhfL3QpLF8lPXQsdi5zcGxpY2UoXysrLDAsayl9cmV0dXJuIEkodil9ZnVuY3Rpb24gUihlKXt2YXIgdCxyLG4saSxvLHMsYSxsLHAsZCxtLHYsdyxfLGssVD1bXTtmb3Iodj0oZT1BKGUpKS5sZW5ndGgsdD15LHI9MCxvPWcscz0wO3M8djsrK3MpKG09ZVtzXSk8MTI4JiZULnB1c2goRShtKSk7Zm9yKG49aT1ULmxlbmd0aCxpJiZULnB1c2goYik7bjx2Oyl7Zm9yKGE9dSxzPTA7czx2OysrcykobT1lW3NdKT49dCYmbTxhJiYoYT1tKTtmb3IoYS10PlMoKHUtcikvKHc9bisxKSkmJkMoXCJvdmVyZmxvd1wiKSxyKz0oYS10KSp3LHQ9YSxzPTA7czx2OysrcylpZigobT1lW3NdKTx0JiYrK3I+dSYmQyhcIm92ZXJmbG93XCIpLG09PXQpe2ZvcihsPXIscD1jOyEobDwoZD1wPD1vP2g6cD49bytmP2Y6cC1vKSk7cCs9YylrPWwtZCxfPWMtZCxULnB1c2goRShQKGQrayVfLDApKSksbD1TKGsvXyk7VC5wdXNoKEUoUChsLDApKSksbz1PKHIsdyxuPT1pKSxyPTAsKytufSsrciwrK3R9cmV0dXJuIFQuam9pbihcIlwiKX1pZihhPXt2ZXJzaW9uOlwiMS40LjFcIix1Y3MyOntkZWNvZGU6QSxlbmNvZGU6SX0sZGVjb2RlOkIsZW5jb2RlOlIsdG9BU0NJSTpmdW5jdGlvbihlKXtyZXR1cm4geChlLGZ1bmN0aW9uKGUpe3JldHVybiB2LnRlc3QoZSk/XCJ4bi0tXCIrUihlKTplfSl9LHRvVW5pY29kZTpmdW5jdGlvbihlKXtyZXR1cm4geChlLGZ1bmN0aW9uKGUpe3JldHVybiBtLnRlc3QoZSk/QihlLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpOmV9KX19LGkmJm8paWYodC5leHBvcnRzPT1pKW8uZXhwb3J0cz1hO2Vsc2UgZm9yKGwgaW4gYSlhLmhhc093blByb3BlcnR5KGwpJiYoaVtsXT1hW2xdKTtlbHNlIG4ucHVueWNvZGU9YX0odGhpcyl9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfXQuZXhwb3J0cz1mdW5jdGlvbihlLHQscixvKXt0PXR8fFwiJlwiLHI9cnx8XCI9XCI7dmFyIHM9e307aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fDA9PT1lLmxlbmd0aClyZXR1cm4gczt2YXIgYT0vXFwrL2c7ZT1lLnNwbGl0KHQpO3ZhciBsPTFlMztvJiZcIm51bWJlclwiPT10eXBlb2Ygby5tYXhLZXlzJiYobD1vLm1heEtleXMpO3ZhciB1PWUubGVuZ3RoO2w+MCYmdT5sJiYodT1sKTtmb3IodmFyIGM9MDtjPHU7KytjKXt2YXIgaCxmLHAsZCxnPWVbY10ucmVwbGFjZShhLFwiJTIwXCIpLHk9Zy5pbmRleE9mKHIpO3k+PTA/KGg9Zy5zdWJzdHIoMCx5KSxmPWcuc3Vic3RyKHkrMSkpOihoPWcsZj1cIlwiKSxwPWRlY29kZVVSSUNvbXBvbmVudChoKSxkPWRlY29kZVVSSUNvbXBvbmVudChmKSxuKHMscCk/aShzW3BdKT9zW3BdLnB1c2goZCk6c1twXT1bc1twXSxkXTpzW3BdPWR9cmV0dXJuIHN9O3ZhciBpPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX19LHt9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWZ1bmN0aW9uKGUpe3N3aXRjaCh0eXBlb2YgZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGU7Y2FzZVwiYm9vbGVhblwiOnJldHVybiBlP1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoZSk/ZTpcIlwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixhKXtyZXR1cm4gdD10fHxcIiZcIixyPXJ8fFwiPVwiLG51bGw9PT1lJiYoZT12b2lkIDApLFwib2JqZWN0XCI9PXR5cGVvZiBlP28ocyhlKSxmdW5jdGlvbihzKXt2YXIgYT1lbmNvZGVVUklDb21wb25lbnQobihzKSkrcjtyZXR1cm4gaShlW3NdKT9vKGVbc10sZnVuY3Rpb24oZSl7cmV0dXJuIGErZW5jb2RlVVJJQ29tcG9uZW50KG4oZSkpfSkuam9pbih0KTphK2VuY29kZVVSSUNvbXBvbmVudChuKGVbc10pKX0pLmpvaW4odCk6YT9lbmNvZGVVUklDb21wb25lbnQobihhKSkrcitlbmNvZGVVUklDb21wb25lbnQobihlKSk6XCJcIn07dmFyIGk9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfTtmdW5jdGlvbiBvKGUsdCl7aWYoZS5tYXApcmV0dXJuIGUubWFwKHQpO2Zvcih2YXIgcj1bXSxuPTA7bjxlLmxlbmd0aDtuKyspci5wdXNoKHQoZVtuXSxuKSk7cmV0dXJuIHJ9dmFyIHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiZ0LnB1c2gocik7cmV0dXJuIHR9fSx7fV0sNTQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyLmRlY29kZT1yLnBhcnNlPWUoXCIuL2RlY29kZVwiKSxyLmVuY29kZT1yLnN0cmluZ2lmeT1lKFwiLi9lbmNvZGVcIil9LHtcIi4vZGVjb2RlXCI6NTIsXCIuL2VuY29kZVwiOjUzfV0sNTU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj17fTtmdW5jdGlvbiBpKGUsdCxyKXtyfHwocj1FcnJvcik7dmFyIGk9ZnVuY3Rpb24oZSl7dmFyIHIsbjtmdW5jdGlvbiBpKHIsbixpKXtyZXR1cm4gZS5jYWxsKHRoaXMsZnVuY3Rpb24oZSxyLG4pe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dChlLHIsbil9KHIsbixpKSl8fHRoaXN9cmV0dXJuIG49ZSwocj1pKS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSksci5wcm90b3R5cGUuY29uc3RydWN0b3I9cixyLl9fcHJvdG9fXz1uLGl9KHIpO2kucHJvdG90eXBlLm5hbWU9ci5uYW1lLGkucHJvdG90eXBlLmNvZGU9ZSxuW2VdPWl9ZnVuY3Rpb24gbyhlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciByPWUubGVuZ3RoO3JldHVybiBlPWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcoZSl9KSxyPjI/XCJvbmUgb2YgXCIuY29uY2F0KHQsXCIgXCIpLmNvbmNhdChlLnNsaWNlKDAsci0xKS5qb2luKFwiLCBcIiksXCIsIG9yIFwiKStlW3ItMV06Mj09PXI/XCJvbmUgb2YgXCIuY29uY2F0KHQsXCIgXCIpLmNvbmNhdChlWzBdLFwiIG9yIFwiKS5jb25jYXQoZVsxXSk6XCJvZiBcIi5jb25jYXQodCxcIiBcIikuY29uY2F0KGVbMF0pfXJldHVyblwib2YgXCIuY29uY2F0KHQsXCIgXCIpLmNvbmNhdChTdHJpbmcoZSkpfWkoXCJFUlJfSU5WQUxJRF9PUFRfVkFMVUVcIixmdW5jdGlvbihlLHQpe3JldHVybidUaGUgdmFsdWUgXCInK3QrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcIicrZSsnXCInfSxUeXBlRXJyb3IpLGkoXCJFUlJfSU5WQUxJRF9BUkdfVFlQRVwiLGZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLHMsYTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCYmKGk9XCJub3QgXCIsdC5zdWJzdHIoIXN8fHM8MD8wOitzLGkubGVuZ3RoKT09PWkpPyhuPVwibXVzdCBub3QgYmVcIix0PXQucmVwbGFjZSgvXm5vdCAvLFwiXCIpKTpuPVwibXVzdCBiZVwiLGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4odm9pZCAwPT09cnx8cj5lLmxlbmd0aCkmJihyPWUubGVuZ3RoKSxlLnN1YnN0cmluZyhyLXQubGVuZ3RoLHIpPT09dH0oZSxcIiBhcmd1bWVudFwiKSlhPVwiVGhlIFwiLmNvbmNhdChlLFwiIFwiKS5jb25jYXQobixcIiBcIikuY29uY2F0KG8odCxcInR5cGVcIikpO2Vsc2V7dmFyIGw9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwibnVtYmVyXCIhPXR5cGVvZiByJiYocj0wKSwhKHIrdC5sZW5ndGg+ZS5sZW5ndGgpJiYtMSE9PWUuaW5kZXhPZih0LHIpfShlLFwiLlwiKT9cInByb3BlcnR5XCI6XCJhcmd1bWVudFwiO2E9J1RoZSBcIicuY29uY2F0KGUsJ1wiICcpLmNvbmNhdChsLFwiIFwiKS5jb25jYXQobixcIiBcIikuY29uY2F0KG8odCxcInR5cGVcIikpfXJldHVybiBhKz1cIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQodHlwZW9mIHIpfSxUeXBlRXJyb3IpLGkoXCJFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GXCIsXCJzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRlwiKSxpKFwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URURcIixmdW5jdGlvbihlKXtyZXR1cm5cIlRoZSBcIitlK1wiIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWRcIn0pLGkoXCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRVwiLFwiUHJlbWF0dXJlIGNsb3NlXCIpLGkoXCJFUlJfU1RSRUFNX0RFU1RST1lFRFwiLGZ1bmN0aW9uKGUpe3JldHVyblwiQ2Fubm90IGNhbGwgXCIrZStcIiBhZnRlciBhIHN0cmVhbSB3YXMgZGVzdHJveWVkXCJ9KSxpKFwiRVJSX01VTFRJUExFX0NBTExCQUNLXCIsXCJDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXNcIiksaShcIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEVcIixcIkNhbm5vdCBwaXBlLCBub3QgcmVhZGFibGVcIiksaShcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsXCJ3cml0ZSBhZnRlciBlbmRcIiksaShcIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVNcIixcIk1heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtXCIsVHlwZUVycm9yKSxpKFwiRVJSX1VOS05PV05fRU5DT0RJTkdcIixmdW5jdGlvbihlKXtyZXR1cm5cIlVua25vd24gZW5jb2Rpbmc6IFwiK2V9LFR5cGVFcnJvciksaShcIkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlRcIixcInN0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50XCIpLHQuZXhwb3J0cy5jb2Rlcz1ufSx7fV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdH07dC5leHBvcnRzPXU7dmFyIGk9ZShcIi4vX3N0cmVhbV9yZWFkYWJsZVwiKSxvPWUoXCIuL19zdHJlYW1fd3JpdGFibGVcIik7ZShcImluaGVyaXRzXCIpKHUsaSk7Zm9yKHZhciBzPW4oby5wcm90b3R5cGUpLGE9MDthPHMubGVuZ3RoO2ErKyl7dmFyIGw9c1thXTt1LnByb3RvdHlwZVtsXXx8KHUucHJvdG90eXBlW2xdPW8ucHJvdG90eXBlW2xdKX1mdW5jdGlvbiB1KGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHUpKXJldHVybiBuZXcgdShlKTtpLmNhbGwodGhpcyxlKSxvLmNhbGwodGhpcyxlKSx0aGlzLmFsbG93SGFsZk9wZW49ITAsZSYmKCExPT09ZS5yZWFkYWJsZSYmKHRoaXMucmVhZGFibGU9ITEpLCExPT09ZS53cml0YWJsZSYmKHRoaXMud3JpdGFibGU9ITEpLCExPT09ZS5hbGxvd0hhbGZPcGVuJiYodGhpcy5hbGxvd0hhbGZPcGVuPSExLHRoaXMub25jZShcImVuZFwiLGMpKSl9ZnVuY3Rpb24gYygpe3RoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWR8fHIubmV4dFRpY2soaCx0aGlzKX1mdW5jdGlvbiBoKGUpe2UuZW5kKCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHUucHJvdG90eXBlLFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFya319KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodS5wcm90b3R5cGUsXCJ3cml0YWJsZUJ1ZmZlclwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LnByb3RvdHlwZSxcIndyaXRhYmxlTGVuZ3RoXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RofX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1LnByb3RvdHlwZSxcImRlc3Ryb3llZFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLl9yZWFkYWJsZVN0YXRlJiZ2b2lkIDAhPT10aGlzLl93cml0YWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkKX0sc2V0OmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PXRoaXMuX3JlYWRhYmxlU3RhdGUmJnZvaWQgMCE9PXRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD1lLHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPWUpfX0pfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIikpfSx7XCIuL19zdHJlYW1fcmVhZGFibGVcIjo1OCxcIi4vX3N0cmVhbV93cml0YWJsZVwiOjYwLF9wcm9jZXNzOjUwLGluaGVyaXRzOjI0fV0sNTc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9aTt2YXIgbj1lKFwiLi9fc3RyZWFtX3RyYW5zZm9ybVwiKTtmdW5jdGlvbiBpKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGkpKXJldHVybiBuZXcgaShlKTtuLmNhbGwodGhpcyxlKX1lKFwiaW5oZXJpdHNcIikoaSxuKSxpLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKGUsdCxyKXtyKG51bGwsZSl9fSx7XCIuL19zdHJlYW1fdHJhbnNmb3JtXCI6NTksaW5oZXJpdHM6MjR9XSw1ODpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyLG4peyhmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBpO3QuZXhwb3J0cz1DLEMuUmVhZGFibGVTdGF0ZT1FO2UoXCJldmVudHNcIikuRXZlbnRFbWl0dGVyO3ZhciBvPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubGlzdGVuZXJzKHQpLmxlbmd0aH0scz1lKFwiLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbVwiKSxhPWUoXCJidWZmZXJcIikuQnVmZmVyLGw9bi5VaW50OEFycmF5fHxmdW5jdGlvbigpe307dmFyIHUsYz1lKFwidXRpbFwiKTt1PWMmJmMuZGVidWdsb2c/Yy5kZWJ1Z2xvZyhcInN0cmVhbVwiKTpmdW5jdGlvbigpe307dmFyIGgsZixwLGQ9ZShcIi4vaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdFwiKSxnPWUoXCIuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveVwiKSx5PWUoXCIuL2ludGVybmFsL3N0cmVhbXMvc3RhdGVcIikuZ2V0SGlnaFdhdGVyTWFyayxiPWUoXCIuLi9lcnJvcnNcIikuY29kZXMsbT1iLkVSUl9JTlZBTElEX0FSR19UWVBFLHY9Yi5FUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GLHc9Yi5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxfPWIuRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVDtlKFwiaW5oZXJpdHNcIikoQyxzKTt2YXIgaz1nLmVycm9yT3JEZXN0cm95LFM9W1wiZXJyb3JcIixcImNsb3NlXCIsXCJkZXN0cm95XCIsXCJwYXVzZVwiLFwicmVzdW1lXCJdO2Z1bmN0aW9uIEUodCxyLG4pe2k9aXx8ZShcIi4vX3N0cmVhbV9kdXBsZXhcIiksdD10fHx7fSxcImJvb2xlYW5cIiE9dHlwZW9mIG4mJihuPXIgaW5zdGFuY2VvZiBpKSx0aGlzLm9iamVjdE1vZGU9ISF0Lm9iamVjdE1vZGUsbiYmKHRoaXMub2JqZWN0TW9kZT10aGlzLm9iamVjdE1vZGV8fCEhdC5yZWFkYWJsZU9iamVjdE1vZGUpLHRoaXMuaGlnaFdhdGVyTWFyaz15KHRoaXMsdCxcInJlYWRhYmxlSGlnaFdhdGVyTWFya1wiLG4pLHRoaXMuYnVmZmVyPW5ldyBkLHRoaXMubGVuZ3RoPTAsdGhpcy5waXBlcz1udWxsLHRoaXMucGlwZXNDb3VudD0wLHRoaXMuZmxvd2luZz1udWxsLHRoaXMuZW5kZWQ9ITEsdGhpcy5lbmRFbWl0dGVkPSExLHRoaXMucmVhZGluZz0hMSx0aGlzLnN5bmM9ITAsdGhpcy5uZWVkUmVhZGFibGU9ITEsdGhpcy5lbWl0dGVkUmVhZGFibGU9ITEsdGhpcy5yZWFkYWJsZUxpc3RlbmluZz0hMSx0aGlzLnJlc3VtZVNjaGVkdWxlZD0hMSx0aGlzLnBhdXNlZD0hMCx0aGlzLmVtaXRDbG9zZT0hMSE9PXQuZW1pdENsb3NlLHRoaXMuYXV0b0Rlc3Ryb3k9ISF0LmF1dG9EZXN0cm95LHRoaXMuZGVzdHJveWVkPSExLHRoaXMuZGVmYXVsdEVuY29kaW5nPXQuZGVmYXVsdEVuY29kaW5nfHxcInV0ZjhcIix0aGlzLmF3YWl0RHJhaW49MCx0aGlzLnJlYWRpbmdNb3JlPSExLHRoaXMuZGVjb2Rlcj1udWxsLHRoaXMuZW5jb2Rpbmc9bnVsbCx0LmVuY29kaW5nJiYoaHx8KGg9ZShcInN0cmluZ19kZWNvZGVyL1wiKS5TdHJpbmdEZWNvZGVyKSx0aGlzLmRlY29kZXI9bmV3IGgodC5lbmNvZGluZyksdGhpcy5lbmNvZGluZz10LmVuY29kaW5nKX1mdW5jdGlvbiBDKHQpe2lmKGk9aXx8ZShcIi4vX3N0cmVhbV9kdXBsZXhcIiksISh0aGlzIGluc3RhbmNlb2YgQykpcmV0dXJuIG5ldyBDKHQpO3ZhciByPXRoaXMgaW5zdGFuY2VvZiBpO3RoaXMuX3JlYWRhYmxlU3RhdGU9bmV3IEUodCx0aGlzLHIpLHRoaXMucmVhZGFibGU9ITAsdCYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQucmVhZCYmKHRoaXMuX3JlYWQ9dC5yZWFkKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmRlc3Ryb3kmJih0aGlzLl9kZXN0cm95PXQuZGVzdHJveSkpLHMuY2FsbCh0aGlzKX1mdW5jdGlvbiBUKGUsdCxyLG4saSl7dShcInJlYWRhYmxlQWRkQ2h1bmtcIix0KTt2YXIgbyxzPWUuX3JlYWRhYmxlU3RhdGU7aWYobnVsbD09PXQpcy5yZWFkaW5nPSExLGZ1bmN0aW9uKGUsdCl7aWYodShcIm9uRW9mQ2h1bmtcIiksdC5lbmRlZClyZXR1cm47aWYodC5kZWNvZGVyKXt2YXIgcj10LmRlY29kZXIuZW5kKCk7ciYmci5sZW5ndGgmJih0LmJ1ZmZlci5wdXNoKHIpLHQubGVuZ3RoKz10Lm9iamVjdE1vZGU/MTpyLmxlbmd0aCl9dC5lbmRlZD0hMCx0LnN5bmM/UChlKToodC5uZWVkUmVhZGFibGU9ITEsdC5lbWl0dGVkUmVhZGFibGV8fCh0LmVtaXR0ZWRSZWFkYWJsZT0hMCxPKGUpKSl9KGUscyk7ZWxzZSBpZihpfHwobz1mdW5jdGlvbihlLHQpe3ZhciByO249dCxhLmlzQnVmZmVyKG4pfHxuIGluc3RhbmNlb2YgbHx8XCJzdHJpbmdcIj09dHlwZW9mIHR8fHZvaWQgMD09PXR8fGUub2JqZWN0TW9kZXx8KHI9bmV3IG0oXCJjaHVua1wiLFtcInN0cmluZ1wiLFwiQnVmZmVyXCIsXCJVaW50OEFycmF5XCJdLHQpKTt2YXIgbjtyZXR1cm4gcn0ocyx0KSksbylrKGUsbyk7ZWxzZSBpZihzLm9iamVjdE1vZGV8fHQmJnQubGVuZ3RoPjApaWYoXCJzdHJpbmdcIj09dHlwZW9mIHR8fHMub2JqZWN0TW9kZXx8T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpPT09YS5wcm90b3R5cGV8fCh0PWZ1bmN0aW9uKGUpe3JldHVybiBhLmZyb20oZSl9KHQpKSxuKXMuZW5kRW1pdHRlZD9rKGUsbmV3IF8pOngoZSxzLHQsITApO2Vsc2UgaWYocy5lbmRlZClrKGUsbmV3IHYpO2Vsc2V7aWYocy5kZXN0cm95ZWQpcmV0dXJuITE7cy5yZWFkaW5nPSExLHMuZGVjb2RlciYmIXI/KHQ9cy5kZWNvZGVyLndyaXRlKHQpLHMub2JqZWN0TW9kZXx8MCE9PXQubGVuZ3RoP3goZSxzLHQsITEpOkIoZSxzKSk6eChlLHMsdCwhMSl9ZWxzZSBufHwocy5yZWFkaW5nPSExLEIoZSxzKSk7cmV0dXJuIXMuZW5kZWQmJihzLmxlbmd0aDxzLmhpZ2hXYXRlck1hcmt8fDA9PT1zLmxlbmd0aCl9ZnVuY3Rpb24geChlLHQscixuKXt0LmZsb3dpbmcmJjA9PT10Lmxlbmd0aCYmIXQuc3luYz8odC5hd2FpdERyYWluPTAsZS5lbWl0KFwiZGF0YVwiLHIpKToodC5sZW5ndGgrPXQub2JqZWN0TW9kZT8xOnIubGVuZ3RoLG4/dC5idWZmZXIudW5zaGlmdChyKTp0LmJ1ZmZlci5wdXNoKHIpLHQubmVlZFJlYWRhYmxlJiZQKGUpKSxCKGUsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLFwiZGVzdHJveWVkXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX3JlYWRhYmxlU3RhdGUmJnRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fcmVhZGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkPWUpfX0pLEMucHJvdG90eXBlLmRlc3Ryb3k9Zy5kZXN0cm95LEMucHJvdG90eXBlLl91bmRlc3Ryb3k9Zy51bmRlc3Ryb3ksQy5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSx0KXt0KGUpfSxDLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj10aGlzLl9yZWFkYWJsZVN0YXRlO3JldHVybiBuLm9iamVjdE1vZGU/cj0hMDpcInN0cmluZ1wiPT10eXBlb2YgZSYmKCh0PXR8fG4uZGVmYXVsdEVuY29kaW5nKSE9PW4uZW5jb2RpbmcmJihlPWEuZnJvbShlLHQpLHQ9XCJcIikscj0hMCksVCh0aGlzLGUsdCwhMSxyKX0sQy5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbihlKXtyZXR1cm4gVCh0aGlzLGUsbnVsbCwhMCwhMSl9LEMucHJvdG90eXBlLmlzUGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuITE9PT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LEMucHJvdG90eXBlLnNldEVuY29kaW5nPWZ1bmN0aW9uKHQpe2h8fChoPWUoXCJzdHJpbmdfZGVjb2Rlci9cIikuU3RyaW5nRGVjb2Rlcik7dmFyIHI9bmV3IGgodCk7dGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyPXIsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZz10aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIuZW5jb2Rpbmc7Zm9yKHZhciBuPXRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQsaT1cIlwiO251bGwhPT1uOylpKz1yLndyaXRlKG4uZGF0YSksbj1uLm5leHQ7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmNsZWFyKCksXCJcIiE9PWkmJnRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLnB1c2goaSksdGhpcy5fcmVhZGFibGVTdGF0ZS5sZW5ndGg9aS5sZW5ndGgsdGhpc307dmFyIEE9MTA3Mzc0MTgyNDtmdW5jdGlvbiBJKGUsdCl7cmV0dXJuIGU8PTB8fDA9PT10Lmxlbmd0aCYmdC5lbmRlZD8wOnQub2JqZWN0TW9kZT8xOmUhPWU/dC5mbG93aW5nJiZ0Lmxlbmd0aD90LmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoOnQubGVuZ3RoOihlPnQuaGlnaFdhdGVyTWFyayYmKHQuaGlnaFdhdGVyTWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gZT49QT9lPUE6KGUtLSxlfD1lPj4+MSxlfD1lPj4+MixlfD1lPj4+NCxlfD1lPj4+OCxlfD1lPj4+MTYsZSsrKSxlfShlKSksZTw9dC5sZW5ndGg/ZTp0LmVuZGVkP3QubGVuZ3RoOih0Lm5lZWRSZWFkYWJsZT0hMCwwKSl9ZnVuY3Rpb24gUChlKXt2YXIgdD1lLl9yZWFkYWJsZVN0YXRlO3UoXCJlbWl0UmVhZGFibGVcIix0Lm5lZWRSZWFkYWJsZSx0LmVtaXR0ZWRSZWFkYWJsZSksdC5uZWVkUmVhZGFibGU9ITEsdC5lbWl0dGVkUmVhZGFibGV8fCh1KFwiZW1pdFJlYWRhYmxlXCIsdC5mbG93aW5nKSx0LmVtaXR0ZWRSZWFkYWJsZT0hMCxyLm5leHRUaWNrKE8sZSkpfWZ1bmN0aW9uIE8oZSl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTt1KFwiZW1pdFJlYWRhYmxlX1wiLHQuZGVzdHJveWVkLHQubGVuZ3RoLHQuZW5kZWQpLHQuZGVzdHJveWVkfHwhdC5sZW5ndGgmJiF0LmVuZGVkfHwoZS5lbWl0KFwicmVhZGFibGVcIiksdC5lbWl0dGVkUmVhZGFibGU9ITEpLHQubmVlZFJlYWRhYmxlPSF0LmZsb3dpbmcmJiF0LmVuZGVkJiZ0Lmxlbmd0aDw9dC5oaWdoV2F0ZXJNYXJrLGooZSl9ZnVuY3Rpb24gQihlLHQpe3QucmVhZGluZ01vcmV8fCh0LnJlYWRpbmdNb3JlPSEwLHIubmV4dFRpY2soUixlLHQpKX1mdW5jdGlvbiBSKGUsdCl7Zm9yKDshdC5yZWFkaW5nJiYhdC5lbmRlZCYmKHQubGVuZ3RoPHQuaGlnaFdhdGVyTWFya3x8dC5mbG93aW5nJiYwPT09dC5sZW5ndGgpOyl7dmFyIHI9dC5sZW5ndGg7aWYodShcIm1heWJlUmVhZE1vcmUgcmVhZCAwXCIpLGUucmVhZCgwKSxyPT09dC5sZW5ndGgpYnJlYWt9dC5yZWFkaW5nTW9yZT0hMX1mdW5jdGlvbiBNKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7dC5yZWFkYWJsZUxpc3RlbmluZz1lLmxpc3RlbmVyQ291bnQoXCJyZWFkYWJsZVwiKT4wLHQucmVzdW1lU2NoZWR1bGVkJiYhdC5wYXVzZWQ/dC5mbG93aW5nPSEwOmUubGlzdGVuZXJDb3VudChcImRhdGFcIik+MCYmZS5yZXN1bWUoKX1mdW5jdGlvbiBOKGUpe3UoXCJyZWFkYWJsZSBuZXh0dGljayByZWFkIDBcIiksZS5yZWFkKDApfWZ1bmN0aW9uIEwoZSx0KXt1KFwicmVzdW1lXCIsdC5yZWFkaW5nKSx0LnJlYWRpbmd8fGUucmVhZCgwKSx0LnJlc3VtZVNjaGVkdWxlZD0hMSxlLmVtaXQoXCJyZXN1bWVcIiksaihlKSx0LmZsb3dpbmcmJiF0LnJlYWRpbmcmJmUucmVhZCgwKX1mdW5jdGlvbiBqKGUpe3ZhciB0PWUuX3JlYWRhYmxlU3RhdGU7Zm9yKHUoXCJmbG93XCIsdC5mbG93aW5nKTt0LmZsb3dpbmcmJm51bGwhPT1lLnJlYWQoKTspO31mdW5jdGlvbiBVKGUsdCl7cmV0dXJuIDA9PT10Lmxlbmd0aD9udWxsOih0Lm9iamVjdE1vZGU/cj10LmJ1ZmZlci5zaGlmdCgpOiFlfHxlPj10Lmxlbmd0aD8ocj10LmRlY29kZXI/dC5idWZmZXIuam9pbihcIlwiKToxPT09dC5idWZmZXIubGVuZ3RoP3QuYnVmZmVyLmZpcnN0KCk6dC5idWZmZXIuY29uY2F0KHQubGVuZ3RoKSx0LmJ1ZmZlci5jbGVhcigpKTpyPXQuYnVmZmVyLmNvbnN1bWUoZSx0LmRlY29kZXIpLHIpO3ZhciByfWZ1bmN0aW9uIHEoZSl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTt1KFwiZW5kUmVhZGFibGVcIix0LmVuZEVtaXR0ZWQpLHQuZW5kRW1pdHRlZHx8KHQuZW5kZWQ9ITAsci5uZXh0VGljayhELHQsZSkpfWZ1bmN0aW9uIEQoZSx0KXtpZih1KFwiZW5kUmVhZGFibGVOVFwiLGUuZW5kRW1pdHRlZCxlLmxlbmd0aCksIWUuZW5kRW1pdHRlZCYmMD09PWUubGVuZ3RoJiYoZS5lbmRFbWl0dGVkPSEwLHQucmVhZGFibGU9ITEsdC5lbWl0KFwiZW5kXCIpLGUuYXV0b0Rlc3Ryb3kpKXt2YXIgcj10Ll93cml0YWJsZVN0YXRlOyghcnx8ci5hdXRvRGVzdHJveSYmci5maW5pc2hlZCkmJnQuZGVzdHJveSgpfX1mdW5jdGlvbiB6KGUsdCl7Zm9yKHZhciByPTAsbj1lLmxlbmd0aDtyPG47cisrKWlmKGVbcl09PT10KXJldHVybiByO3JldHVybi0xfUMucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24oZSl7dShcInJlYWRcIixlKSxlPXBhcnNlSW50KGUsMTApO3ZhciB0PXRoaXMuX3JlYWRhYmxlU3RhdGUscj1lO2lmKDAhPT1lJiYodC5lbWl0dGVkUmVhZGFibGU9ITEpLDA9PT1lJiZ0Lm5lZWRSZWFkYWJsZSYmKCgwIT09dC5oaWdoV2F0ZXJNYXJrP3QubGVuZ3RoPj10LmhpZ2hXYXRlck1hcms6dC5sZW5ndGg+MCl8fHQuZW5kZWQpKXJldHVybiB1KFwicmVhZDogZW1pdFJlYWRhYmxlXCIsdC5sZW5ndGgsdC5lbmRlZCksMD09PXQubGVuZ3RoJiZ0LmVuZGVkP3EodGhpcyk6UCh0aGlzKSxudWxsO2lmKDA9PT0oZT1JKGUsdCkpJiZ0LmVuZGVkKXJldHVybiAwPT09dC5sZW5ndGgmJnEodGhpcyksbnVsbDt2YXIgbixpPXQubmVlZFJlYWRhYmxlO3JldHVybiB1KFwibmVlZCByZWFkYWJsZVwiLGkpLCgwPT09dC5sZW5ndGh8fHQubGVuZ3RoLWU8dC5oaWdoV2F0ZXJNYXJrKSYmdShcImxlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrXCIsaT0hMCksdC5lbmRlZHx8dC5yZWFkaW5nP3UoXCJyZWFkaW5nIG9yIGVuZGVkXCIsaT0hMSk6aSYmKHUoXCJkbyByZWFkXCIpLHQucmVhZGluZz0hMCx0LnN5bmM9ITAsMD09PXQubGVuZ3RoJiYodC5uZWVkUmVhZGFibGU9ITApLHRoaXMuX3JlYWQodC5oaWdoV2F0ZXJNYXJrKSx0LnN5bmM9ITEsdC5yZWFkaW5nfHwoZT1JKHIsdCkpKSxudWxsPT09KG49ZT4wP1UoZSx0KTpudWxsKT8odC5uZWVkUmVhZGFibGU9dC5sZW5ndGg8PXQuaGlnaFdhdGVyTWFyayxlPTApOih0Lmxlbmd0aC09ZSx0LmF3YWl0RHJhaW49MCksMD09PXQubGVuZ3RoJiYodC5lbmRlZHx8KHQubmVlZFJlYWRhYmxlPSEwKSxyIT09ZSYmdC5lbmRlZCYmcSh0aGlzKSksbnVsbCE9PW4mJnRoaXMuZW1pdChcImRhdGFcIixuKSxufSxDLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbihlKXtrKHRoaXMsbmV3IHcoXCJfcmVhZCgpXCIpKX0sQy5wcm90b3R5cGUucGlwZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMsaT10aGlzLl9yZWFkYWJsZVN0YXRlO3N3aXRjaChpLnBpcGVzQ291bnQpe2Nhc2UgMDppLnBpcGVzPWU7YnJlYWs7Y2FzZSAxOmkucGlwZXM9W2kucGlwZXMsZV07YnJlYWs7ZGVmYXVsdDppLnBpcGVzLnB1c2goZSl9aS5waXBlc0NvdW50Kz0xLHUoXCJwaXBlIGNvdW50PSVkIG9wdHM9JWpcIixpLnBpcGVzQ291bnQsdCk7dmFyIHM9KCF0fHwhMSE9PXQuZW5kKSYmZSE9PXIuc3Rkb3V0JiZlIT09ci5zdGRlcnI/bDp5O2Z1bmN0aW9uIGEodCxyKXt1KFwib251bnBpcGVcIiksdD09PW4mJnImJiExPT09ci5oYXNVbnBpcGVkJiYoci5oYXNVbnBpcGVkPSEwLHUoXCJjbGVhbnVwXCIpLGUucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGQpLGUucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixnKSxlLnJlbW92ZUxpc3RlbmVyKFwiZHJhaW5cIixjKSxlLnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixwKSxlLnJlbW92ZUxpc3RlbmVyKFwidW5waXBlXCIsYSksbi5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGwpLG4ucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix5KSxuLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLGYpLGg9ITAsIWkuYXdhaXREcmFpbnx8ZS5fd3JpdGFibGVTdGF0ZSYmIWUuX3dyaXRhYmxlU3RhdGUubmVlZERyYWlufHxjKCkpfWZ1bmN0aW9uIGwoKXt1KFwib25lbmRcIiksZS5lbmQoKX1pLmVuZEVtaXR0ZWQ/ci5uZXh0VGljayhzKTpuLm9uY2UoXCJlbmRcIixzKSxlLm9uKFwidW5waXBlXCIsYSk7dmFyIGM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTt1KFwicGlwZU9uRHJhaW5cIix0LmF3YWl0RHJhaW4pLHQuYXdhaXREcmFpbiYmdC5hd2FpdERyYWluLS0sMD09PXQuYXdhaXREcmFpbiYmbyhlLFwiZGF0YVwiKSYmKHQuZmxvd2luZz0hMCxqKGUpKX19KG4pO2Uub24oXCJkcmFpblwiLGMpO3ZhciBoPSExO2Z1bmN0aW9uIGYodCl7dShcIm9uZGF0YVwiKTt2YXIgcj1lLndyaXRlKHQpO3UoXCJkZXN0LndyaXRlXCIsciksITE9PT1yJiYoKDE9PT1pLnBpcGVzQ291bnQmJmkucGlwZXM9PT1lfHxpLnBpcGVzQ291bnQ+MSYmLTEhPT16KGkucGlwZXMsZSkpJiYhaCYmKHUoXCJmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2VcIixpLmF3YWl0RHJhaW4pLGkuYXdhaXREcmFpbisrKSxuLnBhdXNlKCkpfWZ1bmN0aW9uIHAodCl7dShcIm9uZXJyb3JcIix0KSx5KCksZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIscCksMD09PW8oZSxcImVycm9yXCIpJiZrKGUsdCl9ZnVuY3Rpb24gZCgpe2UucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixnKSx5KCl9ZnVuY3Rpb24gZygpe3UoXCJvbmZpbmlzaFwiKSxlLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixkKSx5KCl9ZnVuY3Rpb24geSgpe3UoXCJ1bnBpcGVcIiksbi51bnBpcGUoZSl9cmV0dXJuIG4ub24oXCJkYXRhXCIsZiksZnVuY3Rpb24oZSx0LHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUucHJlcGVuZExpc3RlbmVyKXJldHVybiBlLnByZXBlbmRMaXN0ZW5lcih0LHIpO2UuX2V2ZW50cyYmZS5fZXZlbnRzW3RdP0FycmF5LmlzQXJyYXkoZS5fZXZlbnRzW3RdKT9lLl9ldmVudHNbdF0udW5zaGlmdChyKTplLl9ldmVudHNbdF09W3IsZS5fZXZlbnRzW3RdXTplLm9uKHQscil9KGUsXCJlcnJvclwiLHApLGUub25jZShcImNsb3NlXCIsZCksZS5vbmNlKFwiZmluaXNoXCIsZyksZS5lbWl0KFwicGlwZVwiLG4pLGkuZmxvd2luZ3x8KHUoXCJwaXBlIHJlc3VtZVwiKSxuLnJlc3VtZSgpKSxlfSxDLnByb3RvdHlwZS51bnBpcGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fcmVhZGFibGVTdGF0ZSxyPXtoYXNVbnBpcGVkOiExfTtpZigwPT09dC5waXBlc0NvdW50KXJldHVybiB0aGlzO2lmKDE9PT10LnBpcGVzQ291bnQpcmV0dXJuIGUmJmUhPT10LnBpcGVzP3RoaXM6KGV8fChlPXQucGlwZXMpLHQucGlwZXM9bnVsbCx0LnBpcGVzQ291bnQ9MCx0LmZsb3dpbmc9ITEsZSYmZS5lbWl0KFwidW5waXBlXCIsdGhpcyxyKSx0aGlzKTtpZighZSl7dmFyIG49dC5waXBlcyxpPXQucGlwZXNDb3VudDt0LnBpcGVzPW51bGwsdC5waXBlc0NvdW50PTAsdC5mbG93aW5nPSExO2Zvcih2YXIgbz0wO288aTtvKyspbltvXS5lbWl0KFwidW5waXBlXCIsdGhpcyx7aGFzVW5waXBlZDohMX0pO3JldHVybiB0aGlzfXZhciBzPXoodC5waXBlcyxlKTtyZXR1cm4tMT09PXM/dGhpczoodC5waXBlcy5zcGxpY2UocywxKSx0LnBpcGVzQ291bnQtPTEsMT09PXQucGlwZXNDb3VudCYmKHQucGlwZXM9dC5waXBlc1swXSksZS5lbWl0KFwidW5waXBlXCIsdGhpcyxyKSx0aGlzKX0sQy5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0KXt2YXIgbj1zLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsZSx0KSxpPXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuXCJkYXRhXCI9PT1lPyhpLnJlYWRhYmxlTGlzdGVuaW5nPXRoaXMubGlzdGVuZXJDb3VudChcInJlYWRhYmxlXCIpPjAsITEhPT1pLmZsb3dpbmcmJnRoaXMucmVzdW1lKCkpOlwicmVhZGFibGVcIj09PWUmJihpLmVuZEVtaXR0ZWR8fGkucmVhZGFibGVMaXN0ZW5pbmd8fChpLnJlYWRhYmxlTGlzdGVuaW5nPWkubmVlZFJlYWRhYmxlPSEwLGkuZmxvd2luZz0hMSxpLmVtaXR0ZWRSZWFkYWJsZT0hMSx1KFwib24gcmVhZGFibGVcIixpLmxlbmd0aCxpLnJlYWRpbmcpLGkubGVuZ3RoP1AodGhpcyk6aS5yZWFkaW5nfHxyLm5leHRUaWNrKE4sdGhpcykpKSxufSxDLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1DLnByb3RvdHlwZS5vbixDLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuPXMucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcyxlLHQpO3JldHVyblwicmVhZGFibGVcIj09PWUmJnIubmV4dFRpY2soTSx0aGlzKSxufSxDLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQ9cy5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm5cInJlYWRhYmxlXCIhPT1lJiZ2b2lkIDAhPT1lfHxyLm5leHRUaWNrKE0sdGhpcyksdH0sQy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gZS5mbG93aW5nfHwodShcInJlc3VtZVwiKSxlLmZsb3dpbmc9IWUucmVhZGFibGVMaXN0ZW5pbmcsZnVuY3Rpb24oZSx0KXt0LnJlc3VtZVNjaGVkdWxlZHx8KHQucmVzdW1lU2NoZWR1bGVkPSEwLHIubmV4dFRpY2soTCxlLHQpKX0odGhpcyxlKSksZS5wYXVzZWQ9ITEsdGhpc30sQy5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oKXtyZXR1cm4gdShcImNhbGwgcGF1c2UgZmxvd2luZz0lalwiLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyksITEhPT10aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcmJih1KFwicGF1c2VcIiksdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPSExLHRoaXMuZW1pdChcInBhdXNlXCIpKSx0aGlzLl9yZWFkYWJsZVN0YXRlLnBhdXNlZD0hMCx0aGlzfSxDLnByb3RvdHlwZS53cmFwPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLl9yZWFkYWJsZVN0YXRlLG49ITE7Zm9yKHZhciBpIGluIGUub24oXCJlbmRcIixmdW5jdGlvbigpe2lmKHUoXCJ3cmFwcGVkIGVuZFwiKSxyLmRlY29kZXImJiFyLmVuZGVkKXt2YXIgZT1yLmRlY29kZXIuZW5kKCk7ZSYmZS5sZW5ndGgmJnQucHVzaChlKX10LnB1c2gobnVsbCl9KSxlLm9uKFwiZGF0YVwiLGZ1bmN0aW9uKGkpeyh1KFwid3JhcHBlZCBkYXRhXCIpLHIuZGVjb2RlciYmKGk9ci5kZWNvZGVyLndyaXRlKGkpKSwhci5vYmplY3RNb2RlfHxudWxsIT09aSYmdm9pZCAwIT09aSkmJigoci5vYmplY3RNb2RlfHxpJiZpLmxlbmd0aCkmJih0LnB1c2goaSl8fChuPSEwLGUucGF1c2UoKSkpKX0pLGUpdm9pZCAwPT09dGhpc1tpXSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZVtpXSYmKHRoaXNbaV09ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGVbdF0uYXBwbHkoZSxhcmd1bWVudHMpfX0oaSkpO2Zvcih2YXIgbz0wO288Uy5sZW5ndGg7bysrKWUub24oU1tvXSx0aGlzLmVtaXQuYmluZCh0aGlzLFNbb10pKTtyZXR1cm4gdGhpcy5fcmVhZD1mdW5jdGlvbih0KXt1KFwid3JhcHBlZCBfcmVhZFwiLHQpLG4mJihuPSExLGUucmVzdW1lKCkpfSx0aGlzfSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihDLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl09ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09ZiYmKGY9ZShcIi4vaW50ZXJuYWwvc3RyZWFtcy9hc3luY19pdGVyYXRvclwiKSksZih0aGlzKX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSxcInJlYWRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLFwicmVhZGFibGVCdWZmZXJcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZSYmdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXJ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLFwicmVhZGFibGVGbG93aW5nXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZ30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmc9ZSl9fSksQy5fZnJvbUxpc3Q9VSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsXCJyZWFkYWJsZUxlbmd0aFwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aH19KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihDLmZyb209ZnVuY3Rpb24odCxyKXtyZXR1cm4gdm9pZCAwPT09cCYmKHA9ZShcIi4vaW50ZXJuYWwvc3RyZWFtcy9mcm9tXCIpKSxwKEMsdCxyKX0pfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiX3Byb2Nlc3NcIiksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4uL2Vycm9yc1wiOjU1LFwiLi9fc3RyZWFtX2R1cGxleFwiOjU2LFwiLi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yXCI6NjEsXCIuL2ludGVybmFsL3N0cmVhbXMvYnVmZmVyX2xpc3RcIjo2MixcIi4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95XCI6NjMsXCIuL2ludGVybmFsL3N0cmVhbXMvZnJvbVwiOjY1LFwiLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlXCI6NjcsXCIuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtXCI6NjgsX3Byb2Nlc3M6NTAsYnVmZmVyOjE3LGV2ZW50czoyMixpbmhlcml0czoyNCxcInN0cmluZ19kZWNvZGVyL1wiOjc1LHV0aWw6MTZ9XSw1OTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz11O3ZhciBuPWUoXCIuLi9lcnJvcnNcIikuY29kZXMsaT1uLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELG89bi5FUlJfTVVMVElQTEVfQ0FMTEJBQ0sscz1uLkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcsYT1uLkVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCxsPWUoXCIuL19zdHJlYW1fZHVwbGV4XCIpO2Z1bmN0aW9uIHUoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgdSkpcmV0dXJuIG5ldyB1KGUpO2wuY2FsbCh0aGlzLGUpLHRoaXMuX3RyYW5zZm9ybVN0YXRlPXthZnRlclRyYW5zZm9ybTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuX3RyYW5zZm9ybVN0YXRlO3IudHJhbnNmb3JtaW5nPSExO3ZhciBuPXIud3JpdGVjYjtpZihudWxsPT09bilyZXR1cm4gdGhpcy5lbWl0KFwiZXJyb3JcIixuZXcgbyk7ci53cml0ZWNodW5rPW51bGwsci53cml0ZWNiPW51bGwsbnVsbCE9dCYmdGhpcy5wdXNoKHQpLG4oZSk7dmFyIGk9dGhpcy5fcmVhZGFibGVTdGF0ZTtpLnJlYWRpbmc9ITEsKGkubmVlZFJlYWRhYmxlfHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcmspJiZ0aGlzLl9yZWFkKGkuaGlnaFdhdGVyTWFyayl9LmJpbmQodGhpcyksbmVlZFRyYW5zZm9ybTohMSx0cmFuc2Zvcm1pbmc6ITEsd3JpdGVjYjpudWxsLHdyaXRlY2h1bms6bnVsbCx3cml0ZWVuY29kaW5nOm51bGx9LHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlPSEwLHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYz0hMSxlJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS50cmFuc2Zvcm0mJih0aGlzLl90cmFuc2Zvcm09ZS50cmFuc2Zvcm0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmx1c2gmJih0aGlzLl9mbHVzaD1lLmZsdXNoKSksdGhpcy5vbihcInByZWZpbmlzaFwiLGMpfWZ1bmN0aW9uIGMoKXt2YXIgZT10aGlzO1wiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXMuX2ZsdXNofHx0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD9oKHRoaXMsbnVsbCxudWxsKTp0aGlzLl9mbHVzaChmdW5jdGlvbih0LHIpe2goZSx0LHIpfSl9ZnVuY3Rpb24gaChlLHQscil7aWYodClyZXR1cm4gZS5lbWl0KFwiZXJyb3JcIix0KTtpZihudWxsIT1yJiZlLnB1c2gociksZS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpdGhyb3cgbmV3IGE7aWYoZS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKXRocm93IG5ldyBzO3JldHVybiBlLnB1c2gobnVsbCl9ZShcImluaGVyaXRzXCIpKHUsbCksdS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtPSExLGwucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLGUsdCl9LHUucHJvdG90eXBlLl90cmFuc2Zvcm09ZnVuY3Rpb24oZSx0LHIpe3IobmV3IGkoXCJfdHJhbnNmb3JtKClcIikpfSx1LnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMuX3RyYW5zZm9ybVN0YXRlO2lmKG4ud3JpdGVjYj1yLG4ud3JpdGVjaHVuaz1lLG4ud3JpdGVlbmNvZGluZz10LCFuLnRyYW5zZm9ybWluZyl7dmFyIGk9dGhpcy5fcmVhZGFibGVTdGF0ZTsobi5uZWVkVHJhbnNmb3JtfHxpLm5lZWRSZWFkYWJsZXx8aS5sZW5ndGg8aS5oaWdoV2F0ZXJNYXJrKSYmdGhpcy5fcmVhZChpLmhpZ2hXYXRlck1hcmspfX0sdS5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fdHJhbnNmb3JtU3RhdGU7bnVsbD09PXQud3JpdGVjaHVua3x8dC50cmFuc2Zvcm1pbmc/dC5uZWVkVHJhbnNmb3JtPSEwOih0LnRyYW5zZm9ybWluZz0hMCx0aGlzLl90cmFuc2Zvcm0odC53cml0ZWNodW5rLHQud3JpdGVlbmNvZGluZyx0LmFmdGVyVHJhbnNmb3JtKSl9LHUucHJvdG90eXBlLl9kZXN0cm95PWZ1bmN0aW9uKGUsdCl7bC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLGUsZnVuY3Rpb24oZSl7dChlKX0pfX0se1wiLi4vZXJyb3JzXCI6NTUsXCIuL19zdHJlYW1fZHVwbGV4XCI6NTYsaW5oZXJpdHM6MjR9XSw2MDpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyLG4peyhmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkoZSl7dmFyIHQ9dGhpczt0aGlzLm5leHQ9bnVsbCx0aGlzLmVudHJ5PW51bGwsdGhpcy5maW5pc2g9ZnVuY3Rpb24oKXshZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUuZW50cnk7ZS5lbnRyeT1udWxsO2Zvcig7bjspe3ZhciBpPW4uY2FsbGJhY2s7dC5wZW5kaW5nY2ItLSxpKHIpLG49bi5uZXh0fXQuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQ9ZX0odCxlKX19dmFyIG87dC5leHBvcnRzPUMsQy5Xcml0YWJsZVN0YXRlPUU7dmFyIHM9e2RlcHJlY2F0ZTplKFwidXRpbC1kZXByZWNhdGVcIil9LGE9ZShcIi4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW1cIiksbD1lKFwiYnVmZmVyXCIpLkJ1ZmZlcix1PW4uVWludDhBcnJheXx8ZnVuY3Rpb24oKXt9O3ZhciBjLGg9ZShcIi4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95XCIpLGY9ZShcIi4vaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZVwiKS5nZXRIaWdoV2F0ZXJNYXJrLHA9ZShcIi4uL2Vycm9yc1wiKS5jb2RlcyxkPXAuRVJSX0lOVkFMSURfQVJHX1RZUEUsZz1wLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELHk9cC5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssYj1wLkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUsbT1wLkVSUl9TVFJFQU1fREVTVFJPWUVELHY9cC5FUlJfU1RSRUFNX05VTExfVkFMVUVTLHc9cC5FUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCxfPXAuRVJSX1VOS05PV05fRU5DT0RJTkcsaz1oLmVycm9yT3JEZXN0cm95O2Z1bmN0aW9uIFMoKXt9ZnVuY3Rpb24gRSh0LG4scyl7bz1vfHxlKFwiLi9fc3RyZWFtX2R1cGxleFwiKSx0PXR8fHt9LFwiYm9vbGVhblwiIT10eXBlb2YgcyYmKHM9biBpbnN0YW5jZW9mIG8pLHRoaXMub2JqZWN0TW9kZT0hIXQub2JqZWN0TW9kZSxzJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISF0LndyaXRhYmxlT2JqZWN0TW9kZSksdGhpcy5oaWdoV2F0ZXJNYXJrPWYodGhpcyx0LFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIscyksdGhpcy5maW5hbENhbGxlZD0hMSx0aGlzLm5lZWREcmFpbj0hMSx0aGlzLmVuZGluZz0hMSx0aGlzLmVuZGVkPSExLHRoaXMuZmluaXNoZWQ9ITEsdGhpcy5kZXN0cm95ZWQ9ITE7dmFyIGE9ITE9PT10LmRlY29kZVN0cmluZ3M7dGhpcy5kZWNvZGVTdHJpbmdzPSFhLHRoaXMuZGVmYXVsdEVuY29kaW5nPXQuZGVmYXVsdEVuY29kaW5nfHxcInV0ZjhcIix0aGlzLmxlbmd0aD0wLHRoaXMud3JpdGluZz0hMSx0aGlzLmNvcmtlZD0wLHRoaXMuc3luYz0hMCx0aGlzLmJ1ZmZlclByb2Nlc3Npbmc9ITEsdGhpcy5vbndyaXRlPWZ1bmN0aW9uKGUpeyFmdW5jdGlvbihlLHQpe3ZhciBuPWUuX3dyaXRhYmxlU3RhdGUsaT1uLnN5bmMsbz1uLndyaXRlY2I7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbyl0aHJvdyBuZXcgeTtpZihmdW5jdGlvbihlKXtlLndyaXRpbmc9ITEsZS53cml0ZWNiPW51bGwsZS5sZW5ndGgtPWUud3JpdGVsZW4sZS53cml0ZWxlbj0wfShuKSx0KSFmdW5jdGlvbihlLHQsbixpLG8pey0tdC5wZW5kaW5nY2Isbj8oci5uZXh0VGljayhvLGkpLHIubmV4dFRpY2soTyxlLHQpLGUuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLGsoZSxpKSk6KG8oaSksZS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQ9ITAsayhlLGkpLE8oZSx0KSl9KGUsbixpLHQsbyk7ZWxzZXt2YXIgcz1JKG4pfHxlLmRlc3Ryb3llZDtzfHxuLmNvcmtlZHx8bi5idWZmZXJQcm9jZXNzaW5nfHwhbi5idWZmZXJlZFJlcXVlc3R8fEEoZSxuKSxpP3IubmV4dFRpY2soeCxlLG4scyxvKTp4KGUsbixzLG8pfX0obixlKX0sdGhpcy53cml0ZWNiPW51bGwsdGhpcy53cml0ZWxlbj0wLHRoaXMuYnVmZmVyZWRSZXF1ZXN0PW51bGwsdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0PW51bGwsdGhpcy5wZW5kaW5nY2I9MCx0aGlzLnByZWZpbmlzaGVkPSExLHRoaXMuZXJyb3JFbWl0dGVkPSExLHRoaXMuZW1pdENsb3NlPSExIT09dC5lbWl0Q2xvc2UsdGhpcy5hdXRvRGVzdHJveT0hIXQuYXV0b0Rlc3Ryb3ksdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudD0wLHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlPW5ldyBpKHRoaXMpfWZ1bmN0aW9uIEModCl7dmFyIHI9dGhpcyBpbnN0YW5jZW9mKG89b3x8ZShcIi4vX3N0cmVhbV9kdXBsZXhcIikpO2lmKCFyJiYhYy5jYWxsKEMsdGhpcykpcmV0dXJuIG5ldyBDKHQpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3IEUodCx0aGlzLHIpLHRoaXMud3JpdGFibGU9ITAsdCYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQud3JpdGUmJih0aGlzLl93cml0ZT10LndyaXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LndyaXRldiYmKHRoaXMuX3dyaXRldj10LndyaXRldiksXCJmdW5jdGlvblwiPT10eXBlb2YgdC5kZXN0cm95JiYodGhpcy5fZGVzdHJveT10LmRlc3Ryb3kpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZmluYWwmJih0aGlzLl9maW5hbD10LmZpbmFsKSksYS5jYWxsKHRoaXMpfWZ1bmN0aW9uIFQoZSx0LHIsbixpLG8scyl7dC53cml0ZWxlbj1uLHQud3JpdGVjYj1zLHQud3JpdGluZz0hMCx0LnN5bmM9ITAsdC5kZXN0cm95ZWQ/dC5vbndyaXRlKG5ldyBtKFwid3JpdGVcIikpOnI/ZS5fd3JpdGV2KGksdC5vbndyaXRlKTplLl93cml0ZShpLG8sdC5vbndyaXRlKSx0LnN5bmM9ITF9ZnVuY3Rpb24geChlLHQscixuKXtyfHxmdW5jdGlvbihlLHQpezA9PT10Lmxlbmd0aCYmdC5uZWVkRHJhaW4mJih0Lm5lZWREcmFpbj0hMSxlLmVtaXQoXCJkcmFpblwiKSl9KGUsdCksdC5wZW5kaW5nY2ItLSxuKCksTyhlLHQpfWZ1bmN0aW9uIEEoZSx0KXt0LmJ1ZmZlclByb2Nlc3Npbmc9ITA7dmFyIHI9dC5idWZmZXJlZFJlcXVlc3Q7aWYoZS5fd3JpdGV2JiZyJiZyLm5leHQpe3ZhciBuPXQuYnVmZmVyZWRSZXF1ZXN0Q291bnQsbz1uZXcgQXJyYXkobikscz10LmNvcmtlZFJlcXVlc3RzRnJlZTtzLmVudHJ5PXI7Zm9yKHZhciBhPTAsbD0hMDtyOylvW2FdPXIsci5pc0J1Znx8KGw9ITEpLHI9ci5uZXh0LGErPTE7by5hbGxCdWZmZXJzPWwsVChlLHQsITAsdC5sZW5ndGgsbyxcIlwiLHMuZmluaXNoKSx0LnBlbmRpbmdjYisrLHQubGFzdEJ1ZmZlcmVkUmVxdWVzdD1udWxsLHMubmV4dD8odC5jb3JrZWRSZXF1ZXN0c0ZyZWU9cy5uZXh0LHMubmV4dD1udWxsKTp0LmNvcmtlZFJlcXVlc3RzRnJlZT1uZXcgaSh0KSx0LmJ1ZmZlcmVkUmVxdWVzdENvdW50PTB9ZWxzZXtmb3IoO3I7KXt2YXIgdT1yLmNodW5rLGM9ci5lbmNvZGluZyxoPXIuY2FsbGJhY2s7aWYoVChlLHQsITEsdC5vYmplY3RNb2RlPzE6dS5sZW5ndGgsdSxjLGgpLHI9ci5uZXh0LHQuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLSx0LndyaXRpbmcpYnJlYWt9bnVsbD09PXImJih0Lmxhc3RCdWZmZXJlZFJlcXVlc3Q9bnVsbCl9dC5idWZmZXJlZFJlcXVlc3Q9cix0LmJ1ZmZlclByb2Nlc3Npbmc9ITF9ZnVuY3Rpb24gSShlKXtyZXR1cm4gZS5lbmRpbmcmJjA9PT1lLmxlbmd0aCYmbnVsbD09PWUuYnVmZmVyZWRSZXF1ZXN0JiYhZS5maW5pc2hlZCYmIWUud3JpdGluZ31mdW5jdGlvbiBQKGUsdCl7ZS5fZmluYWwoZnVuY3Rpb24ocil7dC5wZW5kaW5nY2ItLSxyJiZrKGUsciksdC5wcmVmaW5pc2hlZD0hMCxlLmVtaXQoXCJwcmVmaW5pc2hcIiksTyhlLHQpfSl9ZnVuY3Rpb24gTyhlLHQpe3ZhciBuPUkodCk7aWYobiYmKGZ1bmN0aW9uKGUsdCl7dC5wcmVmaW5pc2hlZHx8dC5maW5hbENhbGxlZHx8KFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUuX2ZpbmFsfHx0LmRlc3Ryb3llZD8odC5wcmVmaW5pc2hlZD0hMCxlLmVtaXQoXCJwcmVmaW5pc2hcIikpOih0LnBlbmRpbmdjYisrLHQuZmluYWxDYWxsZWQ9ITAsci5uZXh0VGljayhQLGUsdCkpKX0oZSx0KSwwPT09dC5wZW5kaW5nY2ImJih0LmZpbmlzaGVkPSEwLGUuZW1pdChcImZpbmlzaFwiKSx0LmF1dG9EZXN0cm95KSkpe3ZhciBpPWUuX3JlYWRhYmxlU3RhdGU7KCFpfHxpLmF1dG9EZXN0cm95JiZpLmVuZEVtaXR0ZWQpJiZlLmRlc3Ryb3koKX1yZXR1cm4gbn1lKFwiaW5oZXJpdHNcIikoQyxhKSxFLnByb3RvdHlwZS5nZXRCdWZmZXI9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5idWZmZXJlZFJlcXVlc3QsdD1bXTtlOyl0LnB1c2goZSksZT1lLm5leHQ7cmV0dXJuIHR9LGZ1bmN0aW9uKCl7dHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShFLnByb3RvdHlwZSxcImJ1ZmZlclwiLHtnZXQ6cy5kZXByZWNhdGUoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRCdWZmZXIoKX0sXCJfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciBpbnN0ZWFkLlwiLFwiREVQMDAwM1wiKX0pfWNhdGNoKGUpe319KCksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaGFzSW5zdGFuY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdPyhjPUZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLFN5bWJvbC5oYXNJbnN0YW5jZSx7dmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuISFjLmNhbGwodGhpcyxlKXx8dGhpcz09PUMmJihlJiZlLl93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgRSl9fSkpOmM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0aGlzfSxDLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKCl7ayh0aGlzLG5ldyBiKX0sQy5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLG89dGhpcy5fd3JpdGFibGVTdGF0ZSxzPSExLGE9IW8ub2JqZWN0TW9kZSYmKGk9ZSxsLmlzQnVmZmVyKGkpfHxpIGluc3RhbmNlb2YgdSk7cmV0dXJuIGEmJiFsLmlzQnVmZmVyKGUpJiYoZT1mdW5jdGlvbihlKXtyZXR1cm4gbC5mcm9tKGUpfShlKSksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKG49dCx0PW51bGwpLGE/dD1cImJ1ZmZlclwiOnR8fCh0PW8uZGVmYXVsdEVuY29kaW5nKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiYobj1TKSxvLmVuZGluZz9mdW5jdGlvbihlLHQpe3ZhciBuPW5ldyB3O2soZSxuKSxyLm5leHRUaWNrKHQsbil9KHRoaXMsbik6KGF8fGZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBvO3JldHVybiBudWxsPT09bj9vPW5ldyB2Olwic3RyaW5nXCI9PXR5cGVvZiBufHx0Lm9iamVjdE1vZGV8fChvPW5ldyBkKFwiY2h1bmtcIixbXCJzdHJpbmdcIixcIkJ1ZmZlclwiXSxuKSksIW98fChrKGUsbyksci5uZXh0VGljayhpLG8pLCExKX0odGhpcyxvLGUsbikpJiYoby5wZW5kaW5nY2IrKyxzPWZ1bmN0aW9uKGUsdCxyLG4saSxvKXtpZighcil7dmFyIHM9ZnVuY3Rpb24oZSx0LHIpe2Uub2JqZWN0TW9kZXx8ITE9PT1lLmRlY29kZVN0cmluZ3N8fFwic3RyaW5nXCIhPXR5cGVvZiB0fHwodD1sLmZyb20odCxyKSk7cmV0dXJuIHR9KHQsbixpKTtuIT09cyYmKHI9ITAsaT1cImJ1ZmZlclwiLG49cyl9dmFyIGE9dC5vYmplY3RNb2RlPzE6bi5sZW5ndGg7dC5sZW5ndGgrPWE7dmFyIHU9dC5sZW5ndGg8dC5oaWdoV2F0ZXJNYXJrO3V8fCh0Lm5lZWREcmFpbj0hMCk7aWYodC53cml0aW5nfHx0LmNvcmtlZCl7dmFyIGM9dC5sYXN0QnVmZmVyZWRSZXF1ZXN0O3QubGFzdEJ1ZmZlcmVkUmVxdWVzdD17Y2h1bms6bixlbmNvZGluZzppLGlzQnVmOnIsY2FsbGJhY2s6byxuZXh0Om51bGx9LGM/Yy5uZXh0PXQubGFzdEJ1ZmZlcmVkUmVxdWVzdDp0LmJ1ZmZlcmVkUmVxdWVzdD10Lmxhc3RCdWZmZXJlZFJlcXVlc3QsdC5idWZmZXJlZFJlcXVlc3RDb3VudCs9MX1lbHNlIFQoZSx0LCExLGEsbixpLG8pO3JldHVybiB1fSh0aGlzLG8sYSxlLHQsbikpLHN9LEMucHJvdG90eXBlLmNvcms9ZnVuY3Rpb24oKXt0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrfSxDLnByb3RvdHlwZS51bmNvcms9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl93cml0YWJsZVN0YXRlO2UuY29ya2VkJiYoZS5jb3JrZWQtLSxlLndyaXRpbmd8fGUuY29ya2VkfHxlLmJ1ZmZlclByb2Nlc3Npbmd8fCFlLmJ1ZmZlcmVkUmVxdWVzdHx8QSh0aGlzLGUpKX0sQy5wcm90b3R5cGUuc2V0RGVmYXVsdEVuY29kaW5nPWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1lLnRvTG93ZXJDYXNlKCkpLCEoW1wiaGV4XCIsXCJ1dGY4XCIsXCJ1dGYtOFwiLFwiYXNjaWlcIixcImJpbmFyeVwiLFwiYmFzZTY0XCIsXCJ1Y3MyXCIsXCJ1Y3MtMlwiLFwidXRmMTZsZVwiLFwidXRmLTE2bGVcIixcInJhd1wiXS5pbmRleE9mKChlK1wiXCIpLnRvTG93ZXJDYXNlKCkpPi0xKSl0aHJvdyBuZXcgXyhlKTtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmc9ZSx0aGlzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsXCJ3cml0YWJsZUJ1ZmZlclwiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLnByb3RvdHlwZSxcIndyaXRhYmxlSGlnaFdhdGVyTWFya1wiLHtlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSksQy5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKGUsdCxyKXtyKG5ldyBnKFwiX3dyaXRlKClcIikpfSxDLnByb3RvdHlwZS5fd3JpdGV2PW51bGwsQy5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzLl93cml0YWJsZVN0YXRlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGU/KG49ZSxlPW51bGwsdD1udWxsKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYobj10LHQ9bnVsbCksbnVsbCE9PWUmJnZvaWQgMCE9PWUmJnRoaXMud3JpdGUoZSx0KSxpLmNvcmtlZCYmKGkuY29ya2VkPTEsdGhpcy51bmNvcmsoKSksaS5lbmRpbmd8fGZ1bmN0aW9uKGUsdCxuKXt0LmVuZGluZz0hMCxPKGUsdCksbiYmKHQuZmluaXNoZWQ/ci5uZXh0VGljayhuKTplLm9uY2UoXCJmaW5pc2hcIixuKSk7dC5lbmRlZD0hMCxlLndyaXRhYmxlPSExfSh0aGlzLGksbiksdGhpc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLFwid3JpdGFibGVMZW5ndGhcIix7ZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGh9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEMucHJvdG90eXBlLFwiZGVzdHJveWVkXCIse2VudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX3dyaXRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPWUpfX0pLEMucHJvdG90eXBlLmRlc3Ryb3k9aC5kZXN0cm95LEMucHJvdG90eXBlLl91bmRlc3Ryb3k9aC51bmRlc3Ryb3ksQy5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSx0KXt0KGUpfX0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMsZShcIl9wcm9jZXNzXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7XCIuLi9lcnJvcnNcIjo1NSxcIi4vX3N0cmVhbV9kdXBsZXhcIjo1NixcIi4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95XCI6NjMsXCIuL2ludGVybmFsL3N0cmVhbXMvc3RhdGVcIjo2NyxcIi4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW1cIjo2OCxfcHJvY2Vzczo1MCxidWZmZXI6MTcsaW5oZXJpdHM6MjQsXCJ1dGlsLWRlcHJlY2F0ZVwiOjc4fV0sNjE6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG47ZnVuY3Rpb24gaShlLHQscil7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yLGV9dmFyIG89ZShcIi4vZW5kLW9mLXN0cmVhbVwiKSxzPVN5bWJvbChcImxhc3RSZXNvbHZlXCIpLGE9U3ltYm9sKFwibGFzdFJlamVjdFwiKSxsPVN5bWJvbChcImVycm9yXCIpLHU9U3ltYm9sKFwiZW5kZWRcIiksYz1TeW1ib2woXCJsYXN0UHJvbWlzZVwiKSxoPVN5bWJvbChcImhhbmRsZVByb21pc2VcIiksZj1TeW1ib2woXCJzdHJlYW1cIik7ZnVuY3Rpb24gcChlLHQpe3JldHVybnt2YWx1ZTplLGRvbmU6dH19ZnVuY3Rpb24gZChlKXt2YXIgdD1lW3NdO2lmKG51bGwhPT10KXt2YXIgcj1lW2ZdLnJlYWQoKTtudWxsIT09ciYmKGVbY109bnVsbCxlW3NdPW51bGwsZVthXT1udWxsLHQocChyLCExKSkpfX12YXIgZz1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZnVuY3Rpb24oKXt9KSx5PU9iamVjdC5zZXRQcm90b3R5cGVPZigoaShuPXtnZXQgc3RyZWFtKCl7cmV0dXJuIHRoaXNbZl19LG5leHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpc1tsXTtpZihudWxsIT09dClyZXR1cm4gUHJvbWlzZS5yZWplY3QodCk7aWYodGhpc1t1XSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHAodm9pZCAwLCEwKSk7aWYodGhpc1tmXS5kZXN0cm95ZWQpcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbil7ci5uZXh0VGljayhmdW5jdGlvbigpe2VbbF0/bihlW2xdKTp0KHAodm9pZCAwLCEwKSl9KX0pO3ZhciBuLGk9dGhpc1tjXTtpZihpKW49bmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24ocixuKXtlLnRoZW4oZnVuY3Rpb24oKXt0W3VdP3IocCh2b2lkIDAsITApKTp0W2hdKHIsbil9LG4pfX0oaSx0aGlzKSk7ZWxzZXt2YXIgbz10aGlzW2ZdLnJlYWQoKTtpZihudWxsIT09bylyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHAobywhMSkpO249bmV3IFByb21pc2UodGhpc1toXSl9cmV0dXJuIHRoaXNbY109bixufX0sU3ltYm9sLmFzeW5jSXRlcmF0b3IsZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLGkobixcInJldHVyblwiLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxyKXtlW2ZdLmRlc3Ryb3kobnVsbCxmdW5jdGlvbihlKXtlP3IoZSk6dChwKHZvaWQgMCwhMCkpfSl9KX0pLG4pLGcpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdCxuPU9iamVjdC5jcmVhdGUoeSwoaSh0PXt9LGYse3ZhbHVlOmUsd3JpdGFibGU6ITB9KSxpKHQscyx7dmFsdWU6bnVsbCx3cml0YWJsZTohMH0pLGkodCxhLHt2YWx1ZTpudWxsLHdyaXRhYmxlOiEwfSksaSh0LGwse3ZhbHVlOm51bGwsd3JpdGFibGU6ITB9KSxpKHQsdSx7dmFsdWU6ZS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkLHdyaXRhYmxlOiEwfSksaSh0LGgse3ZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9bltmXS5yZWFkKCk7cj8obltjXT1udWxsLG5bc109bnVsbCxuW2FdPW51bGwsZShwKHIsITEpKSk6KG5bc109ZSxuW2FdPXQpfSx3cml0YWJsZTohMH0pLHQpKTtyZXR1cm4gbltjXT1udWxsLG8oZSxmdW5jdGlvbihlKXtpZihlJiZcIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFXCIhPT1lLmNvZGUpe3ZhciB0PW5bYV07cmV0dXJuIG51bGwhPT10JiYobltjXT1udWxsLG5bc109bnVsbCxuW2FdPW51bGwsdChlKSksdm9pZChuW2xdPWUpfXZhciByPW5bc107bnVsbCE9PXImJihuW2NdPW51bGwsbltzXT1udWxsLG5bYV09bnVsbCxyKHAodm9pZCAwLCEwKSkpLG5bdV09ITB9KSxlLm9uKFwicmVhZGFibGVcIixmdW5jdGlvbihlKXtyLm5leHRUaWNrKGQsZSl9LmJpbmQobnVsbCxuKSksbn19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSl9LHtcIi4vZW5kLW9mLXN0cmVhbVwiOjY0LF9wcm9jZXNzOjUwfV0sNjI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7dmFyIHI9T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYobj1uLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSksci5wdXNoLmFwcGx5KHIsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gaShlLHQscil7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpyLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1yLGV9ZnVuY3Rpb24gbyhlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG4mJihuLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxuLmtleSxuKX19dmFyIHM9ZShcImJ1ZmZlclwiKS5CdWZmZXIsYT1lKFwidXRpbFwiKS5pbnNwZWN0LGw9YSYmYS5jdXN0b218fFwiaW5zcGVjdFwiO3QuZXhwb3J0cz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuaGVhZD1udWxsLHRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9dmFyIHQscix1O3JldHVybiB0PWUsKHI9W3trZXk6XCJwdXNoXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9e2RhdGE6ZSxuZXh0Om51bGx9O3RoaXMubGVuZ3RoPjA/dGhpcy50YWlsLm5leHQ9dDp0aGlzLmhlYWQ9dCx0aGlzLnRhaWw9dCwrK3RoaXMubGVuZ3RofX0se2tleTpcInVuc2hpZnRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17ZGF0YTplLG5leHQ6dGhpcy5oZWFkfTswPT09dGhpcy5sZW5ndGgmJih0aGlzLnRhaWw9dCksdGhpcy5oZWFkPXQsKyt0aGlzLmxlbmd0aH19LHtrZXk6XCJzaGlmdFwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoMCE9PXRoaXMubGVuZ3RoKXt2YXIgZT10aGlzLmhlYWQuZGF0YTtyZXR1cm4gMT09PXRoaXMubGVuZ3RoP3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbDp0aGlzLmhlYWQ9dGhpcy5oZWFkLm5leHQsLS10aGlzLmxlbmd0aCxlfX19LHtrZXk6XCJjbGVhclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTB9fSx7a2V5Olwiam9pblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm5cIlwiO2Zvcih2YXIgdD10aGlzLmhlYWQscj1cIlwiK3QuZGF0YTt0PXQubmV4dDspcis9ZSt0LmRhdGE7cmV0dXJuIHJ9fSx7a2V5OlwiY29uY2F0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoMD09PXRoaXMubGVuZ3RoKXJldHVybiBzLmFsbG9jKDApO2Zvcih2YXIgdCxyLG4saT1zLmFsbG9jVW5zYWZlKGU+Pj4wKSxvPXRoaXMuaGVhZCxhPTA7bzspdD1vLmRhdGEscj1pLG49YSxzLnByb3RvdHlwZS5jb3B5LmNhbGwodCxyLG4pLGErPW8uZGF0YS5sZW5ndGgsbz1vLm5leHQ7cmV0dXJuIGl9fSx7a2V5OlwiY29uc3VtZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIGU8dGhpcy5oZWFkLmRhdGEubGVuZ3RoPyhyPXRoaXMuaGVhZC5kYXRhLnNsaWNlKDAsZSksdGhpcy5oZWFkLmRhdGE9dGhpcy5oZWFkLmRhdGEuc2xpY2UoZSkpOnI9ZT09PXRoaXMuaGVhZC5kYXRhLmxlbmd0aD90aGlzLnNoaWZ0KCk6dD90aGlzLl9nZXRTdHJpbmcoZSk6dGhpcy5fZ2V0QnVmZmVyKGUpLHJ9fSx7a2V5OlwiZmlyc3RcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhlYWQuZGF0YX19LHtrZXk6XCJfZ2V0U3RyaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5oZWFkLHI9MSxuPXQuZGF0YTtmb3IoZS09bi5sZW5ndGg7dD10Lm5leHQ7KXt2YXIgaT10LmRhdGEsbz1lPmkubGVuZ3RoP2kubGVuZ3RoOmU7aWYobz09PWkubGVuZ3RoP24rPWk6bis9aS5zbGljZSgwLGUpLDA9PT0oZS09bykpe289PT1pLmxlbmd0aD8oKytyLHQubmV4dD90aGlzLmhlYWQ9dC5uZXh0OnRoaXMuaGVhZD10aGlzLnRhaWw9bnVsbCk6KHRoaXMuaGVhZD10LHQuZGF0YT1pLnNsaWNlKG8pKTticmVha30rK3J9cmV0dXJuIHRoaXMubGVuZ3RoLT1yLG59fSx7a2V5OlwiX2dldEJ1ZmZlclwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXMuYWxsb2NVbnNhZmUoZSkscj10aGlzLmhlYWQsbj0xO2ZvcihyLmRhdGEuY29weSh0KSxlLT1yLmRhdGEubGVuZ3RoO3I9ci5uZXh0Oyl7dmFyIGk9ci5kYXRhLG89ZT5pLmxlbmd0aD9pLmxlbmd0aDplO2lmKGkuY29weSh0LHQubGVuZ3RoLWUsMCxvKSwwPT09KGUtPW8pKXtvPT09aS5sZW5ndGg/KCsrbixyLm5leHQ/dGhpcy5oZWFkPXIubmV4dDp0aGlzLmhlYWQ9dGhpcy50YWlsPW51bGwpOih0aGlzLmhlYWQ9cixyLmRhdGE9aS5zbGljZShvKSk7YnJlYWt9KytufXJldHVybiB0aGlzLmxlbmd0aC09bix0fX0se2tleTpsLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGEodGhpcyxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbdF0/YXJndW1lbnRzW3RdOnt9O3QlMj9uKE9iamVjdChyKSwhMCkuZm9yRWFjaChmdW5jdGlvbih0KXtpKGUsdCxyW3RdKX0pOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocikpOm4oT2JqZWN0KHIpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpKX0pfXJldHVybiBlfSh7fSx0LHtkZXB0aDowLGN1c3RvbUluc3BlY3Q6ITF9KSl9fV0pJiZvKHQucHJvdG90eXBlLHIpLHUmJm8odCx1KSxlfSgpfSx7YnVmZmVyOjE3LHV0aWw6MTZ9XSw2MzpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihlKXsoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUsdCl7aShlLHQpLG4oZSl9ZnVuY3Rpb24gbihlKXtlLl93cml0YWJsZVN0YXRlJiYhZS5fd3JpdGFibGVTdGF0ZS5lbWl0Q2xvc2V8fGUuX3JlYWRhYmxlU3RhdGUmJiFlLl9yZWFkYWJsZVN0YXRlLmVtaXRDbG9zZXx8ZS5lbWl0KFwiY2xvc2VcIil9ZnVuY3Rpb24gaShlLHQpe2UuZW1pdChcImVycm9yXCIsdCl9dC5leHBvcnRzPXtkZXN0cm95OmZ1bmN0aW9uKHQsbyl7dmFyIHM9dGhpcyxhPXRoaXMuX3JlYWRhYmxlU3RhdGUmJnRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkLGw9dGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7cmV0dXJuIGF8fGw/KG8/byh0KTp0JiYodGhpcy5fd3JpdGFibGVTdGF0ZT90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZHx8KHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLGUubmV4dFRpY2soaSx0aGlzLHQpKTplLm5leHRUaWNrKGksdGhpcyx0KSksdGhpcyk6KHRoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMCksdGhpcy5fd3JpdGFibGVTdGF0ZSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPSEwKSx0aGlzLl9kZXN0cm95KHR8fG51bGwsZnVuY3Rpb24odCl7IW8mJnQ/cy5fd3JpdGFibGVTdGF0ZT9zLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZD9lLm5leHRUaWNrKG4scyk6KHMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSEwLGUubmV4dFRpY2socixzLHQpKTplLm5leHRUaWNrKHIscyx0KTpvPyhlLm5leHRUaWNrKG4scyksbyh0KSk6ZS5uZXh0VGljayhuLHMpfSksdGhpcyl9LHVuZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmc9ITEsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZD0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQ9ITEpLHRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQ9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5wcmVmaW5pc2hlZD0hMSx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkPSExKX0sZXJyb3JPckRlc3Ryb3k6ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLl9yZWFkYWJsZVN0YXRlLG49ZS5fd3JpdGFibGVTdGF0ZTtyJiZyLmF1dG9EZXN0cm95fHxuJiZuLmF1dG9EZXN0cm95P2UuZGVzdHJveSh0KTplLmVtaXQoXCJlcnJvclwiLHQpfX19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSl9LHtfcHJvY2Vzczo1MH1dLDY0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uLy4uLy4uL2Vycm9yc1wiKS5jb2Rlcy5FUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRTtmdW5jdGlvbiBpKCl7fXQuZXhwb3J0cz1mdW5jdGlvbiBlKHQscixvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXJldHVybiBlKHQsbnVsbCxyKTtyfHwocj17fSksbz1mdW5jdGlvbihlKXt2YXIgdD0hMTtyZXR1cm4gZnVuY3Rpb24oKXtpZighdCl7dD0hMDtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShyKSxpPTA7aTxyO2krKyluW2ldPWFyZ3VtZW50c1tpXTtlLmFwcGx5KHRoaXMsbil9fX0ob3x8aSk7dmFyIHM9ci5yZWFkYWJsZXx8ITEhPT1yLnJlYWRhYmxlJiZ0LnJlYWRhYmxlLGE9ci53cml0YWJsZXx8ITEhPT1yLndyaXRhYmxlJiZ0LndyaXRhYmxlLGw9ZnVuY3Rpb24oKXt0LndyaXRhYmxlfHxjKCl9LHU9dC5fd3JpdGFibGVTdGF0ZSYmdC5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCxjPWZ1bmN0aW9uKCl7YT0hMSx1PSEwLHN8fG8uY2FsbCh0KX0saD10Ll9yZWFkYWJsZVN0YXRlJiZ0Ll9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQsZj1mdW5jdGlvbigpe3M9ITEsaD0hMCxhfHxvLmNhbGwodCl9LHA9ZnVuY3Rpb24oZSl7by5jYWxsKHQsZSl9LGQ9ZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcyYmIWg/KHQuX3JlYWRhYmxlU3RhdGUmJnQuX3JlYWRhYmxlU3RhdGUuZW5kZWR8fChlPW5ldyBuKSxvLmNhbGwodCxlKSk6YSYmIXU/KHQuX3dyaXRhYmxlU3RhdGUmJnQuX3dyaXRhYmxlU3RhdGUuZW5kZWR8fChlPW5ldyBuKSxvLmNhbGwodCxlKSk6dm9pZCAwfSxnPWZ1bmN0aW9uKCl7dC5yZXEub24oXCJmaW5pc2hcIixjKX07cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLnNldEhlYWRlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5hYm9ydH0odCk/KHQub24oXCJjb21wbGV0ZVwiLGMpLHQub24oXCJhYm9ydFwiLGQpLHQucmVxP2coKTp0Lm9uKFwicmVxdWVzdFwiLGcpKTphJiYhdC5fd3JpdGFibGVTdGF0ZSYmKHQub24oXCJlbmRcIixsKSx0Lm9uKFwiY2xvc2VcIixsKSksdC5vbihcImVuZFwiLGYpLHQub24oXCJmaW5pc2hcIixjKSwhMSE9PXIuZXJyb3ImJnQub24oXCJlcnJvclwiLHApLHQub24oXCJjbG9zZVwiLGQpLGZ1bmN0aW9uKCl7dC5yZW1vdmVMaXN0ZW5lcihcImNvbXBsZXRlXCIsYyksdC5yZW1vdmVMaXN0ZW5lcihcImFib3J0XCIsZCksdC5yZW1vdmVMaXN0ZW5lcihcInJlcXVlc3RcIixnKSx0LnJlcSYmdC5yZXEucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixjKSx0LnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsbCksdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsbCksdC5yZW1vdmVMaXN0ZW5lcihcImZpbmlzaFwiLGMpLHQucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixmKSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIixwKSx0LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixkKX19fSx7XCIuLi8uLi8uLi9lcnJvcnNcIjo1NX1dLDY1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiUmVhZGFibGUuZnJvbSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyXCIpfX0se31dLDY2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG47dmFyIGk9ZShcIi4uLy4uLy4uL2Vycm9yc1wiKS5jb2RlcyxvPWkuRVJSX01JU1NJTkdfQVJHUyxzPWkuRVJSX1NUUkVBTV9ERVNUUk9ZRUQ7ZnVuY3Rpb24gYShlKXtpZihlKXRocm93IGV9ZnVuY3Rpb24gbChlKXtlKCl9ZnVuY3Rpb24gdShlLHQpe3JldHVybiBlLnBpcGUodCl9dC5leHBvcnRzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkodCksaT0wO2k8dDtpKyspcltpXT1hcmd1bWVudHNbaV07dmFyIGMsaD1mdW5jdGlvbihlKXtyZXR1cm4gZS5sZW5ndGg/XCJmdW5jdGlvblwiIT10eXBlb2YgZVtlLmxlbmd0aC0xXT9hOmUucG9wKCk6YX0ocik7aWYoQXJyYXkuaXNBcnJheShyWzBdKSYmKHI9clswXSksci5sZW5ndGg8Mil0aHJvdyBuZXcgbyhcInN0cmVhbXNcIik7dmFyIGY9ci5tYXAoZnVuY3Rpb24odCxpKXt2YXIgbz1pPHIubGVuZ3RoLTE7cmV0dXJuIGZ1bmN0aW9uKHQscixpLG8pe289ZnVuY3Rpb24oZSl7dmFyIHQ9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7dHx8KHQ9ITAsZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9fShvKTt2YXIgYT0hMTt0Lm9uKFwiY2xvc2VcIixmdW5jdGlvbigpe2E9ITB9KSx2b2lkIDA9PT1uJiYobj1lKFwiLi9lbmQtb2Ytc3RyZWFtXCIpKSxuKHQse3JlYWRhYmxlOnIsd3JpdGFibGU6aX0sZnVuY3Rpb24oZSl7aWYoZSlyZXR1cm4gbyhlKTthPSEwLG8oKX0pO3ZhciBsPSExO3JldHVybiBmdW5jdGlvbihlKXtpZighYSYmIWwpcmV0dXJuIGw9ITAsZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2V0SGVhZGVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmFib3J0fSh0KT90LmFib3J0KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgdC5kZXN0cm95P3QuZGVzdHJveSgpOnZvaWQgbyhlfHxuZXcgcyhcInBpcGVcIikpfX0odCxvLGk+MCxmdW5jdGlvbihlKXtjfHwoYz1lKSxlJiZmLmZvckVhY2gobCksb3x8KGYuZm9yRWFjaChsKSxoKGMpKX0pfSk7cmV0dXJuIHIucmVkdWNlKHUpfX0se1wiLi4vLi4vLi4vZXJyb3JzXCI6NTUsXCIuL2VuZC1vZi1zdHJlYW1cIjo2NH1dLDY3OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4uLy4uLy4uL2Vycm9yc1wiKS5jb2Rlcy5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7dC5leHBvcnRzPXtnZXRIaWdoV2F0ZXJNYXJrOmZ1bmN0aW9uKGUsdCxyLGkpe3ZhciBvPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbnVsbCE9ZS5oaWdoV2F0ZXJNYXJrP2UuaGlnaFdhdGVyTWFyazp0P2Vbcl06bnVsbH0odCxpLHIpO2lmKG51bGwhPW8pe2lmKCFpc0Zpbml0ZShvKXx8TWF0aC5mbG9vcihvKSE9PW98fG88MCl0aHJvdyBuZXcgbihpP3I6XCJoaWdoV2F0ZXJNYXJrXCIsbyk7cmV0dXJuIE1hdGguZmxvb3Iobyl9cmV0dXJuIGUub2JqZWN0TW9kZT8xNjoxNjM4NH19fSx7XCIuLi8uLi8uLi9lcnJvcnNcIjo1NX1dLDY4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoXCJldmVudHNcIikuRXZlbnRFbWl0dGVyfSx7ZXZlbnRzOjIyfV0sNjk6W2Z1bmN0aW9uKGUsdCxyKXsocj10LmV4cG9ydHM9ZShcIi4vbGliL19zdHJlYW1fcmVhZGFibGUuanNcIikpLlN0cmVhbT1yLHIuUmVhZGFibGU9cixyLldyaXRhYmxlPWUoXCIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCIpLHIuRHVwbGV4PWUoXCIuL2xpYi9fc3RyZWFtX2R1cGxleC5qc1wiKSxyLlRyYW5zZm9ybT1lKFwiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanNcIiksci5QYXNzVGhyb3VnaD1lKFwiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qc1wiKSxyLmZpbmlzaGVkPWUoXCIuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanNcIiksci5waXBlbGluZT1lKFwiLi9saWIvaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZS5qc1wiKX0se1wiLi9saWIvX3N0cmVhbV9kdXBsZXguanNcIjo1NixcIi4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanNcIjo1NyxcIi4vbGliL19zdHJlYW1fcmVhZGFibGUuanNcIjo1OCxcIi4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzXCI6NTksXCIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCI6NjAsXCIuL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanNcIjo2NCxcIi4vbGliL2ludGVybmFsL3N0cmVhbXMvcGlwZWxpbmUuanNcIjo2Nn1dLDcwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYXJndW1lbnRzWzBdKXRocm93IG5ldyBFcnJvcihcImNhbGxiYWNrIG5lZWRlZFwiKTtpZihcIm51bWJlclwiIT10eXBlb2YgYXJndW1lbnRzWzFdKXRocm93IG5ldyBFcnJvcihcImludGVydmFsIG5lZWRlZFwiKTt2YXIgZTtpZihhcmd1bWVudHMubGVuZ3RoPjApe2U9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMik7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdCsyXX1yZXR1cm4gbmV3IGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzO3RoaXMuX2NhbGxiYWNrPWUsdGhpcy5fYXJncz1yLHRoaXMuX2ludGVydmFsPXNldEludGVydmFsKGUsdCx0aGlzLl9hcmdzKSx0aGlzLnJlc2NoZWR1bGU9ZnVuY3Rpb24oZSl7ZXx8KGU9bi5faW50ZXJ2YWwpLG4uX2ludGVydmFsJiZjbGVhckludGVydmFsKG4uX2ludGVydmFsKSxuLl9pbnRlcnZhbD1zZXRJbnRlcnZhbChuLl9jYWxsYmFjayxlLG4uX2FyZ3MpfSx0aGlzLmNsZWFyPWZ1bmN0aW9uKCl7bi5faW50ZXJ2YWwmJihjbGVhckludGVydmFsKG4uX2ludGVydmFsKSxuLl9pbnRlcnZhbD12b2lkIDApfSx0aGlzLmRlc3Ryb3k9ZnVuY3Rpb24oKXtuLl9pbnRlcnZhbCYmY2xlYXJJbnRlcnZhbChuLl9pbnRlcnZhbCksbi5fY2FsbGJhY2s9dm9pZCAwLG4uX2ludGVydmFsPXZvaWQgMCxuLl9hcmdzPXZvaWQgMH19KGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0sZSl9fSx7fV0sNzE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZShcIi4vaW5kZXguanNcIikoKX0se1wiLi9pbmRleC5qc1wiOjcyfV0sNzI6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSl7KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGU/ZS5mcm9tKHQpOm5ldyB0LmNvbnN0cnVjdG9yKHQuYnVmZmVyLnNsaWNlKCksdC5ieXRlT2Zmc2V0LHQubGVuZ3RoKX10LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuKGU9ZXx8e30pLmNpcmNsZXM/ZnVuY3Rpb24oZSl7dmFyIHQ9W10sbj1bXTtyZXR1cm4gZS5wcm90bz9mdW5jdGlvbiBlKG8pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBvfHxudWxsPT09bylyZXR1cm4gbztpZihvIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUobyk7aWYoQXJyYXkuaXNBcnJheShvKSlyZXR1cm4gaShvLGUpO2lmKG8gaW5zdGFuY2VvZiBNYXApcmV0dXJuIG5ldyBNYXAoaShBcnJheS5mcm9tKG8pLGUpKTtpZihvIGluc3RhbmNlb2YgU2V0KXJldHVybiBuZXcgU2V0KGkoQXJyYXkuZnJvbShvKSxlKSk7dmFyIHM9e307Zm9yKHZhciBhIGluIHQucHVzaChvKSxuLnB1c2gocyksbyl7dmFyIGw9b1thXTtpZihcIm9iamVjdFwiIT10eXBlb2YgbHx8bnVsbD09PWwpc1thXT1sO2Vsc2UgaWYobCBpbnN0YW5jZW9mIERhdGUpc1thXT1uZXcgRGF0ZShsKTtlbHNlIGlmKGwgaW5zdGFuY2VvZiBNYXApc1thXT1uZXcgTWFwKGkoQXJyYXkuZnJvbShsKSxlKSk7ZWxzZSBpZihsIGluc3RhbmNlb2YgU2V0KXNbYV09bmV3IFNldChpKEFycmF5LmZyb20obCksZSkpO2Vsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KGwpKXNbYV09cihsKTtlbHNle3ZhciB1PXQuaW5kZXhPZihsKTtzW2FdPS0xIT09dT9uW3VdOmUobCl9fXJldHVybiB0LnBvcCgpLG4ucG9wKCksc306ZnVuY3Rpb24gZShvKXtpZihcIm9iamVjdFwiIT10eXBlb2Ygb3x8bnVsbD09PW8pcmV0dXJuIG87aWYobyBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKG8pO2lmKEFycmF5LmlzQXJyYXkobykpcmV0dXJuIGkobyxlKTtpZihvIGluc3RhbmNlb2YgTWFwKXJldHVybiBuZXcgTWFwKGkoQXJyYXkuZnJvbShvKSxlKSk7aWYobyBpbnN0YW5jZW9mIFNldClyZXR1cm4gbmV3IFNldChpKEFycmF5LmZyb20obyksZSkpO3ZhciBzPXt9O2Zvcih2YXIgYSBpbiB0LnB1c2gobyksbi5wdXNoKHMpLG8paWYoITEhPT1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChvLGEpKXt2YXIgbD1vW2FdO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBsfHxudWxsPT09bClzW2FdPWw7ZWxzZSBpZihsIGluc3RhbmNlb2YgRGF0ZSlzW2FdPW5ldyBEYXRlKGwpO2Vsc2UgaWYobCBpbnN0YW5jZW9mIE1hcClzW2FdPW5ldyBNYXAoaShBcnJheS5mcm9tKGwpLGUpKTtlbHNlIGlmKGwgaW5zdGFuY2VvZiBTZXQpc1thXT1uZXcgU2V0KGkoQXJyYXkuZnJvbShsKSxlKSk7ZWxzZSBpZihBcnJheUJ1ZmZlci5pc1ZpZXcobCkpc1thXT1yKGwpO2Vsc2V7dmFyIHU9dC5pbmRleE9mKGwpO3NbYV09LTEhPT11P25bdV06ZShsKX19cmV0dXJuIHQucG9wKCksbi5wb3AoKSxzfTtmdW5jdGlvbiBpKGUsaSl7Zm9yKHZhciBvPU9iamVjdC5rZXlzKGUpLHM9bmV3IEFycmF5KG8ubGVuZ3RoKSxhPTA7YTxvLmxlbmd0aDthKyspe3ZhciBsPW9bYV0sdT1lW2xdO2lmKFwib2JqZWN0XCIhPXR5cGVvZiB1fHxudWxsPT09dSlzW2xdPXU7ZWxzZSBpZih1IGluc3RhbmNlb2YgRGF0ZSlzW2xdPW5ldyBEYXRlKHUpO2Vsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KHUpKXNbbF09cih1KTtlbHNle3ZhciBjPXQuaW5kZXhPZih1KTtzW2xdPS0xIT09Yz9uW2NdOmkodSl9fXJldHVybiBzfX0oZSk6ZS5wcm90bz9mdW5jdGlvbiBlKG4pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBufHxudWxsPT09bilyZXR1cm4gbjtpZihuIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUobik7aWYoQXJyYXkuaXNBcnJheShuKSlyZXR1cm4gdChuLGUpO2lmKG4gaW5zdGFuY2VvZiBNYXApcmV0dXJuIG5ldyBNYXAodChBcnJheS5mcm9tKG4pLGUpKTtpZihuIGluc3RhbmNlb2YgU2V0KXJldHVybiBuZXcgU2V0KHQoQXJyYXkuZnJvbShuKSxlKSk7dmFyIGk9e307Zm9yKHZhciBvIGluIG4pe3ZhciBzPW5bb107XCJvYmplY3RcIiE9dHlwZW9mIHN8fG51bGw9PT1zP2lbb109czpzIGluc3RhbmNlb2YgRGF0ZT9pW29dPW5ldyBEYXRlKHMpOnMgaW5zdGFuY2VvZiBNYXA/aVtvXT1uZXcgTWFwKHQoQXJyYXkuZnJvbShzKSxlKSk6cyBpbnN0YW5jZW9mIFNldD9pW29dPW5ldyBTZXQodChBcnJheS5mcm9tKHMpLGUpKTpBcnJheUJ1ZmZlci5pc1ZpZXcocyk/aVtvXT1yKHMpOmlbb109ZShzKX1yZXR1cm4gaX06ZnVuY3Rpb24gZShuKXtpZihcIm9iamVjdFwiIT10eXBlb2Ygbnx8bnVsbD09PW4pcmV0dXJuIG47aWYobiBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKG4pO2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIHQobixlKTtpZihuIGluc3RhbmNlb2YgTWFwKXJldHVybiBuZXcgTWFwKHQoQXJyYXkuZnJvbShuKSxlKSk7aWYobiBpbnN0YW5jZW9mIFNldClyZXR1cm4gbmV3IFNldCh0KEFycmF5LmZyb20obiksZSkpO3ZhciBpPXt9O2Zvcih2YXIgbyBpbiBuKWlmKCExIT09T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobixvKSl7dmFyIHM9bltvXTtcIm9iamVjdFwiIT10eXBlb2Ygc3x8bnVsbD09PXM/aVtvXT1zOnMgaW5zdGFuY2VvZiBEYXRlP2lbb109bmV3IERhdGUocyk6cyBpbnN0YW5jZW9mIE1hcD9pW29dPW5ldyBNYXAodChBcnJheS5mcm9tKHMpLGUpKTpzIGluc3RhbmNlb2YgU2V0P2lbb109bmV3IFNldCh0KEFycmF5LmZyb20ocyksZSkpOkFycmF5QnVmZmVyLmlzVmlldyhzKT9pW29dPXIocyk6aVtvXT1lKHMpfXJldHVybiBpfTtmdW5jdGlvbiB0KGUsdCl7Zm9yKHZhciBuPU9iamVjdC5rZXlzKGUpLGk9bmV3IEFycmF5KG4ubGVuZ3RoKSxvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBzPW5bb10sYT1lW3NdO1wib2JqZWN0XCIhPXR5cGVvZiBhfHxudWxsPT09YT9pW3NdPWE6YSBpbnN0YW5jZW9mIERhdGU/aVtzXT1uZXcgRGF0ZShhKTpBcnJheUJ1ZmZlci5pc1ZpZXcoYSk/aVtzXT1yKGEpOmlbc109dChhKX1yZXR1cm4gaX19fSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtidWZmZXI6MTd9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCJidWZmZXJcIiksaT1uLkJ1ZmZlcjtmdW5jdGlvbiBvKGUsdCl7Zm9yKHZhciByIGluIGUpdFtyXT1lW3JdfWZ1bmN0aW9uIHMoZSx0LHIpe3JldHVybiBpKGUsdCxyKX1pLmZyb20mJmkuYWxsb2MmJmkuYWxsb2NVbnNhZmUmJmkuYWxsb2NVbnNhZmVTbG93P3QuZXhwb3J0cz1uOihvKG4sciksci5CdWZmZXI9cykscy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSksbyhpLHMpLHMuZnJvbT1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyXCIpO3JldHVybiBpKGUsdCxyKX0scy5hbGxvYz1mdW5jdGlvbihlLHQscil7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7dmFyIG49aShlKTtyZXR1cm4gdm9pZCAwIT09dD9cInN0cmluZ1wiPT10eXBlb2Ygcj9uLmZpbGwodCxyKTpuLmZpbGwodCk6bi5maWxsKDApLG59LHMuYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7cmV0dXJuIGkoZSl9LHMuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyXCIpO3JldHVybiBuLlNsb3dCdWZmZXIoZSl9fSx7YnVmZmVyOjE3fV0sNzQ6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gdD90Lm9iamVjdE1vZGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlLl9kdXBsZXhTdGF0ZT9lLnJlYWQoKTplLnJlYWQoKHI9dCxyLmJ1ZmZlci5sZW5ndGg/ci5idWZmZXIuaGVhZD9yLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoOnIuYnVmZmVyWzBdLmxlbmd0aDpyLmxlbmd0aCkpOm51bGw7dmFyIHJ9fSx7fV0sNzU6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwic2FmZS1idWZmZXJcIikuQnVmZmVyLGk9bi5pc0VuY29kaW5nfHxmdW5jdGlvbihlKXtzd2l0Y2goKGU9XCJcIitlKSYmZS50b0xvd2VyQ2FzZSgpKXtjYXNlXCJoZXhcIjpjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImJpbmFyeVwiOmNhc2VcImJhc2U2NFwiOmNhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOmNhc2VcInJhd1wiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fTtmdW5jdGlvbiBvKGUpe3ZhciB0O3N3aXRjaCh0aGlzLmVuY29kaW5nPWZ1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKGUpe2lmKCFlKXJldHVyblwidXRmOFwiO2Zvcih2YXIgdDs7KXN3aXRjaChlKXtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm5cInV0ZjhcIjtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm5cInV0ZjE2bGVcIjtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm5cImxhdGluMVwiO2Nhc2VcImJhc2U2NFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwiaGV4XCI6cmV0dXJuIGU7ZGVmYXVsdDppZih0KXJldHVybjtlPShcIlwiK2UpLnRvTG93ZXJDYXNlKCksdD0hMH19KGUpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0JiYobi5pc0VuY29kaW5nPT09aXx8IWkoZSkpKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2UpO3JldHVybiB0fHxlfShlKSx0aGlzLmVuY29kaW5nKXtjYXNlXCJ1dGYxNmxlXCI6dGhpcy50ZXh0PWwsdGhpcy5lbmQ9dSx0PTQ7YnJlYWs7Y2FzZVwidXRmOFwiOnRoaXMuZmlsbExhc3Q9YSx0PTQ7YnJlYWs7Y2FzZVwiYmFzZTY0XCI6dGhpcy50ZXh0PWMsdGhpcy5lbmQ9aCx0PTM7YnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy53cml0ZT1mLHZvaWQodGhpcy5lbmQ9cCl9dGhpcy5sYXN0TmVlZD0wLHRoaXMubGFzdFRvdGFsPTAsdGhpcy5sYXN0Q2hhcj1uLmFsbG9jVW5zYWZlKHQpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuIGU8PTEyNz8wOmU+PjU9PTY/MjplPj40PT0xND8zOmU+PjM9PTMwPzQ6ZT4+Nj09Mj8tMTotMn1mdW5jdGlvbiBhKGUpe3ZhciB0PXRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQscj1mdW5jdGlvbihlLHQscil7aWYoMTI4IT0oMTkyJnRbMF0pKXJldHVybiBlLmxhc3ROZWVkPTAsXCLvv71cIjtpZihlLmxhc3ROZWVkPjEmJnQubGVuZ3RoPjEpe2lmKDEyOCE9KDE5MiZ0WzFdKSlyZXR1cm4gZS5sYXN0TmVlZD0xLFwi77+9XCI7aWYoZS5sYXN0TmVlZD4yJiZ0Lmxlbmd0aD4yJiYxMjghPSgxOTImdFsyXSkpcmV0dXJuIGUubGFzdE5lZWQ9MixcIu+/vVwifX0odGhpcyxlKTtyZXR1cm4gdm9pZCAwIT09cj9yOnRoaXMubGFzdE5lZWQ8PWUubGVuZ3RoPyhlLmNvcHkodGhpcy5sYXN0Q2hhcix0LDAsdGhpcy5sYXN0TmVlZCksdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLDAsdGhpcy5sYXN0VG90YWwpKTooZS5jb3B5KHRoaXMubGFzdENoYXIsdCwwLGUubGVuZ3RoKSx2b2lkKHRoaXMubGFzdE5lZWQtPWUubGVuZ3RoKSl9ZnVuY3Rpb24gbChlLHQpe2lmKChlLmxlbmd0aC10KSUyPT0wKXt2YXIgcj1lLnRvU3RyaW5nKFwidXRmMTZsZVwiLHQpO2lmKHIpe3ZhciBuPXIuY2hhckNvZGVBdChyLmxlbmd0aC0xKTtpZihuPj01NTI5NiYmbjw9NTYzMTkpcmV0dXJuIHRoaXMubGFzdE5lZWQ9Mix0aGlzLmxhc3RUb3RhbD00LHRoaXMubGFzdENoYXJbMF09ZVtlLmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPWVbZS5sZW5ndGgtMV0sci5zbGljZSgwLC0xKX1yZXR1cm4gcn1yZXR1cm4gdGhpcy5sYXN0TmVlZD0xLHRoaXMubGFzdFRvdGFsPTIsdGhpcy5sYXN0Q2hhclswXT1lW2UubGVuZ3RoLTFdLGUudG9TdHJpbmcoXCJ1dGYxNmxlXCIsdCxlLmxlbmd0aC0xKX1mdW5jdGlvbiB1KGUpe3ZhciB0PWUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIjtpZih0aGlzLmxhc3ROZWVkKXt2YXIgcj10aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkO3JldHVybiB0K3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJ1dGYxNmxlXCIsMCxyKX1yZXR1cm4gdH1mdW5jdGlvbiBjKGUsdCl7dmFyIHI9KGUubGVuZ3RoLXQpJTM7cmV0dXJuIDA9PT1yP2UudG9TdHJpbmcoXCJiYXNlNjRcIix0KToodGhpcy5sYXN0TmVlZD0zLXIsdGhpcy5sYXN0VG90YWw9MywxPT09cj90aGlzLmxhc3RDaGFyWzBdPWVbZS5sZW5ndGgtMV06KHRoaXMubGFzdENoYXJbMF09ZVtlLmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPWVbZS5sZW5ndGgtMV0pLGUudG9TdHJpbmcoXCJiYXNlNjRcIix0LGUubGVuZ3RoLXIpKX1mdW5jdGlvbiBoKGUpe3ZhciB0PWUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIjtyZXR1cm4gdGhpcy5sYXN0TmVlZD90K3RoaXMubGFzdENoYXIudG9TdHJpbmcoXCJiYXNlNjRcIiwwLDMtdGhpcy5sYXN0TmVlZCk6dH1mdW5jdGlvbiBmKGUpe3JldHVybiBlLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpfWZ1bmN0aW9uIHAoZSl7cmV0dXJuIGUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIn1yLlN0cmluZ0RlY29kZXI9byxvLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihlKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuXCJcIjt2YXIgdCxyO2lmKHRoaXMubGFzdE5lZWQpe2lmKHZvaWQgMD09PSh0PXRoaXMuZmlsbExhc3QoZSkpKXJldHVyblwiXCI7cj10aGlzLmxhc3ROZWVkLHRoaXMubGFzdE5lZWQ9MH1lbHNlIHI9MDtyZXR1cm4gcjxlLmxlbmd0aD90P3QrdGhpcy50ZXh0KGUscik6dGhpcy50ZXh0KGUscik6dHx8XCJcIn0sby5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUubGVuZ3RoP3RoaXMud3JpdGUoZSk6XCJcIjtyZXR1cm4gdGhpcy5sYXN0TmVlZD90K1wi77+9XCI6dH0sby5wcm90b3R5cGUudGV4dD1mdW5jdGlvbihlLHQpe3ZhciByPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10Lmxlbmd0aC0xO2lmKG48cilyZXR1cm4gMDt2YXIgaT1zKHRbbl0pO2lmKGk+PTApcmV0dXJuIGk+MCYmKGUubGFzdE5lZWQ9aS0xKSxpO2lmKC0tbjxyfHwtMj09PWkpcmV0dXJuIDA7aWYoKGk9cyh0W25dKSk+PTApcmV0dXJuIGk+MCYmKGUubGFzdE5lZWQ9aS0yKSxpO2lmKC0tbjxyfHwtMj09PWkpcmV0dXJuIDA7aWYoKGk9cyh0W25dKSk+PTApcmV0dXJuIGk+MCYmKDI9PT1pP2k9MDplLmxhc3ROZWVkPWktMyksaTtyZXR1cm4gMH0odGhpcyxlLHQpO2lmKCF0aGlzLmxhc3ROZWVkKXJldHVybiBlLnRvU3RyaW5nKFwidXRmOFwiLHQpO3RoaXMubGFzdFRvdGFsPXI7dmFyIG49ZS5sZW5ndGgtKHItdGhpcy5sYXN0TmVlZCk7cmV0dXJuIGUuY29weSh0aGlzLmxhc3RDaGFyLDAsbiksZS50b1N0cmluZyhcInV0ZjhcIix0LG4pfSxvLnByb3RvdHlwZS5maWxsTGFzdD1mdW5jdGlvbihlKXtpZih0aGlzLmxhc3ROZWVkPD1lLmxlbmd0aClyZXR1cm4gZS5jb3B5KHRoaXMubGFzdENoYXIsdGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCwwLHRoaXMubGFzdE5lZWQpLHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywwLHRoaXMubGFzdFRvdGFsKTtlLmNvcHkodGhpcy5sYXN0Q2hhcix0aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLDAsZS5sZW5ndGgpLHRoaXMubGFzdE5lZWQtPWUubGVuZ3RofX0se1wic2FmZS1idWZmZXJcIjo3M31dLDc2OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcInB1bnljb2RlXCIpLGk9ZShcIi4vdXRpbFwiKTtmdW5jdGlvbiBvKCl7dGhpcy5wcm90b2NvbD1udWxsLHRoaXMuc2xhc2hlcz1udWxsLHRoaXMuYXV0aD1udWxsLHRoaXMuaG9zdD1udWxsLHRoaXMucG9ydD1udWxsLHRoaXMuaG9zdG5hbWU9bnVsbCx0aGlzLmhhc2g9bnVsbCx0aGlzLnNlYXJjaD1udWxsLHRoaXMucXVlcnk9bnVsbCx0aGlzLnBhdGhuYW1lPW51bGwsdGhpcy5wYXRoPW51bGwsdGhpcy5ocmVmPW51bGx9ci5wYXJzZT12LHIucmVzb2x2ZT1mdW5jdGlvbihlLHQpe3JldHVybiB2KGUsITEsITApLnJlc29sdmUodCl9LHIucmVzb2x2ZU9iamVjdD1mdW5jdGlvbihlLHQpe3JldHVybiBlP3YoZSwhMSwhMCkucmVzb2x2ZU9iamVjdCh0KTp0fSxyLmZvcm1hdD1mdW5jdGlvbihlKXtpLmlzU3RyaW5nKGUpJiYoZT12KGUpKTtyZXR1cm4gZSBpbnN0YW5jZW9mIG8/ZS5mb3JtYXQoKTpvLnByb3RvdHlwZS5mb3JtYXQuY2FsbChlKX0sci5Vcmw9bzt2YXIgcz0vXihbYS16MC05ListXSs6KS9pLGE9LzpbMC05XSokLyxsPS9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sdT1bXCJ7XCIsXCJ9XCIsXCJ8XCIsXCJcXFxcXCIsXCJeXCIsXCJgXCJdLmNvbmNhdChbXCI8XCIsXCI+XCIsJ1wiJyxcImBcIixcIiBcIixcIlxcclwiLFwiXFxuXCIsXCJcXHRcIl0pLGM9W1wiJ1wiXS5jb25jYXQodSksaD1bXCIlXCIsXCIvXCIsXCI/XCIsXCI7XCIsXCIjXCJdLmNvbmNhdChjKSxmPVtcIi9cIixcIj9cIixcIiNcIl0scD0vXlsrYS16MC05QS1aXy1dezAsNjN9JC8sZD0vXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sZz17amF2YXNjcmlwdDohMCxcImphdmFzY3JpcHQ6XCI6ITB9LHk9e2phdmFzY3JpcHQ6ITAsXCJqYXZhc2NyaXB0OlwiOiEwfSxiPXtodHRwOiEwLGh0dHBzOiEwLGZ0cDohMCxnb3BoZXI6ITAsZmlsZTohMCxcImh0dHA6XCI6ITAsXCJodHRwczpcIjohMCxcImZ0cDpcIjohMCxcImdvcGhlcjpcIjohMCxcImZpbGU6XCI6ITB9LG09ZShcInF1ZXJ5c3RyaW5nXCIpO2Z1bmN0aW9uIHYoZSx0LHIpe2lmKGUmJmkuaXNPYmplY3QoZSkmJmUgaW5zdGFuY2VvZiBvKXJldHVybiBlO3ZhciBuPW5ldyBvO3JldHVybiBuLnBhcnNlKGUsdCxyKSxufW8ucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUsdCxyKXtpZighaS5pc1N0cmluZyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCBcIit0eXBlb2YgZSk7dmFyIG89ZS5pbmRleE9mKFwiP1wiKSxhPS0xIT09byYmbzxlLmluZGV4T2YoXCIjXCIpP1wiP1wiOlwiI1wiLHU9ZS5zcGxpdChhKTt1WzBdPXVbMF0ucmVwbGFjZSgvXFxcXC9nLFwiL1wiKTt2YXIgdj1lPXUuam9pbihhKTtpZih2PXYudHJpbSgpLCFyJiYxPT09ZS5zcGxpdChcIiNcIikubGVuZ3RoKXt2YXIgdz1sLmV4ZWModik7aWYodylyZXR1cm4gdGhpcy5wYXRoPXYsdGhpcy5ocmVmPXYsdGhpcy5wYXRobmFtZT13WzFdLHdbMl0/KHRoaXMuc2VhcmNoPXdbMl0sdGhpcy5xdWVyeT10P20ucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTp0aGlzLnNlYXJjaC5zdWJzdHIoMSkpOnQmJih0aGlzLnNlYXJjaD1cIlwiLHRoaXMucXVlcnk9e30pLHRoaXN9dmFyIF89cy5leGVjKHYpO2lmKF8pe3ZhciBrPShfPV9bMF0pLnRvTG93ZXJDYXNlKCk7dGhpcy5wcm90b2NvbD1rLHY9di5zdWJzdHIoXy5sZW5ndGgpfWlmKHJ8fF98fHYubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKXt2YXIgUz1cIi8vXCI9PT12LnN1YnN0cigwLDIpOyFTfHxfJiZ5W19dfHwodj12LnN1YnN0cigyKSx0aGlzLnNsYXNoZXM9ITApfWlmKCF5W19dJiYoU3x8XyYmIWJbX10pKXtmb3IodmFyIEUsQyxUPS0xLHg9MDt4PGYubGVuZ3RoO3grKyl7LTEhPT0oQT12LmluZGV4T2YoZlt4XSkpJiYoLTE9PT1UfHxBPFQpJiYoVD1BKX0tMSE9PShDPS0xPT09VD92Lmxhc3RJbmRleE9mKFwiQFwiKTp2Lmxhc3RJbmRleE9mKFwiQFwiLFQpKSYmKEU9di5zbGljZSgwLEMpLHY9di5zbGljZShDKzEpLHRoaXMuYXV0aD1kZWNvZGVVUklDb21wb25lbnQoRSkpLFQ9LTE7Zm9yKHg9MDt4PGgubGVuZ3RoO3grKyl7dmFyIEE7LTEhPT0oQT12LmluZGV4T2YoaFt4XSkpJiYoLTE9PT1UfHxBPFQpJiYoVD1BKX0tMT09PVQmJihUPXYubGVuZ3RoKSx0aGlzLmhvc3Q9di5zbGljZSgwLFQpLHY9di5zbGljZShUKSx0aGlzLnBhcnNlSG9zdCgpLHRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZXx8XCJcIjt2YXIgST1cIltcIj09PXRoaXMuaG9zdG5hbWVbMF0mJlwiXVwiPT09dGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aC0xXTtpZighSSlmb3IodmFyIFA9dGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyksTz0oeD0wLFAubGVuZ3RoKTt4PE87eCsrKXt2YXIgQj1QW3hdO2lmKEImJiFCLm1hdGNoKHApKXtmb3IodmFyIFI9XCJcIixNPTAsTj1CLmxlbmd0aDtNPE47TSsrKUIuY2hhckNvZGVBdChNKT4xMjc/Uis9XCJ4XCI6Uis9QltNXTtpZighUi5tYXRjaChwKSl7dmFyIEw9UC5zbGljZSgwLHgpLGo9UC5zbGljZSh4KzEpLFU9Qi5tYXRjaChkKTtVJiYoTC5wdXNoKFVbMV0pLGoudW5zaGlmdChVWzJdKSksai5sZW5ndGgmJih2PVwiL1wiK2ouam9pbihcIi5cIikrdiksdGhpcy5ob3N0bmFtZT1MLmpvaW4oXCIuXCIpO2JyZWFrfX19dGhpcy5ob3N0bmFtZS5sZW5ndGg+MjU1P3RoaXMuaG9zdG5hbWU9XCJcIjp0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKSxJfHwodGhpcy5ob3N0bmFtZT1uLnRvQVNDSUkodGhpcy5ob3N0bmFtZSkpO3ZhciBxPXRoaXMucG9ydD9cIjpcIit0aGlzLnBvcnQ6XCJcIixEPXRoaXMuaG9zdG5hbWV8fFwiXCI7dGhpcy5ob3N0PUQrcSx0aGlzLmhyZWYrPXRoaXMuaG9zdCxJJiYodGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lLnN1YnN0cigxLHRoaXMuaG9zdG5hbWUubGVuZ3RoLTIpLFwiL1wiIT09dlswXSYmKHY9XCIvXCIrdikpfWlmKCFnW2tdKWZvcih4PTAsTz1jLmxlbmd0aDt4PE87eCsrKXt2YXIgej1jW3hdO2lmKC0xIT09di5pbmRleE9mKHopKXt2YXIgRj1lbmNvZGVVUklDb21wb25lbnQoeik7Rj09PXomJihGPWVzY2FwZSh6KSksdj12LnNwbGl0KHopLmpvaW4oRil9fXZhciBWPXYuaW5kZXhPZihcIiNcIik7LTEhPT1WJiYodGhpcy5oYXNoPXYuc3Vic3RyKFYpLHY9di5zbGljZSgwLFYpKTt2YXIgSD12LmluZGV4T2YoXCI/XCIpO2lmKC0xIT09SD8odGhpcy5zZWFyY2g9di5zdWJzdHIoSCksdGhpcy5xdWVyeT12LnN1YnN0cihIKzEpLHQmJih0aGlzLnF1ZXJ5PW0ucGFyc2UodGhpcy5xdWVyeSkpLHY9di5zbGljZSgwLEgpKTp0JiYodGhpcy5zZWFyY2g9XCJcIix0aGlzLnF1ZXJ5PXt9KSx2JiYodGhpcy5wYXRobmFtZT12KSxiW2tdJiZ0aGlzLmhvc3RuYW1lJiYhdGhpcy5wYXRobmFtZSYmKHRoaXMucGF0aG5hbWU9XCIvXCIpLHRoaXMucGF0aG5hbWV8fHRoaXMuc2VhcmNoKXtxPXRoaXMucGF0aG5hbWV8fFwiXCI7dmFyIFc9dGhpcy5zZWFyY2h8fFwiXCI7dGhpcy5wYXRoPXErV31yZXR1cm4gdGhpcy5ocmVmPXRoaXMuZm9ybWF0KCksdGhpc30sby5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5hdXRofHxcIlwiO2UmJihlPShlPWVuY29kZVVSSUNvbXBvbmVudChlKSkucmVwbGFjZSgvJTNBL2ksXCI6XCIpLGUrPVwiQFwiKTt2YXIgdD10aGlzLnByb3RvY29sfHxcIlwiLHI9dGhpcy5wYXRobmFtZXx8XCJcIixuPXRoaXMuaGFzaHx8XCJcIixvPSExLHM9XCJcIjt0aGlzLmhvc3Q/bz1lK3RoaXMuaG9zdDp0aGlzLmhvc3RuYW1lJiYobz1lKygtMT09PXRoaXMuaG9zdG5hbWUuaW5kZXhPZihcIjpcIik/dGhpcy5ob3N0bmFtZTpcIltcIit0aGlzLmhvc3RuYW1lK1wiXVwiKSx0aGlzLnBvcnQmJihvKz1cIjpcIit0aGlzLnBvcnQpKSx0aGlzLnF1ZXJ5JiZpLmlzT2JqZWN0KHRoaXMucXVlcnkpJiZPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgmJihzPW0uc3RyaW5naWZ5KHRoaXMucXVlcnkpKTt2YXIgYT10aGlzLnNlYXJjaHx8cyYmXCI/XCIrc3x8XCJcIjtyZXR1cm4gdCYmXCI6XCIhPT10LnN1YnN0cigtMSkmJih0Kz1cIjpcIiksdGhpcy5zbGFzaGVzfHwoIXR8fGJbdF0pJiYhMSE9PW8/KG89XCIvL1wiKyhvfHxcIlwiKSxyJiZcIi9cIiE9PXIuY2hhckF0KDApJiYocj1cIi9cIityKSk6b3x8KG89XCJcIiksbiYmXCIjXCIhPT1uLmNoYXJBdCgwKSYmKG49XCIjXCIrbiksYSYmXCI/XCIhPT1hLmNoYXJBdCgwKSYmKGE9XCI/XCIrYSksdCtvKyhyPXIucmVwbGFjZSgvWz8jXS9nLGZ1bmN0aW9uKGUpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSl9KSkrKGE9YS5yZXBsYWNlKFwiI1wiLFwiJTIzXCIpKStufSxvLnByb3RvdHlwZS5yZXNvbHZlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlc29sdmVPYmplY3QodihlLCExLCEwKSkuZm9ybWF0KCl9LG8ucHJvdG90eXBlLnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24oZSl7aWYoaS5pc1N0cmluZyhlKSl7dmFyIHQ9bmV3IG87dC5wYXJzZShlLCExLCEwKSxlPXR9Zm9yKHZhciByPW5ldyBvLG49T2JqZWN0LmtleXModGhpcykscz0wO3M8bi5sZW5ndGg7cysrKXt2YXIgYT1uW3NdO3JbYV09dGhpc1thXX1pZihyLmhhc2g9ZS5oYXNoLFwiXCI9PT1lLmhyZWYpcmV0dXJuIHIuaHJlZj1yLmZvcm1hdCgpLHI7aWYoZS5zbGFzaGVzJiYhZS5wcm90b2NvbCl7Zm9yKHZhciBsPU9iamVjdC5rZXlzKGUpLHU9MDt1PGwubGVuZ3RoO3UrKyl7dmFyIGM9bFt1XTtcInByb3RvY29sXCIhPT1jJiYocltjXT1lW2NdKX1yZXR1cm4gYltyLnByb3RvY29sXSYmci5ob3N0bmFtZSYmIXIucGF0aG5hbWUmJihyLnBhdGg9ci5wYXRobmFtZT1cIi9cIiksci5ocmVmPXIuZm9ybWF0KCkscn1pZihlLnByb3RvY29sJiZlLnByb3RvY29sIT09ci5wcm90b2NvbCl7aWYoIWJbZS5wcm90b2NvbF0pe2Zvcih2YXIgaD1PYmplY3Qua2V5cyhlKSxmPTA7ZjxoLmxlbmd0aDtmKyspe3ZhciBwPWhbZl07cltwXT1lW3BdfXJldHVybiByLmhyZWY9ci5mb3JtYXQoKSxyfWlmKHIucHJvdG9jb2w9ZS5wcm90b2NvbCxlLmhvc3R8fHlbZS5wcm90b2NvbF0pci5wYXRobmFtZT1lLnBhdGhuYW1lO2Vsc2V7Zm9yKHZhciBkPShlLnBhdGhuYW1lfHxcIlwiKS5zcGxpdChcIi9cIik7ZC5sZW5ndGgmJiEoZS5ob3N0PWQuc2hpZnQoKSk7KTtlLmhvc3R8fChlLmhvc3Q9XCJcIiksZS5ob3N0bmFtZXx8KGUuaG9zdG5hbWU9XCJcIiksXCJcIiE9PWRbMF0mJmQudW5zaGlmdChcIlwiKSxkLmxlbmd0aDwyJiZkLnVuc2hpZnQoXCJcIiksci5wYXRobmFtZT1kLmpvaW4oXCIvXCIpfWlmKHIuc2VhcmNoPWUuc2VhcmNoLHIucXVlcnk9ZS5xdWVyeSxyLmhvc3Q9ZS5ob3N0fHxcIlwiLHIuYXV0aD1lLmF1dGgsci5ob3N0bmFtZT1lLmhvc3RuYW1lfHxlLmhvc3Qsci5wb3J0PWUucG9ydCxyLnBhdGhuYW1lfHxyLnNlYXJjaCl7dmFyIGc9ci5wYXRobmFtZXx8XCJcIixtPXIuc2VhcmNofHxcIlwiO3IucGF0aD1nK219cmV0dXJuIHIuc2xhc2hlcz1yLnNsYXNoZXN8fGUuc2xhc2hlcyxyLmhyZWY9ci5mb3JtYXQoKSxyfXZhciB2PXIucGF0aG5hbWUmJlwiL1wiPT09ci5wYXRobmFtZS5jaGFyQXQoMCksdz1lLmhvc3R8fGUucGF0aG5hbWUmJlwiL1wiPT09ZS5wYXRobmFtZS5jaGFyQXQoMCksXz13fHx2fHxyLmhvc3QmJmUucGF0aG5hbWUsaz1fLFM9ci5wYXRobmFtZSYmci5wYXRobmFtZS5zcGxpdChcIi9cIil8fFtdLEU9KGQ9ZS5wYXRobmFtZSYmZS5wYXRobmFtZS5zcGxpdChcIi9cIil8fFtdLHIucHJvdG9jb2wmJiFiW3IucHJvdG9jb2xdKTtpZihFJiYoci5ob3N0bmFtZT1cIlwiLHIucG9ydD1udWxsLHIuaG9zdCYmKFwiXCI9PT1TWzBdP1NbMF09ci5ob3N0OlMudW5zaGlmdChyLmhvc3QpKSxyLmhvc3Q9XCJcIixlLnByb3RvY29sJiYoZS5ob3N0bmFtZT1udWxsLGUucG9ydD1udWxsLGUuaG9zdCYmKFwiXCI9PT1kWzBdP2RbMF09ZS5ob3N0OmQudW5zaGlmdChlLmhvc3QpKSxlLmhvc3Q9bnVsbCksXz1fJiYoXCJcIj09PWRbMF18fFwiXCI9PT1TWzBdKSksdylyLmhvc3Q9ZS5ob3N0fHxcIlwiPT09ZS5ob3N0P2UuaG9zdDpyLmhvc3Qsci5ob3N0bmFtZT1lLmhvc3RuYW1lfHxcIlwiPT09ZS5ob3N0bmFtZT9lLmhvc3RuYW1lOnIuaG9zdG5hbWUsci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5LFM9ZDtlbHNlIGlmKGQubGVuZ3RoKVN8fChTPVtdKSxTLnBvcCgpLFM9Uy5jb25jYXQoZCksci5zZWFyY2g9ZS5zZWFyY2gsci5xdWVyeT1lLnF1ZXJ5O2Vsc2UgaWYoIWkuaXNOdWxsT3JVbmRlZmluZWQoZS5zZWFyY2gpKXtpZihFKXIuaG9zdG5hbWU9ci5ob3N0PVMuc2hpZnQoKSwoST0hIShyLmhvc3QmJnIuaG9zdC5pbmRleE9mKFwiQFwiKT4wKSYmci5ob3N0LnNwbGl0KFwiQFwiKSkmJihyLmF1dGg9SS5zaGlmdCgpLHIuaG9zdD1yLmhvc3RuYW1lPUkuc2hpZnQoKSk7cmV0dXJuIHIuc2VhcmNoPWUuc2VhcmNoLHIucXVlcnk9ZS5xdWVyeSxpLmlzTnVsbChyLnBhdGhuYW1lKSYmaS5pc051bGwoci5zZWFyY2gpfHwoci5wYXRoPShyLnBhdGhuYW1lP3IucGF0aG5hbWU6XCJcIikrKHIuc2VhcmNoP3Iuc2VhcmNoOlwiXCIpKSxyLmhyZWY9ci5mb3JtYXQoKSxyfWlmKCFTLmxlbmd0aClyZXR1cm4gci5wYXRobmFtZT1udWxsLHIuc2VhcmNoP3IucGF0aD1cIi9cIityLnNlYXJjaDpyLnBhdGg9bnVsbCxyLmhyZWY9ci5mb3JtYXQoKSxyO2Zvcih2YXIgQz1TLnNsaWNlKC0xKVswXSxUPShyLmhvc3R8fGUuaG9zdHx8Uy5sZW5ndGg+MSkmJihcIi5cIj09PUN8fFwiLi5cIj09PUMpfHxcIlwiPT09Qyx4PTAsQT1TLmxlbmd0aDtBPj0wO0EtLSlcIi5cIj09PShDPVNbQV0pP1Muc3BsaWNlKEEsMSk6XCIuLlwiPT09Qz8oUy5zcGxpY2UoQSwxKSx4KyspOngmJihTLnNwbGljZShBLDEpLHgtLSk7aWYoIV8mJiFrKWZvcig7eC0tO3gpUy51bnNoaWZ0KFwiLi5cIik7IV98fFwiXCI9PT1TWzBdfHxTWzBdJiZcIi9cIj09PVNbMF0uY2hhckF0KDApfHxTLnVuc2hpZnQoXCJcIiksVCYmXCIvXCIhPT1TLmpvaW4oXCIvXCIpLnN1YnN0cigtMSkmJlMucHVzaChcIlwiKTt2YXIgSSxQPVwiXCI9PT1TWzBdfHxTWzBdJiZcIi9cIj09PVNbMF0uY2hhckF0KDApO0UmJihyLmhvc3RuYW1lPXIuaG9zdD1QP1wiXCI6Uy5sZW5ndGg/Uy5zaGlmdCgpOlwiXCIsKEk9ISEoci5ob3N0JiZyLmhvc3QuaW5kZXhPZihcIkBcIik+MCkmJnIuaG9zdC5zcGxpdChcIkBcIikpJiYoci5hdXRoPUkuc2hpZnQoKSxyLmhvc3Q9ci5ob3N0bmFtZT1JLnNoaWZ0KCkpKTtyZXR1cm4oXz1ffHxyLmhvc3QmJlMubGVuZ3RoKSYmIVAmJlMudW5zaGlmdChcIlwiKSxTLmxlbmd0aD9yLnBhdGhuYW1lPVMuam9pbihcIi9cIik6KHIucGF0aG5hbWU9bnVsbCxyLnBhdGg9bnVsbCksaS5pc051bGwoci5wYXRobmFtZSkmJmkuaXNOdWxsKHIuc2VhcmNoKXx8KHIucGF0aD0oci5wYXRobmFtZT9yLnBhdGhuYW1lOlwiXCIpKyhyLnNlYXJjaD9yLnNlYXJjaDpcIlwiKSksci5hdXRoPWUuYXV0aHx8ci5hdXRoLHIuc2xhc2hlcz1yLnNsYXNoZXN8fGUuc2xhc2hlcyxyLmhyZWY9ci5mb3JtYXQoKSxyfSxvLnByb3RvdHlwZS5wYXJzZUhvc3Q9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmhvc3QsdD1hLmV4ZWMoZSk7dCYmKFwiOlwiIT09KHQ9dFswXSkmJih0aGlzLnBvcnQ9dC5zdWJzdHIoMSkpLGU9ZS5zdWJzdHIoMCxlLmxlbmd0aC10Lmxlbmd0aCkpLGUmJih0aGlzLmhvc3RuYW1lPWUpfX0se1wiLi91dGlsXCI6NzcscHVueWNvZGU6NTEscXVlcnlzdHJpbmc6NTR9XSw3NzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuZXhwb3J0cz17aXNTdHJpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LGlzT2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZX0saXNOdWxsOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0saXNOdWxsT3JVbmRlZmluZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV9fX0se31dLDc4OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUpeyhmdW5jdGlvbigpe2Z1bmN0aW9uIHIodCl7dHJ5e2lmKCFlLmxvY2FsU3RvcmFnZSlyZXR1cm4hMX1jYXRjaChlKXtyZXR1cm4hMX12YXIgcj1lLmxvY2FsU3RvcmFnZVt0XTtyZXR1cm4gbnVsbCE9ciYmXCJ0cnVlXCI9PT1TdHJpbmcocikudG9Mb3dlckNhc2UoKX10LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihyKFwibm9EZXByZWNhdGlvblwiKSlyZXR1cm4gZTt2YXIgbj0hMTtyZXR1cm4gZnVuY3Rpb24oKXtpZighbil7aWYocihcInRocm93RGVwcmVjYXRpb25cIikpdGhyb3cgbmV3IEVycm9yKHQpO3IoXCJ0cmFjZURlcHJlY2F0aW9uXCIpP2NvbnNvbGUudHJhY2UodCk6Y29uc29sZS53YXJuKHQpLG49ITB9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sNzk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24gZSh0LHIpe2lmKHQmJnIpcmV0dXJuIGUodCkocik7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwibmVlZCB3cmFwcGVyIGZ1bmN0aW9uXCIpO09iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24oZSl7bltlXT10W2VdfSk7cmV0dXJuIG47ZnVuY3Rpb24gbigpe2Zvcih2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7cisrKWVbcl09YXJndW1lbnRzW3JdO3ZhciBuPXQuYXBwbHkodGhpcyxlKSxpPWVbZS5sZW5ndGgtMV07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmbiE9PWkmJk9iamVjdC5rZXlzKGkpLmZvckVhY2goZnVuY3Rpb24oZSl7bltlXT1pW2VdfSksbn19fSx7fV0sODA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ3cyBkb2VzIG5vdCB3b3JrIGluIHRoZSBicm93c2VyLiBCcm93c2VyIGNsaWVudHMgbXVzdCB1c2UgdGhlIG5hdGl2ZSBXZWJTb2NrZXQgb2JqZWN0XCIpfX0se31dLDgxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXt9LHQ9MDt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1hcmd1bWVudHNbdF07Zm9yKHZhciBpIGluIHIpbi5jYWxsKHIsaSkmJihlW2ldPXJbaV0pfXJldHVybiBlfTt2YXIgbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5fSx7fV0sODI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7ZS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbiooKXtmb3IobGV0IGU9dGhpcy5oZWFkO2U7ZT1lLm5leHQpeWllbGQgZS52YWx1ZX19fSx7fV0sODM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3ZhciB0PXRoaXM7aWYodCBpbnN0YW5jZW9mIG58fCh0PW5ldyBuKSx0LnRhaWw9bnVsbCx0LmhlYWQ9bnVsbCx0Lmxlbmd0aD0wLGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZm9yRWFjaCllLmZvckVhY2goZnVuY3Rpb24oZSl7dC5wdXNoKGUpfSk7ZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoPjApZm9yKHZhciByPTAsaT1hcmd1bWVudHMubGVuZ3RoO3I8aTtyKyspdC5wdXNoKGFyZ3VtZW50c1tyXSk7cmV0dXJuIHR9ZnVuY3Rpb24gaShlLHQscil7dmFyIG49dD09PWUuaGVhZD9uZXcgYShyLG51bGwsdCxlKTpuZXcgYShyLHQsdC5uZXh0LGUpO3JldHVybiBudWxsPT09bi5uZXh0JiYoZS50YWlsPW4pLG51bGw9PT1uLnByZXYmJihlLmhlYWQ9biksZS5sZW5ndGgrKyxufWZ1bmN0aW9uIG8oZSx0KXtlLnRhaWw9bmV3IGEodCxlLnRhaWwsbnVsbCxlKSxlLmhlYWR8fChlLmhlYWQ9ZS50YWlsKSxlLmxlbmd0aCsrfWZ1bmN0aW9uIHMoZSx0KXtlLmhlYWQ9bmV3IGEodCxudWxsLGUuaGVhZCxlKSxlLnRhaWx8fChlLnRhaWw9ZS5oZWFkKSxlLmxlbmd0aCsrfWZ1bmN0aW9uIGEoZSx0LHIsbil7aWYoISh0aGlzIGluc3RhbmNlb2YgYSkpcmV0dXJuIG5ldyBhKGUsdCxyLG4pO3RoaXMubGlzdD1uLHRoaXMudmFsdWU9ZSx0Pyh0Lm5leHQ9dGhpcyx0aGlzLnByZXY9dCk6dGhpcy5wcmV2PW51bGwscj8oci5wcmV2PXRoaXMsdGhpcy5uZXh0PXIpOnRoaXMubmV4dD1udWxsfXQuZXhwb3J0cz1uLG4uTm9kZT1hLG4uY3JlYXRlPW4sbi5wcm90b3R5cGUucmVtb3ZlTm9kZT1mdW5jdGlvbihlKXtpZihlLmxpc3QhPT10aGlzKXRocm93IG5ldyBFcnJvcihcInJlbW92aW5nIG5vZGUgd2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoaXMgbGlzdFwiKTt2YXIgdD1lLm5leHQscj1lLnByZXY7cmV0dXJuIHQmJih0LnByZXY9ciksciYmKHIubmV4dD10KSxlPT09dGhpcy5oZWFkJiYodGhpcy5oZWFkPXQpLGU9PT10aGlzLnRhaWwmJih0aGlzLnRhaWw9ciksZS5saXN0Lmxlbmd0aC0tLGUubmV4dD1udWxsLGUucHJldj1udWxsLGUubGlzdD1udWxsLHR9LG4ucHJvdG90eXBlLnVuc2hpZnROb2RlPWZ1bmN0aW9uKGUpe2lmKGUhPT10aGlzLmhlYWQpe2UubGlzdCYmZS5saXN0LnJlbW92ZU5vZGUoZSk7dmFyIHQ9dGhpcy5oZWFkO2UubGlzdD10aGlzLGUubmV4dD10LHQmJih0LnByZXY9ZSksdGhpcy5oZWFkPWUsdGhpcy50YWlsfHwodGhpcy50YWlsPWUpLHRoaXMubGVuZ3RoKyt9fSxuLnByb3RvdHlwZS5wdXNoTm9kZT1mdW5jdGlvbihlKXtpZihlIT09dGhpcy50YWlsKXtlLmxpc3QmJmUubGlzdC5yZW1vdmVOb2RlKGUpO3ZhciB0PXRoaXMudGFpbDtlLmxpc3Q9dGhpcyxlLnByZXY9dCx0JiYodC5uZXh0PWUpLHRoaXMudGFpbD1lLHRoaXMuaGVhZHx8KHRoaXMuaGVhZD1lKSx0aGlzLmxlbmd0aCsrfX0sbi5wcm90b3R5cGUucHVzaD1mdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9YXJndW1lbnRzLmxlbmd0aDtlPHQ7ZSsrKW8odGhpcyxhcmd1bWVudHNbZV0pO3JldHVybiB0aGlzLmxlbmd0aH0sbi5wcm90b3R5cGUudW5zaGlmdD1mdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9YXJndW1lbnRzLmxlbmd0aDtlPHQ7ZSsrKXModGhpcyxhcmd1bWVudHNbZV0pO3JldHVybiB0aGlzLmxlbmd0aH0sbi5wcm90b3R5cGUucG9wPWZ1bmN0aW9uKCl7aWYodGhpcy50YWlsKXt2YXIgZT10aGlzLnRhaWwudmFsdWU7cmV0dXJuIHRoaXMudGFpbD10aGlzLnRhaWwucHJldix0aGlzLnRhaWw/dGhpcy50YWlsLm5leHQ9bnVsbDp0aGlzLmhlYWQ9bnVsbCx0aGlzLmxlbmd0aC0tLGV9fSxuLnByb3RvdHlwZS5zaGlmdD1mdW5jdGlvbigpe2lmKHRoaXMuaGVhZCl7dmFyIGU9dGhpcy5oZWFkLnZhbHVlO3JldHVybiB0aGlzLmhlYWQ9dGhpcy5oZWFkLm5leHQsdGhpcy5oZWFkP3RoaXMuaGVhZC5wcmV2PW51bGw6dGhpcy50YWlsPW51bGwsdGhpcy5sZW5ndGgtLSxlfX0sbi5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlLHQpe3Q9dHx8dGhpcztmb3IodmFyIHI9dGhpcy5oZWFkLG49MDtudWxsIT09cjtuKyspZS5jYWxsKHQsci52YWx1ZSxuLHRoaXMpLHI9ci5uZXh0fSxuLnByb3RvdHlwZS5mb3JFYWNoUmV2ZXJzZT1mdW5jdGlvbihlLHQpe3Q9dHx8dGhpcztmb3IodmFyIHI9dGhpcy50YWlsLG49dGhpcy5sZW5ndGgtMTtudWxsIT09cjtuLS0pZS5jYWxsKHQsci52YWx1ZSxuLHRoaXMpLHI9ci5wcmV2fSxuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAscj10aGlzLmhlYWQ7bnVsbCE9PXImJnQ8ZTt0Kyspcj1yLm5leHQ7aWYodD09PWUmJm51bGwhPT1yKXJldHVybiByLnZhbHVlfSxuLnByb3RvdHlwZS5nZXRSZXZlcnNlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLHI9dGhpcy50YWlsO251bGwhPT1yJiZ0PGU7dCsrKXI9ci5wcmV2O2lmKHQ9PT1lJiZudWxsIT09cilyZXR1cm4gci52YWx1ZX0sbi5wcm90b3R5cGUubWFwPWZ1bmN0aW9uKGUsdCl7dD10fHx0aGlzO2Zvcih2YXIgcj1uZXcgbixpPXRoaXMuaGVhZDtudWxsIT09aTspci5wdXNoKGUuY2FsbCh0LGkudmFsdWUsdGhpcykpLGk9aS5uZXh0O3JldHVybiByfSxuLnByb3RvdHlwZS5tYXBSZXZlcnNlPWZ1bmN0aW9uKGUsdCl7dD10fHx0aGlzO2Zvcih2YXIgcj1uZXcgbixpPXRoaXMudGFpbDtudWxsIT09aTspci5wdXNoKGUuY2FsbCh0LGkudmFsdWUsdGhpcykpLGk9aS5wcmV2O3JldHVybiByfSxuLnByb3RvdHlwZS5yZWR1Y2U9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPXRoaXMuaGVhZDtpZihhcmd1bWVudHMubGVuZ3RoPjEpcj10O2Vsc2V7aWYoIXRoaXMuaGVhZCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVkdWNlIG9mIGVtcHR5IGxpc3Qgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpO249dGhpcy5oZWFkLm5leHQscj10aGlzLmhlYWQudmFsdWV9Zm9yKHZhciBpPTA7bnVsbCE9PW47aSsrKXI9ZShyLG4udmFsdWUsaSksbj1uLm5leHQ7cmV0dXJuIHJ9LG4ucHJvdG90eXBlLnJlZHVjZVJldmVyc2U9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPXRoaXMudGFpbDtpZihhcmd1bWVudHMubGVuZ3RoPjEpcj10O2Vsc2V7aWYoIXRoaXMudGFpbCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVkdWNlIG9mIGVtcHR5IGxpc3Qgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpO249dGhpcy50YWlsLnByZXYscj10aGlzLnRhaWwudmFsdWV9Zm9yKHZhciBpPXRoaXMubGVuZ3RoLTE7bnVsbCE9PW47aS0tKXI9ZShyLG4udmFsdWUsaSksbj1uLnByZXY7cmV0dXJuIHJ9LG4ucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtmb3IodmFyIGU9bmV3IEFycmF5KHRoaXMubGVuZ3RoKSx0PTAscj10aGlzLmhlYWQ7bnVsbCE9PXI7dCsrKWVbdF09ci52YWx1ZSxyPXIubmV4dDtyZXR1cm4gZX0sbi5wcm90b3R5cGUudG9BcnJheVJldmVyc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGU9bmV3IEFycmF5KHRoaXMubGVuZ3RoKSx0PTAscj10aGlzLnRhaWw7bnVsbCE9PXI7dCsrKWVbdF09ci52YWx1ZSxyPXIucHJldjtyZXR1cm4gZX0sbi5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24oZSx0KXsodD10fHx0aGlzLmxlbmd0aCk8MCYmKHQrPXRoaXMubGVuZ3RoKSwoZT1lfHwwKTwwJiYoZSs9dGhpcy5sZW5ndGgpO3ZhciByPW5ldyBuO2lmKHQ8ZXx8dDwwKXJldHVybiByO2U8MCYmKGU9MCksdD50aGlzLmxlbmd0aCYmKHQ9dGhpcy5sZW5ndGgpO2Zvcih2YXIgaT0wLG89dGhpcy5oZWFkO251bGwhPT1vJiZpPGU7aSsrKW89by5uZXh0O2Zvcig7bnVsbCE9PW8mJmk8dDtpKyssbz1vLm5leHQpci5wdXNoKG8udmFsdWUpO3JldHVybiByfSxuLnByb3RvdHlwZS5zbGljZVJldmVyc2U9ZnVuY3Rpb24oZSx0KXsodD10fHx0aGlzLmxlbmd0aCk8MCYmKHQrPXRoaXMubGVuZ3RoKSwoZT1lfHwwKTwwJiYoZSs9dGhpcy5sZW5ndGgpO3ZhciByPW5ldyBuO2lmKHQ8ZXx8dDwwKXJldHVybiByO2U8MCYmKGU9MCksdD50aGlzLmxlbmd0aCYmKHQ9dGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzLmxlbmd0aCxvPXRoaXMudGFpbDtudWxsIT09byYmaT50O2ktLSlvPW8ucHJldjtmb3IoO251bGwhPT1vJiZpPmU7aS0tLG89by5wcmV2KXIucHVzaChvLnZhbHVlKTtyZXR1cm4gcn0sbi5wcm90b3R5cGUuc3BsaWNlPWZ1bmN0aW9uKGUsdCwuLi5yKXtlPnRoaXMubGVuZ3RoJiYoZT10aGlzLmxlbmd0aC0xKSxlPDAmJihlPXRoaXMubGVuZ3RoK2UpO2Zvcih2YXIgbj0wLG89dGhpcy5oZWFkO251bGwhPT1vJiZuPGU7bisrKW89by5uZXh0O3ZhciBzPVtdO2ZvcihuPTA7byYmbjx0O24rKylzLnB1c2goby52YWx1ZSksbz10aGlzLnJlbW92ZU5vZGUobyk7bnVsbD09PW8mJihvPXRoaXMudGFpbCksbyE9PXRoaXMuaGVhZCYmbyE9PXRoaXMudGFpbCYmKG89by5wcmV2KTtmb3Iobj0wO248ci5sZW5ndGg7bisrKW89aSh0aGlzLG8scltuXSk7cmV0dXJuIHN9LG4ucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5oZWFkLHQ9dGhpcy50YWlsLHI9ZTtudWxsIT09cjtyPXIucHJldil7dmFyIG49ci5wcmV2O3IucHJldj1yLm5leHQsci5uZXh0PW59cmV0dXJuIHRoaXMuaGVhZD10LHRoaXMudGFpbD1lLHRoaXN9O3RyeXtlKFwiLi9pdGVyYXRvci5qc1wiKShuKX1jYXRjaChlKXt9fSx7XCIuL2l0ZXJhdG9yLmpzXCI6ODJ9XX0se30sWzEyXSkoMTIpfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///170\n')},171:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "3ecb6f3ea45120eed47f.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9yZXBsYXkvRGF0YVN5bmNocm9uaXplci5yZXBsYXkud29ya2VyLmpzPzI2ZmQiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7RUFDMUIsT0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIxNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiM2VjYjZmM2VhNDUxMjBlZWQ0N2Yud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///171\n')},172:function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "fdaf25e45eb488bc8271.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS90aW1lc3luYy9ydC9EYXRhU3luY2hyb25pemVyLnJlYWx0aW1lLndvcmtlci5qcz8yZWE1Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0VBQzFCLE9BQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZkYWYyNWU0NWViNDg4YmM4MjcxLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///172\n')},173:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(3);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/replay/DataSynchronizer.replay.worker.js\nvar DataSynchronizer_replay_worker = __webpack_require__(171);\nvar DataSynchronizer_replay_worker_default = /*#__PURE__*/__webpack_require__.n(DataSynchronizer_replay_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nvar EventType = __webpack_require__(7);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/worker/WorkerExt.js\nvar WorkerExt = __webpack_require__(12);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/replay/DataSynchronizer.replay.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n\nclass DataSynchronizer_replay_DataSynchronizerReplay {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.minTime - min range time as ISO date\n   * @param {String} properties.maxTime - max range time as ISO date\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   * @param {DataSynchronizer} timeSync - dataSynchronizer\n   */\n  constructor(properties, timeSync) {\n    this.bufferingTime = 1000; // default\n\n    this.id = properties.id || Object(Utils["q" /* randomUUID */])();\n    this.dataSources = properties.dataSources || [];\n    this.replaySpeed = properties.replaySpeed || 1;\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250;\n    this.initialized = false;\n    this.timeSync = timeSync;\n    this.properties = {};\n    this.properties.replaySpeed = this.replaySpeed;\n    this.properties.startTimestamp = undefined;\n    this.properties.endTimestamp = undefined;\n    this.properties.minTimestamp = undefined;\n    this.properties.maxTimestamp = undefined;\n    this.properties.version = 0;\n\n    if (Object(Utils["n" /* isDefined */])(properties)) {\n      if (Object(Utils["n" /* isDefined */])(properties.minTime)) {\n        this.minTimestamp = new Date(properties.minTime).getTime();\n      }\n\n      if (Object(Utils["n" /* isDefined */])(properties.maxTime)) {\n        this.maxTimestamp = new Date(properties.maxTime).getTime();\n      }\n    }\n\n    this.computeMinMax();\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getTopicId() {\n    return Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getTimeTopicId() {\n    return Constants["d" /* TIME_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getDataSources() {\n    return this.dataSources;\n  }\n\n  computeMinMax() {\n    if (this.dataSources.length > 0) {\n      let minTimestamp = Number.MAX_VALUE,\n          maxTimestamp = Number.MIN_VALUE; // default min/max will be adjusted on the most min/max DataSource\n\n      for (let ds of this.dataSources) {\n        // compute min/max range of dataSynchronizer\n        let dsMinTimestamp = ds.getMinTimeAsTimestamp();\n        let dsMaxTimestamp = ds.getMaxTimeAsTimestamp();\n\n        if (dsMinTimestamp < minTimestamp) {\n          minTimestamp = dsMinTimestamp;\n        }\n\n        if (dsMaxTimestamp > maxTimestamp) {\n          maxTimestamp = dsMaxTimestamp;\n        }\n      } // check if a default Min/Max has been defined into DataSynchronizer forcing intersection with current computed ones\n\n\n      if (Object(Utils["n" /* isDefined */])(this.minTimestamp) && this.minTimestamp > minTimestamp) {\n        // intersect and takes the min of dataSynchronizer\n        minTimestamp = this.minTimestamp;\n      }\n\n      if (Object(Utils["n" /* isDefined */])(this.maxTimestamp) && this.maxTimestamp > maxTimestamp) {\n        // intersect and takes the min of dataSynchronizer\n        maxTimestamp = this.maxTimestamp;\n      }\n\n      this.properties.minTimestamp = minTimestamp;\n      this.properties.maxTimestamp = maxTimestamp;\n    } else {\n      const st = new Date(\'1970-01-01T00:00:00Z\').getTime();\n      const end = new Date(\'2055-01-01T00:00:00Z\').getTime();\n      this.properties.minTimestamp = this.properties.startTimestamp = st;\n      this.properties.maxTimestamp = this.properties.endTimestamp = end;\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    if (this.properties.startTimestamp) {\n      return new Date(this.properties.startTimestamp).toISOString();\n    } else {\n      return this.getMinTimeAsIsoDate();\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.properties.startTimestamp;\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    if (this.properties.endTimestamp) {\n      return new Date(this.properties.endTimestamp).toISOString();\n    } else {\n      return this.getMaxTimeAsIsoDate();\n    }\n  }\n\n  getEndTimeAsTimestamp() {\n    return this.properties.endTimestamp;\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return new Date(this.properties.minTimestamp).toISOString();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.properties.minTimestamp;\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return new Date(this.properties.maxTimestamp).toISOString();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.properties.maxTimestamp;\n  }\n\n  async setStartTime(time, lazy = false) {\n    this.properties.startTimestamp = new Date(time).getTime();\n\n    if (!lazy) {\n      await this.updateAlgo();\n    }\n  }\n\n  async setEndTime(time, lazy = false) {\n    this.properties.endTimestamp = new Date(time).getTime();\n\n    if (!lazy) {\n      await this.updateAlgo();\n    }\n  }\n\n  async setMinTime(minTime, resetStartTime = false) {\n    this.minTimestamp = new Date(minTime).getTime();\n    this.computeMinMax();\n    this.timeChanged();\n  }\n\n  async setMaxTime(maxTime, resetStartTime = false) {\n    this.maxTimestamp = new Date(maxTime).getTime();\n    this.computeMinMax();\n    this.timeChanged();\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.replaySpeed;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  getMode() {\n    return Mode["a" /* Mode */].REPLAY;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    try {\n      const dataSourcesForWorker = [];\n\n      for (let dataSource of this.dataSources) {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        dataSourcesForWorker.push(dataSourceForWorker);\n      }\n\n      this.synchronizerWorker = new WorkerExt["a" /* default */](new DataSynchronizer_replay_worker_default.a());\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'init\',\n        dataSources: dataSourcesForWorker,\n        replaySpeed: this.replaySpeed,\n        timerResolution: this.timerResolution,\n        masterTimeRefreshRate: this.masterTimeRefreshRate,\n        startTimestamp: this.getStartTimeAsTimestamp(),\n        endTimestamp: this.getEndTimeAsTimestamp(),\n        mode: this.getMode(),\n        version: this.version(),\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }).then(() => {\n        this.initialized = true;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.getId(),\n      name: dataSource.getName(),\n      minTimestamp: dataSource.getMinTimeAsTimestamp(),\n      maxTimestamp: dataSource.getMaxTimeAsTimestamp()\n    }; // bind dataSource data onto dataSynchronizer data\n\n    try {\n      await dataSource.setDataSynchronizer(this.timeSync);\n      dataSource.properties.replaySpeed = this.replaySpeed;\n    } catch (ex) {\n      console.error("Cannot set the synchronizer to this DataSource", ex);\n      throw ex;\n    }\n\n    return obj;\n  }\n\n  timeChanged() {\n    this.onTimeChanged(this.getMinTimeAsTimestamp(), this.getMaxTimeAsTimestamp(), this.getStartTimeAsTimestamp(), this.getEndTimeAsTimestamp());\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    this.dataSources.push(dataSource);\n    this.computeMinMax();\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, add DataSource ${dataSource.id} as it`);\n      this.timeChanged();\n      this.onAddedDataSource(dataSource.id);\n    } else {\n      dataSource.setStartTime(this.getStartTimeAsIsoDate());\n      dataSource.setEndTime(this.getEndTimeAsIsoDate());\n      const dataSourceForWorker = await this.createDataSourceForWorker(dataSource); // add dataSource to synchronizer algorithm\n\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'add\',\n        dataSources: [dataSourceForWorker]\n      }).then(async () => {\n        if (await this.isConnected()) {\n          await dataSource.connect();\n        }\n\n        this.onAddedDataSource(dataSource.id);\n        this.timeChanged();\n      });\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n\n    if (this.dataSources.length === 0) {\n      await this.reset();\n    }\n\n    this.computeMinMax();\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, remove DataSource ${dataSource.id} as it`);\n      await dataSource.removeDataSynchronizer();\n      this.timeChanged();\n      this.onRemovedDataSource(dataSource.id);\n    } else {\n      await dataSource.disconnect();\n      await dataSource.removeDataSynchronizer();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'remove\',\n        dataSourceIds: [dataSource.getId()],\n        startTimestamp: this.getStartTimeAsTimestamp(),\n        endTimestamp: this.getEndTimeAsTimestamp()\n      }).then(() => {\n        this.timeChanged();\n        this.onRemovedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    if (this.synchronizerWorker) {\n      return this.synchronizerWorker.postMessageWithAck({\n        type: \'data\',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    if (this.dataSources.length > 0) {\n      return this.checkInit().then(async () => {\n        const isConnected = await this.isConnected();\n        return isConnected ? isConnected : this.doConnect();\n      });\n    }\n  }\n\n  async checkInit() {\n    if (!Object(Utils["n" /* isDefined */])(this.init)) {\n      this.init = this.initDataSources();\n    }\n\n    return this.init;\n  }\n\n  checkStartEndTime() {\n    if (!this.properties.startTimestamp) {\n      this.properties.startTimestamp = this.properties.minTimestamp;\n    }\n\n    if (!this.properties.endTimestamp) {\n      this.properties.endTimestamp = this.properties.maxTimestamp;\n    }\n  }\n\n  async doConnect() {\n    this.checkStartEndTime();\n    await this.updateAlgo();\n\n    for (let dataSource of this.dataSources) {\n      await dataSource.setTimeRange(this.getStartTimeAsIsoDate(), this.getEndTimeAsIsoDate(), this.getReplaySpeed(), true);\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'connect\',\n      version: this.version()\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    await this.reset();\n    const promises = [];\n\n    for (let dataSource of this.dataSources) {\n      promises.push(dataSource.disconnect());\n    }\n\n    return Promise.all(promises);\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    this.replaySpeed = replaySpeed;\n    this.properties.replaySpeed = replaySpeed;\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'replay-speed\',\n      replaySpeed: replaySpeed\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false) {\n    await this.disconnect();\n    this.incVersion(); // update properties of DataSynchronizer\n\n    this.replaySpeed = replaySpeed;\n    await this.setStartTime(startTime, false);\n    await this.setEndTime(endTime, false);\n    const promises = []; // update properties of each DataSource\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.setTimeRange(this.getStartTimeAsIsoDate(), this.getEndTimeAsIsoDate(), this.getReplaySpeed(), false, this.getMode(), this.version()));\n    }\n\n    return Promise.all(promises);\n  }\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n  }\n\n  async updateAlgo() {\n    // synchronize startTimestamp of synchronizer to datasources\n    for (let dataSource of this.dataSources) {\n      dataSource.setStartTimestamp(this.getStartTimeAsTimestamp());\n      dataSource.setEndTimestamp(this.getEndTimeAsTimestamp());\n    } // re-compute new min/max of synchronizer\n\n\n    this.computeMinMax(); // provide new min/max of each dataSource to dataSynchronizer\n\n    const dataSourcesForWorker = [];\n\n    for (let dataSource of this.dataSources) {\n      const obj = {\n        bufferingTime: dataSource.properties.bufferingTime || 0,\n        timeOut: dataSource.properties.timeOut || 0,\n        id: dataSource.getId(),\n        name: dataSource.getName(),\n        minTimestamp: dataSource.getMinTimeAsTimestamp(),\n        maxTimestamp: dataSource.getMaxTimeAsTimestamp()\n      };\n      dataSourcesForWorker.push(obj);\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'time-range\',\n      mode: this.getMode(),\n      replaySpeed: this.getReplaySpeed(),\n      startTimestamp: this.getStartTimeAsTimestamp(),\n      endTimestamp: this.getEndTimeAsTimestamp(),\n      version: this.version(),\n      dataSources: dataSourcesForWorker\n    });\n  }\n\n  async updateProperties(properties) {\n    const promises = [];\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.updateProperties(properties));\n    }\n\n    return Promise.all(promises);\n  }\n\n  resetTimes() {\n    this.computeMinMax();\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    await this.checkInit();\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'reset\'\n    }).then(() => this.resetTimes());\n  }\n\n  async getCurrentTime() {\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'current-time\'\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    if (this.dataSources.length === 0) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'is-connected\'\n      }).then(v => v.data);\n    }\n  }\n\n  incVersion() {\n    this.properties.version++;\n  }\n\n  async autoUpdateTime(activate) {\n    const promises = [];\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.autoUpdateTime(activate));\n    }\n\n    return Promise.all(promises);\n  }\n\n  onTimeChanged(min, max, start, end) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSynchronizer_replay = (DataSynchronizer_replay_DataSynchronizerReplay);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/rt/DataSynchronizer.realtime.worker.js\nvar DataSynchronizer_realtime_worker = __webpack_require__(172);\nvar DataSynchronizer_realtime_worker_default = /*#__PURE__*/__webpack_require__.n(DataSynchronizer_realtime_worker);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/rt/DataSynchronizer.realtime.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass DataSynchronizer_realtime_DataSynchronizerRealtime {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   * @param {DataSynchronizer} timeSync - dataSynchronizer\n   */\n  constructor(properties, timeSync) {\n    this.bufferingTime = 1000; // default\n\n    this.id = properties.id || Object(Utils["q" /* randomUUID */])();\n    this.dataSources = properties.dataSources || [];\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250;\n    this.initialized = false;\n    this.timeSync = timeSync;\n    this.properties = {};\n    this.properties.version = 0;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getDataSources() {\n    return this.dataSources;\n  }\n\n  getTopicId() {\n    return Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getTimeTopicId() {\n    return Constants["d" /* TIME_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  getMode() {\n    return Mode["a" /* Mode */].REAL_TIME;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    try {\n      const dataSourcesForWorker = [];\n\n      for (let dataSource of this.dataSources) {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        dataSourcesForWorker.push(dataSourceForWorker);\n      }\n\n      this.synchronizerWorker = new WorkerExt["a" /* default */](new DataSynchronizer_realtime_worker_default.a());\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'init\',\n        dataSources: dataSourcesForWorker,\n        timerResolution: this.timerResolution,\n        masterTimeRefreshRate: this.masterTimeRefreshRate,\n        mode: Mode["a" /* Mode */].REAL_TIME,\n        version: this.version(),\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }).then(() => {\n        this.initialized = true;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.id,\n      name: dataSource.name\n    }; // bind dataSource data onto dataSynchronizer data\n\n    await dataSource.setDataSynchronizer(this.timeSync);\n    return obj;\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    this.dataSources.push(dataSource);\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, add DataSource ${dataSource.id} as it`);\n    } else {\n      const dataSourceForWorker = await this.createDataSourceForWorker(dataSource); // add dataSource to synchronizer algorithm\n\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'add\',\n        dataSources: [dataSourceForWorker]\n      }).then(() => {\n        this.onAddedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    await dataSource.removeDataSynchronizer();\n    this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n\n    if (this.dataSources.length === 0) {\n      await this.reset();\n    }\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, remove DataSource ${dataSource.id} as it`);\n    } else {\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'remove\',\n        dataSourceIds: [dataSource.getId()]\n      }).then(() => {\n        this.onRemovedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    if (this.synchronizerWorker !== null) {\n      return this.synchronizerWorker.postMessageWithAck({\n        type: \'data\',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    return this.doConnect();\n  }\n\n  async checkInit() {\n    if (!Object(Utils["n" /* isDefined */])(this.init)) {\n      this.init = this.initDataSources();\n    }\n\n    return this.init;\n  }\n\n  async doConnect() {\n    for (let dataSource of this.dataSources) {\n      await dataSource.connect();\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'connect\',\n      version: this.version()\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    await this.reset();\n    const promises = [];\n\n    for (let dataSource of this.dataSources) {\n      promises.push(dataSource.disconnect());\n    }\n\n    return Promise.all(promises);\n  }\n\n  async updateProperties(properties) {\n    for (let ds of this.dataSources) {\n      ds.updateProperties(properties);\n    }\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    await this.checkInit();\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'reset\'\n    });\n  }\n\n  async getCurrentTime() {\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'current-time\'\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    if (this.dataSources.length === 0) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'is-connected\'\n      }).then(message => message.data);\n    }\n  }\n\n  setMinTime(minTime) {}\n\n  setMaxTime(maxTime) {}\n\n  incVersion() {\n    this.properties.version++;\n  }\n\n  onTimeChanged(start, min) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSynchronizer_realtime = (DataSynchronizer_realtime_DataSynchronizerRealtime);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass DataSynchronizer_DataSynchronizer {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.startTime - start time of the temporal run\n   * @param {String} properties.endTime - end time of the temporal run\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   */\n  constructor(properties) {\n    const id = properties.id || Object(Utils["q" /* randomUUID */])();\n    this.dataSynchronizerReplay = new DataSynchronizer_replay({ ...properties,\n      id: id + \'-replay\'\n    }, this);\n    this.dataSynchronizerRt = new DataSynchronizer_realtime({ ...properties,\n      id: id + \'-realtime\'\n    }, this);\n    this.broadcastChannels = [];\n    this.setMode(properties.mode || Mode["a" /* Mode */].REPLAY).then(() => {\n      this.dataSynchronizer.onTimeChanged = (min, max, start, end) => this.onTimeChanged(min, max, start, end);\n\n      this.dataSynchronizer.onAddedDataSource = dataSourceId => this.onAddedDataSource(dataSourceId);\n\n      this.dataSynchronizer.onRemovedDataSource = dataSourceId => this.onRemovedDataSource(dataSourceId);\n    });\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  async setMode(mode) {\n    if (this.dataSynchronizer) {\n      await this.dataSynchronizer.disconnect();\n    }\n\n    if (mode === Mode["a" /* Mode */].REPLAY) {\n      this.dataSynchronizer = this.dataSynchronizerReplay;\n    } else if (mode === Mode["a" /* Mode */].REAL_TIME) {\n      this.dataSynchronizer = this.dataSynchronizerRt;\n    }\n\n    this.id = this.dataSynchronizer.id;\n\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n    }\n\n    this.initEventSubscription();\n    this.broadcastChannels = [];\n    const promises = [];\n\n    for (let ds of this.dataSynchronizer.getDataSources()) {\n      promises.push(ds.setMode(mode));\n    }\n\n    this.dataSynchronizer.onTimeChanged = (min, max, start, end) => this.onTimeChanged(min, max, start, end);\n\n    this.dataSynchronizer.onAddedDataSource = dataSourceId => this.onAddedDataSource(dataSourceId);\n\n    this.dataSynchronizer.onRemovedDataSource = dataSourceId => this.onRemovedDataSource(dataSourceId);\n\n    return Promise.all(promises).then(() => this.onChangedMode(mode));\n  }\n\n  initEventSubscription() {\n    this.eventSubscriptionMap = {}; // listen for Events to callback to subscriptions\n\n    this.broadcastChannels.push(new BroadcastChannel(this.getTopicId()).onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    });\n    this.broadcastChannels.push(new BroadcastChannel(this.getTimeTopicId()).onmessage = message => {\n      if (message.data.type === EventType["a" /* EventType */].MASTER_TIME) {\n        // this.properties.startTimestamp = message.data.timestamp; // save as last timestamp\n        this.dataSynchronizer.setStartTimestamp(message.data.timestamp);\n      }\n\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    });\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  }\n\n  getDataSources() {\n    return this.dataSynchronizer.getDataSources();\n  }\n\n  getTopicId() {\n    return this.dataSynchronizer.getTopicId();\n  }\n\n  getTimeTopicId() {\n    return this.dataSynchronizer.getTimeTopicId();\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return this.dataSynchronizer.getStartTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.dataSynchronizer.getStartTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.dataSynchronizer.getEndTimeAsIsoDate();\n  }\n\n  getEndTimeAsTimestamp() {\n    return this.dataSynchronizer.getEndTimeAsTimestamp();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return this.dataSynchronizer.getMinTimeAsIsoDate();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.dataSynchronizer.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return this.dataSynchronizer.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.dataSynchronizer.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.dataSynchronizer.getReplaySpeed();\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    return this.dataSynchronizer.terminate();\n  }\n\n  getMode() {\n    return this.dataSynchronizer.getMode();\n  }\n\n  async autoUpdateTime(activate) {\n    return this.dataSynchronizerReplay.autoUpdateTime(activate);\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    return this.dataSynchronizer.initDataSources();\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    await this.dataSynchronizerRt.addDataSource(dataSource);\n    return this.dataSynchronizerReplay.addDataSource(dataSource);\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    await this.dataSynchronizerRt.removeDataSource(dataSource);\n    return this.dataSynchronizerReplay.removeDataSource(dataSource);\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    return this.dataSynchronizer.push(dataSourceId, data);\n  }\n\n  version() {\n    return this.dataSynchronizer.version();\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    return this.dataSynchronizer.connect();\n  }\n\n  async checkInit() {\n    return this.dataSynchronizer.checkInit();\n  }\n\n  async doConnect() {\n    return this.dataSynchronizer.doConnect();\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    return this.dataSynchronizer.disconnect();\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    return this.dataSynchronizer.setReplaySpeed(replaySpeed);\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false) {\n    return this.dataSynchronizer.setTimeRange(startTime, endTime, replaySpeed, reconnect);\n  }\n\n  async updateProperties(properties) {\n    return this.dataSynchronizer.updateProperties(properties);\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    return this.dataSynchronizer.reset();\n  }\n\n  async getCurrentTime() {\n    return this.dataSynchronizer.getCurrentTime();\n  }\n\n  setMinTime(minTime) {\n    this.dataSynchronizer.setMinTime(minTime);\n  }\n\n  setMaxTime(maxTime) {\n    this.dataSynchronizer.setMaxTime(maxTime);\n  }\n  /**\n  * Connect the dataSource then the protocol will be opened as well.\n  */\n\n\n  async isConnected() {\n    return this.dataSynchronizer.isConnected();\n  }\n\n  minMaxChanged(resetStartTimestamp = false) {\n    if (resetStartTimestamp) {\n      this.dataSynchronizerReplay.properties.startTimestamp = undefined;\n      this.dataSynchronizerReplay.properties.endTimestamp = undefined;\n    }\n\n    this.dataSynchronizerReplay.computeMinMax();\n    this.dataSynchronizerReplay.timeChanged();\n  }\n\n  onTimeChanged(start, min) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n  onChangedMode(mode) {}\n\n}\n\n/* harmony default export */ var timesync_DataSynchronizer = __webpack_exports__["a"] = (DataSynchronizer_DataSynchronizer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///173\n')},174:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(2);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(176);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\nvar View = __webpack_require__(10);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {}; // map Layer id to array of corresponding draping\n\n    this.layerIdToDrapedImage = {};\n  }\n\n  async setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'drapedImage\') {\n        this.updateDrapedImage(d);\n      } else if (data.type === \'ellipse\') {\n        this.updateEllipse(d);\n      } else if (data.type === \'polygon\') {\n        this.updatePolygon(d);\n      } else if (data.type === \'coplanarPolygon\') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === \'frustum\') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  async addPolygonToLayer(props, polygon) {\n    this.layerIdToPolygon[props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  async addMarkerToLayer(props, markerObject) {\n    this.layerIdToMarkers[props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  async addPolylineToLayer(props, polylineObject) {\n    this.layerIdToPolylines[props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  async addEllipseToLayer(props, ellipseObject) {\n    this.layerIdToEllipsoids[props.ellipseId] = ellipseObject;\n  }\n  /**\n   * Associate a drapedImageId to a Layer for a fast lookup\n   * @protected\n   * @param {ImageDraping.props} layer - the Layer object\n   * @param {Object} drapedImageObject - the Map drapedImage object\n   */\n\n\n  async addDrapedImageToLayer(props, drapedImageObject) {\n    this.layerIdToDrapedImage[props.drapedImageId] = drapedImageObject;\n  }\n\n  async addFrustumToLayer(props, frustum) {\n    this.layerIdToFrustum[props.frustumId] = frustum;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      array.push(this.layerIdToPolygon[id]);\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.polygonId in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.markerId in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      array.push(this.layerIdToMarkers[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      array.push(this.layerIdToPolylines[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      array.push(this.layerIdToEllipsoids[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.ellipseId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the draped image associate to the Layer\n   * @protected\n   * @param {ImageDrapingLayer.props} layer - the Layer Object\n   */\n\n\n  getDrapedImage(props) {\n    if (!(props.drapedImageId in this.layerIdToDrapedImage)) {\n      return null;\n    }\n\n    return this.layerIdToDrapedImage[props.drapedImageId];\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      array.push(this.layerIdToFrustum[id]);\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.frustumId in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    // check for marker\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeDrapedImages(layer);\n    this.removeFrustums(layer);\n    super.removeAllFromLayer(layer);\n  }\n\n  removePolygons(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const polygon = this.layerIdToPolygon[id];\n\n      if (Object(Utils["n" /* isDefined */])(polygon)) {\n        this.removePolygonFromLayer(polygon);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const marker = this.layerIdToMarkers[id];\n\n      if (Object(Utils["n" /* isDefined */])(marker)) {\n        this.removeMarkerFromLayer(marker);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    const ids = ellipse.getIds() || [];\n\n    for (let id of ids) {\n      const ellipse = this.layerIdToEllipsoids[id];\n\n      if (Object(Utils["n" /* isDefined */])(ellipse)) {\n        this.removeEllipseFromLayer(ellipse);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    const ids = polyline.getIds() || [];\n\n    for (let id of ids) {\n      const polyline = this.layerIdToPolylines[id];\n\n      if (Object(Utils["n" /* isDefined */])(polyline)) {\n        this.removePolylineFromLayer(polyline);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[id];\n    }\n  }\n  /**\n   * Remove the drapedImage corresponding to a ImageDraping Layer\n   * @param {ImageDraping} imageDraping - the layer to remove the drapedImage from\n   */\n\n\n  removeDrapedImages(drapedImage) {\n    const ids = drapedImage.getIds() || [];\n\n    for (let id of ids) {\n      const drapedImage = this.layerIdToDrapedImage[id];\n\n      if (Object(Utils["n" /* isDefined */])(drapedImage)) {\n        this.removeDrapedImageFromLayer(drapedImage);\n      } // remove drapedImage ids from Layer map\n\n\n      delete this.layerIdToDrapedImage[id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const frustum = this.layerIdToFrustum[id];\n\n      if (Object(Utils["n" /* isDefined */])(frustum)) {\n        this.removeFrustumFromLayer(frustum);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a draped image from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} drapedImage - The Map drapedImage object\n   */\n\n\n  removeDrapedImageFromLayer(drapedImage) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["n" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["n" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["n" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["n" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  async updateMarker() {}\n\n  async updatePolyline() {}\n\n  async updatePolygon() {}\n\n  async updateEllipse() {}\n\n  async updateCoPlanarPolygon() {}\n\n  async updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\', \'polygon\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["n" /* isDefined */])(options)) {\n      if (Object(Utils["n" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["n" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["n" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["n" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["n" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["n" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["n" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["c" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["n" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations;\n    let polylinePoints = [];\n\n    if (Object(Utils["n" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  async updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["n" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on(\'click\', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on(\'contextmenu\', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on(\'mouseover\', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["n" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  async updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils["n" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations;\n\n      if (Object(Utils["n" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  async updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils["n" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices;\n      let polygonPoints = [];\n\n      if (Object(Utils["n" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices;\n    let polygonPoints = [];\n\n    if (Object(Utils["n" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///174\n')},175:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(11);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/BinaryDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import BinaryDataLayer from 'osh-js/core/ui/layer/BinaryDataLayer';\n *\n */\n\nclass BinaryDataLayer_BinaryDataLayer extends Layer[\"a\" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = 'binaryData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      frameData: undefined\n    };\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.frameData)) {\n      this.props.frameData = properties.frameData;\n    }\n\n    this.definedId('dataId', props);\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.getFrameData)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('frameData', await this.getFunc('getFrameData')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getFrameData'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_BinaryDataLayer = (BinaryDataLayer_BinaryDataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/VideoDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends BinaryDataLayer\n * @example\n *\n * import VideoDataLayer from 'osh-js/core/ui/layer/VideoDataLayer';\n *\n */\n\nclass VideoDataLayer_VideoDataLayer extends layer_BinaryDataLayer {\n  constructor(properties) {\n    super(properties);\n    this.type = 'videoData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      roll: 0\n    };\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.roll)) {\n      props.roll = properties.roll;\n    }\n\n    this.definedId('videoDataId', props);\n\n    if (Object(Utils[\"n\" /* isDefined */])(properties.getRoll)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('roll', await this.getFunc('getRoll')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getRoll'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_VideoDataLayer = __webpack_exports__[\"a\"] = (VideoDataLayer_VideoDataLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9CaW5hcnlEYXRhTGF5ZXIuanM/MzMzYyIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllci5qcz9kZjZhIl0sIm5hbWVzIjpbIkJpbmFyeURhdGFMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsImluaXQiLCJwcm9wcyIsImZyYW1lRGF0YSIsInVuZGVmaW5lZCIsImlzRGVmaW5lZCIsImRlZmluZWRJZCIsImdldEZyYW1lRGF0YSIsImZuIiwicmVjIiwidGltZXN0YW1wIiwib3B0aW9ucyIsInVwZGF0ZVByb3BlcnR5IiwiZ2V0RnVuYyIsImFkZEZuIiwiZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5IiwiVmlkZW9EYXRhTGF5ZXIiLCJyb2xsIiwiZ2V0Um9sbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsK0JBQU4sU0FBOEJDLHdCQUE5QixDQUFvQztFQUVoQ0MsV0FBVyxDQUFDQyxVQUFELEVBQWE7SUFDcEIsTUFBTUEsVUFBTjtJQUNBLEtBQUtDLElBQUwsR0FBWSxZQUFaO0VBQ0gsQ0FMK0IsQ0FNaEM7OztFQUNBQyxJQUFJLENBQUNGLFVBQVUsR0FBQyxLQUFLQSxVQUFqQixFQUE2QjtJQUM3QixNQUFNRSxJQUFOLENBQVdGLFVBQVg7SUFDQSxNQUFNRyxLQUFLLEdBQUc7TUFDVkMsU0FBUyxFQUFFQztJQURELENBQWQ7O0lBSUEsSUFBSUMsa0NBQVMsQ0FBQ04sVUFBVSxDQUFDSSxTQUFaLENBQWIsRUFBb0M7TUFDaEMsS0FBS0QsS0FBTCxDQUFXQyxTQUFYLEdBQXVCSixVQUFVLENBQUNJLFNBQWxDO0lBQ0g7O0lBRUQsS0FBS0csU0FBTCxDQUFlLFFBQWYsRUFBeUJKLEtBQXpCOztJQUVBLElBQUlHLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ1EsWUFBWixDQUFiLEVBQXVDO01BQ25DLElBQUlDLEVBQUUsR0FBRyxPQUFPQyxHQUFQLEVBQVlDLFNBQVosRUFBdUJDLE9BQXZCLEtBQW1DO1FBQ3hDLEtBQUtDLGNBQUwsQ0FBb0IsV0FBcEIsRUFBZ0MsTUFBTSxLQUFLQyxPQUFMLENBQWEsY0FBYixFQUE2QkosR0FBN0IsRUFBa0NDLFNBQWxDLEVBQTZDQyxPQUE3QyxDQUF0QztNQUNILENBRkQ7O01BR0EsS0FBS0csS0FBTCxDQUFXLEtBQUtDLDJCQUFMLENBQWlDLGNBQWpDLENBQVgsRUFBNkRQLEVBQTdEO0lBQ0g7RUFDSjs7QUF6QitCOztBQTJCckJaLHlGQUFmLEU7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNb0IsNkJBQU4sU0FBNkJwQixxQkFBN0IsQ0FBNkM7RUFFekNFLFdBQVcsQ0FBQ0MsVUFBRCxFQUFhO0lBQ3BCLE1BQU1BLFVBQU47SUFDQSxLQUFLQyxJQUFMLEdBQVksV0FBWjtFQUNILENBTHdDLENBTXpDOzs7RUFDQUMsSUFBSSxDQUFDRixVQUFVLEdBQUMsS0FBS0EsVUFBakIsRUFBNkI7SUFDN0IsTUFBTUUsSUFBTixDQUFXRixVQUFYO0lBQ0EsTUFBTUcsS0FBSyxHQUFHO01BQ1plLElBQUksRUFBRTtJQURNLENBQWQ7O0lBSUEsSUFBSVosa0NBQVMsQ0FBQ04sVUFBVSxDQUFDa0IsSUFBWixDQUFiLEVBQStCO01BQzNCZixLQUFLLENBQUNlLElBQU4sR0FBYWxCLFVBQVUsQ0FBQ2tCLElBQXhCO0lBQ0g7O0lBRUQsS0FBS1gsU0FBTCxDQUFlLGFBQWYsRUFBOEJKLEtBQTlCOztJQUVBLElBQUlHLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ21CLE9BQVosQ0FBYixFQUFrQztNQUM5QixJQUFJVixFQUFFLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxTQUFaLEVBQXVCQyxPQUF2QixLQUFtQztRQUN4QyxLQUFLQyxjQUFMLENBQW9CLE1BQXBCLEVBQTJCLE1BQU0sS0FBS0MsT0FBTCxDQUFhLFNBQWIsRUFBd0JKLEdBQXhCLEVBQTZCQyxTQUE3QixFQUF3Q0MsT0FBeEMsQ0FBakM7TUFDSCxDQUZEOztNQUdBLEtBQUtHLEtBQUwsQ0FBVyxLQUFLQywyQkFBTCxDQUFpQyxTQUFqQyxDQUFYLEVBQXdEUCxFQUF4RDtJQUNIO0VBQ0o7O0FBekJ3Qzs7QUEyQjlCUSxpSEFBZiIsImZpbGUiOiIxNzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBMYXllciBmcm9tIFwiLi9MYXllci5qc1wiO1xuaW1wb3J0IHtpc0RlZmluZWQsIHJhbmRvbVVVSUR9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIExheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSAnb3NoLWpzL2NvcmUvdWkvbGF5ZXIvQmluYXJ5RGF0YUxheWVyJztcbiAqXG4gKi9cbmNsYXNzIEJpbmFyeURhdGFMYXllciBleHRlbmRzIExheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdiaW5hcnlEYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBmcmFtZURhdGE6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5mcmFtZURhdGEpKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZnJhbWVEYXRhID0gcHJvcGVydGllcy5mcmFtZURhdGE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmluZWRJZCgnZGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRGcmFtZURhdGEpKXtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ2ZyYW1lRGF0YScsYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRGcmFtZURhdGEnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEZyYW1lRGF0YScpLCBmbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCaW5hcnlEYXRhTGF5ZXI7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7aXNEZWZpbmVkfSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSBcIi4vQmluYXJ5RGF0YUxheWVyXCI7XG5cbi8qKlxuICogQGV4dGVuZHMgQmluYXJ5RGF0YUxheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBWaWRlb0RhdGFMYXllciBmcm9tICdvc2gtanMvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllcic7XG4gKlxuICovXG5jbGFzcyBWaWRlb0RhdGFMYXllciBleHRlbmRzIEJpbmFyeURhdGFMYXllciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAndmlkZW9EYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgcm9sbDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5yb2xsKSl7XG4gICAgICAgICAgICBwcm9wcy5yb2xsID0gcHJvcGVydGllcy5yb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZWZpbmVkSWQoJ3ZpZGVvRGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRSb2xsKSl7XG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdyb2xsJyxhd2FpdCB0aGlzLmdldEZ1bmMoJ2dldFJvbGwnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFJvbGwnKSwgZm4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVmlkZW9EYXRhTGF5ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///175\n")},181:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(182);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(6).default\nvar update = add(\"764b465c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsR0FBK0c7QUFDckk7QUFDQSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQW9IO0FBQ3RJLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjE4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzY0YjQ2NWNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///181\n")},182:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUEwRztBQUNwSjtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMTgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktYWR2YW5jZWQtdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIub3NoLXZpZXcge1xcbiAgICB3aWR0aDoxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///182\n')},185:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(186);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(6).default\nvar update = add(\"47acb68c\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/NDUyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxHQUFxSDtBQUMzSTtBQUNBLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBb0g7QUFDdEksK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTg1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vVUlTbGlkZXIuY3NzXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0N2FjYjY4Y1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LWFkdmFuY2VkLXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9VSVNsaWRlci5jc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///185\n")},186:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__(187);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.i, ".noUi-tooltip {\\n    border-radius: 10px;\\n    box-shadow: 2px 2px 5px 0px #777;\\n    background-color: #777;\\n    filter: alpha(opacity=80);\\n    -moz-opacity: 0.8;\\n    opacity: 0.8;\\n    border: none;\\n    color: #FFF;\\n    width: 100px;\\n    height: 23px;\\n    padding: 2px 2px 2px 2px;\\n}\\n.noUi-horizontal .noUi-handle-lower .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-horizontal .noUi-handle-upper .noUi-tooltip {\\n    top: 35px;\\n}\\n\\n.noUi-connect {\\n    background-color: rgba(5, 107, 166, 0.6);\\n}\\n\\n.noUi-tooltip:after {\\n    bottom: -14px;\\n    margin-left: -10px;\\n    border-top: 10px solid #fff;\\n}\\n\\n.noUi-tooltip:after {\\n    content: \'\';\\n    position: absolute;\\n    top: -10px;\\n    left: 50%;\\n    margin-left: -9px;\\n    width: 0;\\n    height: 0;\\n    border-left: 10px solid transparent;\\n    border-right: 10px solid transparent;\\n    border-top: none;\\n    border-bottom: 10px solid #777;\\n}\\n\\n.noUi-pips-horizontal {\\n    height:0px !important;\\n}\\n\\n\\n.noUi-handle:active {\\n    background-color: rgba(5, 107, 166, 0.6);\\n    box-shadow:none;\\n    border:none;\\n}\\n\\n\\n.noUi-horizontal {\\n    width: calc(100% - 50px);\\n}\\n\\n/** put range and control button side by side **/\\n\\n.osh-rangeslider-slider{\\n    float:left;\\n}\\n\\n.osh-rangeslider-control {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control-select {\\n    float: left;\\n    width: 30px;\\n    margin-left: 20px;\\n}\\n\\n.osh-rangeslider-control a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control-select a{\\n    text-decoration: none;\\n}\\n\\n.osh-rangeslider-control a:after {\\n    font-family: FontAwesome;\\n    content: \\"\\\\f044\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n\\n.osh-rangeslider-control-select a:after{\\n    font-family: FontAwesome;\\n    content: \\"\\\\f046\\";\\n    vertical-align: middle;\\n    font-size:30px;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3Mvbm9VSVNsaWRlci5jc3M/ZjgwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQTBHO0FBQ3BKLHdDQUF3QyxtQkFBTyxDQUFDLEdBQWtKO0FBQ2xNO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUyxrQkFBa0IsMEJBQTBCLHVDQUF1Qyw2QkFBNkIsZ0NBQWdDLHdCQUF3QixtQkFBbUIsbUJBQW1CLGtCQUFrQixtQkFBbUIsbUJBQW1CLCtCQUErQixHQUFHLHFEQUFxRCxnQkFBZ0IsR0FBRyx1REFBdUQsZ0JBQWdCLEdBQUcsbUJBQW1CLCtDQUErQyxHQUFHLHlCQUF5QixvQkFBb0IseUJBQXlCLGtDQUFrQyxHQUFHLHlCQUF5QixrQkFBa0IseUJBQXlCLGlCQUFpQixnQkFBZ0Isd0JBQXdCLGVBQWUsZ0JBQWdCLDBDQUEwQywyQ0FBMkMsdUJBQXVCLHFDQUFxQyxHQUFHLDJCQUEyQiw0QkFBNEIsR0FBRywyQkFBMkIsK0NBQStDLHNCQUFzQixrQkFBa0IsR0FBRyx3QkFBd0IsK0JBQStCLEdBQUcsaUZBQWlGLGlCQUFpQixHQUFHLDhCQUE4QixrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLHFDQUFxQyxrQkFBa0Isa0JBQWtCLHdCQUF3QixHQUFHLCtCQUErQiw0QkFBNEIsR0FBRyxzQ0FBc0MsNEJBQTRCLEdBQUcsc0NBQXNDLCtCQUErQiwwQkFBMEIsNkJBQTZCLHFCQUFxQixHQUFHLDRDQUE0QywrQkFBK0IsMEJBQTBCLDZCQUE2QixxQkFBcUIsR0FBRztBQUNqM0Q7QUFDQSIsImZpbGUiOiIxODYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCItIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS1hZHZhbmNlZC12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnQtYXdlc29tZS00LjYuMy9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3NcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbmV4cG9ydHMuaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubm9VaS10b29sdGlwIHtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA1cHggMHB4ICM3Nzc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM3Nzc7XFxuICAgIGZpbHRlcjogYWxwaGEob3BhY2l0eT04MCk7XFxuICAgIC1tb3otb3BhY2l0eTogMC44O1xcbiAgICBvcGFjaXR5OiAwLjg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY29sb3I6ICNGRkY7XFxuICAgIHdpZHRoOiAxMDBweDtcXG4gICAgaGVpZ2h0OiAyM3B4O1xcbiAgICBwYWRkaW5nOiAycHggMnB4IDJweCAycHg7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLWxvd2VyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlLXVwcGVyIC5ub1VpLXRvb2x0aXAge1xcbiAgICB0b3A6IDM1cHg7XFxufVxcblxcbi5ub1VpLWNvbm5lY3Qge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDUsIDEwNywgMTY2LCAwLjYpO1xcbn1cXG5cXG4ubm9VaS10b29sdGlwOmFmdGVyIHtcXG4gICAgYm90dG9tOiAtMTRweDtcXG4gICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xcbiAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICNmZmY7XFxufVxcblxcbi5ub1VpLXRvb2x0aXA6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IC0xMHB4O1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIG1hcmdpbi1sZWZ0OiAtOXB4O1xcbiAgICB3aWR0aDogMDtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBib3JkZXItbGVmdDogMTBweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItdG9wOiBub25lO1xcbiAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICM3Nzc7XFxufVxcblxcbi5ub1VpLXBpcHMtaG9yaXpvbnRhbCB7XFxuICAgIGhlaWdodDowcHggIWltcG9ydGFudDtcXG59XFxuXFxuXFxuLm5vVWktaGFuZGxlOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNSwgMTA3LCAxNjYsIDAuNik7XFxuICAgIGJveC1zaGFkb3c6bm9uZTtcXG4gICAgYm9yZGVyOm5vbmU7XFxufVxcblxcblxcbi5ub1VpLWhvcml6b250YWwge1xcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNTBweCk7XFxufVxcblxcbi8qKiBwdXQgcmFuZ2UgYW5kIGNvbnRyb2wgYnV0dG9uIHNpZGUgYnkgc2lkZSAqKi9cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLXNsaWRlcntcXG4gICAgZmxvYXQ6bGVmdDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sIHtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIHdpZHRoOiAzMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcXG59XFxuXFxuLm9zaC1yYW5nZXNsaWRlci1jb250cm9sLXNlbGVjdCB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICB3aWR0aDogMzBweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbCBhe1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYXtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG4ub3NoLXJhbmdlc2xpZGVyLWNvbnRyb2wgYTphZnRlciB7XFxuICAgIGZvbnQtZmFtaWx5OiBGb250QXdlc29tZTtcXG4gICAgY29udGVudDogXFxcIlxcXFxmMDQ0XFxcIjtcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gICAgZm9udC1zaXplOjMwcHg7XFxufVxcblxcbi5vc2gtcmFuZ2VzbGlkZXItY29udHJvbC1zZWxlY3QgYTphZnRlcntcXG4gICAgZm9udC1mYW1pbHk6IEZvbnRBd2Vzb21lO1xcbiAgICBjb250ZW50OiBcXFwiXFxcXGYwNDZcXFwiO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICBmb250LXNpemU6MzBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///186\n')},187:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nvar ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(27);\nvar ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(188);\nvar ___CSS_LOADER_URL_IMPORT_1___ = __webpack_require__(189);\nvar ___CSS_LOADER_URL_IMPORT_2___ = __webpack_require__(190);\nvar ___CSS_LOADER_URL_IMPORT_3___ = __webpack_require__(191);\nvar ___CSS_LOADER_URL_IMPORT_4___ = __webpack_require__(192);\nvar ___CSS_LOADER_URL_IMPORT_5___ = __webpack_require__(193);\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___, { hash: "?#iefix&v=4.6.3" });\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\nvar ___CSS_LOADER_URL_REPLACEMENT_4___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_4___);\nvar ___CSS_LOADER_URL_REPLACEMENT_5___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_5___, { hash: "#fontawesomeregular" });\n// Module\nexports.push([module.i, "/*!\\n *  Font Awesome 4.6.3 by @davegandy - http://fontawesome.io - @fontawesome\\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\\n */@font-face{font-family:\'FontAwesome\';src:url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");src:url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format(\'embedded-opentype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format(\'woff2\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format(\'woff\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format(\'truetype\'),url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ") format(\'svg\');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}  .fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%}  .fa-2x{font-size:2em}  .fa-3x{font-size:3em}  .fa-4x{font-size:4em}  .fa-5x{font-size:5em}  .fa-fw{width:1.28571429em;text-align:center}  .fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none}  .fa-ul>li{position:relative}  .fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center}  .fa-li.fa-lg{left:-1.85714286em}  .fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em}  .fa-pull-left{float:left}  .fa-pull-right{float:right}  .fa.fa-pull-left{margin-right:.3em}  .fa.fa-pull-right{margin-left:.3em}  .pull-right{float:right}  .pull-left{float:left}  .fa.pull-left{margin-right:.3em}  .fa.pull-right{margin-left:.3em}  .fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}  .fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}  @-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  @keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}}  .fa-rotate-90{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\\";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)}  .fa-rotate-180{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\\";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)}  .fa-rotate-270{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\\";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)}  .fa-flip-horizontal{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\\";-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)}  .fa-flip-vertical{-ms-filter:\\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\\";-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)}  :root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none}  .fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle}  .fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center}  .fa-stack-1x{line-height:inherit}  .fa-stack-2x{font-size:2em}  .fa-inverse{color:#fff}  .fa-glass:before{content:\\"\\\\f000\\"}  .fa-music:before{content:\\"\\\\f001\\"}  .fa-search:before{content:\\"\\\\f002\\"}  .fa-envelope-o:before{content:\\"\\\\f003\\"}  .fa-heart:before{content:\\"\\\\f004\\"}  .fa-star:before{content:\\"\\\\f005\\"}  .fa-star-o:before{content:\\"\\\\f006\\"}  .fa-user:before{content:\\"\\\\f007\\"}  .fa-film:before{content:\\"\\\\f008\\"}  .fa-th-large:before{content:\\"\\\\f009\\"}  .fa-th:before{content:\\"\\\\f00a\\"}  .fa-th-list:before{content:\\"\\\\f00b\\"}  .fa-check:before{content:\\"\\\\f00c\\"}  .fa-remove:before,.fa-close:before,.fa-times:before{content:\\"\\\\f00d\\"}  .fa-search-plus:before{content:\\"\\\\f00e\\"}  .fa-search-minus:before{content:\\"\\\\f010\\"}  .fa-power-off:before{content:\\"\\\\f011\\"}  .fa-signal:before{content:\\"\\\\f012\\"}  .fa-gear:before,.fa-cog:before{content:\\"\\\\f013\\"}  .fa-trash-o:before{content:\\"\\\\f014\\"}  .fa-home:before{content:\\"\\\\f015\\"}  .fa-file-o:before{content:\\"\\\\f016\\"}  .fa-clock-o:before{content:\\"\\\\f017\\"}  .fa-road:before{content:\\"\\\\f018\\"}  .fa-download:before{content:\\"\\\\f019\\"}  .fa-arrow-circle-o-down:before{content:\\"\\\\f01a\\"}  .fa-arrow-circle-o-up:before{content:\\"\\\\f01b\\"}  .fa-inbox:before{content:\\"\\\\f01c\\"}  .fa-play-circle-o:before{content:\\"\\\\f01d\\"}  .fa-rotate-right:before,.fa-repeat:before{content:\\"\\\\f01e\\"}  .fa-refresh:before{content:\\"\\\\f021\\"}  .fa-list-alt:before{content:\\"\\\\f022\\"}  .fa-lock:before{content:\\"\\\\f023\\"}  .fa-flag:before{content:\\"\\\\f024\\"}  .fa-headphones:before{content:\\"\\\\f025\\"}  .fa-volume-off:before{content:\\"\\\\f026\\"}  .fa-volume-down:before{content:\\"\\\\f027\\"}  .fa-volume-up:before{content:\\"\\\\f028\\"}  .fa-qrcode:before{content:\\"\\\\f029\\"}  .fa-barcode:before{content:\\"\\\\f02a\\"}  .fa-tag:before{content:\\"\\\\f02b\\"}  .fa-tags:before{content:\\"\\\\f02c\\"}  .fa-book:before{content:\\"\\\\f02d\\"}  .fa-bookmark:before{content:\\"\\\\f02e\\"}  .fa-print:before{content:\\"\\\\f02f\\"}  .fa-camera:before{content:\\"\\\\f030\\"}  .fa-font:before{content:\\"\\\\f031\\"}  .fa-bold:before{content:\\"\\\\f032\\"}  .fa-italic:before{content:\\"\\\\f033\\"}  .fa-text-height:before{content:\\"\\\\f034\\"}  .fa-text-width:before{content:\\"\\\\f035\\"}  .fa-align-left:before{content:\\"\\\\f036\\"}  .fa-align-center:before{content:\\"\\\\f037\\"}  .fa-align-right:before{content:\\"\\\\f038\\"}  .fa-align-justify:before{content:\\"\\\\f039\\"}  .fa-list:before{content:\\"\\\\f03a\\"}  .fa-dedent:before,.fa-outdent:before{content:\\"\\\\f03b\\"}  .fa-indent:before{content:\\"\\\\f03c\\"}  .fa-video-camera:before{content:\\"\\\\f03d\\"}  .fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\\"\\\\f03e\\"}  .fa-pencil:before{content:\\"\\\\f040\\"}  .fa-map-marker:before{content:\\"\\\\f041\\"}  .fa-adjust:before{content:\\"\\\\f042\\"}  .fa-tint:before{content:\\"\\\\f043\\"}  .fa-edit:before,.fa-pencil-square-o:before{content:\\"\\\\f044\\"}  .fa-share-square-o:before{content:\\"\\\\f045\\"}  .fa-check-square-o:before{content:\\"\\\\f046\\"}  .fa-arrows:before{content:\\"\\\\f047\\"}  .fa-step-backward:before{content:\\"\\\\f048\\"}  .fa-fast-backward:before{content:\\"\\\\f049\\"}  .fa-backward:before{content:\\"\\\\f04a\\"}  .fa-play:before{content:\\"\\\\f04b\\"}  .fa-pause:before{content:\\"\\\\f04c\\"}  .fa-stop:before{content:\\"\\\\f04d\\"}  .fa-forward:before{content:\\"\\\\f04e\\"}  .fa-fast-forward:before{content:\\"\\\\f050\\"}  .fa-step-forward:before{content:\\"\\\\f051\\"}  .fa-eject:before{content:\\"\\\\f052\\"}  .fa-chevron-left:before{content:\\"\\\\f053\\"}  .fa-chevron-right:before{content:\\"\\\\f054\\"}  .fa-plus-circle:before{content:\\"\\\\f055\\"}  .fa-minus-circle:before{content:\\"\\\\f056\\"}  .fa-times-circle:before{content:\\"\\\\f057\\"}  .fa-check-circle:before{content:\\"\\\\f058\\"}  .fa-question-circle:before{content:\\"\\\\f059\\"}  .fa-info-circle:before{content:\\"\\\\f05a\\"}  .fa-crosshairs:before{content:\\"\\\\f05b\\"}  .fa-times-circle-o:before{content:\\"\\\\f05c\\"}  .fa-check-circle-o:before{content:\\"\\\\f05d\\"}  .fa-ban:before{content:\\"\\\\f05e\\"}  .fa-arrow-left:before{content:\\"\\\\f060\\"}  .fa-arrow-right:before{content:\\"\\\\f061\\"}  .fa-arrow-up:before{content:\\"\\\\f062\\"}  .fa-arrow-down:before{content:\\"\\\\f063\\"}  .fa-mail-forward:before,.fa-share:before{content:\\"\\\\f064\\"}  .fa-expand:before{content:\\"\\\\f065\\"}  .fa-compress:before{content:\\"\\\\f066\\"}  .fa-plus:before{content:\\"\\\\f067\\"}  .fa-minus:before{content:\\"\\\\f068\\"}  .fa-asterisk:before{content:\\"\\\\f069\\"}  .fa-exclamation-circle:before{content:\\"\\\\f06a\\"}  .fa-gift:before{content:\\"\\\\f06b\\"}  .fa-leaf:before{content:\\"\\\\f06c\\"}  .fa-fire:before{content:\\"\\\\f06d\\"}  .fa-eye:before{content:\\"\\\\f06e\\"}  .fa-eye-slash:before{content:\\"\\\\f070\\"}  .fa-warning:before,.fa-exclamation-triangle:before{content:\\"\\\\f071\\"}  .fa-plane:before{content:\\"\\\\f072\\"}  .fa-calendar:before{content:\\"\\\\f073\\"}  .fa-random:before{content:\\"\\\\f074\\"}  .fa-comment:before{content:\\"\\\\f075\\"}  .fa-magnet:before{content:\\"\\\\f076\\"}  .fa-chevron-up:before{content:\\"\\\\f077\\"}  .fa-chevron-down:before{content:\\"\\\\f078\\"}  .fa-retweet:before{content:\\"\\\\f079\\"}  .fa-shopping-cart:before{content:\\"\\\\f07a\\"}  .fa-folder:before{content:\\"\\\\f07b\\"}  .fa-folder-open:before{content:\\"\\\\f07c\\"}  .fa-arrows-v:before{content:\\"\\\\f07d\\"}  .fa-arrows-h:before{content:\\"\\\\f07e\\"}  .fa-bar-chart-o:before,.fa-bar-chart:before{content:\\"\\\\f080\\"}  .fa-twitter-square:before{content:\\"\\\\f081\\"}  .fa-facebook-square:before{content:\\"\\\\f082\\"}  .fa-camera-retro:before{content:\\"\\\\f083\\"}  .fa-key:before{content:\\"\\\\f084\\"}  .fa-gears:before,.fa-cogs:before{content:\\"\\\\f085\\"}  .fa-comments:before{content:\\"\\\\f086\\"}  .fa-thumbs-o-up:before{content:\\"\\\\f087\\"}  .fa-thumbs-o-down:before{content:\\"\\\\f088\\"}  .fa-star-half:before{content:\\"\\\\f089\\"}  .fa-heart-o:before{content:\\"\\\\f08a\\"}  .fa-sign-out:before{content:\\"\\\\f08b\\"}  .fa-linkedin-square:before{content:\\"\\\\f08c\\"}  .fa-thumb-tack:before{content:\\"\\\\f08d\\"}  .fa-external-link:before{content:\\"\\\\f08e\\"}  .fa-sign-in:before{content:\\"\\\\f090\\"}  .fa-trophy:before{content:\\"\\\\f091\\"}  .fa-github-square:before{content:\\"\\\\f092\\"}  .fa-upload:before{content:\\"\\\\f093\\"}  .fa-lemon-o:before{content:\\"\\\\f094\\"}  .fa-phone:before{content:\\"\\\\f095\\"}  .fa-square-o:before{content:\\"\\\\f096\\"}  .fa-bookmark-o:before{content:\\"\\\\f097\\"}  .fa-phone-square:before{content:\\"\\\\f098\\"}  .fa-twitter:before{content:\\"\\\\f099\\"}  .fa-facebook-f:before,.fa-facebook:before{content:\\"\\\\f09a\\"}  .fa-github:before{content:\\"\\\\f09b\\"}  .fa-unlock:before{content:\\"\\\\f09c\\"}  .fa-credit-card:before{content:\\"\\\\f09d\\"}  .fa-feed:before,.fa-rss:before{content:\\"\\\\f09e\\"}  .fa-hdd-o:before{content:\\"\\\\f0a0\\"}  .fa-bullhorn:before{content:\\"\\\\f0a1\\"}  .fa-bell:before{content:\\"\\\\f0f3\\"}  .fa-certificate:before{content:\\"\\\\f0a3\\"}  .fa-hand-o-right:before{content:\\"\\\\f0a4\\"}  .fa-hand-o-left:before{content:\\"\\\\f0a5\\"}  .fa-hand-o-up:before{content:\\"\\\\f0a6\\"}  .fa-hand-o-down:before{content:\\"\\\\f0a7\\"}  .fa-arrow-circle-left:before{content:\\"\\\\f0a8\\"}  .fa-arrow-circle-right:before{content:\\"\\\\f0a9\\"}  .fa-arrow-circle-up:before{content:\\"\\\\f0aa\\"}  .fa-arrow-circle-down:before{content:\\"\\\\f0ab\\"}  .fa-globe:before{content:\\"\\\\f0ac\\"}  .fa-wrench:before{content:\\"\\\\f0ad\\"}  .fa-tasks:before{content:\\"\\\\f0ae\\"}  .fa-filter:before{content:\\"\\\\f0b0\\"}  .fa-briefcase:before{content:\\"\\\\f0b1\\"}  .fa-arrows-alt:before{content:\\"\\\\f0b2\\"}  .fa-group:before,.fa-users:before{content:\\"\\\\f0c0\\"}  .fa-chain:before,.fa-link:before{content:\\"\\\\f0c1\\"}  .fa-cloud:before{content:\\"\\\\f0c2\\"}  .fa-flask:before{content:\\"\\\\f0c3\\"}  .fa-cut:before,.fa-scissors:before{content:\\"\\\\f0c4\\"}  .fa-copy:before,.fa-files-o:before{content:\\"\\\\f0c5\\"}  .fa-paperclip:before{content:\\"\\\\f0c6\\"}  .fa-save:before,.fa-floppy-o:before{content:\\"\\\\f0c7\\"}  .fa-square:before{content:\\"\\\\f0c8\\"}  .fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\\"\\\\f0c9\\"}  .fa-list-ul:before{content:\\"\\\\f0ca\\"}  .fa-list-ol:before{content:\\"\\\\f0cb\\"}  .fa-strikethrough:before{content:\\"\\\\f0cc\\"}  .fa-underline:before{content:\\"\\\\f0cd\\"}  .fa-table:before{content:\\"\\\\f0ce\\"}  .fa-magic:before{content:\\"\\\\f0d0\\"}  .fa-truck:before{content:\\"\\\\f0d1\\"}  .fa-pinterest:before{content:\\"\\\\f0d2\\"}  .fa-pinterest-square:before{content:\\"\\\\f0d3\\"}  .fa-google-plus-square:before{content:\\"\\\\f0d4\\"}  .fa-google-plus:before{content:\\"\\\\f0d5\\"}  .fa-money:before{content:\\"\\\\f0d6\\"}  .fa-caret-down:before{content:\\"\\\\f0d7\\"}  .fa-caret-up:before{content:\\"\\\\f0d8\\"}  .fa-caret-left:before{content:\\"\\\\f0d9\\"}  .fa-caret-right:before{content:\\"\\\\f0da\\"}  .fa-columns:before{content:\\"\\\\f0db\\"}  .fa-unsorted:before,.fa-sort:before{content:\\"\\\\f0dc\\"}  .fa-sort-down:before,.fa-sort-desc:before{content:\\"\\\\f0dd\\"}  .fa-sort-up:before,.fa-sort-asc:before{content:\\"\\\\f0de\\"}  .fa-envelope:before{content:\\"\\\\f0e0\\"}  .fa-linkedin:before{content:\\"\\\\f0e1\\"}  .fa-rotate-left:before,.fa-undo:before{content:\\"\\\\f0e2\\"}  .fa-legal:before,.fa-gavel:before{content:\\"\\\\f0e3\\"}  .fa-dashboard:before,.fa-tachometer:before{content:\\"\\\\f0e4\\"}  .fa-comment-o:before{content:\\"\\\\f0e5\\"}  .fa-comments-o:before{content:\\"\\\\f0e6\\"}  .fa-flash:before,.fa-bolt:before{content:\\"\\\\f0e7\\"}  .fa-sitemap:before{content:\\"\\\\f0e8\\"}  .fa-umbrella:before{content:\\"\\\\f0e9\\"}  .fa-paste:before,.fa-clipboard:before{content:\\"\\\\f0ea\\"}  .fa-lightbulb-o:before{content:\\"\\\\f0eb\\"}  .fa-exchange:before{content:\\"\\\\f0ec\\"}  .fa-cloud-download:before{content:\\"\\\\f0ed\\"}  .fa-cloud-upload:before{content:\\"\\\\f0ee\\"}  .fa-user-md:before{content:\\"\\\\f0f0\\"}  .fa-stethoscope:before{content:\\"\\\\f0f1\\"}  .fa-suitcase:before{content:\\"\\\\f0f2\\"}  .fa-bell-o:before{content:\\"\\\\f0a2\\"}  .fa-coffee:before{content:\\"\\\\f0f4\\"}  .fa-cutlery:before{content:\\"\\\\f0f5\\"}  .fa-file-text-o:before{content:\\"\\\\f0f6\\"}  .fa-building-o:before{content:\\"\\\\f0f7\\"}  .fa-hospital-o:before{content:\\"\\\\f0f8\\"}  .fa-ambulance:before{content:\\"\\\\f0f9\\"}  .fa-medkit:before{content:\\"\\\\f0fa\\"}  .fa-fighter-jet:before{content:\\"\\\\f0fb\\"}  .fa-beer:before{content:\\"\\\\f0fc\\"}  .fa-h-square:before{content:\\"\\\\f0fd\\"}  .fa-plus-square:before{content:\\"\\\\f0fe\\"}  .fa-angle-double-left:before{content:\\"\\\\f100\\"}  .fa-angle-double-right:before{content:\\"\\\\f101\\"}  .fa-angle-double-up:before{content:\\"\\\\f102\\"}  .fa-angle-double-down:before{content:\\"\\\\f103\\"}  .fa-angle-left:before{content:\\"\\\\f104\\"}  .fa-angle-right:before{content:\\"\\\\f105\\"}  .fa-angle-up:before{content:\\"\\\\f106\\"}  .fa-angle-down:before{content:\\"\\\\f107\\"}  .fa-desktop:before{content:\\"\\\\f108\\"}  .fa-laptop:before{content:\\"\\\\f109\\"}  .fa-tablet:before{content:\\"\\\\f10a\\"}  .fa-mobile-phone:before,.fa-mobile:before{content:\\"\\\\f10b\\"}  .fa-circle-o:before{content:\\"\\\\f10c\\"}  .fa-quote-left:before{content:\\"\\\\f10d\\"}  .fa-quote-right:before{content:\\"\\\\f10e\\"}  .fa-spinner:before{content:\\"\\\\f110\\"}  .fa-circle:before{content:\\"\\\\f111\\"}  .fa-mail-reply:before,.fa-reply:before{content:\\"\\\\f112\\"}  .fa-github-alt:before{content:\\"\\\\f113\\"}  .fa-folder-o:before{content:\\"\\\\f114\\"}  .fa-folder-open-o:before{content:\\"\\\\f115\\"}  .fa-smile-o:before{content:\\"\\\\f118\\"}  .fa-frown-o:before{content:\\"\\\\f119\\"}  .fa-meh-o:before{content:\\"\\\\f11a\\"}  .fa-gamepad:before{content:\\"\\\\f11b\\"}  .fa-keyboard-o:before{content:\\"\\\\f11c\\"}  .fa-flag-o:before{content:\\"\\\\f11d\\"}  .fa-flag-checkered:before{content:\\"\\\\f11e\\"}  .fa-terminal:before{content:\\"\\\\f120\\"}  .fa-code:before{content:\\"\\\\f121\\"}  .fa-mail-reply-all:before,.fa-reply-all:before{content:\\"\\\\f122\\"}  .fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\\"\\\\f123\\"}  .fa-location-arrow:before{content:\\"\\\\f124\\"}  .fa-crop:before{content:\\"\\\\f125\\"}  .fa-code-fork:before{content:\\"\\\\f126\\"}  .fa-unlink:before,.fa-chain-broken:before{content:\\"\\\\f127\\"}  .fa-question:before{content:\\"\\\\f128\\"}  .fa-info:before{content:\\"\\\\f129\\"}  .fa-exclamation:before{content:\\"\\\\f12a\\"}  .fa-superscript:before{content:\\"\\\\f12b\\"}  .fa-subscript:before{content:\\"\\\\f12c\\"}  .fa-eraser:before{content:\\"\\\\f12d\\"}  .fa-puzzle-piece:before{content:\\"\\\\f12e\\"}  .fa-microphone:before{content:\\"\\\\f130\\"}  .fa-microphone-slash:before{content:\\"\\\\f131\\"}  .fa-shield:before{content:\\"\\\\f132\\"}  .fa-calendar-o:before{content:\\"\\\\f133\\"}  .fa-fire-extinguisher:before{content:\\"\\\\f134\\"}  .fa-rocket:before{content:\\"\\\\f135\\"}  .fa-maxcdn:before{content:\\"\\\\f136\\"}  .fa-chevron-circle-left:before{content:\\"\\\\f137\\"}  .fa-chevron-circle-right:before{content:\\"\\\\f138\\"}  .fa-chevron-circle-up:before{content:\\"\\\\f139\\"}  .fa-chevron-circle-down:before{content:\\"\\\\f13a\\"}  .fa-html5:before{content:\\"\\\\f13b\\"}  .fa-css3:before{content:\\"\\\\f13c\\"}  .fa-anchor:before{content:\\"\\\\f13d\\"}  .fa-unlock-alt:before{content:\\"\\\\f13e\\"}  .fa-bullseye:before{content:\\"\\\\f140\\"}  .fa-ellipsis-h:before{content:\\"\\\\f141\\"}  .fa-ellipsis-v:before{content:\\"\\\\f142\\"}  .fa-rss-square:before{content:\\"\\\\f143\\"}  .fa-play-circle:before{content:\\"\\\\f144\\"}  .fa-ticket:before{content:\\"\\\\f145\\"}  .fa-minus-square:before{content:\\"\\\\f146\\"}  .fa-minus-square-o:before{content:\\"\\\\f147\\"}  .fa-level-up:before{content:\\"\\\\f148\\"}  .fa-level-down:before{content:\\"\\\\f149\\"}  .fa-check-square:before{content:\\"\\\\f14a\\"}  .fa-pencil-square:before{content:\\"\\\\f14b\\"}  .fa-external-link-square:before{content:\\"\\\\f14c\\"}  .fa-share-square:before{content:\\"\\\\f14d\\"}  .fa-compass:before{content:\\"\\\\f14e\\"}  .fa-toggle-down:before,.fa-caret-square-o-down:before{content:\\"\\\\f150\\"}  .fa-toggle-up:before,.fa-caret-square-o-up:before{content:\\"\\\\f151\\"}  .fa-toggle-right:before,.fa-caret-square-o-right:before{content:\\"\\\\f152\\"}  .fa-euro:before,.fa-eur:before{content:\\"\\\\f153\\"}  .fa-gbp:before{content:\\"\\\\f154\\"}  .fa-dollar:before,.fa-usd:before{content:\\"\\\\f155\\"}  .fa-rupee:before,.fa-inr:before{content:\\"\\\\f156\\"}  .fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\\"\\\\f157\\"}  .fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\\"\\\\f158\\"}  .fa-won:before,.fa-krw:before{content:\\"\\\\f159\\"}  .fa-bitcoin:before,.fa-btc:before{content:\\"\\\\f15a\\"}  .fa-file:before{content:\\"\\\\f15b\\"}  .fa-file-text:before{content:\\"\\\\f15c\\"}  .fa-sort-alpha-asc:before{content:\\"\\\\f15d\\"}  .fa-sort-alpha-desc:before{content:\\"\\\\f15e\\"}  .fa-sort-amount-asc:before{content:\\"\\\\f160\\"}  .fa-sort-amount-desc:before{content:\\"\\\\f161\\"}  .fa-sort-numeric-asc:before{content:\\"\\\\f162\\"}  .fa-sort-numeric-desc:before{content:\\"\\\\f163\\"}  .fa-thumbs-up:before{content:\\"\\\\f164\\"}  .fa-thumbs-down:before{content:\\"\\\\f165\\"}  .fa-youtube-square:before{content:\\"\\\\f166\\"}  .fa-youtube:before{content:\\"\\\\f167\\"}  .fa-xing:before{content:\\"\\\\f168\\"}  .fa-xing-square:before{content:\\"\\\\f169\\"}  .fa-youtube-play:before{content:\\"\\\\f16a\\"}  .fa-dropbox:before{content:\\"\\\\f16b\\"}  .fa-stack-overflow:before{content:\\"\\\\f16c\\"}  .fa-instagram:before{content:\\"\\\\f16d\\"}  .fa-flickr:before{content:\\"\\\\f16e\\"}  .fa-adn:before{content:\\"\\\\f170\\"}  .fa-bitbucket:before{content:\\"\\\\f171\\"}  .fa-bitbucket-square:before{content:\\"\\\\f172\\"}  .fa-tumblr:before{content:\\"\\\\f173\\"}  .fa-tumblr-square:before{content:\\"\\\\f174\\"}  .fa-long-arrow-down:before{content:\\"\\\\f175\\"}  .fa-long-arrow-up:before{content:\\"\\\\f176\\"}  .fa-long-arrow-left:before{content:\\"\\\\f177\\"}  .fa-long-arrow-right:before{content:\\"\\\\f178\\"}  .fa-apple:before{content:\\"\\\\f179\\"}  .fa-windows:before{content:\\"\\\\f17a\\"}  .fa-android:before{content:\\"\\\\f17b\\"}  .fa-linux:before{content:\\"\\\\f17c\\"}  .fa-dribbble:before{content:\\"\\\\f17d\\"}  .fa-skype:before{content:\\"\\\\f17e\\"}  .fa-foursquare:before{content:\\"\\\\f180\\"}  .fa-trello:before{content:\\"\\\\f181\\"}  .fa-female:before{content:\\"\\\\f182\\"}  .fa-male:before{content:\\"\\\\f183\\"}  .fa-gittip:before,.fa-gratipay:before{content:\\"\\\\f184\\"}  .fa-sun-o:before{content:\\"\\\\f185\\"}  .fa-moon-o:before{content:\\"\\\\f186\\"}  .fa-archive:before{content:\\"\\\\f187\\"}  .fa-bug:before{content:\\"\\\\f188\\"}  .fa-vk:before{content:\\"\\\\f189\\"}  .fa-weibo:before{content:\\"\\\\f18a\\"}  .fa-renren:before{content:\\"\\\\f18b\\"}  .fa-pagelines:before{content:\\"\\\\f18c\\"}  .fa-stack-exchange:before{content:\\"\\\\f18d\\"}  .fa-arrow-circle-o-right:before{content:\\"\\\\f18e\\"}  .fa-arrow-circle-o-left:before{content:\\"\\\\f190\\"}  .fa-toggle-left:before,.fa-caret-square-o-left:before{content:\\"\\\\f191\\"}  .fa-dot-circle-o:before{content:\\"\\\\f192\\"}  .fa-wheelchair:before{content:\\"\\\\f193\\"}  .fa-vimeo-square:before{content:\\"\\\\f194\\"}  .fa-turkish-lira:before,.fa-try:before{content:\\"\\\\f195\\"}  .fa-plus-square-o:before{content:\\"\\\\f196\\"}  .fa-space-shuttle:before{content:\\"\\\\f197\\"}  .fa-slack:before{content:\\"\\\\f198\\"}  .fa-envelope-square:before{content:\\"\\\\f199\\"}  .fa-wordpress:before{content:\\"\\\\f19a\\"}  .fa-openid:before{content:\\"\\\\f19b\\"}  .fa-institution:before,.fa-bank:before,.fa-university:before{content:\\"\\\\f19c\\"}  .fa-mortar-board:before,.fa-graduation-cap:before{content:\\"\\\\f19d\\"}  .fa-yahoo:before{content:\\"\\\\f19e\\"}  .fa-google:before{content:\\"\\\\f1a0\\"}  .fa-reddit:before{content:\\"\\\\f1a1\\"}  .fa-reddit-square:before{content:\\"\\\\f1a2\\"}  .fa-stumbleupon-circle:before{content:\\"\\\\f1a3\\"}  .fa-stumbleupon:before{content:\\"\\\\f1a4\\"}  .fa-delicious:before{content:\\"\\\\f1a5\\"}  .fa-digg:before{content:\\"\\\\f1a6\\"}  .fa-pied-piper-pp:before{content:\\"\\\\f1a7\\"}  .fa-pied-piper-alt:before{content:\\"\\\\f1a8\\"}  .fa-drupal:before{content:\\"\\\\f1a9\\"}  .fa-joomla:before{content:\\"\\\\f1aa\\"}  .fa-language:before{content:\\"\\\\f1ab\\"}  .fa-fax:before{content:\\"\\\\f1ac\\"}  .fa-building:before{content:\\"\\\\f1ad\\"}  .fa-child:before{content:\\"\\\\f1ae\\"}  .fa-paw:before{content:\\"\\\\f1b0\\"}  .fa-spoon:before{content:\\"\\\\f1b1\\"}  .fa-cube:before{content:\\"\\\\f1b2\\"}  .fa-cubes:before{content:\\"\\\\f1b3\\"}  .fa-behance:before{content:\\"\\\\f1b4\\"}  .fa-behance-square:before{content:\\"\\\\f1b5\\"}  .fa-steam:before{content:\\"\\\\f1b6\\"}  .fa-steam-square:before{content:\\"\\\\f1b7\\"}  .fa-recycle:before{content:\\"\\\\f1b8\\"}  .fa-automobile:before,.fa-car:before{content:\\"\\\\f1b9\\"}  .fa-cab:before,.fa-taxi:before{content:\\"\\\\f1ba\\"}  .fa-tree:before{content:\\"\\\\f1bb\\"}  .fa-spotify:before{content:\\"\\\\f1bc\\"}  .fa-deviantart:before{content:\\"\\\\f1bd\\"}  .fa-soundcloud:before{content:\\"\\\\f1be\\"}  .fa-database:before{content:\\"\\\\f1c0\\"}  .fa-file-pdf-o:before{content:\\"\\\\f1c1\\"}  .fa-file-word-o:before{content:\\"\\\\f1c2\\"}  .fa-file-excel-o:before{content:\\"\\\\f1c3\\"}  .fa-file-powerpoint-o:before{content:\\"\\\\f1c4\\"}  .fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\\"\\\\f1c5\\"}  .fa-file-zip-o:before,.fa-file-archive-o:before{content:\\"\\\\f1c6\\"}  .fa-file-sound-o:before,.fa-file-audio-o:before{content:\\"\\\\f1c7\\"}  .fa-file-movie-o:before,.fa-file-video-o:before{content:\\"\\\\f1c8\\"}  .fa-file-code-o:before{content:\\"\\\\f1c9\\"}  .fa-vine:before{content:\\"\\\\f1ca\\"}  .fa-codepen:before{content:\\"\\\\f1cb\\"}  .fa-jsfiddle:before{content:\\"\\\\f1cc\\"}  .fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\\"\\\\f1cd\\"}  .fa-circle-o-notch:before{content:\\"\\\\f1ce\\"}  .fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:\\"\\\\f1d0\\"}  .fa-ge:before,.fa-empire:before{content:\\"\\\\f1d1\\"}  .fa-git-square:before{content:\\"\\\\f1d2\\"}  .fa-git:before{content:\\"\\\\f1d3\\"}  .fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:\\"\\\\f1d4\\"}  .fa-tencent-weibo:before{content:\\"\\\\f1d5\\"}  .fa-qq:before{content:\\"\\\\f1d6\\"}  .fa-wechat:before,.fa-weixin:before{content:\\"\\\\f1d7\\"}  .fa-send:before,.fa-paper-plane:before{content:\\"\\\\f1d8\\"}  .fa-send-o:before,.fa-paper-plane-o:before{content:\\"\\\\f1d9\\"}  .fa-history:before{content:\\"\\\\f1da\\"}  .fa-circle-thin:before{content:\\"\\\\f1db\\"}  .fa-header:before{content:\\"\\\\f1dc\\"}  .fa-paragraph:before{content:\\"\\\\f1dd\\"}  .fa-sliders:before{content:\\"\\\\f1de\\"}  .fa-share-alt:before{content:\\"\\\\f1e0\\"}  .fa-share-alt-square:before{content:\\"\\\\f1e1\\"}  .fa-bomb:before{content:\\"\\\\f1e2\\"}  .fa-soccer-ball-o:before,.fa-futbol-o:before{content:\\"\\\\f1e3\\"}  .fa-tty:before{content:\\"\\\\f1e4\\"}  .fa-binoculars:before{content:\\"\\\\f1e5\\"}  .fa-plug:before{content:\\"\\\\f1e6\\"}  .fa-slideshare:before{content:\\"\\\\f1e7\\"}  .fa-twitch:before{content:\\"\\\\f1e8\\"}  .fa-yelp:before{content:\\"\\\\f1e9\\"}  .fa-newspaper-o:before{content:\\"\\\\f1ea\\"}  .fa-wifi:before{content:\\"\\\\f1eb\\"}  .fa-calculator:before{content:\\"\\\\f1ec\\"}  .fa-paypal:before{content:\\"\\\\f1ed\\"}  .fa-google-wallet:before{content:\\"\\\\f1ee\\"}  .fa-cc-visa:before{content:\\"\\\\f1f0\\"}  .fa-cc-mastercard:before{content:\\"\\\\f1f1\\"}  .fa-cc-discover:before{content:\\"\\\\f1f2\\"}  .fa-cc-amex:before{content:\\"\\\\f1f3\\"}  .fa-cc-paypal:before{content:\\"\\\\f1f4\\"}  .fa-cc-stripe:before{content:\\"\\\\f1f5\\"}  .fa-bell-slash:before{content:\\"\\\\f1f6\\"}  .fa-bell-slash-o:before{content:\\"\\\\f1f7\\"}  .fa-trash:before{content:\\"\\\\f1f8\\"}  .fa-copyright:before{content:\\"\\\\f1f9\\"}  .fa-at:before{content:\\"\\\\f1fa\\"}  .fa-eyedropper:before{content:\\"\\\\f1fb\\"}  .fa-paint-brush:before{content:\\"\\\\f1fc\\"}  .fa-birthday-cake:before{content:\\"\\\\f1fd\\"}  .fa-area-chart:before{content:\\"\\\\f1fe\\"}  .fa-pie-chart:before{content:\\"\\\\f200\\"}  .fa-line-chart:before{content:\\"\\\\f201\\"}  .fa-lastfm:before{content:\\"\\\\f202\\"}  .fa-lastfm-square:before{content:\\"\\\\f203\\"}  .fa-toggle-off:before{content:\\"\\\\f204\\"}  .fa-toggle-on:before{content:\\"\\\\f205\\"}  .fa-bicycle:before{content:\\"\\\\f206\\"}  .fa-bus:before{content:\\"\\\\f207\\"}  .fa-ioxhost:before{content:\\"\\\\f208\\"}  .fa-angellist:before{content:\\"\\\\f209\\"}  .fa-cc:before{content:\\"\\\\f20a\\"}  .fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\\"\\\\f20b\\"}  .fa-meanpath:before{content:\\"\\\\f20c\\"}  .fa-buysellads:before{content:\\"\\\\f20d\\"}  .fa-connectdevelop:before{content:\\"\\\\f20e\\"}  .fa-dashcube:before{content:\\"\\\\f210\\"}  .fa-forumbee:before{content:\\"\\\\f211\\"}  .fa-leanpub:before{content:\\"\\\\f212\\"}  .fa-sellsy:before{content:\\"\\\\f213\\"}  .fa-shirtsinbulk:before{content:\\"\\\\f214\\"}  .fa-simplybuilt:before{content:\\"\\\\f215\\"}  .fa-skyatlas:before{content:\\"\\\\f216\\"}  .fa-cart-plus:before{content:\\"\\\\f217\\"}  .fa-cart-arrow-down:before{content:\\"\\\\f218\\"}  .fa-diamond:before{content:\\"\\\\f219\\"}  .fa-ship:before{content:\\"\\\\f21a\\"}  .fa-user-secret:before{content:\\"\\\\f21b\\"}  .fa-motorcycle:before{content:\\"\\\\f21c\\"}  .fa-street-view:before{content:\\"\\\\f21d\\"}  .fa-heartbeat:before{content:\\"\\\\f21e\\"}  .fa-venus:before{content:\\"\\\\f221\\"}  .fa-mars:before{content:\\"\\\\f222\\"}  .fa-mercury:before{content:\\"\\\\f223\\"}  .fa-intersex:before,.fa-transgender:before{content:\\"\\\\f224\\"}  .fa-transgender-alt:before{content:\\"\\\\f225\\"}  .fa-venus-double:before{content:\\"\\\\f226\\"}  .fa-mars-double:before{content:\\"\\\\f227\\"}  .fa-venus-mars:before{content:\\"\\\\f228\\"}  .fa-mars-stroke:before{content:\\"\\\\f229\\"}  .fa-mars-stroke-v:before{content:\\"\\\\f22a\\"}  .fa-mars-stroke-h:before{content:\\"\\\\f22b\\"}  .fa-neuter:before{content:\\"\\\\f22c\\"}  .fa-genderless:before{content:\\"\\\\f22d\\"}  .fa-facebook-official:before{content:\\"\\\\f230\\"}  .fa-pinterest-p:before{content:\\"\\\\f231\\"}  .fa-whatsapp:before{content:\\"\\\\f232\\"}  .fa-server:before{content:\\"\\\\f233\\"}  .fa-user-plus:before{content:\\"\\\\f234\\"}  .fa-user-times:before{content:\\"\\\\f235\\"}  .fa-hotel:before,.fa-bed:before{content:\\"\\\\f236\\"}  .fa-viacoin:before{content:\\"\\\\f237\\"}  .fa-train:before{content:\\"\\\\f238\\"}  .fa-subway:before{content:\\"\\\\f239\\"}  .fa-medium:before{content:\\"\\\\f23a\\"}  .fa-yc:before,.fa-y-combinator:before{content:\\"\\\\f23b\\"}  .fa-optin-monster:before{content:\\"\\\\f23c\\"}  .fa-opencart:before{content:\\"\\\\f23d\\"}  .fa-expeditedssl:before{content:\\"\\\\f23e\\"}  .fa-battery-4:before,.fa-battery-full:before{content:\\"\\\\f240\\"}  .fa-battery-3:before,.fa-battery-three-quarters:before{content:\\"\\\\f241\\"}  .fa-battery-2:before,.fa-battery-half:before{content:\\"\\\\f242\\"}  .fa-battery-1:before,.fa-battery-quarter:before{content:\\"\\\\f243\\"}  .fa-battery-0:before,.fa-battery-empty:before{content:\\"\\\\f244\\"}  .fa-mouse-pointer:before{content:\\"\\\\f245\\"}  .fa-i-cursor:before{content:\\"\\\\f246\\"}  .fa-object-group:before{content:\\"\\\\f247\\"}  .fa-object-ungroup:before{content:\\"\\\\f248\\"}  .fa-sticky-note:before{content:\\"\\\\f249\\"}  .fa-sticky-note-o:before{content:\\"\\\\f24a\\"}  .fa-cc-jcb:before{content:\\"\\\\f24b\\"}  .fa-cc-diners-club:before{content:\\"\\\\f24c\\"}  .fa-clone:before{content:\\"\\\\f24d\\"}  .fa-balance-scale:before{content:\\"\\\\f24e\\"}  .fa-hourglass-o:before{content:\\"\\\\f250\\"}  .fa-hourglass-1:before,.fa-hourglass-start:before{content:\\"\\\\f251\\"}  .fa-hourglass-2:before,.fa-hourglass-half:before{content:\\"\\\\f252\\"}  .fa-hourglass-3:before,.fa-hourglass-end:before{content:\\"\\\\f253\\"}  .fa-hourglass:before{content:\\"\\\\f254\\"}  .fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\\"\\\\f255\\"}  .fa-hand-stop-o:before,.fa-hand-paper-o:before{content:\\"\\\\f256\\"}  .fa-hand-scissors-o:before{content:\\"\\\\f257\\"}  .fa-hand-lizard-o:before{content:\\"\\\\f258\\"}  .fa-hand-spock-o:before{content:\\"\\\\f259\\"}  .fa-hand-pointer-o:before{content:\\"\\\\f25a\\"}  .fa-hand-peace-o:before{content:\\"\\\\f25b\\"}  .fa-trademark:before{content:\\"\\\\f25c\\"}  .fa-registered:before{content:\\"\\\\f25d\\"}  .fa-creative-commons:before{content:\\"\\\\f25e\\"}  .fa-gg:before{content:\\"\\\\f260\\"}  .fa-gg-circle:before{content:\\"\\\\f261\\"}  .fa-tripadvisor:before{content:\\"\\\\f262\\"}  .fa-odnoklassniki:before{content:\\"\\\\f263\\"}  .fa-odnoklassniki-square:before{content:\\"\\\\f264\\"}  .fa-get-pocket:before{content:\\"\\\\f265\\"}  .fa-wikipedia-w:before{content:\\"\\\\f266\\"}  .fa-safari:before{content:\\"\\\\f267\\"}  .fa-chrome:before{content:\\"\\\\f268\\"}  .fa-firefox:before{content:\\"\\\\f269\\"}  .fa-opera:before{content:\\"\\\\f26a\\"}  .fa-internet-explorer:before{content:\\"\\\\f26b\\"}  .fa-tv:before,.fa-television:before{content:\\"\\\\f26c\\"}  .fa-contao:before{content:\\"\\\\f26d\\"}  .fa-500px:before{content:\\"\\\\f26e\\"}  .fa-amazon:before{content:\\"\\\\f270\\"}  .fa-calendar-plus-o:before{content:\\"\\\\f271\\"}  .fa-calendar-minus-o:before{content:\\"\\\\f272\\"}  .fa-calendar-times-o:before{content:\\"\\\\f273\\"}  .fa-calendar-check-o:before{content:\\"\\\\f274\\"}  .fa-industry:before{content:\\"\\\\f275\\"}  .fa-map-pin:before{content:\\"\\\\f276\\"}  .fa-map-signs:before{content:\\"\\\\f277\\"}  .fa-map-o:before{content:\\"\\\\f278\\"}  .fa-map:before{content:\\"\\\\f279\\"}  .fa-commenting:before{content:\\"\\\\f27a\\"}  .fa-commenting-o:before{content:\\"\\\\f27b\\"}  .fa-houzz:before{content:\\"\\\\f27c\\"}  .fa-vimeo:before{content:\\"\\\\f27d\\"}  .fa-black-tie:before{content:\\"\\\\f27e\\"}  .fa-fonticons:before{content:\\"\\\\f280\\"}  .fa-reddit-alien:before{content:\\"\\\\f281\\"}  .fa-edge:before{content:\\"\\\\f282\\"}  .fa-credit-card-alt:before{content:\\"\\\\f283\\"}  .fa-codiepie:before{content:\\"\\\\f284\\"}  .fa-modx:before{content:\\"\\\\f285\\"}  .fa-fort-awesome:before{content:\\"\\\\f286\\"}  .fa-usb:before{content:\\"\\\\f287\\"}  .fa-product-hunt:before{content:\\"\\\\f288\\"}  .fa-mixcloud:before{content:\\"\\\\f289\\"}  .fa-scribd:before{content:\\"\\\\f28a\\"}  .fa-pause-circle:before{content:\\"\\\\f28b\\"}  .fa-pause-circle-o:before{content:\\"\\\\f28c\\"}  .fa-stop-circle:before{content:\\"\\\\f28d\\"}  .fa-stop-circle-o:before{content:\\"\\\\f28e\\"}  .fa-shopping-bag:before{content:\\"\\\\f290\\"}  .fa-shopping-basket:before{content:\\"\\\\f291\\"}  .fa-hashtag:before{content:\\"\\\\f292\\"}  .fa-bluetooth:before{content:\\"\\\\f293\\"}  .fa-bluetooth-b:before{content:\\"\\\\f294\\"}  .fa-percent:before{content:\\"\\\\f295\\"}  .fa-gitlab:before{content:\\"\\\\f296\\"}  .fa-wpbeginner:before{content:\\"\\\\f297\\"}  .fa-wpforms:before{content:\\"\\\\f298\\"}  .fa-envira:before{content:\\"\\\\f299\\"}  .fa-universal-access:before{content:\\"\\\\f29a\\"}  .fa-wheelchair-alt:before{content:\\"\\\\f29b\\"}  .fa-question-circle-o:before{content:\\"\\\\f29c\\"}  .fa-blind:before{content:\\"\\\\f29d\\"}  .fa-audio-description:before{content:\\"\\\\f29e\\"}  .fa-volume-control-phone:before{content:\\"\\\\f2a0\\"}  .fa-braille:before{content:\\"\\\\f2a1\\"}  .fa-assistive-listening-systems:before{content:\\"\\\\f2a2\\"}  .fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:\\"\\\\f2a3\\"}  .fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:\\"\\\\f2a4\\"}  .fa-glide:before{content:\\"\\\\f2a5\\"}  .fa-glide-g:before{content:\\"\\\\f2a6\\"}  .fa-signing:before,.fa-sign-language:before{content:\\"\\\\f2a7\\"}  .fa-low-vision:before{content:\\"\\\\f2a8\\"}  .fa-viadeo:before{content:\\"\\\\f2a9\\"}  .fa-viadeo-square:before{content:\\"\\\\f2aa\\"}  .fa-snapchat:before{content:\\"\\\\f2ab\\"}  .fa-snapchat-ghost:before{content:\\"\\\\f2ac\\"}  .fa-snapchat-square:before{content:\\"\\\\f2ad\\"}  .fa-pied-piper:before{content:\\"\\\\f2ae\\"}  .fa-first-order:before{content:\\"\\\\f2b0\\"}  .fa-yoast:before{content:\\"\\\\f2b1\\"}  .fa-themeisle:before{content:\\"\\\\f2b2\\"}  .fa-google-plus-circle:before,.fa-google-plus-official:before{content:\\"\\\\f2b3\\"}  .fa-fa:before,.fa-font-awesome:before{content:\\"\\\\f2b4\\"}  .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}  .sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///187\n')},188:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90P2UwODMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///188\n')},189:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.eot?09b9015b1ecaf95655b11efd67d00e1f");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuZW90Pzc0ZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LmVvdD8wOWI5MDE1YjFlY2FmOTU2NTViMTFlZmQ2N2QwMGUxZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///189\n')},190:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff2?0317d582b93c20f68e059e389aecab33");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/NjE2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9GQUF1QiwrREFBK0QiLCJmaWxlIjoiMTkwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZvbnRhd2Vzb21lLXdlYmZvbnQud29mZjI/MDMxN2Q1ODJiOTNjMjBmNjhlMDU5ZTM4OWFlY2FiMzNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///190\n')},191:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.woff?f7f1738ca345185e01856ac55885b089");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQud29mZj82MmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb0ZBQXVCLDhEQUE4RCIsImZpbGUiOiIxOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZm9udGF3ZXNvbWUtd2ViZm9udC53b2ZmP2Y3ZjE3MzhjYTM0NTE4NWUwMTg1NmFjNTU4ODViMDg5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///191\n')},192:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.ttf?f0af1680f082547a7aae4af9d841d693");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQudHRmPzYxMzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE5Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnR0Zj9mMGFmMTY4MGYwODI1NDdhN2FhZTRhZjlkODQxZDY5M1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///192\n')},193:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "fontawesome-webfont.svg?ed6298903ae1554c7f3e1a668c39fdcc");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvZXh0L3Jlc291cmNlcy9jc3MvZm9udC1hd2Vzb21lLTQuNi4zL2ZvbnRzL2ZvbnRhd2Vzb21lLXdlYmZvbnQuc3ZnP2E3NzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsNkRBQTZEIiwiZmlsZSI6IjE5My5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmb250YXdlc29tZS13ZWJmb250LnN2Zz9lZDYyOTg5MDNhZTE1NTRjN2YzZTFhNjY4YzM5ZmRjY1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///193\n')},3:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Mode; });\n/**\n * Enum for datasource mode.\n * @readonly\n * @enum {{name: string}}\n */\nconst Mode = {\n  REPLAY: "replay",\n  BATCH: "batch",\n  REAL_TIME: "realTime"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL01vZGUuanM/NGUyNSJdLCJuYW1lcyI6WyJNb2RlIiwiUkVQTEFZIiwiQkFUQ0giLCJSRUFMX1RJTUUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLElBQUksR0FBRztFQUNoQkMsTUFBTSxFQUFFLFFBRFE7RUFFaEJDLEtBQUssRUFBRyxPQUZRO0VBR2hCQyxTQUFTLEVBQUU7QUFISyxDQUFiIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGRhdGFzb3VyY2UgbW9kZS5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgTW9kZSA9IHtcbiAgICBSRVBMQVk6IFwicmVwbGF5XCIsXG4gICAgQkFUQ0g6ICBcImJhdGNoXCIsXG4gICAgUkVBTF9USU1FOiBcInJlYWxUaW1lXCJcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},4:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return TIME_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\n/* unused harmony export MAGIC_END_PACKET */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\nconst MAGIC_END_PACKET = 'magic-packet';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIiwiTUFHSUNfRU5EX1BBQ0tFVCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDO0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsY0FBekIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IFRJTUVfU1lOQ0hST05JWkVSX1RPUElDID0gJ2RhdGEtc3luY2hyb25pemVyLXRpbWUtJztcblxuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX1RJTUVfVE9QSUMgPSAnZGF0YXNvdXJjZS10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuXG5leHBvcnQgY29uc3QgTUFHSUNfRU5EX1BBQ0tFVCA9ICdtYWdpYy1wYWNrZXQnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},7:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EventType; });\nconst EventType = {\n  DATA: 'data',\n  LAST_TIME: 'last-time',\n  MASTER_TIME: 'master-time',\n  STATUS: 'status',\n  TIME_CHANGED: 'time-changed',\n  CLOSED: 'closed'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9ldmVudC9FdmVudFR5cGUuanM/OWUzMCJdLCJuYW1lcyI6WyJFdmVudFR5cGUiLCJEQVRBIiwiTEFTVF9USU1FIiwiTUFTVEVSX1RJTUUiLCJTVEFUVVMiLCJUSU1FX0NIQU5HRUQiLCJDTE9TRUQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQU8sTUFBTUEsU0FBUyxHQUFHO0VBQ3JCQyxJQUFJLEVBQUUsTUFEZTtFQUVyQkMsU0FBUyxFQUFFLFdBRlU7RUFHckJDLFdBQVcsRUFBRSxhQUhRO0VBSXJCQyxNQUFNLEVBQUUsUUFKYTtFQUtyQkMsWUFBWSxFQUFFLGNBTE87RUFNckJDLE1BQU0sRUFBRTtBQU5hLENBQWxCIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRXZlbnRUeXBlID0ge1xuICAgIERBVEE6ICdkYXRhJyxcbiAgICBMQVNUX1RJTUU6ICdsYXN0LXRpbWUnLFxuICAgIE1BU1RFUl9USU1FOiAnbWFzdGVyLXRpbWUnLFxuICAgIFNUQVRVUzogJ3N0YXR1cycsXG4gICAgVElNRV9DSEFOR0VEOiAndGltZS1jaGFuZ2VkJyxcbiAgICBDTE9TRUQ6ICdjbG9zZWQnXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},9:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  FETCH_STARTED: \'fetch-start\',\n  FETCH_ENDED: \'fetch-end\',\n  CLOSED: "closed",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9jb25uZWN0b3IvU3RhdHVzLmpzP2E1ODciXSwibmFtZXMiOlsiU3RhdHVzIiwiQ09OTkVDVElORyIsIkNPTk5FQ1RFRCIsIkRJU0NPTk5FQ1RFRCIsIkZFVENIX1NUQVJURUQiLCJGRVRDSF9FTkRFRCIsIkNMT1NFRCIsIkNMT1NFRF9FUlJPUiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsTUFBTSxHQUFHO0VBQ2xCQyxVQUFVLEVBQUUsWUFETTtFQUVsQkMsU0FBUyxFQUFHLFdBRk07RUFHbEJDLFlBQVksRUFBRSxjQUhJO0VBSWxCQyxhQUFhLEVBQUUsYUFKRztFQUtsQkMsV0FBVyxFQUFFLFdBTEs7RUFNbEJDLE1BQU0sRUFBRSxRQU5VO0VBT2xCQyxZQUFZLEVBQUU7QUFQSSxDQUFmIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGNvbm5lY3Rpb24gc3RhdHVzLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG4gICAgQ09OTkVDVElORzogXCJjb25uZWN0aW5nXCIsXG4gICAgQ09OTkVDVEVEOiAgXCJjb25uZWN0ZWRcIixcbiAgICBESVNDT05ORUNURUQ6IFwiZGlzY29ubmVjdGVkXCIsXG4gICAgRkVUQ0hfU1RBUlRFRDogJ2ZldGNoLXN0YXJ0JyxcbiAgICBGRVRDSF9FTkRFRDogJ2ZldGNoLWVuZCcsXG4gICAgQ0xPU0VEOiBcImNsb3NlZFwiLFxuICAgIENMT1NFRF9FUlJPUjogXCJjbG9zZWQtZXJyb3JcIlxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n')}}]);