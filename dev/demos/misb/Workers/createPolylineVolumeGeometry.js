define(["./when-8166c7dd","./Matrix2-92b7fb9d","./arrayRemoveDuplicates-198208a4","./BoundingRectangle-ab1365ab","./Transforms-62a339c3","./ComponentDatatype-9ed50558","./PolylineVolumeGeometryLibrary-b9fa2b05","./RuntimeError-4fdc4459","./GeometryAttribute-6f4c3b93","./GeometryAttributes-50becc99","./GeometryPipeline-54fb0bb4","./IndexDatatype-797210ca","./PolygonPipeline-7fb6627c","./VertexFormat-c0801687","./combine-a5c4cc47","./WebGLConstants-0664004c","./EllipsoidTangentPlane-5d8b4bd3","./AxisAlignedBoundingBox-b0cd1e39","./IntersectionTests-4f28a69c","./Plane-049255eb","./PolylinePipeline-fd9260c9","./EllipsoidGeodesic-133bd147","./EllipsoidRhumbLine-51654311","./AttributeCompression-212262a3","./EncodedCartesian3-4a314cb8"],(function(e,t,r,n,i,o,a,l,s,p,d,c,u,y,m,g,h,f,v,b,E,P,_,k,w){"use strict";function L(r){var n=(r=e.defaultValue(r,e.defaultValue.EMPTY_OBJECT)).polylinePositions,i=r.shapePositions;if(!e.defined(n))throw new l.DeveloperError("options.polylinePositions is required.");if(!e.defined(i))throw new l.DeveloperError("options.shapePositions is required.");this._positions=n,this._shape=i,this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(r.ellipsoid,t.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(r.cornerType,a.CornerType.ROUNDED),this._vertexFormat=y.VertexFormat.clone(e.defaultValue(r.vertexFormat,y.VertexFormat.DEFAULT)),this._granularity=e.defaultValue(r.granularity,o.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var s=1+n.length*t.Cartesian3.packedLength;s+=1+i.length*t.Cartesian2.packedLength,this.packedLength=s+t.Ellipsoid.packedLength+y.VertexFormat.packedLength+2}L.pack=function(r,n,i){if(!e.defined(r))throw new l.DeveloperError("value is required");if(!e.defined(n))throw new l.DeveloperError("array is required");var o;i=e.defaultValue(i,0);var a=r._positions,s=a.length;for(n[i++]=s,o=0;o<s;++o,i+=t.Cartesian3.packedLength)t.Cartesian3.pack(a[o],n,i);var p=r._shape;for(s=p.length,n[i++]=s,o=0;o<s;++o,i+=t.Cartesian2.packedLength)t.Cartesian2.pack(p[o],n,i);return t.Ellipsoid.pack(r._ellipsoid,n,i),i+=t.Ellipsoid.packedLength,y.VertexFormat.pack(r._vertexFormat,n,i),i+=y.VertexFormat.packedLength,n[i++]=r._cornerType,n[i]=r._granularity,n};var V=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),x=new y.VertexFormat,C={polylinePositions:void 0,shapePositions:void 0,ellipsoid:V,vertexFormat:x,cornerType:void 0,granularity:void 0};L.unpack=function(r,n,i){if(!e.defined(r))throw new l.DeveloperError("array is required");var o;n=e.defaultValue(n,0);var a=r[n++],s=new Array(a);for(o=0;o<a;++o,n+=t.Cartesian3.packedLength)s[o]=t.Cartesian3.unpack(r,n);a=r[n++];var p=new Array(a);for(o=0;o<a;++o,n+=t.Cartesian2.packedLength)p[o]=t.Cartesian2.unpack(r,n);var d=t.Ellipsoid.unpack(r,n,V);n+=t.Ellipsoid.packedLength;var c=y.VertexFormat.unpack(r,n,x);n+=y.VertexFormat.packedLength;var u=r[n++],m=r[n];return e.defined(i)?(i._positions=s,i._shape=p,i._ellipsoid=t.Ellipsoid.clone(d,i._ellipsoid),i._vertexFormat=y.VertexFormat.clone(c,i._vertexFormat),i._cornerType=u,i._granularity=m,i):(C.polylinePositions=s,C.shapePositions=p,C.cornerType=u,C.granularity=m,new L(C))};var D=new n.BoundingRectangle;return L.createGeometry=function(e){var l=e._positions,y=r.arrayRemoveDuplicates(l,t.Cartesian3.equalsEpsilon),m=e._shape;if(m=a.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(m),!(y.length<2||m.length<3)){u.PolygonPipeline.computeWindingOrder2D(m)===u.WindingOrder.CLOCKWISE&&m.reverse();var g=n.BoundingRectangle.fromPoints(m,D);return function(e,t,r,n){var l=new p.GeometryAttributes;n.position&&(l.position=new s.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var y,m,g,h,f,v,b=t.length,E=e.length/3,P=(E-2*b)/(2*b),_=u.PolygonPipeline.triangulate(t),k=(P-1)*b*6+2*_.length,w=c.IndexDatatype.createTypedArray(E,k),L=2*b,V=0;for(y=0;y<P-1;y++){for(m=0;m<b-1;m++)v=(g=2*m+y*b*2)+L,f=(h=g+1)+L,w[V++]=h,w[V++]=g,w[V++]=f,w[V++]=f,w[V++]=g,w[V++]=v;f=(h=1+(g=2*b-2+y*b*2))+L,v=g+L,w[V++]=h,w[V++]=g,w[V++]=f,w[V++]=f,w[V++]=g,w[V++]=v}if(n.st||n.tangent||n.bitangent){var x,C,D=new Float32Array(2*E),F=1/(P-1),A=1/r.height,T=r.height/2,G=0;for(y=0;y<P;y++){for(x=y*F,C=A*(t[0].y+T),D[G++]=x,D[G++]=C,m=1;m<b;m++)C=A*(t[m].y+T),D[G++]=x,D[G++]=C,D[G++]=x,D[G++]=C;C=A*(t[0].y+T),D[G++]=x,D[G++]=C}for(m=0;m<b;m++)x=0,C=A*(t[m].y+T),D[G++]=x,D[G++]=C;for(m=0;m<b;m++)x=(P-1)*F,C=A*(t[m].y+T),D[G++]=x,D[G++]=C;l.st=new s.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(D)})}var R=E-2*b;for(y=0;y<_.length;y+=3){var B=_[y]+R,S=_[y+1]+R,I=_[y+2]+R;w[V++]=B,w[V++]=S,w[V++]=I,w[V++]=I+b,w[V++]=S+b,w[V++]=B+b}var O=new s.Geometry({attributes:l,indices:w,boundingSphere:i.BoundingSphere.fromVertices(e),primitiveType:s.PrimitiveType.TRIANGLES});if(n.normal&&(O=d.GeometryPipeline.computeNormal(O)),n.tangent||n.bitangent){try{O=d.GeometryPipeline.computeTangentAndBitangent(O)}catch(e){a.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}n.tangent||(O.attributes.tangent=void 0),n.bitangent||(O.attributes.bitangent=void 0),n.st||(O.attributes.st=void 0)}return O}(a.PolylineVolumeGeometryLibrary.computePositions(y,m,g,e,!0),m,g,e._vertexFormat)}},function(r,n){return e.defined(n)&&(r=L.unpack(r,n)),r._ellipsoid=t.Ellipsoid.clone(r._ellipsoid),L.createGeometry(r)}}));