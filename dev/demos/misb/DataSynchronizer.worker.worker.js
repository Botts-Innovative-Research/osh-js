!function(){"use strict";function t(t){return null!=t}Math.pow(2,53);const e="disconnected";const a="data",s={};let i,n=!1,r=null;self.currentTime=-1;const u={};let o,d,l=null;function f(t){for(let e of t)c(e)}function c(t){i.addDataSource(t),s[t.id]=new BroadcastChannel("datasource-data-"+t.id),t.id in u||(u[t.id]=t)}function m(t,e){self.currentTime=e.timeStamp,s[t].postMessage({values:[e],dataSourceId:t,type:a}),l.postMessage({timestamp:e.timeStamp,dataSourceId:t,type:"time"})}self.onmessage=c=>{let h;if("init"===c.data.message)i=new class{constructor(t,e=1,a=5){this.dataSourceMap={},this.bufferingTime=1e3,this.startBufferingTime=-1,this.tsRun=0,this.replaySpeed=e,this.timerResolution=a;let s=-1;for(let e of t)this.addDataSource(e),s=e.bufferingTime>s?e.bufferingTime:s;-1!==s&&(this.bufferingTime=s)}push(t,a){const s=this.dataSourceMap[t];if(s.status===e)return;-1===this.startBufferingTime&&(console.log(`synchronizer buffering data for ${this.bufferingTime}ms..`),this.startBufferingTime=performance.now(),this.timeoutBuffering=setTimeout((()=>this.processData()),this.bufferingTime));let i=0;this.tsRun>0&&(i=this.tsRun-a.timeStamp),s.latency=i>s.latency?i:(s.latency+i)/2,s.dataBuffer.push(a)}reset(){console.log("reset synchronizer algo"),this.close();for(let t in this.dataSourceMap){const a=this.dataSourceMap[t];a.dataBuffer=[],a.startBufferingTime=-1,a.latency=0,a.status=e}this.tsRun=0,this.startBufferingTime=-1}processData(){if(!t(this.timeoutBuffering))return;let a,s=-1,i=performance.now();for(let t in this.dataSourceMap)a=this.dataSourceMap[t],a.status!==e&&a.dataBuffer.length>0&&(s=-1===s||a.dataBuffer[0].timeStamp<s?a.dataBuffer[0].timeStamp:s);this.interval=setInterval((()=>{for(;this.computeNextData(s,i););}),this.timerResolution)}computeNextData(t,a){let s,i=null,n=0,r=0;for(let t in this.dataSourceMap)if(s=this.dataSourceMap[t],s.status!==e&&s.latency>0){let t=Math.min(s.latency,s.timeOut);n=t>n?t:n,r=s.latency<r?s.latency:r}n*=this.replaySpeed,r*=this.replaySpeed;const u=(performance.now()-a)*this.replaySpeed;this.tsRun=t+u;for(let a in this.dataSourceMap)s=this.dataSourceMap[a],s.status!==e&&s.dataBuffer.length>0&&s.dataBuffer[0].timeStamp-t<=u-n&&(i=null===i?s:i.dataBuffer[0].timeStamp<s.dataBuffer[0].timeStamp?i:s);if(null!==i){let t=i.dataBuffer.shift();return t["@latency"]=s.latency-r,this.onData(i.id,t),!0}return!1}addDataSource(t){this.dataSourceMap[t.id]={bufferingTime:t.bufferingTime,timeOut:t.timeOut||0,dataBuffer:[],startBufferingTime:-1,id:t.id,timedOut:!1,name:t.name||t.id,latency:0,status:e}}onData(t,e){}setStatus(t,a){t in this.dataSourceMap&&(this.dataSourceMap[t].status=a,a===e&&(this.dataSourceMap[t].latency=0,this.dataSourceMap[t].dataBuffer=[]),console.warn(a+" DataSource "+t+" from the synchronizer "))}close(){t(this.interval)&&(clearInterval(this.interval),this.interval=null),t(this.timeoutBuffering)&&(clearTimeout(this.timeoutBuffering),this.timeoutBuffering=null),console.log("Data synchronizer terminated successfully")}}(c.data.dataSources,c.data.replaySpeed,c.data.timerResolution),i.onData=m,n=!0,f(c.data.dataSources),d=c.data.dataTopic,o=c.data.timeTopic,p=d,g=o,console.log("listen on topic ",p),r=new BroadcastChannel(p),r.onmessage=t=>{if(t.data.type===a)for(let e=0;e<t.data.values.length;e++)i.push(t.data.dataSourceId,{...t.data.values[e]});else if("status"===t.data.type){const e=t.data.dataSourceId;i.setStatus(e,t.data.status),console.log(u[e].name+": status="+t.data.status),s[e].postMessage(t.data)}},l=new BroadcastChannel(g);else if("add"===c.data.message&&c.data.dataSources)f(c.data.dataSources);else if("current-time"===c.data.message)h={message:"current-time",data:self.currentTime};else if("reset"===c.data.message)null!==i&&i.reset(),l.postMessage({type:"time-changed"});else if("replay-speed"===c.data.message)null!==i&&(i.replaySpeed=c.data.replaySpeed);else{if("data"!==c.data.message)return;null!==i&&i.push(c.data.dataSourceId,{data:c.data.data,timeStamp:c.data.timeStamp})}var p,g;self.postMessage({message:c.data.message,data:h,messageId:c.data.messageId})},self.onclose=function(){i.close(),console.log("Data Synchronizer has been terminated successfully")}}();