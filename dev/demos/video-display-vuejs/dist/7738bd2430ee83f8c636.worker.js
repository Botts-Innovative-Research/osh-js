!function(Q){var F={};function U(B){if(F[B])return F[B].exports;var s=F[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,U),s.l=!0,s.exports}U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)U.d(B,s,function(F){return Q[F]}.bind(null,s));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="",U(U.s=2)}([function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var require;var require;!function (e) {\n  if (true) module.exports = e();else {}\n}(function () {\n  return function () {\n    return function e(t, r, n) {\n      function i(s, a) {\n        if (!r[s]) {\n          if (!t[s]) {\n            var l = "function" == typeof require && require;\n            if (!a && l) return require(s, !0);\n            if (o) return o(s, !0);\n            var u = new Error("Cannot find module \'" + s + "\'");\n            throw u.code = "MODULE_NOT_FOUND", u;\n          }\n\n          var c = r[s] = {\n            exports: {}\n          };\n          t[s][0].call(c.exports, function (e) {\n            return i(t[s][1][e] || e);\n          }, c, c.exports, e, t, r, n);\n        }\n\n        return r[s].exports;\n      }\n\n      for (var o = "function" == typeof require && require, s = 0; s < n.length; s++) i(n[s]);\n\n      return i;\n    };\n  }()({\n    1: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          const i = e("events").EventEmitter,\n                o = e("./store"),\n                s = e("./topic-alias-recv"),\n                a = e("./topic-alias-send"),\n                l = e("mqtt-packet"),\n                u = e("./default-message-id-provider"),\n                c = e("readable-stream").Writable,\n                h = e("inherits"),\n                f = e("reinterval"),\n                p = e("rfdc/default"),\n                d = e("./validations"),\n                g = e("xtend"),\n                y = e("debug")("mqttjs:client"),\n                b = r ? r.nextTick : function (e) {\n            setTimeout(e, 0);\n          },\n                m = n.setImmediate || function (e) {\n            b(e);\n          },\n                v = {\n            keepalive: 60,\n            reschedulePings: !0,\n            protocolId: "MQTT",\n            protocolVersion: 4,\n            reconnectPeriod: 1e3,\n            connectTimeout: 3e4,\n            clean: !0,\n            resubscribe: !0\n          },\n                w = ["ECONNREFUSED", "EADDRINUSE", "ECONNRESET", "ENOTFOUND"],\n                _ = {\n            0: "",\n            1: "Unacceptable protocol version",\n            2: "Identifier rejected",\n            3: "Server unavailable",\n            4: "Bad username or password",\n            5: "Not authorized",\n            16: "No matching subscribers",\n            17: "No subscription existed",\n            128: "Unspecified error",\n            129: "Malformed Packet",\n            130: "Protocol Error",\n            131: "Implementation specific error",\n            132: "Unsupported Protocol Version",\n            133: "Client Identifier not valid",\n            134: "Bad User Name or Password",\n            135: "Not authorized",\n            136: "Server unavailable",\n            137: "Server busy",\n            138: "Banned",\n            139: "Server shutting down",\n            140: "Bad authentication method",\n            141: "Keep Alive timeout",\n            142: "Session taken over",\n            143: "Topic Filter invalid",\n            144: "Topic Name invalid",\n            145: "Packet identifier in use",\n            146: "Packet Identifier not found",\n            147: "Receive Maximum exceeded",\n            148: "Topic Alias invalid",\n            149: "Packet too large",\n            150: "Message rate too high",\n            151: "Quota exceeded",\n            152: "Administrative action",\n            153: "Payload format invalid",\n            154: "Retain not supported",\n            155: "QoS not supported",\n            156: "Use another server",\n            157: "Server moved",\n            158: "Shared Subscriptions not supported",\n            159: "Connection rate exceeded",\n            160: "Maximum connect time",\n            161: "Subscription Identifiers not supported",\n            162: "Wildcard Subscriptions not supported"\n          };\n\n          function k(e, t) {\n            let r;\n            t.properties && (r = t.properties.topicAlias);\n            let n = t.topic.toString();\n\n            if (0 === n.length) {\n              if (void 0 === r) return new Error("Unregistered Topic Alias");\n              if (void 0 === (n = e.topicAliasSend.getTopicByAlias(r))) return new Error("Unregistered Topic Alias");\n              t.topic = n;\n            }\n\n            r && delete t.properties.topicAlias;\n          }\n\n          function S(e, t, r) {\n            y("sendPacket :: packet: %O", t), y("sendPacket :: emitting `packetsend`"), e.emit("packetsend", t), y("sendPacket :: writing to stream");\n            const n = l.writeToStream(t, e.stream, e.options);\n            y("sendPacket :: writeToStream result %s", n), !n && r ? (y("sendPacket :: handle events on `drain` once through callback."), e.stream.once("drain", r)) : r && (y("sendPacket :: invoking cb"), r());\n          }\n\n          function E(e, t, r, n) {\n            y("storeAndSend :: store packet with cmd %s to outgoingStore", t.cmd);\n            let i,\n                o = t;\n            if ("publish" === o.cmd && (o = p(t), i = k(e, o))) return r && r(i);\n            e.outgoingStore.put(o, function (i) {\n              if (i) return r && r(i);\n              n(), S(e, t, r);\n            });\n          }\n\n          function C(e) {\n            y("nop ::", e);\n          }\n\n          function T(e, t) {\n            let r;\n            const n = this;\n            if (!(this instanceof T)) return new T(e, t);\n\n            for (r in this.options = t || {}, v) void 0 === this.options[r] ? this.options[r] = v[r] : this.options[r] = t[r];\n\n            y("MqttClient :: options.protocol", t.protocol), y("MqttClient :: options.protocolVersion", t.protocolVersion), y("MqttClient :: options.username", t.username), y("MqttClient :: options.keepalive", t.keepalive), y("MqttClient :: options.reconnectPeriod", t.reconnectPeriod), y("MqttClient :: options.rejectUnauthorized", t.rejectUnauthorized), y("MqttClient :: options.topicAliasMaximum", t.topicAliasMaximum), this.options.clientId = "string" == typeof t.clientId ? t.clientId : "mqttjs_" + Math.random().toString(16).substr(2, 8), y("MqttClient :: clientId", this.options.clientId), this.options.customHandleAcks = 5 === t.protocolVersion && t.customHandleAcks ? t.customHandleAcks : function () {\n              arguments[3](0);\n            }, this.streamBuilder = e, this.messageIdProvider = void 0 === this.options.messageIdProvider ? new u() : this.options.messageIdProvider, this.outgoingStore = t.outgoingStore || new o(), this.incomingStore = t.incomingStore || new o(), this.queueQoSZero = void 0 === t.queueQoSZero || t.queueQoSZero, this._resubscribeTopics = {}, this.messageIdToTopic = {}, this.pingTimer = null, this.connected = !1, this.disconnecting = !1, this.queue = [], this.connackTimer = null, this.reconnectTimer = null, this._storeProcessing = !1, this._packetIdsDuringStoreProcessing = {}, this._storeProcessingQueue = [], this.outgoing = {}, this._firstConnection = !0, t.topicAliasMaximum > 0 && (t.topicAliasMaximum > 65535 ? y("MqttClient :: options.topicAliasMaximum is out of range") : this.topicAliasRecv = new s(t.topicAliasMaximum)), this.on("connect", function () {\n              const e = this.queue;\n              y("connect :: sending queued packets"), function t() {\n                const r = e.shift();\n                y("deliver :: entry %o", r);\n                let i = null;\n                if (!r) return void n._resubscribe();\n                i = r.packet, y("deliver :: call _sendPacket for %o", i);\n                let o = !0;\n                i.messageId && 0 !== i.messageId && (n.messageIdProvider.register(i.messageId) || (o = !1)), o ? n._sendPacket(i, function (e) {\n                  r.cb && r.cb(e), t();\n                }) : (y("messageId: %d has already used. The message is skipped and removed.", i.messageId), t());\n              }();\n            }), this.on("close", function () {\n              y("close :: connected set to `false`"), this.connected = !1, y("close :: clearing connackTimer"), clearTimeout(this.connackTimer), y("close :: clearing ping timer"), null !== n.pingTimer && (n.pingTimer.clear(), n.pingTimer = null), this.topicAliasRecv && this.topicAliasRecv.clear(), y("close :: calling _setupReconnect"), this._setupReconnect();\n            }), i.call(this), y("MqttClient :: setting up stream"), this._setupStream();\n          }\n\n          h(T, i), T.prototype._setupStream = function () {\n            const e = this,\n                  t = new c(),\n                  r = l.parser(this.options);\n            let n = null;\n            const i = [];\n\n            function o() {\n              if (i.length) b(s);else {\n                const e = n;\n                n = null, e();\n              }\n            }\n\n            function s() {\n              y("work :: getting next packet in queue");\n              const t = i.shift();\n              if (t) y("work :: packet pulled from queue"), e._handlePacket(t, o);else {\n                y("work :: no packets in queue");\n                const e = n;\n                n = null, y("work :: done flag is %s", !!e), e && e();\n              }\n            }\n\n            y("_setupStream :: calling method to clear reconnect"), this._clearReconnect(), y("_setupStream :: using streamBuilder provided to client to create stream"), this.stream = this.streamBuilder(this), r.on("packet", function (e) {\n              y("parser :: on packet push to packets array."), i.push(e);\n            }), t._write = function (e, t, i) {\n              n = i, y("writable stream :: parsing buffer"), r.parse(e), s();\n            }, y("_setupStream :: pipe stream to writable stream"), this.stream.pipe(t), this.stream.on("error", function (t) {\n              y("streamErrorHandler :: error", t.message), w.includes(t.code) ? (y("streamErrorHandler :: emitting error"), e.emit("error", t)) : C(t);\n            }), this.stream.on("close", function () {\n              var t;\n              y("(%s)stream :: on close", e.options.clientId), (t = e.outgoing) && (y("flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function"), Object.keys(t).forEach(function (e) {\n                t[e].volatile && "function" == typeof t[e].cb && (t[e].cb(new Error("Connection closed")), delete t[e]);\n              })), y("stream: emit close to MqttClient"), e.emit("close");\n            }), y("_setupStream: sending packet `connect`");\n            const a = Object.create(this.options);\n\n            if (a.cmd = "connect", this.topicAliasRecv && (a.properties || (a.properties = {}), this.topicAliasRecv && (a.properties.topicAliasMaximum = this.topicAliasRecv.max)), S(this, a), r.on("error", this.emit.bind(this, "error")), this.options.properties) {\n              if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) return e.end(() => this.emit("error", new Error("Packet has no Authentication Method"))), this;\n\n              if (this.options.properties.authenticationMethod && this.options.authPacket && "object" == typeof this.options.authPacket) {\n                S(this, g({\n                  cmd: "auth",\n                  reasonCode: 0\n                }, this.options.authPacket));\n              }\n            }\n\n            this.stream.setMaxListeners(1e3), clearTimeout(this.connackTimer), this.connackTimer = setTimeout(function () {\n              y("!!connectTimeout hit!! Calling _cleanUp with force `true`"), e._cleanUp(!0);\n            }, this.options.connectTimeout);\n          }, T.prototype._handlePacket = function (e, t) {\n            const r = this.options;\n            if (5 === r.protocolVersion && r.properties && r.properties.maximumPacketSize && r.properties.maximumPacketSize < e.length) return this.emit("error", new Error("exceeding packets size " + e.cmd)), this.end({\n              reasonCode: 149,\n              properties: {\n                reasonString: "Maximum packet size was exceeded"\n              }\n            }), this;\n\n            switch (y("_handlePacket :: emitting packetreceive"), this.emit("packetreceive", e), e.cmd) {\n              case "publish":\n                this._handlePublish(e, t);\n\n                break;\n\n              case "puback":\n              case "pubrec":\n              case "pubcomp":\n              case "suback":\n              case "unsuback":\n                this._handleAck(e), t();\n                break;\n\n              case "pubrel":\n                this._handlePubrel(e, t);\n\n                break;\n\n              case "connack":\n                this._handleConnack(e), t();\n                break;\n\n              case "auth":\n                this._handleAuth(e), t();\n                break;\n\n              case "pingresp":\n                this._handlePingresp(e), t();\n                break;\n\n              case "disconnect":\n                this._handleDisconnect(e), t();\n            }\n          }, T.prototype._checkDisconnecting = function (e) {\n            return this.disconnecting && (e ? e(new Error("client disconnecting")) : this.emit("error", new Error("client disconnecting"))), this.disconnecting;\n          }, T.prototype.publish = function (e, t, r, n) {\n            y("publish :: message `%s` to topic `%s`", t, e);\n            const i = this.options;\n            "function" == typeof r && (n = r, r = null);\n            if (r = g({\n              qos: 0,\n              retain: !1,\n              dup: !1\n            }, r), this._checkDisconnecting(n)) return this;\n\n            const o = this,\n                  s = function () {\n              let s = 0;\n              if ((1 === r.qos || 2 === r.qos) && null === (s = o._nextId())) return y("No messageId left"), !1;\n              const a = {\n                cmd: "publish",\n                topic: e,\n                payload: t,\n                qos: r.qos,\n                retain: r.retain,\n                messageId: s,\n                dup: r.dup\n              };\n\n              switch (5 === i.protocolVersion && (a.properties = r.properties), y("publish :: qos", r.qos), r.qos) {\n                case 1:\n                case 2:\n                  o.outgoing[a.messageId] = {\n                    volatile: !1,\n                    cb: n || C\n                  }, y("MqttClient:publish: packet cmd: %s", a.cmd), o._sendPacket(a, void 0, r.cbStorePut);\n                  break;\n\n                default:\n                  y("MqttClient:publish: packet cmd: %s", a.cmd), o._sendPacket(a, n, r.cbStorePut);\n              }\n\n              return !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !s()) && this._storeProcessingQueue.push({\n              invoke: s,\n              cbStorePut: r.cbStorePut,\n              callback: n\n            }), this;\n          }, T.prototype.subscribe = function () {\n            const e = this,\n                  t = new Array(arguments.length);\n\n            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];\n\n            const r = [];\n            let n = t.shift();\n            const i = n.resubscribe;\n            let o = t.pop() || C,\n                s = t.pop();\n            const a = this.options.protocolVersion;\n            delete n.resubscribe, "string" == typeof n && (n = [n]), "function" != typeof o && (s = o, o = C);\n            const l = d.validateTopics(n);\n            if (null !== l) return m(o, new Error("Invalid topic " + l)), this;\n            if (this._checkDisconnecting(o)) return y("subscribe: discconecting true"), this;\n            const u = {\n              qos: 0\n            };\n            if (5 === a && (u.nl = !1, u.rap = !1, u.rh = 0), s = g(u, s), Array.isArray(n) ? n.forEach(function (t) {\n              if (y("subscribe: array topic %s", t), !Object.prototype.hasOwnProperty.call(e._resubscribeTopics, t) || e._resubscribeTopics[t].qos < s.qos || i) {\n                const e = {\n                  topic: t,\n                  qos: s.qos\n                };\n                5 === a && (e.nl = s.nl, e.rap = s.rap, e.rh = s.rh, e.properties = s.properties), y("subscribe: pushing topic `%s` and qos `%s` to subs list", e.topic, e.qos), r.push(e);\n              }\n            }) : Object.keys(n).forEach(function (t) {\n              if (y("subscribe: object topic %s", t), !Object.prototype.hasOwnProperty.call(e._resubscribeTopics, t) || e._resubscribeTopics[t].qos < n[t].qos || i) {\n                const e = {\n                  topic: t,\n                  qos: n[t].qos\n                };\n                5 === a && (e.nl = n[t].nl, e.rap = n[t].rap, e.rh = n[t].rh, e.properties = s.properties), y("subscribe: pushing `%s` to subs list", e), r.push(e);\n              }\n            }), !r.length) return o(null, []), this;\n\n            const c = function () {\n              const t = e._nextId();\n\n              if (null === t) return y("No messageId left"), !1;\n              const n = {\n                cmd: "subscribe",\n                subscriptions: r,\n                qos: 1,\n                retain: !1,\n                dup: !1,\n                messageId: t\n              };\n\n              if (s.properties && (n.properties = s.properties), e.options.resubscribe) {\n                y("subscribe :: resubscribe true");\n                const t = [];\n                r.forEach(function (r) {\n                  if (e.options.reconnectPeriod > 0) {\n                    const n = {\n                      qos: r.qos\n                    };\n                    5 === a && (n.nl = r.nl || !1, n.rap = r.rap || !1, n.rh = r.rh || 0, n.properties = r.properties), e._resubscribeTopics[r.topic] = n, t.push(r.topic);\n                  }\n                }), e.messageIdToTopic[n.messageId] = t;\n              }\n\n              return e.outgoing[n.messageId] = {\n                volatile: !0,\n                cb: function (e, t) {\n                  if (!e) {\n                    const e = t.granted;\n\n                    for (let t = 0; t < e.length; t += 1) r[t].qos = e[t];\n                  }\n\n                  o(e, r);\n                }\n              }, y("subscribe :: call _sendPacket"), e._sendPacket(n), !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !c()) && this._storeProcessingQueue.push({\n              invoke: c,\n              callback: o\n            }), this;\n          }, T.prototype.unsubscribe = function () {\n            const e = this,\n                  t = new Array(arguments.length);\n\n            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];\n\n            let r = t.shift(),\n                n = t.pop() || C,\n                i = t.pop();\n            "string" == typeof r && (r = [r]), "function" != typeof n && (i = n, n = C);\n            const o = d.validateTopics(r);\n            if (null !== o) return m(n, new Error("Invalid topic " + o)), this;\n            if (e._checkDisconnecting(n)) return this;\n\n            const s = function () {\n              const t = e._nextId();\n\n              if (null === t) return y("No messageId left"), !1;\n              const o = {\n                cmd: "unsubscribe",\n                qos: 1,\n                messageId: t\n              };\n              return "string" == typeof r ? o.unsubscriptions = [r] : Array.isArray(r) && (o.unsubscriptions = r), e.options.resubscribe && o.unsubscriptions.forEach(function (t) {\n                delete e._resubscribeTopics[t];\n              }), "object" == typeof i && i.properties && (o.properties = i.properties), e.outgoing[o.messageId] = {\n                volatile: !0,\n                cb: n\n              }, y("unsubscribe: call _sendPacket"), e._sendPacket(o), !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !s()) && this._storeProcessingQueue.push({\n              invoke: s,\n              callback: n\n            }), this;\n          }, T.prototype.end = function (e, t, r) {\n            const n = this;\n\n            function i() {\n              y("end :: (%s) :: finish :: calling _cleanUp with force %s", n.options.clientId, e), n._cleanUp(e, () => {\n                y("end :: finish :: calling process.nextTick on closeStores"), b(function () {\n                  y("end :: closeStores: closing incoming and outgoing stores"), n.disconnected = !0, n.incomingStore.close(function (e) {\n                    n.outgoingStore.close(function (t) {\n                      if (y("end :: closeStores: emitting end"), n.emit("end"), r) {\n                        const n = e || t;\n                        y("end :: closeStores: invoking callback with args"), r(n);\n                      }\n                    });\n                  }), n._deferredReconnect && n._deferredReconnect();\n                }.bind(n));\n              }, t);\n            }\n\n            return y("end :: (%s)", this.options.clientId), null != e && "boolean" == typeof e || (r = t || C, t = e, e = !1, "object" != typeof t && (r = t, t = null, "function" != typeof r && (r = C))), "object" != typeof t && (r = t, t = null), y("end :: cb? %s", !!r), r = r || C, this.disconnecting ? (r(), this) : (this._clearReconnect(), this.disconnecting = !0, !e && Object.keys(this.outgoing).length > 0 ? (y("end :: (%s) :: calling finish in 10ms once outgoing is empty", n.options.clientId), this.once("outgoingEmpty", setTimeout.bind(null, i, 10))) : (y("end :: (%s) :: immediately calling finish", n.options.clientId), i()), this);\n          }, T.prototype.removeOutgoingMessage = function (e) {\n            const t = this.outgoing[e] ? this.outgoing[e].cb : null;\n            return delete this.outgoing[e], this.outgoingStore.del({\n              messageId: e\n            }, function () {\n              t(new Error("Message removed"));\n            }), this;\n          }, T.prototype.reconnect = function (e) {\n            y("client reconnect");\n\n            const t = this,\n                  r = function () {\n              e ? (t.options.incomingStore = e.incomingStore, t.options.outgoingStore = e.outgoingStore) : (t.options.incomingStore = null, t.options.outgoingStore = null), t.incomingStore = t.options.incomingStore || new o(), t.outgoingStore = t.options.outgoingStore || new o(), t.disconnecting = !1, t.disconnected = !1, t._deferredReconnect = null, t._reconnect();\n            };\n\n            return this.disconnecting && !this.disconnected ? this._deferredReconnect = r : r(), this;\n          }, T.prototype._reconnect = function () {\n            y("_reconnect: emitting reconnect to client"), this.emit("reconnect"), this.connected ? (this.end(() => {\n              this._setupStream();\n            }), y("client already connected. disconnecting first.")) : (y("_reconnect: calling _setupStream"), this._setupStream());\n          }, T.prototype._setupReconnect = function () {\n            const e = this;\n            !e.disconnecting && !e.reconnectTimer && e.options.reconnectPeriod > 0 ? (this.reconnecting || (y("_setupReconnect :: emit `offline` state"), this.emit("offline"), y("_setupReconnect :: set `reconnecting` to `true`"), this.reconnecting = !0), y("_setupReconnect :: setting reconnectTimer for %d ms", e.options.reconnectPeriod), e.reconnectTimer = setInterval(function () {\n              y("reconnectTimer :: reconnect triggered!"), e._reconnect();\n            }, e.options.reconnectPeriod)) : y("_setupReconnect :: doing nothing...");\n          }, T.prototype._clearReconnect = function () {\n            y("_clearReconnect : clearing reconnect timer"), this.reconnectTimer && (clearInterval(this.reconnectTimer), this.reconnectTimer = null);\n          }, T.prototype._cleanUp = function (e, t) {\n            const r = arguments[2];\n            if (t && (y("_cleanUp :: done callback provided for on stream close"), this.stream.on("close", t)), y("_cleanUp :: forced? %s", e), e) 0 === this.options.reconnectPeriod && this.options.clean && (n = this.outgoing) && (y("flush: queue exists? %b", !!n), Object.keys(n).forEach(function (e) {\n              "function" == typeof n[e].cb && (n[e].cb(new Error("Connection closed")), delete n[e]);\n            })), y("_cleanUp :: (%s) :: destroying stream", this.options.clientId), this.stream.destroy();else {\n              const e = g({\n                cmd: "disconnect"\n              }, r);\n              y("_cleanUp :: (%s) :: call _sendPacket with disconnect packet", this.options.clientId), this._sendPacket(e, m.bind(null, this.stream.end.bind(this.stream)));\n            }\n            var n;\n            this.disconnecting || (y("_cleanUp :: client not disconnecting. Clearing and resetting reconnect."), this._clearReconnect(), this._setupReconnect()), null !== this.pingTimer && (y("_cleanUp :: clearing pingTimer"), this.pingTimer.clear(), this.pingTimer = null), t && !this.connected && (y("_cleanUp :: (%s) :: removing stream `done` callback `close` listener", this.options.clientId), this.stream.removeListener("close", t), t());\n          }, T.prototype._sendPacket = function (e, t, r) {\n            y("_sendPacket :: (%s) ::  start", this.options.clientId), r = r || C, t = t || C;\n\n            const n = function (e, t) {\n              if (5 === e.options.protocolVersion && "publish" === t.cmd) {\n                let r;\n                t.properties && (r = t.properties.topicAlias);\n                const n = t.topic.toString();\n                if (e.topicAliasSend) {\n                  if (r) {\n                    if (0 !== n.length && (y("applyTopicAlias :: register topic: %s - alias: %d", n, r), !e.topicAliasSend.put(n, r))) return y("applyTopicAlias :: error out of range. topic: %s - alias: %d", n, r), new Error("Sending Topic Alias out of range");\n                  } else 0 !== n.length && (e.options.autoAssignTopicAlias ? (r = e.topicAliasSend.getAliasByTopic(n)) ? (t.topic = "", t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto assign(use) topic: %s - alias: %d", n, r)) : (r = e.topicAliasSend.getLruAlias(), e.topicAliasSend.put(n, r), t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto assign topic: %s - alias: %d", n, r)) : e.options.autoUseTopicAlias && (r = e.topicAliasSend.getAliasByTopic(n)) && (t.topic = "", t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto use topic: %s - alias: %d", n, r)));\n                } else if (r) return y("applyTopicAlias :: error out of range. topic: %s - alias: %d", n, r), new Error("Sending Topic Alias out of range");\n              }\n            }(this, e);\n\n            if (n) t(n);else {\n              if (!this.connected) return "auth" === e.cmd ? (this._shiftPingInterval(), void S(this, e, t)) : (y("_sendPacket :: client not connected. Storing packet offline."), void this._storePacket(e, t, r));\n\n              switch (this._shiftPingInterval(), e.cmd) {\n                case "publish":\n                  break;\n\n                case "pubrel":\n                  return void E(this, e, t, r);\n\n                default:\n                  return void S(this, e, t);\n              }\n\n              switch (e.qos) {\n                case 2:\n                case 1:\n                  E(this, e, t, r);\n                  break;\n\n                case 0:\n                default:\n                  S(this, e, t);\n              }\n\n              y("_sendPacket :: (%s) ::  end", this.options.clientId);\n            }\n          }, T.prototype._storePacket = function (e, t, r) {\n            y("_storePacket :: packet: %o", e), y("_storePacket :: cb? %s", !!t), r = r || C;\n            let n = e;\n\n            if ("publish" === n.cmd) {\n              const r = k(this, n = p(e));\n              if (r) return t && t(r);\n            }\n\n            0 === (n.qos || 0) && this.queueQoSZero || "publish" !== n.cmd ? this.queue.push({\n              packet: n,\n              cb: t\n            }) : n.qos > 0 ? (t = this.outgoing[n.messageId] ? this.outgoing[n.messageId].cb : null, this.outgoingStore.put(n, function (e) {\n              if (e) return t && t(e);\n              r();\n            })) : t && t(new Error("No connection to broker"));\n          }, T.prototype._setupPingTimer = function () {\n            y("_setupPingTimer :: keepalive %d (seconds)", this.options.keepalive);\n            const e = this;\n            !this.pingTimer && this.options.keepalive && (this.pingResp = !0, this.pingTimer = f(function () {\n              e._checkPing();\n            }, 1e3 * this.options.keepalive));\n          }, T.prototype._shiftPingInterval = function () {\n            this.pingTimer && this.options.keepalive && this.options.reschedulePings && this.pingTimer.reschedule(1e3 * this.options.keepalive);\n          }, T.prototype._checkPing = function () {\n            y("_checkPing :: checking ping..."), this.pingResp ? (y("_checkPing :: ping response received. Clearing flag and sending `pingreq`"), this.pingResp = !1, this._sendPacket({\n              cmd: "pingreq"\n            })) : (y("_checkPing :: calling _cleanUp with force true"), this._cleanUp(!0));\n          }, T.prototype._handlePingresp = function () {\n            this.pingResp = !0;\n          }, T.prototype._handleConnack = function (e) {\n            y("_handleConnack");\n            const t = this.options,\n                  r = 5 === t.protocolVersion ? e.reasonCode : e.returnCode;\n\n            if (clearTimeout(this.connackTimer), delete this.topicAliasSend, e.properties) {\n              if (e.properties.topicAliasMaximum) {\n                if (e.properties.topicAliasMaximum > 65535) return void this.emit("error", new Error("topicAliasMaximum from broker is out of range"));\n                e.properties.topicAliasMaximum > 0 && (this.topicAliasSend = new a(e.properties.topicAliasMaximum));\n              }\n\n              e.properties.serverKeepAlive && t.keepalive && (t.keepalive = e.properties.serverKeepAlive, this._shiftPingInterval()), e.properties.maximumPacketSize && (t.properties || (t.properties = {}), t.properties.maximumPacketSize = e.properties.maximumPacketSize);\n            }\n\n            if (0 === r) this.reconnecting = !1, this._onConnect(e);else if (r > 0) {\n              const e = new Error("Connection refused: " + _[r]);\n              e.code = r, this.emit("error", e);\n            }\n          }, T.prototype._handleAuth = function (e) {\n            const t = this.options.protocolVersion,\n                  r = 5 === t ? e.reasonCode : e.returnCode;\n\n            if (5 !== t) {\n              const e = new Error("Protocol error: Auth packets are only supported in MQTT 5. Your version:" + t);\n              return e.code = r, void this.emit("error", e);\n            }\n\n            const n = this;\n            this.handleAuth(e, function (e, t) {\n              if (e) n.emit("error", e);else if (24 === r) n.reconnecting = !1, n._sendPacket(t);else {\n                const t = new Error("Connection refused: " + _[r]);\n                e.code = r, n.emit("error", t);\n              }\n            });\n          }, T.prototype.handleAuth = function (e, t) {\n            t();\n          }, T.prototype._handlePublish = function (e, t) {\n            y("_handlePublish: packet %o", e), t = void 0 !== t ? t : C;\n            let r = e.topic.toString();\n            const n = e.payload,\n                  i = e.qos,\n                  o = e.messageId,\n                  s = this,\n                  a = this.options,\n                  l = [0, 16, 128, 131, 135, 144, 145, 151, 153];\n\n            if (5 === this.options.protocolVersion) {\n              let t;\n              if (e.properties && (t = e.properties.topicAlias), void 0 !== t) if (0 === r.length) {\n                if (!(t > 0 && t <= 65535)) return y("_handlePublish :: topic alias out of range. alias: %d", t), void this.emit("error", new Error("Received Topic Alias is out of range"));\n                {\n                  const e = this.topicAliasRecv.getTopicByAlias(t);\n                  if (!e) return y("_handlePublish :: unregistered topic alias. alias: %d", t), void this.emit("error", new Error("Received unregistered Topic Alias"));\n                  y("_handlePublish :: topic complemented by alias. topic: %s - alias: %d", r = e, t);\n                }\n              } else {\n                if (!this.topicAliasRecv.put(r, t)) return y("_handlePublish :: topic alias out of range. alias: %d", t), void this.emit("error", new Error("Received Topic Alias is out of range"));\n                y("_handlePublish :: registered topic: %s - alias: %d", r, t);\n              }\n            }\n\n            switch (y("_handlePublish: qos %d", i), i) {\n              case 2:\n                a.customHandleAcks(r, n, e, function (r, n) {\n                  return r instanceof Error || (n = r, r = null), r ? s.emit("error", r) : -1 === l.indexOf(n) ? s.emit("error", new Error("Wrong reason code for pubrec")) : void (n ? s._sendPacket({\n                    cmd: "pubrec",\n                    messageId: o,\n                    reasonCode: n\n                  }, t) : s.incomingStore.put(e, function () {\n                    s._sendPacket({\n                      cmd: "pubrec",\n                      messageId: o\n                    }, t);\n                  }));\n                });\n                break;\n\n              case 1:\n                a.customHandleAcks(r, n, e, function (i, a) {\n                  return i instanceof Error || (a = i, i = null), i ? s.emit("error", i) : -1 === l.indexOf(a) ? s.emit("error", new Error("Wrong reason code for puback")) : (a || s.emit("message", r, n, e), void s.handleMessage(e, function (e) {\n                    if (e) return t && t(e);\n\n                    s._sendPacket({\n                      cmd: "puback",\n                      messageId: o,\n                      reasonCode: a\n                    }, t);\n                  }));\n                });\n                break;\n\n              case 0:\n                this.emit("message", r, n, e), this.handleMessage(e, t);\n                break;\n\n              default:\n                y("_handlePublish: unknown QoS. Doing nothing.");\n            }\n          }, T.prototype.handleMessage = function (e, t) {\n            t();\n          }, T.prototype._handleAck = function (e) {\n            const t = e.messageId,\n                  r = e.cmd;\n            let n = null;\n            const i = this.outgoing[t] ? this.outgoing[t].cb : null,\n                  o = this;\n            let s;\n\n            if (i) {\n              switch (y("_handleAck :: packet type", r), r) {\n                case "pubcomp":\n                case "puback":\n                  {\n                    const r = e.reasonCode;\n                    r && r > 0 && 16 !== r && ((s = new Error("Publish error: " + _[r])).code = r, i(s, e)), delete this.outgoing[t], this.outgoingStore.del(e, i), this.messageIdProvider.deallocate(t), this._invokeStoreProcessingQueue();\n                    break;\n                  }\n\n                case "pubrec":\n                  {\n                    n = {\n                      cmd: "pubrel",\n                      qos: 2,\n                      messageId: t\n                    };\n                    const r = e.reasonCode;\n                    r && r > 0 && 16 !== r ? ((s = new Error("Publish error: " + _[r])).code = r, i(s, e)) : this._sendPacket(n);\n                    break;\n                  }\n\n                case "suback":\n                  delete this.outgoing[t], this.messageIdProvider.deallocate(t);\n\n                  for (let r = 0; r < e.granted.length; r++) if (0 != (128 & e.granted[r])) {\n                    const e = this.messageIdToTopic[t];\n                    e && e.forEach(function (e) {\n                      delete o._resubscribeTopics[e];\n                    });\n                  }\n\n                  this._invokeStoreProcessingQueue(), i(null, e);\n                  break;\n\n                case "unsuback":\n                  delete this.outgoing[t], this.messageIdProvider.deallocate(t), this._invokeStoreProcessingQueue(), i(null);\n                  break;\n\n                default:\n                  o.emit("error", new Error("unrecognized packet type"));\n              }\n\n              this.disconnecting && 0 === Object.keys(this.outgoing).length && this.emit("outgoingEmpty");\n            } else y("_handleAck :: Server sent an ack in error. Ignoring.");\n          }, T.prototype._handlePubrel = function (e, t) {\n            y("handling pubrel packet"), t = void 0 !== t ? t : C;\n            const r = this,\n                  n = {\n              cmd: "pubcomp",\n              messageId: e.messageId\n            };\n            r.incomingStore.get(e, function (e, i) {\n              e ? r._sendPacket(n, t) : (r.emit("message", i.topic, i.payload, i), r.handleMessage(i, function (e) {\n                if (e) return t(e);\n                r.incomingStore.del(i, C), r._sendPacket(n, t);\n              }));\n            });\n          }, T.prototype._handleDisconnect = function (e) {\n            this.emit("disconnect", e);\n          }, T.prototype._nextId = function () {\n            return this.messageIdProvider.allocate();\n          }, T.prototype.getLastMessageId = function () {\n            return this.messageIdProvider.getLastAllocated();\n          }, T.prototype._resubscribe = function () {\n            y("_resubscribe");\n            const e = Object.keys(this._resubscribeTopics);\n            if (!this._firstConnection && (this.options.clean || 5 === this.options.protocolVersion && !this.connackPacket.sessionPresent) && e.length > 0) if (this.options.resubscribe) {\n              if (5 === this.options.protocolVersion) {\n                y("_resubscribe: protocolVersion 5");\n\n                for (let t = 0; t < e.length; t++) {\n                  const r = {};\n                  r[e[t]] = this._resubscribeTopics[e[t]], r.resubscribe = !0, this.subscribe(r, {\n                    properties: r[e[t]].properties\n                  });\n                }\n              } else this._resubscribeTopics.resubscribe = !0, this.subscribe(this._resubscribeTopics);\n            } else this._resubscribeTopics = {};\n            this._firstConnection = !1;\n          }, T.prototype._onConnect = function (e) {\n            if (this.disconnected) return void this.emit("connect", e);\n            const t = this;\n            this.connackPacket = e, this.messageIdProvider.clear(), this._setupPingTimer(), this.connected = !0, function r() {\n              let n = t.outgoingStore.createStream();\n\n              function i() {\n                t._storeProcessing = !1, t._packetIdsDuringStoreProcessing = {};\n              }\n\n              function o() {\n                n.destroy(), n = null, t._flushStoreProcessingQueue(), i();\n              }\n\n              t.once("close", o), n.on("error", function (e) {\n                i(), t._flushStoreProcessingQueue(), t.removeListener("close", o), t.emit("error", e);\n              }), n.on("end", function () {\n                let n = !0;\n\n                for (const e in t._packetIdsDuringStoreProcessing) if (!t._packetIdsDuringStoreProcessing[e]) {\n                  n = !1;\n                  break;\n                }\n\n                n ? (i(), t.removeListener("close", o), t._invokeAllStoreProcessingQueue(), t.emit("connect", e)) : r();\n              }), function e() {\n                if (!n) return;\n                t._storeProcessing = !0;\n                const r = n.read(1);\n                let i;\n                r ? t._packetIdsDuringStoreProcessing[r.messageId] ? e() : t.disconnecting || t.reconnectTimer ? n.destroy && n.destroy() : (i = t.outgoing[r.messageId] ? t.outgoing[r.messageId].cb : null, t.outgoing[r.messageId] = {\n                  volatile: !1,\n                  cb: function (t, r) {\n                    i && i(t, r), e();\n                  }\n                }, t._packetIdsDuringStoreProcessing[r.messageId] = !0, t.messageIdProvider.register(r.messageId) ? t._sendPacket(r) : y("messageId: %d has already used.", r.messageId)) : n.once("readable", e);\n              }();\n            }();\n          }, T.prototype._invokeStoreProcessingQueue = function () {\n            if (this._storeProcessingQueue.length > 0) {\n              const e = this._storeProcessingQueue[0];\n              if (e && e.invoke()) return this._storeProcessingQueue.shift(), !0;\n            }\n\n            return !1;\n          }, T.prototype._invokeAllStoreProcessingQueue = function () {\n            for (; this._invokeStoreProcessingQueue(););\n          }, T.prototype._flushStoreProcessingQueue = function () {\n            for (const e of this._storeProcessingQueue) e.cbStorePut && e.cbStorePut(new Error("Connection closed")), e.callback && e.callback(new Error("Connection closed"));\n\n            this._storeProcessingQueue.splice(0);\n          }, t.exports = T;\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "./default-message-id-provider": 7,\n      "./store": 8,\n      "./topic-alias-recv": 9,\n      "./topic-alias-send": 10,\n      "./validations": 11,\n      _process: 50,\n      debug: 18,\n      events: 22,\n      inherits: 24,\n      "mqtt-packet": 40,\n      "readable-stream": 69,\n      reinterval: 70,\n      "rfdc/default": 71,\n      xtend: 81\n    }],\n    2: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("readable-stream").Transform,\n                i = e("duplexify");\n          let o,\n              s,\n              a,\n              l = !1;\n\n          t.exports = function (e, t) {\n            if (t.hostname = t.hostname || t.host, !t.hostname) throw new Error("Could not determine host. Specify host manually.");\n            const u = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt";\n            !function (e) {\n              e.hostname || (e.hostname = "localhost"), e.path || (e.path = "/"), e.wsOptions || (e.wsOptions = {});\n            }(t);\n\n            const c = function (e, t) {\n              const r = "alis" === e.protocol ? "wss" : "ws";\n              let n = r + "://" + e.hostname + e.path;\n              return e.port && 80 !== e.port && 443 !== e.port && (n = r + "://" + e.hostname + ":" + e.port + e.path), "function" == typeof e.transformWsUrl && (n = e.transformWsUrl(n, e, t)), n;\n            }(t, e);\n\n            return (o = t.my).connectSocket({\n              url: c,\n              protocols: u\n            }), s = function () {\n              const e = new n();\n              return e._write = function (e, t, r) {\n                o.sendSocketMessage({\n                  data: e.buffer,\n                  success: function () {\n                    r();\n                  },\n                  fail: function () {\n                    r(new Error());\n                  }\n                });\n              }, e._flush = function (e) {\n                o.closeSocket({\n                  success: function () {\n                    e();\n                  }\n                });\n              }, e;\n            }(), a = i.obj(), l || (l = !0, o.onSocketOpen(function () {\n              a.setReadable(s), a.setWritable(s), a.emit("connect");\n            }), o.onSocketMessage(function (e) {\n              if ("string" == typeof e.data) {\n                const t = r.from(e.data, "base64");\n                s.push(t);\n              } else {\n                const t = new FileReader();\n                t.addEventListener("load", function () {\n                  let e = t.result;\n                  e = e instanceof ArrayBuffer ? r.from(e) : r.from(e, "utf8"), s.push(e);\n                }), t.readAsArrayBuffer(e.data);\n              }\n            }), o.onSocketClose(function () {\n              a.end(), a.destroy();\n            }), o.onSocketError(function (e) {\n              a.destroy(e);\n            })), a;\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17,\n      duplexify: 20,\n      "readable-stream": 69\n    }],\n    3: [function (e, t, r) {\n      "use strict";\n\n      const n = e("net"),\n            i = e("debug")("mqttjs:tcp");\n\n      t.exports = function (e, t) {\n        t.port = t.port || 1883, t.hostname = t.hostname || t.host || "localhost";\n        const r = t.port,\n              o = t.hostname;\n        return i("port %d and host %s", r, o), n.createConnection(r, o);\n      };\n    }, {\n      debug: 18,\n      net: 16\n    }],\n    4: [function (e, t, r) {\n      "use strict";\n\n      const n = e("tls"),\n            i = e("net"),\n            o = e("debug")("mqttjs:tls");\n\n      t.exports = function (e, t) {\n        t.port = t.port || 8883, t.host = t.hostname || t.host || "localhost", 0 === i.isIP(t.host) && (t.servername = t.host), t.rejectUnauthorized = !1 !== t.rejectUnauthorized, delete t.path, o("port %d host %s rejectUnauthorized %b", t.port, t.host, t.rejectUnauthorized);\n        const r = n.connect(t);\n\n        function s(n) {\n          t.rejectUnauthorized && e.emit("error", n), r.end();\n        }\n\n        return r.on("secureConnect", function () {\n          t.rejectUnauthorized && !r.authorized ? r.emit("error", new Error("TLS not authorized")) : r.removeListener("error", s);\n        }), r.on("error", s), r;\n      };\n    }, {\n      debug: 18,\n      net: 16,\n      tls: 16\n    }],\n    5: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          const i = e("ws"),\n                o = e("debug")("mqttjs:ws"),\n                s = e("duplexify"),\n                a = e("readable-stream").Transform,\n                l = ["rejectUnauthorized", "ca", "cert", "key", "pfx", "passphrase"],\n                u = void 0 !== r && "browser" === r.title || "function" == typeof __webpack_require__;\n\n          function c(e, t) {\n            let r = e.protocol + "://" + e.hostname + ":" + e.port + e.path;\n            return "function" == typeof e.transformWsUrl && (r = e.transformWsUrl(r, e, t)), r;\n          }\n\n          function h(e) {\n            const t = e;\n            return e.hostname || (t.hostname = "localhost"), e.port || ("wss" === e.protocol ? t.port = 443 : t.port = 80), e.path || (t.path = "/"), e.wsOptions || (t.wsOptions = {}), u || "wss" !== e.protocol || l.forEach(function (r) {\n              Object.prototype.hasOwnProperty.call(e, r) && !Object.prototype.hasOwnProperty.call(e.wsOptions, r) && (t.wsOptions[r] = e[r]);\n            }), t;\n          }\n\n          t.exports = u ? function (e, t) {\n            let r;\n            o("browserStreamBuilder");\n\n            const i = function (e) {\n              const t = h(e);\n\n              if (t.hostname || (t.hostname = t.host), !t.hostname) {\n                if ("undefined" == typeof document) throw new Error("Could not determine host. Specify host manually.");\n                const e = new URL(document.URL);\n                t.hostname = e.hostname, t.port || (t.port = e.port);\n              }\n\n              return void 0 === t.objectMode && (t.objectMode = !(!0 === t.binary || void 0 === t.binary)), t;\n            }(t).browserBufferSize || 524288,\n                  l = t.browserBufferTimeout || 1e3,\n                  u = !t.objectMode,\n                  f = function (e, t) {\n              const r = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt",\n                    n = c(t, e),\n                    i = new WebSocket(n, [r]);\n              return i.binaryType = "arraybuffer", i;\n            }(e, t),\n                  p = function (e, t, r) {\n              const n = new a({\n                objectModeMode: e.objectMode\n              });\n              return n._write = t, n._flush = r, n;\n            }(t, function e(t, r, o) {\n              f.bufferedAmount > i && setTimeout(e, l, t, r, o), u && "string" == typeof t && (t = n.from(t, "utf8"));\n\n              try {\n                f.send(t);\n              } catch (e) {\n                return o(e);\n              }\n\n              o();\n            }, function (e) {\n              f.close(), e();\n            });\n\n            t.objectMode || (p._writev = v), p.on("close", () => {\n              f.close();\n            });\n            const d = void 0 !== f.addEventListener;\n\n            function g() {\n              r.setReadable(p), r.setWritable(p), r.emit("connect");\n            }\n\n            function y() {\n              r.end(), r.destroy();\n            }\n\n            function b(e) {\n              r.destroy(e);\n            }\n\n            function m(e) {\n              let t = e.data;\n              t = t instanceof ArrayBuffer ? n.from(t) : n.from(t, "utf8"), p.push(t);\n            }\n\n            function v(e, t) {\n              const r = new Array(e.length);\n\n              for (let t = 0; t < e.length; t++) "string" == typeof e[t].chunk ? r[t] = n.from(e[t], "utf8") : r[t] = e[t].chunk;\n\n              this._write(n.concat(r), "binary", t);\n            }\n\n            return f.readyState === f.OPEN ? r = p : (r = r = s(void 0, void 0, t), t.objectMode || (r._writev = v), d ? f.addEventListener("open", g) : f.onopen = g), r.socket = f, d ? (f.addEventListener("close", y), f.addEventListener("error", b), f.addEventListener("message", m)) : (f.onclose = y, f.onerror = b, f.onmessage = m), r;\n          } : function (e, t) {\n            o("streamBuilder");\n\n            const r = h(t),\n                  n = c(r, e),\n                  s = function (e, t, r) {\n              o("createWebSocket"), o("protocol: " + r.protocolId + " " + r.protocolVersion);\n              const n = "MQIsdp" === r.protocolId && 3 === r.protocolVersion ? "mqttv3.1" : "mqtt";\n              return o("creating new Websocket for url: " + t + " and protocol: " + n), new i(t, [n], r.wsOptions);\n            }(0, n, r),\n                  a = i.createWebSocketStream(s, r.wsOptions);\n\n            return a.url = n, s.on("close", () => {\n              a.destroy();\n            }), a;\n          };\n        }).call(this);\n      }).call(this, e("_process"), e("buffer").Buffer);\n    }, {\n      _process: 50,\n      buffer: 17,\n      debug: 18,\n      duplexify: 20,\n      "readable-stream": 69,\n      ws: 80\n    }],\n    6: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("readable-stream").Transform,\n                i = e("duplexify");\n          let o, s, a;\n\n          t.exports = function (e, t) {\n            if (t.hostname = t.hostname || t.host, !t.hostname) throw new Error("Could not determine host. Specify host manually.");\n            const l = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt";\n            !function (e) {\n              e.hostname || (e.hostname = "localhost"), e.path || (e.path = "/"), e.wsOptions || (e.wsOptions = {});\n            }(t);\n\n            const u = function (e, t) {\n              const r = "wxs" === e.protocol ? "wss" : "ws";\n              let n = r + "://" + e.hostname + e.path;\n              return e.port && 80 !== e.port && 443 !== e.port && (n = r + "://" + e.hostname + ":" + e.port + e.path), "function" == typeof e.transformWsUrl && (n = e.transformWsUrl(n, e, t)), n;\n            }(t, e);\n\n            o = wx.connectSocket({\n              url: u,\n              protocols: [l]\n            }), s = function () {\n              const e = new n();\n              return e._write = function (e, t, r) {\n                o.send({\n                  data: e.buffer,\n                  success: function () {\n                    r();\n                  },\n                  fail: function (e) {\n                    r(new Error(e));\n                  }\n                });\n              }, e._flush = function (e) {\n                o.close({\n                  success: function () {\n                    e();\n                  }\n                });\n              }, e;\n            }(), (a = i.obj())._destroy = function (e, t) {\n              o.close({\n                success: function () {\n                  t && t(e);\n                }\n              });\n            };\n            const c = a.destroy;\n            return a.destroy = function () {\n              a.destroy = c;\n              const e = this;\n              setTimeout(function () {\n                o.close({\n                  fail: function () {\n                    e._destroy(new Error());\n                  }\n                });\n              }, 0);\n            }.bind(a), o.onOpen(function () {\n              a.setReadable(s), a.setWritable(s), a.emit("connect");\n            }), o.onMessage(function (e) {\n              let t = e.data;\n              t = t instanceof ArrayBuffer ? r.from(t) : r.from(t, "utf8"), s.push(t);\n            }), o.onClose(function () {\n              a.end(), a.destroy();\n            }), o.onError(function (e) {\n              a.destroy(new Error(e.errMsg));\n            }), a;\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17,\n      duplexify: 20,\n      "readable-stream": 69\n    }],\n    7: [function (e, t, r) {\n      "use strict";\n\n      function n() {\n        if (!(this instanceof n)) return new n();\n        this.nextId = Math.max(1, Math.floor(65535 * Math.random()));\n      }\n\n      n.prototype.allocate = function () {\n        const e = this.nextId++;\n        return 65536 === this.nextId && (this.nextId = 1), e;\n      }, n.prototype.getLastAllocated = function () {\n        return 1 === this.nextId ? 65535 : this.nextId - 1;\n      }, n.prototype.register = function (e) {\n        return !0;\n      }, n.prototype.deallocate = function (e) {}, n.prototype.clear = function () {}, t.exports = n;\n    }, {}],\n    8: [function (e, t, r) {\n      "use strict";\n\n      const n = e("xtend"),\n            i = e("readable-stream").Readable,\n            o = {\n        objectMode: !0\n      },\n            s = {\n        clean: !0\n      };\n\n      function a(e) {\n        if (!(this instanceof a)) return new a(e);\n        this.options = e || {}, this.options = n(s, e), this._inflights = new Map();\n      }\n\n      a.prototype.put = function (e, t) {\n        return this._inflights.set(e.messageId, e), t && t(), this;\n      }, a.prototype.createStream = function () {\n        const e = new i(o),\n              t = [];\n        let r = !1,\n            n = 0;\n        return this._inflights.forEach(function (e, r) {\n          t.push(e);\n        }), e._read = function () {\n          !r && n < t.length ? this.push(t[n++]) : this.push(null);\n        }, e.destroy = function () {\n          if (r) return;\n          const e = this;\n          r = !0, setTimeout(function () {\n            e.emit("close");\n          }, 0);\n        }, e;\n      }, a.prototype.del = function (e, t) {\n        return (e = this._inflights.get(e.messageId)) ? (this._inflights.delete(e.messageId), t(null, e)) : t && t(new Error("missing packet")), this;\n      }, a.prototype.get = function (e, t) {\n        return (e = this._inflights.get(e.messageId)) ? t(null, e) : t && t(new Error("missing packet")), this;\n      }, a.prototype.close = function (e) {\n        this.options.clean && (this._inflights = null), e && e();\n      }, t.exports = a;\n    }, {\n      "readable-stream": 69,\n      xtend: 81\n    }],\n    9: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        if (!(this instanceof n)) return new n(e);\n        this.aliasToTopic = {}, this.max = e;\n      }\n\n      n.prototype.put = function (e, t) {\n        return !(0 === t || t > this.max) && (this.aliasToTopic[t] = e, this.length = Object.keys(this.aliasToTopic).length, !0);\n      }, n.prototype.getTopicByAlias = function (e) {\n        return this.aliasToTopic[e];\n      }, n.prototype.clear = function () {\n        this.aliasToTopic = {};\n      }, t.exports = n;\n    }, {}],\n    10: [function (e, t, r) {\n      "use strict";\n\n      const n = e("lru-cache"),\n            i = e("number-allocator").NumberAllocator;\n\n      function o(e) {\n        if (!(this instanceof o)) return new o(e);\n        e > 0 && (this.aliasToTopic = new n({\n          max: e\n        }), this.topicToAlias = {}, this.numberAllocator = new i(1, e), this.max = e, this.length = 0);\n      }\n\n      o.prototype.put = function (e, t) {\n        if (0 === t || t > this.max) return !1;\n        const r = this.aliasToTopic.get(t);\n        return r && delete this.topicToAlias[r], this.aliasToTopic.set(t, e), this.topicToAlias[e] = t, this.numberAllocator.use(t), this.length = this.aliasToTopic.length, !0;\n      }, o.prototype.getTopicByAlias = function (e) {\n        return this.aliasToTopic.get(e);\n      }, o.prototype.getAliasByTopic = function (e) {\n        const t = this.topicToAlias[e];\n        return void 0 !== t && this.aliasToTopic.get(t), t;\n      }, o.prototype.clear = function () {\n        this.aliasToTopic.reset(), this.topicToAlias = {}, this.numberAllocator.clear(), this.length = 0;\n      }, o.prototype.getLruAlias = function () {\n        const e = this.numberAllocator.firstVacant();\n        return e || this.aliasToTopic.keys()[this.aliasToTopic.length - 1];\n      }, t.exports = o;\n    }, {\n      "lru-cache": 37,\n      "number-allocator": 46\n    }],\n    11: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        const t = e.split("/");\n\n        for (let e = 0; e < t.length; e++) if ("+" !== t[e]) {\n          if ("#" === t[e]) return e === t.length - 1;\n          if (-1 !== t[e].indexOf("+") || -1 !== t[e].indexOf("#")) return !1;\n        }\n\n        return !0;\n      }\n\n      t.exports = {\n        validateTopics: function (e) {\n          if (0 === e.length) return "empty_topic_list";\n\n          for (let t = 0; t < e.length; t++) if (!n(e[t])) return e[t];\n\n          return null;\n        }\n      };\n    }, {}],\n    12: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("../client"),\n                i = e("../store"),\n                o = e("url"),\n                s = e("xtend"),\n                a = e("debug")("mqttjs"),\n                l = {};\n\n          function u(e, t) {\n            if (a("connecting to an MQTT broker..."), "object" != typeof e || t || (t = e, e = null), t = t || {}, e) {\n              const r = o.parse(e, !0);\n              if (null != r.port && (r.port = Number(r.port)), null === (t = s(r, t)).protocol) throw new Error("Missing protocol");\n              t.protocol = t.protocol.replace(/:$/, "");\n            }\n\n            if (function (e) {\n              let t;\n              e.auth && ((t = e.auth.match(/^(.+):(.+)$/)) ? (e.username = t[1], e.password = t[2]) : e.username = e.auth);\n            }(t), t.query && "string" == typeof t.query.clientId && (t.clientId = t.query.clientId), t.cert && t.key) {\n              if (!t.protocol) throw new Error("Missing secure protocol key");\n              if (-1 === ["mqtts", "wss", "wxs", "alis"].indexOf(t.protocol)) switch (t.protocol) {\n                case "mqtt":\n                  t.protocol = "mqtts";\n                  break;\n\n                case "ws":\n                  t.protocol = "wss";\n                  break;\n\n                case "wx":\n                  t.protocol = "wxs";\n                  break;\n\n                case "ali":\n                  t.protocol = "alis";\n                  break;\n\n                default:\n                  throw new Error(\'Unknown protocol for secure connection: "\' + t.protocol + \'"!\');\n              }\n            }\n\n            if (!l[t.protocol]) {\n              const e = -1 !== ["mqtts", "wss"].indexOf(t.protocol);\n              t.protocol = ["mqtt", "mqtts", "ws", "wss", "wx", "wxs", "ali", "alis"].filter(function (t, r) {\n                return (!e || r % 2 != 0) && "function" == typeof l[t];\n              })[0];\n            }\n\n            if (!1 === t.clean && !t.clientId) throw new Error("Missing clientId for unclean clients");\n            t.protocol && (t.defaultProtocol = t.protocol);\n            const r = new n(function (e) {\n              return t.servers && (e._reconnectCount && e._reconnectCount !== t.servers.length || (e._reconnectCount = 0), t.host = t.servers[e._reconnectCount].host, t.port = t.servers[e._reconnectCount].port, t.protocol = t.servers[e._reconnectCount].protocol ? t.servers[e._reconnectCount].protocol : t.defaultProtocol, t.hostname = t.host, e._reconnectCount++), a("calling streambuilder for", t.protocol), l[t.protocol](e, t);\n            }, t);\n            return r.on("error", function () {}), r;\n          }\n\n          void 0 !== r && "browser" !== r.title || "function" != typeof __webpack_require__ ? (l.mqtt = e("./tcp"), l.tcp = e("./tcp"), l.ssl = e("./tls"), l.tls = e("./tls"), l.mqtts = e("./tls")) : (l.wx = e("./wx"), l.wxs = e("./wx"), l.ali = e("./ali"), l.alis = e("./ali")), l.ws = e("./ws"), l.wss = e("./ws"), t.exports = u, t.exports.connect = u, t.exports.MqttClient = n, t.exports.Store = i;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "../client": 1,\n      "../store": 8,\n      "./ali": 2,\n      "./tcp": 3,\n      "./tls": 4,\n      "./ws": 5,\n      "./wx": 6,\n      _process: 50,\n      debug: 18,\n      url: 76,\n      xtend: 81\n    }],\n    13: [function (e, t, r) {\n      "use strict";\n\n      r.byteLength = function (e) {\n        var t = u(e),\n            r = t[0],\n            n = t[1];\n        return 3 * (r + n) / 4 - n;\n      }, r.toByteArray = function (e) {\n        var t,\n            r,\n            n = u(e),\n            s = n[0],\n            a = n[1],\n            l = new o(function (e, t, r) {\n          return 3 * (t + r) / 4 - r;\n        }(0, s, a)),\n            c = 0,\n            h = a > 0 ? s - 4 : s;\n\n        for (r = 0; r < h; r += 4) t = i[e.charCodeAt(r)] << 18 | i[e.charCodeAt(r + 1)] << 12 | i[e.charCodeAt(r + 2)] << 6 | i[e.charCodeAt(r + 3)], l[c++] = t >> 16 & 255, l[c++] = t >> 8 & 255, l[c++] = 255 & t;\n\n        2 === a && (t = i[e.charCodeAt(r)] << 2 | i[e.charCodeAt(r + 1)] >> 4, l[c++] = 255 & t);\n        1 === a && (t = i[e.charCodeAt(r)] << 10 | i[e.charCodeAt(r + 1)] << 4 | i[e.charCodeAt(r + 2)] >> 2, l[c++] = t >> 8 & 255, l[c++] = 255 & t);\n        return l;\n      }, r.fromByteArray = function (e) {\n        for (var t, r = e.length, i = r % 3, o = [], s = 0, a = r - i; s < a; s += 16383) o.push(c(e, s, s + 16383 > a ? a : s + 16383));\n\n        1 === i ? (t = e[r - 1], o.push(n[t >> 2] + n[t << 4 & 63] + "==")) : 2 === i && (t = (e[r - 2] << 8) + e[r - 1], o.push(n[t >> 10] + n[t >> 4 & 63] + n[t << 2 & 63] + "="));\n        return o.join("");\n      };\n\n      for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, l = s.length; a < l; ++a) n[a] = s[a], i[s.charCodeAt(a)] = a;\n\n      function u(e) {\n        var t = e.length;\n        if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");\n        var r = e.indexOf("=");\n        return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];\n      }\n\n      function c(e, t, r) {\n        for (var i, o, s = [], a = t; a < r; a += 3) i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(n[(o = i) >> 18 & 63] + n[o >> 12 & 63] + n[o >> 6 & 63] + n[63 & o]);\n\n        return s.join("");\n      }\n\n      i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;\n    }, {}],\n    14: [function (e, t, r) {\n      "use strict";\n\n      const {\n        Buffer: n\n      } = e("buffer"),\n            i = Symbol.for("BufferList");\n\n      function o(e) {\n        if (!(this instanceof o)) return new o(e);\n\n        o._init.call(this, e);\n      }\n\n      o._init = function (e) {\n        Object.defineProperty(this, i, {\n          value: !0\n        }), this._bufs = [], this.length = 0, e && this.append(e);\n      }, o.prototype._new = function (e) {\n        return new o(e);\n      }, o.prototype._offset = function (e) {\n        if (0 === e) return [0, 0];\n        let t = 0;\n\n        for (let r = 0; r < this._bufs.length; r++) {\n          const n = t + this._bufs[r].length;\n          if (e < n || r === this._bufs.length - 1) return [r, e - t];\n          t = n;\n        }\n      }, o.prototype._reverseOffset = function (e) {\n        const t = e[0];\n        let r = e[1];\n\n        for (let e = 0; e < t; e++) r += this._bufs[e].length;\n\n        return r;\n      }, o.prototype.get = function (e) {\n        if (e > this.length || e < 0) return;\n\n        const t = this._offset(e);\n\n        return this._bufs[t[0]][t[1]];\n      }, o.prototype.slice = function (e, t) {\n        return "number" == typeof e && e < 0 && (e += this.length), "number" == typeof t && t < 0 && (t += this.length), this.copy(null, 0, e, t);\n      }, o.prototype.copy = function (e, t, r, i) {\n        if (("number" != typeof r || r < 0) && (r = 0), ("number" != typeof i || i > this.length) && (i = this.length), r >= this.length) return e || n.alloc(0);\n        if (i <= 0) return e || n.alloc(0);\n\n        const o = !!e,\n              s = this._offset(r),\n              a = i - r;\n\n        let l = a,\n            u = o && t || 0,\n            c = s[1];\n\n        if (0 === r && i === this.length) {\n          if (!o) return 1 === this._bufs.length ? this._bufs[0] : n.concat(this._bufs, this.length);\n\n          for (let t = 0; t < this._bufs.length; t++) this._bufs[t].copy(e, u), u += this._bufs[t].length;\n\n          return e;\n        }\n\n        if (l <= this._bufs[s[0]].length - c) return o ? this._bufs[s[0]].copy(e, t, c, c + l) : this._bufs[s[0]].slice(c, c + l);\n        o || (e = n.allocUnsafe(a));\n\n        for (let t = s[0]; t < this._bufs.length; t++) {\n          const r = this._bufs[t].length - c;\n\n          if (!(l > r)) {\n            this._bufs[t].copy(e, u, c, c + l), u += r;\n            break;\n          }\n\n          this._bufs[t].copy(e, u, c), u += r, l -= r, c && (c = 0);\n        }\n\n        return e.length > u ? e.slice(0, u) : e;\n      }, o.prototype.shallowSlice = function (e, t) {\n        if (e = e || 0, t = "number" != typeof t ? this.length : t, e < 0 && (e += this.length), t < 0 && (t += this.length), e === t) return this._new();\n\n        const r = this._offset(e),\n              n = this._offset(t),\n              i = this._bufs.slice(r[0], n[0] + 1);\n\n        return 0 === n[1] ? i.pop() : i[i.length - 1] = i[i.length - 1].slice(0, n[1]), 0 !== r[1] && (i[0] = i[0].slice(r[1])), this._new(i);\n      }, o.prototype.toString = function (e, t, r) {\n        return this.slice(t, r).toString(e);\n      }, o.prototype.consume = function (e) {\n        if (e = Math.trunc(e), Number.isNaN(e) || e <= 0) return this;\n\n        for (; this._bufs.length;) {\n          if (!(e >= this._bufs[0].length)) {\n            this._bufs[0] = this._bufs[0].slice(e), this.length -= e;\n            break;\n          }\n\n          e -= this._bufs[0].length, this.length -= this._bufs[0].length, this._bufs.shift();\n        }\n\n        return this;\n      }, o.prototype.duplicate = function () {\n        const e = this._new();\n\n        for (let t = 0; t < this._bufs.length; t++) e.append(this._bufs[t]);\n\n        return e;\n      }, o.prototype.append = function (e) {\n        if (null == e) return this;\n        if (e.buffer) this._appendBuffer(n.from(e.buffer, e.byteOffset, e.byteLength));else if (Array.isArray(e)) for (let t = 0; t < e.length; t++) this.append(e[t]);else if (this._isBufferList(e)) for (let t = 0; t < e._bufs.length; t++) this.append(e._bufs[t]);else "number" == typeof e && (e = e.toString()), this._appendBuffer(n.from(e));\n        return this;\n      }, o.prototype._appendBuffer = function (e) {\n        this._bufs.push(e), this.length += e.length;\n      }, o.prototype.indexOf = function (e, t, r) {\n        if (void 0 === r && "string" == typeof t && (r = t, t = void 0), "function" == typeof e || Array.isArray(e)) throw new TypeError(\'The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.\');\n        if ("number" == typeof e ? e = n.from([e]) : "string" == typeof e ? e = n.from(e, r) : this._isBufferList(e) ? e = e.slice() : Array.isArray(e.buffer) ? e = n.from(e.buffer, e.byteOffset, e.byteLength) : n.isBuffer(e) || (e = n.from(e)), t = Number(t || 0), isNaN(t) && (t = 0), t < 0 && (t = this.length + t), t < 0 && (t = 0), 0 === e.length) return t > this.length ? this.length : t;\n\n        const i = this._offset(t);\n\n        let o = i[0],\n            s = i[1];\n\n        for (; o < this._bufs.length; o++) {\n          const t = this._bufs[o];\n\n          for (; s < t.length;) {\n            if (t.length - s >= e.length) {\n              const r = t.indexOf(e, s);\n              if (-1 !== r) return this._reverseOffset([o, r]);\n              s = t.length - e.length + 1;\n            } else {\n              const t = this._reverseOffset([o, s]);\n\n              if (this._match(t, e)) return t;\n              s++;\n            }\n          }\n\n          s = 0;\n        }\n\n        return -1;\n      }, o.prototype._match = function (e, t) {\n        if (this.length - e < t.length) return !1;\n\n        for (let r = 0; r < t.length; r++) if (this.get(e + r) !== t[r]) return !1;\n\n        return !0;\n      }, function () {\n        const e = {\n          readDoubleBE: 8,\n          readDoubleLE: 8,\n          readFloatBE: 4,\n          readFloatLE: 4,\n          readInt32BE: 4,\n          readInt32LE: 4,\n          readUInt32BE: 4,\n          readUInt32LE: 4,\n          readInt16BE: 2,\n          readInt16LE: 2,\n          readUInt16BE: 2,\n          readUInt16LE: 2,\n          readInt8: 1,\n          readUInt8: 1,\n          readIntBE: null,\n          readIntLE: null,\n          readUIntBE: null,\n          readUIntLE: null\n        };\n\n        for (const t in e) !function (t) {\n          o.prototype[t] = null === e[t] ? function (e, r) {\n            return this.slice(e, e + r)[t](0, r);\n          } : function (r = 0) {\n            return this.slice(r, r + e[t])[t](0);\n          };\n        }(t);\n      }(), o.prototype._isBufferList = function (e) {\n        return e instanceof o || o.isBufferList(e);\n      }, o.isBufferList = function (e) {\n        return null != e && e[i];\n      }, t.exports = o;\n    }, {\n      buffer: 17\n    }],\n    15: [function (e, t, r) {\n      "use strict";\n\n      const n = e("readable-stream").Duplex,\n            i = e("inherits"),\n            o = e("./BufferList");\n\n      function s(e) {\n        if (!(this instanceof s)) return new s(e);\n\n        if ("function" == typeof e) {\n          this._callback = e;\n\n          const t = function (e) {\n            this._callback && (this._callback(e), this._callback = null);\n          }.bind(this);\n\n          this.on("pipe", function (e) {\n            e.on("error", t);\n          }), this.on("unpipe", function (e) {\n            e.removeListener("error", t);\n          }), e = null;\n        }\n\n        o._init.call(this, e), n.call(this);\n      }\n\n      i(s, n), Object.assign(s.prototype, o.prototype), s.prototype._new = function (e) {\n        return new s(e);\n      }, s.prototype._write = function (e, t, r) {\n        this._appendBuffer(e), "function" == typeof r && r();\n      }, s.prototype._read = function (e) {\n        if (!this.length) return this.push(null);\n        e = Math.min(e, this.length), this.push(this.slice(0, e)), this.consume(e);\n      }, s.prototype.end = function (e) {\n        n.prototype.end.call(this, e), this._callback && (this._callback(null, this.slice()), this._callback = null);\n      }, s.prototype._destroy = function (e, t) {\n        this._bufs.length = 0, this.length = 0, t(e);\n      }, s.prototype._isBufferList = function (e) {\n        return e instanceof s || e instanceof o || s.isBufferList(e);\n      }, s.isBufferList = o.isBufferList, t.exports = s, t.exports.BufferListStream = s, t.exports.BufferList = o;\n    }, {\n      "./BufferList": 14,\n      inherits: 24,\n      "readable-stream": 69\n    }],\n    16: [function (e, t, r) {}, {}],\n    17: [function (e, t, r) {\n      (function (t) {\n        (function () {\n          "use strict";\n\n          var t = e("base64-js"),\n              n = e("ieee754");\n          r.Buffer = s, r.SlowBuffer = function (e) {\n            +e != e && (e = 0);\n            return s.alloc(+e);\n          }, r.INSPECT_MAX_BYTES = 50;\n          var i = 2147483647;\n\n          function o(e) {\n            if (e > i) throw new RangeError(\'The value "\' + e + \'" is invalid for option "size"\');\n            var t = new Uint8Array(e);\n            return t.__proto__ = s.prototype, t;\n          }\n\n          function s(e, t, r) {\n            if ("number" == typeof e) {\n              if ("string" == typeof t) throw new TypeError(\'The "string" argument must be of type string. Received type number\');\n              return u(e);\n            }\n\n            return a(e, t, r);\n          }\n\n          function a(e, t, r) {\n            if ("string" == typeof e) return function (e, t) {\n              "string" == typeof t && "" !== t || (t = "utf8");\n              if (!s.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);\n              var r = 0 | f(e, t),\n                  n = o(r),\n                  i = n.write(e, t);\n              i !== r && (n = n.slice(0, i));\n              return n;\n            }(e, t);\n            if (ArrayBuffer.isView(e)) return c(e);\n            if (null == e) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);\n            if (q(e, ArrayBuffer) || e && q(e.buffer, ArrayBuffer)) return function (e, t, r) {\n              if (t < 0 || e.byteLength < t) throw new RangeError(\'"offset" is outside of buffer bounds\');\n              if (e.byteLength < t + (r || 0)) throw new RangeError(\'"length" is outside of buffer bounds\');\n              var n;\n              n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);\n              return n.__proto__ = s.prototype, n;\n            }(e, t, r);\n            if ("number" == typeof e) throw new TypeError(\'The "value" argument must not be of type number. Received type number\');\n            var n = e.valueOf && e.valueOf();\n            if (null != n && n !== e) return s.from(n, t, r);\n\n            var i = function (e) {\n              if (s.isBuffer(e)) {\n                var t = 0 | h(e.length),\n                    r = o(t);\n                return 0 === r.length ? r : (e.copy(r, 0, 0, t), r);\n              }\n\n              if (void 0 !== e.length) return "number" != typeof e.length || D(e.length) ? o(0) : c(e);\n              if ("Buffer" === e.type && Array.isArray(e.data)) return c(e.data);\n            }(e);\n\n            if (i) return i;\n            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return s.from(e[Symbol.toPrimitive]("string"), t, r);\n            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);\n          }\n\n          function l(e) {\n            if ("number" != typeof e) throw new TypeError(\'"size" argument must be of type number\');\n            if (e < 0) throw new RangeError(\'The value "\' + e + \'" is invalid for option "size"\');\n          }\n\n          function u(e) {\n            return l(e), o(e < 0 ? 0 : 0 | h(e));\n          }\n\n          function c(e) {\n            for (var t = e.length < 0 ? 0 : 0 | h(e.length), r = o(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];\n\n            return r;\n          }\n\n          function h(e) {\n            if (e >= i) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");\n            return 0 | e;\n          }\n\n          function f(e, t) {\n            if (s.isBuffer(e)) return e.length;\n            if (ArrayBuffer.isView(e) || q(e, ArrayBuffer)) return e.byteLength;\n            if ("string" != typeof e) throw new TypeError(\'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type \' + typeof e);\n            var r = e.length,\n                n = arguments.length > 2 && !0 === arguments[2];\n            if (!n && 0 === r) return 0;\n\n            for (var i = !1;;) switch (t) {\n              case "ascii":\n              case "latin1":\n              case "binary":\n                return r;\n\n              case "utf8":\n              case "utf-8":\n                return L(e).length;\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return 2 * r;\n\n              case "hex":\n                return r >>> 1;\n\n              case "base64":\n                return j(e).length;\n\n              default:\n                if (i) return n ? -1 : L(e).length;\n                t = ("" + t).toLowerCase(), i = !0;\n            }\n          }\n\n          function p(e, t, r) {\n            var n = e[t];\n            e[t] = e[r], e[r] = n;\n          }\n\n          function d(e, t, r, n, i) {\n            if (0 === e.length) return -1;\n\n            if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), D(r = +r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {\n              if (i) return -1;\n              r = e.length - 1;\n            } else if (r < 0) {\n              if (!i) return -1;\n              r = 0;\n            }\n\n            if ("string" == typeof t && (t = s.from(t, n)), s.isBuffer(t)) return 0 === t.length ? -1 : g(e, t, r, n, i);\n            if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : g(e, [t], r, n, i);\n            throw new TypeError("val must be string, number or Buffer");\n          }\n\n          function g(e, t, r, n, i) {\n            var o,\n                s = 1,\n                a = e.length,\n                l = t.length;\n\n            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {\n              if (e.length < 2 || t.length < 2) return -1;\n              s = 2, a /= 2, l /= 2, r /= 2;\n            }\n\n            function u(e, t) {\n              return 1 === s ? e[t] : e.readUInt16BE(t * s);\n            }\n\n            if (i) {\n              var c = -1;\n\n              for (o = r; o < a; o++) if (u(e, o) === u(t, -1 === c ? 0 : o - c)) {\n                if (-1 === c && (c = o), o - c + 1 === l) return c * s;\n              } else -1 !== c && (o -= o - c), c = -1;\n            } else for (r + l > a && (r = a - l), o = r; o >= 0; o--) {\n              for (var h = !0, f = 0; f < l; f++) if (u(e, o + f) !== u(t, f)) {\n                h = !1;\n                break;\n              }\n\n              if (h) return o;\n            }\n\n            return -1;\n          }\n\n          function y(e, t, r, n) {\n            r = Number(r) || 0;\n            var i = e.length - r;\n            n ? (n = Number(n)) > i && (n = i) : n = i;\n            var o = t.length;\n            n > o / 2 && (n = o / 2);\n\n            for (var s = 0; s < n; ++s) {\n              var a = parseInt(t.substr(2 * s, 2), 16);\n              if (D(a)) return s;\n              e[r + s] = a;\n            }\n\n            return s;\n          }\n\n          function b(e, t, r, n) {\n            return U(L(t, e.length - r), e, r, n);\n          }\n\n          function m(e, t, r, n) {\n            return U(function (e) {\n              for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));\n\n              return t;\n            }(t), e, r, n);\n          }\n\n          function v(e, t, r, n) {\n            return m(e, t, r, n);\n          }\n\n          function w(e, t, r, n) {\n            return U(j(t), e, r, n);\n          }\n\n          function _(e, t, r, n) {\n            return U(function (e, t) {\n              for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);\n\n              return o;\n            }(t, e.length - r), e, r, n);\n          }\n\n          function k(e, r, n) {\n            return 0 === r && n === e.length ? t.fromByteArray(e) : t.fromByteArray(e.slice(r, n));\n          }\n\n          function S(e, t, r) {\n            r = Math.min(e.length, r);\n\n            for (var n = [], i = t; i < r;) {\n              var o,\n                  s,\n                  a,\n                  l,\n                  u = e[i],\n                  c = null,\n                  h = u > 239 ? 4 : u > 223 ? 3 : u > 191 ? 2 : 1;\n              if (i + h <= r) switch (h) {\n                case 1:\n                  u < 128 && (c = u);\n                  break;\n\n                case 2:\n                  128 == (192 & (o = e[i + 1])) && (l = (31 & u) << 6 | 63 & o) > 127 && (c = l);\n                  break;\n\n                case 3:\n                  o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (l = (15 & u) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (l < 55296 || l > 57343) && (c = l);\n                  break;\n\n                case 4:\n                  o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (l = (15 & u) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && l < 1114112 && (c = l);\n              }\n              null === c ? (c = 65533, h = 1) : c > 65535 && (c -= 65536, n.push(c >>> 10 & 1023 | 55296), c = 56320 | 1023 & c), n.push(c), i += h;\n            }\n\n            return function (e) {\n              var t = e.length;\n              if (t <= E) return String.fromCharCode.apply(String, e);\n              var r = "",\n                  n = 0;\n\n              for (; n < t;) r += String.fromCharCode.apply(String, e.slice(n, n += E));\n\n              return r;\n            }(n);\n          }\n\n          r.kMaxLength = i, s.TYPED_ARRAY_SUPPORT = function () {\n            try {\n              var e = new Uint8Array(1);\n              return e.__proto__ = {\n                __proto__: Uint8Array.prototype,\n                foo: function () {\n                  return 42;\n                }\n              }, 42 === e.foo();\n            } catch (e) {\n              return !1;\n            }\n          }(), s.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(s.prototype, "parent", {\n            enumerable: !0,\n            get: function () {\n              if (s.isBuffer(this)) return this.buffer;\n            }\n          }), Object.defineProperty(s.prototype, "offset", {\n            enumerable: !0,\n            get: function () {\n              if (s.isBuffer(this)) return this.byteOffset;\n            }\n          }), "undefined" != typeof Symbol && null != Symbol.species && s[Symbol.species] === s && Object.defineProperty(s, Symbol.species, {\n            value: null,\n            configurable: !0,\n            enumerable: !1,\n            writable: !1\n          }), s.poolSize = 8192, s.from = function (e, t, r) {\n            return a(e, t, r);\n          }, s.prototype.__proto__ = Uint8Array.prototype, s.__proto__ = Uint8Array, s.alloc = function (e, t, r) {\n            return function (e, t, r) {\n              return l(e), e <= 0 ? o(e) : void 0 !== t ? "string" == typeof r ? o(e).fill(t, r) : o(e).fill(t) : o(e);\n            }(e, t, r);\n          }, s.allocUnsafe = function (e) {\n            return u(e);\n          }, s.allocUnsafeSlow = function (e) {\n            return u(e);\n          }, s.isBuffer = function (e) {\n            return null != e && !0 === e._isBuffer && e !== s.prototype;\n          }, s.compare = function (e, t) {\n            if (q(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)), q(t, Uint8Array) && (t = s.from(t, t.offset, t.byteLength)), !s.isBuffer(e) || !s.isBuffer(t)) throw new TypeError(\'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array\');\n            if (e === t) return 0;\n\n            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {\n              r = e[i], n = t[i];\n              break;\n            }\n\n            return r < n ? -1 : n < r ? 1 : 0;\n          }, s.isEncoding = function (e) {\n            switch (String(e).toLowerCase()) {\n              case "hex":\n              case "utf8":\n              case "utf-8":\n              case "ascii":\n              case "latin1":\n              case "binary":\n              case "base64":\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return !0;\n\n              default:\n                return !1;\n            }\n          }, s.concat = function (e, t) {\n            if (!Array.isArray(e)) throw new TypeError(\'"list" argument must be an Array of Buffers\');\n            if (0 === e.length) return s.alloc(0);\n            var r;\n            if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;\n            var n = s.allocUnsafe(t),\n                i = 0;\n\n            for (r = 0; r < e.length; ++r) {\n              var o = e[r];\n              if (q(o, Uint8Array) && (o = s.from(o)), !s.isBuffer(o)) throw new TypeError(\'"list" argument must be an Array of Buffers\');\n              o.copy(n, i), i += o.length;\n            }\n\n            return n;\n          }, s.byteLength = f, s.prototype._isBuffer = !0, s.prototype.swap16 = function () {\n            var e = this.length;\n            if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");\n\n            for (var t = 0; t < e; t += 2) p(this, t, t + 1);\n\n            return this;\n          }, s.prototype.swap32 = function () {\n            var e = this.length;\n            if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");\n\n            for (var t = 0; t < e; t += 4) p(this, t, t + 3), p(this, t + 1, t + 2);\n\n            return this;\n          }, s.prototype.swap64 = function () {\n            var e = this.length;\n            if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");\n\n            for (var t = 0; t < e; t += 8) p(this, t, t + 7), p(this, t + 1, t + 6), p(this, t + 2, t + 5), p(this, t + 3, t + 4);\n\n            return this;\n          }, s.prototype.toString = function () {\n            var e = this.length;\n            return 0 === e ? "" : 0 === arguments.length ? S(this, 0, e) : function (e, t, r) {\n              var n = !1;\n              if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";\n              if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";\n              if ((r >>>= 0) <= (t >>>= 0)) return "";\n\n              for (e || (e = "utf8");;) switch (e) {\n                case "hex":\n                  return x(this, t, r);\n\n                case "utf8":\n                case "utf-8":\n                  return S(this, t, r);\n\n                case "ascii":\n                  return C(this, t, r);\n\n                case "latin1":\n                case "binary":\n                  return T(this, t, r);\n\n                case "base64":\n                  return k(this, t, r);\n\n                case "ucs2":\n                case "ucs-2":\n                case "utf16le":\n                case "utf-16le":\n                  return A(this, t, r);\n\n                default:\n                  if (n) throw new TypeError("Unknown encoding: " + e);\n                  e = (e + "").toLowerCase(), n = !0;\n              }\n            }.apply(this, arguments);\n          }, s.prototype.toLocaleString = s.prototype.toString, s.prototype.equals = function (e) {\n            if (!s.isBuffer(e)) throw new TypeError("Argument must be a Buffer");\n            return this === e || 0 === s.compare(this, e);\n          }, s.prototype.inspect = function () {\n            var e = "",\n                t = r.INSPECT_MAX_BYTES;\n            return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">";\n          }, s.prototype.compare = function (e, t, r, n, i) {\n            if (q(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)), !s.isBuffer(e)) throw new TypeError(\'The "target" argument must be one of type Buffer or Uint8Array. Received type \' + typeof e);\n            if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");\n            if (n >= i && t >= r) return 0;\n            if (n >= i) return -1;\n            if (t >= r) return 1;\n            if (t >>>= 0, r >>>= 0, n >>>= 0, i >>>= 0, this === e) return 0;\n\n            for (var o = i - n, a = r - t, l = Math.min(o, a), u = this.slice(n, i), c = e.slice(t, r), h = 0; h < l; ++h) if (u[h] !== c[h]) {\n              o = u[h], a = c[h];\n              break;\n            }\n\n            return o < a ? -1 : a < o ? 1 : 0;\n          }, s.prototype.includes = function (e, t, r) {\n            return -1 !== this.indexOf(e, t, r);\n          }, s.prototype.indexOf = function (e, t, r) {\n            return d(this, e, t, r, !0);\n          }, s.prototype.lastIndexOf = function (e, t, r) {\n            return d(this, e, t, r, !1);\n          }, s.prototype.write = function (e, t, r, n) {\n            if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {\n              if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");\n              t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);\n            }\n            var i = this.length - t;\n            if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");\n            n || (n = "utf8");\n\n            for (var o = !1;;) switch (n) {\n              case "hex":\n                return y(this, e, t, r);\n\n              case "utf8":\n              case "utf-8":\n                return b(this, e, t, r);\n\n              case "ascii":\n                return m(this, e, t, r);\n\n              case "latin1":\n              case "binary":\n                return v(this, e, t, r);\n\n              case "base64":\n                return w(this, e, t, r);\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return _(this, e, t, r);\n\n              default:\n                if (o) throw new TypeError("Unknown encoding: " + n);\n                n = ("" + n).toLowerCase(), o = !0;\n            }\n          }, s.prototype.toJSON = function () {\n            return {\n              type: "Buffer",\n              data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n          };\n          var E = 4096;\n\n          function C(e, t, r) {\n            var n = "";\n            r = Math.min(e.length, r);\n\n            for (var i = t; i < r; ++i) n += String.fromCharCode(127 & e[i]);\n\n            return n;\n          }\n\n          function T(e, t, r) {\n            var n = "";\n            r = Math.min(e.length, r);\n\n            for (var i = t; i < r; ++i) n += String.fromCharCode(e[i]);\n\n            return n;\n          }\n\n          function x(e, t, r) {\n            var n = e.length;\n            (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);\n\n            for (var i = "", o = t; o < r; ++o) i += N(e[o]);\n\n            return i;\n          }\n\n          function A(e, t, r) {\n            for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);\n\n            return i;\n          }\n\n          function I(e, t, r) {\n            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");\n            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");\n          }\n\n          function P(e, t, r, n, i, o) {\n            if (!s.isBuffer(e)) throw new TypeError(\'"buffer" argument must be a Buffer instance\');\n            if (t > i || t < o) throw new RangeError(\'"value" argument is out of bounds\');\n            if (r + n > e.length) throw new RangeError("Index out of range");\n          }\n\n          function O(e, t, r, n, i, o) {\n            if (r + n > e.length) throw new RangeError("Index out of range");\n            if (r < 0) throw new RangeError("Index out of range");\n          }\n\n          function B(e, t, r, i, o) {\n            return t = +t, r >>>= 0, o || O(e, 0, r, 4), n.write(e, t, r, i, 23, 4), r + 4;\n          }\n\n          function R(e, t, r, i, o) {\n            return t = +t, r >>>= 0, o || O(e, 0, r, 8), n.write(e, t, r, i, 52, 8), r + 8;\n          }\n\n          s.prototype.slice = function (e, t) {\n            var r = this.length;\n            e = ~~e, t = void 0 === t ? r : ~~t, e < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), t < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), t < e && (t = e);\n            var n = this.subarray(e, t);\n            return n.__proto__ = s.prototype, n;\n          }, s.prototype.readUIntLE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;\n\n            return n;\n          }, s.prototype.readUIntBE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e + --t], i = 1; t > 0 && (i *= 256);) n += this[e + --t] * i;\n\n            return n;\n          }, s.prototype.readUInt8 = function (e, t) {\n            return e >>>= 0, t || I(e, 1, this.length), this[e];\n          }, s.prototype.readUInt16LE = function (e, t) {\n            return e >>>= 0, t || I(e, 2, this.length), this[e] | this[e + 1] << 8;\n          }, s.prototype.readUInt16BE = function (e, t) {\n            return e >>>= 0, t || I(e, 2, this.length), this[e] << 8 | this[e + 1];\n          }, s.prototype.readUInt32LE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];\n          }, s.prototype.readUInt32BE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n          }, s.prototype.readIntLE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;\n\n            return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;\n          }, s.prototype.readIntBE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256);) o += this[e + --n] * i;\n\n            return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;\n          }, s.prototype.readInt8 = function (e, t) {\n            return e >>>= 0, t || I(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];\n          }, s.prototype.readInt16LE = function (e, t) {\n            e >>>= 0, t || I(e, 2, this.length);\n            var r = this[e] | this[e + 1] << 8;\n            return 32768 & r ? 4294901760 | r : r;\n          }, s.prototype.readInt16BE = function (e, t) {\n            e >>>= 0, t || I(e, 2, this.length);\n            var r = this[e + 1] | this[e] << 8;\n            return 32768 & r ? 4294901760 | r : r;\n          }, s.prototype.readInt32LE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n          }, s.prototype.readInt32BE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n          }, s.prototype.readFloatLE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), n.read(this, e, !0, 23, 4);\n          }, s.prototype.readFloatBE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), n.read(this, e, !1, 23, 4);\n          }, s.prototype.readDoubleLE = function (e, t) {\n            return e >>>= 0, t || I(e, 8, this.length), n.read(this, e, !0, 52, 8);\n          }, s.prototype.readDoubleBE = function (e, t) {\n            return e >>>= 0, t || I(e, 8, this.length), n.read(this, e, !1, 52, 8);\n          }, s.prototype.writeUIntLE = function (e, t, r, n) {\n            (e = +e, t >>>= 0, r >>>= 0, n) || P(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);\n            var i = 1,\n                o = 0;\n\n            for (this[t] = 255 & e; ++o < r && (i *= 256);) this[t + o] = e / i & 255;\n\n            return t + r;\n          }, s.prototype.writeUIntBE = function (e, t, r, n) {\n            (e = +e, t >>>= 0, r >>>= 0, n) || P(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);\n            var i = r - 1,\n                o = 1;\n\n            for (this[t + i] = 255 & e; --i >= 0 && (o *= 256);) this[t + i] = e / o & 255;\n\n            return t + r;\n          }, s.prototype.writeUInt8 = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;\n          }, s.prototype.writeUInt16LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;\n          }, s.prototype.writeUInt16BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;\n          }, s.prototype.writeUInt32LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;\n          }, s.prototype.writeUInt32BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;\n          }, s.prototype.writeIntLE = function (e, t, r, n) {\n            if (e = +e, t >>>= 0, !n) {\n              var i = Math.pow(2, 8 * r - 1);\n              P(this, e, t, r, i - 1, -i);\n            }\n\n            var o = 0,\n                s = 1,\n                a = 0;\n\n            for (this[t] = 255 & e; ++o < r && (s *= 256);) e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n\n            return t + r;\n          }, s.prototype.writeIntBE = function (e, t, r, n) {\n            if (e = +e, t >>>= 0, !n) {\n              var i = Math.pow(2, 8 * r - 1);\n              P(this, e, t, r, i - 1, -i);\n            }\n\n            var o = r - 1,\n                s = 1,\n                a = 0;\n\n            for (this[t + o] = 255 & e; --o >= 0 && (s *= 256);) e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n\n            return t + r;\n          }, s.prototype.writeInt8 = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;\n          }, s.prototype.writeInt16LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;\n          }, s.prototype.writeInt16BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;\n          }, s.prototype.writeInt32LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n          }, s.prototype.writeInt32BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;\n          }, s.prototype.writeFloatLE = function (e, t, r) {\n            return B(this, e, t, !0, r);\n          }, s.prototype.writeFloatBE = function (e, t, r) {\n            return B(this, e, t, !1, r);\n          }, s.prototype.writeDoubleLE = function (e, t, r) {\n            return R(this, e, t, !0, r);\n          }, s.prototype.writeDoubleBE = function (e, t, r) {\n            return R(this, e, t, !1, r);\n          }, s.prototype.copy = function (e, t, r, n) {\n            if (!s.isBuffer(e)) throw new TypeError("argument should be a Buffer");\n            if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r) return 0;\n            if (0 === e.length || 0 === this.length) return 0;\n            if (t < 0) throw new RangeError("targetStart out of bounds");\n            if (r < 0 || r >= this.length) throw new RangeError("Index out of range");\n            if (n < 0) throw new RangeError("sourceEnd out of bounds");\n            n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);\n            var i = n - r;\n            if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);else if (this === e && r < t && t < n) for (var o = i - 1; o >= 0; --o) e[o + t] = this[o + r];else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);\n            return i;\n          }, s.prototype.fill = function (e, t, r, n) {\n            if ("string" == typeof e) {\n              if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");\n              if ("string" == typeof n && !s.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);\n\n              if (1 === e.length) {\n                var i = e.charCodeAt(0);\n                ("utf8" === n && i < 128 || "latin1" === n) && (e = i);\n              }\n            } else "number" == typeof e && (e &= 255);\n\n            if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");\n            if (r <= t) return this;\n            var o;\n            if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) this[o] = e;else {\n              var a = s.isBuffer(e) ? e : s.from(e, n),\n                  l = a.length;\n              if (0 === l) throw new TypeError(\'The value "\' + e + \'" is invalid for argument "value"\');\n\n              for (o = 0; o < r - t; ++o) this[o + t] = a[o % l];\n            }\n            return this;\n          };\n          var M = /[^+/0-9A-Za-z-_]/g;\n\n          function N(e) {\n            return e < 16 ? "0" + e.toString(16) : e.toString(16);\n          }\n\n          function L(e, t) {\n            var r;\n            t = t || 1 / 0;\n\n            for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {\n              if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {\n                if (!i) {\n                  if (r > 56319) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                  }\n\n                  if (s + 1 === n) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                  }\n\n                  i = r;\n                  continue;\n                }\n\n                if (r < 56320) {\n                  (t -= 3) > -1 && o.push(239, 191, 189), i = r;\n                  continue;\n                }\n\n                r = 65536 + (i - 55296 << 10 | r - 56320);\n              } else i && (t -= 3) > -1 && o.push(239, 191, 189);\n\n              if (i = null, r < 128) {\n                if ((t -= 1) < 0) break;\n                o.push(r);\n              } else if (r < 2048) {\n                if ((t -= 2) < 0) break;\n                o.push(r >> 6 | 192, 63 & r | 128);\n              } else if (r < 65536) {\n                if ((t -= 3) < 0) break;\n                o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);\n              } else {\n                if (!(r < 1114112)) throw new Error("Invalid code point");\n                if ((t -= 4) < 0) break;\n                o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);\n              }\n            }\n\n            return o;\n          }\n\n          function j(e) {\n            return t.toByteArray(function (e) {\n              if ((e = (e = e.split("=")[0]).trim().replace(M, "")).length < 2) return "";\n\n              for (; e.length % 4 != 0;) e += "=";\n\n              return e;\n            }(e));\n          }\n\n          function U(e, t, r, n) {\n            for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];\n\n            return i;\n          }\n\n          function q(e, t) {\n            return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;\n          }\n\n          function D(e) {\n            return e != e;\n          }\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "base64-js": 13,\n      buffer: 17,\n      ieee754: 23\n    }],\n    18: [function (e, t, r) {\n      (function (n) {\n        (function () {\n          r.formatArgs = function (e) {\n            if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), !this.useColors) return;\n            const r = "color: " + this.color;\n            e.splice(1, 0, r, "color: inherit");\n            let n = 0,\n                i = 0;\n            e[0].replace(/%[a-zA-Z%]/g, e => {\n              "%%" !== e && "%c" === e && (i = ++n);\n            }), e.splice(i, 0, r);\n          }, r.save = function (e) {\n            try {\n              e ? r.storage.setItem("debug", e) : r.storage.removeItem("debug");\n            } catch (e) {}\n          }, r.load = function () {\n            let e;\n\n            try {\n              e = r.storage.getItem("debug");\n            } catch (e) {}\n\n            !e && void 0 !== n && "env" in n && (e = n.env.DEBUG);\n            return e;\n          }, r.useColors = function () {\n            if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return !0;\n            if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) return !1;\n            return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n          }, r.storage = function () {\n            try {\n              return localStorage;\n            } catch (e) {}\n          }(), r.destroy = (() => {\n            let e = !1;\n            return () => {\n              e || (e = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));\n            };\n          })(), r.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], r.log = console.debug || console.log || (() => {}), t.exports = e("./common")(r);\n          const {\n            formatters: i\n          } = t.exports;\n\n          i.j = function (e) {\n            try {\n              return JSON.stringify(e);\n            } catch (e) {\n              return "[UnexpectedJSONParseError]: " + e.message;\n            }\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./common": 19,\n      _process: 50\n    }],\n    19: [function (e, t, r) {\n      t.exports = function (t) {\n        function r(e) {\n          let t,\n              i,\n              o,\n              s = null;\n\n          function a(...e) {\n            if (!a.enabled) return;\n            const n = a,\n                  i = Number(new Date()),\n                  o = i - (t || i);\n            n.diff = o, n.prev = t, n.curr = i, t = i, e[0] = r.coerce(e[0]), "string" != typeof e[0] && e.unshift("%O");\n            let s = 0;\n            e[0] = e[0].replace(/%([a-zA-Z%])/g, (t, i) => {\n              if ("%%" === t) return "%";\n              s++;\n              const o = r.formatters[i];\n\n              if ("function" == typeof o) {\n                const r = e[s];\n                t = o.call(n, r), e.splice(s, 1), s--;\n              }\n\n              return t;\n            }), r.formatArgs.call(n, e), (n.log || r.log).apply(n, e);\n          }\n\n          return a.namespace = e, a.useColors = r.useColors(), a.color = r.selectColor(e), a.extend = n, a.destroy = r.destroy, Object.defineProperty(a, "enabled", {\n            enumerable: !0,\n            configurable: !1,\n            get: () => null !== s ? s : (i !== r.namespaces && (i = r.namespaces, o = r.enabled(e)), o),\n            set: e => {\n              s = e;\n            }\n          }), "function" == typeof r.init && r.init(a), a;\n        }\n\n        function n(e, t) {\n          const n = r(this.namespace + (void 0 === t ? ":" : t) + e);\n          return n.log = this.log, n;\n        }\n\n        function i(e) {\n          return e.toString().substring(2, e.toString().length - 2).replace(/\\.\\*\\?$/, "*");\n        }\n\n        return r.debug = r, r.default = r, r.coerce = function (e) {\n          return e instanceof Error ? e.stack || e.message : e;\n        }, r.disable = function () {\n          const e = [...r.names.map(i), ...r.skips.map(i).map(e => "-" + e)].join(",");\n          return r.enable(""), e;\n        }, r.enable = function (e) {\n          let t;\n          r.save(e), r.namespaces = e, r.names = [], r.skips = [];\n          const n = ("string" == typeof e ? e : "").split(/[\\s,]+/),\n                i = n.length;\n\n          for (t = 0; t < i; t++) n[t] && ("-" === (e = n[t].replace(/\\*/g, ".*?"))[0] ? r.skips.push(new RegExp("^" + e.substr(1) + "$")) : r.names.push(new RegExp("^" + e + "$")));\n        }, r.enabled = function (e) {\n          if ("*" === e[e.length - 1]) return !0;\n          let t, n;\n\n          for (t = 0, n = r.skips.length; t < n; t++) if (r.skips[t].test(e)) return !1;\n\n          for (t = 0, n = r.names.length; t < n; t++) if (r.names[t].test(e)) return !0;\n\n          return !1;\n        }, r.humanize = e("ms"), r.destroy = function () {\n          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");\n        }, Object.keys(t).forEach(e => {\n          r[e] = t[e];\n        }), r.names = [], r.skips = [], r.formatters = {}, r.selectColor = function (e) {\n          let t = 0;\n\n          for (let r = 0; r < e.length; r++) t = (t << 5) - t + e.charCodeAt(r), t |= 0;\n\n          return r.colors[Math.abs(t) % r.colors.length];\n        }, r.enable(r.load()), r;\n      };\n    }, {\n      ms: 45\n    }],\n    20: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          var i = e("readable-stream"),\n              o = e("end-of-stream"),\n              s = e("inherits"),\n              a = e("stream-shift"),\n              l = n.from && n.from !== Uint8Array.from ? n.from([0]) : new n([0]),\n              u = function (e, t) {\n            e._corked ? e.once("uncork", t) : t();\n          },\n              c = function (e, t) {\n            return function (r) {\n              r ? function (e, t) {\n                e._autoDestroy && e.destroy(t);\n              }(e, "premature close" === r.message ? null : r) : t && !e._ended && e.end();\n            };\n          },\n              h = function () {},\n              f = function (e, t, r) {\n            if (!(this instanceof f)) return new f(e, t, r);\n            i.Duplex.call(this, r), this._writable = null, this._readable = null, this._readable2 = null, this._autoDestroy = !r || !1 !== r.autoDestroy, this._forwardDestroy = !r || !1 !== r.destroy, this._forwardEnd = !r || !1 !== r.end, this._corked = 1, this._ondrain = null, this._drained = !1, this._forwarding = !1, this._unwrite = null, this._unread = null, this._ended = !1, this.destroyed = !1, e && this.setWritable(e), t && this.setReadable(t);\n          };\n\n          s(f, i.Duplex), f.obj = function (e, t, r) {\n            return r || (r = {}), r.objectMode = !0, r.highWaterMark = 16, new f(e, t, r);\n          }, f.prototype.cork = function () {\n            1 == ++this._corked && this.emit("cork");\n          }, f.prototype.uncork = function () {\n            this._corked && 0 == --this._corked && this.emit("uncork");\n          }, f.prototype.setWritable = function (e) {\n            if (this._unwrite && this._unwrite(), this.destroyed) e && e.destroy && e.destroy();else if (null !== e && !1 !== e) {\n              var t = this,\n                  n = o(e, {\n                writable: !0,\n                readable: !1\n              }, c(this, this._forwardEnd)),\n                  i = function () {\n                var e = t._ondrain;\n                t._ondrain = null, e && e();\n              };\n\n              this._unwrite && r.nextTick(i), this._writable = e, this._writable.on("drain", i), this._unwrite = function () {\n                t._writable.removeListener("drain", i), n();\n              }, this.uncork();\n            } else this.end();\n          }, f.prototype.setReadable = function (e) {\n            if (this._unread && this._unread(), this.destroyed) e && e.destroy && e.destroy();else {\n              if (null === e || !1 === e) return this.push(null), void this.resume();\n\n              var t,\n                  r = this,\n                  n = o(e, {\n                writable: !1,\n                readable: !0\n              }, c(this)),\n                  s = function () {\n                r._forward();\n              },\n                  a = function () {\n                r.push(null);\n              };\n\n              this._drained = !0, this._readable = e, this._readable2 = e._readableState ? e : (t = e, new i.Readable({\n                objectMode: !0,\n                highWaterMark: 16\n              }).wrap(t)), this._readable2.on("readable", s), this._readable2.on("end", a), this._unread = function () {\n                r._readable2.removeListener("readable", s), r._readable2.removeListener("end", a), n();\n              }, this._forward();\n            }\n          }, f.prototype._read = function () {\n            this._drained = !0, this._forward();\n          }, f.prototype._forward = function () {\n            if (!this._forwarding && this._readable2 && this._drained) {\n              var e;\n\n              for (this._forwarding = !0; this._drained && null !== (e = a(this._readable2));) this.destroyed || (this._drained = this.push(e));\n\n              this._forwarding = !1;\n            }\n          }, f.prototype.destroy = function (e, t) {\n            if (t || (t = h), this.destroyed) return t(null);\n            this.destroyed = !0;\n            var n = this;\n            r.nextTick(function () {\n              n._destroy(e), t(null);\n            });\n          }, f.prototype._destroy = function (e) {\n            if (e) {\n              var t = this._ondrain;\n              this._ondrain = null, t ? t(e) : this.emit("error", e);\n            }\n\n            this._forwardDestroy && (this._readable && this._readable.destroy && this._readable.destroy(), this._writable && this._writable.destroy && this._writable.destroy()), this.emit("close");\n          }, f.prototype._write = function (e, t, r) {\n            if (!this.destroyed) return this._corked ? u(this, this._write.bind(this, e, t, r)) : e === l ? this._finish(r) : this._writable ? void (!1 === this._writable.write(e) ? this._ondrain = r : this.destroyed || r()) : r();\n          }, f.prototype._finish = function (e) {\n            var t = this;\n            this.emit("preend"), u(this, function () {\n              var r, n;\n              r = t._forwardEnd && t._writable, n = function () {\n                !1 === t._writableState.prefinished && (t._writableState.prefinished = !0), t.emit("prefinish"), u(t, e);\n              }, r ? r._writableState && r._writableState.finished ? n() : r._writableState ? r.end(n) : (r.end(), n()) : n();\n            });\n          }, f.prototype.end = function (e, t, r) {\n            return "function" == typeof e ? this.end(null, null, e) : "function" == typeof t ? this.end(e, null, t) : (this._ended = !0, e && this.write(e), this._writableState.ending || this._writableState.destroyed || this.write(l), i.Writable.prototype.end.call(this, r));\n          }, t.exports = f;\n        }).call(this);\n      }).call(this, e("_process"), e("buffer").Buffer);\n    }, {\n      _process: 50,\n      buffer: 17,\n      "end-of-stream": 21,\n      inherits: 24,\n      "readable-stream": 69,\n      "stream-shift": 74\n    }],\n    21: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          var n = e("once"),\n              i = function () {},\n              o = function (e, t, s) {\n            if ("function" == typeof t) return o(e, null, t);\n            t || (t = {}), s = n(s || i);\n\n            var a = e._writableState,\n                l = e._readableState,\n                u = t.readable || !1 !== t.readable && e.readable,\n                c = t.writable || !1 !== t.writable && e.writable,\n                h = !1,\n                f = function () {\n              e.writable || p();\n            },\n                p = function () {\n              c = !1, u || s.call(e);\n            },\n                d = function () {\n              u = !1, c || s.call(e);\n            },\n                g = function (t) {\n              s.call(e, t ? new Error("exited with error code: " + t) : null);\n            },\n                y = function (t) {\n              s.call(e, t);\n            },\n                b = function () {\n              r.nextTick(m);\n            },\n                m = function () {\n              if (!h) return (!u || l && l.ended && !l.destroyed) && (!c || a && a.ended && !a.destroyed) ? void 0 : s.call(e, new Error("premature close"));\n            },\n                v = function () {\n              e.req.on("finish", p);\n            };\n\n            return !function (e) {\n              return e.setHeader && "function" == typeof e.abort;\n            }(e) ? c && !a && (e.on("end", f), e.on("close", f)) : (e.on("complete", p), e.on("abort", b), e.req ? v() : e.on("request", v)), function (e) {\n              return e.stdio && Array.isArray(e.stdio) && 3 === e.stdio.length;\n            }(e) && e.on("exit", g), e.on("end", d), e.on("finish", p), !1 !== t.error && e.on("error", y), e.on("close", b), function () {\n              h = !0, e.removeListener("complete", p), e.removeListener("abort", b), e.removeListener("request", v), e.req && e.req.removeListener("finish", p), e.removeListener("end", f), e.removeListener("close", f), e.removeListener("finish", p), e.removeListener("exit", g), e.removeListener("end", d), e.removeListener("error", y), e.removeListener("close", b);\n            };\n          };\n\n          t.exports = o;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50,\n      once: 48\n    }],\n    22: [function (e, t, r) {\n      var n = Object.create || function (e) {\n        var t = function () {};\n\n        return t.prototype = e, new t();\n      },\n          i = Object.keys || function (e) {\n        var t = [];\n\n        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);\n\n        return r;\n      },\n          o = Function.prototype.bind || function (e) {\n        var t = this;\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n\n      function s() {\n        this._events && Object.prototype.hasOwnProperty.call(this, "_events") || (this._events = n(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n      }\n\n      t.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._maxListeners = void 0;\n      var a,\n          l = 10;\n\n      try {\n        var u = {};\n        Object.defineProperty && Object.defineProperty(u, "x", {\n          value: 0\n        }), a = 0 === u.x;\n      } catch (e) {\n        a = !1;\n      }\n\n      function c(e) {\n        return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners;\n      }\n\n      function h(e, t, r, i) {\n        var o, s, a;\n        if ("function" != typeof r) throw new TypeError(\'"listener" argument must be a function\');\n\n        if ((s = e._events) ? (s.newListener && (e.emit("newListener", t, r.listener ? r.listener : r), s = e._events), a = s[t]) : (s = e._events = n(null), e._eventsCount = 0), a) {\n          if ("function" == typeof a ? a = s[t] = i ? [r, a] : [a, r] : i ? a.unshift(r) : a.push(r), !a.warned && (o = c(e)) && o > 0 && a.length > o) {\n            a.warned = !0;\n            var l = new Error("Possible EventEmitter memory leak detected. " + a.length + \' "\' + String(t) + \'" listeners added. Use emitter.setMaxListeners() to increase limit.\');\n            l.name = "MaxListenersExceededWarning", l.emitter = e, l.type = t, l.count = a.length, "object" == typeof console && console.warn && console.warn("%s: %s", l.name, l.message);\n          }\n        } else a = s[t] = r, ++e._eventsCount;\n\n        return e;\n      }\n\n      function f() {\n        if (!this.fired) switch (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length) {\n          case 0:\n            return this.listener.call(this.target);\n\n          case 1:\n            return this.listener.call(this.target, arguments[0]);\n\n          case 2:\n            return this.listener.call(this.target, arguments[0], arguments[1]);\n\n          case 3:\n            return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);\n\n          default:\n            for (var e = new Array(arguments.length), t = 0; t < e.length; ++t) e[t] = arguments[t];\n\n            this.listener.apply(this.target, e);\n        }\n      }\n\n      function p(e, t, r) {\n        var n = {\n          fired: !1,\n          wrapFn: void 0,\n          target: e,\n          type: t,\n          listener: r\n        },\n            i = o.call(f, n);\n        return i.listener = r, n.wrapFn = i, i;\n      }\n\n      function d(e, t, r) {\n        var n = e._events;\n        if (!n) return [];\n        var i = n[t];\n        return i ? "function" == typeof i ? r ? [i.listener || i] : [i] : r ? function (e) {\n          for (var t = new Array(e.length), r = 0; r < t.length; ++r) t[r] = e[r].listener || e[r];\n\n          return t;\n        }(i) : y(i, i.length) : [];\n      }\n\n      function g(e) {\n        var t = this._events;\n\n        if (t) {\n          var r = t[e];\n          if ("function" == typeof r) return 1;\n          if (r) return r.length;\n        }\n\n        return 0;\n      }\n\n      function y(e, t) {\n        for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];\n\n        return r;\n      }\n\n      a ? Object.defineProperty(s, "defaultMaxListeners", {\n        enumerable: !0,\n        get: function () {\n          return l;\n        },\n        set: function (e) {\n          if ("number" != typeof e || e < 0 || e != e) throw new TypeError(\'"defaultMaxListeners" must be a positive number\');\n          l = e;\n        }\n      }) : s.defaultMaxListeners = l, s.prototype.setMaxListeners = function (e) {\n        if ("number" != typeof e || e < 0 || isNaN(e)) throw new TypeError(\'"n" argument must be a positive number\');\n        return this._maxListeners = e, this;\n      }, s.prototype.getMaxListeners = function () {\n        return c(this);\n      }, s.prototype.emit = function (e) {\n        var t,\n            r,\n            n,\n            i,\n            o,\n            s,\n            a = "error" === e;\n        if (s = this._events) a = a && null == s.error;else if (!a) return !1;\n\n        if (a) {\n          if (arguments.length > 1 && (t = arguments[1]), t instanceof Error) throw t;\n          var l = new Error(\'Unhandled "error" event. (\' + t + ")");\n          throw l.context = t, l;\n        }\n\n        if (!(r = s[e])) return !1;\n        var u = "function" == typeof r;\n\n        switch (n = arguments.length) {\n          case 1:\n            !function (e, t, r) {\n              if (t) e.call(r);else for (var n = e.length, i = y(e, n), o = 0; o < n; ++o) i[o].call(r);\n            }(r, u, this);\n            break;\n\n          case 2:\n            !function (e, t, r, n) {\n              if (t) e.call(r, n);else for (var i = e.length, o = y(e, i), s = 0; s < i; ++s) o[s].call(r, n);\n            }(r, u, this, arguments[1]);\n            break;\n\n          case 3:\n            !function (e, t, r, n, i) {\n              if (t) e.call(r, n, i);else for (var o = e.length, s = y(e, o), a = 0; a < o; ++a) s[a].call(r, n, i);\n            }(r, u, this, arguments[1], arguments[2]);\n            break;\n\n          case 4:\n            !function (e, t, r, n, i, o) {\n              if (t) e.call(r, n, i, o);else for (var s = e.length, a = y(e, s), l = 0; l < s; ++l) a[l].call(r, n, i, o);\n            }(r, u, this, arguments[1], arguments[2], arguments[3]);\n            break;\n\n          default:\n            for (i = new Array(n - 1), o = 1; o < n; o++) i[o - 1] = arguments[o];\n\n            !function (e, t, r, n) {\n              if (t) e.apply(r, n);else for (var i = e.length, o = y(e, i), s = 0; s < i; ++s) o[s].apply(r, n);\n            }(r, u, this, i);\n        }\n\n        return !0;\n      }, s.prototype.addListener = function (e, t) {\n        return h(this, e, t, !1);\n      }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function (e, t) {\n        return h(this, e, t, !0);\n      }, s.prototype.once = function (e, t) {\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        return this.on(e, p(this, e, t)), this;\n      }, s.prototype.prependOnceListener = function (e, t) {\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        return this.prependListener(e, p(this, e, t)), this;\n      }, s.prototype.removeListener = function (e, t) {\n        var r, i, o, s, a;\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        if (!(i = this._events)) return this;\n        if (!(r = i[e])) return this;\n        if (r === t || r.listener === t) 0 == --this._eventsCount ? this._events = n(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || t));else if ("function" != typeof r) {\n          for (o = -1, s = r.length - 1; s >= 0; s--) if (r[s] === t || r[s].listener === t) {\n            a = r[s].listener, o = s;\n            break;\n          }\n\n          if (o < 0) return this;\n          0 === o ? r.shift() : function (e, t) {\n            for (var r = t, n = r + 1, i = e.length; n < i; r += 1, n += 1) e[r] = e[n];\n\n            e.pop();\n          }(r, o), 1 === r.length && (i[e] = r[0]), i.removeListener && this.emit("removeListener", e, a || t);\n        }\n        return this;\n      }, s.prototype.removeAllListeners = function (e) {\n        var t, r, o;\n        if (!(r = this._events)) return this;\n        if (!r.removeListener) return 0 === arguments.length ? (this._events = n(null), this._eventsCount = 0) : r[e] && (0 == --this._eventsCount ? this._events = n(null) : delete r[e]), this;\n\n        if (0 === arguments.length) {\n          var s,\n              a = i(r);\n\n          for (o = 0; o < a.length; ++o) "removeListener" !== (s = a[o]) && this.removeAllListeners(s);\n\n          return this.removeAllListeners("removeListener"), this._events = n(null), this._eventsCount = 0, this;\n        }\n\n        if ("function" == typeof (t = r[e])) this.removeListener(e, t);else if (t) for (o = t.length - 1; o >= 0; o--) this.removeListener(e, t[o]);\n        return this;\n      }, s.prototype.listeners = function (e) {\n        return d(this, e, !0);\n      }, s.prototype.rawListeners = function (e) {\n        return d(this, e, !1);\n      }, s.listenerCount = function (e, t) {\n        return "function" == typeof e.listenerCount ? e.listenerCount(t) : g.call(e, t);\n      }, s.prototype.listenerCount = g, s.prototype.eventNames = function () {\n        return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n      };\n    }, {}],\n    23: [function (e, t, r) {\n      r.read = function (e, t, r, n, i) {\n        var o,\n            s,\n            a = 8 * i - n - 1,\n            l = (1 << a) - 1,\n            u = l >> 1,\n            c = -7,\n            h = r ? i - 1 : 0,\n            f = r ? -1 : 1,\n            p = e[t + h];\n\n        for (h += f, o = p & (1 << -c) - 1, p >>= -c, c += a; c > 0; o = 256 * o + e[t + h], h += f, c -= 8);\n\n        for (s = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; s = 256 * s + e[t + h], h += f, c -= 8);\n\n        if (0 === o) o = 1 - u;else {\n          if (o === l) return s ? NaN : 1 / 0 * (p ? -1 : 1);\n          s += Math.pow(2, n), o -= u;\n        }\n        return (p ? -1 : 1) * s * Math.pow(2, o - n);\n      }, r.write = function (e, t, r, n, i, o) {\n        var s,\n            a,\n            l,\n            u = 8 * o - i - 1,\n            c = (1 << u) - 1,\n            h = c >> 1,\n            f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n            p = n ? 0 : o - 1,\n            d = n ? 1 : -1,\n            g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;\n\n        for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = c) : (s = Math.floor(Math.log(t) / Math.LN2), t * (l = Math.pow(2, -s)) < 1 && (s--, l *= 2), (t += s + h >= 1 ? f / l : f * Math.pow(2, 1 - h)) * l >= 2 && (s++, l /= 2), s + h >= c ? (a = 0, s = c) : s + h >= 1 ? (a = (t * l - 1) * Math.pow(2, i), s += h) : (a = t * Math.pow(2, h - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + p] = 255 & a, p += d, a /= 256, i -= 8);\n\n        for (s = s << i | a, u += i; u > 0; e[r + p] = 255 & s, p += d, s /= 256, u -= 8);\n\n        e[r + p - d] |= 128 * g;\n      };\n    }, {}],\n    24: [function (e, t, r) {\n      "function" == typeof Object.create ? t.exports = function (e, t) {\n        t && (e.super_ = t, e.prototype = Object.create(t.prototype, {\n          constructor: {\n            value: e,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n          }\n        }));\n      } : t.exports = function (e, t) {\n        if (t) {\n          e.super_ = t;\n\n          var r = function () {};\n\n          r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;\n        }\n      };\n    }, {}],\n    25: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n\n      var n = function () {\n        function e(e, t) {\n          this.color = !0, this.key = void 0, this.value = void 0, this.parent = void 0, this.brother = void 0, this.leftChild = void 0, this.rightChild = void 0, this.key = e, this.value = t;\n        }\n\n        return e.prototype.rotateLeft = function () {\n          var e = this.parent,\n              t = this.brother,\n              r = this.leftChild,\n              n = this.rightChild;\n          if (!n) throw new Error("unknown error");\n          var i = n.leftChild,\n              o = n.rightChild;\n          return e && (e.leftChild === this ? e.leftChild = n : e.rightChild === this && (e.rightChild = n)), n.parent = e, n.brother = t, n.leftChild = this, n.rightChild = o, t && (t.brother = n), this.parent = n, this.brother = o, this.leftChild = r, this.rightChild = i, o && (o.parent = n, o.brother = this), r && (r.parent = this, r.brother = i), i && (i.parent = this, i.brother = r), n;\n        }, e.prototype.rotateRight = function () {\n          var e = this.parent,\n              t = this.brother,\n              r = this.leftChild;\n          if (!r) throw new Error("unknown error");\n          var n = this.rightChild,\n              i = r.leftChild,\n              o = r.rightChild;\n          return e && (e.leftChild === this ? e.leftChild = r : e.rightChild === this && (e.rightChild = r)), r.parent = e, r.brother = t, r.leftChild = i, r.rightChild = this, t && (t.brother = r), i && (i.parent = r, i.brother = this), this.parent = r, this.brother = i, this.leftChild = o, this.rightChild = n, o && (o.parent = this, o.brother = n), n && (n.parent = this, n.brother = o), r;\n        }, e.prototype.remove = function () {\n          if (this.leftChild || this.rightChild) throw new Error("can only remove leaf node");\n          this.parent && (this === this.parent.leftChild ? this.parent.leftChild = void 0 : this === this.parent.rightChild && (this.parent.rightChild = void 0)), this.brother && (this.brother.brother = void 0), this.key = void 0, this.value = void 0, this.parent = void 0, this.brother = void 0;\n        }, e.TreeNodeColorType = {\n          red: !0,\n          black: !1\n        }, e;\n      }();\n\n      Object.freeze(n), r.default = n;\n    }, {}],\n    26: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      };\n\n      function i(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = [],\n            o = 0,\n            s = 0,\n            a = 0,\n            l = 0,\n            u = 0,\n            c = 0;\n        this.size = function () {\n          return c;\n        }, this.empty = function () {\n          return 0 === c;\n        }, this.clear = function () {\n          o = a = s = l = u = c = 0, f.call(this, i.bucketSize), c = 0;\n        }, this.front = function () {\n          return r[o][s];\n        }, this.back = function () {\n          return r[a][l];\n        }, this.forEach = function (e) {\n          if (!this.empty()) {\n            var t = 0;\n\n            if (o !== a) {\n              for (u = s; u < i.bucketSize; ++u) e(r[o][u], t++);\n\n              for (u = o + 1; u < a; ++u) for (var n = 0; n < i.bucketSize; ++n) e(r[u][n], t++);\n\n              for (u = 0; u <= l; ++u) e(r[a][u], t++);\n            } else for (var u = s; u <= l; ++u) e(r[o][u], t++);\n          }\n        };\n\n        var h = function (e) {\n          var t = o * i.bucketSize + s,\n              r = t + e,\n              n = a * i.bucketSize + l;\n          if (r < t || r > n) throw new Error("pos should more than 0 and less than queue\'s size");\n          return {\n            curNodeBucketIndex: Math.floor(r / i.bucketSize),\n            curNodePointerIndex: r % i.bucketSize\n          };\n        };\n\n        this.getElementByPos = function (e) {\n          var t = h(e),\n              n = t.curNodeBucketIndex,\n              i = t.curNodePointerIndex;\n          return r[n][i];\n        }, this.eraseElementByPos = function (e) {\n          var t = this;\n          if (e < 0 || e > c) throw new Error("pos should more than 0 and less than queue\'s size");\n          if (0 === e) this.popFront();else if (e === this.size()) this.popBack();else {\n            for (var r = [], n = e + 1; n < c; ++n) r.push(this.getElementByPos(n));\n\n            this.cut(e), this.popBack(), r.forEach(function (e) {\n              return t.pushBack(e);\n            });\n          }\n        }, this.eraseElementByValue = function (e) {\n          if (!this.empty()) {\n            var t = [];\n            this.forEach(function (r) {\n              r !== e && t.push(r);\n            });\n\n            for (var r = t.length, n = 0; n < r; ++n) this.setElementByPos(n, t[n]);\n\n            this.cut(r - 1);\n          }\n        };\n\n        var f = function (e) {\n          for (var t = [], n = e * i.sigma, h = Math.max(Math.ceil(n / i.bucketSize), 2), f = 0; f < h; ++f) t.push(new Array(i.bucketSize));\n\n          var p = Math.ceil(e / i.bucketSize),\n              d = Math.floor(h / 2) - Math.floor(p / 2),\n              g = d,\n              y = 0;\n          if (this.size()) for (f = 0; f < p; ++f) {\n            for (var b = 0; b < i.bucketSize; ++b) if (t[d + f][b] = this.front(), this.popFront(), this.empty()) {\n              g = d + f, y = b;\n              break;\n            }\n\n            if (this.empty()) break;\n          }\n          r = t, o = d, s = 0, a = g, l = y, u = h, c = e;\n        };\n\n        this.pushBack = function (e) {\n          this.empty() || (a === u - 1 && l === i.bucketSize - 1 && f.call(this, this.size()), l < i.bucketSize - 1 ? ++l : a < u - 1 && (++a, l = 0)), ++c, r[a][l] = e;\n        }, this.popBack = function () {\n          this.empty() || (1 !== this.size() && (l > 0 ? --l : o < a && (--a, l = i.bucketSize - 1)), c > 0 && --c);\n        }, this.setElementByPos = function (e, t) {\n          var n = h(e),\n              i = n.curNodeBucketIndex,\n              o = n.curNodePointerIndex;\n          r[i][o] = t;\n        }, this.insert = function (e, t, r) {\n          var n = this;\n          if (void 0 === r && (r = 1), 0 === e) for (; r--;) this.pushFront(t);else if (e === this.size()) for (; r--;) this.pushBack(t);else {\n            for (var i = [], o = e; o < c; ++o) i.push(this.getElementByPos(o));\n\n            this.cut(e - 1);\n\n            for (o = 0; o < r; ++o) this.pushBack(t);\n\n            i.forEach(function (e) {\n              return n.pushBack(e);\n            });\n          }\n        }, this.find = function (e) {\n          if (o === a) {\n            for (var t = s; t <= l; ++t) if (r[o][t] === e) return !0;\n\n            return !1;\n          }\n\n          for (t = s; t < i.bucketSize; ++t) if (r[o][t] === e) return !0;\n\n          for (t = o + 1; t < a; ++t) for (var n = 0; n < i.bucketSize; ++n) if (r[t][n] === e) return !0;\n\n          for (t = 0; t <= l; ++t) if (r[a][t] === e) return !0;\n\n          return !1;\n        }, this.reverse = function () {\n          for (var e = 0, t = c - 1; e < t;) {\n            var r = this.getElementByPos(e);\n            this.setElementByPos(e, this.getElementByPos(t)), this.setElementByPos(t, r), ++e, --t;\n          }\n        }, this.unique = function () {\n          if (!this.empty()) {\n            var e = [],\n                t = this.front();\n            this.forEach(function (r, n) {\n              0 !== n && r === t || (e.push(r), t = r);\n            });\n\n            for (var r = 0; r < c; ++r) this.setElementByPos(r, e[r]);\n\n            this.cut(e.length - 1);\n          }\n        }, this.sort = function (e) {\n          var t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          }), t.sort(e);\n\n          for (var r = 0; r < c; ++r) this.setElementByPos(r, t[r]);\n        }, this.pushFront = function (e) {\n          this.empty() || (0 === o && 0 === s && f.call(this, this.size()), s > 0 ? --s : o > 0 && (--o, s = i.bucketSize - 1)), ++c, r[o][s] = e;\n        }, this.popFront = function () {\n          this.empty() || (1 !== this.size() && (s < i.bucketSize - 1 ? ++s : o < a && (++o, s = 0)), c > 0 && --c);\n        }, this.shrinkToFit = function () {\n          var e = this,\n              t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          });\n          var n = t.length;\n          r = [];\n\n          for (var o = Math.ceil(n / i.bucketSize), s = 0; s < o; ++s) r.push(new Array(i.bucketSize));\n\n          this.clear(), t.forEach(function (t) {\n            return e.pushBack(t);\n          });\n        }, this.cut = function (e) {\n          if (e < 0) this.clear();else {\n            var t = h(e),\n                r = t.curNodeBucketIndex,\n                n = t.curNodePointerIndex;\n            a = r, l = n, c = e + 1;\n          }\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  if (0 === c) return [2];\n                  if (o !== a) return [3, 5];\n                  t = s, n.label = 1;\n\n                case 1:\n                  return t <= l ? [4, r[o][t]] : [3, 4];\n\n                case 2:\n                  n.sent(), n.label = 3;\n\n                case 3:\n                  return ++t, [3, 1];\n\n                case 4:\n                  return [2];\n\n                case 5:\n                  t = s, n.label = 6;\n\n                case 6:\n                  return t < i.bucketSize ? [4, r[o][t]] : [3, 9];\n\n                case 7:\n                  n.sent(), n.label = 8;\n\n                case 8:\n                  return ++t, [3, 6];\n\n                case 9:\n                  t = o + 1, n.label = 10;\n\n                case 10:\n                  if (!(t < a)) return [3, 15];\n                  e = 0, n.label = 11;\n\n                case 11:\n                  return e < i.bucketSize ? [4, r[t][e]] : [3, 14];\n\n                case 12:\n                  n.sent(), n.label = 13;\n\n                case 13:\n                  return ++e, [3, 11];\n\n                case 14:\n                  return ++t, [3, 10];\n\n                case 15:\n                  t = 0, n.label = 16;\n\n                case 16:\n                  return t <= l ? [4, r[a][t]] : [3, 19];\n\n                case 17:\n                  n.sent(), n.label = 18;\n\n                case 18:\n                  return ++t, [3, 16];\n\n                case 19:\n                  return [2];\n              }\n            });\n          }();\n        }, function () {\n          var n = i.bucketSize;\n          e.size ? n = e.size() : e.length && (n = e.length);\n          var s = n * i.sigma;\n          u = Math.ceil(s / i.bucketSize), u = Math.max(u, 3);\n\n          for (var l = 0; l < u; ++l) r.push(new Array(i.bucketSize));\n\n          var c = Math.ceil(n / i.bucketSize);\n          o = Math.floor(u / 2) - Math.floor(c / 2), a = o, e.forEach(function (e) {\n            return t.pushBack(e);\n          });\n        }(), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), i.sigma = 3, i.bucketSize = 5e3, Object.freeze(i), r.default = i;\n    }, {}],\n    27: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../LinkList/LinkList"),\n          s = e("../Map/Map");\n\n      function a(e, t, r) {\n        var l = this;\n        if (void 0 === e && (e = []), void 0 === t && (t = a.initSize), r = r || function (e) {\n          var t,\n              r,\n              n = 0,\n              o = "";\n          if ("number" == typeof e) n = ((n = Math.floor(e)) << 5) - n, n &= n;else {\n            o = "string" != typeof e ? JSON.stringify(e) : e;\n\n            try {\n              for (var s = i(o), a = s.next(); !a.done; a = s.next()) {\n                n = (n << 5) - n + a.value.charCodeAt(0), n &= n;\n              }\n            } catch (e) {\n              t = {\n                error: e\n              };\n            } finally {\n              try {\n                a && !a.done && (r = s.return) && r.call(s);\n              } finally {\n                if (t) throw t.error;\n              }\n            }\n          }\n          return n ^= n >>> 16;\n        }, 0 != (t & t - 1)) throw new Error("initBucketNum must be 2 to the power of n");\n        var u = 0,\n            c = [],\n            h = Math.max(a.initSize, Math.min(a.maxSize, t));\n        this.size = function () {\n          return u;\n        }, this.empty = function () {\n          return 0 === u;\n        }, this.clear = function () {\n          u = 0, h = t, c = [];\n        }, this.forEach = function (e) {\n          var t = 0;\n          c.forEach(function (r) {\n            r.forEach(function (r) {\n              e(r, t++);\n            });\n          });\n        };\n        this.setElement = function (e, t) {\n          var n, l;\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n\n          if (null !== t && void 0 !== t) {\n            var f = r(e) & h - 1;\n\n            if (c[f]) {\n              var p = c[f].size();\n\n              if (c[f] instanceof o.default) {\n                try {\n                  for (var d = i(c[f]), g = d.next(); !g.done; g = d.next()) {\n                    var y = g.value;\n                    if (y.key === e) return void (y.value = t);\n                  }\n                } catch (e) {\n                  n = {\n                    error: e\n                  };\n                } finally {\n                  try {\n                    g && !g.done && (l = d.return) && l.call(d);\n                  } finally {\n                    if (n) throw n.error;\n                  }\n                }\n\n                c[f].pushBack({\n                  key: e,\n                  value: t\n                }), c[f].size() >= a.treeifyThreshold && (c[f] = new s.default(c[f]));\n              } else c[f].setElement(e, t);\n\n              var b = c[f].size();\n              u += b - p;\n            } else ++u, c[f] = new o.default([{\n              key: e,\n              value: t\n            }]);\n\n            u > h * a.sigma && function (e) {\n              if (!(e >= a.maxSize)) {\n                h = 2 * e;\n                var t = [];\n                c.forEach(function (n, i) {\n                  if (!n.empty()) {\n                    if (n instanceof o.default && 1 === n.size()) {\n                      var l = n.front(),\n                          u = l.key,\n                          f = l.value;\n                      t[r(u) & h - 1] = new o.default([{\n                        key: u,\n                        value: f\n                      }]);\n                    } else if (n instanceof s.default) {\n                      var p = new o.default(),\n                          d = new o.default();\n                      n.forEach(function (t) {\n                        0 == (r(t.key) & e) ? p.pushBack(t) : d.pushBack(t);\n                      }), p.size() > a.untreeifyThreshold ? t[i] = new s.default(p) : p.size() && (t[i] = p), d.size() > a.untreeifyThreshold ? t[i + e] = new s.default(d) : d.size() && (t[i + e] = d);\n                    } else {\n                      var g = new o.default(),\n                          y = new o.default();\n                      n.forEach(function (t) {\n                        0 == (r(t.key) & e) ? g.pushBack(t) : y.pushBack(t);\n                      }), g.size() && (t[i] = g), y.size() && (t[i + e] = y);\n                    }\n\n                    c[i].clear();\n                  }\n                }), c = t;\n              }\n            }.call(this, h);\n          } else this.eraseElementByKey(e);\n        }, this.getElementByKey = function (e) {\n          var t,\n              n,\n              o = r(e) & h - 1;\n\n          if (c[o]) {\n            if (c[o] instanceof s.default) return c[o].getElementByKey(e);\n\n            try {\n              for (var a = i(c[o]), l = a.next(); !l.done; l = a.next()) {\n                var u = l.value;\n                if (u.key === e) return u.value;\n              }\n            } catch (e) {\n              t = {\n                error: e\n              };\n            } finally {\n              try {\n                l && !l.done && (n = a.return) && n.call(a);\n              } finally {\n                if (t) throw t.error;\n              }\n            }\n          }\n        }, this.eraseElementByKey = function (e) {\n          var t,\n              n,\n              l = r(e) & h - 1;\n\n          if (c[l]) {\n            var f = c[l].size();\n            if (c[l] instanceof s.default) c[l].eraseElementByKey(e), c[l].size() <= a.untreeifyThreshold && (c[l] = new o.default(c[l]));else {\n              var p = -1;\n\n              try {\n                for (var d = i(c[l]), g = d.next(); !g.done; g = d.next()) {\n                  if (++p, g.value.key === e) {\n                    c[l].eraseElementByPos(p);\n                    break;\n                  }\n                }\n              } catch (e) {\n                t = {\n                  error: e\n                };\n              } finally {\n                try {\n                  g && !g.done && (n = d.return) && n.call(d);\n                } finally {\n                  if (t) throw t.error;\n                }\n              }\n            }\n            var y = c[l].size();\n            u += y - f;\n          }\n        }, this.find = function (e) {\n          var t,\n              n,\n              o = r(e) & h - 1;\n          if (!c[o]) return !1;\n          if (c[o] instanceof s.default) return c[o].find(e);\n\n          try {\n            for (var a = i(c[o]), l = a.next(); !l.done; l = a.next()) {\n              if (l.value.key === e) return !0;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              l && !l.done && (n = a.return) && n.call(a);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          return !1;\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t, r, o, s, a;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  e = 0, n.label = 1;\n\n                case 1:\n                  if (!(e < h)) return [3, 10];\n\n                  for (; e < h && !c[e];) ++e;\n\n                  if (e >= h) return [3, 10];\n                  n.label = 2;\n\n                case 2:\n                  n.trys.push([2, 7, 8, 9]), s = void 0, t = i(c[e]), r = t.next(), n.label = 3;\n\n                case 3:\n                  return r.done ? [3, 6] : [4, r.value];\n\n                case 4:\n                  n.sent(), n.label = 5;\n\n                case 5:\n                  return r = t.next(), [3, 3];\n\n                case 6:\n                  return [3, 9];\n\n                case 7:\n                  return o = n.sent(), s = {\n                    error: o\n                  }, [3, 9];\n\n                case 8:\n                  try {\n                    r && !r.done && (a = t.return) && a.call(t);\n                  } finally {\n                    if (s) throw s.error;\n                  }\n\n                  return [7];\n\n                case 9:\n                  return ++e, [3, 1];\n\n                case 10:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          var t = e.key,\n              r = e.value;\n          return l.setElement(t, r);\n        }), Object.freeze(this);\n      }\n\n      a.initSize = 16, a.maxSize = 1 << 30, a.sigma = .75, a.treeifyThreshold = 8, a.untreeifyThreshold = 6, a.minTreeifySize = 64, Object.freeze(a), r.default = a;\n    }, {\n      "../LinkList/LinkList": 29,\n      "../Map/Map": 30\n    }],\n    28: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Set/Set"),\n          s = e("../LinkList/LinkList");\n\n      function a(e, t, r) {\n        var l = this;\n        if (void 0 === e && (e = []), void 0 === t && (t = a.initSize), r = r || function (e) {\n          var t = 0,\n              r = "";\n          if ("number" == typeof e) t = ((t = Math.floor(e)) << 5) - t, t &= t;else {\n            r = "string" != typeof e ? JSON.stringify(e) : e;\n\n            for (var n = 0; n < r.length; n++) {\n              t = (t << 5) - t + r.charCodeAt(n), t &= t;\n            }\n          }\n          return t ^= t >>> 16;\n        }, 0 != (t & t - 1)) throw new Error("initBucketNum must be 2 to the power of n");\n        var u = 0,\n            c = [],\n            h = Math.max(a.initSize, Math.min(a.maxSize, t));\n        this.size = function () {\n          return u;\n        }, this.empty = function () {\n          return 0 === u;\n        }, this.clear = function () {\n          u = 0, h = t, c = [];\n        }, this.forEach = function (e) {\n          var t = 0;\n          c.forEach(function (r) {\n            r.forEach(function (r) {\n              e(r, t++);\n            });\n          });\n        };\n        this.insert = function (e) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n          var t = r(e) & h - 1;\n\n          if (c[t]) {\n            var n = c[t].size();\n\n            if (c[t] instanceof s.default) {\n              if (c[t].find(e)) return;\n              c[t].pushBack(e), c[t].size() >= a.treeifyThreshold && (c[t] = new o.default(c[t]));\n            } else c[t].insert(e);\n\n            var i = c[t].size();\n            u += i - n;\n          } else c[t] = new s.default([e]), ++u;\n\n          u > h * a.sigma && function (e) {\n            if (!(e >= a.maxSize)) {\n              h = 2 * e;\n              var t = [];\n              c.forEach(function (n, i) {\n                if (!n.empty()) {\n                  if (n instanceof s.default && 1 === n.size()) {\n                    var l = n.front();\n                    if (void 0 === l) throw new Error("unknown error");\n                    t[r(l) & h - 1] = new s.default([l]);\n                  } else if (n instanceof o.default) {\n                    var u = new s.default(),\n                        f = new s.default();\n                    n.forEach(function (t) {\n                      0 == (r(t) & e) ? u.pushBack(t) : f.pushBack(t);\n                    }), u.size() > a.untreeifyThreshold ? t[i] = new o.default(u) : u.size() && (t[i] = u), f.size() > a.untreeifyThreshold ? t[i + e] = new o.default(f) : f.size() && (t[i + e] = f);\n                  } else {\n                    var p = new s.default(),\n                        d = new s.default();\n                    n.forEach(function (t) {\n                      0 == (r(t) & e) ? p.pushBack(t) : d.pushBack(t);\n                    }), p.size() && (t[i] = p), d.size() && (t[i + e] = d);\n                  }\n\n                  c[i].clear();\n                }\n              }), c = t;\n            }\n          }.call(this, h);\n        }, this.eraseElementByValue = function (e) {\n          var t = r(e) & h - 1;\n\n          if (c[t]) {\n            var n = c[t].size();\n            c[t].eraseElementByValue(e), c[t] instanceof o.default && c[t].size() <= a.untreeifyThreshold && (c[t] = new s.default(c[t]));\n            var i = c[t].size();\n            u += i - n;\n          }\n        }, this.find = function (e) {\n          var t = r(e) & h - 1;\n          return !!c[t] && c[t].find(e);\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t, r, o, s, a;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  e = 0, n.label = 1;\n\n                case 1:\n                  if (!(e < h)) return [3, 10];\n\n                  for (; e < h && !c[e];) ++e;\n\n                  if (e >= h) return [3, 10];\n                  n.label = 2;\n\n                case 2:\n                  n.trys.push([2, 7, 8, 9]), s = void 0, t = i(c[e]), r = t.next(), n.label = 3;\n\n                case 3:\n                  return r.done ? [3, 6] : [4, r.value];\n\n                case 4:\n                  n.sent(), n.label = 5;\n\n                case 5:\n                  return r = t.next(), [3, 3];\n\n                case 6:\n                  return [3, 9];\n\n                case 7:\n                  return o = n.sent(), s = {\n                    error: o\n                  }, [3, 9];\n\n                case 8:\n                  try {\n                    r && !r.done && (a = t.return) && a.call(t);\n                  } finally {\n                    if (s) throw s.error;\n                  }\n\n                  return [7];\n\n                case 9:\n                  return ++e, [3, 1];\n\n                case 10:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return l.insert(e);\n        }), Object.freeze(this);\n      }\n\n      a.initSize = 16, a.maxSize = 1 << 30, a.sigma = .75, a.treeifyThreshold = 8, a.untreeifyThreshold = 6, a.minTreeifySize = 64, Object.freeze(a), r.default = a;\n    }, {\n      "../LinkList/LinkList": 29,\n      "../Set/Set": 33\n    }],\n    29: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n\n      var i = function () {\n        return function (e) {\n          this.value = void 0, this.pre = void 0, this.next = void 0, this.value = e;\n        };\n      }();\n\n      function o(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            o = void 0,\n            s = void 0;\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          o = s = void 0, r = 0;\n        }, this.front = function () {\n          return null === o || void 0 === o ? void 0 : o.value;\n        }, this.back = function () {\n          return null === s || void 0 === s ? void 0 : s.value;\n        }, this.forEach = function (e) {\n          for (var t = o, r = 0; t;) {\n            if (void 0 === t.value) throw new Error("unknown error");\n            e(t.value, r++), t = t.next;\n          }\n        }, this.getElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more then 0 and less then the list length");\n\n          for (var t = o; e-- && t;) t = t.next;\n\n          if (!t || void 0 === t.value) throw new Error("unknown error");\n          return t.value;\n        }, this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("erase pos must more then 0 and less then the list length");\n          if (0 === e) this.popFront();else if (e === r - 1) this.popBack();else {\n            for (var t = o; e--;) {\n              if (!(null === t || void 0 === t ? void 0 : t.next)) throw new Error("unknown error");\n              t = t.next;\n            }\n\n            if (!t || !t.pre || !t.next) throw new Error("unknown error");\n            var n = t.pre,\n                i = t.next;\n            i.pre = n, n.next = i, r > 0 && --r;\n          }\n        }, this.eraseElementByValue = function (e) {\n          for (; o && o.value === e;) this.popFront();\n\n          for (; s && s.value === e;) this.popBack();\n\n          if (o) for (var t = o; t;) {\n            if (t.value === e) {\n              var n = t.pre,\n                  i = t.next;\n              i && (i.pre = n), n && (n.next = i), r > 0 && --r;\n            }\n\n            t = t.next;\n          }\n        }, this.pushBack = function (e) {\n          if (null === e || void 0 === e) throw new Error("you can\'t push null or undefined here");\n          ++r;\n          var t = new i(e);\n          s ? (s.next = t, t.pre = s, s = t) : o = s = t;\n        }, this.popBack = function () {\n          s && (r > 0 && --r, s && (o === s ? o = s = void 0 : (s = s.pre) && (s.next = void 0)));\n        }, this.setElementByPos = function (e, t) {\n          if (null === t || void 0 === t) throw new Error("you can\'t set null or undefined here");\n          if (e < 0 || e >= r) throw new Error("pos must more then 0 and less then the list length");\n\n          for (var n = o; e--;) {\n            if (!n) throw new Error("unknown error");\n            n = n.next;\n          }\n\n          n && (n.value = t);\n        }, this.insert = function (e, t, n) {\n          if (void 0 === n && (n = 1), null === t || void 0 === t) throw new Error("you can\'t insert null or undefined here");\n          if (e < 0 || e > r) throw new Error("insert pos must more then 0 and less then or equal to the list length");\n          if (n < 0) throw new Error("insert size must more than 0");\n          if (0 === e) for (; n--;) this.pushFront(t);else if (e === r) for (; n--;) this.pushBack(t);else {\n            for (var s = o, a = 1; a < e; ++a) {\n              if (!(null === s || void 0 === s ? void 0 : s.next)) throw new Error("unknown error");\n              s = null === s || void 0 === s ? void 0 : s.next;\n            }\n\n            if (!s) throw new Error("unknown error");\n            var l = s.next;\n\n            for (r += n; n--;) s.next = new i(t), s.next.pre = s, s = s.next;\n\n            s.next = l, l && (l.pre = s);\n          }\n        }, this.find = function (e) {\n          for (var t = o; t;) {\n            if (t.value === e) return !0;\n            t = t.next;\n          }\n\n          return !1;\n        }, this.reverse = function () {\n          for (var e = o, t = s, n = 0; e && t && 2 * n < r;) {\n            var i = e.value;\n            e.value = t.value, t.value = i, e = e.next, t = t.pre, ++n;\n          }\n        }, this.unique = function () {\n          for (var e = o; e;) {\n            for (var t = e; t && t.next && t.value === t.next.value;) t = t.next, r > 0 && --r;\n\n            e.next = t.next, e.next && (e.next.pre = e), e = e.next;\n          }\n        }, this.sort = function (e) {\n          var t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          }), t.sort(e);\n          var r = o;\n          t.forEach(function (e) {\n            r && (r.value = e, r = r.next);\n          });\n        }, this.pushFront = function (e) {\n          if (null === e || void 0 === e) throw new Error("you can\'t push null or undefined here");\n          ++r;\n          var t = new i(e);\n          o ? (t.next = o, o.pre = t, o = t) : o = s = t;\n        }, this.popFront = function () {\n          o && (r > 0 && --r, o && (o === s ? o = s = void 0 : (o = o.next) && (o.pre = void 0)));\n        }, this.merge = function (e) {\n          var t = this,\n              n = o;\n          e.forEach(function (e) {\n            for (; n && void 0 !== n.value && n.value <= e;) n = n.next;\n\n            if (void 0 === n) t.pushBack(e), n = s;else if (n === o) t.pushFront(e), n = o;else {\n              ++r;\n              var a = n.pre;\n              a && (a.next = new i(e), a.next.pre = a, a.next.next = n, n && (n.pre = a.next));\n            }\n          });\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e;\n            return n(this, function (t) {\n              switch (t.label) {\n                case 0:\n                  e = o, t.label = 1;\n\n                case 1:\n                  if (void 0 === e) return [3, 3];\n                  if (!e.value) throw new Error("unknown error");\n                  return [4, e.value];\n\n                case 2:\n                  return t.sent(), e = e.next, [3, 1];\n\n                case 3:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return t.pushBack(e);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(o), r.default = o;\n    }, {}],\n    30: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Base/TreeNode");\n\n      function s(e, t) {\n        var r = this;\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e < t ? -1 : e > t ? 1 : 0;\n        };\n        var s = 0,\n            a = new o.default();\n        a.color = o.default.TreeNodeColorType.black, this.size = function () {\n          return s;\n        }, this.empty = function () {\n          return 0 === s;\n        }, this.clear = function () {\n          s = 0, a.key = a.value = void 0, a.leftChild = a.rightChild = a.brother = void 0;\n        };\n\n        var l = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.leftChild ? l(e.leftChild) : e;\n        },\n            u = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.rightChild ? u(e.rightChild) : e;\n        };\n\n        this.front = function () {\n          if (!this.empty()) {\n            var e = l(a);\n            if (void 0 === e.key || void 0 === e.value) throw new Error("unknown error");\n            return {\n              key: e.key,\n              value: e.value\n            };\n          }\n        }, this.back = function () {\n          if (!this.empty()) {\n            var e = u(a);\n            if (void 0 === e.key || void 0 === e.value) throw new Error("unknown error");\n            return {\n              key: e.key,\n              value: e.value\n            };\n          }\n        }, this.forEach = function (e) {\n          var t,\n              r,\n              n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              e(s.value, n++);\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        }, this.getElementByPos = function (e) {\n          var t, r;\n          if (e < 0 || e >= this.size()) throw new Error("pos must more than 0 and less than set\'s size");\n          var n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              var a = s.value;\n              if (n === e) return a;\n              ++n;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          throw new Error("unknown Error");\n        };\n\n        var c = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) {\n            var n = t(e.key, r);\n            return 0 === n ? {\n              key: e.key,\n              value: e.value\n            } : n < 0 ? c(e.rightChild, r) : c(e.leftChild, r) || {\n              key: e.key,\n              value: e.value\n            };\n          }\n        };\n\n        this.lowerBound = function (e) {\n          return c(a, e);\n        };\n\n        var h = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) return t(e.key, r) <= 0 ? h(e.rightChild, r) : h(e.leftChild, r) || {\n            key: e.key,\n            value: e.value\n          };\n        };\n\n        this.upperBound = function (e) {\n          return h(a, e);\n        };\n\n        var f = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) {\n            var n = t(e.key, r);\n            return 0 === n ? {\n              key: e.key,\n              value: e.value\n            } : n > 0 ? f(e.leftChild, r) : f(e.rightChild, r) || {\n              key: e.key,\n              value: e.value\n            };\n          }\n        };\n\n        this.reverseLowerBound = function (e) {\n          return f(a, e);\n        };\n\n        var p = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) return t(e.key, r) >= 0 ? p(e.leftChild, r) : p(e.rightChild, r) || {\n            key: e.key,\n            value: e.value\n          };\n        };\n\n        this.reverseUpperBound = function (e) {\n          return p(a, e);\n        };\n\n        var d = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (e.color !== o.default.TreeNodeColorType.red) {\n            var r = e.brother;\n            if (!r) throw new Error("unknown error");\n\n            if (e === t.leftChild) {\n              if (r.color === o.default.TreeNodeColorType.red) {\n                r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n                var n = t.rotateLeft();\n                a === t && (a = n), d(e);\n              } else if (r.color === o.default.TreeNodeColorType.black) if (r.rightChild && r.rightChild.color === o.default.TreeNodeColorType.red) {\n                r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n                n = t.rotateLeft();\n                a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n              } else if (r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || !r.leftChild || r.leftChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, d(t));else {\n                r.color = o.default.TreeNodeColorType.red, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n                n = r.rotateRight();\n                a === r && (a = n), d(e);\n              }\n            } else if (e === t.rightChild) if (r.color === o.default.TreeNodeColorType.red) {\n              r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n              n = t.rotateRight();\n              a === t && (a = n), d(e);\n            } else if (r.color === o.default.TreeNodeColorType.black) if (r.leftChild && r.leftChild.color === o.default.TreeNodeColorType.red) {\n              r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n              n = t.rotateRight();\n              a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n            } else if (r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || !r.rightChild || r.rightChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, d(t));else {\n              r.color = o.default.TreeNodeColorType.red, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n              n = r.rotateLeft();\n              a === r && (a = n), d(e);\n            }\n          } else e.color = o.default.TreeNodeColorType.black;\n        },\n            g = function (e) {\n          for (var t = e; t.leftChild || t.rightChild;) {\n            if (t.rightChild) {\n              t = l(t.rightChild);\n              var r = e.key;\n              e.key = t.key, t.key = r;\n              var n = e.value;\n              e.value = t.value, t.value = n, e = t;\n            }\n\n            if (t.leftChild) {\n              t = u(t.leftChild);\n              r = e.key;\n              e.key = t.key, t.key = r;\n              n = e.value;\n              e.value = t.value, t.value = n, e = t;\n            }\n          }\n\n          d(t), t && t.remove(), --s, a.color = o.default.TreeNodeColorType.black;\n        },\n            y = function (e, t) {\n          return !(!e || void 0 === e.key) && (!!y(e.leftChild, t) || !!t(e) || y(e.rightChild, t));\n        };\n\n        this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= s) throw new Error("pos must more than 0 and less than set\'s size");\n          var t = 0;\n          y(a, function (r) {\n            return e === t ? (g(r), !0) : (++t, !1);\n          });\n        }, this.eraseElementByKey = function (e) {\n          if (!this.empty()) {\n            var r = v(a, e);\n            void 0 !== r && void 0 !== r.key && 0 === t(r.key, e) && g(r);\n          }\n        };\n\n        var b = function (e, r) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          var n = t(r, e.key);\n          return n < 0 ? e.leftChild ? b(e.leftChild, r) : (e.leftChild = new o.default(), e.leftChild.parent = e, e.leftChild.brother = e.rightChild, e.rightChild && (e.rightChild.brother = e.leftChild), e.leftChild) : n > 0 ? e.rightChild ? b(e.rightChild, r) : (e.rightChild = new o.default(), e.rightChild.parent = e, e.rightChild.brother = e.leftChild, e.leftChild && (e.leftChild.brother = e.rightChild), e.rightChild) : e;\n        },\n            m = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (t.color !== o.default.TreeNodeColorType.black && t.color === o.default.TreeNodeColorType.red) {\n            var r = t.brother,\n                n = t.parent;\n            if (!n) throw new Error("unknown error");\n            if (r && r.color === o.default.TreeNodeColorType.red) r.color = t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red, m(n);else if (!r || r.color === o.default.TreeNodeColorType.black) if (t === n.leftChild) {\n              if (e === t.leftChild) {\n                t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n                var i = n.rotateRight();\n                n === a && (a = i);\n              } else if (e === t.rightChild) {\n                i = t.rotateLeft();\n                n === a && (a = i), m(t);\n              }\n            } else if (t === n.rightChild) if (e === t.leftChild) {\n              i = t.rotateRight();\n              n === a && (a = i), m(t);\n            } else if (e === t.rightChild) {\n              t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n              i = n.rotateLeft();\n              n === a && (a = i);\n            }\n          }\n        };\n\n        this.setElement = function (e, r) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n\n          if (null !== r && void 0 !== r) {\n            if (this.empty()) return ++s, a.key = e, a.value = r, void (a.color = o.default.TreeNodeColorType.black);\n            var n = b(a, e);\n            void 0 === n.key || 0 !== t(n.key, e) ? (++s, n.key = e, n.value = r, m(n), a.color = o.default.TreeNodeColorType.black) : n.value = r;\n          } else this.eraseElementByKey(e);\n        };\n\n        var v = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(r, e.key);\n            return n < 0 ? v(e.leftChild, r) : n > 0 ? v(e.rightChild, r) : e;\n          }\n        };\n\n        this.find = function (e) {\n          return !!v(a, e);\n        }, this.getElementByKey = function (e) {\n          var t = v(a, e);\n          if (void 0 === (null === t || void 0 === t ? void 0 : t.key) || void 0 === (null === t || void 0 === t ? void 0 : t.value)) throw new Error("unknown error");\n          return t.value;\n        }, this.union = function (e) {\n          var t = this;\n          e.forEach(function (e) {\n            var r = e.key,\n                n = e.value;\n            return t.setElement(r, n);\n          });\n        }, this.getHeight = function () {\n          if (this.empty()) return 0;\n\n          var e = function (t) {\n            return t ? Math.max(e(t.leftChild), e(t.rightChild)) + 1 : 1;\n          };\n\n          return e(a);\n        };\n\n        var w = function (e) {\n          return n(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e && void 0 !== e.key && void 0 !== e.value ? [5, i(w(e.leftChild))] : [2];\n\n              case 1:\n                return t.sent(), [4, {\n                  key: e.key,\n                  value: e.value\n                }];\n\n              case 2:\n                return t.sent(), [5, i(w(e.rightChild))];\n\n              case 3:\n                return t.sent(), [2];\n            }\n          });\n        };\n\n        this[Symbol.iterator] = function () {\n          return w(a);\n        }, e.forEach(function (e) {\n          var t = e.key,\n              n = e.value;\n          return r.setElement(t, n);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(s), r.default = s;\n    }, {\n      "../Base/TreeNode": 25\n    }],\n    31: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e > t ? -1 : e < t ? 1 : 0;\n        };\n        var r = [];\n        e.forEach(function (e) {\n          return r.push(e);\n        });\n\n        var n = r.length,\n            i = function (e, t) {\n          if (e < 0 || e >= n) throw new Error("unknown error");\n          if (t < 0 || t >= n) throw new Error("unknown error");\n          var i = r[e];\n          r[e] = r[t], r[t] = i;\n        },\n            o = function (e) {\n          if (e < 0 || e >= n) throw new Error("unknown error");\n          var o = 2 * e + 1,\n              s = 2 * e + 2;\n          o < n && t(r[e], r[o]) > 0 && i(e, o), s < n && t(r[e], r[s]) > 0 && i(e, s);\n        };\n\n        !function () {\n          for (var e = Math.floor((n - 1) / 2); e >= 0; --e) for (var o = e, s = 2 * o + 1; s < n;) {\n            var a = s + 1,\n                l = s;\n            if (a < n && t(r[s], r[a]) > 0 && (l = a), t(r[o], r[l]) <= 0) break;\n            i(o, l), s = 2 * (o = l) + 1;\n          }\n        }(), this.size = function () {\n          return n;\n        }, this.empty = function () {\n          return 0 === n;\n        }, this.clear = function () {\n          n = 0, r.length = 0;\n        }, this.push = function (e) {\n          if (r.push(e), 1 !== ++n) for (var i = n - 1; i > 0;) {\n            var s = Math.floor((i - 1) / 2);\n            if (t(r[s], e) <= 0) break;\n            o(s), i = s;\n          }\n        }, this.pop = function () {\n          if (!this.empty()) if (1 !== this.size()) {\n            var e = r[n - 1];\n            --n;\n\n            for (var i = 0; i < this.size();) {\n              var o = 2 * i + 1,\n                  s = 2 * i + 2;\n              if (o >= this.size()) break;\n              var a = o;\n              if (s < this.size() && t(r[o], r[s]) > 0 && (a = s), t(r[a], e) >= 0) break;\n              r[i] = r[a], i = a;\n            }\n\n            r[i] = e;\n          } else --n;\n        }, this.top = function () {\n          return r[0];\n        }, Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(n), r.default = n;\n    }, {}],\n    32: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var n = e("../LinkList/LinkList");\n\n      function i(e) {\n        void 0 === e && (e = []);\n        var t = new n.default(e);\n        this.size = function () {\n          return t.size();\n        }, this.empty = function () {\n          return t.empty();\n        }, this.clear = function () {\n          t.clear();\n        }, this.push = function (e) {\n          t.pushBack(e);\n        }, this.pop = function () {\n          t.popFront();\n        }, this.front = function () {\n          return t.front();\n        }, Object.freeze(this);\n      }\n\n      Object.freeze(i), r.default = i;\n    }, {\n      "../LinkList/LinkList": 29\n    }],\n    33: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Base/TreeNode");\n\n      function s(e, t) {\n        var r = this;\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e < t ? -1 : e > t ? 1 : 0;\n        };\n        var s = 0,\n            a = new o.default();\n        a.color = o.default.TreeNodeColorType.black, this.size = function () {\n          return s;\n        }, this.empty = function () {\n          return 0 === s;\n        }, this.clear = function () {\n          s = 0, a.key = void 0, a.leftChild = a.rightChild = a.brother = a.parent = void 0, a.color = o.default.TreeNodeColorType.black;\n        };\n\n        var l = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.leftChild ? l(e.leftChild) : e;\n        },\n            u = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.rightChild ? u(e.rightChild) : e;\n        };\n\n        this.front = function () {\n          if (!this.empty()) return l(a).key;\n        }, this.back = function () {\n          if (!this.empty()) return u(a).key;\n        }, this.forEach = function (e) {\n          var t,\n              r,\n              n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              e(s.value, n++);\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        }, this.getElementByPos = function (e) {\n          var t, r;\n          if (e < 0 || e >= this.size()) throw new Error("pos must more than 0 and less than set\'s size");\n          var n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              var a = s.value;\n              if (n === e) return a;\n              ++n;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          throw new Error("unknown error");\n        };\n\n        var c = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (e.color !== o.default.TreeNodeColorType.red) {\n            var r = e.brother;\n            if (!r) throw new Error("unknown error");\n\n            if (e === t.leftChild) {\n              if (r.color === o.default.TreeNodeColorType.red) {\n                r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n                var n = t.rotateLeft();\n                a === t && (a = n), c(e);\n              } else if (r.color === o.default.TreeNodeColorType.black) if (r.rightChild && r.rightChild.color === o.default.TreeNodeColorType.red) {\n                r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n                n = t.rotateLeft();\n                a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n              } else if (r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || !r.leftChild || r.leftChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, c(t));else {\n                r.color = o.default.TreeNodeColorType.red, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n                n = r.rotateRight();\n                a === r && (a = n), c(e);\n              }\n            } else if (e === t.rightChild) if (r.color === o.default.TreeNodeColorType.red) {\n              r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n              n = t.rotateRight();\n              a === t && (a = n), c(e);\n            } else if (r.color === o.default.TreeNodeColorType.black) if (r.leftChild && r.leftChild.color === o.default.TreeNodeColorType.red) {\n              r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n              n = t.rotateRight();\n              a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n            } else if (r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || !r.rightChild || r.rightChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, c(t));else {\n              r.color = o.default.TreeNodeColorType.red, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n              n = r.rotateLeft();\n              a === r && (a = n), c(e);\n            }\n          } else e.color = o.default.TreeNodeColorType.black;\n        },\n            h = function (e) {\n          for (var t = e; t.leftChild || t.rightChild;) {\n            if (t.rightChild) {\n              t = l(t.rightChild);\n              var r = e.key;\n              e.key = t.key, t.key = r, e = t;\n            }\n\n            if (t.leftChild) {\n              t = u(t.leftChild);\n              r = e.key;\n              e.key = t.key, t.key = r, e = t;\n            }\n          }\n\n          c(t), t && t.remove(), --s, a.color = o.default.TreeNodeColorType.black;\n        },\n            f = function (e, t) {\n          return !(!e || void 0 === e.key) && (!!f(e.leftChild, t) || !!t(e) || f(e.rightChild, t));\n        };\n\n        this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= s) throw new Error("pos must more than 0 and less than set\'s size");\n          var t = 0;\n          f(a, function (r) {\n            return e === t ? (h(r), !0) : (++t, !1);\n          });\n        }, this.eraseElementByValue = function (e) {\n          if (!this.empty()) {\n            var r = g(a, e);\n            void 0 !== r && void 0 !== r.key && 0 === t(r.key, e) && h(r);\n          }\n        };\n\n        var p = function (e, r) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          var n = t(r, e.key);\n          return n < 0 ? e.leftChild ? p(e.leftChild, r) : (e.leftChild = new o.default(), e.leftChild.parent = e, e.leftChild.brother = e.rightChild, e.rightChild && (e.rightChild.brother = e.leftChild), e.leftChild) : n > 0 ? e.rightChild ? p(e.rightChild, r) : (e.rightChild = new o.default(), e.rightChild.parent = e, e.rightChild.brother = e.leftChild, e.leftChild && (e.leftChild.brother = e.rightChild), e.rightChild) : e;\n        },\n            d = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (t.color !== o.default.TreeNodeColorType.black && t.color === o.default.TreeNodeColorType.red) {\n            var r = t.brother,\n                n = t.parent;\n            if (!n) throw new Error("unknown error");\n            if (r && r.color === o.default.TreeNodeColorType.red) r.color = t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red, d(n);else if (!r || r.color === o.default.TreeNodeColorType.black) if (t === n.leftChild) {\n              if (e === t.leftChild) {\n                t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n                var i = n.rotateRight();\n                n === a && (a = i);\n              } else if (e === t.rightChild) {\n                i = t.rotateLeft();\n                n === a && (a = i), d(t);\n              }\n            } else if (t === n.rightChild) if (e === t.leftChild) {\n              i = t.rotateRight();\n              n === a && (a = i), d(t);\n            } else if (e === t.rightChild) {\n              t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n              i = n.rotateLeft();\n              n === a && (a = i);\n            }\n          }\n        };\n\n        this.insert = function (e) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n          if (this.empty()) return ++s, a.key = e, void (a.color = o.default.TreeNodeColorType.black);\n          var r = p(a, e);\n          void 0 !== r.key && 0 === t(r.key, e) || (++s, r.key = e, d(r), a.color = o.default.TreeNodeColorType.black);\n        };\n\n        var g = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(r, e.key);\n            return n < 0 ? g(e.leftChild, r) : n > 0 ? g(e.rightChild, r) : e;\n          }\n        };\n\n        this.find = function (e) {\n          var r = g(a, e);\n          return void 0 !== r && void 0 !== r.key && 0 === t(r.key, e);\n        };\n\n        var y = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(e.key, r);\n            return 0 === n ? e.key : n < 0 ? y(e.rightChild, r) : y(e.leftChild, r) || e.key;\n          }\n        };\n\n        this.lowerBound = function (e) {\n          return y(a, e);\n        };\n\n        var b = function (e, r) {\n          if (e && void 0 !== e.key) return t(e.key, r) <= 0 ? b(e.rightChild, r) : b(e.leftChild, r) || e.key;\n        };\n\n        this.upperBound = function (e) {\n          return b(a, e);\n        };\n\n        var m = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(e.key, r);\n            return 0 === n ? e.key : n > 0 ? m(e.leftChild, r) : m(e.rightChild, r) || e.key;\n          }\n        };\n\n        this.reverseLowerBound = function (e) {\n          return m(a, e);\n        };\n\n        var v = function (e, r) {\n          if (e && void 0 !== e.key) return t(e.key, r) >= 0 ? v(e.leftChild, r) : v(e.rightChild, r) || e.key;\n        };\n\n        this.reverseUpperBound = function (e) {\n          return v(a, e);\n        }, this.union = function (e) {\n          var t = this;\n          e.forEach(function (e) {\n            return t.insert(e);\n          });\n        }, this.getHeight = function () {\n          if (this.empty()) return 0;\n\n          var e = function (t) {\n            return t ? Math.max(e(t.leftChild), e(t.rightChild)) + 1 : 1;\n          };\n\n          return e(a);\n        };\n\n        var w = function (e) {\n          return n(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e && void 0 !== e.key ? [5, i(w(e.leftChild))] : [2];\n\n              case 1:\n                return t.sent(), [4, e.key];\n\n              case 2:\n                return t.sent(), [5, i(w(e.rightChild))];\n\n              case 3:\n                return t.sent(), [2];\n            }\n          });\n        };\n\n        this[Symbol.iterator] = function () {\n          return w(a);\n        }, e.forEach(function (e) {\n          return r.insert(e);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(s), r.default = s;\n    }, {\n      "../Base/TreeNode": 25\n    }],\n    34: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            n = [];\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          r = 0, n.length = 0;\n        }, this.push = function (e) {\n          n.push(e), ++r;\n        }, this.pop = function () {\n          n.pop(), r > 0 && --r;\n        }, this.top = function () {\n          return n[r - 1];\n        }, e.forEach(function (e) {\n          return t.push(e);\n        }), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(n), r.default = n;\n    }, {}],\n    35: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__read || function (e, t) {\n        var r = "function" == typeof Symbol && e[Symbol.iterator];\n        if (!r) return e;\n        var n,\n            i,\n            o = r.call(e),\n            s = [];\n\n        try {\n          for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) s.push(n.value);\n        } catch (e) {\n          i = {\n            error: e\n          };\n        } finally {\n          try {\n            n && !n.done && (r = o.return) && r.call(o);\n          } finally {\n            if (i) throw i.error;\n          }\n        }\n\n        return s;\n      },\n          o = this && this.__spreadArray || function (e, t, r) {\n        if (r || 2 === arguments.length) for (var n, i = 0, o = t.length; i < o; i++) !n && i in t || (n || (n = Array.prototype.slice.call(t, 0, i)), n[i] = t[i]);\n        return e.concat(n || Array.prototype.slice.call(t));\n      },\n          s = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      function a(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            a = [];\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          r = 0, a.length = 0;\n        }, this.front = function () {\n          if (!this.empty()) return a[0];\n        }, this.back = function () {\n          if (!this.empty()) return a[r - 1];\n        }, this.forEach = function (e) {\n          a.forEach(e);\n        }, this.getElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n          return a[e];\n        }, this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n\n          for (var t = e; t < r - 1; ++t) a[t] = a[t + 1];\n\n          this.popBack();\n        }, this.eraseElementByValue = function (e) {\n          var t = [];\n          this.forEach(function (r) {\n            r !== e && t.push(r);\n          }), t.forEach(function (e, t) {\n            a[t] = e;\n          });\n\n          for (var n = t.length; r > n;) this.popBack();\n        }, this.pushBack = function (e) {\n          a.push(e), ++r;\n        }, this.popBack = function () {\n          a.pop(), r > 0 && --r;\n        }, this.setElementByPos = function (e, t) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n          a[e] = t;\n        }, this.insert = function (e, t, n) {\n          if (void 0 === n && (n = 1), e < 0 || e > r) throw new Error("pos must more than 0 and less than or equal to vector\'s size");\n          a.splice.apply(a, o([e, 0], i(new Array(n).fill(t)), !1)), r += n;\n        }, this.find = function (e) {\n          return a.includes(e);\n        }, this.reverse = function () {\n          a.reverse();\n        }, this.unique = function () {\n          var e,\n              t = [];\n          this.forEach(function (r, n) {\n            0 !== n && r === e || (t.push(r), e = r);\n          }), t.forEach(function (e, t) {\n            a[t] = e;\n          });\n\n          for (var n = t.length; r > n;) this.popBack();\n        }, this.sort = function (e) {\n          a.sort(e);\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            return n(this, function (e) {\n              switch (e.label) {\n                case 0:\n                  return [5, s(a)];\n\n                case 1:\n                  return [2, e.sent()];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return t.pushBack(e);\n        }), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(a), r.default = a;\n    }, {}],\n    36: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), r.HashMap = r.HashSet = r.Map = r.Set = r.PriorityQueue = r.Deque = r.LinkList = r.Queue = r.Stack = r.Vector = void 0;\n      var n = e("./Vector/Vector");\n      r.Vector = n.default;\n      var i = e("./Stack/Stack");\n      r.Stack = i.default;\n      var o = e("./Queue/Queue");\n      r.Queue = o.default;\n      var s = e("./LinkList/LinkList");\n      r.LinkList = s.default;\n      var a = e("./Deque/Deque");\n      r.Deque = a.default;\n      var l = e("./PriorityQueue/PriorityQueue");\n      r.PriorityQueue = l.default;\n      var u = e("./Set/Set");\n      r.Set = u.default;\n      var c = e("./Map/Map");\n      r.Map = c.default;\n      var h = e("./HashSet/HashSet");\n      r.HashSet = h.default;\n      var f = e("./HashMap/HashMap");\n      r.HashMap = f.default;\n    }, {\n      "./Deque/Deque": 26,\n      "./HashMap/HashMap": 27,\n      "./HashSet/HashSet": 28,\n      "./LinkList/LinkList": 29,\n      "./Map/Map": 30,\n      "./PriorityQueue/PriorityQueue": 31,\n      "./Queue/Queue": 32,\n      "./Set/Set": 33,\n      "./Stack/Stack": 34,\n      "./Vector/Vector": 35\n    }],\n    37: [function (e, t, r) {\n      "use strict";\n\n      const n = e("yallist"),\n            i = Symbol("max"),\n            o = Symbol("length"),\n            s = Symbol("lengthCalculator"),\n            a = Symbol("allowStale"),\n            l = Symbol("maxAge"),\n            u = Symbol("dispose"),\n            c = Symbol("noDisposeOnSet"),\n            h = Symbol("lruList"),\n            f = Symbol("cache"),\n            p = Symbol("updateAgeOnGet"),\n            d = () => 1;\n\n      const g = (e, t, r) => {\n        const n = e[f].get(t);\n\n        if (n) {\n          const t = n.value;\n\n          if (y(e, t)) {\n            if (m(e, n), !e[a]) return;\n          } else r && (e[p] && (n.value.now = Date.now()), e[h].unshiftNode(n));\n\n          return t.value;\n        }\n      },\n            y = (e, t) => {\n        if (!t || !t.maxAge && !e[l]) return !1;\n        const r = Date.now() - t.now;\n        return t.maxAge ? r > t.maxAge : e[l] && r > e[l];\n      },\n            b = e => {\n        if (e[o] > e[i]) for (let t = e[h].tail; e[o] > e[i] && null !== t;) {\n          const r = t.prev;\n          m(e, t), t = r;\n        }\n      },\n            m = (e, t) => {\n        if (t) {\n          const r = t.value;\n          e[u] && e[u](r.key, r.value), e[o] -= r.length, e[f].delete(r.key), e[h].removeNode(t);\n        }\n      };\n\n      class v {\n        constructor(e, t, r, n, i) {\n          this.key = e, this.value = t, this.length = r, this.now = n, this.maxAge = i || 0;\n        }\n\n      }\n\n      const w = (e, t, r, n) => {\n        let i = r.value;\n        y(e, i) && (m(e, r), e[a] || (i = void 0)), i && t.call(n, i.value, i.key, e);\n      };\n\n      t.exports = class {\n        constructor(e) {\n          if ("number" == typeof e && (e = {\n            max: e\n          }), e || (e = {}), e.max && ("number" != typeof e.max || e.max < 0)) throw new TypeError("max must be a non-negative number");\n          this[i] = e.max || 1 / 0;\n          const t = e.length || d;\n          if (this[s] = "function" != typeof t ? d : t, this[a] = e.stale || !1, e.maxAge && "number" != typeof e.maxAge) throw new TypeError("maxAge must be a number");\n          this[l] = e.maxAge || 0, this[u] = e.dispose, this[c] = e.noDisposeOnSet || !1, this[p] = e.updateAgeOnGet || !1, this.reset();\n        }\n\n        set max(e) {\n          if ("number" != typeof e || e < 0) throw new TypeError("max must be a non-negative number");\n          this[i] = e || 1 / 0, b(this);\n        }\n\n        get max() {\n          return this[i];\n        }\n\n        set allowStale(e) {\n          this[a] = !!e;\n        }\n\n        get allowStale() {\n          return this[a];\n        }\n\n        set maxAge(e) {\n          if ("number" != typeof e) throw new TypeError("maxAge must be a non-negative number");\n          this[l] = e, b(this);\n        }\n\n        get maxAge() {\n          return this[l];\n        }\n\n        set lengthCalculator(e) {\n          "function" != typeof e && (e = d), e !== this[s] && (this[s] = e, this[o] = 0, this[h].forEach(e => {\n            e.length = this[s](e.value, e.key), this[o] += e.length;\n          })), b(this);\n        }\n\n        get lengthCalculator() {\n          return this[s];\n        }\n\n        get length() {\n          return this[o];\n        }\n\n        get itemCount() {\n          return this[h].length;\n        }\n\n        rforEach(e, t) {\n          t = t || this;\n\n          for (let r = this[h].tail; null !== r;) {\n            const n = r.prev;\n            w(this, e, r, t), r = n;\n          }\n        }\n\n        forEach(e, t) {\n          t = t || this;\n\n          for (let r = this[h].head; null !== r;) {\n            const n = r.next;\n            w(this, e, r, t), r = n;\n          }\n        }\n\n        keys() {\n          return this[h].toArray().map(e => e.key);\n        }\n\n        values() {\n          return this[h].toArray().map(e => e.value);\n        }\n\n        reset() {\n          this[u] && this[h] && this[h].length && this[h].forEach(e => this[u](e.key, e.value)), this[f] = new Map(), this[h] = new n(), this[o] = 0;\n        }\n\n        dump() {\n          return this[h].map(e => !y(this, e) && {\n            k: e.key,\n            v: e.value,\n            e: e.now + (e.maxAge || 0)\n          }).toArray().filter(e => e);\n        }\n\n        dumpLru() {\n          return this[h];\n        }\n\n        set(e, t, r) {\n          if ((r = r || this[l]) && "number" != typeof r) throw new TypeError("maxAge must be a number");\n          const n = r ? Date.now() : 0,\n                a = this[s](t, e);\n\n          if (this[f].has(e)) {\n            if (a > this[i]) return m(this, this[f].get(e)), !1;\n            const s = this[f].get(e).value;\n            return this[u] && (this[c] || this[u](e, s.value)), s.now = n, s.maxAge = r, s.value = t, this[o] += a - s.length, s.length = a, this.get(e), b(this), !0;\n          }\n\n          const p = new v(e, t, a, n, r);\n          return p.length > this[i] ? (this[u] && this[u](e, t), !1) : (this[o] += p.length, this[h].unshift(p), this[f].set(e, this[h].head), b(this), !0);\n        }\n\n        has(e) {\n          if (!this[f].has(e)) return !1;\n          const t = this[f].get(e).value;\n          return !y(this, t);\n        }\n\n        get(e) {\n          return g(this, e, !0);\n        }\n\n        peek(e) {\n          return g(this, e, !1);\n        }\n\n        pop() {\n          const e = this[h].tail;\n          return e ? (m(this, e), e.value) : null;\n        }\n\n        del(e) {\n          m(this, this[f].get(e));\n        }\n\n        load(e) {\n          this.reset();\n          const t = Date.now();\n\n          for (let r = e.length - 1; r >= 0; r--) {\n            const n = e[r],\n                  i = n.e || 0;\n            if (0 === i) this.set(n.k, n.v);else {\n              const e = i - t;\n              e > 0 && this.set(n.k, n.v, e);\n            }\n          }\n        }\n\n        prune() {\n          this[f].forEach((e, t) => g(this, t, !1));\n        }\n\n      };\n    }, {\n      yallist: 83\n    }],\n    38: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          const r = t.exports;\n          r.types = {\n            0: "reserved",\n            1: "connect",\n            2: "connack",\n            3: "publish",\n            4: "puback",\n            5: "pubrec",\n            6: "pubrel",\n            7: "pubcomp",\n            8: "subscribe",\n            9: "suback",\n            10: "unsubscribe",\n            11: "unsuback",\n            12: "pingreq",\n            13: "pingresp",\n            14: "disconnect",\n            15: "auth"\n          }, r.codes = {};\n\n          for (const e in r.types) {\n            const t = r.types[e];\n            r.codes[t] = e;\n          }\n\n          r.CMD_SHIFT = 4, r.CMD_MASK = 240, r.DUP_MASK = 8, r.QOS_MASK = 3, r.QOS_SHIFT = 1, r.RETAIN_MASK = 1, r.VARBYTEINT_MASK = 127, r.VARBYTEINT_FIN_MASK = 128, r.VARBYTEINT_MAX = 268435455, r.SESSIONPRESENT_MASK = 1, r.SESSIONPRESENT_HEADER = e.from([r.SESSIONPRESENT_MASK]), r.CONNACK_HEADER = e.from([r.codes.connack << r.CMD_SHIFT]), r.USERNAME_MASK = 128, r.PASSWORD_MASK = 64, r.WILL_RETAIN_MASK = 32, r.WILL_QOS_MASK = 24, r.WILL_QOS_SHIFT = 3, r.WILL_FLAG_MASK = 4, r.CLEAN_SESSION_MASK = 2, r.CONNECT_HEADER = e.from([r.codes.connect << r.CMD_SHIFT]), r.properties = {\n            sessionExpiryInterval: 17,\n            willDelayInterval: 24,\n            receiveMaximum: 33,\n            maximumPacketSize: 39,\n            topicAliasMaximum: 34,\n            requestResponseInformation: 25,\n            requestProblemInformation: 23,\n            userProperties: 38,\n            authenticationMethod: 21,\n            authenticationData: 22,\n            payloadFormatIndicator: 1,\n            messageExpiryInterval: 2,\n            contentType: 3,\n            responseTopic: 8,\n            correlationData: 9,\n            maximumQoS: 36,\n            retainAvailable: 37,\n            assignedClientIdentifier: 18,\n            reasonString: 31,\n            wildcardSubscriptionAvailable: 40,\n            subscriptionIdentifiersAvailable: 41,\n            sharedSubscriptionAvailable: 42,\n            serverKeepAlive: 19,\n            responseInformation: 26,\n            serverReference: 28,\n            topicAlias: 35,\n            subscriptionIdentifier: 11\n          }, r.propertiesCodes = {};\n\n          for (const e in r.properties) {\n            const t = r.properties[e];\n            r.propertiesCodes[t] = e;\n          }\n\n          function n(t) {\n            return [0, 1, 2].map(n => [0, 1].map(i => [0, 1].map(o => {\n              const s = e.alloc(1);\n              return s.writeUInt8(r.codes[t] << r.CMD_SHIFT | (i ? r.DUP_MASK : 0) | n << r.QOS_SHIFT | o, 0, !0), s;\n            })));\n          }\n\n          r.propertiesTypes = {\n            sessionExpiryInterval: "int32",\n            willDelayInterval: "int32",\n            receiveMaximum: "int16",\n            maximumPacketSize: "int32",\n            topicAliasMaximum: "int16",\n            requestResponseInformation: "byte",\n            requestProblemInformation: "byte",\n            userProperties: "pair",\n            authenticationMethod: "string",\n            authenticationData: "binary",\n            payloadFormatIndicator: "byte",\n            messageExpiryInterval: "int32",\n            contentType: "string",\n            responseTopic: "string",\n            correlationData: "binary",\n            maximumQoS: "int8",\n            retainAvailable: "byte",\n            assignedClientIdentifier: "string",\n            reasonString: "string",\n            wildcardSubscriptionAvailable: "byte",\n            subscriptionIdentifiersAvailable: "byte",\n            sharedSubscriptionAvailable: "byte",\n            serverKeepAlive: "int16",\n            responseInformation: "string",\n            serverReference: "string",\n            topicAlias: "int16",\n            subscriptionIdentifier: "var"\n          }, r.PUBLISH_HEADER = n("publish"), r.SUBSCRIBE_HEADER = n("subscribe"), r.SUBSCRIBE_OPTIONS_QOS_MASK = 3, r.SUBSCRIBE_OPTIONS_NL_MASK = 1, r.SUBSCRIBE_OPTIONS_NL_SHIFT = 2, r.SUBSCRIBE_OPTIONS_RAP_MASK = 1, r.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3, r.SUBSCRIBE_OPTIONS_RH_MASK = 3, r.SUBSCRIBE_OPTIONS_RH_SHIFT = 4, r.SUBSCRIBE_OPTIONS_RH = [0, 16, 32], r.SUBSCRIBE_OPTIONS_NL = 4, r.SUBSCRIBE_OPTIONS_RAP = 8, r.SUBSCRIBE_OPTIONS_QOS = [0, 1, 2], r.UNSUBSCRIBE_HEADER = n("unsubscribe"), r.ACKS = {\n            unsuback: n("unsuback"),\n            puback: n("puback"),\n            pubcomp: n("pubcomp"),\n            pubrel: n("pubrel"),\n            pubrec: n("pubrec")\n          }, r.SUBACK_HEADER = e.from([r.codes.suback << r.CMD_SHIFT]), r.VERSION3 = e.from([3]), r.VERSION4 = e.from([4]), r.VERSION5 = e.from([5]), r.VERSION131 = e.from([131]), r.VERSION132 = e.from([132]), r.QOS = [0, 1, 2].map(t => e.from([t])), r.EMPTY = {\n            pingreq: e.from([r.codes.pingreq << 4, 0]),\n            pingresp: e.from([r.codes.pingresp << 4, 0]),\n            disconnect: e.from([r.codes.disconnect << 4, 0])\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    39: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          const n = e("./writeToStream"),\n                i = e("events");\n\n          class o extends i {\n            constructor() {\n              super(), this._array = new Array(20), this._i = 0;\n            }\n\n            write(e) {\n              return this._array[this._i++] = e, !0;\n            }\n\n            concat() {\n              let e = 0;\n              const t = new Array(this._array.length),\n                    n = this._array;\n              let i,\n                  o = 0;\n\n              for (i = 0; i < n.length && void 0 !== n[i]; i++) "string" != typeof n[i] ? t[i] = n[i].length : t[i] = r.byteLength(n[i]), e += t[i];\n\n              const s = r.allocUnsafe(e);\n\n              for (i = 0; i < n.length && void 0 !== n[i]; i++) "string" != typeof n[i] ? (n[i].copy(s, o), o += t[i]) : (s.write(n[i], o), o += t[i]);\n\n              return s;\n            }\n\n          }\n\n          t.exports = function (e, t) {\n            const r = new o();\n            return n(e, r, t), r.concat();\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "./writeToStream": 44,\n      buffer: 17,\n      events: 22\n    }],\n    40: [function (e, t, r) {\n      r.parser = e("./parser").parser, r.generate = e("./generate"), r.writeToStream = e("./writeToStream");\n    }, {\n      "./generate": 39,\n      "./parser": 43,\n      "./writeToStream": 44\n    }],\n    41: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          const r = 65536,\n                n = {},\n                i = e.isBuffer(e.from([1, 2]).subarray(0, 1));\n\n          function o(t) {\n            const r = e.allocUnsafe(2);\n            return r.writeUInt8(t >> 8, 0), r.writeUInt8(255 & t, 1), r;\n          }\n\n          t.exports = {\n            cache: n,\n            generateCache: function () {\n              for (let e = 0; e < r; e++) n[e] = o(e);\n            },\n            generateNumber: o,\n            genBufVariableByteInt: function (t) {\n              let r = 0,\n                  n = 0;\n              const o = e.allocUnsafe(4);\n\n              do {\n                r = t % 128 | 0, (t = t / 128 | 0) > 0 && (r |= 128), o.writeUInt8(r, n++);\n              } while (t > 0 && n < 4);\n\n              return t > 0 && (n = 0), i ? o.subarray(0, n) : o.slice(0, n);\n            },\n            generate4ByteBuffer: function (t) {\n              const r = e.allocUnsafe(4);\n              return r.writeUInt32BE(t, 0), r;\n            }\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    42: [function (e, t, r) {\n      t.exports = class {\n        constructor() {\n          this.cmd = null, this.retain = !1, this.qos = 0, this.dup = !1, this.length = -1, this.topic = null, this.payload = null;\n        }\n\n      };\n    }, {}],\n    43: [function (e, t, r) {\n      const n = e("bl"),\n            i = e("events"),\n            o = e("./packet"),\n            s = e("./constants"),\n            a = e("debug")("mqtt-packet:parser");\n\n      class l extends i {\n        constructor() {\n          super(), this.parser = this.constructor.parser;\n        }\n\n        static parser(e) {\n          return this instanceof l ? (this.settings = e || {}, this._states = ["_parseHeader", "_parseLength", "_parsePayload", "_newPacket"], this._resetState(), this) : new l().parser(e);\n        }\n\n        _resetState() {\n          a("_resetState: resetting packet, error, _list, and _stateCounter"), this.packet = new o(), this.error = null, this._list = n(), this._stateCounter = 0;\n        }\n\n        parse(e) {\n          for (this.error && this._resetState(), this._list.append(e), a("parse: current state: %s", this._states[this._stateCounter]); (-1 !== this.packet.length || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error;) this._stateCounter++, a("parse: state complete. _stateCounter is now: %d", this._stateCounter), a("parse: packet.length: %d, buffer list length: %d", this.packet.length, this._list.length), this._stateCounter >= this._states.length && (this._stateCounter = 0);\n\n          return a("parse: exited while loop. packet: %d, buffer list length: %d", this.packet.length, this._list.length), this._list.length;\n        }\n\n        _parseHeader() {\n          const e = this._list.readUInt8(0);\n\n          return this.packet.cmd = s.types[e >> s.CMD_SHIFT], this.packet.retain = 0 != (e & s.RETAIN_MASK), this.packet.qos = e >> s.QOS_SHIFT & s.QOS_MASK, this.packet.dup = 0 != (e & s.DUP_MASK), a("_parseHeader: packet: %o", this.packet), this._list.consume(1), !0;\n        }\n\n        _parseLength() {\n          const e = this._parseVarByteNum(!0);\n\n          return e && (this.packet.length = e.value, this._list.consume(e.bytes)), a("_parseLength %d", e.value), !!e;\n        }\n\n        _parsePayload() {\n          a("_parsePayload: payload %O", this._list);\n          let e = !1;\n\n          if (0 === this.packet.length || this._list.length >= this.packet.length) {\n            switch (this._pos = 0, this.packet.cmd) {\n              case "connect":\n                this._parseConnect();\n\n                break;\n\n              case "connack":\n                this._parseConnack();\n\n                break;\n\n              case "publish":\n                this._parsePublish();\n\n                break;\n\n              case "puback":\n              case "pubrec":\n              case "pubrel":\n              case "pubcomp":\n                this._parseConfirmation();\n\n                break;\n\n              case "subscribe":\n                this._parseSubscribe();\n\n                break;\n\n              case "suback":\n                this._parseSuback();\n\n                break;\n\n              case "unsubscribe":\n                this._parseUnsubscribe();\n\n                break;\n\n              case "unsuback":\n                this._parseUnsuback();\n\n                break;\n\n              case "pingreq":\n              case "pingresp":\n                break;\n\n              case "disconnect":\n                this._parseDisconnect();\n\n                break;\n\n              case "auth":\n                this._parseAuth();\n\n                break;\n\n              default:\n                this._emitError(new Error("Not supported"));\n\n            }\n\n            e = !0;\n          }\n\n          return a("_parsePayload complete result: %s", e), e;\n        }\n\n        _parseConnect() {\n          let e, t, r, n;\n          a("_parseConnect");\n\n          const i = {},\n                o = this.packet,\n                l = this._parseString();\n\n          if (null === l) return this._emitError(new Error("Cannot parse protocolId"));\n          if ("MQTT" !== l && "MQIsdp" !== l) return this._emitError(new Error("Invalid protocolId"));\n          if (o.protocolId = l, this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));\n          if (o.protocolVersion = this._list.readUInt8(this._pos), o.protocolVersion >= 128 && (o.bridgeMode = !0, o.protocolVersion = o.protocolVersion - 128), 3 !== o.protocolVersion && 4 !== o.protocolVersion && 5 !== o.protocolVersion) return this._emitError(new Error("Invalid protocol version"));\n          if (this._pos++, this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));\n          if (i.username = this._list.readUInt8(this._pos) & s.USERNAME_MASK, i.password = this._list.readUInt8(this._pos) & s.PASSWORD_MASK, i.will = this._list.readUInt8(this._pos) & s.WILL_FLAG_MASK, i.will && (o.will = {}, o.will.retain = 0 != (this._list.readUInt8(this._pos) & s.WILL_RETAIN_MASK), o.will.qos = (this._list.readUInt8(this._pos) & s.WILL_QOS_MASK) >> s.WILL_QOS_SHIFT), o.clean = 0 != (this._list.readUInt8(this._pos) & s.CLEAN_SESSION_MASK), this._pos++, o.keepalive = this._parseNum(), -1 === o.keepalive) return this._emitError(new Error("Packet too short"));\n\n          if (5 === o.protocolVersion) {\n            const e = this._parseProperties();\n\n            Object.getOwnPropertyNames(e).length && (o.properties = e);\n          }\n\n          const u = this._parseString();\n\n          if (null === u) return this._emitError(new Error("Packet too short"));\n\n          if (o.clientId = u, a("_parseConnect: packet.clientId: %s", o.clientId), i.will) {\n            if (5 === o.protocolVersion) {\n              const e = this._parseProperties();\n\n              Object.getOwnPropertyNames(e).length && (o.will.properties = e);\n            }\n\n            if (null === (e = this._parseString())) return this._emitError(new Error("Cannot parse will topic"));\n            if (o.will.topic = e, a("_parseConnect: packet.will.topic: %s", o.will.topic), null === (t = this._parseBuffer())) return this._emitError(new Error("Cannot parse will payload"));\n            o.will.payload = t, a("_parseConnect: packet.will.paylaod: %s", o.will.payload);\n          }\n\n          if (i.username) {\n            if (null === (n = this._parseString())) return this._emitError(new Error("Cannot parse username"));\n            o.username = n, a("_parseConnect: packet.username: %s", o.username);\n          }\n\n          if (i.password) {\n            if (null === (r = this._parseBuffer())) return this._emitError(new Error("Cannot parse password"));\n            o.password = r;\n          }\n\n          return this.settings = o, a("_parseConnect: complete"), o;\n        }\n\n        _parseConnack() {\n          a("_parseConnack");\n          const e = this.packet;\n          if (this._list.length < 1) return null;\n          if (e.sessionPresent = !!(this._list.readUInt8(this._pos++) & s.SESSIONPRESENT_MASK), 5 === this.settings.protocolVersion) this._list.length >= 2 ? e.reasonCode = this._list.readUInt8(this._pos++) : e.reasonCode = 0;else {\n            if (this._list.length < 2) return null;\n            e.returnCode = this._list.readUInt8(this._pos++);\n          }\n          if (-1 === e.returnCode || -1 === e.reasonCode) return this._emitError(new Error("Cannot parse return code"));\n\n          if (5 === this.settings.protocolVersion) {\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          a("_parseConnack: complete");\n        }\n\n        _parsePublish() {\n          a("_parsePublish");\n          const e = this.packet;\n          if (e.topic = this._parseString(), null === e.topic) return this._emitError(new Error("Cannot parse topic"));\n\n          if (!(e.qos > 0) || this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            e.payload = this._list.slice(this._pos, e.length), a("_parsePublish: payload from buffer list: %o", e.payload);\n          }\n        }\n\n        _parseSubscribe() {\n          a("_parseSubscribe");\n          const e = this.packet;\n          let t, r, n, i, o, l, u;\n          if (1 !== e.qos) return this._emitError(new Error("Wrong subscribe header"));\n\n          if (e.subscriptions = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < e.length;) {\n              if (null === (t = this._parseString())) return this._emitError(new Error("Cannot parse topic"));\n              if (this._pos >= e.length) return this._emitError(new Error("Malformed Subscribe Payload"));\n              n = (r = this._parseByte()) & s.SUBSCRIBE_OPTIONS_QOS_MASK, l = 0 != (r >> s.SUBSCRIBE_OPTIONS_NL_SHIFT & s.SUBSCRIBE_OPTIONS_NL_MASK), o = 0 != (r >> s.SUBSCRIBE_OPTIONS_RAP_SHIFT & s.SUBSCRIBE_OPTIONS_RAP_MASK), i = r >> s.SUBSCRIBE_OPTIONS_RH_SHIFT & s.SUBSCRIBE_OPTIONS_RH_MASK, u = {\n                topic: t,\n                qos: n\n              }, 5 === this.settings.protocolVersion ? (u.nl = l, u.rap = o, u.rh = i) : this.settings.bridgeMode && (u.rh = 0, u.rap = !0, u.nl = !0), a("_parseSubscribe: push subscription `%s` to subscription", u), e.subscriptions.push(u);\n            }\n          }\n        }\n\n        _parseSuback() {\n          a("_parseSuback");\n          const e = this.packet;\n\n          if (this.packet.granted = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < this.packet.length;) this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n\n        _parseUnsubscribe() {\n          a("_parseUnsubscribe");\n          const e = this.packet;\n\n          if (e.unsubscriptions = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < e.length;) {\n              const t = this._parseString();\n\n              if (null === t) return this._emitError(new Error("Cannot parse topic"));\n              a("_parseUnsubscribe: push topic `%s` to unsubscriptions", t), e.unsubscriptions.push(t);\n            }\n          }\n        }\n\n        _parseUnsuback() {\n          a("_parseUnsuback");\n          const e = this.packet;\n          if (!this._parseMessageId()) return this._emitError(new Error("Cannot parse messageId"));\n\n          if (5 === this.settings.protocolVersion) {\n            const t = this._parseProperties();\n\n            for (Object.getOwnPropertyNames(t).length && (e.properties = t), e.granted = []; this._pos < this.packet.length;) this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n\n        _parseConfirmation() {\n          a("_parseConfirmation: packet.cmd: `%s`", this.packet.cmd);\n          const e = this.packet;\n\n          if (this._parseMessageId(), 5 === this.settings.protocolVersion && (e.length > 2 ? (e.reasonCode = this._parseByte(), a("_parseConfirmation: packet.reasonCode `%d`", e.reasonCode)) : e.reasonCode = 0, e.length > 3)) {\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          return !0;\n        }\n\n        _parseDisconnect() {\n          const e = this.packet;\n\n          if (a("_parseDisconnect"), 5 === this.settings.protocolVersion) {\n            this._list.length > 0 ? e.reasonCode = this._parseByte() : e.reasonCode = 0;\n\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          return a("_parseDisconnect result: true"), !0;\n        }\n\n        _parseAuth() {\n          a("_parseAuth");\n          const e = this.packet;\n          if (5 !== this.settings.protocolVersion) return this._emitError(new Error("Not supported auth packet for this version MQTT"));\n          e.reasonCode = this._parseByte();\n\n          const t = this._parseProperties();\n\n          return Object.getOwnPropertyNames(t).length && (e.properties = t), a("_parseAuth: result: true"), !0;\n        }\n\n        _parseMessageId() {\n          const e = this.packet;\n          return e.messageId = this._parseNum(), null === e.messageId ? (this._emitError(new Error("Cannot parse messageId")), !1) : (a("_parseMessageId: packet.messageId %d", e.messageId), !0);\n        }\n\n        _parseString(e) {\n          const t = this._parseNum(),\n                r = t + this._pos;\n\n          if (-1 === t || r > this._list.length || r > this.packet.length) return null;\n\n          const n = this._list.toString("utf8", this._pos, r);\n\n          return this._pos += t, a("_parseString: result: %s", n), n;\n        }\n\n        _parseStringPair() {\n          return a("_parseStringPair"), {\n            name: this._parseString(),\n            value: this._parseString()\n          };\n        }\n\n        _parseBuffer() {\n          const e = this._parseNum(),\n                t = e + this._pos;\n\n          if (-1 === e || t > this._list.length || t > this.packet.length) return null;\n\n          const r = this._list.slice(this._pos, t);\n\n          return this._pos += e, a("_parseBuffer: result: %o", r), r;\n        }\n\n        _parseNum() {\n          if (this._list.length - this._pos < 2) return -1;\n\n          const e = this._list.readUInt16BE(this._pos);\n\n          return this._pos += 2, a("_parseNum: result: %s", e), e;\n        }\n\n        _parse4ByteNum() {\n          if (this._list.length - this._pos < 4) return -1;\n\n          const e = this._list.readUInt32BE(this._pos);\n\n          return this._pos += 4, a("_parse4ByteNum: result: %s", e), e;\n        }\n\n        _parseVarByteNum(e) {\n          a("_parseVarByteNum");\n          let t,\n              r = 0,\n              n = 1,\n              i = 0,\n              o = !1;\n          const l = this._pos ? this._pos : 0;\n\n          for (; r < 4 && l + r < this._list.length;) {\n            if (i += n * ((t = this._list.readUInt8(l + r++)) & s.VARBYTEINT_MASK), n *= 128, 0 == (t & s.VARBYTEINT_FIN_MASK)) {\n              o = !0;\n              break;\n            }\n\n            if (this._list.length <= r) break;\n          }\n\n          return !o && 4 === r && this._list.length >= r && this._emitError(new Error("Invalid variable byte integer")), l && (this._pos += r), a("_parseVarByteNum: result: %o", o = !!o && (e ? {\n            bytes: r,\n            value: i\n          } : i)), o;\n        }\n\n        _parseByte() {\n          let e;\n          return this._pos < this._list.length && (e = this._list.readUInt8(this._pos), this._pos++), a("_parseByte: result: %o", e), e;\n        }\n\n        _parseByType(e) {\n          switch (a("_parseByType: type: %s", e), e) {\n            case "byte":\n              return 0 !== this._parseByte();\n\n            case "int8":\n              return this._parseByte();\n\n            case "int16":\n              return this._parseNum();\n\n            case "int32":\n              return this._parse4ByteNum();\n\n            case "var":\n              return this._parseVarByteNum();\n\n            case "string":\n              return this._parseString();\n\n            case "pair":\n              return this._parseStringPair();\n\n            case "binary":\n              return this._parseBuffer();\n          }\n        }\n\n        _parseProperties() {\n          a("_parseProperties");\n\n          const e = this._parseVarByteNum(),\n                t = this._pos + e,\n                r = {};\n\n          for (; this._pos < t;) {\n            const e = this._parseByte();\n\n            if (!e) return this._emitError(new Error("Cannot parse property code type")), !1;\n            const t = s.propertiesCodes[e];\n            if (!t) return this._emitError(new Error("Unknown property")), !1;\n            if ("userProperties" !== t) r[t] ? Array.isArray(r[t]) ? r[t].push(this._parseByType(s.propertiesTypes[t])) : (r[t] = [r[t]], r[t].push(this._parseByType(s.propertiesTypes[t]))) : r[t] = this._parseByType(s.propertiesTypes[t]);else {\n              r[t] || (r[t] = Object.create(null));\n\n              const e = this._parseByType(s.propertiesTypes[t]);\n\n              if (r[t][e.name]) {\n                if (Array.isArray(r[t][e.name])) r[t][e.name].push(e.value);else {\n                  const n = r[t][e.name];\n                  r[t][e.name] = [n], r[t][e.name].push(e.value);\n                }\n              } else r[t][e.name] = e.value;\n            }\n          }\n\n          return r;\n        }\n\n        _newPacket() {\n          return a("_newPacket"), this.packet && (this._list.consume(this.packet.length), a("_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d", this.packet.cmd, this.packet.payload, this.packet.length), this.emit("packet", this.packet)), a("_newPacket: new packet"), this.packet = new o(), this._pos = 0, !0;\n        }\n\n        _emitError(e) {\n          a("_emitError"), this.error = e, this.emit("error", e);\n        }\n\n      }\n\n      t.exports = l;\n    }, {\n      "./constants": 38,\n      "./packet": 42,\n      bl: 15,\n      debug: 18,\n      events: 22\n    }],\n    44: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          const n = e("./constants"),\n                i = r.allocUnsafe(0),\n                o = r.from([0]),\n                s = e("./numbers"),\n                a = e("process-nextick-args").nextTick,\n                l = e("debug")("mqtt-packet:writeToStream"),\n                u = s.cache,\n                c = s.generateNumber,\n                h = s.generateCache,\n                f = s.genBufVariableByteInt,\n                p = s.generate4ByteBuffer;\n          let d = k,\n              g = !0;\n\n          function y(e, t, s) {\n            switch (l("generate called"), t.cork && (t.cork(), a(b, t)), g && (g = !1, h()), l("generate: packet.cmd: %s", e.cmd), e.cmd) {\n              case "connect":\n                return function (e, t, i) {\n                  const o = e || {},\n                        s = o.protocolId || "MQTT";\n                  let a = o.protocolVersion || 4;\n                  const l = o.will;\n                  let u = o.clean;\n                  const c = o.keepalive || 0,\n                        h = o.clientId || "",\n                        f = o.username,\n                        p = o.password,\n                        g = o.properties;\n                  void 0 === u && (u = !0);\n                  let y = 0;\n                  if (!s || "string" != typeof s && !r.isBuffer(s)) return t.emit("error", new Error("Invalid protocolId")), !1;\n                  y += s.length + 2;\n                  if (3 !== a && 4 !== a && 5 !== a) return t.emit("error", new Error("Invalid protocol version")), !1;\n                  y += 1;\n                  if (("string" == typeof h || r.isBuffer(h)) && (h || a >= 4) && (h || u)) y += r.byteLength(h) + 2;else {\n                    if (a < 4) return t.emit("error", new Error("clientId must be supplied before 3.1.1")), !1;\n                    if (1 * u == 0) return t.emit("error", new Error("clientId must be given if cleanSession set to 0")), !1;\n                  }\n                  if ("number" != typeof c || c < 0 || c > 65535 || c % 1 != 0) return t.emit("error", new Error("Invalid keepalive")), !1;\n                  y += 2;\n\n                  if (y += 1, 5 === a) {\n                    var b = C(t, g);\n                    if (!b) return !1;\n                    y += b.length;\n                  }\n\n                  if (l) {\n                    if ("object" != typeof l) return t.emit("error", new Error("Invalid will")), !1;\n                    if (!l.topic || "string" != typeof l.topic) return t.emit("error", new Error("Invalid will topic")), !1;\n\n                    if (y += r.byteLength(l.topic) + 2, y += 2, l.payload) {\n                      if (!(l.payload.length >= 0)) return t.emit("error", new Error("Invalid will payload")), !1;\n                      "string" == typeof l.payload ? y += r.byteLength(l.payload) : y += l.payload.length;\n                    }\n\n                    var m = {};\n\n                    if (5 === a) {\n                      if (!(m = C(t, l.properties))) return !1;\n                      y += m.length;\n                    }\n                  }\n\n                  let _ = !1;\n\n                  if (null != f) {\n                    if (!P(f)) return t.emit("error", new Error("Invalid username")), !1;\n                    _ = !0, y += r.byteLength(f) + 2;\n                  }\n\n                  if (null != p) {\n                    if (!_) return t.emit("error", new Error("Username is required to use password")), !1;\n                    if (!P(p)) return t.emit("error", new Error("Invalid password")), !1;\n                    y += I(p) + 2;\n                  }\n\n                  t.write(n.CONNECT_HEADER), v(t, y), E(t, s), o.bridgeMode && (a += 128);\n                  t.write(131 === a ? n.VERSION131 : 132 === a ? n.VERSION132 : 4 === a ? n.VERSION4 : 5 === a ? n.VERSION5 : n.VERSION3);\n                  let k = 0;\n                  k |= null != f ? n.USERNAME_MASK : 0, k |= null != p ? n.PASSWORD_MASK : 0, k |= l && l.retain ? n.WILL_RETAIN_MASK : 0, k |= l && l.qos ? l.qos << n.WILL_QOS_SHIFT : 0, k |= l ? n.WILL_FLAG_MASK : 0, k |= u ? n.CLEAN_SESSION_MASK : 0, t.write(r.from([k])), d(t, c), 5 === a && b.write();\n                  E(t, h), l && (5 === a && m.write(), w(t, l.topic), E(t, l.payload));\n                  null != f && E(t, f);\n                  null != p && E(t, p);\n                  return !0;\n                }(e, t);\n\n              case "connack":\n                return function (e, t, i) {\n                  const s = i ? i.protocolVersion : 4,\n                        a = e || {},\n                        l = 5 === s ? a.reasonCode : a.returnCode,\n                        u = a.properties;\n                  let c = 2;\n                  if ("number" != typeof l) return t.emit("error", new Error("Invalid return code")), !1;\n                  let h = null;\n\n                  if (5 === s) {\n                    if (!(h = C(t, u))) return !1;\n                    c += h.length;\n                  }\n\n                  t.write(n.CONNACK_HEADER), v(t, c), t.write(a.sessionPresent ? n.SESSIONPRESENT_HEADER : o), t.write(r.from([l])), null != h && h.write();\n                  return !0;\n                }(e, t, s);\n\n              case "publish":\n                return function (e, t, o) {\n                  l("publish: packet: %o", e);\n                  const s = o ? o.protocolVersion : 4,\n                        a = e || {},\n                        u = a.qos || 0,\n                        c = a.retain ? n.RETAIN_MASK : 0,\n                        h = a.topic,\n                        f = a.payload || i,\n                        p = a.messageId,\n                        g = a.properties;\n                  let y = 0;\n                  if ("string" == typeof h) y += r.byteLength(h) + 2;else {\n                    if (!r.isBuffer(h)) return t.emit("error", new Error("Invalid topic")), !1;\n                    y += h.length + 2;\n                  }\n                  r.isBuffer(f) ? y += f.length : y += r.byteLength(f);\n                  if (u && "number" != typeof p) return t.emit("error", new Error("Invalid messageId")), !1;\n                  u && (y += 2);\n                  let b = null;\n\n                  if (5 === s) {\n                    if (!(b = C(t, g))) return !1;\n                    y += b.length;\n                  }\n\n                  t.write(n.PUBLISH_HEADER[u][a.dup ? 1 : 0][c ? 1 : 0]), v(t, y), d(t, I(h)), t.write(h), u > 0 && d(t, p);\n                  null != b && b.write();\n                  return l("publish: payload: %o", f), t.write(f);\n                }(e, t, s);\n\n              case "puback":\n              case "pubrec":\n              case "pubrel":\n              case "pubcomp":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.cmd || "puback",\n                        l = s.messageId,\n                        u = s.dup && "pubrel" === a ? n.DUP_MASK : 0;\n                  let c = 0;\n                  const h = s.reasonCode,\n                        f = s.properties;\n                  let p = 5 === o ? 3 : 2;\n                  "pubrel" === a && (c = 1);\n                  if ("number" != typeof l) return t.emit("error", new Error("Invalid messageId")), !1;\n                  let g = null;\n\n                  if (5 === o && "object" == typeof f) {\n                    if (!(g = T(t, f, i, p))) return !1;\n                    p += g.length;\n                  }\n\n                  t.write(n.ACKS[a][c][u][0]), v(t, p), d(t, l), 5 === o && t.write(r.from([h]));\n                  null !== g && g.write();\n                  return !0;\n                }(e, t, s);\n\n              case "subscribe":\n                return function (e, t, i) {\n                  l("subscribe: packet: ");\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.dup ? n.DUP_MASK : 0,\n                        u = s.messageId,\n                        c = s.subscriptions,\n                        h = s.properties;\n                  let f = 0;\n                  if ("number" != typeof u) return t.emit("error", new Error("Invalid messageId")), !1;\n                  f += 2;\n                  let p = null;\n\n                  if (5 === o) {\n                    if (!(p = C(t, h))) return !1;\n                    f += p.length;\n                  }\n\n                  if ("object" != typeof c || !c.length) return t.emit("error", new Error("Invalid subscriptions")), !1;\n\n                  for (let e = 0; e < c.length; e += 1) {\n                    const n = c[e].topic,\n                          i = c[e].qos;\n                    if ("string" != typeof n) return t.emit("error", new Error("Invalid subscriptions - invalid topic")), !1;\n                    if ("number" != typeof i) return t.emit("error", new Error("Invalid subscriptions - invalid qos")), !1;\n\n                    if (5 === o) {\n                      const r = c[e].nl || !1;\n                      if ("boolean" != typeof r) return t.emit("error", new Error("Invalid subscriptions - invalid No Local")), !1;\n                      const n = c[e].rap || !1;\n                      if ("boolean" != typeof n) return t.emit("error", new Error("Invalid subscriptions - invalid Retain as Published")), !1;\n                      const i = c[e].rh || 0;\n                      if ("number" != typeof i || i > 2) return t.emit("error", new Error("Invalid subscriptions - invalid Retain Handling")), !1;\n                    }\n\n                    f += r.byteLength(n) + 2 + 1;\n                  }\n\n                  l("subscribe: writing to stream: %o", n.SUBSCRIBE_HEADER), t.write(n.SUBSCRIBE_HEADER[1][a ? 1 : 0][0]), v(t, f), d(t, u), null !== p && p.write();\n                  let g = !0;\n\n                  for (const e of c) {\n                    const i = e.topic,\n                          s = e.qos,\n                          a = +e.nl,\n                          l = +e.rap,\n                          u = e.rh;\n                    let c;\n                    w(t, i), c = n.SUBSCRIBE_OPTIONS_QOS[s], 5 === o && (c |= a ? n.SUBSCRIBE_OPTIONS_NL : 0, c |= l ? n.SUBSCRIBE_OPTIONS_RAP : 0, c |= u ? n.SUBSCRIBE_OPTIONS_RH[u] : 0), g = t.write(r.from([c]));\n                  }\n\n                  return g;\n                }(e, t, s);\n\n              case "suback":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.granted,\n                        u = s.properties;\n                  let c = 0;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n                  c += 2;\n                  if ("object" != typeof l || !l.length) return t.emit("error", new Error("Invalid qos vector")), !1;\n\n                  for (let e = 0; e < l.length; e += 1) {\n                    if ("number" != typeof l[e]) return t.emit("error", new Error("Invalid qos vector")), !1;\n                    c += 1;\n                  }\n\n                  let h = null;\n\n                  if (5 === o) {\n                    if (!(h = T(t, u, i, c))) return !1;\n                    c += h.length;\n                  }\n\n                  t.write(n.SUBACK_HEADER), v(t, c), d(t, a), null !== h && h.write();\n                  return t.write(r.from(l));\n                }(e, t, s);\n\n              case "unsubscribe":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.dup ? n.DUP_MASK : 0,\n                        u = s.unsubscriptions,\n                        c = s.properties;\n                  let h = 0;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n                  h += 2;\n                  if ("object" != typeof u || !u.length) return t.emit("error", new Error("Invalid unsubscriptions")), !1;\n\n                  for (let e = 0; e < u.length; e += 1) {\n                    if ("string" != typeof u[e]) return t.emit("error", new Error("Invalid unsubscriptions")), !1;\n                    h += r.byteLength(u[e]) + 2;\n                  }\n\n                  let f = null;\n\n                  if (5 === o) {\n                    if (!(f = C(t, c))) return !1;\n                    h += f.length;\n                  }\n\n                  t.write(n.UNSUBSCRIBE_HEADER[1][l ? 1 : 0][0]), v(t, h), d(t, a), null !== f && f.write();\n                  let p = !0;\n\n                  for (let e = 0; e < u.length; e++) p = w(t, u[e]);\n\n                  return p;\n                }(e, t, s);\n\n              case "unsuback":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.dup ? n.DUP_MASK : 0,\n                        u = s.granted,\n                        c = s.properties,\n                        h = s.cmd;\n                  let f = 2;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n\n                  if (5 === o) {\n                    if ("object" != typeof u || !u.length) return t.emit("error", new Error("Invalid qos vector")), !1;\n\n                    for (let e = 0; e < u.length; e += 1) {\n                      if ("number" != typeof u[e]) return t.emit("error", new Error("Invalid qos vector")), !1;\n                      f += 1;\n                    }\n                  }\n\n                  let p = null;\n\n                  if (5 === o) {\n                    if (!(p = T(t, c, i, f))) return !1;\n                    f += p.length;\n                  }\n\n                  t.write(n.ACKS[h][0][l][0]), v(t, f), d(t, a), null !== p && p.write();\n                  5 === o && t.write(r.from(u));\n                  return !0;\n                }(e, t, s);\n\n              case "pingreq":\n              case "pingresp":\n                return function (e, t, r) {\n                  return t.write(n.EMPTY[e.cmd]);\n                }(e, t);\n\n              case "disconnect":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.reasonCode,\n                        l = s.properties;\n                  let u = 5 === o ? 1 : 0,\n                      c = null;\n\n                  if (5 === o) {\n                    if (!(c = T(t, l, i, u))) return !1;\n                    u += c.length;\n                  }\n\n                  t.write(r.from([n.codes.disconnect << 4])), v(t, u), 5 === o && t.write(r.from([a]));\n                  null !== c && c.write();\n                  return !0;\n                }(e, t, s);\n\n              case "auth":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.reasonCode,\n                        l = s.properties;\n                  let u = 5 === o ? 1 : 0;\n                  5 !== o && t.emit("error", new Error("Invalid mqtt version for auth packet"));\n                  const c = T(t, l, i, u);\n                  if (!c) return !1;\n                  u += c.length, t.write(r.from([n.codes.auth << 4])), v(t, u), t.write(r.from([a])), null !== c && c.write();\n                  return !0;\n                }(e, t, s);\n\n              default:\n                return t.emit("error", new Error("Unknown command")), !1;\n            }\n          }\n\n          function b(e) {\n            e.uncork();\n          }\n\n          Object.defineProperty(y, "cacheNumbers", {\n            get: () => d === k,\n\n            set(e) {\n              e ? (u && 0 !== Object.keys(u).length || (g = !0), d = k) : (g = !1, d = S);\n            }\n\n          });\n          const m = {};\n\n          function v(e, t) {\n            if (t > n.VARBYTEINT_MAX) return e.emit("error", new Error(`Invalid variable byte integer: ${t}`)), !1;\n            let r = m[t];\n            return r || (r = f(t), t < 16384 && (m[t] = r)), l("writeVarByteInt: writing to stream: %o", r), e.write(r);\n          }\n\n          function w(e, t) {\n            const n = r.byteLength(t);\n            return d(e, n), l("writeString: %s", t), e.write(t, "utf8");\n          }\n\n          function _(e, t, r) {\n            w(e, t), w(e, r);\n          }\n\n          function k(e, t) {\n            return l("writeNumberCached: number: %d", t), l("writeNumberCached: %o", u[t]), e.write(u[t]);\n          }\n\n          function S(e, t) {\n            const r = c(t);\n            return l("writeNumberGenerated: %o", r), e.write(r);\n          }\n\n          function E(e, t) {\n            "string" == typeof t ? w(e, t) : t ? (d(e, t.length), e.write(t)) : d(e, 0);\n          }\n\n          function C(e, t) {\n            if ("object" != typeof t || null != t.length) return {\n              length: 1,\n\n              write() {\n                A(e, {}, 0);\n              }\n\n            };\n            let i = 0;\n\n            function o(t, i) {\n              let o = 0;\n\n              switch (n.propertiesTypes[t]) {\n                case "byte":\n                  if ("boolean" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 2;\n                  break;\n\n                case "int8":\n                  if ("number" != typeof i || i < 0 || i > 255) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 2;\n                  break;\n\n                case "binary":\n                  if (i && null === i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 1 + r.byteLength(i) + 2;\n                  break;\n\n                case "int16":\n                  if ("number" != typeof i || i < 0 || i > 65535) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 3;\n                  break;\n\n                case "int32":\n                  if ("number" != typeof i || i < 0 || i > 4294967295) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 5;\n                  break;\n\n                case "var":\n                  if ("number" != typeof i || i < 0 || i > 268435455) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 1 + r.byteLength(f(i));\n                  break;\n\n                case "string":\n                  if ("string" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 3 + r.byteLength(i.toString());\n                  break;\n\n                case "pair":\n                  if ("object" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += Object.getOwnPropertyNames(i).reduce((e, t) => {\n                    const n = i[t];\n                    return Array.isArray(n) ? e += n.reduce((e, n) => e += 3 + r.byteLength(t.toString()) + 2 + r.byteLength(n.toString()), 0) : e += 3 + r.byteLength(t.toString()) + 2 + r.byteLength(i[t].toString()), e;\n                  }, 0);\n                  break;\n\n                default:\n                  return e.emit("error", new Error(`Invalid property ${t}: ${i}`)), !1;\n              }\n\n              return o;\n            }\n\n            if (t) for (const e in t) {\n              let r = 0,\n                  n = 0;\n              const s = t[e];\n              if (Array.isArray(s)) for (let t = 0; t < s.length; t++) {\n                if (!(n = o(e, s[t]))) return !1;\n                r += n;\n              } else {\n                if (!(n = o(e, s))) return !1;\n                r = n;\n              }\n              if (!r) return !1;\n              i += r;\n            }\n            return {\n              length: r.byteLength(f(i)) + i,\n\n              write() {\n                A(e, t, i);\n              }\n\n            };\n          }\n\n          function T(e, t, r, n) {\n            const i = ["reasonString", "userProperties"],\n                  o = r && r.properties && r.properties.maximumPacketSize ? r.properties.maximumPacketSize : 0;\n            let s = C(e, t);\n            if (o) for (; n + s.length > o;) {\n              const r = i.shift();\n              if (!r || !t[r]) return !1;\n              delete t[r], s = C(e, t);\n            }\n            return s;\n          }\n\n          function x(e, t, i) {\n            switch (n.propertiesTypes[t]) {\n              case "byte":\n                e.write(r.from([n.properties[t]])), e.write(r.from([+i]));\n                break;\n\n              case "int8":\n                e.write(r.from([n.properties[t]])), e.write(r.from([i]));\n                break;\n\n              case "binary":\n                e.write(r.from([n.properties[t]])), E(e, i);\n                break;\n\n              case "int16":\n                e.write(r.from([n.properties[t]])), d(e, i);\n                break;\n\n              case "int32":\n                e.write(r.from([n.properties[t]])), function (e, t) {\n                  const r = p(t);\n                  l("write4ByteNumber: %o", r), e.write(r);\n                }(e, i);\n                break;\n\n              case "var":\n                e.write(r.from([n.properties[t]])), v(e, i);\n                break;\n\n              case "string":\n                e.write(r.from([n.properties[t]])), w(e, i);\n                break;\n\n              case "pair":\n                Object.getOwnPropertyNames(i).forEach(o => {\n                  const s = i[o];\n                  Array.isArray(s) ? s.forEach(i => {\n                    e.write(r.from([n.properties[t]])), _(e, o.toString(), i.toString());\n                  }) : (e.write(r.from([n.properties[t]])), _(e, o.toString(), s.toString()));\n                });\n                break;\n\n              default:\n                return e.emit("error", new Error(`Invalid property ${t} value: ${i}`)), !1;\n            }\n          }\n\n          function A(e, t, r) {\n            v(e, r);\n\n            for (const r in t) if (Object.prototype.hasOwnProperty.call(t, r) && null !== t[r]) {\n              const n = t[r];\n              if (Array.isArray(n)) for (let t = 0; t < n.length; t++) x(e, r, n[t]);else x(e, r, n);\n            }\n          }\n\n          function I(e) {\n            return e ? e instanceof r ? e.length : r.byteLength(e) : 0;\n          }\n\n          function P(e) {\n            return "string" == typeof e || e instanceof r;\n          }\n\n          t.exports = y;\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "./constants": 38,\n      "./numbers": 41,\n      buffer: 17,\n      debug: 18,\n      "process-nextick-args": 49\n    }],\n    45: [function (e, t, r) {\n      var n = 1e3,\n          i = 60 * n,\n          o = 60 * i,\n          s = 24 * o,\n          a = 7 * s,\n          l = 365.25 * s;\n\n      function u(e, t, r, n) {\n        var i = t >= 1.5 * r;\n        return Math.round(e / r) + " " + n + (i ? "s" : "");\n      }\n\n      t.exports = function (e, t) {\n        t = t || {};\n        var r = typeof e;\n        if ("string" === r && e.length > 0) return function (e) {\n          if ((e = String(e)).length > 100) return;\n          var t = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);\n          if (!t) return;\n          var r = parseFloat(t[1]);\n\n          switch ((t[2] || "ms").toLowerCase()) {\n            case "years":\n            case "year":\n            case "yrs":\n            case "yr":\n            case "y":\n              return r * l;\n\n            case "weeks":\n            case "week":\n            case "w":\n              return r * a;\n\n            case "days":\n            case "day":\n            case "d":\n              return r * s;\n\n            case "hours":\n            case "hour":\n            case "hrs":\n            case "hr":\n            case "h":\n              return r * o;\n\n            case "minutes":\n            case "minute":\n            case "mins":\n            case "min":\n            case "m":\n              return r * i;\n\n            case "seconds":\n            case "second":\n            case "secs":\n            case "sec":\n            case "s":\n              return r * n;\n\n            case "milliseconds":\n            case "millisecond":\n            case "msecs":\n            case "msec":\n            case "ms":\n              return r;\n\n            default:\n              return;\n          }\n        }(e);\n        if ("number" === r && isFinite(e)) return t.long ? function (e) {\n          var t = Math.abs(e);\n          if (t >= s) return u(e, t, s, "day");\n          if (t >= o) return u(e, t, o, "hour");\n          if (t >= i) return u(e, t, i, "minute");\n          if (t >= n) return u(e, t, n, "second");\n          return e + " ms";\n        }(e) : function (e) {\n          var t = Math.abs(e);\n          if (t >= s) return Math.round(e / s) + "d";\n          if (t >= o) return Math.round(e / o) + "h";\n          if (t >= i) return Math.round(e / i) + "m";\n          if (t >= n) return Math.round(e / n) + "s";\n          return e + "ms";\n        }(e);\n        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));\n      };\n    }, {}],\n    46: [function (e, t, r) {\n      const n = e("./lib/number-allocator.js");\n      t.exports.NumberAllocator = n;\n    }, {\n      "./lib/number-allocator.js": 47\n    }],\n    47: [function (e, t, r) {\n      "use strict";\n\n      const n = e("js-sdsl").Set,\n            i = e("debug")("number-allocator:trace"),\n            o = e("debug")("number-allocator:error");\n\n      function s(e, t) {\n        this.low = e, this.high = t;\n      }\n\n      function a(e, t) {\n        if (!(this instanceof a)) return new a(e, t);\n        this.min = e, this.max = t, this.ss = new n([], (e, t) => e.compare(t)), i("Create"), this.clear();\n      }\n\n      s.prototype.equals = function (e) {\n        return this.low === e.low && this.high === e.high;\n      }, s.prototype.compare = function (e) {\n        return this.low < e.low && this.high < e.low ? -1 : e.low < this.low && e.high < this.low ? 1 : 0;\n      }, a.prototype.firstVacant = function () {\n        return 0 === this.ss.size() ? null : this.ss.front().low;\n      }, a.prototype.alloc = function () {\n        if (0 === this.ss.size()) return i("alloc():empty"), null;\n        const e = this.ss.front(),\n              t = e.low;\n        return t + 1 <= e.high ? ++e.low : this.ss.eraseElementByPos(0), i("alloc():" + t), t;\n      }, a.prototype.use = function (e) {\n        const t = new s(e, e),\n              r = this.ss.lowerBound(t);\n\n        if (r) {\n          if (r.equals(t)) return this.ss.eraseElementByValue(r), i("use():" + e), !0;\n          if (r.low > e) return !1;\n          if (r.low === e) return ++r.low, i("use():" + e), !0;\n          if (r.high === e) return --r.high, i("use():" + e), !0;\n          const n = r.low;\n          return r.low = e + 1, this.ss.insert(new s(n, e - 1)), i("use():" + e), !0;\n        }\n\n        return i("use():failed"), !1;\n      }, a.prototype.free = function (e) {\n        if (e < this.min || e > this.max) return void o("free():" + e + " is out of range");\n        const t = new s(e, e),\n              r = this.ss.lowerBound(t);\n\n        if (r) {\n          if (r.low <= e && e <= r.high) return void o("free():" + e + " has already been vacant");\n          if (r === this.ss.front()) e + 1 === r.low ? --r.low : this.ss.insert(t);else {\n            const n = this.ss.reverseLowerBound(t);\n            n.high + 1 === e ? e + 1 === r.low ? (this.ss.eraseElementByValue(n), r.low = n.low) : n.high = e : e + 1 === r.low ? r.low = e : this.ss.insert(t);\n          }\n        } else {\n          if (r === this.ss.front()) return void this.ss.insert(t);\n          const n = this.ss.reverseLowerBound(t);\n          n.high + 1 === e ? n.high = e : this.ss.insert(t);\n        }\n\n        i("free():" + e);\n      }, a.prototype.clear = function () {\n        i("clear()"), this.ss.clear(), this.ss.insert(new s(this.min, this.max));\n      }, a.prototype.intervalCount = function () {\n        return this.ss.size();\n      }, a.prototype.dump = function () {\n        console.log("length:" + this.ss.size());\n\n        for (const e of this.ss) console.log(e);\n      }, t.exports = a;\n    }, {\n      debug: 18,\n      "js-sdsl": 36\n    }],\n    48: [function (e, t, r) {\n      var n = e("wrappy");\n\n      function i(e) {\n        var t = function () {\n          return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));\n        };\n\n        return t.called = !1, t;\n      }\n\n      function o(e) {\n        var t = function () {\n          if (t.called) throw new Error(t.onceError);\n          return t.called = !0, t.value = e.apply(this, arguments);\n        },\n            r = e.name || "Function wrapped with `once`";\n\n        return t.onceError = r + " shouldn\'t be called more than once", t.called = !1, t;\n      }\n\n      t.exports = n(i), t.exports.strict = n(o), i.proto = i(function () {\n        Object.defineProperty(Function.prototype, "once", {\n          value: function () {\n            return i(this);\n          },\n          configurable: !0\n        }), Object.defineProperty(Function.prototype, "onceStrict", {\n          value: function () {\n            return o(this);\n          },\n          configurable: !0\n        });\n      });\n    }, {\n      wrappy: 79\n    }],\n    49: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          void 0 === e || !e.version || 0 === e.version.indexOf("v0.") || 0 === e.version.indexOf("v1.") && 0 !== e.version.indexOf("v1.8.") ? t.exports = {\n            nextTick: function (t, r, n, i) {\n              if ("function" != typeof t) throw new TypeError(\'"callback" argument must be a function\');\n              var o,\n                  s,\n                  a = arguments.length;\n\n              switch (a) {\n                case 0:\n                case 1:\n                  return e.nextTick(t);\n\n                case 2:\n                  return e.nextTick(function () {\n                    t.call(null, r);\n                  });\n\n                case 3:\n                  return e.nextTick(function () {\n                    t.call(null, r, n);\n                  });\n\n                case 4:\n                  return e.nextTick(function () {\n                    t.call(null, r, n, i);\n                  });\n\n                default:\n                  for (o = new Array(a - 1), s = 0; s < o.length;) o[s++] = arguments[s];\n\n                  return e.nextTick(function () {\n                    t.apply(null, o);\n                  });\n              }\n            }\n          } : t.exports = e;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50\n    }],\n    50: [function (e, t, r) {\n      var n,\n          i,\n          o = t.exports = {};\n\n      function s() {\n        throw new Error("setTimeout has not been defined");\n      }\n\n      function a() {\n        throw new Error("clearTimeout has not been defined");\n      }\n\n      function l(e) {\n        if (n === setTimeout) return setTimeout(e, 0);\n        if ((n === s || !n) && setTimeout) return n = setTimeout, setTimeout(e, 0);\n\n        try {\n          return n(e, 0);\n        } catch (t) {\n          try {\n            return n.call(null, e, 0);\n          } catch (t) {\n            return n.call(this, e, 0);\n          }\n        }\n      }\n\n      !function () {\n        try {\n          n = "function" == typeof setTimeout ? setTimeout : s;\n        } catch (e) {\n          n = s;\n        }\n\n        try {\n          i = "function" == typeof clearTimeout ? clearTimeout : a;\n        } catch (e) {\n          i = a;\n        }\n      }();\n      var u,\n          c = [],\n          h = !1,\n          f = -1;\n\n      function p() {\n        h && u && (h = !1, u.length ? c = u.concat(c) : f = -1, c.length && d());\n      }\n\n      function d() {\n        if (!h) {\n          var e = l(p);\n          h = !0;\n\n          for (var t = c.length; t;) {\n            for (u = c, c = []; ++f < t;) u && u[f].run();\n\n            f = -1, t = c.length;\n          }\n\n          u = null, h = !1, function (e) {\n            if (i === clearTimeout) return clearTimeout(e);\n            if ((i === a || !i) && clearTimeout) return i = clearTimeout, clearTimeout(e);\n\n            try {\n              i(e);\n            } catch (t) {\n              try {\n                return i.call(null, e);\n              } catch (t) {\n                return i.call(this, e);\n              }\n            }\n          }(e);\n        }\n      }\n\n      function g(e, t) {\n        this.fun = e, this.array = t;\n      }\n\n      function y() {}\n\n      o.nextTick = function (e) {\n        var t = new Array(arguments.length - 1);\n        if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];\n        c.push(new g(e, t)), 1 !== c.length || h || l(d);\n      }, g.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      }, o.title = "browser", o.browser = !0, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = y, o.addListener = y, o.once = y, o.off = y, o.removeListener = y, o.removeAllListeners = y, o.emit = y, o.prependListener = y, o.prependOnceListener = y, o.listeners = function (e) {\n        return [];\n      }, o.binding = function (e) {\n        throw new Error("process.binding is not supported");\n      }, o.cwd = function () {\n        return "/";\n      }, o.chdir = function (e) {\n        throw new Error("process.chdir is not supported");\n      }, o.umask = function () {\n        return 0;\n      };\n    }, {}],\n    51: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          !function (n) {\n            var i = "object" == typeof r && r && !r.nodeType && r,\n                o = "object" == typeof t && t && !t.nodeType && t,\n                s = "object" == typeof e && e;\n            s.global !== s && s.window !== s && s.self !== s || (n = s);\n            var a,\n                l,\n                u = 2147483647,\n                c = 36,\n                h = 1,\n                f = 26,\n                p = 38,\n                d = 700,\n                g = 72,\n                y = 128,\n                b = "-",\n                m = /^xn--/,\n                v = /[^\\x20-\\x7E]/,\n                w = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n                _ = {\n              overflow: "Overflow: input needs wider integers to process",\n              "not-basic": "Illegal input >= 0x80 (not a basic code point)",\n              "invalid-input": "Invalid input"\n            },\n                k = c - h,\n                S = Math.floor,\n                E = String.fromCharCode;\n\n            function C(e) {\n              throw new RangeError(_[e]);\n            }\n\n            function T(e, t) {\n              for (var r = e.length, n = []; r--;) n[r] = t(e[r]);\n\n              return n;\n            }\n\n            function x(e, t) {\n              var r = e.split("@"),\n                  n = "";\n              return r.length > 1 && (n = r[0] + "@", e = r[1]), n + T((e = e.replace(w, ".")).split("."), t).join(".");\n            }\n\n            function A(e) {\n              for (var t, r, n = [], i = 0, o = e.length; i < o;) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);\n\n              return n;\n            }\n\n            function I(e) {\n              return T(e, function (e) {\n                var t = "";\n                return e > 65535 && (t += E((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += E(e);\n              }).join("");\n            }\n\n            function P(e, t) {\n              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);\n            }\n\n            function O(e, t, r) {\n              var n = 0;\n\n              for (e = r ? S(e / d) : e >> 1, e += S(e / t); e > k * f >> 1; n += c) e = S(e / k);\n\n              return S(n + (k + 1) * e / (e + p));\n            }\n\n            function B(e) {\n              var t,\n                  r,\n                  n,\n                  i,\n                  o,\n                  s,\n                  a,\n                  l,\n                  p,\n                  d,\n                  m,\n                  v = [],\n                  w = e.length,\n                  _ = 0,\n                  k = y,\n                  E = g;\n\n              for ((r = e.lastIndexOf(b)) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && C("not-basic"), v.push(e.charCodeAt(n));\n\n              for (i = r > 0 ? r + 1 : 0; i < w;) {\n                for (o = _, s = 1, a = c; i >= w && C("invalid-input"), ((l = (m = e.charCodeAt(i++)) - 48 < 10 ? m - 22 : m - 65 < 26 ? m - 65 : m - 97 < 26 ? m - 97 : c) >= c || l > S((u - _) / s)) && C("overflow"), _ += l * s, !(l < (p = a <= E ? h : a >= E + f ? f : a - E)); a += c) s > S(u / (d = c - p)) && C("overflow"), s *= d;\n\n                E = O(_ - o, t = v.length + 1, 0 == o), S(_ / t) > u - k && C("overflow"), k += S(_ / t), _ %= t, v.splice(_++, 0, k);\n              }\n\n              return I(v);\n            }\n\n            function R(e) {\n              var t,\n                  r,\n                  n,\n                  i,\n                  o,\n                  s,\n                  a,\n                  l,\n                  p,\n                  d,\n                  m,\n                  v,\n                  w,\n                  _,\n                  k,\n                  T = [];\n\n              for (v = (e = A(e)).length, t = y, r = 0, o = g, s = 0; s < v; ++s) (m = e[s]) < 128 && T.push(E(m));\n\n              for (n = i = T.length, i && T.push(b); n < v;) {\n                for (a = u, s = 0; s < v; ++s) (m = e[s]) >= t && m < a && (a = m);\n\n                for (a - t > S((u - r) / (w = n + 1)) && C("overflow"), r += (a - t) * w, t = a, s = 0; s < v; ++s) if ((m = e[s]) < t && ++r > u && C("overflow"), m == t) {\n                  for (l = r, p = c; !(l < (d = p <= o ? h : p >= o + f ? f : p - o)); p += c) k = l - d, _ = c - d, T.push(E(P(d + k % _, 0))), l = S(k / _);\n\n                  T.push(E(P(l, 0))), o = O(r, w, n == i), r = 0, ++n;\n                }\n\n                ++r, ++t;\n              }\n\n              return T.join("");\n            }\n\n            if (a = {\n              version: "1.4.1",\n              ucs2: {\n                decode: A,\n                encode: I\n              },\n              decode: B,\n              encode: R,\n              toASCII: function (e) {\n                return x(e, function (e) {\n                  return v.test(e) ? "xn--" + R(e) : e;\n                });\n              },\n              toUnicode: function (e) {\n                return x(e, function (e) {\n                  return m.test(e) ? B(e.slice(4).toLowerCase()) : e;\n                });\n              }\n            }, i && o) {\n              if (t.exports == i) o.exports = a;else for (l in a) a.hasOwnProperty(l) && (i[l] = a[l]);\n            } else n.punycode = a;\n          }(this);\n        }).call(this);\n      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {}],\n    52: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        return Object.prototype.hasOwnProperty.call(e, t);\n      }\n\n      t.exports = function (e, t, r, o) {\n        t = t || "&", r = r || "=";\n        var s = {};\n        if ("string" != typeof e || 0 === e.length) return s;\n        var a = /\\+/g;\n        e = e.split(t);\n        var l = 1e3;\n        o && "number" == typeof o.maxKeys && (l = o.maxKeys);\n        var u = e.length;\n        l > 0 && u > l && (u = l);\n\n        for (var c = 0; c < u; ++c) {\n          var h,\n              f,\n              p,\n              d,\n              g = e[c].replace(a, "%20"),\n              y = g.indexOf(r);\n          y >= 0 ? (h = g.substr(0, y), f = g.substr(y + 1)) : (h = g, f = ""), p = decodeURIComponent(h), d = decodeURIComponent(f), n(s, p) ? i(s[p]) ? s[p].push(d) : s[p] = [s[p], d] : s[p] = d;\n        }\n\n        return s;\n      };\n\n      var i = Array.isArray || function (e) {\n        return "[object Array]" === Object.prototype.toString.call(e);\n      };\n    }, {}],\n    53: [function (e, t, r) {\n      "use strict";\n\n      var n = function (e) {\n        switch (typeof e) {\n          case "string":\n            return e;\n\n          case "boolean":\n            return e ? "true" : "false";\n\n          case "number":\n            return isFinite(e) ? e : "";\n\n          default:\n            return "";\n        }\n      };\n\n      t.exports = function (e, t, r, a) {\n        return t = t || "&", r = r || "=", null === e && (e = void 0), "object" == typeof e ? o(s(e), function (s) {\n          var a = encodeURIComponent(n(s)) + r;\n          return i(e[s]) ? o(e[s], function (e) {\n            return a + encodeURIComponent(n(e));\n          }).join(t) : a + encodeURIComponent(n(e[s]));\n        }).join(t) : a ? encodeURIComponent(n(a)) + r + encodeURIComponent(n(e)) : "";\n      };\n\n      var i = Array.isArray || function (e) {\n        return "[object Array]" === Object.prototype.toString.call(e);\n      };\n\n      function o(e, t) {\n        if (e.map) return e.map(t);\n\n        for (var r = [], n = 0; n < e.length; n++) r.push(t(e[n], n));\n\n        return r;\n      }\n\n      var s = Object.keys || function (e) {\n        var t = [];\n\n        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);\n\n        return t;\n      };\n    }, {}],\n    54: [function (e, t, r) {\n      "use strict";\n\n      r.decode = r.parse = e("./decode"), r.encode = r.stringify = e("./encode");\n    }, {\n      "./decode": 52,\n      "./encode": 53\n    }],\n    55: [function (e, t, r) {\n      "use strict";\n\n      var n = {};\n\n      function i(e, t, r) {\n        r || (r = Error);\n\n        var i = function (e) {\n          var r, n;\n\n          function i(r, n, i) {\n            return e.call(this, function (e, r, n) {\n              return "string" == typeof t ? t : t(e, r, n);\n            }(r, n, i)) || this;\n          }\n\n          return n = e, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n, i;\n        }(r);\n\n        i.prototype.name = r.name, i.prototype.code = e, n[e] = i;\n      }\n\n      function o(e, t) {\n        if (Array.isArray(e)) {\n          var r = e.length;\n          return e = e.map(function (e) {\n            return String(e);\n          }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);\n        }\n\n        return "of ".concat(t, " ").concat(String(e));\n      }\n\n      i("ERR_INVALID_OPT_VALUE", function (e, t) {\n        return \'The value "\' + t + \'" is invalid for option "\' + e + \'"\';\n      }, TypeError), i("ERR_INVALID_ARG_TYPE", function (e, t, r) {\n        var n, i, s, a;\n        if ("string" == typeof t && (i = "not ", t.substr(!s || s < 0 ? 0 : +s, i.length) === i) ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be", function (e, t, r) {\n          return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;\n        }(e, " argument")) a = "The ".concat(e, " ").concat(n, " ").concat(o(t, "type"));else {\n          var l = function (e, t, r) {\n            return "number" != typeof r && (r = 0), !(r + t.length > e.length) && -1 !== e.indexOf(t, r);\n          }(e, ".") ? "property" : "argument";\n          a = \'The "\'.concat(e, \'" \').concat(l, " ").concat(n, " ").concat(o(t, "type"));\n        }\n        return a += ". Received type ".concat(typeof r);\n      }, TypeError), i("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), i("ERR_METHOD_NOT_IMPLEMENTED", function (e) {\n        return "The " + e + " method is not implemented";\n      }), i("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), i("ERR_STREAM_DESTROYED", function (e) {\n        return "Cannot call " + e + " after a stream was destroyed";\n      }), i("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), i("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), i("ERR_STREAM_WRITE_AFTER_END", "write after end"), i("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), i("ERR_UNKNOWN_ENCODING", function (e) {\n        return "Unknown encoding: " + e;\n      }, TypeError), i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), t.exports.codes = n;\n    }, {}],\n    56: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          var n = Object.keys || function (e) {\n            var t = [];\n\n            for (var r in e) t.push(r);\n\n            return t;\n          };\n\n          t.exports = u;\n          var i = e("./_stream_readable"),\n              o = e("./_stream_writable");\n          e("inherits")(u, i);\n\n          for (var s = n(o.prototype), a = 0; a < s.length; a++) {\n            var l = s[a];\n            u.prototype[l] || (u.prototype[l] = o.prototype[l]);\n          }\n\n          function u(e) {\n            if (!(this instanceof u)) return new u(e);\n            i.call(this, e), o.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", c)));\n          }\n\n          function c() {\n            this._writableState.ended || r.nextTick(h, this);\n          }\n\n          function h(e) {\n            e.end();\n          }\n\n          Object.defineProperty(u.prototype, "writableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.highWaterMark;\n            }\n          }), Object.defineProperty(u.prototype, "writableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState && this._writableState.getBuffer();\n            }\n          }), Object.defineProperty(u.prototype, "writableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.length;\n            }\n          }), Object.defineProperty(u.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;\n            },\n            set: function (e) {\n              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);\n            }\n          });\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./_stream_readable": 58,\n      "./_stream_writable": 60,\n      _process: 50,\n      inherits: 24\n    }],\n    57: [function (e, t, r) {\n      "use strict";\n\n      t.exports = i;\n      var n = e("./_stream_transform");\n\n      function i(e) {\n        if (!(this instanceof i)) return new i(e);\n        n.call(this, e);\n      }\n\n      e("inherits")(i, n), i.prototype._transform = function (e, t, r) {\n        r(null, e);\n      };\n    }, {\n      "./_stream_transform": 59,\n      inherits: 24\n    }],\n    58: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          var i;\n          t.exports = C, C.ReadableState = E;\n          e("events").EventEmitter;\n\n          var o = function (e, t) {\n            return e.listeners(t).length;\n          },\n              s = e("./internal/streams/stream"),\n              a = e("buffer").Buffer,\n              l = n.Uint8Array || function () {};\n\n          var u,\n              c = e("util");\n          u = c && c.debuglog ? c.debuglog("stream") : function () {};\n          var h,\n              f,\n              p,\n              d = e("./internal/streams/buffer_list"),\n              g = e("./internal/streams/destroy"),\n              y = e("./internal/streams/state").getHighWaterMark,\n              b = e("../errors").codes,\n              m = b.ERR_INVALID_ARG_TYPE,\n              v = b.ERR_STREAM_PUSH_AFTER_EOF,\n              w = b.ERR_METHOD_NOT_IMPLEMENTED,\n              _ = b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n          e("inherits")(C, s);\n          var k = g.errorOrDestroy,\n              S = ["error", "close", "destroy", "pause", "resume"];\n\n          function E(t, r, n) {\n            i = i || e("./_stream_duplex"), t = t || {}, "boolean" != typeof n && (n = r instanceof i), this.objectMode = !!t.objectMode, n && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = y(this, t, "readableHighWaterMark", n), this.buffer = new d(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (h || (h = e("string_decoder/").StringDecoder), this.decoder = new h(t.encoding), this.encoding = t.encoding);\n          }\n\n          function C(t) {\n            if (i = i || e("./_stream_duplex"), !(this instanceof C)) return new C(t);\n            var r = this instanceof i;\n            this._readableState = new E(t, this, r), this.readable = !0, t && ("function" == typeof t.read && (this._read = t.read), "function" == typeof t.destroy && (this._destroy = t.destroy)), s.call(this);\n          }\n\n          function T(e, t, r, n, i) {\n            u("readableAddChunk", t);\n            var o,\n                s = e._readableState;\n            if (null === t) s.reading = !1, function (e, t) {\n              if (u("onEofChunk"), t.ended) return;\n\n              if (t.decoder) {\n                var r = t.decoder.end();\n                r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);\n              }\n\n              t.ended = !0, t.sync ? P(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, O(e)));\n            }(e, s);else if (i || (o = function (e, t) {\n              var r;\n              n = t, a.isBuffer(n) || n instanceof l || "string" == typeof t || void 0 === t || e.objectMode || (r = new m("chunk", ["string", "Buffer", "Uint8Array"], t));\n              var n;\n              return r;\n            }(s, t)), o) k(e, o);else if (s.objectMode || t && t.length > 0) {\n              if ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === a.prototype || (t = function (e) {\n                return a.from(e);\n              }(t)), n) s.endEmitted ? k(e, new _()) : x(e, s, t, !0);else if (s.ended) k(e, new v());else {\n                if (s.destroyed) return !1;\n                s.reading = !1, s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? x(e, s, t, !1) : B(e, s)) : x(e, s, t, !1);\n              }\n            } else n || (s.reading = !1, B(e, s));\n            return !s.ended && (s.length < s.highWaterMark || 0 === s.length);\n          }\n\n          function x(e, t, r, n) {\n            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && P(e)), B(e, t);\n          }\n\n          Object.defineProperty(C.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._readableState && this._readableState.destroyed;\n            },\n            set: function (e) {\n              this._readableState && (this._readableState.destroyed = e);\n            }\n          }), C.prototype.destroy = g.destroy, C.prototype._undestroy = g.undestroy, C.prototype._destroy = function (e, t) {\n            t(e);\n          }, C.prototype.push = function (e, t) {\n            var r,\n                n = this._readableState;\n            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = a.from(e, t), t = ""), r = !0), T(this, e, t, !1, r);\n          }, C.prototype.unshift = function (e) {\n            return T(this, e, null, !0, !1);\n          }, C.prototype.isPaused = function () {\n            return !1 === this._readableState.flowing;\n          }, C.prototype.setEncoding = function (t) {\n            h || (h = e("string_decoder/").StringDecoder);\n            var r = new h(t);\n            this._readableState.decoder = r, this._readableState.encoding = this._readableState.decoder.encoding;\n\n            for (var n = this._readableState.buffer.head, i = ""; null !== n;) i += r.write(n.data), n = n.next;\n\n            return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, this;\n          };\n          var A = 1073741824;\n\n          function I(e, t) {\n            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function (e) {\n              return e >= A ? e = A : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;\n            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));\n          }\n\n          function P(e) {\n            var t = e._readableState;\n            u("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (u("emitReadable", t.flowing), t.emittedReadable = !0, r.nextTick(O, e));\n          }\n\n          function O(e) {\n            var t = e._readableState;\n            u("emitReadable_", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit("readable"), t.emittedReadable = !1), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, j(e);\n          }\n\n          function B(e, t) {\n            t.readingMore || (t.readingMore = !0, r.nextTick(R, e, t));\n          }\n\n          function R(e, t) {\n            for (; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length);) {\n              var r = t.length;\n              if (u("maybeReadMore read 0"), e.read(0), r === t.length) break;\n            }\n\n            t.readingMore = !1;\n          }\n\n          function M(e) {\n            var t = e._readableState;\n            t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume();\n          }\n\n          function N(e) {\n            u("readable nexttick read 0"), e.read(0);\n          }\n\n          function L(e, t) {\n            u("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit("resume"), j(e), t.flowing && !t.reading && e.read(0);\n          }\n\n          function j(e) {\n            var t = e._readableState;\n\n            for (u("flow", t.flowing); t.flowing && null !== e.read(););\n          }\n\n          function U(e, t) {\n            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r);\n            var r;\n          }\n\n          function q(e) {\n            var t = e._readableState;\n            u("endReadable", t.endEmitted), t.endEmitted || (t.ended = !0, r.nextTick(D, t, e));\n          }\n\n          function D(e, t) {\n            if (u("endReadableNT", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, t.emit("end"), e.autoDestroy)) {\n              var r = t._writableState;\n              (!r || r.autoDestroy && r.finished) && t.destroy();\n            }\n          }\n\n          function z(e, t) {\n            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;\n\n            return -1;\n          }\n\n          C.prototype.read = function (e) {\n            u("read", e), e = parseInt(e, 10);\n            var t = this._readableState,\n                r = e;\n            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return u("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? q(this) : P(this), null;\n            if (0 === (e = I(e, t)) && t.ended) return 0 === t.length && q(this), null;\n            var n,\n                i = t.needReadable;\n            return u("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && u("length less than watermark", i = !0), t.ended || t.reading ? u("reading or ended", i = !1) : i && (u("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = I(r, t))), null === (n = e > 0 ? U(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && q(this)), null !== n && this.emit("data", n), n;\n          }, C.prototype._read = function (e) {\n            k(this, new w("_read()"));\n          }, C.prototype.pipe = function (e, t) {\n            var n = this,\n                i = this._readableState;\n\n            switch (i.pipesCount) {\n              case 0:\n                i.pipes = e;\n                break;\n\n              case 1:\n                i.pipes = [i.pipes, e];\n                break;\n\n              default:\n                i.pipes.push(e);\n            }\n\n            i.pipesCount += 1, u("pipe count=%d opts=%j", i.pipesCount, t);\n            var s = (!t || !1 !== t.end) && e !== r.stdout && e !== r.stderr ? l : y;\n\n            function a(t, r) {\n              u("onunpipe"), t === n && r && !1 === r.hasUnpiped && (r.hasUnpiped = !0, u("cleanup"), e.removeListener("close", d), e.removeListener("finish", g), e.removeListener("drain", c), e.removeListener("error", p), e.removeListener("unpipe", a), n.removeListener("end", l), n.removeListener("end", y), n.removeListener("data", f), h = !0, !i.awaitDrain || e._writableState && !e._writableState.needDrain || c());\n            }\n\n            function l() {\n              u("onend"), e.end();\n            }\n\n            i.endEmitted ? r.nextTick(s) : n.once("end", s), e.on("unpipe", a);\n\n            var c = function (e) {\n              return function () {\n                var t = e._readableState;\n                u("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && o(e, "data") && (t.flowing = !0, j(e));\n              };\n            }(n);\n\n            e.on("drain", c);\n            var h = !1;\n\n            function f(t) {\n              u("ondata");\n              var r = e.write(t);\n              u("dest.write", r), !1 === r && ((1 === i.pipesCount && i.pipes === e || i.pipesCount > 1 && -1 !== z(i.pipes, e)) && !h && (u("false write response, pause", i.awaitDrain), i.awaitDrain++), n.pause());\n            }\n\n            function p(t) {\n              u("onerror", t), y(), e.removeListener("error", p), 0 === o(e, "error") && k(e, t);\n            }\n\n            function d() {\n              e.removeListener("finish", g), y();\n            }\n\n            function g() {\n              u("onfinish"), e.removeListener("close", d), y();\n            }\n\n            function y() {\n              u("unpipe"), n.unpipe(e);\n            }\n\n            return n.on("data", f), function (e, t, r) {\n              if ("function" == typeof e.prependListener) return e.prependListener(t, r);\n              e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);\n            }(e, "error", p), e.once("close", d), e.once("finish", g), e.emit("pipe", n), i.flowing || (u("pipe resume"), n.resume()), e;\n          }, C.prototype.unpipe = function (e) {\n            var t = this._readableState,\n                r = {\n              hasUnpiped: !1\n            };\n            if (0 === t.pipesCount) return this;\n            if (1 === t.pipesCount) return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r), this);\n\n            if (!e) {\n              var n = t.pipes,\n                  i = t.pipesCount;\n              t.pipes = null, t.pipesCount = 0, t.flowing = !1;\n\n              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, {\n                hasUnpiped: !1\n              });\n\n              return this;\n            }\n\n            var s = z(t.pipes, e);\n            return -1 === s ? this : (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);\n          }, C.prototype.on = function (e, t) {\n            var n = s.prototype.on.call(this, e, t),\n                i = this._readableState;\n            return "data" === e ? (i.readableListening = this.listenerCount("readable") > 0, !1 !== i.flowing && this.resume()) : "readable" === e && (i.endEmitted || i.readableListening || (i.readableListening = i.needReadable = !0, i.flowing = !1, i.emittedReadable = !1, u("on readable", i.length, i.reading), i.length ? P(this) : i.reading || r.nextTick(N, this))), n;\n          }, C.prototype.addListener = C.prototype.on, C.prototype.removeListener = function (e, t) {\n            var n = s.prototype.removeListener.call(this, e, t);\n            return "readable" === e && r.nextTick(M, this), n;\n          }, C.prototype.removeAllListeners = function (e) {\n            var t = s.prototype.removeAllListeners.apply(this, arguments);\n            return "readable" !== e && void 0 !== e || r.nextTick(M, this), t;\n          }, C.prototype.resume = function () {\n            var e = this._readableState;\n            return e.flowing || (u("resume"), e.flowing = !e.readableListening, function (e, t) {\n              t.resumeScheduled || (t.resumeScheduled = !0, r.nextTick(L, e, t));\n            }(this, e)), e.paused = !1, this;\n          }, C.prototype.pause = function () {\n            return u("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (u("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;\n          }, C.prototype.wrap = function (e) {\n            var t = this,\n                r = this._readableState,\n                n = !1;\n\n            for (var i in e.on("end", function () {\n              if (u("wrapped end"), r.decoder && !r.ended) {\n                var e = r.decoder.end();\n                e && e.length && t.push(e);\n              }\n\n              t.push(null);\n            }), e.on("data", function (i) {\n              (u("wrapped data"), r.decoder && (i = r.decoder.write(i)), !r.objectMode || null !== i && void 0 !== i) && (r.objectMode || i && i.length) && (t.push(i) || (n = !0, e.pause()));\n            }), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function (t) {\n              return function () {\n                return e[t].apply(e, arguments);\n              };\n            }(i));\n\n            for (var o = 0; o < S.length; o++) e.on(S[o], this.emit.bind(this, S[o]));\n\n            return this._read = function (t) {\n              u("wrapped _read", t), n && (n = !1, e.resume());\n            }, this;\n          }, "function" == typeof Symbol && (C.prototype[Symbol.asyncIterator] = function () {\n            return void 0 === f && (f = e("./internal/streams/async_iterator")), f(this);\n          }), Object.defineProperty(C.prototype, "readableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.highWaterMark;\n            }\n          }), Object.defineProperty(C.prototype, "readableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState && this._readableState.buffer;\n            }\n          }), Object.defineProperty(C.prototype, "readableFlowing", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.flowing;\n            },\n            set: function (e) {\n              this._readableState && (this._readableState.flowing = e);\n            }\n          }), C._fromList = U, Object.defineProperty(C.prototype, "readableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.length;\n            }\n          }), "function" == typeof Symbol && (C.from = function (t, r) {\n            return void 0 === p && (p = e("./internal/streams/from")), p(C, t, r);\n          });\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      "./internal/streams/async_iterator": 61,\n      "./internal/streams/buffer_list": 62,\n      "./internal/streams/destroy": 63,\n      "./internal/streams/from": 65,\n      "./internal/streams/state": 67,\n      "./internal/streams/stream": 68,\n      _process: 50,\n      buffer: 17,\n      events: 22,\n      inherits: 24,\n      "string_decoder/": 75,\n      util: 16\n    }],\n    59: [function (e, t, r) {\n      "use strict";\n\n      t.exports = u;\n      var n = e("../errors").codes,\n          i = n.ERR_METHOD_NOT_IMPLEMENTED,\n          o = n.ERR_MULTIPLE_CALLBACK,\n          s = n.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n          a = n.ERR_TRANSFORM_WITH_LENGTH_0,\n          l = e("./_stream_duplex");\n\n      function u(e) {\n        if (!(this instanceof u)) return new u(e);\n        l.call(this, e), this._transformState = {\n          afterTransform: function (e, t) {\n            var r = this._transformState;\n            r.transforming = !1;\n            var n = r.writecb;\n            if (null === n) return this.emit("error", new o());\n            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);\n            var i = this._readableState;\n            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n          }.bind(this),\n          needTransform: !1,\n          transforming: !1,\n          writecb: null,\n          writechunk: null,\n          writeencoding: null\n        }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", c);\n      }\n\n      function c() {\n        var e = this;\n        "function" != typeof this._flush || this._readableState.destroyed ? h(this, null, null) : this._flush(function (t, r) {\n          h(e, t, r);\n        });\n      }\n\n      function h(e, t, r) {\n        if (t) return e.emit("error", t);\n        if (null != r && e.push(r), e._writableState.length) throw new a();\n        if (e._transformState.transforming) throw new s();\n        return e.push(null);\n      }\n\n      e("inherits")(u, l), u.prototype.push = function (e, t) {\n        return this._transformState.needTransform = !1, l.prototype.push.call(this, e, t);\n      }, u.prototype._transform = function (e, t, r) {\n        r(new i("_transform()"));\n      }, u.prototype._write = function (e, t, r) {\n        var n = this._transformState;\n\n        if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {\n          var i = this._readableState;\n          (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n        }\n      }, u.prototype._read = function (e) {\n        var t = this._transformState;\n        null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));\n      }, u.prototype._destroy = function (e, t) {\n        l.prototype._destroy.call(this, e, function (e) {\n          t(e);\n        });\n      };\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      inherits: 24\n    }],\n    60: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          function i(e) {\n            var t = this;\n            this.next = null, this.entry = null, this.finish = function () {\n              !function (e, t, r) {\n                var n = e.entry;\n                e.entry = null;\n\n                for (; n;) {\n                  var i = n.callback;\n                  t.pendingcb--, i(r), n = n.next;\n                }\n\n                t.corkedRequestsFree.next = e;\n              }(t, e);\n            };\n          }\n\n          var o;\n          t.exports = C, C.WritableState = E;\n\n          var s = {\n            deprecate: e("util-deprecate")\n          },\n              a = e("./internal/streams/stream"),\n              l = e("buffer").Buffer,\n              u = n.Uint8Array || function () {};\n\n          var c,\n              h = e("./internal/streams/destroy"),\n              f = e("./internal/streams/state").getHighWaterMark,\n              p = e("../errors").codes,\n              d = p.ERR_INVALID_ARG_TYPE,\n              g = p.ERR_METHOD_NOT_IMPLEMENTED,\n              y = p.ERR_MULTIPLE_CALLBACK,\n              b = p.ERR_STREAM_CANNOT_PIPE,\n              m = p.ERR_STREAM_DESTROYED,\n              v = p.ERR_STREAM_NULL_VALUES,\n              w = p.ERR_STREAM_WRITE_AFTER_END,\n              _ = p.ERR_UNKNOWN_ENCODING,\n              k = h.errorOrDestroy;\n\n          function S() {}\n\n          function E(t, n, s) {\n            o = o || e("./_stream_duplex"), t = t || {}, "boolean" != typeof s && (s = n instanceof o), this.objectMode = !!t.objectMode, s && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = f(this, t, "writableHighWaterMark", s), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;\n            var a = !1 === t.decodeStrings;\n            this.decodeStrings = !a, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {\n              !function (e, t) {\n                var n = e._writableState,\n                    i = n.sync,\n                    o = n.writecb;\n                if ("function" != typeof o) throw new y();\n                if (function (e) {\n                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;\n                }(n), t) !function (e, t, n, i, o) {\n                  --t.pendingcb, n ? (r.nextTick(o, i), r.nextTick(O, e, t), e._writableState.errorEmitted = !0, k(e, i)) : (o(i), e._writableState.errorEmitted = !0, k(e, i), O(e, t));\n                }(e, n, i, t, o);else {\n                  var s = I(n) || e.destroyed;\n                  s || n.corked || n.bufferProcessing || !n.bufferedRequest || A(e, n), i ? r.nextTick(x, e, n, s, o) : x(e, n, s, o);\n                }\n              }(n, e);\n            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new i(this);\n          }\n\n          function C(t) {\n            var r = this instanceof (o = o || e("./_stream_duplex"));\n            if (!r && !c.call(C, this)) return new C(t);\n            this._writableState = new E(t, this, r), this.writable = !0, t && ("function" == typeof t.write && (this._write = t.write), "function" == typeof t.writev && (this._writev = t.writev), "function" == typeof t.destroy && (this._destroy = t.destroy), "function" == typeof t.final && (this._final = t.final)), a.call(this);\n          }\n\n          function T(e, t, r, n, i, o, s) {\n            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new m("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;\n          }\n\n          function x(e, t, r, n) {\n            r || function (e, t) {\n              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));\n            }(e, t), t.pendingcb--, n(), O(e, t);\n          }\n\n          function A(e, t) {\n            t.bufferProcessing = !0;\n            var r = t.bufferedRequest;\n\n            if (e._writev && r && r.next) {\n              var n = t.bufferedRequestCount,\n                  o = new Array(n),\n                  s = t.corkedRequestsFree;\n              s.entry = r;\n\n              for (var a = 0, l = !0; r;) o[a] = r, r.isBuf || (l = !1), r = r.next, a += 1;\n\n              o.allBuffers = l, T(e, t, !0, t.length, o, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, s.next = null) : t.corkedRequestsFree = new i(t), t.bufferedRequestCount = 0;\n            } else {\n              for (; r;) {\n                var u = r.chunk,\n                    c = r.encoding,\n                    h = r.callback;\n                if (T(e, t, !1, t.objectMode ? 1 : u.length, u, c, h), r = r.next, t.bufferedRequestCount--, t.writing) break;\n              }\n\n              null === r && (t.lastBufferedRequest = null);\n            }\n\n            t.bufferedRequest = r, t.bufferProcessing = !1;\n          }\n\n          function I(e) {\n            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;\n          }\n\n          function P(e, t) {\n            e._final(function (r) {\n              t.pendingcb--, r && k(e, r), t.prefinished = !0, e.emit("prefinish"), O(e, t);\n            });\n          }\n\n          function O(e, t) {\n            var n = I(t);\n\n            if (n && (function (e, t) {\n              t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit("prefinish")) : (t.pendingcb++, t.finalCalled = !0, r.nextTick(P, e, t)));\n            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"), t.autoDestroy))) {\n              var i = e._readableState;\n              (!i || i.autoDestroy && i.endEmitted) && e.destroy();\n            }\n\n            return n;\n          }\n\n          e("inherits")(C, a), E.prototype.getBuffer = function () {\n            for (var e = this.bufferedRequest, t = []; e;) t.push(e), e = e.next;\n\n            return t;\n          }, function () {\n            try {\n              Object.defineProperty(E.prototype, "buffer", {\n                get: s.deprecate(function () {\n                  return this.getBuffer();\n                }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")\n              });\n            } catch (e) {}\n          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c = Function.prototype[Symbol.hasInstance], Object.defineProperty(C, Symbol.hasInstance, {\n            value: function (e) {\n              return !!c.call(this, e) || this === C && e && e._writableState instanceof E;\n            }\n          })) : c = function (e) {\n            return e instanceof this;\n          }, C.prototype.pipe = function () {\n            k(this, new b());\n          }, C.prototype.write = function (e, t, n) {\n            var i,\n                o = this._writableState,\n                s = !1,\n                a = !o.objectMode && (i = e, l.isBuffer(i) || i instanceof u);\n            return a && !l.isBuffer(e) && (e = function (e) {\n              return l.from(e);\n            }(e)), "function" == typeof t && (n = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof n && (n = S), o.ending ? function (e, t) {\n              var n = new w();\n              k(e, n), r.nextTick(t, n);\n            }(this, n) : (a || function (e, t, n, i) {\n              var o;\n              return null === n ? o = new v() : "string" == typeof n || t.objectMode || (o = new d("chunk", ["string", "Buffer"], n)), !o || (k(e, o), r.nextTick(i, o), !1);\n            }(this, o, e, n)) && (o.pendingcb++, s = function (e, t, r, n, i, o) {\n              if (!r) {\n                var s = function (e, t, r) {\n                  e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = l.from(t, r));\n                  return t;\n                }(t, n, i);\n\n                n !== s && (r = !0, i = "buffer", n = s);\n              }\n\n              var a = t.objectMode ? 1 : n.length;\n              t.length += a;\n              var u = t.length < t.highWaterMark;\n              u || (t.needDrain = !0);\n\n              if (t.writing || t.corked) {\n                var c = t.lastBufferedRequest;\n                t.lastBufferedRequest = {\n                  chunk: n,\n                  encoding: i,\n                  isBuf: r,\n                  callback: o,\n                  next: null\n                }, c ? c.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;\n              } else T(e, t, !1, a, n, i, o);\n\n              return u;\n            }(this, o, a, e, t, n)), s;\n          }, C.prototype.cork = function () {\n            this._writableState.corked++;\n          }, C.prototype.uncork = function () {\n            var e = this._writableState;\n            e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || A(this, e));\n          }, C.prototype.setDefaultEncoding = function (e) {\n            if ("string" == typeof e && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new _(e);\n            return this._writableState.defaultEncoding = e, this;\n          }, Object.defineProperty(C.prototype, "writableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState && this._writableState.getBuffer();\n            }\n          }), Object.defineProperty(C.prototype, "writableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.highWaterMark;\n            }\n          }), C.prototype._write = function (e, t, r) {\n            r(new g("_write()"));\n          }, C.prototype._writev = null, C.prototype.end = function (e, t, n) {\n            var i = this._writableState;\n            return "function" == typeof e ? (n = e, e = null, t = null) : "function" == typeof t && (n = t, t = null), null !== e && void 0 !== e && this.write(e, t), i.corked && (i.corked = 1, this.uncork()), i.ending || function (e, t, n) {\n              t.ending = !0, O(e, t), n && (t.finished ? r.nextTick(n) : e.once("finish", n));\n              t.ended = !0, e.writable = !1;\n            }(this, i, n), this;\n          }, Object.defineProperty(C.prototype, "writableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.length;\n            }\n          }), Object.defineProperty(C.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._writableState && this._writableState.destroyed;\n            },\n            set: function (e) {\n              this._writableState && (this._writableState.destroyed = e);\n            }\n          }), C.prototype.destroy = h.destroy, C.prototype._undestroy = h.undestroy, C.prototype._destroy = function (e, t) {\n            t(e);\n          };\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      "./internal/streams/destroy": 63,\n      "./internal/streams/state": 67,\n      "./internal/streams/stream": 68,\n      _process: 50,\n      buffer: 17,\n      inherits: 24,\n      "util-deprecate": 78\n    }],\n    61: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          var n;\n\n          function i(e, t, r) {\n            return t in e ? Object.defineProperty(e, t, {\n              value: r,\n              enumerable: !0,\n              configurable: !0,\n              writable: !0\n            }) : e[t] = r, e;\n          }\n\n          var o = e("./end-of-stream"),\n              s = Symbol("lastResolve"),\n              a = Symbol("lastReject"),\n              l = Symbol("error"),\n              u = Symbol("ended"),\n              c = Symbol("lastPromise"),\n              h = Symbol("handlePromise"),\n              f = Symbol("stream");\n\n          function p(e, t) {\n            return {\n              value: e,\n              done: t\n            };\n          }\n\n          function d(e) {\n            var t = e[s];\n\n            if (null !== t) {\n              var r = e[f].read();\n              null !== r && (e[c] = null, e[s] = null, e[a] = null, t(p(r, !1)));\n            }\n          }\n\n          var g = Object.getPrototypeOf(function () {}),\n              y = Object.setPrototypeOf((i(n = {\n            get stream() {\n              return this[f];\n            },\n\n            next: function () {\n              var e = this,\n                  t = this[l];\n              if (null !== t) return Promise.reject(t);\n              if (this[u]) return Promise.resolve(p(void 0, !0));\n              if (this[f].destroyed) return new Promise(function (t, n) {\n                r.nextTick(function () {\n                  e[l] ? n(e[l]) : t(p(void 0, !0));\n                });\n              });\n              var n,\n                  i = this[c];\n              if (i) n = new Promise(function (e, t) {\n                return function (r, n) {\n                  e.then(function () {\n                    t[u] ? r(p(void 0, !0)) : t[h](r, n);\n                  }, n);\n                };\n              }(i, this));else {\n                var o = this[f].read();\n                if (null !== o) return Promise.resolve(p(o, !1));\n                n = new Promise(this[h]);\n              }\n              return this[c] = n, n;\n            }\n          }, Symbol.asyncIterator, function () {\n            return this;\n          }), i(n, "return", function () {\n            var e = this;\n            return new Promise(function (t, r) {\n              e[f].destroy(null, function (e) {\n                e ? r(e) : t(p(void 0, !0));\n              });\n            });\n          }), n), g);\n\n          t.exports = function (e) {\n            var t,\n                n = Object.create(y, (i(t = {}, f, {\n              value: e,\n              writable: !0\n            }), i(t, s, {\n              value: null,\n              writable: !0\n            }), i(t, a, {\n              value: null,\n              writable: !0\n            }), i(t, l, {\n              value: null,\n              writable: !0\n            }), i(t, u, {\n              value: e._readableState.endEmitted,\n              writable: !0\n            }), i(t, h, {\n              value: function (e, t) {\n                var r = n[f].read();\n                r ? (n[c] = null, n[s] = null, n[a] = null, e(p(r, !1))) : (n[s] = e, n[a] = t);\n              },\n              writable: !0\n            }), t));\n            return n[c] = null, o(e, function (e) {\n              if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {\n                var t = n[a];\n                return null !== t && (n[c] = null, n[s] = null, n[a] = null, t(e)), void (n[l] = e);\n              }\n\n              var r = n[s];\n              null !== r && (n[c] = null, n[s] = null, n[a] = null, r(p(void 0, !0))), n[u] = !0;\n            }), e.on("readable", function (e) {\n              r.nextTick(d, e);\n            }.bind(null, n)), n;\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./end-of-stream": 64,\n      _process: 50\n    }],\n    62: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        var r = Object.keys(e);\n\n        if (Object.getOwnPropertySymbols) {\n          var n = Object.getOwnPropertySymbols(e);\n          t && (n = n.filter(function (t) {\n            return Object.getOwnPropertyDescriptor(e, t).enumerable;\n          })), r.push.apply(r, n);\n        }\n\n        return r;\n      }\n\n      function i(e, t, r) {\n        return t in e ? Object.defineProperty(e, t, {\n          value: r,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[t] = r, e;\n      }\n\n      function o(e, t) {\n        for (var r = 0; r < t.length; r++) {\n          var n = t[r];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }\n\n      var s = e("buffer").Buffer,\n          a = e("util").inspect,\n          l = a && a.custom || "inspect";\n\n      t.exports = function () {\n        function e() {\n          !function (e, t) {\n            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");\n          }(this, e), this.head = null, this.tail = null, this.length = 0;\n        }\n\n        var t, r, u;\n        return t = e, (r = [{\n          key: "push",\n          value: function (e) {\n            var t = {\n              data: e,\n              next: null\n            };\n            this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;\n          }\n        }, {\n          key: "unshift",\n          value: function (e) {\n            var t = {\n              data: e,\n              next: this.head\n            };\n            0 === this.length && (this.tail = t), this.head = t, ++this.length;\n          }\n        }, {\n          key: "shift",\n          value: function () {\n            if (0 !== this.length) {\n              var e = this.head.data;\n              return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;\n            }\n          }\n        }, {\n          key: "clear",\n          value: function () {\n            this.head = this.tail = null, this.length = 0;\n          }\n        }, {\n          key: "join",\n          value: function (e) {\n            if (0 === this.length) return "";\n\n            for (var t = this.head, r = "" + t.data; t = t.next;) r += e + t.data;\n\n            return r;\n          }\n        }, {\n          key: "concat",\n          value: function (e) {\n            if (0 === this.length) return s.alloc(0);\n\n            for (var t, r, n, i = s.allocUnsafe(e >>> 0), o = this.head, a = 0; o;) t = o.data, r = i, n = a, s.prototype.copy.call(t, r, n), a += o.data.length, o = o.next;\n\n            return i;\n          }\n        }, {\n          key: "consume",\n          value: function (e, t) {\n            var r;\n            return e < this.head.data.length ? (r = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), r;\n          }\n        }, {\n          key: "first",\n          value: function () {\n            return this.head.data;\n          }\n        }, {\n          key: "_getString",\n          value: function (e) {\n            var t = this.head,\n                r = 1,\n                n = t.data;\n\n            for (e -= n.length; t = t.next;) {\n              var i = t.data,\n                  o = e > i.length ? i.length : e;\n\n              if (o === i.length ? n += i : n += i.slice(0, e), 0 === (e -= o)) {\n                o === i.length ? (++r, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));\n                break;\n              }\n\n              ++r;\n            }\n\n            return this.length -= r, n;\n          }\n        }, {\n          key: "_getBuffer",\n          value: function (e) {\n            var t = s.allocUnsafe(e),\n                r = this.head,\n                n = 1;\n\n            for (r.data.copy(t), e -= r.data.length; r = r.next;) {\n              var i = r.data,\n                  o = e > i.length ? i.length : e;\n\n              if (i.copy(t, t.length - e, 0, o), 0 === (e -= o)) {\n                o === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(o));\n                break;\n              }\n\n              ++n;\n            }\n\n            return this.length -= n, t;\n          }\n        }, {\n          key: l,\n          value: function (e, t) {\n            return a(this, function (e) {\n              for (var t = 1; t < arguments.length; t++) {\n                var r = null != arguments[t] ? arguments[t] : {};\n                t % 2 ? n(Object(r), !0).forEach(function (t) {\n                  i(e, t, r[t]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function (t) {\n                  Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));\n                });\n              }\n\n              return e;\n            }({}, t, {\n              depth: 0,\n              customInspect: !1\n            }));\n          }\n        }]) && o(t.prototype, r), u && o(t, u), e;\n      }();\n    }, {\n      buffer: 17,\n      util: 16\n    }],\n    63: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          function r(e, t) {\n            i(e, t), n(e);\n          }\n\n          function n(e) {\n            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");\n          }\n\n          function i(e, t) {\n            e.emit("error", t);\n          }\n\n          t.exports = {\n            destroy: function (t, o) {\n              var s = this,\n                  a = this._readableState && this._readableState.destroyed,\n                  l = this._writableState && this._writableState.destroyed;\n              return a || l ? (o ? o(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, e.nextTick(i, this, t)) : e.nextTick(i, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function (t) {\n                !o && t ? s._writableState ? s._writableState.errorEmitted ? e.nextTick(n, s) : (s._writableState.errorEmitted = !0, e.nextTick(r, s, t)) : e.nextTick(r, s, t) : o ? (e.nextTick(n, s), o(t)) : e.nextTick(n, s);\n              }), this);\n            },\n            undestroy: function () {\n              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);\n            },\n            errorOrDestroy: function (e, t) {\n              var r = e._readableState,\n                  n = e._writableState;\n              r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);\n            }\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50\n    }],\n    64: [function (e, t, r) {\n      "use strict";\n\n      var n = e("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;\n\n      function i() {}\n\n      t.exports = function e(t, r, o) {\n        if ("function" == typeof r) return e(t, null, r);\n        r || (r = {}), o = function (e) {\n          var t = !1;\n          return function () {\n            if (!t) {\n              t = !0;\n\n              for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];\n\n              e.apply(this, n);\n            }\n          };\n        }(o || i);\n\n        var s = r.readable || !1 !== r.readable && t.readable,\n            a = r.writable || !1 !== r.writable && t.writable,\n            l = function () {\n          t.writable || c();\n        },\n            u = t._writableState && t._writableState.finished,\n            c = function () {\n          a = !1, u = !0, s || o.call(t);\n        },\n            h = t._readableState && t._readableState.endEmitted,\n            f = function () {\n          s = !1, h = !0, a || o.call(t);\n        },\n            p = function (e) {\n          o.call(t, e);\n        },\n            d = function () {\n          var e;\n          return s && !h ? (t._readableState && t._readableState.ended || (e = new n()), o.call(t, e)) : a && !u ? (t._writableState && t._writableState.ended || (e = new n()), o.call(t, e)) : void 0;\n        },\n            g = function () {\n          t.req.on("finish", c);\n        };\n\n        return function (e) {\n          return e.setHeader && "function" == typeof e.abort;\n        }(t) ? (t.on("complete", c), t.on("abort", d), t.req ? g() : t.on("request", g)) : a && !t._writableState && (t.on("end", l), t.on("close", l)), t.on("end", f), t.on("finish", c), !1 !== r.error && t.on("error", p), t.on("close", d), function () {\n          t.removeListener("complete", c), t.removeListener("abort", d), t.removeListener("request", g), t.req && t.req.removeListener("finish", c), t.removeListener("end", l), t.removeListener("close", l), t.removeListener("finish", c), t.removeListener("end", f), t.removeListener("error", p), t.removeListener("close", d);\n        };\n      };\n    }, {\n      "../../../errors": 55\n    }],\n    65: [function (e, t, r) {\n      t.exports = function () {\n        throw new Error("Readable.from is not available in the browser");\n      };\n    }, {}],\n    66: [function (e, t, r) {\n      "use strict";\n\n      var n;\n      var i = e("../../../errors").codes,\n          o = i.ERR_MISSING_ARGS,\n          s = i.ERR_STREAM_DESTROYED;\n\n      function a(e) {\n        if (e) throw e;\n      }\n\n      function l(e) {\n        e();\n      }\n\n      function u(e, t) {\n        return e.pipe(t);\n      }\n\n      t.exports = function () {\n        for (var t = arguments.length, r = new Array(t), i = 0; i < t; i++) r[i] = arguments[i];\n\n        var c,\n            h = function (e) {\n          return e.length ? "function" != typeof e[e.length - 1] ? a : e.pop() : a;\n        }(r);\n\n        if (Array.isArray(r[0]) && (r = r[0]), r.length < 2) throw new o("streams");\n        var f = r.map(function (t, i) {\n          var o = i < r.length - 1;\n          return function (t, r, i, o) {\n            o = function (e) {\n              var t = !1;\n              return function () {\n                t || (t = !0, e.apply(void 0, arguments));\n              };\n            }(o);\n\n            var a = !1;\n            t.on("close", function () {\n              a = !0;\n            }), void 0 === n && (n = e("./end-of-stream")), n(t, {\n              readable: r,\n              writable: i\n            }, function (e) {\n              if (e) return o(e);\n              a = !0, o();\n            });\n            var l = !1;\n            return function (e) {\n              if (!a && !l) return l = !0, function (e) {\n                return e.setHeader && "function" == typeof e.abort;\n              }(t) ? t.abort() : "function" == typeof t.destroy ? t.destroy() : void o(e || new s("pipe"));\n            };\n          }(t, o, i > 0, function (e) {\n            c || (c = e), e && f.forEach(l), o || (f.forEach(l), h(c));\n          });\n        });\n        return r.reduce(u);\n      };\n    }, {\n      "../../../errors": 55,\n      "./end-of-stream": 64\n    }],\n    67: [function (e, t, r) {\n      "use strict";\n\n      var n = e("../../../errors").codes.ERR_INVALID_OPT_VALUE;\n      t.exports = {\n        getHighWaterMark: function (e, t, r, i) {\n          var o = function (e, t, r) {\n            return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null;\n          }(t, i, r);\n\n          if (null != o) {\n            if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);\n            return Math.floor(o);\n          }\n\n          return e.objectMode ? 16 : 16384;\n        }\n      };\n    }, {\n      "../../../errors": 55\n    }],\n    68: [function (e, t, r) {\n      t.exports = e("events").EventEmitter;\n    }, {\n      events: 22\n    }],\n    69: [function (e, t, r) {\n      (r = t.exports = e("./lib/_stream_readable.js")).Stream = r, r.Readable = r, r.Writable = e("./lib/_stream_writable.js"), r.Duplex = e("./lib/_stream_duplex.js"), r.Transform = e("./lib/_stream_transform.js"), r.PassThrough = e("./lib/_stream_passthrough.js"), r.finished = e("./lib/internal/streams/end-of-stream.js"), r.pipeline = e("./lib/internal/streams/pipeline.js");\n    }, {\n      "./lib/_stream_duplex.js": 56,\n      "./lib/_stream_passthrough.js": 57,\n      "./lib/_stream_readable.js": 58,\n      "./lib/_stream_transform.js": 59,\n      "./lib/_stream_writable.js": 60,\n      "./lib/internal/streams/end-of-stream.js": 64,\n      "./lib/internal/streams/pipeline.js": 66\n    }],\n    70: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function () {\n        if ("function" != typeof arguments[0]) throw new Error("callback needed");\n        if ("number" != typeof arguments[1]) throw new Error("interval needed");\n        var e;\n\n        if (arguments.length > 0) {\n          e = new Array(arguments.length - 2);\n\n          for (var t = 0; t < e.length; t++) e[t] = arguments[t + 2];\n        }\n\n        return new function (e, t, r) {\n          var n = this;\n          this._callback = e, this._args = r, this._interval = setInterval(e, t, this._args), this.reschedule = function (e) {\n            e || (e = n._interval), n._interval && clearInterval(n._interval), n._interval = setInterval(n._callback, e, n._args);\n          }, this.clear = function () {\n            n._interval && (clearInterval(n._interval), n._interval = void 0);\n          }, this.destroy = function () {\n            n._interval && clearInterval(n._interval), n._callback = void 0, n._interval = void 0, n._args = void 0;\n          };\n        }(arguments[0], arguments[1], e);\n      };\n    }, {}],\n    71: [function (e, t, r) {\n      "use strict";\n\n      t.exports = e("./index.js")();\n    }, {\n      "./index.js": 72\n    }],\n    72: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          function r(t) {\n            return t instanceof e ? e.from(t) : new t.constructor(t.buffer.slice(), t.byteOffset, t.length);\n          }\n\n          t.exports = function (e) {\n            return (e = e || {}).circles ? function (e) {\n              var t = [],\n                  n = [];\n              return e.proto ? function e(o) {\n                if ("object" != typeof o || null === o) return o;\n                if (o instanceof Date) return new Date(o);\n                if (Array.isArray(o)) return i(o, e);\n                if (o instanceof Map) return new Map(i(Array.from(o), e));\n                if (o instanceof Set) return new Set(i(Array.from(o), e));\n                var s = {};\n\n                for (var a in t.push(o), n.push(s), o) {\n                  var l = o[a];\n                  if ("object" != typeof l || null === l) s[a] = l;else if (l instanceof Date) s[a] = new Date(l);else if (l instanceof Map) s[a] = new Map(i(Array.from(l), e));else if (l instanceof Set) s[a] = new Set(i(Array.from(l), e));else if (ArrayBuffer.isView(l)) s[a] = r(l);else {\n                    var u = t.indexOf(l);\n                    s[a] = -1 !== u ? n[u] : e(l);\n                  }\n                }\n\n                return t.pop(), n.pop(), s;\n              } : function e(o) {\n                if ("object" != typeof o || null === o) return o;\n                if (o instanceof Date) return new Date(o);\n                if (Array.isArray(o)) return i(o, e);\n                if (o instanceof Map) return new Map(i(Array.from(o), e));\n                if (o instanceof Set) return new Set(i(Array.from(o), e));\n                var s = {};\n\n                for (var a in t.push(o), n.push(s), o) if (!1 !== Object.hasOwnProperty.call(o, a)) {\n                  var l = o[a];\n                  if ("object" != typeof l || null === l) s[a] = l;else if (l instanceof Date) s[a] = new Date(l);else if (l instanceof Map) s[a] = new Map(i(Array.from(l), e));else if (l instanceof Set) s[a] = new Set(i(Array.from(l), e));else if (ArrayBuffer.isView(l)) s[a] = r(l);else {\n                    var u = t.indexOf(l);\n                    s[a] = -1 !== u ? n[u] : e(l);\n                  }\n                }\n\n                return t.pop(), n.pop(), s;\n              };\n\n              function i(e, i) {\n                for (var o = Object.keys(e), s = new Array(o.length), a = 0; a < o.length; a++) {\n                  var l = o[a],\n                      u = e[l];\n                  if ("object" != typeof u || null === u) s[l] = u;else if (u instanceof Date) s[l] = new Date(u);else if (ArrayBuffer.isView(u)) s[l] = r(u);else {\n                    var c = t.indexOf(u);\n                    s[l] = -1 !== c ? n[c] : i(u);\n                  }\n                }\n\n                return s;\n              }\n            }(e) : e.proto ? function e(n) {\n              if ("object" != typeof n || null === n) return n;\n              if (n instanceof Date) return new Date(n);\n              if (Array.isArray(n)) return t(n, e);\n              if (n instanceof Map) return new Map(t(Array.from(n), e));\n              if (n instanceof Set) return new Set(t(Array.from(n), e));\n              var i = {};\n\n              for (var o in n) {\n                var s = n[o];\n                "object" != typeof s || null === s ? i[o] = s : s instanceof Date ? i[o] = new Date(s) : s instanceof Map ? i[o] = new Map(t(Array.from(s), e)) : s instanceof Set ? i[o] = new Set(t(Array.from(s), e)) : ArrayBuffer.isView(s) ? i[o] = r(s) : i[o] = e(s);\n              }\n\n              return i;\n            } : function e(n) {\n              if ("object" != typeof n || null === n) return n;\n              if (n instanceof Date) return new Date(n);\n              if (Array.isArray(n)) return t(n, e);\n              if (n instanceof Map) return new Map(t(Array.from(n), e));\n              if (n instanceof Set) return new Set(t(Array.from(n), e));\n              var i = {};\n\n              for (var o in n) if (!1 !== Object.hasOwnProperty.call(n, o)) {\n                var s = n[o];\n                "object" != typeof s || null === s ? i[o] = s : s instanceof Date ? i[o] = new Date(s) : s instanceof Map ? i[o] = new Map(t(Array.from(s), e)) : s instanceof Set ? i[o] = new Set(t(Array.from(s), e)) : ArrayBuffer.isView(s) ? i[o] = r(s) : i[o] = e(s);\n              }\n\n              return i;\n            };\n\n            function t(e, t) {\n              for (var n = Object.keys(e), i = new Array(n.length), o = 0; o < n.length; o++) {\n                var s = n[o],\n                    a = e[s];\n                "object" != typeof a || null === a ? i[s] = a : a instanceof Date ? i[s] = new Date(a) : ArrayBuffer.isView(a) ? i[s] = r(a) : i[s] = t(a);\n              }\n\n              return i;\n            }\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    73: [function (e, t, r) {\n      var n = e("buffer"),\n          i = n.Buffer;\n\n      function o(e, t) {\n        for (var r in e) t[r] = e[r];\n      }\n\n      function s(e, t, r) {\n        return i(e, t, r);\n      }\n\n      i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, r), r.Buffer = s), s.prototype = Object.create(i.prototype), o(i, s), s.from = function (e, t, r) {\n        if ("number" == typeof e) throw new TypeError("Argument must not be a number");\n        return i(e, t, r);\n      }, s.alloc = function (e, t, r) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        var n = i(e);\n        return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;\n      }, s.allocUnsafe = function (e) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        return i(e);\n      }, s.allocUnsafeSlow = function (e) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        return n.SlowBuffer(e);\n      };\n    }, {\n      buffer: 17\n    }],\n    74: [function (e, t, r) {\n      t.exports = function (e) {\n        var t = e._readableState;\n        return t ? t.objectMode || "number" == typeof e._duplexState ? e.read() : e.read((r = t, r.buffer.length ? r.buffer.head ? r.buffer.head.data.length : r.buffer[0].length : r.length)) : null;\n        var r;\n      };\n    }, {}],\n    75: [function (e, t, r) {\n      "use strict";\n\n      var n = e("safe-buffer").Buffer,\n          i = n.isEncoding || function (e) {\n        switch ((e = "" + e) && e.toLowerCase()) {\n          case "hex":\n          case "utf8":\n          case "utf-8":\n          case "ascii":\n          case "binary":\n          case "base64":\n          case "ucs2":\n          case "ucs-2":\n          case "utf16le":\n          case "utf-16le":\n          case "raw":\n            return !0;\n\n          default:\n            return !1;\n        }\n      };\n\n      function o(e) {\n        var t;\n\n        switch (this.encoding = function (e) {\n          var t = function (e) {\n            if (!e) return "utf8";\n\n            for (var t;;) switch (e) {\n              case "utf8":\n              case "utf-8":\n                return "utf8";\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return "utf16le";\n\n              case "latin1":\n              case "binary":\n                return "latin1";\n\n              case "base64":\n              case "ascii":\n              case "hex":\n                return e;\n\n              default:\n                if (t) return;\n                e = ("" + e).toLowerCase(), t = !0;\n            }\n          }(e);\n\n          if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);\n          return t || e;\n        }(e), this.encoding) {\n          case "utf16le":\n            this.text = l, this.end = u, t = 4;\n            break;\n\n          case "utf8":\n            this.fillLast = a, t = 4;\n            break;\n\n          case "base64":\n            this.text = c, this.end = h, t = 3;\n            break;\n\n          default:\n            return this.write = f, void (this.end = p);\n        }\n\n        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);\n      }\n\n      function s(e) {\n        return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;\n      }\n\n      function a(e) {\n        var t = this.lastTotal - this.lastNeed,\n            r = function (e, t, r) {\n          if (128 != (192 & t[0])) return e.lastNeed = 0, "�";\n\n          if (e.lastNeed > 1 && t.length > 1) {\n            if (128 != (192 & t[1])) return e.lastNeed = 1, "�";\n            if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";\n          }\n        }(this, e);\n\n        return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));\n      }\n\n      function l(e, t) {\n        if ((e.length - t) % 2 == 0) {\n          var r = e.toString("utf16le", t);\n\n          if (r) {\n            var n = r.charCodeAt(r.length - 1);\n            if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);\n          }\n\n          return r;\n        }\n\n        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);\n      }\n\n      function u(e) {\n        var t = e && e.length ? this.write(e) : "";\n\n        if (this.lastNeed) {\n          var r = this.lastTotal - this.lastNeed;\n          return t + this.lastChar.toString("utf16le", 0, r);\n        }\n\n        return t;\n      }\n\n      function c(e, t) {\n        var r = (e.length - t) % 3;\n        return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));\n      }\n\n      function h(e) {\n        var t = e && e.length ? this.write(e) : "";\n        return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;\n      }\n\n      function f(e) {\n        return e.toString(this.encoding);\n      }\n\n      function p(e) {\n        return e && e.length ? this.write(e) : "";\n      }\n\n      r.StringDecoder = o, o.prototype.write = function (e) {\n        if (0 === e.length) return "";\n        var t, r;\n\n        if (this.lastNeed) {\n          if (void 0 === (t = this.fillLast(e))) return "";\n          r = this.lastNeed, this.lastNeed = 0;\n        } else r = 0;\n\n        return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";\n      }, o.prototype.end = function (e) {\n        var t = e && e.length ? this.write(e) : "";\n        return this.lastNeed ? t + "�" : t;\n      }, o.prototype.text = function (e, t) {\n        var r = function (e, t, r) {\n          var n = t.length - 1;\n          if (n < r) return 0;\n          var i = s(t[n]);\n          if (i >= 0) return i > 0 && (e.lastNeed = i - 1), i;\n          if (--n < r || -2 === i) return 0;\n          if ((i = s(t[n])) >= 0) return i > 0 && (e.lastNeed = i - 2), i;\n          if (--n < r || -2 === i) return 0;\n          if ((i = s(t[n])) >= 0) return i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i;\n          return 0;\n        }(this, e, t);\n\n        if (!this.lastNeed) return e.toString("utf8", t);\n        this.lastTotal = r;\n        var n = e.length - (r - this.lastNeed);\n        return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);\n      }, o.prototype.fillLast = function (e) {\n        if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;\n      };\n    }, {\n      "safe-buffer": 73\n    }],\n    76: [function (e, t, r) {\n      "use strict";\n\n      var n = e("punycode"),\n          i = e("./util");\n\n      function o() {\n        this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;\n      }\n\n      r.parse = v, r.resolve = function (e, t) {\n        return v(e, !1, !0).resolve(t);\n      }, r.resolveObject = function (e, t) {\n        return e ? v(e, !1, !0).resolveObject(t) : t;\n      }, r.format = function (e) {\n        i.isString(e) && (e = v(e));\n        return e instanceof o ? e.format() : o.prototype.format.call(e);\n      }, r.Url = o;\n      var s = /^([a-z0-9.+-]+:)/i,\n          a = /:[0-9]*$/,\n          l = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n          u = ["{", "}", "|", "\\\\", "^", "`"].concat(["<", ">", \'"\', "`", " ", "\\r", "\\n", "\\t"]),\n          c = ["\'"].concat(u),\n          h = ["%", "/", "?", ";", "#"].concat(c),\n          f = ["/", "?", "#"],\n          p = /^[+a-z0-9A-Z_-]{0,63}$/,\n          d = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n          g = {\n        javascript: !0,\n        "javascript:": !0\n      },\n          y = {\n        javascript: !0,\n        "javascript:": !0\n      },\n          b = {\n        http: !0,\n        https: !0,\n        ftp: !0,\n        gopher: !0,\n        file: !0,\n        "http:": !0,\n        "https:": !0,\n        "ftp:": !0,\n        "gopher:": !0,\n        "file:": !0\n      },\n          m = e("querystring");\n\n      function v(e, t, r) {\n        if (e && i.isObject(e) && e instanceof o) return e;\n        var n = new o();\n        return n.parse(e, t, r), n;\n      }\n\n      o.prototype.parse = function (e, t, r) {\n        if (!i.isString(e)) throw new TypeError("Parameter \'url\' must be a string, not " + typeof e);\n        var o = e.indexOf("?"),\n            a = -1 !== o && o < e.indexOf("#") ? "?" : "#",\n            u = e.split(a);\n        u[0] = u[0].replace(/\\\\/g, "/");\n        var v = e = u.join(a);\n\n        if (v = v.trim(), !r && 1 === e.split("#").length) {\n          var w = l.exec(v);\n          if (w) return this.path = v, this.href = v, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? m.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;\n        }\n\n        var _ = s.exec(v);\n\n        if (_) {\n          var k = (_ = _[0]).toLowerCase();\n\n          this.protocol = k, v = v.substr(_.length);\n        }\n\n        if (r || _ || v.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n          var S = "//" === v.substr(0, 2);\n          !S || _ && y[_] || (v = v.substr(2), this.slashes = !0);\n        }\n\n        if (!y[_] && (S || _ && !b[_])) {\n          for (var E, C, T = -1, x = 0; x < f.length; x++) {\n            -1 !== (A = v.indexOf(f[x])) && (-1 === T || A < T) && (T = A);\n          }\n\n          -1 !== (C = -1 === T ? v.lastIndexOf("@") : v.lastIndexOf("@", T)) && (E = v.slice(0, C), v = v.slice(C + 1), this.auth = decodeURIComponent(E)), T = -1;\n\n          for (x = 0; x < h.length; x++) {\n            var A;\n            -1 !== (A = v.indexOf(h[x])) && (-1 === T || A < T) && (T = A);\n          }\n\n          -1 === T && (T = v.length), this.host = v.slice(0, T), v = v.slice(T), this.parseHost(), this.hostname = this.hostname || "";\n          var I = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];\n          if (!I) for (var P = this.hostname.split(/\\./), O = (x = 0, P.length); x < O; x++) {\n            var B = P[x];\n\n            if (B && !B.match(p)) {\n              for (var R = "", M = 0, N = B.length; M < N; M++) B.charCodeAt(M) > 127 ? R += "x" : R += B[M];\n\n              if (!R.match(p)) {\n                var L = P.slice(0, x),\n                    j = P.slice(x + 1),\n                    U = B.match(d);\n                U && (L.push(U[1]), j.unshift(U[2])), j.length && (v = "/" + j.join(".") + v), this.hostname = L.join(".");\n                break;\n              }\n            }\n          }\n          this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), I || (this.hostname = n.toASCII(this.hostname));\n          var q = this.port ? ":" + this.port : "",\n              D = this.hostname || "";\n          this.host = D + q, this.href += this.host, I && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== v[0] && (v = "/" + v));\n        }\n\n        if (!g[k]) for (x = 0, O = c.length; x < O; x++) {\n          var z = c[x];\n\n          if (-1 !== v.indexOf(z)) {\n            var F = encodeURIComponent(z);\n            F === z && (F = escape(z)), v = v.split(z).join(F);\n          }\n        }\n        var V = v.indexOf("#");\n        -1 !== V && (this.hash = v.substr(V), v = v.slice(0, V));\n        var H = v.indexOf("?");\n\n        if (-1 !== H ? (this.search = v.substr(H), this.query = v.substr(H + 1), t && (this.query = m.parse(this.query)), v = v.slice(0, H)) : t && (this.search = "", this.query = {}), v && (this.pathname = v), b[k] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {\n          q = this.pathname || "";\n          var W = this.search || "";\n          this.path = q + W;\n        }\n\n        return this.href = this.format(), this;\n      }, o.prototype.format = function () {\n        var e = this.auth || "";\n        e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");\n        var t = this.protocol || "",\n            r = this.pathname || "",\n            n = this.hash || "",\n            o = !1,\n            s = "";\n        this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = m.stringify(this.query));\n        var a = this.search || s && "?" + s || "";\n        return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || b[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, function (e) {\n          return encodeURIComponent(e);\n        })) + (a = a.replace("#", "%23")) + n;\n      }, o.prototype.resolve = function (e) {\n        return this.resolveObject(v(e, !1, !0)).format();\n      }, o.prototype.resolveObject = function (e) {\n        if (i.isString(e)) {\n          var t = new o();\n          t.parse(e, !1, !0), e = t;\n        }\n\n        for (var r = new o(), n = Object.keys(this), s = 0; s < n.length; s++) {\n          var a = n[s];\n          r[a] = this[a];\n        }\n\n        if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;\n\n        if (e.slashes && !e.protocol) {\n          for (var l = Object.keys(e), u = 0; u < l.length; u++) {\n            var c = l[u];\n            "protocol" !== c && (r[c] = e[c]);\n          }\n\n          return b[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;\n        }\n\n        if (e.protocol && e.protocol !== r.protocol) {\n          if (!b[e.protocol]) {\n            for (var h = Object.keys(e), f = 0; f < h.length; f++) {\n              var p = h[f];\n              r[p] = e[p];\n            }\n\n            return r.href = r.format(), r;\n          }\n\n          if (r.protocol = e.protocol, e.host || y[e.protocol]) r.pathname = e.pathname;else {\n            for (var d = (e.pathname || "").split("/"); d.length && !(e.host = d.shift()););\n\n            e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== d[0] && d.unshift(""), d.length < 2 && d.unshift(""), r.pathname = d.join("/");\n          }\n\n          if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {\n            var g = r.pathname || "",\n                m = r.search || "";\n            r.path = g + m;\n          }\n\n          return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;\n        }\n\n        var v = r.pathname && "/" === r.pathname.charAt(0),\n            w = e.host || e.pathname && "/" === e.pathname.charAt(0),\n            _ = w || v || r.host && e.pathname,\n            k = _,\n            S = r.pathname && r.pathname.split("/") || [],\n            E = (d = e.pathname && e.pathname.split("/") || [], r.protocol && !b[r.protocol]);\n\n        if (E && (r.hostname = "", r.port = null, r.host && ("" === S[0] ? S[0] = r.host : S.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === d[0] ? d[0] = e.host : d.unshift(e.host)), e.host = null), _ = _ && ("" === d[0] || "" === S[0])), w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, S = d;else if (d.length) S || (S = []), S.pop(), S = S.concat(d), r.search = e.search, r.query = e.query;else if (!i.isNullOrUndefined(e.search)) {\n          if (E) r.hostname = r.host = S.shift(), (I = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = I.shift(), r.host = r.hostname = I.shift());\n          return r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;\n        }\n        if (!S.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;\n\n        for (var C = S.slice(-1)[0], T = (r.host || e.host || S.length > 1) && ("." === C || ".." === C) || "" === C, x = 0, A = S.length; A >= 0; A--) "." === (C = S[A]) ? S.splice(A, 1) : ".." === C ? (S.splice(A, 1), x++) : x && (S.splice(A, 1), x--);\n\n        if (!_ && !k) for (; x--; x) S.unshift("..");\n        !_ || "" === S[0] || S[0] && "/" === S[0].charAt(0) || S.unshift(""), T && "/" !== S.join("/").substr(-1) && S.push("");\n        var I,\n            P = "" === S[0] || S[0] && "/" === S[0].charAt(0);\n        E && (r.hostname = r.host = P ? "" : S.length ? S.shift() : "", (I = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = I.shift(), r.host = r.hostname = I.shift()));\n        return (_ = _ || r.host && S.length) && !P && S.unshift(""), S.length ? r.pathname = S.join("/") : (r.pathname = null, r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;\n      }, o.prototype.parseHost = function () {\n        var e = this.host,\n            t = a.exec(e);\n        t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);\n      };\n    }, {\n      "./util": 77,\n      punycode: 51,\n      querystring: 54\n    }],\n    77: [function (e, t, r) {\n      "use strict";\n\n      t.exports = {\n        isString: function (e) {\n          return "string" == typeof e;\n        },\n        isObject: function (e) {\n          return "object" == typeof e && null !== e;\n        },\n        isNull: function (e) {\n          return null === e;\n        },\n        isNullOrUndefined: function (e) {\n          return null == e;\n        }\n      };\n    }, {}],\n    78: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          function r(t) {\n            try {\n              if (!e.localStorage) return !1;\n            } catch (e) {\n              return !1;\n            }\n\n            var r = e.localStorage[t];\n            return null != r && "true" === String(r).toLowerCase();\n          }\n\n          t.exports = function (e, t) {\n            if (r("noDeprecation")) return e;\n            var n = !1;\n            return function () {\n              if (!n) {\n                if (r("throwDeprecation")) throw new Error(t);\n                r("traceDeprecation") ? console.trace(t) : console.warn(t), n = !0;\n              }\n\n              return e.apply(this, arguments);\n            };\n          };\n        }).call(this);\n      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {}],\n    79: [function (e, t, r) {\n      t.exports = function e(t, r) {\n        if (t && r) return e(t)(r);\n        if ("function" != typeof t) throw new TypeError("need wrapper function");\n        Object.keys(t).forEach(function (e) {\n          n[e] = t[e];\n        });\n        return n;\n\n        function n() {\n          for (var e = new Array(arguments.length), r = 0; r < e.length; r++) e[r] = arguments[r];\n\n          var n = t.apply(this, e),\n              i = e[e.length - 1];\n          return "function" == typeof n && n !== i && Object.keys(i).forEach(function (e) {\n            n[e] = i[e];\n          }), n;\n        }\n      };\n    }, {}],\n    80: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function () {\n        throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");\n      };\n    }, {}],\n    81: [function (e, t, r) {\n      t.exports = function () {\n        for (var e = {}, t = 0; t < arguments.length; t++) {\n          var r = arguments[t];\n\n          for (var i in r) n.call(r, i) && (e[i] = r[i]);\n        }\n\n        return e;\n      };\n\n      var n = Object.prototype.hasOwnProperty;\n    }, {}],\n    82: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function (e) {\n        e.prototype[Symbol.iterator] = function* () {\n          for (let e = this.head; e; e = e.next) yield e.value;\n        };\n      };\n    }, {}],\n    83: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        var t = this;\n        if (t instanceof n || (t = new n()), t.tail = null, t.head = null, t.length = 0, e && "function" == typeof e.forEach) e.forEach(function (e) {\n          t.push(e);\n        });else if (arguments.length > 0) for (var r = 0, i = arguments.length; r < i; r++) t.push(arguments[r]);\n        return t;\n      }\n\n      function i(e, t, r) {\n        var n = t === e.head ? new a(r, null, t, e) : new a(r, t, t.next, e);\n        return null === n.next && (e.tail = n), null === n.prev && (e.head = n), e.length++, n;\n      }\n\n      function o(e, t) {\n        e.tail = new a(t, e.tail, null, e), e.head || (e.head = e.tail), e.length++;\n      }\n\n      function s(e, t) {\n        e.head = new a(t, null, e.head, e), e.tail || (e.tail = e.head), e.length++;\n      }\n\n      function a(e, t, r, n) {\n        if (!(this instanceof a)) return new a(e, t, r, n);\n        this.list = n, this.value = e, t ? (t.next = this, this.prev = t) : this.prev = null, r ? (r.prev = this, this.next = r) : this.next = null;\n      }\n\n      t.exports = n, n.Node = a, n.create = n, n.prototype.removeNode = function (e) {\n        if (e.list !== this) throw new Error("removing node which does not belong to this list");\n        var t = e.next,\n            r = e.prev;\n        return t && (t.prev = r), r && (r.next = t), e === this.head && (this.head = t), e === this.tail && (this.tail = r), e.list.length--, e.next = null, e.prev = null, e.list = null, t;\n      }, n.prototype.unshiftNode = function (e) {\n        if (e !== this.head) {\n          e.list && e.list.removeNode(e);\n          var t = this.head;\n          e.list = this, e.next = t, t && (t.prev = e), this.head = e, this.tail || (this.tail = e), this.length++;\n        }\n      }, n.prototype.pushNode = function (e) {\n        if (e !== this.tail) {\n          e.list && e.list.removeNode(e);\n          var t = this.tail;\n          e.list = this, e.prev = t, t && (t.next = e), this.tail = e, this.head || (this.head = e), this.length++;\n        }\n      }, n.prototype.push = function () {\n        for (var e = 0, t = arguments.length; e < t; e++) o(this, arguments[e]);\n\n        return this.length;\n      }, n.prototype.unshift = function () {\n        for (var e = 0, t = arguments.length; e < t; e++) s(this, arguments[e]);\n\n        return this.length;\n      }, n.prototype.pop = function () {\n        if (this.tail) {\n          var e = this.tail.value;\n          return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, e;\n        }\n      }, n.prototype.shift = function () {\n        if (this.head) {\n          var e = this.head.value;\n          return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, e;\n        }\n      }, n.prototype.forEach = function (e, t) {\n        t = t || this;\n\n        for (var r = this.head, n = 0; null !== r; n++) e.call(t, r.value, n, this), r = r.next;\n      }, n.prototype.forEachReverse = function (e, t) {\n        t = t || this;\n\n        for (var r = this.tail, n = this.length - 1; null !== r; n--) e.call(t, r.value, n, this), r = r.prev;\n      }, n.prototype.get = function (e) {\n        for (var t = 0, r = this.head; null !== r && t < e; t++) r = r.next;\n\n        if (t === e && null !== r) return r.value;\n      }, n.prototype.getReverse = function (e) {\n        for (var t = 0, r = this.tail; null !== r && t < e; t++) r = r.prev;\n\n        if (t === e && null !== r) return r.value;\n      }, n.prototype.map = function (e, t) {\n        t = t || this;\n\n        for (var r = new n(), i = this.head; null !== i;) r.push(e.call(t, i.value, this)), i = i.next;\n\n        return r;\n      }, n.prototype.mapReverse = function (e, t) {\n        t = t || this;\n\n        for (var r = new n(), i = this.tail; null !== i;) r.push(e.call(t, i.value, this)), i = i.prev;\n\n        return r;\n      }, n.prototype.reduce = function (e, t) {\n        var r,\n            n = this.head;\n        if (arguments.length > 1) r = t;else {\n          if (!this.head) throw new TypeError("Reduce of empty list with no initial value");\n          n = this.head.next, r = this.head.value;\n        }\n\n        for (var i = 0; null !== n; i++) r = e(r, n.value, i), n = n.next;\n\n        return r;\n      }, n.prototype.reduceReverse = function (e, t) {\n        var r,\n            n = this.tail;\n        if (arguments.length > 1) r = t;else {\n          if (!this.tail) throw new TypeError("Reduce of empty list with no initial value");\n          n = this.tail.prev, r = this.tail.value;\n        }\n\n        for (var i = this.length - 1; null !== n; i--) r = e(r, n.value, i), n = n.prev;\n\n        return r;\n      }, n.prototype.toArray = function () {\n        for (var e = new Array(this.length), t = 0, r = this.head; null !== r; t++) e[t] = r.value, r = r.next;\n\n        return e;\n      }, n.prototype.toArrayReverse = function () {\n        for (var e = new Array(this.length), t = 0, r = this.tail; null !== r; t++) e[t] = r.value, r = r.prev;\n\n        return e;\n      }, n.prototype.slice = function (e, t) {\n        (t = t || this.length) < 0 && (t += this.length), (e = e || 0) < 0 && (e += this.length);\n        var r = new n();\n        if (t < e || t < 0) return r;\n        e < 0 && (e = 0), t > this.length && (t = this.length);\n\n        for (var i = 0, o = this.head; null !== o && i < e; i++) o = o.next;\n\n        for (; null !== o && i < t; i++, o = o.next) r.push(o.value);\n\n        return r;\n      }, n.prototype.sliceReverse = function (e, t) {\n        (t = t || this.length) < 0 && (t += this.length), (e = e || 0) < 0 && (e += this.length);\n        var r = new n();\n        if (t < e || t < 0) return r;\n        e < 0 && (e = 0), t > this.length && (t = this.length);\n\n        for (var i = this.length, o = this.tail; null !== o && i > t; i--) o = o.prev;\n\n        for (; null !== o && i > e; i--, o = o.prev) r.push(o.value);\n\n        return r;\n      }, n.prototype.splice = function (e, t, ...r) {\n        e > this.length && (e = this.length - 1), e < 0 && (e = this.length + e);\n\n        for (var n = 0, o = this.head; null !== o && n < e; n++) o = o.next;\n\n        var s = [];\n\n        for (n = 0; o && n < t; n++) s.push(o.value), o = this.removeNode(o);\n\n        null === o && (o = this.tail), o !== this.head && o !== this.tail && (o = o.prev);\n\n        for (n = 0; n < r.length; n++) o = i(this, o, r[n]);\n\n        return s;\n      }, n.prototype.reverse = function () {\n        for (var e = this.head, t = this.tail, r = e; null !== r; r = r.prev) {\n          var n = r.prev;\n          r.prev = r.next, r.next = n;\n        }\n\n        return this.head = t, this.tail = e, this;\n      };\n\n      try {\n        e("./iterator.js")(n);\n      } catch (e) {}\n    }, {\n      "./iterator.js": 82\n    }]\n  }, {}, [12])(12);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function("return this")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === "object") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztFQUNmLE9BQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0VBQ0g7RUFDQUEsQ0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSUMsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7RUFDWDtFQUNBLElBQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQ0gsQ0FBQyxHQUFHRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQWpCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/utils/Utils.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== 'undefined' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGB\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\nfunction hex2rgba(hex) {\n  return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16), parseInt(hex.slice(7, 9), 16) / 255];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, 'object', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = 'letiable') {\n  if (!isDefined(v)) {\n    throw letName + \" must be defined\";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = 'letiable') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + \" must be of type \" + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, 'boolean', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, 'string', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, 'number', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + \" must be a positive number\";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, 'object', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + \" must be an array\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + \" must not be null\";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== 'undefined';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, \"\");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute(\"class\", div.className + \" \" + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Capitalize the first letter of a given string\n * @param {String} str - the input string\n * @returns {String} the result\n */\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf('(') + 1;\n  let endIdxValue = str.indexOf(')');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(',').map(Number);\n}\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/Status.js\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  FETCH_STARTED: 'fetch-start',\n  FETCH_ENDED: 'fetch-end',\n  CLOSED: \"closed\",\n  CLOSED_ERROR: \"closed-error\"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: 'data',\n  LAST_TIME: 'last-time',\n  MASTER_TIME: 'master-time',\n  STATUS: 'status',\n  TIME_CHANGED: 'time-changed',\n  CLOSED: 'closed'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/common/handler/DataSource.handler.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\nclass DataSource_handler_DataSourceHandler {\n  constructor() {\n    this.context = undefined;\n    this.topic = undefined;\n    this.broadcastChannel = undefined;\n    this.values = []; // this.version = -Number.MAX_SAFE_INTEGER;\n\n    this.version = 0;\n    this.properties = {\n      batchSize: 1\n    };\n    this.initialized = false;\n  }\n\n  createContext(properties) {\n    throw Error('Should be overridden');\n  }\n\n  async init(properties, topics, dataSourceId) {\n    this.dataSourceId = dataSourceId;\n    this.properties = { ...this.properties,\n      ...properties\n    };\n    this.setTopics(topics);\n    this.context = this.createContext(properties);\n    this.context.onChangeStatus = this.onChangeStatus.bind(this);\n    this.context.handleData = this.handleData.bind(this); // bind context to handler\n\n    await this.context.init(this.properties);\n    this.initialized = true;\n  }\n  /**\n   * Sets the current topic to listen\n   * @param {Object} topics - the topics to listen\n   * @param {String} topics.data - the topic to listen\n   */\n\n\n  setTopics(topics) {\n    const topic = topics.data;\n\n    if (this.topic === topic) {\n      return;\n    }\n\n    if (isDefined(this.broadcastChannel)) {\n      console.warn(`Replace old topic ${this.topic} by ${topic}`);\n      this.broadcastChannel.close();\n    }\n\n    this.broadcastChannel = new BroadcastChannel(topic);\n    this.topic = topic;\n  }\n  /**\n   * Send a change status event into the broadcast channel\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {\n    if (status === Status.DISCONNECTED) {\n      this.flushAll();\n    }\n\n    this.broadcastChannel.postMessage({\n      type: EventType.STATUS,\n      status: status,\n      dataSourceId: this.dataSourceId\n    });\n  }\n\n  handleData(data) {\n    // check if data is an array\n    if (Array.isArray(data)) {\n      for (let i = 0; i < data.length; i++) {\n        this.values.push({\n          data: data[i],\n          version: this.version\n        });\n      }\n    } else {\n      this.values.push({\n        data: data,\n        version: this.version\n      });\n    } // because parseData is ASYNC, the protocol can finish before the parsing method. In that case, we have to flushALl data\n\n\n    if (!this.isConnected()) {\n      this.flushAll();\n    }\n\n    if (this.values.length !== 0 && this.values.length >= this.properties.batchSize) {\n      this.flush();\n    }\n  }\n\n  connect(startTime = this.properties.startTime) {\n    this.context.connect();\n  }\n\n  async disconnect() {\n    return this.context.disconnect();\n  }\n\n  async updateProperties(properties) {\n    await this.disconnect();\n    this.properties = { ...this.properties,\n      ...properties\n    };\n    this.version++;\n    this.connect();\n  }\n\n  flushAll() {// while(this.values.length > 0) {\n    //     this.flush();\n    // }\n  }\n\n  flush() {\n    let nbElements = this.values.length; // console.log('push message on ',this.broadcastChannel)\n\n    this.broadcastChannel.postMessage({\n      dataSourceId: this.dataSourceId,\n      type: EventType.DATA,\n      values: this.values.splice(0, nbElements)\n    });\n  }\n\n  isInitialized() {\n    return this.initialized;\n  }\n\n  isConnected() {\n    return this.context.isConnected();\n  }\n\n}\n\n/* harmony default export */ var DataSource_handler = (DataSource_handler_DataSourceHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/Mode.js\n/**\n * Enum for datasource mode.\n * @readonly\n * @enum {{name: string}}\n */\nconst Mode = {\n  REPLAY: \"replay\",\n  BATCH: \"batch\",\n  REAL_TIME: \"realTime\"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/common/handler/TimeSeries.handler.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n// v1\n\n\n\n\n\n\nclass DelegateHandler {\n  constructor(context) {\n    this.context = context;\n    this.status = {\n      cancel: false\n    };\n  }\n\n  setContext(context) {\n    this.context = context;\n  }\n\n  init(properties) {\n    this.properties = properties;\n  }\n\n  handleData(data) {}\n\n  connect() {\n    this.status.cancel = false;\n    this.context.connect();\n  }\n\n  async disconnect() {\n    this.status.cancel = true;\n    return this.context.disconnect();\n  }\n\n  setTimeTopic(timeTopic) {\n    this.timeTopic = timeTopic;\n  }\n\n}\n\nclass DelegateRealTimeHandler extends DelegateHandler {\n  init(properties) {\n    super.init({ ...properties,\n      startTime: 'now',\n      endTime: '2055-01-01'\n    });\n    this.status = {\n      cancel: false\n    };\n\n    this.context.handleData = data => {\n      if (!this.status.cancel) {\n        this.handleData(data);\n      }\n    };\n  }\n\n  async disconnect() {\n    this.status.cancel = true;\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.context.disconnect();\n      } catch (ex) {\n        console.error(ex);\n      } finally {\n        resolve();\n      }\n    });\n  }\n\n}\n\nclass TimeSeries_handler_DelegateBatchHandler extends DelegateHandler {\n  async fetchData(startTime, endTime) {\n    console.warn(`fetching ${new Date(startTime).toISOString()} -> ` + `${new Date(endTime).toISOString()} for datasource ${this.context.properties.dataSourceId}`);\n    return this.context.nextBatch(this.properties, startTime, endTime, this.status);\n  }\n\n  connect() {\n    this.context.onChangeStatus(Status.FETCH_STARTED);\n    this.fetchData(this.properties.startTime, this.properties.endTime).then(data => {\n      if (!this.status.cancel) {\n        this.handleData(data);\n      }\n    });\n    this.context.onChangeStatus(Status.FETCH_ENDED);\n  }\n\n  async disconnect() {}\n\n}\n\nclass TimeSeries_handler_DelegateReplayHandler extends DelegateHandler {\n  constructor(context) {\n    super(context);\n    this.initialized = false;\n    this.prefetchBatchDuration = 10000; // 10 sec\n\n    this.prefetchNextBatchThreshold = 0.5; // 50%, fetch before the end\n\n    this.startTime = undefined;\n  }\n\n  init(properties) {\n    super.init(properties);\n    this.prefetchBatchDuration = properties.prefetchBatchDuration || this.prefetchBatchDuration;\n    this.status = {\n      cancel: false\n    };\n\n    if (!isDefined(this.startTime)) {\n      this.startTime = properties.startTime;\n    }\n  }\n\n  async startLoop() {\n    let startTimestamp = new Date(this.startTime).getTime();\n    let endTimestamp = new Date(this.properties.endTime).getTime();\n\n    if (startTimestamp >= endTimestamp) {\n      console.warn(`Did not connect DataSource ${this.context.properties.dataSourceId}` + ` because startTime=${this.startTime} >= endTime=${this.properties.endTime}`);\n      return;\n    }\n\n    if (!this.initialized) {\n      this.initialized = true;\n      this.status = {\n        cancel: false\n      };\n    }\n\n    let replaySpeed = this.properties.replaySpeed || 1;\n    let prefetchBatchDuration = this.properties.prefetchBatchDuration * replaySpeed;\n    let lastTimestamp;\n\n    try {\n      let data = await this.context.nextBatch();\n      this.context.onChangeStatus(Status.FETCH_STARTED);\n\n      if (this.status.cancel) {\n        return;\n      } else if (data.length > 0) {\n        this.handleData(data);\n        lastTimestamp = data[data.length - 1].timestamp;\n      }\n\n      if (lastTimestamp < endTimestamp) {\n        let masterTimestamp;\n        let fetching = false;\n        this.timeBc = new BroadcastChannel(this.timeTopic);\n\n        this.timeBc.onmessage = async event => {\n          if (event.data.type === EventType.MASTER_TIME) {\n            masterTimestamp = event.data.timestamp;\n\n            if (masterTimestamp >= endTimestamp) {\n              await this.disconnect();\n              return;\n            }\n\n            if (lastTimestamp < endTimestamp && !fetching) {\n              fetching = true;\n              let dTimestamp = lastTimestamp - masterTimestamp; // less than 5 sec\n\n              if (dTimestamp <= prefetchBatchDuration) {\n                // request next batch\n                if (!this.status.cancel) {\n                  data = await this.context.nextBatch();\n\n                  if (data.length > 0) {\n                    this.handleData(data);\n                    lastTimestamp = data[data.length - 1].timestamp;\n                  }\n                }\n              }\n\n              fetching = false;\n            }\n          }\n        };\n      }\n    } catch (ex) {\n      if (this.status.cancel) {\n        console.warn(ex);\n      } else {\n        console.error(ex);\n        throw Error(ex);\n      }\n    }\n\n    assertDefined(this.timeTopic, 'TimeTopic');\n  }\n\n  connect(startTime) {\n    if (startTime) {\n      this.startTime = startTime;\n      this.context.properties.startTime = this.startTime;\n    }\n\n    this.startLoop();\n  }\n\n  async disconnect() {\n    if (!this.initialized) {\n      console.warn(`The dataSource ${this.context.properties.dataSourceId} is not connected`);\n      return;\n    }\n\n    this.status.cancel = true;\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (isDefined(this.promise)) {\n          await this.promise;\n        }\n      } catch (ex) {// reject(ex);\n      } finally {\n        try {\n          this.promise = undefined;\n          this.context.onChangeStatus(Status.FETCH_ENDED);\n          this.context.onChangeStatus(Status.DISCONNECTED);\n          this.context.disconnect();\n\n          if (isDefined(this.timeBc)) {\n            this.timeBc.close();\n            this.timeBc = undefined;\n          }\n\n          this.initialized = false;\n        } catch (ex) {\n          console.error(ex);\n        } finally {\n          resolve();\n        }\n      }\n    });\n  }\n\n}\n\nclass TimeSeries_handler_TimeSeriesHandler extends DataSource_handler {\n  constructor() {\n    super();\n    this.timeBroadcastChannel = null;\n    this.delegateHandler = undefined;\n    this.promiseDisconnect = new Promise(resolve => {\n      resolve();\n    }); // default one\n\n    this.contexts = {};\n  }\n\n  async init(properties, topics, dataSourceId) {\n    this.dataSourceId = dataSourceId;\n    this.properties = { ...this.properties,\n      ...properties,\n      dataSourceId: dataSourceId\n    };\n    this.setTopics(topics);\n    this.contexts[this.properties.mode] = this.createContext(this.properties);\n    this.context = this.contexts[this.properties.mode];\n    this.context.onChangeStatus = this.onChangeStatus.bind(this);\n    await this.context.init(this.properties);\n    await this.updateDelegateHandler(properties);\n    this.delegateHandler.handleData = this.handleData.bind(this); // bind context to handler\n\n    this.initialized = true;\n  }\n\n  createContext(properties) {\n    throw Error('Should be overridden');\n  }\n\n  async updateDelegateHandler(properties) {\n    if (isDefined(this.delegateHandler)) {\n      await this.delegateHandler.disconnect();\n    }\n\n    if (properties.mode === Mode.REAL_TIME) {\n      this.delegateRealTimeHandler = new DelegateRealTimeHandler(this.context);\n      this.delegateHandler = this.delegateRealTimeHandler;\n    } else if (properties.mode === Mode.REPLAY) {\n      this.delegateReplayHandler = new TimeSeries_handler_DelegateReplayHandler(this.context);\n      this.delegateHandler = this.delegateReplayHandler;\n    } else if (properties.mode === Mode.BATCH) {\n      this.delegateBatchHandler = new TimeSeries_handler_DelegateBatchHandler(this.context);\n      this.delegateHandler = this.delegateBatchHandler;\n    }\n\n    this.delegateHandler.init(properties);\n    this.delegateHandler.setTimeTopic(this.timeSyncTopic);\n  }\n\n  async updateProperties(properties) {\n    try {\n      this.timeBroadcastChannel.postMessage({\n        dataSourceId: this.dataSourceId,\n        type: EventType.TIME_CHANGED\n      });\n      await this.disconnect();\n      this.properties = { ...this.properties,\n        ...properties\n      };\n\n      if (!(this.properties.mode in this.contexts)) {\n        console.warn(`creating new context for mode ${this.properties.mode}`);\n        this.contexts[this.properties.mode] = this.createContext(this.properties);\n      }\n\n      this.context = this.contexts[this.properties.mode];\n      this.context.onChangeStatus = this.onChangeStatus.bind(this);\n      await this.context.init(this.properties);\n      await this.updateDelegateHandler(this.properties);\n      this.delegateHandler.handleData = this.handleData.bind(this); // bind context to handler\n\n      this.connect();\n    } catch (ex) {\n      console.error(ex);\n      throw ex;\n    }\n  }\n\n  setTopics(topics) {\n    super.setTopics(topics);\n    this.timeSyncTopic = undefined;\n\n    if (isDefined(topics.time)) {\n      this.setTimeTopic(topics.time);\n    }\n\n    if (isDefined(topics.sync)) {\n      this.timeSyncTopic = topics.sync;\n      this.delegateHandler.setTimeTopic(this.timeSyncTopic);\n    }\n  }\n\n  setTimeTopic(timeTopic) {\n    if (this.timeTopic === timeTopic) {\n      return;\n    }\n\n    if (this.timeBroadcastChannel !== null) {\n      console.warn(`Replace old topic ${this.timeTopic} by ${timeTopic}`);\n      this.timeBroadcastChannel.close();\n    }\n\n    this.timeBroadcastChannel = new BroadcastChannel(timeTopic);\n    this.timeTopic = timeTopic;\n  }\n\n  flushAll() {\n    if (this.properties.mode !== Mode.BATCH && this.values.length > 0) {\n      this.flush();\n    }\n  }\n\n  flush() {\n    // console.log('push message on ',this.broadcastChannel)\n    this.broadcastChannel.postMessage({\n      dataSourceId: this.dataSourceId,\n      type: EventType.DATA,\n      values: this.values\n    });\n    this.values = [];\n  }\n\n  handleData(data) {\n    const results = [];\n\n    if (Array.isArray(data)) {\n      if (data.length === 0) {\n        console.warn(`Data array is empty for datasource ${this.dataSourceId}`);\n        return;\n      }\n\n      let d;\n\n      for (let i = 0; i < data.length; i++) {\n        d = {\n          data: data[i],\n          version: data[i].version\n        };\n        results.push(d);\n      }\n    } else {\n      results.push({\n        data: data,\n        version: data[0].version\n      });\n    }\n\n    if (results.length > 0) {\n      this.lastData = results[results.length - 1];\n\n      if (data[0].version !== this.properties.version) {\n        console.warn('incompatible version, drop data');\n      }\n    }\n\n    this.broadcastChannel.postMessage({\n      dataSourceId: this.dataSourceId,\n      type: EventType.DATA,\n      values: results\n    });\n\n    if (this.timeBroadcastChannel !== null) {\n      if (data.length > 0) {\n        this.timeBroadcastChannel.postMessage({\n          timestamp: data[data.length - 1].timestamp,\n          type: EventType.LAST_TIME\n        });\n      }\n    }\n  }\n\n  isConnected() {\n    if (isDefined(this.delegateHandler.context)) {\n      return this.delegateHandler.context.isConnected();\n    } else {\n      return false;\n    }\n  }\n\n  async checkDisconnect() {\n    await this.promiseDisconnect;\n  }\n\n  async connect(startTime = this.properties.startTime, version = this.properties.version) {\n    this.properties.version = version;\n    await this.checkDisconnect();\n\n    if (this.delegateHandler instanceof TimeSeries_handler_DelegateReplayHandler && !isDefined(this.timeSyncTopic)) {\n      throw Error('DataSynchronizer must be used in case of Mode.REPLAY');\n    }\n\n    this.context.init(this.properties);\n    this.delegateHandler.connect(startTime);\n  }\n\n  async disconnect() {\n    this.promiseDisconnect = this.delegateHandler.disconnect();\n    return this.promiseDisconnect;\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_handler = (TimeSeries_handler_TimeSeriesHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/common/context/DataSource.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\nclass DataSourceContext {\n  constructor() {\n    this.connector = undefined;\n    this.properties = undefined;\n  }\n\n  async init(properties) {\n    // this.parser.init(properties);\n    this.properties = properties;\n    this.connector = await this.createDataConnector(properties);\n    this.connector.onChangeStatus = this.onChangeStatus.bind(this);\n    this.connector.onMessage = this.onMessage.bind(this);\n  }\n\n  async createDataConnector(properties) {}\n\n  connect() {}\n\n  async onMessage(messages, format) {}\n\n  async disconnect() {}\n\n  handleData(data) {}\n\n  isConnected() {\n    return false;\n  }\n\n  onChangeStatus(status) {}\n\n}\n\n/* harmony default export */ var DataSource_context = (DataSourceContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/AbstractParser.js\n\nclass AbstractParser_AbstractParser {\n  constructor() {\n    this.stack = [];\n    this.time = undefined;\n    this.idRef = undefined;\n  }\n\n  init(element, props, path) {\n    this.props = props;\n    this.name = element.name;\n    this.path = path;\n    this.checkTime(element);\n    this.checkId(element);\n    this.build(element);\n  }\n\n  parseElement(element, path) {\n    let parser;\n\n    if (isDefined(path)) {\n      this.path = path;\n    }\n\n    if (isDefined(this.path) && this.path in this.props.refs) {\n      parser = new RefParser(this.props.refs[this.path]);\n    } else if (element.name in this.props.refs) {\n      parser = new RefParser(this.props.refs[element.name]);\n    } else if (element.type in this.props.registeredParser) {\n      parser = this.props.registeredParser[element.type]();\n    } else if (element.hasOwnProperty('href')) {\n      if ('href' in this.props.registeredParser) {\n        parser = this.props.registeredParser['href']();\n      } else {\n        parser = new HRefParser();\n      }\n    } else if (element.type === 'DataRecord') {\n      parser = new DataRecordParser(element, this.props);\n    } else if (element.type === 'Vector') {\n      parser = new VectorParser(element, this.props);\n    } else if (element.type === 'DataArray') {\n      parser = new DataArrayParser(element, this.props);\n    }\n\n    if (parser) {\n      parser.init(element, this.props, this.path);\n      this.stack.push(parser);\n    }\n  }\n\n  build(element) {}\n\n  parse(dataTypeParser, props, resultParent) {\n    for (let parser of this.stack) {\n      parser.parse(dataTypeParser, props, resultParent);\n    }\n  }\n\n  checkId(element) {\n    if ('id' in element) {\n      this.idRef = element['id'];\n      this.props.nodesId[this.idRef] = this;\n    }\n  }\n\n  checkIdValue(value) {\n    if (this.idRef) {\n      this.props.nodesIdValue[this.idRef] = value;\n    }\n  } // To be overridden by Time parser\n\n\n  checkTime(element) {}\n\n  getTimePropertyName() {\n    if (!this.time) {\n      // sub element, first level\n      for (let parser of this.stack) {\n        this.time = parser.getTimePropertyName();\n\n        if (this.time) {\n          break;\n        }\n      }\n    }\n\n    return this.time;\n  }\n\n  splitRefName(ref) {\n    const split = ref.split('/');\n\n    if (split.length > 0) {\n      return split[split.length - 1];\n    } else {\n      return ref;\n    }\n  }\n\n}\n\nclass RefParser extends AbstractParser_AbstractParser {\n  constructor(parser) {\n    super();\n    this.parser = parser;\n  }\n\n  build(element) {\n    if (this.parser && this.parser.name) {\n      this.name = this.parser.name;\n    }\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    this.parser.parse(dataTypeParser, props, resultParent);\n  }\n\n}\n\nclass DataRecordParser extends AbstractParser_AbstractParser {\n  build(element) {\n    // DataRecords + fields\n    let fieldName = undefined;\n\n    if (element.hasOwnProperty('fields')) {\n      fieldName = 'fields';\n    } else if (element.hasOwnProperty('field')) {\n      fieldName = 'field';\n    }\n\n    if (!fieldName) {\n      return;\n    }\n\n    let currentPath = this.path ? this.path + '/' : '/';\n\n    if (Array.isArray(element[fieldName])) {\n      for (let field of element[fieldName]) {\n        this.parseElement(field, currentPath + field.name);\n      }\n    } else {\n      this.parseElement(element[fieldName], currentPath + element[fieldName].name);\n    }\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    if (!this.name) {\n      super.parse(dataTypeParser, props, resultParent);\n    } else {\n      // parse size of the array\n      const result = {};\n\n      for (let parser of this.stack) {\n        parser.parse(dataTypeParser, props, result);\n      }\n\n      resultParent[this.name] = result;\n    }\n  }\n\n}\n\nclass DataArrayParser extends AbstractParser_AbstractParser {\n  build(element) {\n    // find elementCount parser\n    let currentPath = this.path;\n\n    if ('name' in element) {\n      currentPath = this.path ? this.path + '/' : '/';\n      currentPath += element['name'];\n    }\n\n    this.parseElement(element['elementCount'], currentPath);\n    this.parseElement(element['elementType'], currentPath);\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    // parse size of the array\n    const objectSize = {};\n    this.stack[0].parse(dataTypeParser, props, objectSize);\n    let size = Object.values(objectSize)[0];\n    const elementTypeParser = this.stack[1];\n    let dataarrayResults = [];\n\n    for (let i = 0; i < size; i++) {\n      const subResult = {};\n      elementTypeParser.parse(dataTypeParser, props, subResult);\n      dataarrayResults.push(subResult[elementTypeParser.name]);\n    }\n\n    resultParent[this.name] = dataarrayResults;\n  }\n\n}\n\nclass VectorParser extends AbstractParser_AbstractParser {\n  build(element) {\n    // Vector + coordinate\n    let coordinatePropertyName = 'coordinates';\n\n    if ('coordinate' in element) {\n      coordinatePropertyName = 'coordinate';\n    }\n\n    let currentPath = this.path ? this.path + '/' : '/';\n\n    for (let coordinate of element[coordinatePropertyName]) {\n      this.parseElement(coordinate, currentPath + coordinate.name);\n    }\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    // parse size of the array\n    const coordinates = {};\n\n    for (let parser of this.stack) {\n      parser.parse(dataTypeParser, props, coordinates);\n    }\n\n    resultParent[this.name] = coordinates;\n  }\n\n}\n\nclass HRefParser extends AbstractParser_AbstractParser {\n  build(element) {\n    // find into href tree\n    const hashLink = element.href;\n\n    if (hashLink[0] !== '#') {\n      throw Error(`Href should start with #: ${hashLink}`);\n    } // remove first #\n\n\n    const id = hashLink.slice(1);\n\n    if (!(id in this.props.nodesId)) {\n      throw Error(`id ${id} not found in the id Tree`);\n    }\n\n    this.id = id;\n    this.parser = this.props.nodesId[id];\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    // if (!(this.id in this.props.nodesIdValue)) {\n    //     throw Error(`id ${this.id} not found in the idValue Tree`);\n    // }\n    // resultParent[this.parser.name] = this.props.nodesIdValue[this.id];\n    if (this.id in this.props.nodesIdValue) {\n      resultParent[this.parser.name] = this.props.nodesIdValue[this.id];\n    } else {\n      this.parser.parse(dataTypeParser, props, resultParent);\n    }\n  }\n\n}\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/RootParser.js\n\n\nclass RootParser_RootParser extends AbstractParser_AbstractParser {\n  build(element) {\n    this.parseElement(element);\n  }\n\n}\n\n/* harmony default export */ var common_RootParser = (RootParser_RootParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/GenericParser.js\n\n\nclass GenericParser_GenericParser {\n  constructor(rootElement, props) {\n    this.textDecoder = new TextDecoder();\n    this.nodesId = {};\n    this.parsers = [];\n    this.count = 0;\n    this.props = props;\n    this.parser = new common_RootParser();\n  }\n\n  decode(input) {\n    if (input instanceof ArrayBuffer) {\n      return JSON.parse(this.textDecoder.decode(input));\n    } else {\n      try {\n        return JSON.parse(input);\n      } catch (e) {\n        return input;\n      }\n    }\n  }\n\n}\n\n/* harmony default export */ var parsers_GenericParser = (GenericParser_GenericParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/BinaryEncodingParser.js\n\n\nclass BinaryEncodingParser_BinaryEncodingParser extends AbstractParser_AbstractParser {\n  build(element) {\n    // iterate over member\n    // old SOS property name\n    let memberPropertyName = 'member'; // new SWE property name\n\n    if ('members' in element) {\n      memberPropertyName = 'members';\n    }\n\n    for (let member of element[memberPropertyName]) {\n      this.parseElement(member);\n    }\n  }\n\n}\n\n/* harmony default export */ var binary_BinaryEncodingParser = (BinaryEncodingParser_BinaryEncodingParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/MemberParser.js\n\n\nclass MemberParser_MemberParser extends AbstractParser_AbstractParser {\n  build(element) {\n    this.parseElement(element);\n  }\n\n}\n\n/* harmony default export */ var binary_MemberParser = (MemberParser_MemberParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryDoubleDataTypeDecoder.js\n// http://www.opengis.net/def/dataType/OGC/0/double\nclass BinaryDoubleDataTypeDecoder {\n  decode(dataView, offset, littleEndian = false) {\n    return dataView.getFloat64(offset, littleEndian);\n  }\n\n  length() {\n    return 8;\n  }\n\n}\n\n/* harmony default export */ var dataType_BinaryDoubleDataTypeDecoder = (BinaryDoubleDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryIntegerDataTypeDecoder.js\n//http://www.opengis.net/def/dataType/OGC/0/signedInt\nclass BinaryIntegerDataTypeDecoder {\n  decode(dataView, offset, littleEndian = false) {\n    return dataView.getUint32(offset, littleEndian);\n  }\n\n  length() {\n    return 4;\n  }\n\n}\n\n/* harmony default export */ var dataType_BinaryIntegerDataTypeDecoder = (BinaryIntegerDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryShortDataTypeDecoder.js\n//http://www.opengis.net/def/dataType/OGC/0/signedShort\nclass BinaryShortDataTypeDecoder {\n  decode(dataView, offset, littleEndian = false) {\n    return dataView.getInt16(offset, littleEndian);\n  }\n\n  length() {\n    return 2;\n  }\n\n}\n\n/* harmony default export */ var dataType_BinaryShortDataTypeDecoder = (BinaryShortDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryFloat32DataTypeDecoder.js\n//http://www.opengis.net/def/dataType/OGC/0/float32\nclass BinaryFloat32DataTypeDecoder {\n  decode(dataView, offset, littleEndian = false) {\n    return dataView.getFloat32(offset, littleEndian);\n  }\n\n  length() {\n    return 4;\n  }\n\n}\n\n/* harmony default export */ var dataType_BinaryFloat32DataTypeDecoder = (BinaryFloat32DataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryStringUtf8DataTypeDecoder.js\n// http://www.opengis.net/def/dataType/OGC/0/string-utf-8\nDataView.prototype.getString = function (offset, length, littleEndian) {\n  let end = typeof length == 'number' ? offset + length : this.byteLength;\n  let text = '';\n  let val = -1;\n\n  while (offset < this.byteLength && offset < end) {\n    val = this.getUint8(offset++, littleEndian);\n    if (val === 0) break;\n    text += String.fromCharCode(val);\n  }\n\n  return text;\n};\n\nconst decoderForStringDataTypeDecoder = new TextDecoder(\"utf-8\");\n\nclass BinaryStringDataTypeDecoder {\n  decode(dataView, offset, littleEndian = false) {\n    this.strLength = dataView.getUint16(offset, littleEndian);\n    return decoderForStringDataTypeDecoder.decode(new DataView(dataView.buffer, offset + 2, this.strLength));\n  }\n\n  length() {\n    // 2 = size of the strLength at the beginning of the string = getUint16()\n    return this.strLength + 2;\n  }\n\n}\n\n/* harmony default export */ var BinaryStringUtf8DataTypeDecoder = (BinaryStringDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/ComponentParser.js\n\n\n\n\n\n\n\nclass ComponentParser_ComponentParser extends AbstractParser_AbstractParser {\n  constructor(binaryDataTypeDecoder) {\n    super();\n    this.refs = {};\n    this.binaryDataTypeDecoder = binaryDataTypeDecoder;\n  }\n\n  build(element) {\n    this.name = this.splitRefName(element.ref);\n\n    if (element.dataType === 'http://www.opengis.net/def/dataType/OGC/0/double') {\n      this.refs[element.ref] = new dataType_BinaryDoubleDataTypeDecoder();\n    } else if (element.dataType === 'http://www.opengis.net/def/dataType/OGC/0/signedInt') {\n      this.refs[element.ref] = new dataType_BinaryIntegerDataTypeDecoder();\n    } else if (element.dataType === 'http://www.opengis.net/def/dataType/OGC/0/signedShort') {\n      this.refs[element.ref] = new dataType_BinaryShortDataTypeDecoder();\n    } else if (element.dataType === 'http://www.opengis.net/def/dataType/OGC/0/float32') {\n      this.refs[element.ref] = new dataType_BinaryFloat32DataTypeDecoder();\n    } else if (element.dataType === 'http://www.opengis.net/def/dataType/OGC/0/string-utf-8') {\n      this.refs[element.ref] = new BinaryStringUtf8DataTypeDecoder();\n    }\n\n    if (element.ref in this.refs) {\n      this.binaryDataTypeDecoder.addRef(element.ref, this.refs[element.ref]);\n    }\n  }\n\n}\n\n/* harmony default export */ var binary_ComponentParser = (ComponentParser_ComponentParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryBlockDataTypeDecoder.js\nclass BinaryBlockDataTypeDecoder {\n  decode(dataView, offset, littleEndian = false) {\n    const pktLength = dataView.getUint32(offset, littleEndian); // integer | 4 bytes | 32 bits\n\n    const data = new Uint8Array(dataView.buffer.slice(offset + 4, offset + 4 + pktLength));\n\n    this.length = () => pktLength + 4;\n\n    return data;\n  }\n\n  length() {\n    return 0;\n  }\n\n}\n\n/* harmony default export */ var dataType_BinaryBlockDataTypeDecoder = (BinaryBlockDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/BlockParser.js\n\n\n\nclass BlockParser_BlockParser extends AbstractParser_AbstractParser {\n  constructor(binaryDataTypeDecoder) {\n    super();\n    this.binaryDataTypeDecoder = binaryDataTypeDecoder;\n  }\n\n  build(element) {\n    this.staticProps = {}; // check for static props\n\n    for (let prop in element) {\n      if (prop !== 'ref' && prop !== 'type') {\n        this.staticProps[prop] = element[prop];\n      }\n    }\n\n    this.name = this.splitRefName(element.ref);\n    this.path = element.ref;\n    this.props.refs[element.ref] = this;\n    this.binaryDataTypeDecoder.addRef(element.ref, new dataType_BinaryBlockDataTypeDecoder());\n    this.binaryDataTypeDecoder.hasBlock = true;\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    // everytime a binaryblock is defined in the binary encoding, there will be a 4-bytes length field before it\n    const block = {\n      data: dataTypeParser.nextToken(this.path)\n    };\n\n    for (let prop in this.staticProps) {\n      block[prop] = this.staticProps[prop];\n    }\n\n    resultParent[this.name] = block;\n  }\n\n}\n\n/* harmony default export */ var binary_BlockParser = (BlockParser_BlockParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/AbstractDataTypeDecoder.js\nclass AbstractDataTypeDecoder {\n  constructor(props) {\n    this.props = props;\n  }\n\n  init() {}\n\n  setData(data) {\n    this.data = data;\n    this.init();\n  }\n\n  checkInit() {\n    throw Error('Unsupported Operation');\n  }\n\n  nextToken() {\n    throw Error('Unsupported Operation');\n  }\n\n  hasNextBlock() {\n    throw Error('Unsupported Operation');\n  }\n\n}\n\n/* harmony default export */ var parsers_AbstractDataTypeDecoder = (AbstractDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/dataType/BinaryDataTypeDecoder.js\n\n\nclass BinaryDataTypeDecoder_BinaryDataTypeDecoder extends parsers_AbstractDataTypeDecoder {\n  constructor(props) {\n    super(props);\n    this.decoders = {};\n    this.componentsLength = 0;\n  }\n\n  init() {\n    this.data = new DataView(this.data);\n    this.componentIdx = 0;\n    this.tokenOffset = 0;\n  }\n\n  nextToken(path) {\n    let decoder = this.decoders[path]; // block Offset + token Offset\n\n    const token = decoder.decode(this.data, this.tokenOffset, this.props.littleEndian);\n    this.tokenOffset += decoder.length();\n    return token;\n  }\n\n  hasNextBlock() {\n    return this.tokenOffset < this.data.buffer.byteLength;\n  }\n\n  addRef(ref, decoder) {\n    this.decoders[ref] = decoder;\n    this.componentsLength += decoder.length();\n  }\n\n}\n\n/* harmony default export */ var dataType_BinaryDataTypeDecoder = (BinaryDataTypeDecoder_BinaryDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/StringParser.js\n\n\nclass StringParser_StringParser extends AbstractParser_AbstractParser {\n  parse(dataTypeParser, props, resultParent) {\n    resultParent[this.name] = dataTypeParser.nextToken(this.path);\n  }\n\n}\n\n/* harmony default export */ var common_StringParser = (StringParser_StringParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/DecimalParser.js\n\n\nclass DecimalParser_DecimalParser extends AbstractParser_AbstractParser {\n  parse(dataTypeParser, props, resultParent) {\n    let token = dataTypeParser.nextToken(this.path);\n    let val;\n    if (\"INF\" === token || \"+INF\" === token) val = Number.POSITIVE_INFINITY;else if (\"-INF\" === token) val = Number.NEGATIVE_INFINITY;else val = parseFloat(token);\n    resultParent[this.name] = val;\n  }\n\n}\n\n/* harmony default export */ var common_DecimalParser = (DecimalParser_DecimalParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/CountParser.js\n\n\nclass CountParser_CountParser extends AbstractParser_AbstractParser {\n  build(element) {\n    if ('value' in element) {\n      this.value = parseInt(element['value']);\n    }\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    let value = this.value ? this.value : parseInt(dataTypeParser.nextToken(this.path));\n    super.checkIdValue(value);\n    resultParent[this.name] = value;\n  }\n\n}\n\n/* harmony default export */ var common_CountParser = (CountParser_CountParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/BooleanParser.js\n\n\nclass BooleanParser_BooleanParser extends AbstractParser_AbstractParser {\n  parse(dataTypeParser, props, resultParent) {\n    let token = dataTypeParser.nextToken(this.path);\n    resultParent[this.name] = token === '0' || token.toLowerCase() === 'true';\n  }\n\n}\n\n/* harmony default export */ var common_BooleanParser = (BooleanParser_BooleanParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/AbstractDataChoiceParser.js\n\n\nclass AbstractDataChoiceParser_AbstractDataChoiceParser extends AbstractParser_AbstractParser {\n  build(element) {\n    let itemName = undefined;\n\n    if (element.hasOwnProperty('items')) {\n      itemName = 'items';\n    } else if (element.hasOwnProperty('item')) {\n      itemName = 'item';\n    }\n\n    this.itemToParserMap = {};\n\n    for (let item of element[itemName]) {\n      this.parseElement(item);\n    } // index parser depending on input name\n\n\n    for (let parser of this.stack) {\n      this.itemToParserMap[parser.name] = parser;\n    }\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    throw new Error('Unsupported Operation');\n  }\n\n}\n\n/* harmony default export */ var common_AbstractDataChoiceParser = (AbstractDataChoiceParser_AbstractDataChoiceParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/DataChoiceParser.js\n\n\nclass DataChoiceParser_DataChoiceParser extends common_AbstractDataChoiceParser {\n  parse(dataTypeParser, props, resultParent) {\n    let itemName = dataTypeParser.nextToken(this.path);\n    this.itemToParserMap[itemName].parse(dataTypeParser, props, resultParent);\n  }\n\n}\n\n/* harmony default export */ var common_DataChoiceParser = (DataChoiceParser_DataChoiceParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/TimeParser.js\n\n\nclass TimeParser_TimeParser extends AbstractParser_AbstractParser {\n  parse(dataTypeParser, props, resultParent) {\n    let token = dataTypeParser.nextToken(this.path);\n    resultParent[this.name] = new Date(token).toISOString();\n  }\n\n  checkTime(element) {\n    if ('definition' in element && (element['definition'] === 'http://www.opengis.net/def/property/OGC/0/SamplingTime' || element['definition'] === 'http://www.opengis.net/def/property/OGC/0/PhenomenonTime')) {\n      this.time = this.name;\n    }\n  }\n\n}\n\n/* harmony default export */ var common_TimeParser = (TimeParser_TimeParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/binary/BinaryTimeParser.js\n\n\nclass BinaryTimeParser_BinaryTimeParser extends common_TimeParser {\n  constructor() {\n    super();\n  }\n\n  parse(dataTypeParser, props, resultParent) {\n    let token = dataTypeParser.nextToken(this.path);\n    resultParent[this.name] = new Date(token * 1000).toISOString();\n  }\n\n}\n\n/* harmony default export */ var binary_BinaryTimeParser = (BinaryTimeParser_BinaryTimeParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/BinaryDataParser.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BinaryDataParser_BinaryDataParser extends parsers_GenericParser {\n  constructor(rootElement, encoding, properties = {\n    timeShift: 0\n  }) {\n    console.log(encoding);\n    super(rootElement, {\n      nodesId: {},\n      nodesIdValue: {},\n      registeredParser: {},\n      refs: {},\n      ...properties\n    });\n    this.resultEncoding = encoding;\n    this.binaryDataTypeDecoder = new dataType_BinaryDataTypeDecoder({ ...encoding,\n      littleEndian: encoding.byteOrder === 'littleEndian'\n    });\n    const propsEncoding = {\n      nodesId: {},\n      nodesIdValue: {},\n      registeredParser: {\n        'member': () => new binary_MemberParser(),\n        'Component': () => new binary_ComponentParser(this.binaryDataTypeDecoder),\n        'Block': () => new binary_BlockParser(this.binaryDataTypeDecoder),\n        'BinaryEncoding': () => new binary_BinaryEncodingParser()\n      },\n      refs: {}\n    }; // parse ResultEncoding\n\n    const rootElementEncoding = new common_RootParser();\n    rootElementEncoding.init(encoding, propsEncoding); // parse schema\n\n    this.props.registeredParser = {\n      'Time': () => new binary_BinaryTimeParser(),\n      'Text': () => new common_StringParser(),\n      'Category': () => new common_StringParser(),\n      'Quantity': () => new common_DecimalParser(),\n      'Count': () => new common_CountParser(),\n      'Boolean': () => new common_BooleanParser(),\n      'DataChoice': () => new common_DataChoiceParser()\n    }; //\n\n    this.parser.init(rootElement, { ...this.props,\n      refs: propsEncoding.refs\n    }, '');\n  }\n\n  parseDataBlock(arrayBuffer) {\n    this.binaryDataTypeDecoder.setData(arrayBuffer);\n    let results = [];\n\n    while (this.binaryDataTypeDecoder.hasNextBlock()) {\n      const res = {};\n      this.parser.parse(this.binaryDataTypeDecoder, {}, res);\n      res['timestamp'] = new Date(res[this.parser.getTimePropertyName()]).getTime() + this.props.timeShift;\n      results.push(res);\n      break;\n    }\n\n    return results;\n  }\n\n}\n\n/* harmony default export */ var parsers_BinaryDataParser = (BinaryDataParser_BinaryDataParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/DataConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataConnector is the abstract class used to create different connectors.\n */\n\nclass DataConnector_DataConnector {\n  /**\n   * @param {String} url - The full url used to connect to the data stream\n   */\n  constructor(url, properties) {\n    this.url = url;\n    this.properties = properties;\n    this.id = \"DataConnector-\" + randomUUID();\n    this.reconnectTimeout = 1000 * 20; // 20 sec\n\n    this.status = Status.DISCONNECTED;\n  }\n\n  disconnect() {\n    this.checkStatus(Status.DISCONNECTED);\n    this.checkAndClearReconnection();\n  }\n  /**\n   * Sets the url\n   * @param url\n   */\n\n\n  setUrl(url) {\n    this.url = url;\n  }\n  /**\n   * The data protocol default id.\n   * @return {String}\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * The stream url.\n   * @return {String}\n   */\n\n\n  getUrl() {\n    return this.url;\n  }\n  /**\n   * Sets the reconnection timeout\n   * @param {Number} timeout - delay in milliseconds before reconnecting dataSource\n   */\n\n\n  setReconnectTimeout(timeout) {\n    this.reconnectTimeout = timeout;\n  }\n\n  onReconnect() {\n    return true;\n  }\n\n  connect() {}\n\n  forceReconnect() {\n    this.disconnect();\n    this.connect();\n  }\n  /**\n   * Called when the connection STATUS changes\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {}\n  /**\n   * Check a change of the status and call the corresponding callbacks if necessary\n   * @param {Status} status - the currentStatus\n   */\n\n\n  checkStatus(status) {\n    if (status !== this.status) {\n      this.onChangeStatus(status);\n      this.status = status;\n    }\n  }\n  /**\n   * Called when the protocol has been disconnected\n   */\n\n\n  onDisconnect() {}\n  /**\n   * Called when the protocol has been connected\n   */\n\n\n  onConnect() {}\n\n  postRequest() {}\n\n  publishRequest() {}\n\n  reset() {}\n\n  close() {}\n\n  onClose(statusCode) {}\n\n  onError(reason) {}\n\n}\n\n/* harmony default export */ var connector_DataConnector = (DataConnector_DataConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/WebSocketConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * Defines the WebSocketConnector to connect to a remote server by creating a WebSocket channel.\n * @extends DataConnector\n * @example\n * import WebSocketConnector from 'osh-js/dataconnector/WebSocketConnector.js';\n *\n * let url = ...;\n * let connector = new WebSocketConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nlet reconnectionInterval = -1;\n\nclass WebSocketConnector_WebSocketConnector extends connector_DataConnector {\n  /**\n   *\n   * @param url -\n   * @param {Object} properties -\n   */\n  constructor(url, properties) {\n    super(url, properties);\n    this.interval = -1;\n    this.lastReceiveTime = 0;\n    this.extraUrl = '';\n    this.reconnectRetry = properties && properties.reconnectRetry || 10;\n  }\n  /**\n   * Connect to the webSocket. If the system supports WebWorker, it will automatically creates one otherwise use\n   * the main thread.\n   */\n\n\n  doRequest(extraUrl = this.extraUrl, queryString = this.queryString) {\n    if (!this.init) {\n      this.extraUrl = extraUrl;\n      this.queryString = queryString;\n      let fullUrl = this.getUrl() + extraUrl;\n\n      if (isDefined(queryString)) {\n        fullUrl += '?' + queryString;\n      }\n\n      this.closed = false;\n      this.init = true; //creates Web Socket\n\n      this.ws = new WebSocket(fullUrl);\n      this.ws.binaryType = 'arraybuffer';\n      this.checkStatus(Status.CONNECTING);\n      console.warn('WebSocket stream connecting');\n\n      this.ws.onopen = function (event) {\n        this.checkAndClearReconnection();\n        this.checkStatus(Status.CONNECTED);\n        console.warn('WebSocket stream connected');\n      }.bind(this);\n\n      this.ws.onmessage = function (event) {\n        this.lastReceiveTime = Date.now(); //callback data on message received\n\n        if (event.data.byteLength > 0) {\n          this.onMessage(event.data);\n        }\n      }.bind(this); // closes socket if any errors occur\n\n\n      this.ws.onerror = function (event) {\n        console.error('WebSocket stream error');\n        this.checkStatus(Status.CLOSED_ERROR);\n        this.init = false;\n        this.lastReceiveTime = -1;\n        this.createReconnection();\n        this.onError(event);\n      }.bind(this);\n\n      this.ws.onclose = event => {\n        console.warn('WebSocket stream closed: ', event.reason, event.code);\n\n        if (event.code !== 1000 && !this.closed) {\n          this.checkStatus(Status.CLOSED_ERROR);\n          this.createReconnection();\n        } else {\n          this.checkStatus(Status.DISCONNECTED);\n        }\n\n        this.onClose(event.code);\n      };\n\n      if (this.reconnectionInterval !== -1) {\n        clearInterval(this.reconnectionInterval);\n        this.reconnectionInterval = -1;\n      }\n    }\n  }\n  /**\n   * Connect to the webSocket. If the system supports WebWorker, it will automatically creates one otherwise use\n   * the main thread.\n   */\n\n\n  doAsyncRequest(extraUrl = this.extraUrl, queryString = this.queryString) {\n    return new Promise(async (resolve, reject) => {\n      if (!this.init) {\n        this.extraUrl = extraUrl;\n        this.queryString = queryString;\n        let fullUrl = this.getUrl() + extraUrl;\n\n        if (isDefined(queryString)) {\n          fullUrl += '?' + queryString;\n        }\n\n        this.closed = false;\n        this.init = true; //creates Web Socket\n\n        this.ws = new WebSocket(fullUrl);\n        this.ws.binaryType = 'arraybuffer';\n        this.checkStatus(Status.CONNECTING);\n        console.warn('WebSocket stream connecting');\n        const results = [];\n\n        this.ws.onopen = function (event) {\n          this.checkAndClearReconnection();\n          this.checkStatus(Status.CONNECTED);\n          console.warn('WebSocket stream connected');\n        }.bind(this);\n\n        this.ws.onmessage = function (event) {\n          this.lastReceiveTime = Date.now(); //callback data on message received\n\n          if (event.data.byteLength > 0) {\n            // this.onMessage(event.data);\n            results.push(event.data);\n          }\n        }.bind(this); // closes socket if any errors occur\n\n\n        this.ws.onerror = function (event) {\n          console.error('WebSocket stream error');\n          this.checkStatus(Status.CLOSED_ERROR);\n          this.init = false;\n          this.lastReceiveTime = -1;\n          this.createReconnection();\n          this.onError(event);\n          reject(`onError WS: ${event}`);\n        }.bind(this);\n\n        this.ws.onclose = event => {\n          console.warn('WebSocket stream closed: ', event.reason, event.code);\n\n          if (event.code !== 1000 && !this.closed) {\n            this.checkStatus(Status.CLOSED_ERROR);\n            this.createReconnection();\n          } else {\n            this.checkStatus(Status.DISCONNECTED);\n          }\n\n          this.onClose(event.code);\n          resolve(results);\n        };\n\n        if (this.reconnectionInterval !== -1) {\n          clearInterval(this.reconnectionInterval);\n          this.reconnectionInterval = -1;\n        }\n      }\n    });\n  }\n\n  connect() {\n    this.doRequest();\n  }\n\n  publishRequest(topic, payload) {\n    if (isDefined(this.ws)) {\n      this.ws.send(payload);\n    }\n  }\n\n  checkAndClearReconnection() {\n    if (reconnectionInterval !== -1) {\n      clearInterval(reconnectionInterval);\n      reconnectionInterval = -1;\n    }\n  }\n\n  createReconnection() {\n    if (!this.closed && reconnectionInterval === -1 && this.onReconnect()) {\n      let count = 0;\n      const url = this.url;\n      reconnectionInterval = setInterval(function () {\n        let delta = Date.now() - this.lastReceiveTime; // -1 means the WS went in error\n\n        if (this.lastReceiveTime === -1 || delta >= this.reconnectTimeout) {\n          if (count++ >= this.reconnectRetry) {\n            console.warn(`Maximum reconnection retries attempted: ${this.reconnectRetry}`);\n            clearInterval(reconnectionInterval);\n          } else {\n            let fullUrl = url;\n\n            if (isDefined(this.extraUrl)) {\n              fullUrl += this.extraUrl;\n            }\n\n            if (isDefined(this.queryString)) {\n              fullUrl += '?' + this.queryString;\n            }\n\n            console.warn(`(${count}/${this.reconnectRetry}) trying to reconnect: ${fullUrl}`);\n            this.init = false;\n            this.connect();\n          }\n        }\n      }.bind(this), this.reconnectTimeout);\n    }\n  }\n  /**\n   * Disconnects and close the websocket.\n   */\n\n\n  async disconnect() {\n    // super.disconnect();\n    this.init = false;\n    this.closed = true;\n\n    if (this.ws != null && this.ws.readyState !== WebSocket.CLOSED) {\n      this.ws.close();\n    }\n  }\n  /**\n   * The onMessage method used by the websocket to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  async onMessage(data) {}\n\n  isConnected() {\n    return this.ws != null && this.ws.readyState === WebSocket.OPEN;\n  }\n\n}\n\n/* harmony default export */ var connector_WebSocketConnector = (WebSocketConnector_WebSocketConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/WebSocketFetchConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * Defines the WebSocketConnector to connect to a remote server by creating a WebSocket channel.\n * @extends DataConnector\n * @example\n * import WebSocketConnector from 'osh-js/dataconnector/WebSocketConnector.js';\n *\n * let url = ...;\n * let connector = new WebSocketConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nclass WebSocketFetchConnector_WebSocketFetchConnector extends connector_WebSocketConnector {\n  /**\n   * Connect to the webSocket. If the system supports WebWorker, it will automatically creates one otherwise use\n   * the main thread.\n   */\n  doRequest(extraUrl = this.extraUrl, queryString = this.queryString) {\n    return new Promise(async (resolve, reject) => {\n      this.extraUrl = extraUrl;\n      this.queryString = queryString;\n      let fullUrl = this.getUrl() + extraUrl;\n      console.log(fullUrl);\n\n      if (isDefined(queryString)) {\n        fullUrl += '?' + queryString;\n      }\n\n      this.closed = false;\n      this.init = true; //creates Web Socket\n\n      this.ws = new WebSocket(fullUrl);\n      this.ws.binaryType = 'arraybuffer';\n      this.checkStatus(Status.CONNECTING);\n      console.warn('WebSocket stream connecting');\n      const results = [];\n\n      this.ws.onopen = function (event) {\n        this.checkAndClearReconnection();\n        this.checkStatus(Status.CONNECTED);\n        console.warn('WebSocket stream connected');\n      }.bind(this);\n\n      this.ws.onmessage = function (event) {\n        this.lastReceiveTime = Date.now(); //callback data on message received\n\n        if (event.data.byteLength > 0) {\n          // this.onMessage(event.data);\n          results.push(event.data);\n        }\n      }.bind(this); // closes socket if any errors occur\n\n\n      this.ws.onerror = function (event) {\n        console.error('WebSocket stream error');\n        this.checkStatus(Status.CLOSED_ERROR);\n        this.init = false;\n        this.lastReceiveTime = -1;\n        this.createReconnection();\n        this.onError(event);\n        reject(`onError WS: ${event}`);\n      }.bind(this);\n\n      this.ws.onclose = event => {\n        console.warn('WebSocket stream closed: ', event.reason, event.code);\n\n        if (event.code !== 1000 && !this.closed) {\n          this.checkStatus(Status.CLOSED_ERROR);\n          this.createReconnection();\n        }\n\n        this.onClose(event.code);\n        resolve(results);\n      };\n\n      if (this.reconnectionInterval !== -1) {\n        clearInterval(this.reconnectionInterval);\n        this.reconnectionInterval = -1;\n      }\n    });\n  }\n\n}\n\n/* harmony default export */ var connector_WebSocketFetchConnector = (WebSocketFetchConnector_WebSocketFetchConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/HttpConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * Defines the AjaxConnector to connect to a remote server by making AjaxRequest.\n * @extends DataConnector\n * @example\n * import Ajax from 'core/protocol/Ajax.js';\n *\n * let request = ...;\n * let protocol = new Ajax(url);\n *\n * // handle onSuccess\n * protocol.onSuccess = function(event) {\n *  // does something\n * }\n *\n * protocol.onError = function(event) {\n *  // does something\n * }\n *\n * // send request\n * protocol.sendRequest(request);\n *\n */\n\nclass HttpConnector_HttpConnector extends connector_DataConnector {\n  /**\n   * Creates Ajax.\n   * @param {String} url -\n   * @param {Object} properties -\n   * @param {String} properties.method -\n   * @param {String} properties.headers -\n   */\n  constructor(url, properties) {\n    super(url, properties);\n    this.method = \"POST\";\n\n    if (isDefined(properties)) {\n      if (properties.method) {\n        this.method = properties.method;\n      }\n\n      if (properties.headers) {\n        this.headers = properties.headers;\n      }\n    }\n  }\n  /**\n   * Sends the request to the defined server.\n   * @param {String} extraUrl - extra url to append to the url\n   * @param {String} queryString - get query parameters\n   */\n\n\n  async doRequest(extraUrl = '', queryString = undefined, responseType = undefined) {\n    let domain = this.getUrl();\n    let fullUrl = domain + extraUrl;\n\n    if (isDefined(queryString)) {\n      fullUrl += '?' + queryString;\n    }\n\n    const that = this; // default\n\n    const promiseResponse = fetch(fullUrl, {\n      method: this.method,\n      headers: this.headers\n    }).then(function process(response) {\n      if (!response.ok) {\n        const err = new Error(`Got ${response.status} response from ${domain}`);\n        err.response = response;\n        throw err;\n      } // if(responseTypeVar === 'application/json') {\n      //     return response.json();\n      // } else if(responseTypeVar === 'plain/text'){\n      //     return response.text();\n      // } else {\n\n\n      return response.arrayBuffer(); // const reader = response.body.getReader();\n      // reader.read().then(function processText({ done, value }) {\n      //     console.log(value);\n      //     return reader.read().then(processText)\n      // });\n    }) // Create a new response out of the stream\n    .catch(err => console.error(err));\n    const response = await promiseResponse;\n    this.onMessage(response);\n    return response;\n  }\n\n  async postRequest(extraUrl = '', payload = {}, responseType = undefined) {\n    let fullUrl = this.getUrl() + extraUrl; // default\n\n    await fetch(fullUrl, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json',\n        ...this.headers\n      },\n      body: payload\n    });\n  }\n  /**\n   * This is the callback method in case of getting error connection.\n   * @param event The error details\n   * @event\n   */\n\n\n  onError(event) {}\n  /**\n   * This is the callback method in case of getting success connection.\n   * @param event\n   * @event\n   */\n\n\n  onMessage(event) {}\n\n  async disconnect() {}\n  /**\n   * Sends the request\n   * @private\n   */\n\n\n  connect() {\n    return this.doRequest();\n  }\n\n  isConnected() {\n    return false;\n  }\n\n}\n\n/* harmony default export */ var connector_HttpConnector = (HttpConnector_HttpConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/context/Sos.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass Sos_context_SosContext extends DataSource_context {\n  constructor(parser) {\n    super();\n    this.parser = parser;\n  }\n\n  async init(properties) {\n    this.parser.init(properties);\n    return super.init(properties);\n  }\n\n  async checkInit() {}\n\n  async createDataConnector(properties) {\n    const tls = properties.tls ? 's' : ''; // issue with SOS < 1.4, binary data cannot be fetch as HTTP in octet-stream, must use WebSocket as workaround\n\n    await this.checkInit();\n\n    if (this.parser.parser instanceof parsers_BinaryDataParser) {\n      const url = 'ws' + tls + '://' + properties.endpointUrl;\n      return new connector_WebSocketFetchConnector(url, properties);\n    } else {\n      //\n      const url = 'http' + tls + '://' + properties.endpointUrl;\n      return new connector_HttpConnector(url, { ...properties,\n        method: 'GET'\n      });\n    }\n  }\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.protocol the protocol protocol\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @param {Number} properties.customUrlParams.video_bitrate - define a custom bitrate (in b/s)\n   * @param {Number} properties.customUrlParams.video_scale - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} properties.customUrlParams.video_width - define a custom width\n   * @param {Number} properties.customUrlParams.video_height - define a custom height\n   * @return {String} the full url\n   */\n\n\n  getQueryString(properties) {\n    let queryString = \"\"; // adds service\n\n    queryString = \"service=\" + properties.service; // adds version\n\n    queryString += \"&version=2.0\"; // adds responseFormat (optional)\n\n    if (properties.responseFormat) {\n      queryString += \"&responseFormat=\" + properties.responseFormat;\n    }\n\n    if (isDefined(properties.customUrlParams) && Object.keys(properties.customUrlParams).length > 0) {\n      queryString += '&';\n\n      for (let key in properties.customUrlParams) {\n        queryString += key + '=' + properties.customUrlParams[key] + '&';\n      }\n\n      if (url.endsWith('&')) {\n        queryString = url.slice(0, -1);\n      }\n    }\n\n    return queryString;\n  }\n\n}\n\n/* harmony default export */ var Sos_context = (Sos_context_SosContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/text/TextDataTypeDecoder.js\n\n\nclass TextDataTypeDecoder_TextDataTypeDecoder extends parsers_AbstractDataTypeDecoder {\n  constructor(props) {\n    super({\n      blockSeparator: ' ',\n      collapseWhiteSpaces: true,\n      decimalSeparator: '.',\n      tokenSeparator: ',',\n      ...props\n    });\n    this.init();\n  }\n\n  init() {\n    this.blocks = [];\n    this.blocksIdx = -1;\n    this.tokens = [];\n    this.tokensIdx = 0;\n  }\n\n  checkInit() {\n    if (this.blocksIdx === -1) {\n      // split\n      this.blocks = this.data.split(this.props.blockSeparator);\n      this.blocksIdx = 0;\n    }\n  }\n\n  nextToken() {\n    this.checkInit(); // if no more token in current block\n\n    if (this.tokensIdx >= this.tokens.length) {\n      // if no more block\n      if (this.blocks.length === 0 || this.blocksIdx >= this.blocks.length) {\n        return null;\n      } // parse new token\n\n\n      this.tokens = this.blocks[this.blocksIdx++].split(this.props.tokenSeparator);\n      this.tokensIdx = 0;\n    }\n\n    return this.tokens[this.tokensIdx++];\n  }\n\n  hasNextBlock() {\n    this.checkInit();\n    return this.blocks.length > 0 && this.blocksIdx < this.blocks.length && this.blocks[this.blocksIdx] !== '';\n  }\n\n}\n\n/* harmony default export */ var text_TextDataTypeDecoder = (TextDataTypeDecoder_TextDataTypeDecoder);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/TextDataParser.js\n\n\n\n\n\n\n\n\n\nclass TextDataParser_TextDataParser extends parsers_GenericParser {\n  constructor(rootElement, encoding, properties = {\n    timeShift: 0\n  }) {\n    super(rootElement, {\n      nodesId: {},\n      nodesIdValue: {},\n      registeredParser: {},\n      refs: {},\n      ...properties\n    });\n    this.resultEncoding = encoding;\n    this.textDataTypeDecoder = new text_TextDataTypeDecoder(this.resultEncoding);\n    this.props.registeredParser = {\n      'Time': () => new common_TimeParser(),\n      'Category': () => new common_StringParser(),\n      'Quantity': () => new common_DecimalParser(),\n      'Count': () => new common_CountParser(),\n      'Boolean': () => new common_BooleanParser(),\n      'DataChoice': () => new common_DataChoiceParser()\n    };\n    this.parser.init(rootElement, this.props, '');\n  }\n\n  parseDataBlock(input) {\n    let dataBlocks;\n\n    if (input instanceof ArrayBuffer) {\n      dataBlocks = this.textDecoder.decode(input);\n    } else {\n      dataBlocks = input;\n    }\n\n    this.textDataTypeDecoder.setData(dataBlocks);\n    let results = [];\n\n    while (this.textDataTypeDecoder.hasNextBlock()) {\n      const res = {};\n      this.parser.parse(this.textDataTypeDecoder, {}, res);\n      res['timestamp'] = new Date(res[this.parser.getTimePropertyName()]).getTime() + this.props.timeShift;\n      results.push(res);\n    }\n\n    return results;\n  }\n\n}\n\n/* harmony default export */ var parsers_TextDataParser = (TextDataParser_TextDataParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/SWEXmlStreamParser.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Sensia Software LLC. All Rights Reserved.\n\n Author: Alex Robin <alex.robin@sensiasoft.com>\n\n ******************************* END LICENSE BLOCK ***************************/\nconst entityMap = {\n  lt: '<',\n  gt: '>',\n  amp: '&',\n  quot: '\"',\n  apos: \"'\",\n  Agrave: \"À\",\n  Aacute: \"Á\",\n  Acirc: \"Â\",\n  Atilde: \"Ã\",\n  Auml: \"Ä\",\n  Aring: \"Å\",\n  AElig: \"Æ\",\n  Ccedil: \"Ç\",\n  Egrave: \"È\",\n  Eacute: \"É\",\n  Ecirc: \"Ê\",\n  Euml: \"Ë\",\n  Igrave: \"Ì\",\n  Iacute: \"Í\",\n  Icirc: \"Î\",\n  Iuml: \"Ï\",\n  ETH: \"Ð\",\n  Ntilde: \"Ñ\",\n  Ograve: \"Ò\",\n  Oacute: \"Ó\",\n  Ocirc: \"Ô\",\n  Otilde: \"Õ\",\n  Ouml: \"Ö\",\n  Oslash: \"Ø\",\n  Ugrave: \"Ù\",\n  Uacute: \"Ú\",\n  Ucirc: \"Û\",\n  Uuml: \"Ü\",\n  Yacute: \"Ý\",\n  THORN: \"Þ\",\n  szlig: \"ß\",\n  agrave: \"à\",\n  aacute: \"á\",\n  acirc: \"â\",\n  atilde: \"ã\",\n  auml: \"ä\",\n  aring: \"å\",\n  aelig: \"æ\",\n  ccedil: \"ç\",\n  egrave: \"è\",\n  eacute: \"é\",\n  ecirc: \"ê\",\n  euml: \"ë\",\n  igrave: \"ì\",\n  iacute: \"í\",\n  icirc: \"î\",\n  iuml: \"ï\",\n  eth: \"ð\",\n  ntilde: \"ñ\",\n  ograve: \"ò\",\n  oacute: \"ó\",\n  ocirc: \"ô\",\n  otilde: \"õ\",\n  ouml: \"ö\",\n  oslash: \"ø\",\n  ugrave: \"ù\",\n  uacute: \"ú\",\n  ucirc: \"û\",\n  uuml: \"ü\",\n  yacute: \"ý\",\n  thorn: \"þ\",\n  yuml: \"ÿ\",\n  nbsp: \" \",\n  iexcl: \"¡\",\n  cent: \"¢\",\n  pound: \"£\",\n  curren: \"¤\",\n  yen: \"¥\",\n  brvbar: \"¦\",\n  sect: \"§\",\n  uml: \"¨\",\n  copy: \"©\",\n  ordf: \"ª\",\n  laquo: \"«\",\n  not: \"¬\",\n  shy: \"­­\",\n  reg: \"®\",\n  macr: \"¯\",\n  deg: \"°\",\n  plusmn: \"±\",\n  sup2: \"²\",\n  sup3: \"³\",\n  acute: \"´\",\n  micro: \"µ\",\n  para: \"¶\",\n  middot: \"·\",\n  cedil: \"¸\",\n  sup1: \"¹\",\n  ordm: \"º\",\n  raquo: \"»\",\n  frac14: \"¼\",\n  frac12: \"½\",\n  frac34: \"¾\",\n  iquest: \"¿\",\n  times: \"×\",\n  divide: \"÷\",\n  forall: \"∀\",\n  part: \"∂\",\n  exist: \"∃\",\n  empty: \"∅\",\n  nabla: \"∇\",\n  isin: \"∈\",\n  notin: \"∉\",\n  ni: \"∋\",\n  prod: \"∏\",\n  sum: \"∑\",\n  minus: \"−\",\n  lowast: \"∗\",\n  radic: \"√\",\n  prop: \"∝\",\n  infin: \"∞\",\n  ang: \"∠\",\n  and: \"∧\",\n  or: \"∨\",\n  cap: \"∩\",\n  cup: \"∪\",\n  'int': \"∫\",\n  there4: \"∴\",\n  sim: \"∼\",\n  cong: \"≅\",\n  asymp: \"≈\",\n  ne: \"≠\",\n  equiv: \"≡\",\n  le: \"≤\",\n  ge: \"≥\",\n  sub: \"⊂\",\n  sup: \"⊃\",\n  nsub: \"⊄\",\n  sube: \"⊆\",\n  supe: \"⊇\",\n  oplus: \"⊕\",\n  otimes: \"⊗\",\n  perp: \"⊥\",\n  sdot: \"⋅\",\n  Alpha: \"Α\",\n  Beta: \"Β\",\n  Gamma: \"Γ\",\n  Delta: \"Δ\",\n  Epsilon: \"Ε\",\n  Zeta: \"Ζ\",\n  Eta: \"Η\",\n  Theta: \"Θ\",\n  Iota: \"Ι\",\n  Kappa: \"Κ\",\n  Lambda: \"Λ\",\n  Mu: \"Μ\",\n  Nu: \"Ν\",\n  Xi: \"Ξ\",\n  Omicron: \"Ο\",\n  Pi: \"Π\",\n  Rho: \"Ρ\",\n  Sigma: \"Σ\",\n  Tau: \"Τ\",\n  Upsilon: \"Υ\",\n  Phi: \"Φ\",\n  Chi: \"Χ\",\n  Psi: \"Ψ\",\n  Omega: \"Ω\",\n  alpha: \"α\",\n  beta: \"β\",\n  gamma: \"γ\",\n  delta: \"δ\",\n  epsilon: \"ε\",\n  zeta: \"ζ\",\n  eta: \"η\",\n  theta: \"θ\",\n  iota: \"ι\",\n  kappa: \"κ\",\n  lambda: \"λ\",\n  mu: \"μ\",\n  nu: \"ν\",\n  xi: \"ξ\",\n  omicron: \"ο\",\n  pi: \"π\",\n  rho: \"ρ\",\n  sigmaf: \"ς\",\n  sigma: \"σ\",\n  tau: \"τ\",\n  upsilon: \"υ\",\n  phi: \"φ\",\n  chi: \"χ\",\n  psi: \"ψ\",\n  omega: \"ω\",\n  thetasym: \"ϑ\",\n  upsih: \"ϒ\",\n  piv: \"ϖ\",\n  OElig: \"Œ\",\n  oelig: \"œ\",\n  Scaron: \"Š\",\n  scaron: \"š\",\n  Yuml: \"Ÿ\",\n  fnof: \"ƒ\",\n  circ: \"ˆ\",\n  tilde: \"˜\",\n  ensp: \" \",\n  emsp: \" \",\n  thinsp: \" \",\n  zwnj: \"‌\",\n  zwj: \"‍\",\n  lrm: \"‎\",\n  rlm: \"‏\",\n  ndash: \"–\",\n  mdash: \"—\",\n  lsquo: \"‘\",\n  rsquo: \"’\",\n  sbquo: \"‚\",\n  ldquo: \"“\",\n  rdquo: \"”\",\n  bdquo: \"„\",\n  dagger: \"†\",\n  Dagger: \"‡\",\n  bull: \"•\",\n  hellip: \"…\",\n  permil: \"‰\",\n  prime: \"′\",\n  Prime: \"″\",\n  lsaquo: \"‹\",\n  rsaquo: \"›\",\n  oline: \"‾\",\n  euro: \"€\",\n  trade: \"™\",\n  larr: \"←\",\n  uarr: \"↑\",\n  rarr: \"→\",\n  darr: \"↓\",\n  harr: \"↔\",\n  crarr: \"↵\",\n  lceil: \"⌈\",\n  rceil: \"⌉\",\n  lfloor: \"⌊\",\n  rfloor: \"⌋\",\n  loz: \"◊\",\n  spades: \"♠\",\n  clubs: \"♣\",\n  hearts: \"♥\",\n  diams: \"♦\"\n};\n/**\n * Javascript binding for SWE requests\n *\n */\n\nclass SWEXmlStreamParser {\n  /**\n   *\n   * @param {String} xml -\n   */\n  constructor(xml = 'undefined') {\n    this.originalXml = xml;\n  }\n  /**\n   * Sets the xml file to parse.\n   * @param {String} xml -\n   */\n\n\n  setXml(xml) {\n    this.originalXml = xml;\n  }\n  /**\n   * @private\n   * @return {Set<string>}\n   */\n\n\n  static get arrayNodeSet() {\n    return new Set(['featureMember', 'offering', 'observableProperty', 'field', 'coordinate', 'item', 'quality', 'member', 'interval', 'AllowedValues/value']);\n  }\n  /**\n   * @private\n   * @return {Set<string>}\n   */\n\n\n  static get numericalNodeSet() {\n    return new Set(['nilValue', 'paddingBytes-after', 'paddingBytes-before', 'byteLength', 'significantBits', 'bitLength', 'Time/value', 'Quantity/value', 'Count/value']);\n  }\n  /**\n   * Gets the result of the parsing as Json object.\n   * @return {Object} The JSON result\n   */\n\n\n  toJson() {\n    var options = {};\n    var S = this.originalXml;\n    var pos = options.pos || 0;\n    var openBracket = \"<\";\n    var openBracketCC = \"<\".charCodeAt(0);\n    var closeBracket = \">\";\n    var closeBracketCC = \">\".charCodeAt(0);\n    var minus = \"-\";\n    var minusCC = \"-\".charCodeAt(0);\n    var slash = \"/\";\n    var slashCC = \"/\".charCodeAt(0);\n    var exclamation = '!';\n    var exclamationCC = '!'.charCodeAt(0);\n    var singleQuote = \"'\";\n    var singleQuoteCC = \"'\".charCodeAt(0);\n    var doubleQuote = '\"';\n    var doubleQuoteCC = '\"'.charCodeAt(0);\n    var arrayNodeSet = SWEXmlStreamParser.arrayNodeSet;\n    var numericalNodeSet = SWEXmlStreamParser.numericalNodeSet;\n\n    function isArray(name) {\n      return arrayNodeSet.has(name);\n    }\n    /**\n     * parsing a list of entries\n     */\n\n\n    function parseChildren(node) {\n      while (S[pos]) {\n        if (S.charCodeAt(pos) == openBracketCC) {\n          if (S.charCodeAt(pos + 1) === slashCC) {\n            pos = S.indexOf(closeBracket, pos);\n            if (pos + 1) pos += 1;\n            return;\n          } else if (S.charCodeAt(pos + 1) === exclamationCC) {\n            if (S.charCodeAt(pos + 2) == minusCC) {\n              //comment support\n              while (pos !== -1 && !(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) == minusCC && S.charCodeAt(pos - 2) == minusCC && pos != -1)) {\n                pos = S.indexOf(closeBracket, pos + 1);\n              }\n\n              if (pos === -1) {\n                pos = S.length;\n              }\n            } else {\n              // doctypesupport\n              pos += 2;\n\n              while (S.charCodeAt(pos) !== closeBracketCC && S[pos]) {\n                pos++;\n              }\n            }\n\n            pos++;\n            continue;\n          }\n\n          var child = parseNode();\n          var childName = child.type;\n          if (childName === 'type') // don't override special 'type' attribute!\n            continue;\n          var isProperty = childName.charAt(0) == childName.charAt(0).toLowerCase(); //Object.keys(child).length == 2;\n\n          if (isProperty && child.hasOwnProperty('value')) {\n            if (isArray(childName)) {\n              if (!node.hasOwnProperty(childName)) node[childName] = [];\n              node[childName].push(child.value);\n            } else {\n              node[childName] = child.value;\n            }\n          } else {\n            // skip one level if child is an OGC property\n            if (isProperty) {\n              delete child.type;\n\n              for (var k in child) {\n                if (typeof child[k] === 'object' && k !== 'name') {\n                  Object.assign(child, child[k]);\n                  delete child[k];\n                }\n              }\n            }\n\n            if (isArray(childName)) {\n              if (!node.hasOwnProperty(childName)) node[childName] = [];\n              node[childName].push(child);\n            } else {\n              node[childName] = child;\n            }\n          }\n        } else {\n          var text = parseText();\n\n          if (text.trim().length > 0) {\n            if (numericalNodeSet.has(node.type)) node.value = parseFloat(text);else node.value = text;\n          }\n\n          pos++;\n        }\n      }\n    }\n    /**\n     *    returns the text outside of texts until the first '<'\n     */\n\n\n    function parseText() {\n      var start = pos;\n      pos = S.indexOf(openBracket, pos) - 1;\n      if (pos === -2) pos = S.length;\n      return S.slice(start, pos + 1);\n    }\n    /**\n     *    returns text until the first nonAlphebetic letter\n     */\n\n\n    var nameSpacer = '\\n\\t>/= ';\n\n    function parseName() {\n      var start = pos;\n\n      while (nameSpacer.indexOf(S[pos]) === -1 && S[pos]) {\n        pos++;\n      }\n\n      return S.slice(start, pos);\n    }\n\n    function getLocalName(qname) {\n      var nsEnd = qname.indexOf(':');\n      if (nsEnd > 0) return qname.substring(nsEnd + 1);else return qname;\n    }\n\n    function fixedFromCharCode(code) {\n      // String.prototype.fromCharCode does not supports\n      // > 2 bytes unicode chars directly\n      if (code > 0xffff) {\n        code -= 0x10000;\n        const surrogate1 = 0xd800 + (code >> 10),\n              surrogate2 = 0xdc00 + (code & 0x3ff);\n        return String.fromCharCode(surrogate1, surrogate2);\n      } else {\n        return String.fromCharCode(code);\n      }\n    }\n\n    function entityReplacer(a) {\n      const k = a.slice(1, -1);\n\n      if (k in entityMap) {\n        return entityMap[k];\n      } else if (k.charAt(0) === '#') {\n        return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));\n      } else {\n        throw Error('entity not found:' + a);\n        return a;\n      }\n    }\n\n    function parseNode() {\n      var node = {};\n      pos++;\n      node.type = getLocalName(parseName()); // parsing attributes\n\n      while (S.charCodeAt(pos) !== closeBracketCC && S[pos]) {\n        var c = S.charCodeAt(pos);\n\n        if (c > 64 && c < 91 || c > 96 && c < 123) {\n          //if('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(S[pos])!==-1 ){\n          var qname = parseName();\n          var name = getLocalName(qname); // search beginning of the string\n\n          var code = S.charCodeAt(pos);\n\n          while (code && code !== singleQuoteCC && code !== doubleQuoteCC && !(code > 64 && code < 91 || code > 96 && code < 123) && code !== closeBracketCC) {\n            pos++;\n            code = S.charCodeAt(pos);\n          }\n\n          if (code === singleQuoteCC || code === doubleQuoteCC) {\n            var value = parseString();\n\n            if (pos === -1) {\n              return node;\n            }\n          } else {\n            value = null;\n            pos--;\n          }\n\n          if (!qname.startsWith('xmlns:')) node[name] = value.replace(/&#?\\w+;/g, entityReplacer);\n        }\n\n        pos++;\n      } // optional parsing of children\n\n\n      if (S.charCodeAt(pos - 1) !== slashCC) {\n        pos++;\n        parseChildren(node);\n      } else {\n        pos++;\n      }\n\n      return node;\n    }\n    /**\n     *    is parsing a string, that starts with a char and with the same usually  ' or \"\n     */\n\n\n    function parseString() {\n      var startChar = S[pos];\n      var startpos = ++pos;\n      pos = S.indexOf(startChar, startpos);\n      return S.slice(startpos, pos);\n    }\n\n    var out = parseNode();\n    out.pos = pos;\n    return out;\n  }\n\n}\n\n/* harmony default export */ var parsers_SWEXmlStreamParser = (SWEXmlStreamParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/common/TraverseParser.js\n\n\nclass TraverseParser_TraverseParser extends AbstractParser_AbstractParser {}\n\n/* harmony default export */ var common_TraverseParser = (TraverseParser_TraverseParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/JsonDataParser.js\n\n\n\n\nclass JsonDataParser_JsonDataParser extends parsers_GenericParser {\n  constructor(rootElement, properties = {\n    timeShift: 0\n  }) {\n    super(rootElement, {\n      nodesId: {},\n      nodesIdValue: {},\n      registeredParser: {\n        'Time': () => new common_TimeParser(),\n        'Category': () => new common_TraverseParser(),\n        'Quantity': () => new common_TraverseParser(),\n        'Count': () => new common_TraverseParser(),\n        'Boolean': () => new common_TraverseParser(),\n        'DataChoice': () => new common_TraverseParser()\n      },\n      refs: {},\n      ...properties\n    });\n    this.parser.init(rootElement, this.props);\n  }\n\n  getTimeField() {\n    return this.parser.getTimePropertyName();\n  }\n\n  parseDataBlock(input) {\n    let jsonData;\n\n    if (input instanceof ArrayBuffer) {\n      jsonData = JSON.parse(this.textDecoder.decode(input));\n    } else {\n      try {\n        jsonData = JSON.parse(input);\n      } catch (e) {\n        jsonData = input;\n      }\n    }\n\n    if (Array.isArray(jsonData)) {\n      for (let d of jsonData) {\n        d['timestamp'] = new Date(d[this.getTimeField()]).getTime() + this.props.timeShift;\n      }\n\n      return jsonData;\n    } else {\n      jsonData['timestamp'] = new Date(jsonData[this.getTimeField()]).getTime() + this.props.timeShift;\n      return [jsonData];\n    }\n  }\n\n}\n\n/* harmony default export */ var parsers_JsonDataParser = (JsonDataParser_JsonDataParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sos/SosGetResult.parser.js\n\n\n\n\n\n\nclass SosGetResult_parser_SosGetResultParser {\n  constructor() {\n    this.templatePromise = undefined;\n  }\n\n  init(properties) {\n    this.properties = properties;\n  }\n\n  async fetchGetResultTemplate(properties) {\n    assertDefined(this.properties, 'Properties are not defined, the parser has not been initialized');\n    const getResultTemplateUrl = this.buildGetResultTemplateUrl(properties);\n    const response = await fetch(getResultTemplateUrl);\n    const template = await response.text(); //\n\n    if ('responseFormat' in properties && properties.responseFormat === 'application/json') {\n      this.parser = new parsers_JsonDataParser(JSON.parse(template), {\n        timeShift: this.properties.timeShift || 0\n      });\n    } else {\n      let sweXmlParser = new parsers_SWEXmlStreamParser(template);\n      const json = sweXmlParser.toJson();\n      let respSchema; // Retro compatibility\n\n      if (isDefined(json.GetResultTemplateResponse)) {\n        respSchema = json.GetResultTemplateResponse;\n      } else {\n        respSchema = json;\n      }\n\n      let resultEncoding = respSchema.resultEncoding;\n      let rootElement = respSchema.resultStructure;\n\n      if (resultEncoding && resultEncoding.type === 'TextEncoding') {\n        this.parser = new parsers_TextDataParser(rootElement, resultEncoding, {\n          timeShift: this.properties.timeShift || 0\n        });\n      } else if (resultEncoding && resultEncoding.type === 'BinaryEncoding') {\n        this.parser = new parsers_BinaryDataParser(rootElement, resultEncoding, {\n          timeShift: this.properties.timeShift || 0\n        });\n      } else {\n        throw Error('Not supported parser format');\n      }\n    }\n  }\n\n  async checkInit() {\n    if (!this.initialized) {\n      if (!isDefined(this.templatePromise)) {\n        this.templatePromise = this.fetchGetResultTemplate(this.properties);\n      }\n\n      await this.templatePromise;\n      this.initialized = true;\n    }\n  }\n\n  async parseDataBlock(arrayBuffer) {\n    await this.checkInit();\n    return this.parser.parseDataBlock(arrayBuffer);\n  }\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.protocol the protocol protocol\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.foiId the foiId\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Date} properties.lastTimeStamp - the last timestamp to start at this time (ISO String)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @return {String} the full url\n   */\n\n\n  buildUrl(properties) {\n    let url = super.buildUrl({ ...properties\n    }); // adds feature of interest urn\n\n    if (properties.foiId && properties.of !== '') {\n      url += '&featureOfInterest=' + properties.foiId;\n    }\n\n    return url;\n  }\n\n  buildGetResultTemplateUrl(properties) {\n    let url = '';\n    const protocol = properties.tls ? 'https' : 'http';\n    url += protocol + '://' + properties.endpointUrl + '?';\n    url += \"service=SOS\";\n    url += \"&version=2.0\"; // adds request\n\n    url += \"&request=GetResultTemplate\"; // adds offering\n\n    url += \"&offering=\" + properties.offeringID; // adds observedProperty\n\n    url += \"&observedProperty=\" + properties.observedProperty;\n\n    if ('responseFormat' in properties) {\n      url += \"&responseFormat=\" + properties.responseFormat;\n    }\n\n    return url;\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_parser = (SosGetResult_parser_SosGetResultParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/context/SosGetResult.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_context_SosGetResultContext extends Sos_context {\n  constructor() {\n    super(new SosGetResult_parser());\n  }\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @return {String} the full url\n   */\n\n\n  getQueryString(properties) {\n    let queryString = super.getQueryString(properties); // adds request\n\n    queryString += \"&request=GetResult\"; // adds offering\n\n    queryString += \"&offering=\" + properties.offeringID; // adds observedProperty\n\n    queryString += \"&observedProperty=\" + properties.observedProperty;\n    return queryString;\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_context = (SosGetResult_context_SosGetResultContext);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/mqtt/mqtt.min.js\nvar mqtt_min = __webpack_require__(0);\nvar mqtt_min_default = /*#__PURE__*/__webpack_require__.n(mqtt_min);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/mqtt/MqttProvider.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nlet mqttCallbacks = {};\n\nclass MqttProvider_MqttProvider {\n  /**\n   * Build the MqttProvider.\n   * @param {Object} properties - the object properties\n   * @param {String} properties.endpoint - the mqtt endpoint[:port]\n   * @param {String} properties.clientId - the clientId\n   * @param {String} [properties.mqttPrefix='/api'] - a prefix to each topic\n   * @param {Object} properties.options - the MQTT.js property options as defined  [mqtt.Client(streamBuilder, options)]{@link https://github.com/mqttjs/MQTT.js#mqttclientstreambuilder-options}\n   * Note that the credentials are passed in the object options as for the mqtt.js client.\n   */\n  constructor(properties) {\n    this.properties = properties;\n\n    if (!isDefined(properties)) {\n      throw Error('endpoint and clientId are mandatory properties');\n    }\n\n    if (!isDefined(properties.endpoint)) {\n      throw Error('endpoint is a mandatory property');\n    }\n\n    if (!isDefined(properties.clientId)) {\n      throw Error('clientId is a mandatory property');\n    }\n\n    this.mqttPrefix = '/api';\n\n    if (isDefined(properties.mqttPrefix)) {\n      this.mqttPrefix = properties.mqttPrefix;\n    }\n\n    this.topics = [];\n    let options = {\n      reconnectPeriod: 30,\n      connectTimeout: 30 * 1000,\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      wsOptions: {\n        binaryType: 'arraybuffer'\n      }\n    }; // merge generic options\n\n    if (isDefined(this.properties.options)) {\n      options = { ...options,\n        ...this.properties.options\n      };\n    }\n\n    this.options = options;\n    this.endpoint = properties.endpoint + '/mqtt';\n    this.clientId = properties.clientId;\n    this.client = null;\n  }\n\n  async subscribe(topic, callback) {\n    if (this.topics.includes(topic)) {\n      // already subscribed, skipping\n      return;\n    }\n\n    if (!isDefined(this.client)) {\n      throw Error('You must connect the client before subscribing any topic');\n    } // waiting for the client gets connected\n\n\n    let interval;\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    this.topics.push(topic);\n    return new Promise((resolve, error) => {\n      interval = setInterval(() => {\n        if (this.client.connected) {\n          try {\n            // subscribe\n            // store callback for this topic\n            if (!(topicQuery in mqttCallbacks)) {\n              mqttCallbacks[topicQuery] = [];\n            }\n\n            mqttCallbacks[topicQuery].push({\n              callbackFn: callback,\n              topic: topic\n            });\n            this.client.subscribe(`${topicQuery}`, function (err) {\n              if (err) {\n                callback(err);\n                error(err);\n              } else {\n                console.warn(`Subscribed to ${topicQuery}`);\n                resolve();\n              }\n            });\n          } catch (exception) {\n            console.error(exception);\n          } finally {\n            clearInterval(interval);\n          }\n        }\n      }, 100);\n    });\n  }\n\n  publish(topic, payload) {\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    this.client.publish(topicQuery, payload);\n  }\n  /**\n   * Check to unsuscribe to any topic listened by this dsId\n   * If the topic is only subscribed by the dsId, unsubscribe from broken\n   * Otherwise, remove from the list of subscribe topic/dsId\n   * @param topic\n   */\n\n\n  async unsubscribe(topic) {\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    return this.client.unsubscribe(topicQuery, {}, err => {\n      delete mqttCallbacks[topicQuery];\n\n      if (err) {\n        const messageErr = `Cannot Unsubscribed topic: ${topicQuery} : ${err}`;\n        console.error(messageErr);\n        throw Error(messageErr);\n      } else {\n        console.warn(`Unsubscribed topic: ${topicQuery}`);\n      }\n    });\n  }\n\n  async unsubscribeAll() {\n    // unsubscribe topic\n    for (let topic of this.topics) {\n      await this.unsubscribe(topic);\n    }\n\n    this.topics = [];\n  }\n\n  connect() {\n    if (!isDefined(this.client)) {\n      // connects to the broker specified by the given url and options and returns a Client.\n      this.client = mqtt_min_default.a.connect(this.endpoint, { ...this.options\n      });\n      const that = this;\n      this.client.on('connect', e => {\n        console.info(`Mqtt client is connected to ${that.endpoint}`);\n      });\n      this.client.on('message', this.onMessage.bind(this));\n      this.client.on('offline', e => {\n        throw new Error(`The server ${that.endpoint} seems offline`);\n      });\n      this.client.on('error', e => {\n        throw new Error(error);\n      });\n    }\n  }\n\n  async onMessage(topic, message) {\n    if (topic in mqttCallbacks) {\n      // callback for the corresponding topic\n      for (let callback of mqttCallbacks[topic]) {\n        // callback to all subscription registered\n        callback.callbackFn(new Uint8Array(message).subarray(message.byteOffset).buffer, callback.topic);\n      }\n    }\n  }\n\n  disconnect() {\n    if (!isDefined(this.client)) {\n      throw Error('The client has not been created yet');\n    } // close the client\n\n\n    this.client.end();\n    mqttCallbacks = {};\n    this.client = null;\n  }\n\n  isConnected() {\n    return isDefined(this.client) && this.client.connected;\n  }\n\n  reset() {}\n\n}\n\n/* harmony default export */ var mqtt_MqttProvider = (MqttProvider_MqttProvider);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/Filter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass Filter_SensorWebApiFilter {\n  constructor(props) {\n    this.props = props;\n  }\n  /**\n   *\n   * @param {string[]} [includes=[]] list of parameters to include - all if omitted\n   * @param  {string[]} [excludes=[]] list of parameters to exclude - none if omitted\n   * @return {string}\n   */\n\n\n  toQueryString(includes = [], excludes = []) {\n    let queryString = '';\n    let separator = '';\n    excludes.push('replaySpeed');\n\n    for (let queryParameter in this.props) {\n      if (excludes.includes(queryParameter)) {\n        continue;\n      }\n\n      if ((includes.length === 0 || includes.includes(queryParameter)) && isDefined(this.props[queryParameter])) {\n        // if(Array.isArray(this.props[queryParameter])) {\n        //     queryString += separator + queryParameter + '=' + encodeURIComponent(this.props[queryParameter].join());\n\n        /*} else*/\n        if (queryParameter === 'f' || queryParameter === 'format' || queryParameter === 'responseFormat' || queryParameter === 'obsFormat') {\n          queryString += separator + queryParameter + '=' + this.props[queryParameter].replaceAll('+', '%2B'); // } else {\n          //     queryString += separator + queryParameter + '=' + encodeURIComponent(this.props[queryParameter]);\n        } else {\n          queryString += separator + queryParameter + '=' + this.props[queryParameter];\n        }\n\n        separator = '&';\n      }\n    }\n\n    return queryString;\n  }\n\n}\n\n/* harmony default export */ var Filter = (Filter_SensorWebApiFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/observation/ObservationFilter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass ObservationFilter_ObservationFilter extends Filter {\n  /**\n   *\n   * @param {Object} properties - object properties\n   * @param {any} [properties.phenomenonTime='now'] - time range <00:00:00T00:00:00Z/00:00:00T00:00:00Z> | 'now' | 'latest'\n   * @param {any} [properties.resultTime='now'] - time range <00:00:00T00:00:00Z/00:00:00T00:00:00Z> | 'latest'\n   * @param {string[]} [properties.featureOfInterest=undefined] - Comma separated list of feature of interest IDs to get observations for\n   * @param {string[]} [properties.select=undefined] - Comma separated list of properties to include or exclude from results (use \"!\" prefix to exclude)\n   * @param {number[]} [properties.bbox=undefined] - BBOX to filter resources on their location\n   * @param {string} [properties.location=undefined] - WKT geometry and operator to filter resources on their location or geometry\n   * @param {string} [properties.format='application/json'] - Mime type designating the format to use to encode the response.\n   * @param {string} [properties.replaySpeed=undefined] - Mime type designating the format to use to encode the response.\n   */\n  constructor(properties) {\n    super({\n      phenomenonTime: undefined,\n      resultTime: undefined,\n      featureOfInterest: undefined,\n      select: undefined,\n      bbox: undefined,\n      location: undefined,\n      format: 'application/om+json',\n      replaySpeed: undefined,\n      ...properties // merge defined properties\n\n    });\n  }\n\n}\n\n/* harmony default export */ var observation_ObservationFilter = (ObservationFilter_ObservationFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/MqttConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n/**\n * Defines the MqttConnector to connect to a remote server by creating a Mqtt channel.\n * @extends DataConnector\n * @example\n * import MqttConnector from 'osh-js/dataconnector/MqttConnector.js';\n *\n * let url = ...;\n * let connector = new MqttConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n// TODO: Useless in WebWorker since the WebWorker has its own context.\n\nconst mqttProviders = {};\n\nclass MqttConnector_MqttConnector extends connector_DataConnector {\n  /**\n   *\n   * @param url\n   * @param properties -\n   */\n  constructor(url, properties) {\n    super(url, {\n      mqttPrefix: properties.mqttOpts && properties.mqttOpts.prefix || '/api',\n      ...properties\n    });\n    this.interval = -1;\n    this.id = `mqtt-connector-${randomUUID()}`;\n    this.mqttProvider = undefined;\n  }\n\n  initBc() {\n    this.onMessage = (data, topic) => {\n      this.broadcastChannel.postMessage({\n        data: data,\n        topic: topic\n      }, [data]);\n    };\n\n    this.broadcastChannel = new BroadcastChannel(this.id);\n\n    this.broadcastChannel.onmessage = message => {\n      if (message.data.message === 'subscribe') {\n        this.doRequest(message.data.topic);\n      } else if (message.data.message === 'unsubscribe') {\n        this.disconnect(message.data.topic);\n      }\n    };\n  }\n\n  getMqttProvider() {\n    let fullUrl = this.getUrl(); // only 1 provider by URL\n\n    if (!this.mqttProvider) {\n      let options = {\n        reconnectPeriod: this.reconnectTimeout,\n        connectTimeout: 30 * 1000\n      };\n\n      if (isDefined(this.properties.mqttOpts)) {\n        options = { ...options,\n          ...this.properties.mqttOpts\n        };\n      }\n\n      this.mqttProvider = new mqtt_MqttProvider({\n        endpoint: fullUrl,\n        clientId: randomUUID(),\n        options: options,\n        mqttPrefix: this.properties.mqttPrefix\n      });\n      console.warn(`Stored MQTT provider into cache: ${fullUrl}`);\n      this.mqttProvider.connect();\n      this.mqttProvider.checkStatus = this.checkStatus;\n      this.checkStatus(Status.CONNECTED);\n    } else {\n      console.warn(`Getting MQTT provider from cache: ${fullUrl}`);\n    }\n\n    return this.mqttProvider;\n  }\n\n  checkStatus(status) {\n    this.onChangeStatus(status);\n    this.status = status;\n  }\n  /**\n   * Connect to the Mqtt broker.\n   */\n\n\n  doRequest(topic = '', queryString = undefined) {\n    const mqttProvider = this.getMqttProvider();\n    mqttProvider.subscribe(topic, this.onMessage).then(() => {\n      this.onChangeStatus(Status.CONNECTED);\n    });\n  }\n\n  publishRequest(topic, payload) {\n    const mqttProvider = this.getMqttProvider();\n    mqttProvider.publish(topic, payload);\n  }\n  /**\n   * Disconnects and close the mqtt client.\n   */\n\n\n  async disconnect(topic) {\n    // does not call super to avoid reconnection logic and use the one of the mqtt.js lib\n    // this.checkStatus(Status.DISCONNECTED);\n    // this.init = false;\n    // this.closed = true;\n    // find the client\n    const client = this.mqttProvider;\n\n    if (isDefined(client) && client.isConnected()) {\n      if (!topic) {\n        // unsubscribe all topics\n        return client.unsubscribeAll(); // client.disconnect();\n      } else {\n        return client.unsubscribe(topic);\n      }\n    } //delete mqttProviders[this.getUrl()];\n    //console.warn(`Disconnected from ${this.getUrl()}`);\n\n  }\n\n  connect() {\n    this.doRequest(this.properties.topic || '');\n  }\n  /**\n   * The onMessage method used by the mqtt client to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n\n  isConnected() {\n    return isDefined(this.mqttProvider) && this.mqttProvider.isConnected();\n  }\n\n  reset() {\n    this.disconnect();\n    console.log(`Remove provider from cache: ${this.getUrl()}`);\n    this.mqttProvider.reset();\n  }\n\n}\n\n/* harmony default export */ var connector_MqttConnector = (MqttConnector_MqttConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/context/SosGetResult.realtime.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass SosGetResult_realtime_context_SosGetResultRealTimeContext extends SosGetResult_context {\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @return {String} the full url\n   */\n  getQueryString(properties) {\n    let queryString = super.getQueryString(properties); // adds temporalFilter\n\n    queryString += \"&temporalFilter=phenomenonTime,now/2055-01-01Z\";\n    return queryString;\n  }\n\n  createDataConnector(properties) {\n    const tls = properties.tls ? 's' : '';\n    const url = properties.protocol + tls + '://' + properties.endpointUrl;\n    let connector; // if we switch of protocol\n\n    if (properties.protocol === 'ws') {\n      connector = new connector_WebSocketConnector(url, properties);\n    } else if (properties.protocol === 'mqtt') {\n      const tls = properties.tls ? 's' : '';\n      const url = properties.protocol + tls + '://' + properties.mqttOpts.endpointUrl;\n      connector = new connector_MqttConnector(url, properties);\n    } else {\n      throw Error(`Unsupported connector ${properties.protocol}`);\n    }\n\n    return connector;\n  }\n\n  async onMessage(messages, format) {\n    const data = await this.parseData(messages);\n    const version = this.properties.version;\n\n    if (Array.isArray(data)) {\n      for (let d of data) {\n        d.version = version;\n      }\n    } else {\n      data.version = version;\n    }\n\n    this.handleData(data);\n  }\n\n  connect() {\n    if (isDefined(this.connector)) {\n      this.connector.doRequest('', this.getQueryString(this.properties));\n    } else {\n      throw Error('there is no connector defined');\n    }\n  }\n\n  async disconnect() {\n    this.connector.disconnect();\n  }\n\n  async parseData(messages) {\n    return this.parser.parseDataBlock(messages);\n  }\n\n  onChangeStatus(status) {\n    console.log(status);\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_realtime_context = (SosGetResult_realtime_context_SosGetResultRealTimeContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/context/SosGetResult.replay.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_replay_context_SosGetResultReplayContext extends SosGetResult_context {\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @return {String} the full url\n   */\n  getQueryString(properties) {\n    let queryString = super.getQueryString(properties);\n    const startTime = properties.startTime;\n    const endTime = properties.endTime; // adds temporalFilter\n\n    queryString += \"&temporalFilter=phenomenonTime,\" + startTime + \"/\" + endTime; // queryString += `&replaySpeed=${properties.replaySpeed}`;\n    // TODO: server issue, waiting for fix\n    // queryString += \"&responseFormat=application/octet-stream\";\n\n    return queryString;\n  }\n\n  async checkInit() {\n    return this.parser.checkInit();\n  }\n\n  async init(properties) {\n    this.startTimestamp = new Date(properties.startTime).getTime();\n    this.endTimestamp = new Date(properties.endTime).getTime();\n    this.relativeDate = undefined;\n    return super.init(properties);\n  }\n\n  async disconnect() {\n    this.relativeDate = undefined;\n  }\n\n  async nextBatch(properties, masterTimestamp, status = {\n    cancel: false\n  }) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let fetchDuration = this.properties.prefetchBatchDuration;\n\n        const moveTimeCursor = async () => {\n          return new Promise(async (resolve, reject) => {\n            if (isDefined(this.relativeDate)) {\n              // move cursor ahead\n              this.relativeDate = new Date(this.relativeDate.getTime() + fetchDuration);\n            } else {\n              this.relativeDate = new Date(this.properties.startTime);\n            }\n\n            resolve();\n          });\n        };\n\n        const fetchNext = async (startTime, endTime) => {\n          const version = this.properties.version;\n          return new Promise(async (resolve, reject) => {\n            console.warn(`fetching ${startTime} -> ` + `${endTime} for datasource ${this.properties.dataSourceId}`);\n            let data = await this.connector.doRequest('', this.getQueryString({ ...this.properties,\n              ...properties,\n              startTime: startTime,\n              endTime: endTime\n            }));\n            let results = []; // this is because binary < 1.4 issue and the use of WS. In case in using WS, the data are provided in an array\n\n            if (Array.isArray(data)) {\n              for (let d of data) {\n                const parsedData = await this.parseData(d);\n                parsedData.map(elt => {\n                  elt.version = version;\n                  return elt;\n                });\n                results.push(...parsedData);\n              }\n            } else {\n              const parsedData = await this.parseData(data);\n              parsedData.map(elt => {\n                elt.version = version;\n                return elt;\n              });\n              results.push(...parsedData);\n            }\n\n            if (status.cancel) {\n              reject('Status=canceled');\n            } else {\n              resolve(results);\n            }\n          });\n        };\n\n        let data;\n\n        do {\n          await moveTimeCursor();\n          data = await fetchNext(this.relativeDate.toISOString(), new Date(this.relativeDate.getTime() + fetchDuration).toISOString());\n        } while (data.length === 0 && this.relativeDate.getTime() < this.endTimestamp);\n\n        resolve(data);\n      } catch (ex) {\n        reject(ex);\n      }\n    });\n  }\n\n  async parseData(messages) {\n    return this.parser.parseDataBlock(messages);\n  }\n\n  isConnected() {\n    return isDefined(this.connector) && this.connector.isConnected();\n  }\n\n  async disconnect() {}\n\n}\n\n/* harmony default export */ var SosGetResult_replay_context = (SosGetResult_replay_context_SosGetResultReplayContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/context/SosGetResult.batch.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_batch_context_SosGetResultBatchContext extends SosGetResult_context {\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @return {String} the full url\n   */\n  getQueryString(properties) {\n    let queryString = super.getQueryString(properties);\n    const startTime = properties.startTime;\n    const endTime = properties.endTime; // adds temporalFilter\n\n    queryString += \"&temporalFilter=phenomenonTime,\" + startTime + \"/\" + endTime; // TODO: server issue, waiting for fix\n    // queryString += \"&responseFormat=application/octet-stream\";\n\n    return queryString;\n  }\n\n  async checkInit() {\n    return this.parser.checkInit();\n  }\n\n  async init(properties) {\n    this.startTimestamp = new Date(properties.startTime).getTime();\n    this.endTimestamp = new Date(properties.endTime).getTime();\n    this.relativeDate = undefined;\n    return super.init(properties);\n  }\n\n  async disconnect() {\n    this.relativeDate = undefined;\n  }\n\n  async nextBatch(properties, startTime, endTime, status = {\n    cancel: false\n  }) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const results = [];\n        await this.parser.templatePromise;\n        const data = await this.connector.doRequest('', this.getQueryString({ ...this.properties,\n          ...properties,\n          startTime: startTime,\n          endTime: endTime\n        }));\n\n        if (status.cancel) {\n          reject();\n        } else {\n          // this is because binary < 1.4 issue and the use of WS. In case in using WS, the data are provided in a array\n          if (Array.isArray(data)) {\n            for (let d of data) {\n              results.push(...(await this.parseData(d)));\n            }\n          } else {\n            results.push(...(await this.parseData(data)));\n          }\n\n          if (status.cancel) {\n            reject('Status=canceled');\n          }\n\n          resolve(results);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    });\n  }\n\n  async parseData(messages) {\n    return this.parser.parseDataBlock(messages);\n  }\n\n  isConnected() {\n    return isDefined(this.connector) && this.connector.isConnected();\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_batch_context = (SosGetResult_batch_context_SosGetResultBatchContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/handler/SosGetResult.handler.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass SosGetResult_handler_SosGetResultHandler extends TimeSeries_handler {\n  createContext(properties) {\n    if (properties.mode === Mode.REAL_TIME) {\n      return new SosGetResult_realtime_context();\n    } else if (properties.mode === Mode.REPLAY) {\n      return new SosGetResult_replay_context();\n    } else if (properties.mode === Mode.BATCH) {\n      return new SosGetResult_batch_context();\n    }\n\n    throw Error(`Not supported mode=${properties.mode}`);\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_handler = (SosGetResult_handler_SosGetResultHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sos/SosGetFois.parser.js\n\n\n\nclass SosGetFois_parser_SosGetFoisParser {\n  constructor() {\n    this.textDecoder = new TextDecoder();\n  }\n\n  init(properties) {}\n  /**\n  * Extract data from the message. The message is in XML format following the OGC specification\n  * @param {Object} data - the data to parse\n  * @return {Object} the parsed data\n  * @example\n     <?xml version='1.0' encoding='UTF-8'?>\n     <sos:GetFeatureOfInterestResponse xmlns:sos=\"http://www.opengis.net/sos/2.0\"\n                                       xmlns:gml=\"http://www.opengis.net/gml/3.2\"\n                                       xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n                                       xmlns:ns1=\"http://www.opengis.net/sensorml/2.0\">\n         <sos:featureMember>\n             <ns1:PhysicalSystem gml:id=\"FE12\">\n                 <gml:description>Vehicle FE12 from Huntsville Fire Department</gml:description>\n                 <gml:identifier codeSpace=\"uid\">urn:core:sensor:avl:911:fleet:FE12</gml:identifier>\n                 <gml:name>FE12</gml:name>\n             </ns1:PhysicalSystem>\n         </sos:featureMember>\n         <sos:featureMember>\n             <ns1:PhysicalSystem gml:id=\"FE4\">\n                 <gml:description>Vehicle FE4 from Huntsville Fire Department</gml:description>\n                 <gml:identifier codeSpace=\"uid\">urn:core:sensor:avl:911:fleet:FE4</gml:identifier>\n                 <gml:name>FE4</gml:name>\n             </ns1:PhysicalSystem>\n         </sos:featureMember>\n     </sos:GetFeatureOfInterestResponse>\n  */\n\n\n  async parseDataBlock(data) {\n    let rec = data;\n\n    if (data instanceof ArrayBuffer) {\n      rec = this.textDecoder.decode(data);\n    }\n\n    let sweXmlParser = new parsers_SWEXmlStreamParser(rec);\n    sweXmlParser.setXml(rec);\n    const json = sweXmlParser.toJson();\n    assertDefined(json.GetFeatureOfInterestResponse, 'json.GetFeatureOfInterestResponse does not exist');\n    assertDefined(json.GetFeatureOfInterestResponse.featureMember, 'json.GetFeatureOfInterestResponse.featureMember does not exist');\n    return json.GetFeatureOfInterestResponse.featureMember;\n  }\n\n}\n\n/* harmony default export */ var SosGetFois_parser = (SosGetFois_parser_SosGetFoisParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/context/SosGetFois.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\nclass SosGetFois_context_SosGetFoisContext extends Sos_context {\n  constructor() {\n    super(new SosGetFois_parser());\n  }\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.protocol the protocol protocol\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.procedureId the foi procedure id\n   * @param {String} [properties.responseFormat=application/xml] the response format (e.g video/mp4)\n   * @return {String} the full url\n   */\n\n\n  getQueryString(properties) {\n    let queryString = super.getQueryString({\n      responseFormat: 'application/xml',\n      ...properties\n    }); // adds request\n\n    queryString += \"&request=GetFeatureOfInterest\"; // adds foiURN if any\n\n    if (isDefined(properties.procedureId)) {\n      queryString += '&procedure=' + properties.procedureId;\n    }\n\n    return queryString;\n  }\n\n  async parseData(messages) {\n    return this.parser.parseDataBlock(messages);\n  }\n\n  connect() {\n    if (isDefined(this.connector)) {\n      this.connector.doRequest('', this.getQueryString(this.properties)).then(async encodedData => {\n        const decodedData = await this.parseData(encodedData);\n        this.handleData(decodedData);\n      });\n    } else {\n      throw Error('there is no connector defined');\n    }\n  }\n\n}\n\n/* harmony default export */ var SosGetFois_context = (SosGetFois_context_SosGetFoisContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/handler/SosGetFois.handler.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetFois_handler_SosGetFoisHandler extends DataSource_handler {\n  createContext(properties) {\n    return new SosGetFois_context();\n  }\n\n}\n\n/* harmony default export */ var SosGetFois_handler = (SosGetFois_handler_SosGetFoisHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/control/ControlFilter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass ControlFilter_ControlFilter extends Filter {\n  /**\n   *\n   * @param {Object} properties - object properties\n   * @param {string[]} [properties.q=undefined] - Comma separated keywords used for full-text search\n   * @param {string[]} [properties.actuableProperty=undefined] - Comma separated list of actuable property URIs to filter command streams\n   * @param {string[]} [properties.select=undefined] - Comma separated list of properties to include or exclude from results (use \"!\" prefix to exclude)\n   * @param {string} [properties.format='application/json'] - Mime type designating the format to use to encode the response.\n   * @param {string} [properties.issueTime=undefined] - ISO 8601 time range to filter commands on their issue time. When this parameter is omitted,\n   * no filtering on \"issueTime\" is applied.\n   */\n  constructor(properties) {\n    super({\n      q: undefined,\n      actuableProperty: undefined,\n      observedProperty: undefined,\n      issueTime: undefined,\n      select: undefined,\n      format: 'application/json',\n      ...properties // merge defined properties\n\n    }); //TODO: assertions\n  }\n\n}\n\n/* harmony default export */ var control_ControlFilter = (ControlFilter_ControlFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sweapi/context/SweApi.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass SweApi_context_SweApiContext extends DataSource_context {\n  createControlFilter(properties) {\n    const props = {};\n\n    if (isDefined(properties.keywords)) {\n      props.q = properties.keywords;\n    }\n\n    if (isDefined(properties.actuableProperty)) {\n      props.actuableProperty = properties.actuableProperty;\n    }\n\n    if (isDefined(properties.statusCode)) {\n      props.statusCode = properties.statusCode;\n    }\n\n    if (isDefined(properties.responseFormat)) {\n      props.format = properties.responseFormat;\n    }\n\n    if (isDefined(properties.issueTime)) {\n      props.issueTime = properties.issueTime;\n    }\n\n    if (isDefined(properties.executionTime)) {\n      props.executionTime = properties.executionTime;\n    }\n\n    if (isDefined(properties.reportTime)) {\n      props.reportTime = properties.reportTime;\n    }\n\n    return new control_ControlFilter(props);\n  }\n\n  createObservationFilter(properties) {\n    const props = {};\n\n    if (isDefined(properties.roi)) {\n      props.location = props.roi;\n    }\n\n    if (isDefined(properties.responseFormat)) {\n      props.format = properties.responseFormat;\n    }\n\n    if (isDefined(properties.replaySpeed)) {\n      props.replaySpeed = properties.replaySpeed;\n    }\n\n    if (isDefined(properties.startTime)) {\n      props.phenomenonTime = properties.startTime + '/' + properties.endTime;\n    }\n\n    if (isDefined(properties.resultTime)) {\n      props.resultTime = properties.resultTime;\n    }\n\n    if (isDefined(properties.resultTime)) {\n      props.resultTime = properties.resultTime;\n    }\n\n    if (isDefined(properties.featureOfInterest)) {\n      props.featureOfInterest = properties.featureOfInterest;\n    }\n\n    if (isDefined(properties.excludedProps)) {\n      props.select = properties.excludedProps.map(e => '!' + e);\n    }\n\n    if (isDefined(properties.includedProps)) {\n      if (!isDefined(props.select)) {\n        props.select = [];\n      }\n\n      props.select.concat(properties.includedProps);\n    }\n\n    return new observation_ObservationFilter(props);\n  }\n\n}\n\n/* harmony default export */ var SweApi_context = (SweApi_context_SweApiContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/MqttTopicConnector.js\n\n\n/**\n * Defines the MqttTopicConnector to communicate with Shared MqttConnector using broadcast channel\n * @extends DataConnector\n */\n\nclass MqttTopicConnector_MqttTopicConnector extends connector_DataConnector {\n  /**\n   *\n   * @param properties -\n   */\n  constructor(url, properties) {\n    super(url, properties);\n    this.lastReceiveTime = -1;\n    this.interval = -1;\n    this.broadcastChannel = new BroadcastChannel(url);\n\n    this.broadcastChannel.onmessage = message => {\n      if (message.data.topic === this.fullTopic) {\n        this.onMessage(message.data.data);\n      }\n    };\n\n    this.topics = [];\n  }\n\n  doRequest(topic = '', queryString = undefined) {\n    this.fullTopic = topic + '?' + queryString;\n    this.broadcastChannel.postMessage({\n      message: 'subscribe',\n      connectorId: this.id,\n      topic: this.fullTopic\n    });\n    this.topics.push(this.fullTopic);\n    this.onChangeStatus(Status.CONNECTED);\n  }\n  /**\n   * Disconnects.\n   */\n\n\n  disconnect() {\n    this.fullDisconnect(true);\n  }\n  /**\n   * Fully disconnect the websocket connection by sending a close message to the webWorker.\n   * @param {Boolean} removeInterval  - force removing the interval\n   */\n\n\n  fullDisconnect(removeInterval) {\n    if (this.broadcastChannel != null) {\n      for (let topic of this.topics) {\n        this.broadcastChannel.postMessage({\n          message: 'unsubscribe',\n          connectorId: this.id,\n          topic: topic\n        });\n      }\n\n      this.broadcastChannel.close();\n      this.broadcastChannel = null;\n      this.topics = [];\n    }\n\n    if (removeInterval) {\n      clearInterval(this.interval);\n    }\n\n    this.opened = false;\n  }\n  /**\n   * Try to reconnect if the connexion if closed\n   */\n\n\n  reconnect() {\n    this.onReconnect();\n\n    if (this.init) {\n      this.fullDisconnect(false);\n    }\n\n    this.connect();\n  }\n  /**\n   * The onMessage method used by the websocket to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n  /**\n   * Closes the webSocket.\n   */\n\n\n  close() {\n    this.disconnect();\n  }\n\n  isConnected() {\n    return this.broadcastChannel !== null && this.opened;\n  }\n\n  checkStatus(status) {\n    this.onChangeStatus(status);\n    this.status = status;\n  }\n\n}\n\n/* harmony default export */ var connector_MqttTopicConnector = (MqttTopicConnector_MqttTopicConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/SensorWebApi.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass SensorWebApi_SensorWebApi {\n  /**\n   * @param {Object} [networkProperties={}]\n   * @param {String} networkProperties.endpointUrl - defines the Http(s) endpoint URL\n   * @param {Boolean} networkProperties.tls - defines is use Http or Https secure protocol for fetching data\n   * @param {String} [networkProperties.streamProtocol='ws'] - the Stream protocol to use: 'ws' pr 'mqtt'\n   * @param {Object} [networkProperties.mqttOpts={}] - the Mqtt options if stream protocol is 'mqtt'\n   * @param {String} networkProperties.mqttOpts.prefix - the Mqtt prefix value\n   * @param {String} networkProperties.mqttOpts.endpointUrl - the Mqtt specific endpointUrl\n   * @param {Object} networkProperties.connectorOpts - Specific connector options\n   */\n  constructor(networkProperties) {\n    assertDefined(networkProperties.endpointUrl, 'endpointUrl');\n    this.networkProperties = networkProperties;\n    let endpoint = networkProperties.endpointUrl;\n\n    if (endpoint.endsWith('/')) {\n      endpoint = endpoint.substring(0, endpoint.length - 1);\n    }\n\n    const tls = networkProperties.tls ? 's' : '';\n    this.url = 'http' + tls + '://' + endpoint;\n    this._network = {};\n\n    if (isDefined(networkProperties.connector)) {\n      this._network.stream = {\n        connector: networkProperties.connector\n      };\n    } else if (isDefined(networkProperties.streamProtocol)) {\n      this._network.stream = {\n        connector: this.createStreamConnector(networkProperties)\n      };\n    } else {\n      // default Stream to WS\n      this._network.stream = {\n        connector: this.createStreamConnector({ ...networkProperties,\n          streamProtocol: 'ws'\n        })\n      };\n    }\n  }\n\n  baseUrl() {\n    return this.url;\n  }\n\n  stream() {\n    return this._network.stream.connector;\n  }\n\n  createStreamConnector(networkProperties) {\n    assertDefined(networkProperties.streamProtocol, 'streamProtocol');\n    let endpoint = networkProperties.endpointUrl;\n\n    if (networkProperties.streamProtocol === 'mqtt' && isDefined(networkProperties.mqttOpts)) {\n      endpoint = networkProperties.mqttOpts.endpointUrl;\n    }\n\n    if (endpoint.endsWith('/')) {\n      endpoint = endpoint.substring(0, endpoint.length - 1);\n    }\n\n    const tls = networkProperties.tls ? 's' : '';\n    const url = networkProperties.streamProtocol + tls + '://' + endpoint;\n\n    if (networkProperties.streamProtocol === 'mqtt') {\n      // return new MqttConnector(url, networkProperties);\n      return new connector_MqttTopicConnector(networkProperties.mqttOpts.bcId, networkProperties);\n    } else if (networkProperties.streamProtocol === 'ws') {\n      return new connector_WebSocketConnector(url);\n    }\n  }\n\n  connect() {\n    this._network.stream.connector.connect();\n  }\n\n  getHeaders() {\n    const headers = {};\n\n    if ('connectorOpts' in this.networkProperties) {\n      if ('username' in this.networkProperties.connectorOpts && 'password' in this.networkProperties.connectorOpts) {\n        headers['Authorization'] = 'Basic ' + btoa(this.networkProperties.connectorOpts.username + \":\" + this.networkProperties.connectorOpts.password);\n      } else {\n        for (let key in this.networkProperties.connectorOpts) {\n          headers[key] = this.networkProperties.connectorOpts[key];\n        }\n      }\n    }\n\n    return headers;\n  }\n\n  fetchAsJson(apiUrl, queryString) {\n    const fullUrl = this.baseUrl() + apiUrl + '?' + queryString;\n    const headers = this.getHeaders();\n    return fetch(fullUrl, {\n      method: 'GET',\n      credentials: 'include',\n      headers: headers\n    }).then(function (response) {\n      if (!response.ok) {\n        const err = new Error(`Got ${response.status} response from ${this.baseUrl()}`);\n        err.response = response;\n        throw err;\n      }\n\n      return response.json();\n    });\n  }\n\n  postAsJson(apiUrl, jsonPayload) {\n    const fullUrl = this.baseUrl() + apiUrl;\n    const headers = this.getHeaders();\n    headers['Accept'] = 'application/json';\n    headers['Content-Type'] = 'application/json';\n    fetch(fullUrl, {\n      method: 'POST',\n      headers: headers,\n      credentials: 'include',\n      body: jsonPayload\n    }).then(function (response) {\n      if (!response.ok) {\n        const err = new Error(`Got ${response.status} response from ${fullUrl}`);\n        err.response = response;\n        throw err;\n      }\n    });\n  }\n\n}\n\n/* harmony default export */ var sweapi_SensorWebApi = (SensorWebApi_SensorWebApi);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/command/CommandFilter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass CommandFilter_CommandFilter extends Filter {\n  /**\n   *\n   * @param {Object} properties - object properties\n   * @param {string[]} [properties.q=undefined] - Comma separated keywords used for full-text search\n   * @param {string[]} [properties.actuableProperty=undefined] - Comma separated list of actuable property URIs to filter command streams\n   * @param {string[]} [properties.select=undefined] - Comma separated list of properties to include or exclude from results (use \"!\" prefix to exclude)\n   * @param {string} [properties.format='application/json'] - Mime type designating the format to use to encode the response.\n   * @param {string} [properties.issueTime=undefined] - ISO 8601 time range to filter commands on their issue time. When this parameter is omitted,\n   * no filtering on \"issueTime\" is applied.\n   * @param {string} [properties.executionTime=undefined] - ISO 8601 time range to filter commands on their execution time.\n   * When this parameter is omitted, no filtering on \"executionTime\" is applied\n   * @param {string} [properties.reportTime=undefined] - ISO 8601 time range to filter status messages on their report time. When this parameter is omitted,\n   * no filtering on \"reportTime\" is applied.\n   * @param {string[]} [properties.statusCode=undefined] - Comma separated list of status codes: PENDING, ACCEPTED, REJECTED, SCHEDULED, UPDATED, CANCELED, EXECUTING, FAILED, COMPLETED\n   */\n  constructor(properties) {\n    super({\n      q: undefined,\n      actuableProperty: undefined,\n      select: undefined,\n      format: 'application/json',\n      issueTime: undefined,\n      executionTime: undefined,\n      reportTime: undefined,\n      statusCode: undefined,\n      ...properties // merge defined properties\n\n    }); //TODO: assertions\n  }\n\n}\n\n/* harmony default export */ var command_CommandFilter = (CommandFilter_CommandFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/collection/SweCollectionDataParser.js\nclass SweCollectionDataParser {\n  constructor(format = 'application/json') {\n    this.format = format;\n  }\n\n  parseData(data) {\n    if (this.format === 'application/om+json' || this.format === 'application/json') {\n      return this.parseOmJsonData(data);\n    } else if (this.format === 'application/swe+json') {\n      return this.parseSweJsonData(data);\n    } else if (this.format === 'application/swe+csv') {\n      return this.parseSweCsv(data);\n    } else if (this.format === 'application/swe+xml') {\n      return this.parseSweXml(data);\n    } else {\n      throw Error(`Unsupported collection format ${this.format}`);\n    }\n  }\n\n  parseOmJsonData(data) {\n    return data instanceof ArrayBuffer ? JSON.parse(String.fromCharCode.apply(null, new Uint8Array(data))).items : data.items;\n  }\n\n  parseSweJsonData(data) {\n    return data instanceof ArrayBuffer ? JSON.parse(String.fromCharCode.apply(null, new Uint8Array(data))) : data;\n  }\n\n  parseSweCsv(data) {\n    let content = data instanceof ArrayBuffer ? String.fromCharCode.apply(null, new Uint8Array(data)) : data;\n    return content.split('\\n');\n  }\n\n  parseSweXml(data) {\n    return data instanceof ArrayBuffer ? String.fromCharCode.apply(null, new Uint8Array(data)) : data;\n  }\n\n}\n\n/* harmony default export */ var collection_SweCollectionDataParser = (SweCollectionDataParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/Collection.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass Collection_Collection {\n  /**\n   *\n   */\n  constructor(url, filter, pageSize, parser, responseFormat = 'json') {\n    this.url = url;\n    this.filter = filter;\n    this.pageSize = pageSize;\n    this.parser = parser;\n    this.pageOffset = 0;\n    this.init = false;\n    this.total = 0;\n    this.collectionDataParser = new collection_SweCollectionDataParser(filter.props.format);\n    this.responseFormat = responseFormat;\n    this.currentPage = -1;\n  }\n  /**\n   * Check if has next page\n   * @return {boolean}\n   */\n\n\n  hasNext() {\n    return this.pageOffset !== -1;\n  }\n\n  async fetchData(offset) {\n    const queryString = `${this.filter.toQueryString()}&offset=${offset}&limit=${this.pageSize}`;\n    const fullUrl = this.url + '?' + queryString;\n    const jsonResponse = await fetch(fullUrl, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {}\n    }).then(response => {\n      if (!response.ok) {\n        const err = new Error(`Got ${response.status} response from ${fullUrl}`);\n        err.response = response;\n        throw err;\n      }\n\n      if (this.responseFormat === 'json') {\n        return response.json();\n      } else if (this.responseFormat === 'arraybuffer') {\n        return response.arrayBuffer();\n      }\n    });\n    return this.parseResponse(jsonResponse);\n  }\n\n  async parseResponse(jsonResponse) {\n    const items = this.collectionDataParser.parseData(jsonResponse);\n    const data = [];\n\n    if (Array.isArray(items)) {\n      for (let item of items) {\n        data.push(this.parser.parseData(item));\n      }\n    } else {\n      data.push(items);\n    }\n\n    return data;\n  }\n  /**\n   * Fetches next page.\n   * @param page - the number of page to fetch\n   * @return {Promise<Array>}\n   */\n\n\n  async nextPage() {\n    if (this.hasNext()) {\n      this.currentPage++;\n      this.pageOffset = this.currentPage * this.pageSize;\n      const data = await this.fetchData(this.pageOffset);\n\n      if (data.length === 0 || data.length < this.pageSize) {\n        this.pageOffset = -1;\n      }\n\n      return data;\n    } else {\n      throw Error('Has no more pages');\n    }\n  }\n\n  async page(page) {\n    this.currentPage = page;\n    this.pageOffset = this.currentPage * this.pageSize;\n    const data = await this.fetchData(this.pageOffset);\n\n    if (data.length === 0 || data.length < this.pageSize) {\n      this.pageOffset = -1;\n    }\n\n    return data;\n  }\n  /**\n   * Fetches previous page.\n   * @param page - the number of page to fetch\n   * @return {Promise<Array>}\n   */\n\n\n  async previousPage() {\n    if (this.hasPrevious()) {\n      this.currentPage--;\n      this.pageOffset = this.currentPage * this.pageSize;\n      return this.fetchData(this.pageOffset);\n    } else {\n      throw Error('Has no more pages');\n    }\n  }\n  /**\n   * Check if has previous page\n   * @return {boolean}\n   */\n\n\n  hasPrevious() {\n    return this.currentPage > 0;\n  }\n\n}\n\n/* harmony default export */ var sweapi_Collection = (Collection_Collection);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/routes.conf.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\nconst API = {\n  datastreams: {\n    search: '/datastreams',\n    by_id: '/datastreams/{id}',\n    observations: '/datastreams/{id}/observations',\n    schema: '/datastreams/{id}/schema'\n  },\n  systems: {\n    search: '/systems',\n    by_id: '/systems/{sysid}',\n    details: '/systems/{sysid}/details',\n    fois: '/systems/{sysid}/featuresOfInterest',\n    members: '/systems/{sysid}/members',\n    datastreams: '/systems/{sysid}/datastreams',\n    history_ver: '/systems/{sysid}/history/{ver}',\n    control_by_id: '/systems/{sysid}/controls/{dsid}',\n    controls: '/systems/{sysid}/controls',\n    events: '/systems/{sysid}/events',\n    history: '/systems/{sysid}/history'\n  },\n  controls: {\n    commands: '/systems/{sysid}/controls/{dsid}/commands',\n    command_by_id: '/systems/{sysid}/controls/{dsid}/commands/{cmdid}',\n    status: '/systems/{sysid}/controls/{dsid}/status',\n    schema: '/systems/{sysid}/controls/{dsid}/schema'\n  },\n  commands: {\n    status: '/systems/{sysid}/controls/{dsid}/commands/{cmdid}/status'\n  },\n  observations: {\n    search: '/observations',\n    by_id: '/observations/{id}'\n  },\n  fois: {\n    search: '/featuresOfInterest',\n    by_id: '/featuresOfInterest/{id}'\n  }\n};\n/* harmony default export */ var routes_conf = (API);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/ObservationsCollection.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass ObservationsCollection_ObservationsCollection extends sweapi_Collection {\n  /**\n   *\n   */\n  constructor(url, filter, pageSize, parser) {\n    super(url, filter, pageSize, parser, 'arraybuffer');\n  }\n\n  async parseResponse(encodedResponse) {\n    return this.parser.parseDataBlock(encodedResponse, this.filter.props.format);\n  }\n\n}\n\n/* harmony default export */ var sweapi_ObservationsCollection = (ObservationsCollection_ObservationsCollection);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/collection/SweApiCollectionObjectParser.js\nclass SweApiCollectionObjectParser {\n  constructor(networkProperties) {\n    this.networkProperties = networkProperties;\n  }\n\n  parseData(data) {}\n\n}\n\n/* harmony default export */ var collection_SweApiCollectionObjectParser = (SweApiCollectionObjectParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/common/OmJsonParser.parser.js\n\n\nclass OmJsonParser_parser_OmJsonParser extends parsers_JsonDataParser {\n  constructor(rootElement) {\n    super(rootElement);\n  }\n\n  getTimeField() {\n    return 'phenomenonTime';\n  }\n\n}\n\n/* harmony default export */ var OmJsonParser_parser = (OmJsonParser_parser_OmJsonParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/observations/SweApiResult.parser.js\n\n\n\nclass SweApiResult_parser_SweApiResultParser {\n  constructor(dataObject) {\n    this.dataObject = dataObject;\n    this.parsers = {\n      'application/om+json': {\n        schemaPromise: undefined,\n        parser: undefined\n      },\n      'application/swe+json': {\n        schemaPromise: undefined,\n        parser: undefined\n      },\n      'application/swe+xml': {\n        schemaPromise: undefined,\n        parser: undefined\n      },\n      'application/swe+csv': {\n        schemaPromise: undefined,\n        parser: undefined\n      },\n      'application/swe+binary': {\n        schemaPromise: undefined,\n        parser: undefined\n      }\n    };\n  }\n\n  async checkParser(format) {\n    if (!(format in this.parsers)) {\n      throw new Error(`Not support format ${format}`);\n    }\n\n    const parser = this.parsers[format];\n\n    if (!isDefined(parser.parser)) {\n      if (!isDefined(parser.schemaPromise)) {\n        this.parsers[format].schemaPromise = new Promise(async (resolve, reject) => {\n          try {\n            const jsonSchema = await this.dataObject.getSchema(new Filter({\n              obsFormat: format\n            }));\n            this.init(jsonSchema, format);\n            resolve();\n          } catch (ex) {\n            console.error(ex);\n            reject(ex);\n          }\n        });\n      }\n\n      await parser.schemaPromise;\n      return this.parsers[format].parser;\n    } else {\n      return parser.parser;\n    }\n  }\n\n  init(schema, format) {\n    throw new Error('Unsupported Operation');\n  }\n\n  async parseDataBlock(arrayBuffer, format = 'application/om+json') {\n    const parser = await this.checkParser(format);\n    return parser.parseDataBlock(arrayBuffer);\n  }\n\n}\n\n/* harmony default export */ var SweApiResult_parser = (SweApiResult_parser_SweApiResultParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/common/SweJsonParser.parser.js\n\n\nclass SweJsonParser_parser_SweJsonParser extends parsers_JsonDataParser {\n  constructor(rootElement) {\n    super(rootElement);\n  }\n\n}\n\n/* harmony default export */ var SweJsonParser_parser = (SweJsonParser_parser_SweJsonParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/common/SweBinaryParser.parser.js\n\n\nclass SweBinaryParser_parser_SweBinaryParser extends parsers_BinaryDataParser {\n  constructor(rootElement, encoding) {\n    super(rootElement, encoding);\n  }\n\n}\n\n/* harmony default export */ var SweBinaryParser_parser = (SweBinaryParser_parser_SweBinaryParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/common/SweCsvParser.parser.js\n\n\nclass SweCsvParser_parser_SweCsvParser extends parsers_TextDataParser {\n  constructor(rootElement, encoding) {\n    super(rootElement, encoding);\n  }\n\n}\n\n/* harmony default export */ var SweCsvParser_parser = (SweCsvParser_parser_SweCsvParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/observations/SweApiResult.control.parser.js\n\n\n\n\n\n\nclass SweApiResult_control_parser_SweApiResultControlParser extends SweApiResult_parser {\n  constructor(dataObject) {\n    super(dataObject);\n  }\n\n  init(schema, format) {\n    if (format === 'application/om+json') {\n      //resultSchema\n      this.parsers[format].parser = new OmJsonParser_parser(schema.commandSchema);\n    } else if (format === 'application/swe+json') {\n      //recordSchema\n      this.parsers[format].parser = new SweJsonParser_parser(schema.commandSchema);\n    }\n    /*else if(format === 'application/swe+xml') {\n      //recordSchema\n      this.parsers[format].parser = new SweXmlParser(schema.recordSchema);\n    }*/\n    else if (format === 'application/swe+binary') {\n      //recordSchema\n      this.parsers[format].parser = new SweBinaryParser_parser(schema.commandSchema, schema.commandEncoding);\n    } else if (format === 'application/swe+csv') {\n      //recordSchema\n      this.parsers[format].parser = new SweCsvParser_parser(schema.commandSchema, schema.commandEncoding);\n    } else {\n      throw Error(`Not supported parser format: ${format}`);\n    }\n  }\n\n}\n\n/* harmony default export */ var SweApiResult_control_parser = (SweApiResult_control_parser_SweApiResultControlParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/command/Command.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n\nclass Command_Command extends sweapi_SensorWebApi {\n  /**\n   * @param {Object} properties - the properties of the object\n   * @param {Object} [networkProperties={}]\n   * @param {String} networkProperties.endpointUrl - defines the Http(s) endpoint URL\n   * @param {Boolean} networkProperties.tls - defines is use Http or Https secure protocol for fetching data\n   * @param {String} [networkProperties.streamProtocol='ws'] - the Stream protocol to use: 'ws' pr 'mqtt'\n   * @param {Object} [networkProperties.mqttOpts={}] - the Mqtt options if stream protocol is 'mqtt'\n   * @param {String} networkProperties.mqttOpts.prefix - the Mqtt prefix value\n   * @param {String} networkProperties.mqttOpts.endpointUrl - the Mqtt specific endpointUrl\n   */\n  constructor(properties, networkProperties) {\n    super(networkProperties); // network properties\n\n    this.properties = properties;\n    this.jsonParser = new collection_SweCollectionDataParser(networkProperties);\n    this.sweParser = new SweApiResult_control_parser(this);\n  }\n  /**\n   * Get all status messages associated to a specific command\n   * route: /systems/{sysid}/controls/{dsid}/commands/{cmdid}/status\n   * @param {CommandFilter} [commandFilter== new CommandFilter()] - default Command filter\n   * @param {Number} [pageSize=10] - default page size\n   * @return {Promise<Collection<JSON>>} - response as JSON\n   */\n\n\n  async searchStatus(commandFilter = new command_CommandFilter(), pageSize = 10) {\n    return new sweapi_Collection(this.baseUrl() + routes_conf.commands.status.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties['control@id']).replace('{cmdid}', this.properties.id), commandFilter, pageSize, this.jsonParser);\n  }\n  /**\n   * Stream all status messages associated to a specific command\n   * route: /systems/{sysid}/controls/{dsid}/commands/{cmdid}/status\n   * @param {CommandFilter} [commandFilter== new CommandFilter()] - default Command filter\n   * @param {Function} callback\n   */\n\n\n  streamStatus(commandFilter = new command_CommandFilter(), callback = function () {}) {\n    this.stream().onMessage = async message => {\n      const dataBlock = await this.sweParser.parseDataBlock(message, commandFilter.props.format);\n      callback(dataBlock);\n    };\n\n    this.stream().doRequest(routes_conf.commands.status.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties['control@id']).replace('{cmdid}', this.properties.id), commandFilter.toQueryString(), 'arraybuffer');\n  }\n\n}\n\n/* harmony default export */ var command_Command = (Command_Command);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/collection/SweApiFetchCommand.parser.js\n\n\n\nclass SweApiFetchCommand_parser_SweApiFetchCommandParser extends collection_SweApiCollectionObjectParser {\n  constructor(networkProperties, systemId) {\n    super(networkProperties);\n    this.systemId = systemId;\n  }\n\n  parseData(data) {\n    return new command_Command({ ...data,\n      systemId: this.systemId\n    }, this.networkProperties);\n  }\n\n}\n\n/* harmony default export */ var SweApiFetchCommand_parser = (SweApiFetchCommand_parser_SweApiFetchCommandParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/observations/SweApiResult.collection.control.parser.js\n\n\nclass SweApiResult_collection_control_parser_SweApiResultCollectionControlParser extends SweApiResult_control_parser {\n  constructor(dataObject) {\n    super(dataObject);\n  }\n\n  init(schema, format) {\n    if (format === 'application/swe+binary') {\n      //resultSchema\n      throw new Error(`Format not supported ${format}`);\n    } else if (format === 'application/swe+xml') {\n      //resultSchema\n      throw new Error(`Format not supported ${format}`);\n    } else {\n      super.init(schema, format);\n    }\n  }\n\n}\n\n/* harmony default export */ var SweApiResult_collection_control_parser = (SweApiResult_collection_control_parser_SweApiResultCollectionControlParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/collection/SweApiControlStatus.parser.js\n\n\nclass SweApiControlStatus_parser_SweApiControlStatus extends collection_SweApiCollectionObjectParser {\n  constructor(networkProperties) {\n    super(networkProperties);\n    this.textDecoder = new TextDecoder();\n  }\n\n  parseData(data, format) {\n    let res;\n\n    if (format === 'arraybuffer') {\n      res = this.textDecoder.decode(data);\n    } else {\n      res = JSON.parse(data);\n    }\n\n    return JSON.parse(res);\n  }\n\n}\n\n/* harmony default export */ var SweApiControlStatus_parser = (SweApiControlStatus_parser_SweApiControlStatus);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/control/Control.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n\n\n\n\n\nclass Control_Control extends sweapi_SensorWebApi {\n  /**\n   * @param {Object} properties - the properties of the object\n   * @param {Object} [networkProperties={}]\n   * @param {String} networkProperties.endpointUrl - defines the Http(s) endpoint URL\n   * @param {Boolean} networkProperties.tls - defines is use Http or Https secure protocol for fetching data\n   * @param {String} [networkProperties.streamProtocol='ws'] - the Stream protocol to use: 'ws' pr 'mqtt'\n   * @param {Object} [networkProperties.mqttOpts={}] - the Mqtt options if stream protocol is 'mqtt'\n   * @param {String} networkProperties.mqttOpts.prefix - the Mqtt prefix value\n   * @param {String} networkProperties.mqttOpts.endpointUrl - the Mqtt specific endpointUrl\n   */\n  constructor(properties, networkProperties) {\n    super(networkProperties); // network properties\n\n    this.properties = properties;\n    this.commandParser = new SweApiFetchCommand_parser(networkProperties, this.properties['system@id']);\n    this.sweApiResultCollectionControlParser = new SweApiResult_collection_control_parser(this);\n    this.sweApiResultControlParser = new SweApiResult_control_parser(this);\n    this.sweApiControlStatusParser = new SweApiControlStatus_parser();\n  }\n  /**\n   * Get the list of commands received by a particular control interface\n   * route: /systems/{sysid}/controls/{dsid}/commands\n   * @param {CommandFilter} [commandFilter=new CommandFilter()] - default Command filter\n   * @param {Number} [pageSize=10] - default page size\n   * @return {Promise<Collection<JSON>>} - result as JSON\n   */\n\n\n  async searchCommands(commandFilter = new command_CommandFilter(), pageSize = 10) {\n    return new sweapi_ObservationsCollection(this.baseUrl() + routes_conf.controls.commands.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id), commandFilter, pageSize, this.sweApiResultCollectionControlParser);\n  }\n  /**\n   * Stream all commands received by a particular control interface\n   * route: /systems/{sysid}/controls/{dsid}/commands\n   * @param {ControlFilter} [controlFilter= new ControlFilter()] - default Control filter\n   * @param {Function} callback - A callback to get observations\n   */\n\n\n  streamCommands(controlFilter = new control_ControlFilter(), callback = function () {}) {\n    this.stream().onMessage = async message => {\n      const dataBlock = await this.sweApiResultControlParser.parseDataBlock(message, controlFilter.props.format);\n      callback(dataBlock);\n    };\n\n    this.stream().doRequest(routes_conf.controls.commands.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id), controlFilter.toQueryString(), 'arraybuffer');\n  }\n  /**\n   * Get a specific command resource by ID.\n   * route: /systems/{sysid}/controls/{dsid}/commands/{cmdid}\n   * @param {String} commandId - the ID of the Command resource\n   * @param {CommandFilter} [commandFilter=new CommandFilter()] - default Command filter\n   * @returns {Promise<Command>} - The corresponding Command\n   */\n\n\n  async getCommandById(commandId, commandFilter = new command_CommandFilter()) {\n    const apiUrl = routes_conf.controls.command_by_id.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id).replace('{cmdid}', commandId);\n    const queryString = commandFilter.toQueryString(['select', 'obsFormat']); //TODO: check useless obsFormat\n\n    const jsonData = await this.fetchAsJson(apiUrl, queryString);\n    return this.commandParser.parseData(jsonData);\n  }\n  /**\n   *  Send a new command to this control interface\n   *  route: /systems/{sysid}/controls/{dsid}/commands\n   * @param {JSON} jsonPayload - the JSON payload\n   * @param {CommandFilter} [commandFilter=new CommandFilter()] - default Command filter specifying the 'sysid' and 'dsid'\n   */\n\n\n  postCommand(jsonPayload, commandFilter = new command_CommandFilter()) {\n    const apiUrl = routes_conf.controls.commands.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id);\n    this.postAsJson(apiUrl, jsonPayload);\n  }\n  /**\n   * Send a new command to this control interface using streaming protocol such like WS or MQTT\n   * route: /systems/{sysid}/controls/{dsid}/commands\n   * @param {JSON} jsonPayload - the JSON payload\n   * @param {CommandFilter} [commandFilter=new CommandFilter()] - default Command filter specifying the 'sysid' and 'dsid'\n   */\n\n\n  publishCommand(payload, commandFilter = new command_CommandFilter()) {\n    this.stream().publishRequest(routes_conf.controls.commands.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id), payload);\n  }\n  /**\n   * Get all status messages sent by this control interface\n   * route: /systems/{sysid}/controls/{dsid}/status\n   * @param {ControlFilter} [controlFilter=new ControlFilter()] - default Control filter\n   * @param {Number} [pageSize=10] - default page size\n   * @return {Promise<Collection<JSON>>} - A Collection of JSON\n   */\n\n\n  async searchStatus(controlFilter = new control_ControlFilter(), pageSize = 10) {\n    return new sweapi_Collection(this.baseUrl() + routes_conf.controls.status.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id), controlFilter, pageSize, this.sweApiControlStatusParser);\n  }\n  /**\n   * Stream all status messages sent by this control interface\n   * route: /systems/{sysid}/controls/{dsid}/status\n   * @param {ControlFilter} [controlFilter= new ControlFilter()] - default Control filter\n   * @param {Function} callback - A callback to get observations\n   */\n\n\n  streamStatus(controlFilter = new control_ControlFilter(), callback = function () {}) {\n    this.stream().onMessage = async message => {\n      const dataBlock = await this.sweApiControlStatusParser.parseData(message, 'arraybuffer');\n      callback(dataBlock);\n    };\n\n    this.stream().doRequest(routes_conf.controls.status.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id), controlFilter.toQueryString(), 'arraybuffer');\n  }\n  /**\n   * Get the detailed schema of command messages in a command stream\n   * route: /systems/{sysid}/controls/{dsid}/schema\n   * @param {ControlFilter} [controlFilter= new ControlFilter()] - default Control filter, using 'commandFormat' to select response format\n   * @returns {Promise<JSON>} - The schema as JSON\n   */\n\n\n  async getSchema(controlFilter = new control_ControlFilter()) {\n    const apiUrl = routes_conf.controls.schema.replace('{sysid}', this.properties['system@id']).replace('{dsid}', this.properties.id);\n    const queryString = controlFilter.toQueryString(['select', 'commandFormat']);\n    return this.fetchAsJson(apiUrl, queryString);\n  }\n\n}\n\n/* harmony default export */ var control_Control = (Control_Control);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/datastream/DataStreamFilter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass DataStreamFilter_DataStreamFilter extends Filter {\n  /**\n   *\n   * @param {Object} properties - object properties\n   * @param {string[]} [properties.q=undefined] - Comma separated keywords used for full-text search\n   * @param {number[]} [properties.bbox=undefined] - BBOX to filter resources on their location\n   * @param {string} [properties.location=undefined] - WKT geometry and operator to filter resources on their location or geometry\n   * @param {string[]} [properties.observedProperty=undefined] - Comma separated list of observed property URIs to get observations for\n   * @param {string[]} [properties.featureOfInterest=undefined] - Comma separated list of feature of interest IDs to get observations for\n   * @param {string[]} [properties.select=undefined] - Comma separated list of properties to include or exclude from results (use \"!\" prefix to exclude)\n   * @param {string} [properties.format='application/json'] - Mime type designating the format to use to encode the response.\n   * @param {string} [properties.validTime=undefined] - validTime - ISO 8601 time range to filter resources on their validity time.\n   * When this parameter is omitted, the implicit value is \"now\", except for \"history\" collections where the absence of this parameter means no filtering is applied.\n   * @param {string} [properties.resultTime=undefined] - validTime - ISO 8601 time range to filter observations on their result time.\n   * When this parameter is omitted, no filtering on \"resultTime\" is applied.\n   * @param {string} [properties.phenomenonTime=undefined] - validTime - ISO 8601 time range to filter observations on the phenomenon time.\n   * When this parameter is omitted, no filtering on \"phenomenonTime\" is applied.\n   */\n  constructor(properties) {\n    super({\n      q: undefined,\n      bbox: undefined,\n      location: undefined,\n      observedProperty: undefined,\n      featureOfInterest: undefined,\n      select: undefined,\n      format: 'application/json',\n      obsFormat: 'application/om+json',\n      validTime: undefined,\n      phenomenonTime: undefined,\n      resultTime: undefined,\n      ...properties // merge defined properties\n\n    }); //TODO: assertions\n  }\n\n}\n\n/* harmony default export */ var datastream_DataStreamFilter = (DataStreamFilter_DataStreamFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/observations/SweApiResult.datastream.parser.js\n\n\n\n\n\n\n\nclass SweApiResult_datastream_parser_SweApiResultDatastreamParser extends SweApiResult_parser {\n  constructor(dataObject) {\n    super(dataObject);\n  }\n\n  init(schema, format) {\n    if (format in this.parsers && isDefined(this.parsers[format].parser)) {\n      return this.parsers[format].parser;\n    }\n\n    if (format === 'application/om+json') {\n      //resultSchema\n      this.parsers[format].parser = new OmJsonParser_parser(schema.resultSchema);\n    } else if (format === 'application/swe+json') {\n      //recordSchema\n      this.parsers[format].parser = new SweJsonParser_parser(schema.recordSchema);\n    }\n    /*else if(format === 'application/swe+xml') {\n      //recordSchema\n      this.parsers[format].parser = new SweXmlParser(schema.recordSchema);\n    }*/\n    else if (format === 'application/swe+binary') {\n      //recordSchema\n      this.parsers[format].parser = new SweBinaryParser_parser(schema.recordSchema, schema.recordEncoding);\n    } else if (format === 'application/swe+csv') {\n      //recordSchema\n      this.parsers[format].parser = new SweCsvParser_parser(schema.recordSchema, schema.recordEncoding);\n    } else {\n      throw Error(`Not supported parser format: ${format}`);\n    }\n  }\n\n}\n\n/* harmony default export */ var SweApiResult_datastream_parser = (SweApiResult_datastream_parser_SweApiResultDatastreamParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/collection/CollectionOmJsonParser.parser.js\n\n\nclass CollectionOmJsonParser_parser_OmJsonCollectionParser extends OmJsonParser_parser {\n  constructor(rootElement) {\n    super(rootElement);\n  }\n\n  getTimeField() {\n    return 'phenomenonTime';\n  }\n\n  parseDataBlock(arrayBuffer) {\n    let dataBlock = this.textDecoder.decode(arrayBuffer);\n    const jsonData = JSON.parse(dataBlock);\n    const result = [];\n\n    for (let d of jsonData.items) {\n      d['timestamp'] = new Date(d[this.getTimeField()]).getTime();\n      result.push(d);\n    }\n\n    return result;\n  }\n\n}\n\n/* harmony default export */ var CollectionOmJsonParser_parser = (CollectionOmJsonParser_parser_OmJsonCollectionParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/parsers/sweapi/observations/SweApiResult.collection.datastream.parser.js\n\n\n\nclass SweApiResult_collection_datastream_parser_SweApiResultCollectionDatastreamParser extends SweApiResult_datastream_parser {\n  constructor(dataObject) {\n    super(dataObject);\n  }\n\n  init(schema, format) {\n    if (format === 'application/om+json') {\n      //resultSchema\n      this.parsers[format].parser = new CollectionOmJsonParser_parser(schema.resultSchema);\n    } else if (format === 'application/swe+xml') {\n      //resultSchema\n      throw new Error(`Format not supported ${format}`);\n    } else {\n      super.init(schema, format);\n    }\n  }\n\n}\n\n/* harmony default export */ var SweApiResult_collection_datastream_parser = (SweApiResult_collection_datastream_parser_SweApiResultCollectionDatastreamParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/datastream/DataStream.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n\n\nclass DataStream_DataStream extends sweapi_SensorWebApi {\n  /**\n   * @param {Object} properties - the properties of the object\n   * @param {Object} [networkProperties={}]\n   * @param {String} networkProperties.endpointUrl - defines the Http(s) endpoint URL\n   * @param {Boolean} networkProperties.tls - defines is use Http or Https secure protocol for fetching data\n   * @param {String} [networkProperties.streamProtocol='ws'] - the Stream protocol to use: 'ws' pr 'mqtt'\n   * @param {Object} [networkProperties.mqttOpts={}] - the Mqtt options if stream protocol is 'mqtt'\n   * @param {String} networkProperties.mqttOpts.prefix - the Mqtt prefix value\n   * @param {String} networkProperties.mqttOpts.endpointUrl - the Mqtt specific endpointUrl\n   */\n  constructor(properties, networkProperties) {\n    super(networkProperties); // network properties\n\n    this.properties = properties;\n    this.sweApiResultParser = new SweApiResult_datastream_parser(this);\n    this.sweApiResultCollectionDatastreamParser = new SweApiResult_collection_datastream_parser(this);\n  }\n  /**\n   * Retrieve historical observations from a datastream\n   * route: /datastreams/{id}/observations\n   * @param {ObservationFilter} [observationFilter=new ObservationFilter()] - default ObservationFilter\n   * @param {Function} callback - A callback to get observations\n   */\n\n\n  streamObservations(observationFilter = new observation_ObservationFilter(), callback = function () {}) {\n    this.stream().onMessage = async message => {\n      const dataBlock = await this.sweApiResultParser.parseDataBlock(message, observationFilter.props.format);\n      callback(dataBlock);\n    };\n\n    return this.stream().doRequest(routes_conf.datastreams.observations.replace('{id}', this.properties.id), observationFilter.toQueryString([], ['phenomenonTime']), 'arraybuffer');\n  }\n  /**\n   * Retrieve historical observations from a datastream\n   * route: /datastreams/{id}/observations\n   * @param {ObservationFilter} [observationFilter=new ObservationFilter()] - default ObservationFilter\n   * @param {Number} [pageSize=10] - default page size\n   * @param {DataSourceParser} [parser=new SweApiResultParser()] - default observations parser\n   * @return {Collection<JSON>} - result observations as JSON\n   */\n\n\n  async searchObservations(observationFilter = new observation_ObservationFilter(), pageSize = 10, parser = this.sweApiResultParser) {\n    return new sweapi_ObservationsCollection(this.baseUrl() + routes_conf.datastreams.observations.replace('{id}', this.properties.id), observationFilter, pageSize, this.sweApiResultCollectionDatastreamParser);\n  }\n  /**\n   * Get the schema of a datastream\n   * route: /datastreams/{id}/schema\n   * @param {DataStreamFilter} [dataStreamFilter=new DataStreamFilter()] - default datastream filter\n   * @return {Promise<JSON>} - the JSON schema\n   */\n\n\n  async getSchema(dataStreamFilter = new datastream_DataStreamFilter()) {\n    const apiUrl = routes_conf.datastreams.schema.replace('{id}', this.properties.id);\n    const queryString = dataStreamFilter.toQueryString(['select', 'obsFormat']);\n    return this.fetchAsJson(apiUrl, queryString);\n  }\n\n}\n\n/* harmony default export */ var datastream_DataStream = (DataStream_DataStream);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sweapi/context/SweApi.realtime.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass SweApi_realtime_context_SweApiRealTimeContext extends SweApi_context {\n  init(properties) {\n    this.properties = properties;\n    const networkProperties = { ...properties,\n      streamProtocol: properties.protocol\n    };\n    let filter;\n    let regex = new RegExp('\\\\/systems\\\\/(.*)\\\\/controls\\\\/(.*)\\\\/status');\n    this.streamObject = undefined; // check control status\n\n    if (regex.test(properties.resource)) {\n      filter = this.createControlFilter(properties); // is observation streaming\n\n      const match = regex.exec(properties.resource);\n      this.streamObject = new control_Control({\n        id: match[2],\n        'system@id': match[1]\n      }, networkProperties);\n\n      this.streamFunction = function () {\n        this.streamObject.streamStatus(filter, messages => this.onStreamMessage(messages, filter.props.format));\n      };\n    } else {\n      // check for datastream observations\n      regex = new RegExp('\\\\/(.*\\\\/)(.*)\\\\/observations'); // /datastreams/abc13/observations\n\n      if (regex.test(properties.resource)) {\n        filter = this.createObservationFilter(properties); // is observation streaming\n\n        const match = regex.exec(properties.resource);\n        this.streamObject = new datastream_DataStream({\n          id: match[2]\n        }, networkProperties);\n\n        this.streamFunction = function () {\n          this.streamObject.streamObservations(filter, messages => this.onStreamMessage(messages, filter.props.format));\n        };\n      }\n    }\n\n    this.streamObject.stream().onChangeStatus = this.onChangeStatus.bind(this);\n  }\n\n  onStreamMessage(messages, format) {\n    // in case of om+json ,we have to add the timestamp which is not included for each record but at the root level\n    let results = messages;\n    let version = this.properties.version;\n\n    for (let message of messages) {\n      message.version = version;\n    }\n\n    this.handleData(results, format);\n  }\n\n  connect() {\n    this.streamFunction();\n  }\n\n  async disconnect() {\n    if (isDefined(this.streamObject)) {\n      this.streamObject.stream().disconnect();\n    }\n  }\n\n  isConnected() {\n    return this.streamObject.stream().status;\n  }\n\n}\n\n/* harmony default export */ var SweApi_realtime_context = (SweApi_realtime_context_SweApiRealTimeContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sweapi/context/SweApi.replay.context.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass SweApi_replay_context_SweApiReplayContext extends SweApi_context {\n  init(properties) {\n    this.collection = undefined;\n    this.relativeStartTimestamp = undefined;\n    this.properties = properties;\n    this.replayFunction = undefined;\n    const networkProperties = { ...properties\n    };\n    let filter;\n    let regex = new RegExp('\\\\/systems\\\\/(.*)\\\\/controls\\\\/(.*)\\\\/status'); // check control status\n\n    if (regex.test(properties.resource)) {\n      filter = this.createControlFilter(properties); // is observation streaming\n\n      const match = regex.exec(properties.resource);\n      let control = new control_Control({\n        id: match[2],\n        'system@id': match[1]\n      }, networkProperties);\n\n      this.replayFunction = function (props, startTimestamp, endTimestamp) {\n        const controlFilter = this.createControlFilter({ ...properties,\n          ...props,\n          startTime: new Date(startTimestamp).toISOString(),\n          endTime: new Date(endTimestamp).toISOString()\n        });\n        return control.searchStatus(controlFilter, 1);\n      };\n    } else {\n      // check for datastream observations\n      regex = new RegExp('\\\\/(.*\\\\/)(.*)\\\\/observations'); // /datastreams/abc13/observations\n\n      if (regex.test(properties.resource)) {\n        // is observation streaming\n        const match = regex.exec(properties.resource);\n        let dataStream = new datastream_DataStream({\n          id: match[2]\n        }, networkProperties);\n        this.dataStream = dataStream;\n\n        this.replayFunction = function (props, startTime, endTime) {\n          const obsFilter = this.createObservationFilter({ ...properties,\n            ...props,\n            replaySpeed: undefined,\n            startTime: startTime,\n            endTime: endTime\n          });\n          return dataStream.searchObservations(obsFilter, properties.prefetchBatchSize);\n        };\n      }\n    }\n  }\n\n  async disconnect() {\n    this.collection = undefined;\n    this.relativeStartTimestamp = undefined;\n    this.replayFunction = undefined;\n  }\n\n  async nextBatch(properties, masterTimestamp, status = {\n    cancel: false\n  }) {\n    let version = this.properties.version;\n    return new Promise(async (resolve, reject) => {\n      try {\n        let data;\n        let results = [];\n\n        const moveTimeCursor = async () => {\n          let relativeStartTime;\n\n          if (isDefined(this.relativeStartTimestamp)) {\n            relativeStartTime = new Date(this.relativeStartTimestamp + 1).toISOString();\n          } else {\n            //TOCHECK: ISO or timestamp\n            relativeStartTime = new Date(this.properties.startTime).toISOString();\n          }\n\n          console.warn(`fetching ${relativeStartTime} -> ` + `${this.properties.endTime} for datasource ${this.properties.dataSourceId}`); // if disconnected, replay function is reset\n\n          if (this.replayFunction) {\n            this.collection = await this.replayFunction(properties, relativeStartTime, this.properties.endTime);\n          }\n        };\n\n        const fetchNext = async () => {\n          data = await this.collection.nextPage();\n\n          if (status.cancel) {\n            reject('Status has been cancelled');\n          }\n\n          if (data.length > 0) {\n            results = data;\n\n            for (let d of results) {\n              d.version = version;\n            }\n\n            if (status.cancel) {\n              reject('Status has been cancelled');\n            } else {\n              // start startTime cursor\n              this.relativeStartTimestamp = results[results.length - 1].timestamp;\n              resolve(data);\n            }\n          }\n        };\n\n        await moveTimeCursor();\n        await fetchNext();\n      } catch (ex) {\n        reject(ex);\n      }\n    });\n  }\n\n}\n\n/* harmony default export */ var SweApi_replay_context = (SweApi_replay_context_SweApiReplayContext);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sweapi/handler/SweApi.handler.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\nclass SweApi_handler_SweApiHandler extends TimeSeries_handler {\n  createContext(properties) {\n    if (properties.mode === Mode.REPLAY || properties.mode === Mode.BATCH) {\n      return new SweApi_replay_context();\n    } else {\n      return new SweApi_realtime_context();\n    }\n  }\n\n}\n\n/* harmony default export */ var SweApi_handler = (SweApi_handler_SweApiHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/worker/DataSourceWorker.js\n\n\n\n\nclass DataSourceWorker_DataSourceWorker {\n  constructor() {\n    this.dataSourceHandlers = {};\n  }\n\n  handleMessage(event) {\n    let resp = {};\n\n    if (event.data.ackId) {\n      resp.ackId = event.data.ackId;\n    }\n\n    const eventData = event.data;\n\n    try {\n      if (eventData.message === 'init') {\n        this.handleInit(eventData, resp);\n      }\n\n      if (eventData.message === 'connect') {\n        this.handleConnect(eventData, resp);\n      } else if (eventData.message === 'disconnect') {\n        this.handleDisconnect(eventData, resp);\n      } else if (eventData.message === 'topics') {\n        this.handleTopics(eventData, resp);\n      } else if (eventData.message === 'update-properties') {\n        this.handleUpdateProperties(eventData, resp);\n      } else if (eventData.message === 'is-connected') {\n        this.handleIsConnected(eventData, resp);\n      } else if (eventData.message === 'is-init') {\n        this.handleIsInit(eventData, resp);\n      } else if (eventData.message === 'remove-handler') {\n        this.handleRemoveHandler(eventData, resp);\n      }\n    } catch (ex) {\n      console.error(ex);\n      resp.error = ex;\n      this.postMessage(resp);\n    } finally {// resp.data = returnValue;\n      // this.postMessage(resp);\n    }\n  }\n\n  handleInit(eventData, resp) {\n    const dsId = eventData.dsId;\n    this.dataSourceHandlers[dsId] = this.createHandlerFromProperties(eventData.properties);\n    this.dataSourceHandlers[dsId].init(eventData.properties, eventData.topics, eventData.id).then(() => {\n      resp.data = this.dataSourceHandlers[dsId].isInitialized();\n      this.postMessage(resp);\n    });\n  }\n\n  handleConnect(eventData, resp) {\n    const dsId = eventData.dsId;\n    this.dataSourceHandlers[dsId].connect(eventData.startTime, eventData.version).then(() => {\n      this.postMessage(resp);\n    });\n  }\n\n  handleDisconnect(eventData, resp) {\n    const dsId = eventData.dsId;\n    this.dataSourceHandlers[dsId].disconnect().then(() => {\n      this.postMessage(resp);\n    });\n  }\n\n  handleTopics(eventData, resp) {\n    const dsId = eventData.dsId;\n    this.dataSourceHandlers[dsId].setTopics(eventData.topics);\n    this.postMessage(resp);\n  }\n\n  handleUpdateProperties(eventData, resp) {\n    const dsId = eventData.dsId;\n    this.dataSourceHandlers[dsId].updateProperties(eventData.data);\n    this.postMessage(resp);\n  }\n\n  handleIsConnected(eventData, resp) {\n    const dsId = eventData.dsId;\n    resp.data = this.dataSourceHandlers[dsId].isConnected();\n    this.postMessage(resp);\n  }\n\n  handleRemoveHandler(eventData, resp) {\n    const dsId = eventData.dsId;\n    delete this.dataSourceHandlers[dsId];\n    this.postMessage(resp);\n  }\n\n  handleIsInit(eventData, resp) {\n    const dsId = eventData.dsId;\n    resp.data = this.dataSourceHandlers[dsId].isInitialized();\n    this.postMessage(resp);\n  }\n\n  postMessage(message) {}\n\n  createHandlerFromProperties(properties) {\n    if (properties.type === 'SosGetResult') {\n      return new SosGetResult_handler();\n    } else if (properties.type === 'SosGetFois') {\n      return new SosGetFois_handler();\n    } else if (properties.type === 'SweApiStream') {\n      return new SweApi_handler();\n    } else {\n      throw Error('Unsupported SOS service Error');\n    }\n  }\n\n}\n\n/* harmony default export */ var worker_DataSourceWorker = (DataSourceWorker_DataSourceWorker);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/worker/DataSource.worker.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nconst dataSourceWorker = new worker_DataSourceWorker();\ndataSourceWorker.postMessage = (message) => {\n    self.postMessage(message);\n}\nself.onmessage = async (event) => {\n    dataSourceWorker.handleMessage(event);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);