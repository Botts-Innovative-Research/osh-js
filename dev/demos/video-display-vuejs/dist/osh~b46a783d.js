(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return hasValue; });\n/* unused harmony export hex2rgb */\n/* unused harmony export hex2rgba */\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return capitalizeFirstLetter; });\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* unused harmony export merge */\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGB\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\nfunction hex2rgba(hex) {\n  return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16), parseInt(hex.slice(7, 9), 16) / 255];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Capitalize the first letter of a given string\n * @param {String} str - the input string\n * @returns {String} the result\n */\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Mode; });\n/**\n * Enum for datasource mode.\n * @readonly\n * @enum {{name: string}}\n */\nconst Mode = {\n  REPLAY: "replay",\n  BATCH: "batch",\n  REAL_TIME: "realTime"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL2RhdGFzb3VyY2UvTW9kZS5qcz8yYzgyIl0sIm5hbWVzIjpbIk1vZGUiLCJSRVBMQVkiLCJCQVRDSCIsIlJFQUxfVElNRSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsSUFBSSxHQUFHO0VBQ2hCQyxNQUFNLEVBQUUsUUFEUTtFQUVoQkMsS0FBSyxFQUFHLE9BRlE7RUFHaEJDLFNBQVMsRUFBRTtBQUhLLENBQWIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW51bSBmb3IgZGF0YXNvdXJjZSBtb2RlLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBNb2RlID0ge1xuICAgIFJFUExBWTogXCJyZXBsYXlcIixcbiAgICBCQVRDSDogIFwiYmF0Y2hcIixcbiAgICBSRUFMX1RJTUU6IFwicmVhbFRpbWVcIlxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return TIME_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\n/* unused harmony export MAGIC_END_PACKET */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\nconst MAGIC_END_PACKET = 'magic-packet';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL0NvbnN0YW50cy5qcz9hZjFiIl0sIm5hbWVzIjpbIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiVElNRV9TWU5DSFJPTklaRVJfVE9QSUMiLCJEQVRBU09VUkNFX0RBVEFfVE9QSUMiLCJEQVRBU09VUkNFX1RJTUVfVE9QSUMiLCJGRk1QRUdfVklFV19ERUNPREVfVE9QSUMiLCJNQUdJQ19FTkRfUEFDS0VUIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBTyxNQUFNQSx1QkFBdUIsR0FBRyxvQkFBaEM7QUFDQSxNQUFNQyx1QkFBdUIsR0FBRyx5QkFBaEM7QUFFQSxNQUFNQyxxQkFBcUIsR0FBRyxrQkFBOUI7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxrQkFBOUI7QUFFQSxNQUFNQyx3QkFBd0IsR0FBRyxnQkFBakM7QUFFQSxNQUFNQyxnQkFBZ0IsR0FBRyxjQUF6QiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IERBVEFfU1lOQ0hST05JWkVSX1RPUElDID0gJ2RhdGEtc3luY2hyb25pemVyLSc7XG5leHBvcnQgY29uc3QgVElNRV9TWU5DSFJPTklaRVJfVE9QSUMgPSAnZGF0YS1zeW5jaHJvbml6ZXItdGltZS0nO1xuXG5leHBvcnQgY29uc3QgREFUQVNPVVJDRV9EQVRBX1RPUElDID0gJ2RhdGFzb3VyY2UtZGF0YS0nO1xuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfVElNRV9UT1BJQyA9ICdkYXRhc291cmNlLXRpbWUtJztcblxuZXhwb3J0IGNvbnN0IEZGTVBFR19WSUVXX0RFQ09ERV9UT1BJQyA9ICdmZm1wZWctZGVjb2RlLSc7XG5cbmV4cG9ydCBjb25zdCBNQUdJQ19FTkRfUEFDS0VUID0gJ21hZ2ljLXBhY2tldCc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  FETCH_STARTED: \'fetch-start\',\n  FETCH_ENDED: \'fetch-end\',\n  CLOSED: "closed",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL2Nvbm5lY3Rvci9TdGF0dXMuanM/Y2YxOSJdLCJuYW1lcyI6WyJTdGF0dXMiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIiwiRkVUQ0hfU1RBUlRFRCIsIkZFVENIX0VOREVEIiwiQ0xPU0VEIiwiQ0xPU0VEX0VSUk9SIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUc7RUFDbEJDLFVBQVUsRUFBRSxZQURNO0VBRWxCQyxTQUFTLEVBQUcsV0FGTTtFQUdsQkMsWUFBWSxFQUFFLGNBSEk7RUFJbEJDLGFBQWEsRUFBRSxhQUpHO0VBS2xCQyxXQUFXLEVBQUUsV0FMSztFQU1sQkMsTUFBTSxFQUFFLFFBTlU7RUFPbEJDLFlBQVksRUFBRTtBQVBJLENBQWYiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW51bSBmb3IgY29ubmVjdGlvbiBzdGF0dXMuXG4gKiBAcmVhZG9ubHlcbiAqIEBlbnVtIHt7bmFtZTogc3RyaW5nfX1cbiAqL1xuZXhwb3J0IGNvbnN0IFN0YXR1cyA9IHtcbiAgICBDT05ORUNUSU5HOiBcImNvbm5lY3RpbmdcIixcbiAgICBDT05ORUNURUQ6ICBcImNvbm5lY3RlZFwiLFxuICAgIERJU0NPTk5FQ1RFRDogXCJkaXNjb25uZWN0ZWRcIixcbiAgICBGRVRDSF9TVEFSVEVEOiAnZmV0Y2gtc3RhcnQnLFxuICAgIEZFVENIX0VOREVEOiAnZmV0Y2gtZW5kJyxcbiAgICBDTE9TRUQ6IFwiY2xvc2VkXCIsXG4gICAgQ0xPU0VEX0VSUk9SOiBcImNsb3NlZC1lcnJvclwiXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EventType; });\nconst EventType = {\n  DATA: 'data',\n  LAST_TIME: 'last-time',\n  MASTER_TIME: 'master-time',\n  STATUS: 'status',\n  TIME_CHANGED: 'time-changed',\n  CLOSED: 'closed'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL2V2ZW50L0V2ZW50VHlwZS5qcz80MDAyIl0sIm5hbWVzIjpbIkV2ZW50VHlwZSIsIkRBVEEiLCJMQVNUX1RJTUUiLCJNQVNURVJfVElNRSIsIlNUQVRVUyIsIlRJTUVfQ0hBTkdFRCIsIkNMT1NFRCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBTyxNQUFNQSxTQUFTLEdBQUc7RUFDckJDLElBQUksRUFBRSxNQURlO0VBRXJCQyxTQUFTLEVBQUUsV0FGVTtFQUdyQkMsV0FBVyxFQUFFLGFBSFE7RUFJckJDLE1BQU0sRUFBRSxRQUphO0VBS3JCQyxZQUFZLEVBQUUsY0FMTztFQU1yQkMsTUFBTSxFQUFFO0FBTmEsQ0FBbEIiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBFdmVudFR5cGUgPSB7XG4gICAgREFUQTogJ2RhdGEnLFxuICAgIExBU1RfVElNRTogJ2xhc3QtdGltZScsXG4gICAgTUFTVEVSX1RJTUU6ICdtYXN0ZXItdGltZScsXG4gICAgU1RBVFVTOiAnc3RhdHVzJyxcbiAgICBUSU1FX0NIQU5HRUQ6ICd0aW1lLWNoYW5nZWQnLFxuICAgIENMT1NFRDogJ2Nsb3NlZCdcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n\n\nclass WorkerExt {\n  constructor(worker) {\n    this.worker = worker;\n    this.onmessage = null;\n  }\n\n  postMessage(message, transfer) {\n    // console.log('post no ack');\n    this.worker.postMessage(message, transfer);\n  }\n\n  postMessageWithAck(message, transfer) {\n    const ackId = Object(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ \"n\"])(); // console.log('post ack ' + ackId);\n\n    return new Promise((resolve, reject) => {\n      const controller = new AbortController();\n      this.worker.addEventListener(\"message\", e => {\n        //console.log('resp ' + e.data.ackId);\n        if (e.data.ackId === ackId) {\n          delete e.data.ackId;\n          controller.abort();\n\n          if (e.error) {\n            reject(e.error);\n          } else {\n            resolve(e.data);\n          }\n        }\n      }, {\n        signal: controller.signal\n      });\n      message.ackId = ackId;\n      this.worker.postMessage(message, transfer);\n    });\n  }\n\n  set onmessage(f) {\n    this.worker.onmessage = f;\n  }\n\n  terminate() {\n    if (this.worker) {\n      this.worker.terminate();\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (WorkerExt);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3dvcmtlci9Xb3JrZXJFeHQuanM/YTBhMiJdLCJuYW1lcyI6WyJXb3JrZXJFeHQiLCJjb25zdHJ1Y3RvciIsIndvcmtlciIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwibWVzc2FnZSIsInRyYW5zZmVyIiwicG9zdE1lc3NhZ2VXaXRoQWNrIiwiYWNrSWQiLCJyYW5kb21VVUlEIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJkYXRhIiwiYWJvcnQiLCJlcnJvciIsInNpZ25hbCIsImYiLCJ0ZXJtaW5hdGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7O0FBRUEsTUFBTUEsU0FBTixDQUFnQjtFQUNaQyxXQUFXLENBQUNDLE1BQUQsRUFBUztJQUNoQixLQUFLQSxNQUFMLEdBQWNBLE1BQWQ7SUFDQSxLQUFLQyxTQUFMLEdBQWlCLElBQWpCO0VBRUg7O0VBRURDLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEVBQW9CO0lBQzNCO0lBQ0EsS0FBS0osTUFBTCxDQUFZRSxXQUFaLENBQXdCQyxPQUF4QixFQUFpQ0MsUUFBakM7RUFDSDs7RUFFREMsa0JBQWtCLENBQUNGLE9BQUQsRUFBVUMsUUFBVixFQUFvQjtJQUNsQyxNQUFNRSxLQUFLLEdBQUdDLHVFQUFVLEVBQXhCLENBRGtDLENBRWxDOztJQUVBLE9BQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtNQUVwQyxNQUFNQyxVQUFVLEdBQUcsSUFBSUMsZUFBSixFQUFuQjtNQUVBLEtBQUtaLE1BQUwsQ0FBWWEsZ0JBQVosQ0FBNkIsU0FBN0IsRUFBd0NDLENBQUMsSUFBSTtRQUN6QztRQUNBLElBQUlBLENBQUMsQ0FBQ0MsSUFBRixDQUFPVCxLQUFQLEtBQWlCQSxLQUFyQixFQUE0QjtVQUN4QixPQUFPUSxDQUFDLENBQUNDLElBQUYsQ0FBT1QsS0FBZDtVQUNBSyxVQUFVLENBQUNLLEtBQVg7O1VBQ0EsSUFBR0YsQ0FBQyxDQUFDRyxLQUFMLEVBQVk7WUFDUlAsTUFBTSxDQUFDSSxDQUFDLENBQUNHLEtBQUgsQ0FBTjtVQUNILENBRkQsTUFFTztZQUNIUixPQUFPLENBQUNLLENBQUMsQ0FBQ0MsSUFBSCxDQUFQO1VBQ0g7UUFDSjtNQUVKLENBWkQsRUFZRztRQUFDRyxNQUFNLEVBQUVQLFVBQVUsQ0FBQ087TUFBcEIsQ0FaSDtNQWNBZixPQUFPLENBQUNHLEtBQVIsR0FBZ0JBLEtBQWhCO01BQ0EsS0FBS04sTUFBTCxDQUFZRSxXQUFaLENBQXdCQyxPQUF4QixFQUFpQ0MsUUFBakM7SUFFSCxDQXJCTSxDQUFQO0VBc0JIOztFQUVZLElBQVRILFNBQVMsQ0FBQ2tCLENBQUQsRUFBSTtJQUNiLEtBQUtuQixNQUFMLENBQVlDLFNBQVosR0FBd0JrQixDQUF4QjtFQUNIOztFQUVEQyxTQUFTLEdBQUk7SUFDVCxJQUFHLEtBQUtwQixNQUFSLEVBQWdCO01BQ1osS0FBS0EsTUFBTCxDQUFZb0IsU0FBWjtJQUNIO0VBQ0o7O0FBaERXOztBQW1ERHRCLGtFQUFmIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JhbmRvbVVVSUR9IGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuXG5jbGFzcyBXb3JrZXJFeHQge1xuICAgIGNvbnN0cnVjdG9yKHdvcmtlcikge1xuICAgICAgICB0aGlzLndvcmtlciA9IHdvcmtlcjtcbiAgICAgICAgdGhpcy5vbm1lc3NhZ2UgPSBudWxsO1xuXG4gICAgfVxuXG4gICAgcG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Bvc3Qgbm8gYWNrJyk7XG4gICAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVyKTtcbiAgICB9XG5cbiAgICBwb3N0TWVzc2FnZVdpdGhBY2sobWVzc2FnZSwgdHJhbnNmZXIpIHtcbiAgICAgICAgY29uc3QgYWNrSWQgPSByYW5kb21VVUlEKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdwb3N0IGFjayAnICsgYWNrSWQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICAgICAgICAgIHRoaXMud29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGUgPT4ge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3AgJyArIGUuZGF0YS5hY2tJZCk7XG4gICAgICAgICAgICAgICAgaWYgKGUuZGF0YS5hY2tJZCA9PT0gYWNrSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGUuZGF0YS5hY2tJZDtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICBpZihlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIHtzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsfSk7XG5cbiAgICAgICAgICAgIG1lc3NhZ2UuYWNrSWQgPSBhY2tJZDtcbiAgICAgICAgICAgIHRoaXMud29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVyKTtcblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXQgb25tZXNzYWdlKGYpIHtcbiAgICAgICAgdGhpcy53b3JrZXIub25tZXNzYWdlID0gZjtcbiAgICB9XG5cbiAgICB0ZXJtaW5hdGUoKSAge1xuICAgICAgICBpZih0aGlzLndvcmtlcikge1xuICAgICAgICAgICAgdGhpcy53b3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdvcmtlckV4dDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37);\n/* harmony import */ var _resources_css_view_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_resources_css_view_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);\n/* harmony import */ var _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);\n/* harmony import */ var _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\nclass View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {boolean} [properties.destroyAfterMutation=true]  - call view destroy() function after detecting div root Mutation\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = [];\n    this.broadcastChannels = []; //this.divId = divId;\n\n    this.id = "view-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "n"])();\n    this.css = "";\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.supportedLayers, \'supportedLayers\');\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.container) ? properties.container : document.body;\n    let destroyAfterMutation = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.destroyAfterMutation) ? properties.destroyAfterMutation : true;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties)) {\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n\n    if (destroyAfterMutation) {\n      const rootObserver = new MutationObserver(function (mutations) {\n        // try to get the div element by the id to check if it is still owned by the document object\n        if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(document.getElementById(that.divId))) {\n          this.disconnect();\n          that.destroy();\n        }\n      });\n      rootObserver.observe(document.body, {\n        childList: true\n      });\n    }\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  async setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {\n    this.removeAllFromLayers();\n\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n      console.log(`closing BC..`);\n    }\n\n    this.broadcastChannels = []; // remove DOM element\n    // this.elementDiv?.remove(); // does not compile with older webpack version ..\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.elementDiv)) {\n      this.elementDiv.remove();\n    }\n  }\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertTrue */ "i"])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_DATA_TOPIC */ "a"] + dataSourceId);\n\n      broadcastChannel.onmessage = async event => {\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].STATUS && event.data.status === _connector_Status_js__WEBPACK_IMPORTED_MODULE_3__[/* Status */ "a"].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].DATA) {\n          const that = this; // transform the data\n\n          await layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          await that.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(_Constants_js__WEBPACK_IMPORTED_MODULE_2__[/* DATASOURCE_TIME_TOPIC */ "b"] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === _event_EventType_js__WEBPACK_IMPORTED_MODULE_4__[/* EventType */ "a"].TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n\n      this.broadcastChannels.push(broadcastChannel);\n      this.broadcastChannels.push(timeBroadcastChannel);\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   * @param {Number} properties.timestamp - defines the timestamp of the data\n   * @param {Function} properties.getTimestamp - function which defines the timestamp of the data\n   * @param {Function} properties.onLeftClick - trigger onLeftClick marker event\n   * @param {Function} properties.onRightClick - trigger onRightClick marker event\n   * @param {Function} properties.onHover - trigger onHover marker event\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.init(properties);\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init(properties = this.properties) {\n    this.data = [];\n    this.propsById = {};\n    this.dataSourcesToFn = undefined;\n    this.noDataSourcesFn = undefined;\n    this.props = {\n      id: "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "n"])(),\n      filter: true,\n      name: \'\',\n      description: \'\',\n      visible: true,\n      timestamp: true\n    };\n    this.dataSourceIds = undefined;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.dataSourceId)) {\n      this.dataSourceIds = [properties.dataSourceId];\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.dataSourceIds)) {\n      this.dataSourceIds = properties.dataSourceIds;\n    }\n\n    if (!this.dataSourceIds) {\n      this.dataSourceIds = [];\n    } // assertDefined(this.dataSourceIds, \'[Layer] dataSourceIds[] or dataSourceId\');\n\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.timestamp)) {\n      this.props.timestamp = properties.timestamp;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.initEvents();\n\n    if (this.checkFn("filter")) {\n      let fn = (rec, timestamp, options) => {\n        this.props.filter = this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timestamp, options) {\n        return true;\n      };\n\n      let fn = async (rec, timestamp, options) => {\n        this.props.filter = await this.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'visible\', await this.getFunc(\'getVisible\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n\n    if (this.checkFn("getTimestamp")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'timestamp\', await this.getFunc(\'getTimestamp\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getTimestamp\'), fn);\n    }\n\n    if (this.checkFn("getName")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'name\', await this.getFunc(\'getName\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getName\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'description\', await this.getFunc(\'getDescription\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "m"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceIds\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.props.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   * @param {Boolean} [first=false] - set at the first position\n   */\n\n\n  addFn(dataSourceIds, fn, first = false) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      if (first) {\n        this.dataSourcesToFn[dataSourceId].unshift(fn);\n      } else {\n        this.dataSourcesToFn[dataSourceId].push(fn);\n      }\n    }\n\n    if (dataSourceIds.length === 0) {\n      if (!this.noDataSourcesFn) {\n        this.noDataSourcesFn = [];\n      }\n\n      if (first) {\n        this.noDataSourcesFn.unshift(fn);\n      } else {\n        this.noDataSourcesFn.push(fn);\n      }\n    } else {\n      if (this.noDataSourcesFn) {\n        this.noDataSourcesFn = undefined;\n      }\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  async setData(dataSourceId, records, options = {}) {\n    // store data into data props\n    this.data = [];\n    options.dataSourceId = dataSourceId;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n        this.props.filter = true;\n\n        for (let j = 0; j < records.length; j++) {\n          for (let i = 0; i < fnArr.length; i++) {\n            await fnArr[i](records[j].data, records[j].data.timestamp, options, this);\n\n            if (!this.props.filter) {\n              break;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props,\n              ...this.propsById[this.getId()]\n            });\n          }\n        }\n      }\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.noDataSourcesFn)) {\n      let fnArr = this.noDataSourcesFn;\n      this.props.filter = true;\n\n      for (let j = 0; j < records.length; j++) {\n        for (let i = 0; i < fnArr.length; i++) {\n          await fnArr[i](records[j].data, records[j].data.timestamp, options);\n\n          if (!this.props.filter) {\n            break;\n          }\n        }\n\n        if (this.props.filter) {\n          this.data.push({ ...this.props,\n            ...this.propsById[this.getId()]\n          });\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.dataSourceIds, \'dataSourceId must be defined\');\n      return this.dataSourceIds;\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || this.dataSourceIds;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.init(this.properties);\n  }\n\n  updateProperty(propertyName, value) {\n    this.propsById[this.getId()][propertyName] = value;\n  }\n\n  checkExistingProps(id) {\n    return id in this.propsById;\n  }\n\n  setProps(id, props) {\n    this.propsById[id] = props;\n  }\n\n  setId(id, defaultProps) {\n    this.props.id = id;\n\n    if (!this.checkExistingProps(id)) {\n      this.setProps(id, defaultProps());\n    }\n  }\n\n  definedId(idName, props) {\n    if (this.checkFn(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)) {\n      let fn = async (rec, timestamp, options) => {\n        const id = await this.getFunc(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`)(rec, timestamp, options);\n        this.setId(id, () => ({ ...props,\n          [idName]: id\n        }));\n      }; // must be first to assign correctly the first location to the right id if it is defined\n\n\n      this.addFn(this.getDataSourcesIdsByProperty(`get${Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* capitalizeFirstLetter */ "j"])(idName)}`), fn, true);\n    } else {\n      this.setId(this.getId(), () => ({ ...props,\n        [idName]: this.getId()\n      }));\n    }\n  }\n\n  getCurrentProps() {\n    return this.propsById[this.getId()];\n  }\n\n  getIds() {\n    return Object.keys(this.propsById);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(3);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/worker/DataSource.worker.js\nvar DataSource_worker = __webpack_require__(23);\nvar DataSource_worker_default = /*#__PURE__*/__webpack_require__.n(DataSource_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/worker/WorkerExt.js\nvar WorkerExt = __webpack_require__(9);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/Status.js\nvar Status = __webpack_require__(4);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/DataConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataConnector is the abstract class used to create different connectors.\n */\n\nclass DataConnector_DataConnector {\n  /**\n   * @param {String} url - The full url used to connect to the data stream\n   */\n  constructor(url, properties) {\n    this.url = url;\n    this.properties = properties;\n    this.id = \"DataConnector-\" + Object(Utils[\"n\" /* randomUUID */])();\n    this.reconnectTimeout = 1000 * 20; // 20 sec\n\n    this.status = Status[\"a\" /* Status */].DISCONNECTED;\n  }\n\n  disconnect() {\n    this.checkStatus(Status[\"a\" /* Status */].DISCONNECTED);\n    this.checkAndClearReconnection();\n  }\n  /**\n   * Sets the url\n   * @param url\n   */\n\n\n  setUrl(url) {\n    this.url = url;\n  }\n  /**\n   * The data protocol default id.\n   * @return {String}\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * The stream url.\n   * @return {String}\n   */\n\n\n  getUrl() {\n    return this.url;\n  }\n  /**\n   * Sets the reconnection timeout\n   * @param {Number} timeout - delay in milliseconds before reconnecting dataSource\n   */\n\n\n  setReconnectTimeout(timeout) {\n    this.reconnectTimeout = timeout;\n  }\n\n  onReconnect() {\n    return true;\n  }\n\n  connect() {}\n\n  forceReconnect() {\n    this.disconnect();\n    this.connect();\n  }\n  /**\n   * Called when the connection STATUS changes\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {}\n  /**\n   * Check a change of the status and call the corresponding callbacks if necessary\n   * @param {Status} status - the currentStatus\n   */\n\n\n  checkStatus(status) {\n    if (status !== this.status) {\n      this.onChangeStatus(status);\n      this.status = status;\n    }\n  }\n  /**\n   * Called when the protocol has been disconnected\n   */\n\n\n  onDisconnect() {}\n  /**\n   * Called when the protocol has been connected\n   */\n\n\n  onConnect() {}\n\n  postRequest() {}\n\n  publishRequest() {}\n\n  reset() {}\n\n  close() {}\n\n  onClose(statusCode) {}\n\n  onError(reason) {}\n\n}\n\n/* harmony default export */ var connector_DataConnector = (DataConnector_DataConnector);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/mqtt/mqtt.min.js\nvar mqtt_min = __webpack_require__(24);\nvar mqtt_min_default = /*#__PURE__*/__webpack_require__.n(mqtt_min);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/mqtt/MqttProvider.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nlet mqttCallbacks = {};\n\nclass MqttProvider_MqttProvider {\n  /**\n   * Build the MqttProvider.\n   * @param {Object} properties - the object properties\n   * @param {String} properties.endpoint - the mqtt endpoint[:port]\n   * @param {String} properties.clientId - the clientId\n   * @param {String} [properties.mqttPrefix='/api'] - a prefix to each topic\n   * @param {Object} properties.options - the MQTT.js property options as defined  [mqtt.Client(streamBuilder, options)]{@link https://github.com/mqttjs/MQTT.js#mqttclientstreambuilder-options}\n   * Note that the credentials are passed in the object options as for the mqtt.js client.\n   */\n  constructor(properties) {\n    this.properties = properties;\n\n    if (!Object(Utils[\"l\" /* isDefined */])(properties)) {\n      throw Error('endpoint and clientId are mandatory properties');\n    }\n\n    if (!Object(Utils[\"l\" /* isDefined */])(properties.endpoint)) {\n      throw Error('endpoint is a mandatory property');\n    }\n\n    if (!Object(Utils[\"l\" /* isDefined */])(properties.clientId)) {\n      throw Error('clientId is a mandatory property');\n    }\n\n    this.mqttPrefix = '/api';\n\n    if (Object(Utils[\"l\" /* isDefined */])(properties.mqttPrefix)) {\n      this.mqttPrefix = properties.mqttPrefix;\n    }\n\n    this.topics = [];\n    let options = {\n      reconnectPeriod: 30,\n      connectTimeout: 30 * 1000,\n      clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),\n      wsOptions: {\n        binaryType: 'arraybuffer'\n      }\n    }; // merge generic options\n\n    if (Object(Utils[\"l\" /* isDefined */])(this.properties.options)) {\n      options = { ...options,\n        ...this.properties.options\n      };\n    }\n\n    this.options = options;\n    this.endpoint = properties.endpoint + '/mqtt';\n    this.clientId = properties.clientId;\n    this.client = null;\n  }\n\n  async subscribe(topic, callback) {\n    if (this.topics.includes(topic)) {\n      // already subscribed, skipping\n      return;\n    }\n\n    if (!Object(Utils[\"l\" /* isDefined */])(this.client)) {\n      throw Error('You must connect the client before subscribing any topic');\n    } // waiting for the client gets connected\n\n\n    let interval;\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    this.topics.push(topic);\n    return new Promise((resolve, error) => {\n      interval = setInterval(() => {\n        if (this.client.connected) {\n          try {\n            // subscribe\n            // store callback for this topic\n            if (!(topicQuery in mqttCallbacks)) {\n              mqttCallbacks[topicQuery] = [];\n            }\n\n            mqttCallbacks[topicQuery].push({\n              callbackFn: callback,\n              topic: topic\n            });\n            this.client.subscribe(`${topicQuery}`, function (err) {\n              if (err) {\n                callback(err);\n                error(err);\n              } else {\n                console.warn(`Subscribed to ${topicQuery}`);\n                resolve();\n              }\n            });\n          } catch (exception) {\n            console.error(exception);\n          } finally {\n            clearInterval(interval);\n          }\n        }\n      }, 100);\n    });\n  }\n\n  publish(topic, payload) {\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    this.client.publish(topicQuery, payload);\n  }\n  /**\n   * Check to unsuscribe to any topic listened by this dsId\n   * If the topic is only subscribed by the dsId, unsubscribe from broken\n   * Otherwise, remove from the list of subscribe topic/dsId\n   * @param topic\n   */\n\n\n  async unsubscribe(topic) {\n    const topicQuery = `${this.mqttPrefix}${topic}`;\n    return this.client.unsubscribe(topicQuery, {}, err => {\n      delete mqttCallbacks[topicQuery];\n\n      if (err) {\n        const messageErr = `Cannot Unsubscribed topic: ${topicQuery} : ${err}`;\n        console.error(messageErr);\n        throw Error(messageErr);\n      } else {\n        console.warn(`Unsubscribed topic: ${topicQuery}`);\n      }\n    });\n  }\n\n  async unsubscribeAll() {\n    // unsubscribe topic\n    for (let topic of this.topics) {\n      await this.unsubscribe(topic);\n    }\n\n    this.topics = [];\n  }\n\n  connect() {\n    if (!Object(Utils[\"l\" /* isDefined */])(this.client)) {\n      // connects to the broker specified by the given url and options and returns a Client.\n      this.client = mqtt_min_default.a.connect(this.endpoint, { ...this.options\n      });\n      const that = this;\n      this.client.on('connect', e => {\n        console.info(`Mqtt client is connected to ${that.endpoint}`);\n      });\n      this.client.on('message', this.onMessage.bind(this));\n      this.client.on('offline', e => {\n        throw new Error(`The server ${that.endpoint} seems offline`);\n      });\n      this.client.on('error', e => {\n        throw new Error(error);\n      });\n    }\n  }\n\n  async onMessage(topic, message) {\n    if (topic in mqttCallbacks) {\n      // callback for the corresponding topic\n      for (let callback of mqttCallbacks[topic]) {\n        // callback to all subscription registered\n        callback.callbackFn(new Uint8Array(message).subarray(message.byteOffset).buffer, callback.topic);\n      }\n    }\n  }\n\n  disconnect() {\n    if (!Object(Utils[\"l\" /* isDefined */])(this.client)) {\n      throw Error('The client has not been created yet');\n    } // close the client\n\n\n    this.client.end();\n    mqttCallbacks = {};\n    this.client = null;\n  }\n\n  isConnected() {\n    return Object(Utils[\"l\" /* isDefined */])(this.client) && this.client.connected;\n  }\n\n  reset() {}\n\n}\n\n/* harmony default export */ var mqtt_MqttProvider = (MqttProvider_MqttProvider);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/Filter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass Filter_SensorWebApiFilter {\n  constructor(props) {\n    this.props = props;\n  }\n  /**\n   *\n   * @param {string[]} [includes=[]] list of parameters to include - all if omitted\n   * @param  {string[]} [excludes=[]] list of parameters to exclude - none if omitted\n   * @return {string}\n   */\n\n\n  toQueryString(includes = [], excludes = []) {\n    let queryString = '';\n    let separator = '';\n    excludes.push('replaySpeed');\n\n    for (let queryParameter in this.props) {\n      if (excludes.includes(queryParameter)) {\n        continue;\n      }\n\n      if ((includes.length === 0 || includes.includes(queryParameter)) && Object(Utils[\"l\" /* isDefined */])(this.props[queryParameter])) {\n        // if(Array.isArray(this.props[queryParameter])) {\n        //     queryString += separator + queryParameter + '=' + encodeURIComponent(this.props[queryParameter].join());\n\n        /*} else*/\n        if (queryParameter === 'f' || queryParameter === 'format' || queryParameter === 'responseFormat' || queryParameter === 'obsFormat') {\n          queryString += separator + queryParameter + '=' + this.props[queryParameter].replaceAll('+', '%2B'); // } else {\n          //     queryString += separator + queryParameter + '=' + encodeURIComponent(this.props[queryParameter]);\n        } else {\n          queryString += separator + queryParameter + '=' + this.props[queryParameter];\n        }\n\n        separator = '&';\n      }\n    }\n\n    return queryString;\n  }\n\n}\n\n/* harmony default export */ var Filter = (Filter_SensorWebApiFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/sweapi/observation/ObservationFilter.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass ObservationFilter_ObservationFilter extends Filter {\n  /**\n   *\n   * @param {Object} properties - object properties\n   * @param {any} [properties.phenomenonTime='now'] - time range <00:00:00T00:00:00Z/00:00:00T00:00:00Z> | 'now' | 'latest'\n   * @param {any} [properties.resultTime='now'] - time range <00:00:00T00:00:00Z/00:00:00T00:00:00Z> | 'latest'\n   * @param {string[]} [properties.featureOfInterest=undefined] - Comma separated list of feature of interest IDs to get observations for\n   * @param {string[]} [properties.select=undefined] - Comma separated list of properties to include or exclude from results (use \"!\" prefix to exclude)\n   * @param {number[]} [properties.bbox=undefined] - BBOX to filter resources on their location\n   * @param {string} [properties.location=undefined] - WKT geometry and operator to filter resources on their location or geometry\n   * @param {string} [properties.format='application/json'] - Mime type designating the format to use to encode the response.\n   * @param {string} [properties.replaySpeed=undefined] - Mime type designating the format to use to encode the response.\n   */\n  constructor(properties) {\n    super({\n      phenomenonTime: undefined,\n      resultTime: undefined,\n      featureOfInterest: undefined,\n      select: undefined,\n      bbox: undefined,\n      location: undefined,\n      format: 'application/om+json',\n      replaySpeed: undefined,\n      ...properties // merge defined properties\n\n    });\n  }\n\n}\n\n/* harmony default export */ var observation_ObservationFilter = (ObservationFilter_ObservationFilter);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/connector/MqttConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n/**\n * Defines the MqttConnector to connect to a remote server by creating a Mqtt channel.\n * @extends DataConnector\n * @example\n * import MqttConnector from 'osh-js/dataconnector/MqttConnector.js';\n *\n * let url = ...;\n * let connector = new MqttConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n// TODO: Useless in WebWorker since the WebWorker has its own context.\n\nconst mqttProviders = {};\n\nclass MqttConnector_MqttConnector extends connector_DataConnector {\n  /**\n   *\n   * @param url\n   * @param properties -\n   */\n  constructor(url, properties) {\n    super(url, {\n      mqttPrefix: properties.mqttOpts && properties.mqttOpts.prefix || '/api',\n      ...properties\n    });\n    this.interval = -1;\n    this.id = `mqtt-connector-${Object(Utils[\"n\" /* randomUUID */])()}`;\n    this.mqttProvider = undefined;\n  }\n\n  initBc() {\n    this.onMessage = (data, topic) => {\n      this.broadcastChannel.postMessage({\n        data: data,\n        topic: topic\n      }, [data]);\n    };\n\n    this.broadcastChannel = new BroadcastChannel(this.id);\n\n    this.broadcastChannel.onmessage = message => {\n      if (message.data.message === 'subscribe') {\n        this.doRequest(message.data.topic);\n      } else if (message.data.message === 'unsubscribe') {\n        this.disconnect(message.data.topic);\n      }\n    };\n  }\n\n  getMqttProvider() {\n    let fullUrl = this.getUrl(); // only 1 provider by URL\n\n    if (!this.mqttProvider) {\n      let options = {\n        reconnectPeriod: this.reconnectTimeout,\n        connectTimeout: 30 * 1000\n      };\n\n      if (Object(Utils[\"l\" /* isDefined */])(this.properties.mqttOpts)) {\n        options = { ...options,\n          ...this.properties.mqttOpts\n        };\n      }\n\n      this.mqttProvider = new mqtt_MqttProvider({\n        endpoint: fullUrl,\n        clientId: Object(Utils[\"n\" /* randomUUID */])(),\n        options: options,\n        mqttPrefix: this.properties.mqttPrefix\n      });\n      console.warn(`Stored MQTT provider into cache: ${fullUrl}`);\n      this.mqttProvider.connect();\n      this.mqttProvider.checkStatus = this.checkStatus;\n      this.checkStatus(Status[\"a\" /* Status */].CONNECTED);\n    } else {\n      console.warn(`Getting MQTT provider from cache: ${fullUrl}`);\n    }\n\n    return this.mqttProvider;\n  }\n\n  checkStatus(status) {\n    this.onChangeStatus(status);\n    this.status = status;\n  }\n  /**\n   * Connect to the Mqtt broker.\n   */\n\n\n  doRequest(topic = '', queryString = undefined) {\n    const mqttProvider = this.getMqttProvider();\n    mqttProvider.subscribe(topic, this.onMessage).then(() => {\n      this.onChangeStatus(Status[\"a\" /* Status */].CONNECTED);\n    });\n  }\n\n  publishRequest(topic, payload) {\n    const mqttProvider = this.getMqttProvider();\n    mqttProvider.publish(topic, payload);\n  }\n  /**\n   * Disconnects and close the mqtt client.\n   */\n\n\n  async disconnect(topic) {\n    // does not call super to avoid reconnection logic and use the one of the mqtt.js lib\n    // this.checkStatus(Status.DISCONNECTED);\n    // this.init = false;\n    // this.closed = true;\n    // find the client\n    const client = this.mqttProvider;\n\n    if (Object(Utils[\"l\" /* isDefined */])(client) && client.isConnected()) {\n      if (!topic) {\n        // unsubscribe all topics\n        return client.unsubscribeAll(); // client.disconnect();\n      } else {\n        return client.unsubscribe(topic);\n      }\n    } //delete mqttProviders[this.getUrl()];\n    //console.warn(`Disconnected from ${this.getUrl()}`);\n\n  }\n\n  connect() {\n    this.doRequest(this.properties.topic || '');\n  }\n  /**\n   * The onMessage method used by the mqtt client to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n\n  isConnected() {\n    return Object(Utils[\"l\" /* isDefined */])(this.mqttProvider) && this.mqttProvider.isConnected();\n  }\n\n  reset() {\n    this.disconnect();\n    console.log(`Remove provider from cache: ${this.getUrl()}`);\n    this.mqttProvider.reset();\n  }\n\n}\n\n/* harmony default export */ var connector_MqttConnector = (MqttConnector_MqttConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/DataSource.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n// global worker\n\nconst maxPoolSize = 5;\nconst workersPool = [];\nlet currentInsertPoolIdx = 0;\nlet dataSourceWorkers = {};\nfunction getDataSourceWorkers() {\n  return dataSourceWorkers;\n}\n\nclass DataSource_datasource_DataSource {\n  constructor(name, properties) {\n    this.id = properties.id || \"DataSource-\" + Object(Utils[\"n\" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.eventSubscriptionMap = {};\n    this.init = undefined;\n    this.mode = Mode[\"a\" /* Mode */].REAL_TIME;\n\n    if (Object(Utils[\"l\" /* isDefined */])(properties.mode)) {\n      this.mode = properties.mode;\n    }\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n\n  terminate() {\n    if (this.getWorker() !== null) {\n      this.getWorker().terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants[\"a\" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  createWorker(properties) {\n    return new WorkerExt[\"a\" /* default */](new DataSource_worker_default.a());\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    this.properties = { ...this.properties,\n      ...properties\n    };\n    return this.getWorker().postMessageWithAck({\n      message: 'update-properties',\n      data: properties,\n      dsId: this.id\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    return this.doConnect();\n  }\n\n  getWorker() {\n    if (!(this.id in dataSourceWorkers)) {\n      // create new worker for this DS\n      if (!Object(Utils[\"l\" /* isDefined */])(workersPool[currentInsertPoolIdx])) {\n        workersPool[currentInsertPoolIdx] = this.createWorker();\n      }\n\n      dataSourceWorkers[this.id] = currentInsertPoolIdx;\n      currentInsertPoolIdx = (currentInsertPoolIdx + 1) % maxPoolSize;\n    } // store worker idx into map for fast-mapping\n\n\n    return workersPool[dataSourceWorkers[this.id]];\n  }\n\n  async initDataSource(properties = this.properties) {\n    return this.getWorker().postMessageWithAck({\n      message: 'init',\n      id: this.id,\n      properties: properties,\n      topics: {\n        data: this.getTopicId()\n      },\n      dsId: this.id\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTopicId());\n\n      datasourceBroadcastChannel.onmessage = message => {\n        this.handleMessage(message);\n      };\n\n      this.isInitialized = true;\n    });\n  }\n\n  handleMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  resetInit() {\n    this.init = undefined;\n  }\n\n  async checkInit() {\n    if (!Object(Utils[\"l\" /* isDefined */])(this.init)) {\n      this.init = this.initDataSource();\n    }\n\n    return this.init;\n  }\n\n  async doConnect() {\n    return this.getWorker().postMessageWithAck({\n      message: 'connect',\n      dsId: this.id\n    });\n  }\n\n  async isConnected() {\n    if (!this.init) {\n      return false;\n    } else {\n      return this.checkInit().then(() => {\n        return this.getWorker().postMessageWithAck({\n          message: 'is-connected',\n          dsId: this.id\n        });\n      });\n    }\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    await this.checkInit();\n    return this.getWorker().postMessageWithAck({\n      message: 'disconnect',\n      dsId: this.id\n    });\n  }\n\n  async onDisconnect() {}\n\n  async reset() {\n    await this.disconnect();\n    this.resetInit();\n    return this.removeWorker();\n  }\n\n  async removeWorker() {\n    if (this.id in dataSourceWorkers) {\n      return this.getWorker().postMessageWithAck({\n        message: 'remove-handler',\n        dsId: this.id\n      }).then(() => {\n        delete dataSourceWorkers[this.id]; // delete index from pool\n      });\n    }\n  }\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSource_datasource = (DataSource_datasource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/TimeSeries.realtime.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nlet mqttConnectors = {};\n\nfunction createSharedMqttConnector(properties, topic) {\n  let endpoint = properties.mqttOpts.endpointUrl;\n\n  if (endpoint.endsWith('/')) {\n    endpoint = endpoint.substring(0, endpoint.length - 1);\n  }\n\n  const tls = properties.tls ? 's' : '';\n  const url = 'mqtt' + tls + '://' + endpoint;\n\n  if (!(url in mqttConnectors)) {\n    mqttConnectors[url] = new connector_MqttConnector(url, properties);\n    mqttConnectors[url].initBc();\n  } else {\n    console.log(`Reuse shared MqttConnector instance for ${url}`);\n  }\n\n  return mqttConnectors[url].id;\n}\n\nclass TimeSeries_realtime_datasource_TimeSeriesRealtimeDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    this.dataSynchronizer = undefined;\n    this.properties.version = 0;\n\n    if (properties.protocol === 'mqtt') {\n      this.properties.mqttOpts.bcId = createSharedMqttConnector(properties);\n    }\n  }\n\n  getTimeTopicId() {\n    return Constants[\"b\" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return Mode[\"a\" /* Mode */].REAL_TIME;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return 'now';\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return Date.now();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return 'now';\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return '2055-01-01Z';\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return Date.now(); // or should we use first timestamp of last data received???\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return new Date('2055-01-01Z').toISOString();\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {}\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {}\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {}\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {}\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return 1.0;\n  }\n\n  setReplaySpeed(replaySpeed) {}\n\n  setVersion(version) {\n    this.properties.version = version;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    return this.initDataSynchronizerIfPresent();\n  }\n\n  async initDataSynchronizerIfPresent() {\n    if (this.dataSynchronizer) {\n      await this.checkInit();\n      const topic = Constants[\"c\" /* DATA_SYNCHRONIZER_TOPIC */] + this.dataSynchronizer.id;\n      this.properties.version = this.dataSynchronizer.version();\n      return this.getWorker().postMessageWithAck({\n        message: 'topics',\n        topics: {\n          data: topic,\n          time: this.getTimeTopicId(),\n          mode: Mode[\"a\" /* Mode */].REAL_TIME,\n          sync: this.dataSynchronizer.getTimeTopicId()\n        },\n        dsId: this.id,\n        mode: Mode[\"a\" /* Mode */].REAL_TIME\n      });\n    }\n  }\n\n  async removeDataSynchronizer() {\n    await this.removeWorker();\n    this.dataSynchronizer = undefined; // this.init = undefined;\n\n    return this.checkInit();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    if (Object(Utils[\"l\" /* isDefined */])(this.init)) {\n      try {\n        return this.getWorker().postMessageWithAck({\n          message: 'disconnect',\n          dsId: this.id,\n          mode: Mode[\"a\" /* Mode */].REAL_TIME\n        });\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  async doConnect() {\n    await this.checkInit();\n    return this.getWorker().postMessageWithAck({\n      message: 'connect',\n      startTime: 'now',\n      version: this.version(),\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REAL_TIME\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    const topics = {\n      data: this.getTopicId(),\n      time: this.getTimeTopicId()\n    };\n\n    if (this.dataSynchronizer) {\n      topics.sync = this.dataSynchronizer.getTimeTopicId();\n    }\n\n    return this.getWorker().postMessageWithAck({\n      message: 'topics',\n      topics: topics,\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REAL_TIME\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n      datasourceBroadcastChannel.onmessage = async message => {\n        await this.handleTimeMessage(message);\n      };\n    });\n  }\n\n  async handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n\n  async reset() {\n    console.warn(`dataSource ${this.id} has been reset`);\n    await super.reset();\n    return this.doConnect();\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_realtime_datasource = (TimeSeries_realtime_datasource_TimeSeriesRealtimeDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/TimeSeries.replay.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_replay_datasource_TimeSeriesReplayDatasource extends DataSource_datasource {\n  constructor(name, properties) {\n    super(name, properties);\n    this.setMinTime(properties.startTime);\n    this.setMaxTime(properties.endTime);\n    this.properties.startTimestamp = new Date(properties.startTime).getTime();\n    this.properties.endTimestamp = new Date(properties.endTime).getTime();\n    Object(Utils[\"c\" /* assertDefined */])(properties, 'Some properties must be defined');\n    this.dataSynchronizer = undefined;\n    this.properties.version = 0;\n  }\n\n  getTimeTopicId() {\n    return Constants[\"b\" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.properties.mode;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return new Date(this.getStartTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.properties.startTimestamp;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return new Date(this.getEndTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.properties.endTimestamp;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return new Date(this.getMinTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return new Date(this.getMaxTimeAsTimestamp()).toISOString();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.properties.minTimestamp;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.properties.maxTimestamp;\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {\n    this.properties.minTimestamp = new Date(time).getTime();\n    this.computeMinMax();\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {\n    this.properties.maxTimestamp = new Date(time).getTime();\n    this.computeMinMax();\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n    this.computeMinMax();\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {\n    this.properties.endTimestamp = timestamp;\n    this.computeMinMax();\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTime(time) {\n    this.setStartTimestamp(new Date(time).getTime());\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTime(time) {\n    this.setEndTimestamp(new Date(time).getTime());\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.properties.replaySpeed;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.properties.replaySpeed = replaySpeed;\n  }\n\n  setVersion(version) {\n    this.properties.version = version;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    return this.initDataSynchronizerIfPresent();\n  }\n\n  async initDataSynchronizerIfPresent() {\n    if (this.dataSynchronizer) {\n      await this.checkInit();\n      const topic = Constants[\"c\" /* DATA_SYNCHRONIZER_TOPIC */] + this.dataSynchronizer.getId();\n      this.properties.version = this.dataSynchronizer.version();\n      return this.getWorker().postMessageWithAck({\n        message: 'topics',\n        topics: {\n          data: topic,\n          time: this.getTimeTopicId(),\n          sync: this.dataSynchronizer.getTimeTopicId()\n        },\n        dsId: this.id,\n        mode: Mode[\"a\" /* Mode */].REPLAY\n      });\n    }\n  }\n\n  async removeDataSynchronizer() {\n    this.init = undefined;\n    this.dataSynchronizer = undefined;\n    return this.checkInit();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    if (Object(Utils[\"l\" /* isDefined */])(this.init)) {\n      try {\n        return this.getWorker().postMessageWithAck({\n          message: 'disconnect',\n          dsId: this.id,\n          mode: Mode[\"a\" /* Mode */].REPLAY\n        });\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  async doConnect() {\n    return this.getWorker().postMessageWithAck({\n      message: 'connect',\n      startTime: this.getStartTimeAsIsoDate(),\n      version: this.version(),\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REPLAY\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    const topics = {\n      data: this.getTopicId(),\n      time: this.getTimeTopicId()\n    };\n\n    if (this.dataSynchronizer) {\n      topics.sync = this.dataSynchronizer.getTimeTopicId();\n    }\n\n    return this.getWorker().postMessageWithAck({\n      message: 'topics',\n      topics: topics,\n      dsId: this.id,\n      mode: Mode[\"a\" /* Mode */].REPLAY\n    }).then(() => {\n      // listen for Events to callback to subscriptions\n      const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n      datasourceBroadcastChannel.onmessage = message => {\n        this.handleTimeMessage(message);\n      };\n    });\n  }\n\n  handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n\n  computeMinMax() {\n    // intersect end/start depending on the min/max\n    if (this.properties.startTimestamp < this.properties.minTimestamp) {\n      this.properties.startTimestamp = this.properties.minTimestamp;\n    }\n\n    if (this.properties.endTimestamp > this.properties.maxTimestamp) {\n      this.properties.endTimestamp = this.properties.maxTimestamp;\n    }\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   * @param {Number} version - version of data\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode(), version = this.version()) {\n    await this.checkInit();\n\n    if (version !== this.version()) {\n      // update version if come in from other input\n      this.properties.version = version;\n    } // compute intersection\n\n\n    this.properties.startTimestamp = new Date(startTime).getTime();\n    this.properties.endTimestamp = new Date(endTime).getTime();\n    this.computeMinMax();\n    return this.updateProperties({\n      startTime: this.getStartTimeAsIsoDate(),\n      endTime: this.getEndTimeAsIsoDate(),\n      replaySpeed: replaySpeed,\n      reconnect: reconnect,\n      mode: mode,\n      version: version\n    });\n  }\n\n  async reset() {\n    console.warn(`dataSource ${this.id} has been reset`);\n    await super.reset();\n    return this.doConnect();\n  }\n\n}\n\n/* harmony default export */ var TimeSeries_replay_datasource = (TimeSeries_replay_datasource_TimeSeriesReplayDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/TimeSeries.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeries_datasource_TimeSeriesDatasource {\n  constructor(name, properties) {\n    const id = Object(Utils[\"n\" /* randomUUID */])();\n    this.timeSeriesRealtimeDataSource = new TimeSeries_realtime_datasource(name, {\n      id: id,\n      ...properties\n    });\n    this.timeSeriesReplayDataSource = new TimeSeries_replay_datasource(name, {\n      id: id,\n      ...properties\n    });\n    this.setMode(properties.mode, false);\n  }\n\n  async setMode(mode, disconnect = true) {\n    if (disconnect && this.timeSeriesDataSource) {\n      await this.timeSeriesDataSource.disconnect();\n    }\n\n    if (!this.timeSeriesDataSource || mode !== this.timeSeriesDataSource.getMode()) {\n      if (mode === Mode[\"a\" /* Mode */].REAL_TIME) {\n        this.timeSeriesDataSource = this.timeSeriesRealtimeDataSource;\n      } else {\n        this.timeSeriesDataSource = this.timeSeriesReplayDataSource;\n      }\n\n      this.timeSeriesDataSource.resetInit(); // bind properties\n\n      this.properties = this.timeSeriesDataSource.properties;\n      this.id = this.timeSeriesDataSource.id;\n      this.name = this.timeSeriesDataSource.name;\n      this.properties.mode = mode;\n      return this.timeSeriesDataSource.initDataSynchronizerIfPresent();\n    }\n  }\n\n  getTimeTopicId() {\n    return this.timeSeriesDataSource.getTimeTopicId();\n  }\n  /**\n   * Gets the mode\n   * @returns {Mode} - Datasource mode\n   */\n\n\n  getMode() {\n    return this.timeSeriesDataSource.getMode();\n  }\n\n  setVersion(version) {\n    this.timeSeriesDataSource.setVersion(version);\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getStartTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getStartTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getEndTimeAsIsoDate();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getEndTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getEndTimeAsTimestamp();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getMinTimeAsIsoDate();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return this.timeSeriesDataSource.getMaxTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.timeSeriesDataSource.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Sets the min time\n   */\n\n\n  setMinTime(time) {\n    this.timeSeriesDataSource.setMinTime(time);\n  }\n  /**\n   * Sets the max time\n   */\n\n\n  setMaxTime(time) {\n    this.timeSeriesDataSource.setMaxTime(time);\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTimestamp(timestamp) {\n    this.timeSeriesDataSource.setStartTimestamp(timestamp);\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTimestamp(timestamp) {\n    this.timeSeriesDataSource.setEndTimestamp(timestamp);\n  }\n  /**\n   * Sets the start time\n   */\n\n\n  setStartTime(time) {\n    this.timeSeriesDataSource.setStartTime(time);\n  }\n  /**\n   * Sets the end time\n   */\n\n\n  setEndTime(time) {\n    this.timeSeriesDataSource.setEndTime(time);\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return this.timeSeriesDataSource.getReplaySpeed();\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  setReplaySpeed(replaySpeed) {\n    this.timeSeriesDataSource.setReplaySpeed(replaySpeed);\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n  /**\n   * @param dataSynchronizer\n   * @returns {Promise}\n   */\n\n\n  async setDataSynchronizer(dataSynchronizer) {\n    await this.setMode(dataSynchronizer.getMode(), false);\n    return this.timeSeriesDataSource.setDataSynchronizer(dataSynchronizer);\n  }\n\n  getDataSynchronizer() {\n    return this.timeSeriesDataSource.dataSynchronizer;\n  }\n\n  async removeDataSynchronizer() {\n    return this.timeSeriesDataSource.removeDataSynchronizer();\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    return this.timeSeriesDataSource.disconnect();\n  }\n\n  async doConnect() {\n    return this.timeSeriesDataSource.doConnect();\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    return this.timeSeriesDataSource.initDataSource(properties);\n  }\n\n  version() {\n    return this.timeSeriesDataSource.version();\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   * @param {Number} version - version of data\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false, mode = this.getMode(), version = this.version()) {\n    return this.timeSeriesDataSource.setTimeRange(startTime, endTime, replaySpeed, reconnect, mode, version);\n  }\n  /***********************************/\n\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.timeSeriesDataSource.getId();\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.timeSeriesDataSource.getName();\n  }\n\n  terminate() {\n    this.timeSeriesDataSource.terminate();\n  }\n\n  getTopicId() {\n    return this.timeSeriesDataSource.getTopicId();\n  }\n\n  subscribe(fn, eventTypes) {\n    this.timeSeriesDataSource.subscribe(fn, eventTypes);\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    return this.timeSeriesDataSource.updateProperties(properties);\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    return this.timeSeriesDataSource.connect();\n  }\n\n  async checkInit() {\n    return this.timeSeriesDataSource.checkInit();\n  }\n\n  async isConnected() {\n    return this.timeSeriesDataSource.isConnected();\n  }\n\n  async reset() {\n    return this.timeSeriesDataSource.reset();\n  }\n\n  onTimeChanged(min, max, start, end) {}\n\n  async autoUpdateTime(activate) {\n    if (activate) {\n      return this.createTimeUpdater();\n    } else {\n      this.destroyTimeUpdater();\n    }\n  } // abstract\n\n\n  async createTimeUpdater() {} // abstract\n\n\n  destroyTimeUpdater() {}\n\n}\n\n/* harmony default export */ var TimeSeries_datasource = (TimeSeries_datasource_TimeSeriesDatasource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/sos/SosGetResult.datasource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_datasource_SosGetResult extends TimeSeries_datasource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}, 'http', 'ws', 'mqtt', 'file', 'topic'\n   * @param {String} properties.endpointUrl the endpoint url, this property is ignored in case of using 'mqtt' protocol, the properties.mqttOpts.endpointUrl will be used instead\n   * @param {String} properties.collection the collection, /procedures, /fois, /observations, /tasks, /datastreams/4778/obs\n   * @param {Boolean} properties.tls - defines if use secure TLS connection\n   * @param {Number} [properties.responseFormat=application/om+json] the response format (e.g application/om+json)\n   * @param {String[]} [properties.prefetchBatchSize=1000000] Number of elements to prefetch at a time\n   * @param {String[]} [properties.prefetchBatchDuration=10000] Duration before prefetching the next batch. N.b the next batch will be prefetched at 80% of this duration\n   */\n  constructor(name, properties) {\n    super(name, {\n      protocol: 'ws',\n      // default for streaming\n      service: \"SOS\",\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      reconnectRetry: 10,\n      tls: false,\n      type: 'SosGetResult',\n      mode: Mode[\"a\" /* Mode */].REAL_TIME,\n      prefetchBatchSize: 250,\n      prefetchBatchDuration: 5000,\n      ...properties\n    });\n  }\n\n}\n\n/* harmony default export */ var SosGetResult_datasource = __webpack_exports__[\"a\"] = (SosGetResult_datasource_SosGetResult);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nconst initialStates = {};\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n   * Create the PointMarker\n   * @param {Object} properties\n   * @param {Number[]} properties.location - [x,y,z]\n   * @param {Number} [properties.orientation=0] -\n   * @param {String} properties.icon -\n   * @param {Number} [properties.iconScale=1] - the icon scale size\n   * @param {String} [properties.iconColor="#000000"] - the icon color\n   * @param {Number[]} [properties.iconAnchor=[16,16]] -\n   * @param {Number[]} [properties.iconSize=[16,16]] -\n   * @param {Number} [properties.iconOpacity=0.75] - icon opacity\n   * @param {String} [properties.label=""] - the label to display\n   * @param {String} [properties.labelColor="#000000"] - color\n   * @param {String} [properties.labelOutlineColor=undefined] - color\n   * @param {String} [properties.labelBackgroundColor=undefined] -  color\n   * @param {Number} [properties.labelSize=16] -\n   * @param {Number} [properties.labelScale=1.0] - label scale\n   * @param {Number[]} [properties.labelOffset=[0,0]] -\n   * @param {Number} [properties.zIndex=0] - z-ordering of markers\n   * @param {Number} [properties.allowBillboardRotation=true] - allow billboard rotation\n   * @param {Function} [properties.getLocation] -\n   * @param {Function} [properties.getDescription] -\n   * @param {Function} [properties.getOrientation] -\n   * @param {Function} [properties.getIcon] -\n   * @param {Function} [properties.getIconColor] -\n   * @param {Function} [properties.getIconScale] -\n   * @param {Function} [properties.getLabel] -\n   * @param {Function} [properties.getLabelColor] -\n   * @param {Function} [properties.getLabelSize] -\n   * @param {Function} [properties.getZindex] - z-ordering of markers\n   * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   * @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n   * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      markerId: () => this.getId(),\n      location: null,\n      orientation: {\n        heading: 0\n      },\n      icon: null,\n      iconAnchor: [16, 16],\n      iconSize: [16, 16],\n      iconScale: 1.0,\n      iconColor: undefined,\n      iconOpacity: 0.75,\n      label: null,\n      labelColor: undefined,\n      labelOutlineColor: undefined,\n      labelBackgroundColor: undefined,\n      labelSize: 16,\n      labelScale: 1.0,\n      labelOffset: [0, 0],\n      zoomLevel: 15,\n      defaultToTerrainElevation: false,\n      zIndex: 0,\n      allowBillboardRotation: true,\n      options: {}\n    };\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "l"])(properties.defaultToTerrainElevation)) {\n      props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.location, "location");\n      props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.orientation, "orientation");\n      props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.icon, "icon");\n      props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.iconScale, "iconScale");\n      props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconColor, "iconColor");\n      props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.iconOpacity)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconOpacity, "iconOpacity");\n      props.iconOpacity = properties.iconOpacity;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.label, "label");\n      props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelColor, "labelColor");\n      props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOutlineColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelOutlineColor, "labelOutlineColor");\n      props.labelOutlineColor = properties.labelOutlineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelBackgroundColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelBackgroundColor, "labelBackgroundColor");\n      props.labelBackgroundColor = properties.labelBackgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelSize, "labelSize");\n      props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelScale, "labelScale");\n      props.labelScale = properties.labelScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.zoomLevel, "zoomLevel");\n      props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "e"])(properties.zIndex, "zIndex");\n      props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "k"])(properties.allowBillboardRotation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertBoolean */ "b"])(properties.allowBillboardRotation, "allowBillboardRotation");\n      props.allowBillboardRotation = properties.allowBillboardRotation;\n    }\n\n    this.definedId(\'markerId\', props);\n\n    if (this.checkFn("getLocation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'location\', await this.getFunc(\'getLocation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'orientation\', await this.getFunc(\'getOrientation\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'icon\', await this.getFunc(\'getIcon\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconColor\', await this.getFunc(\'getIconColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'iconScale\', await this.getFunc(\'getIconScale\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'label\', await this.getFunc(\'getLabel\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelColor\', await this.getFunc(\'getLabelColor\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'labelSize\', await this.getFunc(\'getLabelSize\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty(\'zIndex\', await this.getFunc(\'getZindex\')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\n import MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id,\n         getFrameData: (rec) => rec.videoFrame,\n         getTimestamp: (rec) => rec.timestamp\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'videoData\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timestamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "l"])(properties.showTime) && properties.showTime) {\n      this.timestamp = document.createElement("div");\n      this.timestamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timestamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === \'videoData\') {\n      const values = data.values;\n\n      for (let i = 0; i < values.length; i++) {\n        this.updateVideo(values[i]);\n      }\n    }\n  }\n\n  updateVideo(props) {\n    let imgBlob = new Blob([props.frameData.data]);\n    let url = window.URL.createObjectURL(imgBlob);\n    let oldBlobURL = this.imgTag.src;\n    this.imgTag.src = url;\n\n    if (this.timestamp !== null) {\n      this.timestamp.innerHTML = new Date(props.timestamp).toISOString();\n    }\n\n    window.URL.revokeObjectURL(oldBlobURL);\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "l"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n  async getCanvas() {\n    return this.canvas;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "7738bd2430ee83f8c636.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL2RhdGFzb3VyY2Uvd29ya2VyL0RhdGFTb3VyY2Uud29ya2VyLmpzP2ZjZDAiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7RUFDMUIsT0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3NzM4YmQyNDMwZWU4M2Y4YzYzNi53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var require;var require;!function (e) {\n  if (true) module.exports = e();else {}\n}(function () {\n  return function () {\n    return function e(t, r, n) {\n      function i(s, a) {\n        if (!r[s]) {\n          if (!t[s]) {\n            var l = "function" == typeof require && require;\n            if (!a && l) return require(s, !0);\n            if (o) return o(s, !0);\n            var u = new Error("Cannot find module \'" + s + "\'");\n            throw u.code = "MODULE_NOT_FOUND", u;\n          }\n\n          var c = r[s] = {\n            exports: {}\n          };\n          t[s][0].call(c.exports, function (e) {\n            return i(t[s][1][e] || e);\n          }, c, c.exports, e, t, r, n);\n        }\n\n        return r[s].exports;\n      }\n\n      for (var o = "function" == typeof require && require, s = 0; s < n.length; s++) i(n[s]);\n\n      return i;\n    };\n  }()({\n    1: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          const i = e("events").EventEmitter,\n                o = e("./store"),\n                s = e("./topic-alias-recv"),\n                a = e("./topic-alias-send"),\n                l = e("mqtt-packet"),\n                u = e("./default-message-id-provider"),\n                c = e("readable-stream").Writable,\n                h = e("inherits"),\n                f = e("reinterval"),\n                p = e("rfdc/default"),\n                d = e("./validations"),\n                g = e("xtend"),\n                y = e("debug")("mqttjs:client"),\n                b = r ? r.nextTick : function (e) {\n            setTimeout(e, 0);\n          },\n                m = n.setImmediate || function (e) {\n            b(e);\n          },\n                v = {\n            keepalive: 60,\n            reschedulePings: !0,\n            protocolId: "MQTT",\n            protocolVersion: 4,\n            reconnectPeriod: 1e3,\n            connectTimeout: 3e4,\n            clean: !0,\n            resubscribe: !0\n          },\n                w = ["ECONNREFUSED", "EADDRINUSE", "ECONNRESET", "ENOTFOUND"],\n                _ = {\n            0: "",\n            1: "Unacceptable protocol version",\n            2: "Identifier rejected",\n            3: "Server unavailable",\n            4: "Bad username or password",\n            5: "Not authorized",\n            16: "No matching subscribers",\n            17: "No subscription existed",\n            128: "Unspecified error",\n            129: "Malformed Packet",\n            130: "Protocol Error",\n            131: "Implementation specific error",\n            132: "Unsupported Protocol Version",\n            133: "Client Identifier not valid",\n            134: "Bad User Name or Password",\n            135: "Not authorized",\n            136: "Server unavailable",\n            137: "Server busy",\n            138: "Banned",\n            139: "Server shutting down",\n            140: "Bad authentication method",\n            141: "Keep Alive timeout",\n            142: "Session taken over",\n            143: "Topic Filter invalid",\n            144: "Topic Name invalid",\n            145: "Packet identifier in use",\n            146: "Packet Identifier not found",\n            147: "Receive Maximum exceeded",\n            148: "Topic Alias invalid",\n            149: "Packet too large",\n            150: "Message rate too high",\n            151: "Quota exceeded",\n            152: "Administrative action",\n            153: "Payload format invalid",\n            154: "Retain not supported",\n            155: "QoS not supported",\n            156: "Use another server",\n            157: "Server moved",\n            158: "Shared Subscriptions not supported",\n            159: "Connection rate exceeded",\n            160: "Maximum connect time",\n            161: "Subscription Identifiers not supported",\n            162: "Wildcard Subscriptions not supported"\n          };\n\n          function k(e, t) {\n            let r;\n            t.properties && (r = t.properties.topicAlias);\n            let n = t.topic.toString();\n\n            if (0 === n.length) {\n              if (void 0 === r) return new Error("Unregistered Topic Alias");\n              if (void 0 === (n = e.topicAliasSend.getTopicByAlias(r))) return new Error("Unregistered Topic Alias");\n              t.topic = n;\n            }\n\n            r && delete t.properties.topicAlias;\n          }\n\n          function S(e, t, r) {\n            y("sendPacket :: packet: %O", t), y("sendPacket :: emitting `packetsend`"), e.emit("packetsend", t), y("sendPacket :: writing to stream");\n            const n = l.writeToStream(t, e.stream, e.options);\n            y("sendPacket :: writeToStream result %s", n), !n && r ? (y("sendPacket :: handle events on `drain` once through callback."), e.stream.once("drain", r)) : r && (y("sendPacket :: invoking cb"), r());\n          }\n\n          function E(e, t, r, n) {\n            y("storeAndSend :: store packet with cmd %s to outgoingStore", t.cmd);\n            let i,\n                o = t;\n            if ("publish" === o.cmd && (o = p(t), i = k(e, o))) return r && r(i);\n            e.outgoingStore.put(o, function (i) {\n              if (i) return r && r(i);\n              n(), S(e, t, r);\n            });\n          }\n\n          function C(e) {\n            y("nop ::", e);\n          }\n\n          function T(e, t) {\n            let r;\n            const n = this;\n            if (!(this instanceof T)) return new T(e, t);\n\n            for (r in this.options = t || {}, v) void 0 === this.options[r] ? this.options[r] = v[r] : this.options[r] = t[r];\n\n            y("MqttClient :: options.protocol", t.protocol), y("MqttClient :: options.protocolVersion", t.protocolVersion), y("MqttClient :: options.username", t.username), y("MqttClient :: options.keepalive", t.keepalive), y("MqttClient :: options.reconnectPeriod", t.reconnectPeriod), y("MqttClient :: options.rejectUnauthorized", t.rejectUnauthorized), y("MqttClient :: options.topicAliasMaximum", t.topicAliasMaximum), this.options.clientId = "string" == typeof t.clientId ? t.clientId : "mqttjs_" + Math.random().toString(16).substr(2, 8), y("MqttClient :: clientId", this.options.clientId), this.options.customHandleAcks = 5 === t.protocolVersion && t.customHandleAcks ? t.customHandleAcks : function () {\n              arguments[3](0);\n            }, this.streamBuilder = e, this.messageIdProvider = void 0 === this.options.messageIdProvider ? new u() : this.options.messageIdProvider, this.outgoingStore = t.outgoingStore || new o(), this.incomingStore = t.incomingStore || new o(), this.queueQoSZero = void 0 === t.queueQoSZero || t.queueQoSZero, this._resubscribeTopics = {}, this.messageIdToTopic = {}, this.pingTimer = null, this.connected = !1, this.disconnecting = !1, this.queue = [], this.connackTimer = null, this.reconnectTimer = null, this._storeProcessing = !1, this._packetIdsDuringStoreProcessing = {}, this._storeProcessingQueue = [], this.outgoing = {}, this._firstConnection = !0, t.topicAliasMaximum > 0 && (t.topicAliasMaximum > 65535 ? y("MqttClient :: options.topicAliasMaximum is out of range") : this.topicAliasRecv = new s(t.topicAliasMaximum)), this.on("connect", function () {\n              const e = this.queue;\n              y("connect :: sending queued packets"), function t() {\n                const r = e.shift();\n                y("deliver :: entry %o", r);\n                let i = null;\n                if (!r) return void n._resubscribe();\n                i = r.packet, y("deliver :: call _sendPacket for %o", i);\n                let o = !0;\n                i.messageId && 0 !== i.messageId && (n.messageIdProvider.register(i.messageId) || (o = !1)), o ? n._sendPacket(i, function (e) {\n                  r.cb && r.cb(e), t();\n                }) : (y("messageId: %d has already used. The message is skipped and removed.", i.messageId), t());\n              }();\n            }), this.on("close", function () {\n              y("close :: connected set to `false`"), this.connected = !1, y("close :: clearing connackTimer"), clearTimeout(this.connackTimer), y("close :: clearing ping timer"), null !== n.pingTimer && (n.pingTimer.clear(), n.pingTimer = null), this.topicAliasRecv && this.topicAliasRecv.clear(), y("close :: calling _setupReconnect"), this._setupReconnect();\n            }), i.call(this), y("MqttClient :: setting up stream"), this._setupStream();\n          }\n\n          h(T, i), T.prototype._setupStream = function () {\n            const e = this,\n                  t = new c(),\n                  r = l.parser(this.options);\n            let n = null;\n            const i = [];\n\n            function o() {\n              if (i.length) b(s);else {\n                const e = n;\n                n = null, e();\n              }\n            }\n\n            function s() {\n              y("work :: getting next packet in queue");\n              const t = i.shift();\n              if (t) y("work :: packet pulled from queue"), e._handlePacket(t, o);else {\n                y("work :: no packets in queue");\n                const e = n;\n                n = null, y("work :: done flag is %s", !!e), e && e();\n              }\n            }\n\n            y("_setupStream :: calling method to clear reconnect"), this._clearReconnect(), y("_setupStream :: using streamBuilder provided to client to create stream"), this.stream = this.streamBuilder(this), r.on("packet", function (e) {\n              y("parser :: on packet push to packets array."), i.push(e);\n            }), t._write = function (e, t, i) {\n              n = i, y("writable stream :: parsing buffer"), r.parse(e), s();\n            }, y("_setupStream :: pipe stream to writable stream"), this.stream.pipe(t), this.stream.on("error", function (t) {\n              y("streamErrorHandler :: error", t.message), w.includes(t.code) ? (y("streamErrorHandler :: emitting error"), e.emit("error", t)) : C(t);\n            }), this.stream.on("close", function () {\n              var t;\n              y("(%s)stream :: on close", e.options.clientId), (t = e.outgoing) && (y("flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function"), Object.keys(t).forEach(function (e) {\n                t[e].volatile && "function" == typeof t[e].cb && (t[e].cb(new Error("Connection closed")), delete t[e]);\n              })), y("stream: emit close to MqttClient"), e.emit("close");\n            }), y("_setupStream: sending packet `connect`");\n            const a = Object.create(this.options);\n\n            if (a.cmd = "connect", this.topicAliasRecv && (a.properties || (a.properties = {}), this.topicAliasRecv && (a.properties.topicAliasMaximum = this.topicAliasRecv.max)), S(this, a), r.on("error", this.emit.bind(this, "error")), this.options.properties) {\n              if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) return e.end(() => this.emit("error", new Error("Packet has no Authentication Method"))), this;\n\n              if (this.options.properties.authenticationMethod && this.options.authPacket && "object" == typeof this.options.authPacket) {\n                S(this, g({\n                  cmd: "auth",\n                  reasonCode: 0\n                }, this.options.authPacket));\n              }\n            }\n\n            this.stream.setMaxListeners(1e3), clearTimeout(this.connackTimer), this.connackTimer = setTimeout(function () {\n              y("!!connectTimeout hit!! Calling _cleanUp with force `true`"), e._cleanUp(!0);\n            }, this.options.connectTimeout);\n          }, T.prototype._handlePacket = function (e, t) {\n            const r = this.options;\n            if (5 === r.protocolVersion && r.properties && r.properties.maximumPacketSize && r.properties.maximumPacketSize < e.length) return this.emit("error", new Error("exceeding packets size " + e.cmd)), this.end({\n              reasonCode: 149,\n              properties: {\n                reasonString: "Maximum packet size was exceeded"\n              }\n            }), this;\n\n            switch (y("_handlePacket :: emitting packetreceive"), this.emit("packetreceive", e), e.cmd) {\n              case "publish":\n                this._handlePublish(e, t);\n\n                break;\n\n              case "puback":\n              case "pubrec":\n              case "pubcomp":\n              case "suback":\n              case "unsuback":\n                this._handleAck(e), t();\n                break;\n\n              case "pubrel":\n                this._handlePubrel(e, t);\n\n                break;\n\n              case "connack":\n                this._handleConnack(e), t();\n                break;\n\n              case "auth":\n                this._handleAuth(e), t();\n                break;\n\n              case "pingresp":\n                this._handlePingresp(e), t();\n                break;\n\n              case "disconnect":\n                this._handleDisconnect(e), t();\n            }\n          }, T.prototype._checkDisconnecting = function (e) {\n            return this.disconnecting && (e ? e(new Error("client disconnecting")) : this.emit("error", new Error("client disconnecting"))), this.disconnecting;\n          }, T.prototype.publish = function (e, t, r, n) {\n            y("publish :: message `%s` to topic `%s`", t, e);\n            const i = this.options;\n            "function" == typeof r && (n = r, r = null);\n            if (r = g({\n              qos: 0,\n              retain: !1,\n              dup: !1\n            }, r), this._checkDisconnecting(n)) return this;\n\n            const o = this,\n                  s = function () {\n              let s = 0;\n              if ((1 === r.qos || 2 === r.qos) && null === (s = o._nextId())) return y("No messageId left"), !1;\n              const a = {\n                cmd: "publish",\n                topic: e,\n                payload: t,\n                qos: r.qos,\n                retain: r.retain,\n                messageId: s,\n                dup: r.dup\n              };\n\n              switch (5 === i.protocolVersion && (a.properties = r.properties), y("publish :: qos", r.qos), r.qos) {\n                case 1:\n                case 2:\n                  o.outgoing[a.messageId] = {\n                    volatile: !1,\n                    cb: n || C\n                  }, y("MqttClient:publish: packet cmd: %s", a.cmd), o._sendPacket(a, void 0, r.cbStorePut);\n                  break;\n\n                default:\n                  y("MqttClient:publish: packet cmd: %s", a.cmd), o._sendPacket(a, n, r.cbStorePut);\n              }\n\n              return !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !s()) && this._storeProcessingQueue.push({\n              invoke: s,\n              cbStorePut: r.cbStorePut,\n              callback: n\n            }), this;\n          }, T.prototype.subscribe = function () {\n            const e = this,\n                  t = new Array(arguments.length);\n\n            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];\n\n            const r = [];\n            let n = t.shift();\n            const i = n.resubscribe;\n            let o = t.pop() || C,\n                s = t.pop();\n            const a = this.options.protocolVersion;\n            delete n.resubscribe, "string" == typeof n && (n = [n]), "function" != typeof o && (s = o, o = C);\n            const l = d.validateTopics(n);\n            if (null !== l) return m(o, new Error("Invalid topic " + l)), this;\n            if (this._checkDisconnecting(o)) return y("subscribe: discconecting true"), this;\n            const u = {\n              qos: 0\n            };\n            if (5 === a && (u.nl = !1, u.rap = !1, u.rh = 0), s = g(u, s), Array.isArray(n) ? n.forEach(function (t) {\n              if (y("subscribe: array topic %s", t), !Object.prototype.hasOwnProperty.call(e._resubscribeTopics, t) || e._resubscribeTopics[t].qos < s.qos || i) {\n                const e = {\n                  topic: t,\n                  qos: s.qos\n                };\n                5 === a && (e.nl = s.nl, e.rap = s.rap, e.rh = s.rh, e.properties = s.properties), y("subscribe: pushing topic `%s` and qos `%s` to subs list", e.topic, e.qos), r.push(e);\n              }\n            }) : Object.keys(n).forEach(function (t) {\n              if (y("subscribe: object topic %s", t), !Object.prototype.hasOwnProperty.call(e._resubscribeTopics, t) || e._resubscribeTopics[t].qos < n[t].qos || i) {\n                const e = {\n                  topic: t,\n                  qos: n[t].qos\n                };\n                5 === a && (e.nl = n[t].nl, e.rap = n[t].rap, e.rh = n[t].rh, e.properties = s.properties), y("subscribe: pushing `%s` to subs list", e), r.push(e);\n              }\n            }), !r.length) return o(null, []), this;\n\n            const c = function () {\n              const t = e._nextId();\n\n              if (null === t) return y("No messageId left"), !1;\n              const n = {\n                cmd: "subscribe",\n                subscriptions: r,\n                qos: 1,\n                retain: !1,\n                dup: !1,\n                messageId: t\n              };\n\n              if (s.properties && (n.properties = s.properties), e.options.resubscribe) {\n                y("subscribe :: resubscribe true");\n                const t = [];\n                r.forEach(function (r) {\n                  if (e.options.reconnectPeriod > 0) {\n                    const n = {\n                      qos: r.qos\n                    };\n                    5 === a && (n.nl = r.nl || !1, n.rap = r.rap || !1, n.rh = r.rh || 0, n.properties = r.properties), e._resubscribeTopics[r.topic] = n, t.push(r.topic);\n                  }\n                }), e.messageIdToTopic[n.messageId] = t;\n              }\n\n              return e.outgoing[n.messageId] = {\n                volatile: !0,\n                cb: function (e, t) {\n                  if (!e) {\n                    const e = t.granted;\n\n                    for (let t = 0; t < e.length; t += 1) r[t].qos = e[t];\n                  }\n\n                  o(e, r);\n                }\n              }, y("subscribe :: call _sendPacket"), e._sendPacket(n), !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !c()) && this._storeProcessingQueue.push({\n              invoke: c,\n              callback: o\n            }), this;\n          }, T.prototype.unsubscribe = function () {\n            const e = this,\n                  t = new Array(arguments.length);\n\n            for (let e = 0; e < arguments.length; e++) t[e] = arguments[e];\n\n            let r = t.shift(),\n                n = t.pop() || C,\n                i = t.pop();\n            "string" == typeof r && (r = [r]), "function" != typeof n && (i = n, n = C);\n            const o = d.validateTopics(r);\n            if (null !== o) return m(n, new Error("Invalid topic " + o)), this;\n            if (e._checkDisconnecting(n)) return this;\n\n            const s = function () {\n              const t = e._nextId();\n\n              if (null === t) return y("No messageId left"), !1;\n              const o = {\n                cmd: "unsubscribe",\n                qos: 1,\n                messageId: t\n              };\n              return "string" == typeof r ? o.unsubscriptions = [r] : Array.isArray(r) && (o.unsubscriptions = r), e.options.resubscribe && o.unsubscriptions.forEach(function (t) {\n                delete e._resubscribeTopics[t];\n              }), "object" == typeof i && i.properties && (o.properties = i.properties), e.outgoing[o.messageId] = {\n                volatile: !0,\n                cb: n\n              }, y("unsubscribe: call _sendPacket"), e._sendPacket(o), !0;\n            };\n\n            return (this._storeProcessing || this._storeProcessingQueue.length > 0 || !s()) && this._storeProcessingQueue.push({\n              invoke: s,\n              callback: n\n            }), this;\n          }, T.prototype.end = function (e, t, r) {\n            const n = this;\n\n            function i() {\n              y("end :: (%s) :: finish :: calling _cleanUp with force %s", n.options.clientId, e), n._cleanUp(e, () => {\n                y("end :: finish :: calling process.nextTick on closeStores"), b(function () {\n                  y("end :: closeStores: closing incoming and outgoing stores"), n.disconnected = !0, n.incomingStore.close(function (e) {\n                    n.outgoingStore.close(function (t) {\n                      if (y("end :: closeStores: emitting end"), n.emit("end"), r) {\n                        const n = e || t;\n                        y("end :: closeStores: invoking callback with args"), r(n);\n                      }\n                    });\n                  }), n._deferredReconnect && n._deferredReconnect();\n                }.bind(n));\n              }, t);\n            }\n\n            return y("end :: (%s)", this.options.clientId), null != e && "boolean" == typeof e || (r = t || C, t = e, e = !1, "object" != typeof t && (r = t, t = null, "function" != typeof r && (r = C))), "object" != typeof t && (r = t, t = null), y("end :: cb? %s", !!r), r = r || C, this.disconnecting ? (r(), this) : (this._clearReconnect(), this.disconnecting = !0, !e && Object.keys(this.outgoing).length > 0 ? (y("end :: (%s) :: calling finish in 10ms once outgoing is empty", n.options.clientId), this.once("outgoingEmpty", setTimeout.bind(null, i, 10))) : (y("end :: (%s) :: immediately calling finish", n.options.clientId), i()), this);\n          }, T.prototype.removeOutgoingMessage = function (e) {\n            const t = this.outgoing[e] ? this.outgoing[e].cb : null;\n            return delete this.outgoing[e], this.outgoingStore.del({\n              messageId: e\n            }, function () {\n              t(new Error("Message removed"));\n            }), this;\n          }, T.prototype.reconnect = function (e) {\n            y("client reconnect");\n\n            const t = this,\n                  r = function () {\n              e ? (t.options.incomingStore = e.incomingStore, t.options.outgoingStore = e.outgoingStore) : (t.options.incomingStore = null, t.options.outgoingStore = null), t.incomingStore = t.options.incomingStore || new o(), t.outgoingStore = t.options.outgoingStore || new o(), t.disconnecting = !1, t.disconnected = !1, t._deferredReconnect = null, t._reconnect();\n            };\n\n            return this.disconnecting && !this.disconnected ? this._deferredReconnect = r : r(), this;\n          }, T.prototype._reconnect = function () {\n            y("_reconnect: emitting reconnect to client"), this.emit("reconnect"), this.connected ? (this.end(() => {\n              this._setupStream();\n            }), y("client already connected. disconnecting first.")) : (y("_reconnect: calling _setupStream"), this._setupStream());\n          }, T.prototype._setupReconnect = function () {\n            const e = this;\n            !e.disconnecting && !e.reconnectTimer && e.options.reconnectPeriod > 0 ? (this.reconnecting || (y("_setupReconnect :: emit `offline` state"), this.emit("offline"), y("_setupReconnect :: set `reconnecting` to `true`"), this.reconnecting = !0), y("_setupReconnect :: setting reconnectTimer for %d ms", e.options.reconnectPeriod), e.reconnectTimer = setInterval(function () {\n              y("reconnectTimer :: reconnect triggered!"), e._reconnect();\n            }, e.options.reconnectPeriod)) : y("_setupReconnect :: doing nothing...");\n          }, T.prototype._clearReconnect = function () {\n            y("_clearReconnect : clearing reconnect timer"), this.reconnectTimer && (clearInterval(this.reconnectTimer), this.reconnectTimer = null);\n          }, T.prototype._cleanUp = function (e, t) {\n            const r = arguments[2];\n            if (t && (y("_cleanUp :: done callback provided for on stream close"), this.stream.on("close", t)), y("_cleanUp :: forced? %s", e), e) 0 === this.options.reconnectPeriod && this.options.clean && (n = this.outgoing) && (y("flush: queue exists? %b", !!n), Object.keys(n).forEach(function (e) {\n              "function" == typeof n[e].cb && (n[e].cb(new Error("Connection closed")), delete n[e]);\n            })), y("_cleanUp :: (%s) :: destroying stream", this.options.clientId), this.stream.destroy();else {\n              const e = g({\n                cmd: "disconnect"\n              }, r);\n              y("_cleanUp :: (%s) :: call _sendPacket with disconnect packet", this.options.clientId), this._sendPacket(e, m.bind(null, this.stream.end.bind(this.stream)));\n            }\n            var n;\n            this.disconnecting || (y("_cleanUp :: client not disconnecting. Clearing and resetting reconnect."), this._clearReconnect(), this._setupReconnect()), null !== this.pingTimer && (y("_cleanUp :: clearing pingTimer"), this.pingTimer.clear(), this.pingTimer = null), t && !this.connected && (y("_cleanUp :: (%s) :: removing stream `done` callback `close` listener", this.options.clientId), this.stream.removeListener("close", t), t());\n          }, T.prototype._sendPacket = function (e, t, r) {\n            y("_sendPacket :: (%s) ::  start", this.options.clientId), r = r || C, t = t || C;\n\n            const n = function (e, t) {\n              if (5 === e.options.protocolVersion && "publish" === t.cmd) {\n                let r;\n                t.properties && (r = t.properties.topicAlias);\n                const n = t.topic.toString();\n                if (e.topicAliasSend) {\n                  if (r) {\n                    if (0 !== n.length && (y("applyTopicAlias :: register topic: %s - alias: %d", n, r), !e.topicAliasSend.put(n, r))) return y("applyTopicAlias :: error out of range. topic: %s - alias: %d", n, r), new Error("Sending Topic Alias out of range");\n                  } else 0 !== n.length && (e.options.autoAssignTopicAlias ? (r = e.topicAliasSend.getAliasByTopic(n)) ? (t.topic = "", t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto assign(use) topic: %s - alias: %d", n, r)) : (r = e.topicAliasSend.getLruAlias(), e.topicAliasSend.put(n, r), t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto assign topic: %s - alias: %d", n, r)) : e.options.autoUseTopicAlias && (r = e.topicAliasSend.getAliasByTopic(n)) && (t.topic = "", t.properties = { ...t.properties,\n                    topicAlias: r\n                  }, y("applyTopicAlias :: auto use topic: %s - alias: %d", n, r)));\n                } else if (r) return y("applyTopicAlias :: error out of range. topic: %s - alias: %d", n, r), new Error("Sending Topic Alias out of range");\n              }\n            }(this, e);\n\n            if (n) t(n);else {\n              if (!this.connected) return "auth" === e.cmd ? (this._shiftPingInterval(), void S(this, e, t)) : (y("_sendPacket :: client not connected. Storing packet offline."), void this._storePacket(e, t, r));\n\n              switch (this._shiftPingInterval(), e.cmd) {\n                case "publish":\n                  break;\n\n                case "pubrel":\n                  return void E(this, e, t, r);\n\n                default:\n                  return void S(this, e, t);\n              }\n\n              switch (e.qos) {\n                case 2:\n                case 1:\n                  E(this, e, t, r);\n                  break;\n\n                case 0:\n                default:\n                  S(this, e, t);\n              }\n\n              y("_sendPacket :: (%s) ::  end", this.options.clientId);\n            }\n          }, T.prototype._storePacket = function (e, t, r) {\n            y("_storePacket :: packet: %o", e), y("_storePacket :: cb? %s", !!t), r = r || C;\n            let n = e;\n\n            if ("publish" === n.cmd) {\n              const r = k(this, n = p(e));\n              if (r) return t && t(r);\n            }\n\n            0 === (n.qos || 0) && this.queueQoSZero || "publish" !== n.cmd ? this.queue.push({\n              packet: n,\n              cb: t\n            }) : n.qos > 0 ? (t = this.outgoing[n.messageId] ? this.outgoing[n.messageId].cb : null, this.outgoingStore.put(n, function (e) {\n              if (e) return t && t(e);\n              r();\n            })) : t && t(new Error("No connection to broker"));\n          }, T.prototype._setupPingTimer = function () {\n            y("_setupPingTimer :: keepalive %d (seconds)", this.options.keepalive);\n            const e = this;\n            !this.pingTimer && this.options.keepalive && (this.pingResp = !0, this.pingTimer = f(function () {\n              e._checkPing();\n            }, 1e3 * this.options.keepalive));\n          }, T.prototype._shiftPingInterval = function () {\n            this.pingTimer && this.options.keepalive && this.options.reschedulePings && this.pingTimer.reschedule(1e3 * this.options.keepalive);\n          }, T.prototype._checkPing = function () {\n            y("_checkPing :: checking ping..."), this.pingResp ? (y("_checkPing :: ping response received. Clearing flag and sending `pingreq`"), this.pingResp = !1, this._sendPacket({\n              cmd: "pingreq"\n            })) : (y("_checkPing :: calling _cleanUp with force true"), this._cleanUp(!0));\n          }, T.prototype._handlePingresp = function () {\n            this.pingResp = !0;\n          }, T.prototype._handleConnack = function (e) {\n            y("_handleConnack");\n            const t = this.options,\n                  r = 5 === t.protocolVersion ? e.reasonCode : e.returnCode;\n\n            if (clearTimeout(this.connackTimer), delete this.topicAliasSend, e.properties) {\n              if (e.properties.topicAliasMaximum) {\n                if (e.properties.topicAliasMaximum > 65535) return void this.emit("error", new Error("topicAliasMaximum from broker is out of range"));\n                e.properties.topicAliasMaximum > 0 && (this.topicAliasSend = new a(e.properties.topicAliasMaximum));\n              }\n\n              e.properties.serverKeepAlive && t.keepalive && (t.keepalive = e.properties.serverKeepAlive, this._shiftPingInterval()), e.properties.maximumPacketSize && (t.properties || (t.properties = {}), t.properties.maximumPacketSize = e.properties.maximumPacketSize);\n            }\n\n            if (0 === r) this.reconnecting = !1, this._onConnect(e);else if (r > 0) {\n              const e = new Error("Connection refused: " + _[r]);\n              e.code = r, this.emit("error", e);\n            }\n          }, T.prototype._handleAuth = function (e) {\n            const t = this.options.protocolVersion,\n                  r = 5 === t ? e.reasonCode : e.returnCode;\n\n            if (5 !== t) {\n              const e = new Error("Protocol error: Auth packets are only supported in MQTT 5. Your version:" + t);\n              return e.code = r, void this.emit("error", e);\n            }\n\n            const n = this;\n            this.handleAuth(e, function (e, t) {\n              if (e) n.emit("error", e);else if (24 === r) n.reconnecting = !1, n._sendPacket(t);else {\n                const t = new Error("Connection refused: " + _[r]);\n                e.code = r, n.emit("error", t);\n              }\n            });\n          }, T.prototype.handleAuth = function (e, t) {\n            t();\n          }, T.prototype._handlePublish = function (e, t) {\n            y("_handlePublish: packet %o", e), t = void 0 !== t ? t : C;\n            let r = e.topic.toString();\n            const n = e.payload,\n                  i = e.qos,\n                  o = e.messageId,\n                  s = this,\n                  a = this.options,\n                  l = [0, 16, 128, 131, 135, 144, 145, 151, 153];\n\n            if (5 === this.options.protocolVersion) {\n              let t;\n              if (e.properties && (t = e.properties.topicAlias), void 0 !== t) if (0 === r.length) {\n                if (!(t > 0 && t <= 65535)) return y("_handlePublish :: topic alias out of range. alias: %d", t), void this.emit("error", new Error("Received Topic Alias is out of range"));\n                {\n                  const e = this.topicAliasRecv.getTopicByAlias(t);\n                  if (!e) return y("_handlePublish :: unregistered topic alias. alias: %d", t), void this.emit("error", new Error("Received unregistered Topic Alias"));\n                  y("_handlePublish :: topic complemented by alias. topic: %s - alias: %d", r = e, t);\n                }\n              } else {\n                if (!this.topicAliasRecv.put(r, t)) return y("_handlePublish :: topic alias out of range. alias: %d", t), void this.emit("error", new Error("Received Topic Alias is out of range"));\n                y("_handlePublish :: registered topic: %s - alias: %d", r, t);\n              }\n            }\n\n            switch (y("_handlePublish: qos %d", i), i) {\n              case 2:\n                a.customHandleAcks(r, n, e, function (r, n) {\n                  return r instanceof Error || (n = r, r = null), r ? s.emit("error", r) : -1 === l.indexOf(n) ? s.emit("error", new Error("Wrong reason code for pubrec")) : void (n ? s._sendPacket({\n                    cmd: "pubrec",\n                    messageId: o,\n                    reasonCode: n\n                  }, t) : s.incomingStore.put(e, function () {\n                    s._sendPacket({\n                      cmd: "pubrec",\n                      messageId: o\n                    }, t);\n                  }));\n                });\n                break;\n\n              case 1:\n                a.customHandleAcks(r, n, e, function (i, a) {\n                  return i instanceof Error || (a = i, i = null), i ? s.emit("error", i) : -1 === l.indexOf(a) ? s.emit("error", new Error("Wrong reason code for puback")) : (a || s.emit("message", r, n, e), void s.handleMessage(e, function (e) {\n                    if (e) return t && t(e);\n\n                    s._sendPacket({\n                      cmd: "puback",\n                      messageId: o,\n                      reasonCode: a\n                    }, t);\n                  }));\n                });\n                break;\n\n              case 0:\n                this.emit("message", r, n, e), this.handleMessage(e, t);\n                break;\n\n              default:\n                y("_handlePublish: unknown QoS. Doing nothing.");\n            }\n          }, T.prototype.handleMessage = function (e, t) {\n            t();\n          }, T.prototype._handleAck = function (e) {\n            const t = e.messageId,\n                  r = e.cmd;\n            let n = null;\n            const i = this.outgoing[t] ? this.outgoing[t].cb : null,\n                  o = this;\n            let s;\n\n            if (i) {\n              switch (y("_handleAck :: packet type", r), r) {\n                case "pubcomp":\n                case "puback":\n                  {\n                    const r = e.reasonCode;\n                    r && r > 0 && 16 !== r && ((s = new Error("Publish error: " + _[r])).code = r, i(s, e)), delete this.outgoing[t], this.outgoingStore.del(e, i), this.messageIdProvider.deallocate(t), this._invokeStoreProcessingQueue();\n                    break;\n                  }\n\n                case "pubrec":\n                  {\n                    n = {\n                      cmd: "pubrel",\n                      qos: 2,\n                      messageId: t\n                    };\n                    const r = e.reasonCode;\n                    r && r > 0 && 16 !== r ? ((s = new Error("Publish error: " + _[r])).code = r, i(s, e)) : this._sendPacket(n);\n                    break;\n                  }\n\n                case "suback":\n                  delete this.outgoing[t], this.messageIdProvider.deallocate(t);\n\n                  for (let r = 0; r < e.granted.length; r++) if (0 != (128 & e.granted[r])) {\n                    const e = this.messageIdToTopic[t];\n                    e && e.forEach(function (e) {\n                      delete o._resubscribeTopics[e];\n                    });\n                  }\n\n                  this._invokeStoreProcessingQueue(), i(null, e);\n                  break;\n\n                case "unsuback":\n                  delete this.outgoing[t], this.messageIdProvider.deallocate(t), this._invokeStoreProcessingQueue(), i(null);\n                  break;\n\n                default:\n                  o.emit("error", new Error("unrecognized packet type"));\n              }\n\n              this.disconnecting && 0 === Object.keys(this.outgoing).length && this.emit("outgoingEmpty");\n            } else y("_handleAck :: Server sent an ack in error. Ignoring.");\n          }, T.prototype._handlePubrel = function (e, t) {\n            y("handling pubrel packet"), t = void 0 !== t ? t : C;\n            const r = this,\n                  n = {\n              cmd: "pubcomp",\n              messageId: e.messageId\n            };\n            r.incomingStore.get(e, function (e, i) {\n              e ? r._sendPacket(n, t) : (r.emit("message", i.topic, i.payload, i), r.handleMessage(i, function (e) {\n                if (e) return t(e);\n                r.incomingStore.del(i, C), r._sendPacket(n, t);\n              }));\n            });\n          }, T.prototype._handleDisconnect = function (e) {\n            this.emit("disconnect", e);\n          }, T.prototype._nextId = function () {\n            return this.messageIdProvider.allocate();\n          }, T.prototype.getLastMessageId = function () {\n            return this.messageIdProvider.getLastAllocated();\n          }, T.prototype._resubscribe = function () {\n            y("_resubscribe");\n            const e = Object.keys(this._resubscribeTopics);\n            if (!this._firstConnection && (this.options.clean || 5 === this.options.protocolVersion && !this.connackPacket.sessionPresent) && e.length > 0) if (this.options.resubscribe) {\n              if (5 === this.options.protocolVersion) {\n                y("_resubscribe: protocolVersion 5");\n\n                for (let t = 0; t < e.length; t++) {\n                  const r = {};\n                  r[e[t]] = this._resubscribeTopics[e[t]], r.resubscribe = !0, this.subscribe(r, {\n                    properties: r[e[t]].properties\n                  });\n                }\n              } else this._resubscribeTopics.resubscribe = !0, this.subscribe(this._resubscribeTopics);\n            } else this._resubscribeTopics = {};\n            this._firstConnection = !1;\n          }, T.prototype._onConnect = function (e) {\n            if (this.disconnected) return void this.emit("connect", e);\n            const t = this;\n            this.connackPacket = e, this.messageIdProvider.clear(), this._setupPingTimer(), this.connected = !0, function r() {\n              let n = t.outgoingStore.createStream();\n\n              function i() {\n                t._storeProcessing = !1, t._packetIdsDuringStoreProcessing = {};\n              }\n\n              function o() {\n                n.destroy(), n = null, t._flushStoreProcessingQueue(), i();\n              }\n\n              t.once("close", o), n.on("error", function (e) {\n                i(), t._flushStoreProcessingQueue(), t.removeListener("close", o), t.emit("error", e);\n              }), n.on("end", function () {\n                let n = !0;\n\n                for (const e in t._packetIdsDuringStoreProcessing) if (!t._packetIdsDuringStoreProcessing[e]) {\n                  n = !1;\n                  break;\n                }\n\n                n ? (i(), t.removeListener("close", o), t._invokeAllStoreProcessingQueue(), t.emit("connect", e)) : r();\n              }), function e() {\n                if (!n) return;\n                t._storeProcessing = !0;\n                const r = n.read(1);\n                let i;\n                r ? t._packetIdsDuringStoreProcessing[r.messageId] ? e() : t.disconnecting || t.reconnectTimer ? n.destroy && n.destroy() : (i = t.outgoing[r.messageId] ? t.outgoing[r.messageId].cb : null, t.outgoing[r.messageId] = {\n                  volatile: !1,\n                  cb: function (t, r) {\n                    i && i(t, r), e();\n                  }\n                }, t._packetIdsDuringStoreProcessing[r.messageId] = !0, t.messageIdProvider.register(r.messageId) ? t._sendPacket(r) : y("messageId: %d has already used.", r.messageId)) : n.once("readable", e);\n              }();\n            }();\n          }, T.prototype._invokeStoreProcessingQueue = function () {\n            if (this._storeProcessingQueue.length > 0) {\n              const e = this._storeProcessingQueue[0];\n              if (e && e.invoke()) return this._storeProcessingQueue.shift(), !0;\n            }\n\n            return !1;\n          }, T.prototype._invokeAllStoreProcessingQueue = function () {\n            for (; this._invokeStoreProcessingQueue(););\n          }, T.prototype._flushStoreProcessingQueue = function () {\n            for (const e of this._storeProcessingQueue) e.cbStorePut && e.cbStorePut(new Error("Connection closed")), e.callback && e.callback(new Error("Connection closed"));\n\n            this._storeProcessingQueue.splice(0);\n          }, t.exports = T;\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "./default-message-id-provider": 7,\n      "./store": 8,\n      "./topic-alias-recv": 9,\n      "./topic-alias-send": 10,\n      "./validations": 11,\n      _process: 50,\n      debug: 18,\n      events: 22,\n      inherits: 24,\n      "mqtt-packet": 40,\n      "readable-stream": 69,\n      reinterval: 70,\n      "rfdc/default": 71,\n      xtend: 81\n    }],\n    2: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("readable-stream").Transform,\n                i = e("duplexify");\n          let o,\n              s,\n              a,\n              l = !1;\n\n          t.exports = function (e, t) {\n            if (t.hostname = t.hostname || t.host, !t.hostname) throw new Error("Could not determine host. Specify host manually.");\n            const u = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt";\n            !function (e) {\n              e.hostname || (e.hostname = "localhost"), e.path || (e.path = "/"), e.wsOptions || (e.wsOptions = {});\n            }(t);\n\n            const c = function (e, t) {\n              const r = "alis" === e.protocol ? "wss" : "ws";\n              let n = r + "://" + e.hostname + e.path;\n              return e.port && 80 !== e.port && 443 !== e.port && (n = r + "://" + e.hostname + ":" + e.port + e.path), "function" == typeof e.transformWsUrl && (n = e.transformWsUrl(n, e, t)), n;\n            }(t, e);\n\n            return (o = t.my).connectSocket({\n              url: c,\n              protocols: u\n            }), s = function () {\n              const e = new n();\n              return e._write = function (e, t, r) {\n                o.sendSocketMessage({\n                  data: e.buffer,\n                  success: function () {\n                    r();\n                  },\n                  fail: function () {\n                    r(new Error());\n                  }\n                });\n              }, e._flush = function (e) {\n                o.closeSocket({\n                  success: function () {\n                    e();\n                  }\n                });\n              }, e;\n            }(), a = i.obj(), l || (l = !0, o.onSocketOpen(function () {\n              a.setReadable(s), a.setWritable(s), a.emit("connect");\n            }), o.onSocketMessage(function (e) {\n              if ("string" == typeof e.data) {\n                const t = r.from(e.data, "base64");\n                s.push(t);\n              } else {\n                const t = new FileReader();\n                t.addEventListener("load", function () {\n                  let e = t.result;\n                  e = e instanceof ArrayBuffer ? r.from(e) : r.from(e, "utf8"), s.push(e);\n                }), t.readAsArrayBuffer(e.data);\n              }\n            }), o.onSocketClose(function () {\n              a.end(), a.destroy();\n            }), o.onSocketError(function (e) {\n              a.destroy(e);\n            })), a;\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17,\n      duplexify: 20,\n      "readable-stream": 69\n    }],\n    3: [function (e, t, r) {\n      "use strict";\n\n      const n = e("net"),\n            i = e("debug")("mqttjs:tcp");\n\n      t.exports = function (e, t) {\n        t.port = t.port || 1883, t.hostname = t.hostname || t.host || "localhost";\n        const r = t.port,\n              o = t.hostname;\n        return i("port %d and host %s", r, o), n.createConnection(r, o);\n      };\n    }, {\n      debug: 18,\n      net: 16\n    }],\n    4: [function (e, t, r) {\n      "use strict";\n\n      const n = e("tls"),\n            i = e("net"),\n            o = e("debug")("mqttjs:tls");\n\n      t.exports = function (e, t) {\n        t.port = t.port || 8883, t.host = t.hostname || t.host || "localhost", 0 === i.isIP(t.host) && (t.servername = t.host), t.rejectUnauthorized = !1 !== t.rejectUnauthorized, delete t.path, o("port %d host %s rejectUnauthorized %b", t.port, t.host, t.rejectUnauthorized);\n        const r = n.connect(t);\n\n        function s(n) {\n          t.rejectUnauthorized && e.emit("error", n), r.end();\n        }\n\n        return r.on("secureConnect", function () {\n          t.rejectUnauthorized && !r.authorized ? r.emit("error", new Error("TLS not authorized")) : r.removeListener("error", s);\n        }), r.on("error", s), r;\n      };\n    }, {\n      debug: 18,\n      net: 16,\n      tls: 16\n    }],\n    5: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          const i = e("ws"),\n                o = e("debug")("mqttjs:ws"),\n                s = e("duplexify"),\n                a = e("readable-stream").Transform,\n                l = ["rejectUnauthorized", "ca", "cert", "key", "pfx", "passphrase"],\n                u = void 0 !== r && "browser" === r.title || "function" == typeof __webpack_require__;\n\n          function c(e, t) {\n            let r = e.protocol + "://" + e.hostname + ":" + e.port + e.path;\n            return "function" == typeof e.transformWsUrl && (r = e.transformWsUrl(r, e, t)), r;\n          }\n\n          function h(e) {\n            const t = e;\n            return e.hostname || (t.hostname = "localhost"), e.port || ("wss" === e.protocol ? t.port = 443 : t.port = 80), e.path || (t.path = "/"), e.wsOptions || (t.wsOptions = {}), u || "wss" !== e.protocol || l.forEach(function (r) {\n              Object.prototype.hasOwnProperty.call(e, r) && !Object.prototype.hasOwnProperty.call(e.wsOptions, r) && (t.wsOptions[r] = e[r]);\n            }), t;\n          }\n\n          t.exports = u ? function (e, t) {\n            let r;\n            o("browserStreamBuilder");\n\n            const i = function (e) {\n              const t = h(e);\n\n              if (t.hostname || (t.hostname = t.host), !t.hostname) {\n                if ("undefined" == typeof document) throw new Error("Could not determine host. Specify host manually.");\n                const e = new URL(document.URL);\n                t.hostname = e.hostname, t.port || (t.port = e.port);\n              }\n\n              return void 0 === t.objectMode && (t.objectMode = !(!0 === t.binary || void 0 === t.binary)), t;\n            }(t).browserBufferSize || 524288,\n                  l = t.browserBufferTimeout || 1e3,\n                  u = !t.objectMode,\n                  f = function (e, t) {\n              const r = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt",\n                    n = c(t, e),\n                    i = new WebSocket(n, [r]);\n              return i.binaryType = "arraybuffer", i;\n            }(e, t),\n                  p = function (e, t, r) {\n              const n = new a({\n                objectModeMode: e.objectMode\n              });\n              return n._write = t, n._flush = r, n;\n            }(t, function e(t, r, o) {\n              f.bufferedAmount > i && setTimeout(e, l, t, r, o), u && "string" == typeof t && (t = n.from(t, "utf8"));\n\n              try {\n                f.send(t);\n              } catch (e) {\n                return o(e);\n              }\n\n              o();\n            }, function (e) {\n              f.close(), e();\n            });\n\n            t.objectMode || (p._writev = v), p.on("close", () => {\n              f.close();\n            });\n            const d = void 0 !== f.addEventListener;\n\n            function g() {\n              r.setReadable(p), r.setWritable(p), r.emit("connect");\n            }\n\n            function y() {\n              r.end(), r.destroy();\n            }\n\n            function b(e) {\n              r.destroy(e);\n            }\n\n            function m(e) {\n              let t = e.data;\n              t = t instanceof ArrayBuffer ? n.from(t) : n.from(t, "utf8"), p.push(t);\n            }\n\n            function v(e, t) {\n              const r = new Array(e.length);\n\n              for (let t = 0; t < e.length; t++) "string" == typeof e[t].chunk ? r[t] = n.from(e[t], "utf8") : r[t] = e[t].chunk;\n\n              this._write(n.concat(r), "binary", t);\n            }\n\n            return f.readyState === f.OPEN ? r = p : (r = r = s(void 0, void 0, t), t.objectMode || (r._writev = v), d ? f.addEventListener("open", g) : f.onopen = g), r.socket = f, d ? (f.addEventListener("close", y), f.addEventListener("error", b), f.addEventListener("message", m)) : (f.onclose = y, f.onerror = b, f.onmessage = m), r;\n          } : function (e, t) {\n            o("streamBuilder");\n\n            const r = h(t),\n                  n = c(r, e),\n                  s = function (e, t, r) {\n              o("createWebSocket"), o("protocol: " + r.protocolId + " " + r.protocolVersion);\n              const n = "MQIsdp" === r.protocolId && 3 === r.protocolVersion ? "mqttv3.1" : "mqtt";\n              return o("creating new Websocket for url: " + t + " and protocol: " + n), new i(t, [n], r.wsOptions);\n            }(0, n, r),\n                  a = i.createWebSocketStream(s, r.wsOptions);\n\n            return a.url = n, s.on("close", () => {\n              a.destroy();\n            }), a;\n          };\n        }).call(this);\n      }).call(this, e("_process"), e("buffer").Buffer);\n    }, {\n      _process: 50,\n      buffer: 17,\n      debug: 18,\n      duplexify: 20,\n      "readable-stream": 69,\n      ws: 80\n    }],\n    6: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("readable-stream").Transform,\n                i = e("duplexify");\n          let o, s, a;\n\n          t.exports = function (e, t) {\n            if (t.hostname = t.hostname || t.host, !t.hostname) throw new Error("Could not determine host. Specify host manually.");\n            const l = "MQIsdp" === t.protocolId && 3 === t.protocolVersion ? "mqttv3.1" : "mqtt";\n            !function (e) {\n              e.hostname || (e.hostname = "localhost"), e.path || (e.path = "/"), e.wsOptions || (e.wsOptions = {});\n            }(t);\n\n            const u = function (e, t) {\n              const r = "wxs" === e.protocol ? "wss" : "ws";\n              let n = r + "://" + e.hostname + e.path;\n              return e.port && 80 !== e.port && 443 !== e.port && (n = r + "://" + e.hostname + ":" + e.port + e.path), "function" == typeof e.transformWsUrl && (n = e.transformWsUrl(n, e, t)), n;\n            }(t, e);\n\n            o = wx.connectSocket({\n              url: u,\n              protocols: [l]\n            }), s = function () {\n              const e = new n();\n              return e._write = function (e, t, r) {\n                o.send({\n                  data: e.buffer,\n                  success: function () {\n                    r();\n                  },\n                  fail: function (e) {\n                    r(new Error(e));\n                  }\n                });\n              }, e._flush = function (e) {\n                o.close({\n                  success: function () {\n                    e();\n                  }\n                });\n              }, e;\n            }(), (a = i.obj())._destroy = function (e, t) {\n              o.close({\n                success: function () {\n                  t && t(e);\n                }\n              });\n            };\n            const c = a.destroy;\n            return a.destroy = function () {\n              a.destroy = c;\n              const e = this;\n              setTimeout(function () {\n                o.close({\n                  fail: function () {\n                    e._destroy(new Error());\n                  }\n                });\n              }, 0);\n            }.bind(a), o.onOpen(function () {\n              a.setReadable(s), a.setWritable(s), a.emit("connect");\n            }), o.onMessage(function (e) {\n              let t = e.data;\n              t = t instanceof ArrayBuffer ? r.from(t) : r.from(t, "utf8"), s.push(t);\n            }), o.onClose(function () {\n              a.end(), a.destroy();\n            }), o.onError(function (e) {\n              a.destroy(new Error(e.errMsg));\n            }), a;\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17,\n      duplexify: 20,\n      "readable-stream": 69\n    }],\n    7: [function (e, t, r) {\n      "use strict";\n\n      function n() {\n        if (!(this instanceof n)) return new n();\n        this.nextId = Math.max(1, Math.floor(65535 * Math.random()));\n      }\n\n      n.prototype.allocate = function () {\n        const e = this.nextId++;\n        return 65536 === this.nextId && (this.nextId = 1), e;\n      }, n.prototype.getLastAllocated = function () {\n        return 1 === this.nextId ? 65535 : this.nextId - 1;\n      }, n.prototype.register = function (e) {\n        return !0;\n      }, n.prototype.deallocate = function (e) {}, n.prototype.clear = function () {}, t.exports = n;\n    }, {}],\n    8: [function (e, t, r) {\n      "use strict";\n\n      const n = e("xtend"),\n            i = e("readable-stream").Readable,\n            o = {\n        objectMode: !0\n      },\n            s = {\n        clean: !0\n      };\n\n      function a(e) {\n        if (!(this instanceof a)) return new a(e);\n        this.options = e || {}, this.options = n(s, e), this._inflights = new Map();\n      }\n\n      a.prototype.put = function (e, t) {\n        return this._inflights.set(e.messageId, e), t && t(), this;\n      }, a.prototype.createStream = function () {\n        const e = new i(o),\n              t = [];\n        let r = !1,\n            n = 0;\n        return this._inflights.forEach(function (e, r) {\n          t.push(e);\n        }), e._read = function () {\n          !r && n < t.length ? this.push(t[n++]) : this.push(null);\n        }, e.destroy = function () {\n          if (r) return;\n          const e = this;\n          r = !0, setTimeout(function () {\n            e.emit("close");\n          }, 0);\n        }, e;\n      }, a.prototype.del = function (e, t) {\n        return (e = this._inflights.get(e.messageId)) ? (this._inflights.delete(e.messageId), t(null, e)) : t && t(new Error("missing packet")), this;\n      }, a.prototype.get = function (e, t) {\n        return (e = this._inflights.get(e.messageId)) ? t(null, e) : t && t(new Error("missing packet")), this;\n      }, a.prototype.close = function (e) {\n        this.options.clean && (this._inflights = null), e && e();\n      }, t.exports = a;\n    }, {\n      "readable-stream": 69,\n      xtend: 81\n    }],\n    9: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        if (!(this instanceof n)) return new n(e);\n        this.aliasToTopic = {}, this.max = e;\n      }\n\n      n.prototype.put = function (e, t) {\n        return !(0 === t || t > this.max) && (this.aliasToTopic[t] = e, this.length = Object.keys(this.aliasToTopic).length, !0);\n      }, n.prototype.getTopicByAlias = function (e) {\n        return this.aliasToTopic[e];\n      }, n.prototype.clear = function () {\n        this.aliasToTopic = {};\n      }, t.exports = n;\n    }, {}],\n    10: [function (e, t, r) {\n      "use strict";\n\n      const n = e("lru-cache"),\n            i = e("number-allocator").NumberAllocator;\n\n      function o(e) {\n        if (!(this instanceof o)) return new o(e);\n        e > 0 && (this.aliasToTopic = new n({\n          max: e\n        }), this.topicToAlias = {}, this.numberAllocator = new i(1, e), this.max = e, this.length = 0);\n      }\n\n      o.prototype.put = function (e, t) {\n        if (0 === t || t > this.max) return !1;\n        const r = this.aliasToTopic.get(t);\n        return r && delete this.topicToAlias[r], this.aliasToTopic.set(t, e), this.topicToAlias[e] = t, this.numberAllocator.use(t), this.length = this.aliasToTopic.length, !0;\n      }, o.prototype.getTopicByAlias = function (e) {\n        return this.aliasToTopic.get(e);\n      }, o.prototype.getAliasByTopic = function (e) {\n        const t = this.topicToAlias[e];\n        return void 0 !== t && this.aliasToTopic.get(t), t;\n      }, o.prototype.clear = function () {\n        this.aliasToTopic.reset(), this.topicToAlias = {}, this.numberAllocator.clear(), this.length = 0;\n      }, o.prototype.getLruAlias = function () {\n        const e = this.numberAllocator.firstVacant();\n        return e || this.aliasToTopic.keys()[this.aliasToTopic.length - 1];\n      }, t.exports = o;\n    }, {\n      "lru-cache": 37,\n      "number-allocator": 46\n    }],\n    11: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        const t = e.split("/");\n\n        for (let e = 0; e < t.length; e++) if ("+" !== t[e]) {\n          if ("#" === t[e]) return e === t.length - 1;\n          if (-1 !== t[e].indexOf("+") || -1 !== t[e].indexOf("#")) return !1;\n        }\n\n        return !0;\n      }\n\n      t.exports = {\n        validateTopics: function (e) {\n          if (0 === e.length) return "empty_topic_list";\n\n          for (let t = 0; t < e.length; t++) if (!n(e[t])) return e[t];\n\n          return null;\n        }\n      };\n    }, {}],\n    12: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          const n = e("../client"),\n                i = e("../store"),\n                o = e("url"),\n                s = e("xtend"),\n                a = e("debug")("mqttjs"),\n                l = {};\n\n          function u(e, t) {\n            if (a("connecting to an MQTT broker..."), "object" != typeof e || t || (t = e, e = null), t = t || {}, e) {\n              const r = o.parse(e, !0);\n              if (null != r.port && (r.port = Number(r.port)), null === (t = s(r, t)).protocol) throw new Error("Missing protocol");\n              t.protocol = t.protocol.replace(/:$/, "");\n            }\n\n            if (function (e) {\n              let t;\n              e.auth && ((t = e.auth.match(/^(.+):(.+)$/)) ? (e.username = t[1], e.password = t[2]) : e.username = e.auth);\n            }(t), t.query && "string" == typeof t.query.clientId && (t.clientId = t.query.clientId), t.cert && t.key) {\n              if (!t.protocol) throw new Error("Missing secure protocol key");\n              if (-1 === ["mqtts", "wss", "wxs", "alis"].indexOf(t.protocol)) switch (t.protocol) {\n                case "mqtt":\n                  t.protocol = "mqtts";\n                  break;\n\n                case "ws":\n                  t.protocol = "wss";\n                  break;\n\n                case "wx":\n                  t.protocol = "wxs";\n                  break;\n\n                case "ali":\n                  t.protocol = "alis";\n                  break;\n\n                default:\n                  throw new Error(\'Unknown protocol for secure connection: "\' + t.protocol + \'"!\');\n              }\n            }\n\n            if (!l[t.protocol]) {\n              const e = -1 !== ["mqtts", "wss"].indexOf(t.protocol);\n              t.protocol = ["mqtt", "mqtts", "ws", "wss", "wx", "wxs", "ali", "alis"].filter(function (t, r) {\n                return (!e || r % 2 != 0) && "function" == typeof l[t];\n              })[0];\n            }\n\n            if (!1 === t.clean && !t.clientId) throw new Error("Missing clientId for unclean clients");\n            t.protocol && (t.defaultProtocol = t.protocol);\n            const r = new n(function (e) {\n              return t.servers && (e._reconnectCount && e._reconnectCount !== t.servers.length || (e._reconnectCount = 0), t.host = t.servers[e._reconnectCount].host, t.port = t.servers[e._reconnectCount].port, t.protocol = t.servers[e._reconnectCount].protocol ? t.servers[e._reconnectCount].protocol : t.defaultProtocol, t.hostname = t.host, e._reconnectCount++), a("calling streambuilder for", t.protocol), l[t.protocol](e, t);\n            }, t);\n            return r.on("error", function () {}), r;\n          }\n\n          void 0 !== r && "browser" !== r.title || "function" != typeof __webpack_require__ ? (l.mqtt = e("./tcp"), l.tcp = e("./tcp"), l.ssl = e("./tls"), l.tls = e("./tls"), l.mqtts = e("./tls")) : (l.wx = e("./wx"), l.wxs = e("./wx"), l.ali = e("./ali"), l.alis = e("./ali")), l.ws = e("./ws"), l.wss = e("./ws"), t.exports = u, t.exports.connect = u, t.exports.MqttClient = n, t.exports.Store = i;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "../client": 1,\n      "../store": 8,\n      "./ali": 2,\n      "./tcp": 3,\n      "./tls": 4,\n      "./ws": 5,\n      "./wx": 6,\n      _process: 50,\n      debug: 18,\n      url: 76,\n      xtend: 81\n    }],\n    13: [function (e, t, r) {\n      "use strict";\n\n      r.byteLength = function (e) {\n        var t = u(e),\n            r = t[0],\n            n = t[1];\n        return 3 * (r + n) / 4 - n;\n      }, r.toByteArray = function (e) {\n        var t,\n            r,\n            n = u(e),\n            s = n[0],\n            a = n[1],\n            l = new o(function (e, t, r) {\n          return 3 * (t + r) / 4 - r;\n        }(0, s, a)),\n            c = 0,\n            h = a > 0 ? s - 4 : s;\n\n        for (r = 0; r < h; r += 4) t = i[e.charCodeAt(r)] << 18 | i[e.charCodeAt(r + 1)] << 12 | i[e.charCodeAt(r + 2)] << 6 | i[e.charCodeAt(r + 3)], l[c++] = t >> 16 & 255, l[c++] = t >> 8 & 255, l[c++] = 255 & t;\n\n        2 === a && (t = i[e.charCodeAt(r)] << 2 | i[e.charCodeAt(r + 1)] >> 4, l[c++] = 255 & t);\n        1 === a && (t = i[e.charCodeAt(r)] << 10 | i[e.charCodeAt(r + 1)] << 4 | i[e.charCodeAt(r + 2)] >> 2, l[c++] = t >> 8 & 255, l[c++] = 255 & t);\n        return l;\n      }, r.fromByteArray = function (e) {\n        for (var t, r = e.length, i = r % 3, o = [], s = 0, a = r - i; s < a; s += 16383) o.push(c(e, s, s + 16383 > a ? a : s + 16383));\n\n        1 === i ? (t = e[r - 1], o.push(n[t >> 2] + n[t << 4 & 63] + "==")) : 2 === i && (t = (e[r - 2] << 8) + e[r - 1], o.push(n[t >> 10] + n[t >> 4 & 63] + n[t << 2 & 63] + "="));\n        return o.join("");\n      };\n\n      for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, l = s.length; a < l; ++a) n[a] = s[a], i[s.charCodeAt(a)] = a;\n\n      function u(e) {\n        var t = e.length;\n        if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");\n        var r = e.indexOf("=");\n        return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];\n      }\n\n      function c(e, t, r) {\n        for (var i, o, s = [], a = t; a < r; a += 3) i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(n[(o = i) >> 18 & 63] + n[o >> 12 & 63] + n[o >> 6 & 63] + n[63 & o]);\n\n        return s.join("");\n      }\n\n      i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;\n    }, {}],\n    14: [function (e, t, r) {\n      "use strict";\n\n      const {\n        Buffer: n\n      } = e("buffer"),\n            i = Symbol.for("BufferList");\n\n      function o(e) {\n        if (!(this instanceof o)) return new o(e);\n\n        o._init.call(this, e);\n      }\n\n      o._init = function (e) {\n        Object.defineProperty(this, i, {\n          value: !0\n        }), this._bufs = [], this.length = 0, e && this.append(e);\n      }, o.prototype._new = function (e) {\n        return new o(e);\n      }, o.prototype._offset = function (e) {\n        if (0 === e) return [0, 0];\n        let t = 0;\n\n        for (let r = 0; r < this._bufs.length; r++) {\n          const n = t + this._bufs[r].length;\n          if (e < n || r === this._bufs.length - 1) return [r, e - t];\n          t = n;\n        }\n      }, o.prototype._reverseOffset = function (e) {\n        const t = e[0];\n        let r = e[1];\n\n        for (let e = 0; e < t; e++) r += this._bufs[e].length;\n\n        return r;\n      }, o.prototype.get = function (e) {\n        if (e > this.length || e < 0) return;\n\n        const t = this._offset(e);\n\n        return this._bufs[t[0]][t[1]];\n      }, o.prototype.slice = function (e, t) {\n        return "number" == typeof e && e < 0 && (e += this.length), "number" == typeof t && t < 0 && (t += this.length), this.copy(null, 0, e, t);\n      }, o.prototype.copy = function (e, t, r, i) {\n        if (("number" != typeof r || r < 0) && (r = 0), ("number" != typeof i || i > this.length) && (i = this.length), r >= this.length) return e || n.alloc(0);\n        if (i <= 0) return e || n.alloc(0);\n\n        const o = !!e,\n              s = this._offset(r),\n              a = i - r;\n\n        let l = a,\n            u = o && t || 0,\n            c = s[1];\n\n        if (0 === r && i === this.length) {\n          if (!o) return 1 === this._bufs.length ? this._bufs[0] : n.concat(this._bufs, this.length);\n\n          for (let t = 0; t < this._bufs.length; t++) this._bufs[t].copy(e, u), u += this._bufs[t].length;\n\n          return e;\n        }\n\n        if (l <= this._bufs[s[0]].length - c) return o ? this._bufs[s[0]].copy(e, t, c, c + l) : this._bufs[s[0]].slice(c, c + l);\n        o || (e = n.allocUnsafe(a));\n\n        for (let t = s[0]; t < this._bufs.length; t++) {\n          const r = this._bufs[t].length - c;\n\n          if (!(l > r)) {\n            this._bufs[t].copy(e, u, c, c + l), u += r;\n            break;\n          }\n\n          this._bufs[t].copy(e, u, c), u += r, l -= r, c && (c = 0);\n        }\n\n        return e.length > u ? e.slice(0, u) : e;\n      }, o.prototype.shallowSlice = function (e, t) {\n        if (e = e || 0, t = "number" != typeof t ? this.length : t, e < 0 && (e += this.length), t < 0 && (t += this.length), e === t) return this._new();\n\n        const r = this._offset(e),\n              n = this._offset(t),\n              i = this._bufs.slice(r[0], n[0] + 1);\n\n        return 0 === n[1] ? i.pop() : i[i.length - 1] = i[i.length - 1].slice(0, n[1]), 0 !== r[1] && (i[0] = i[0].slice(r[1])), this._new(i);\n      }, o.prototype.toString = function (e, t, r) {\n        return this.slice(t, r).toString(e);\n      }, o.prototype.consume = function (e) {\n        if (e = Math.trunc(e), Number.isNaN(e) || e <= 0) return this;\n\n        for (; this._bufs.length;) {\n          if (!(e >= this._bufs[0].length)) {\n            this._bufs[0] = this._bufs[0].slice(e), this.length -= e;\n            break;\n          }\n\n          e -= this._bufs[0].length, this.length -= this._bufs[0].length, this._bufs.shift();\n        }\n\n        return this;\n      }, o.prototype.duplicate = function () {\n        const e = this._new();\n\n        for (let t = 0; t < this._bufs.length; t++) e.append(this._bufs[t]);\n\n        return e;\n      }, o.prototype.append = function (e) {\n        if (null == e) return this;\n        if (e.buffer) this._appendBuffer(n.from(e.buffer, e.byteOffset, e.byteLength));else if (Array.isArray(e)) for (let t = 0; t < e.length; t++) this.append(e[t]);else if (this._isBufferList(e)) for (let t = 0; t < e._bufs.length; t++) this.append(e._bufs[t]);else "number" == typeof e && (e = e.toString()), this._appendBuffer(n.from(e));\n        return this;\n      }, o.prototype._appendBuffer = function (e) {\n        this._bufs.push(e), this.length += e.length;\n      }, o.prototype.indexOf = function (e, t, r) {\n        if (void 0 === r && "string" == typeof t && (r = t, t = void 0), "function" == typeof e || Array.isArray(e)) throw new TypeError(\'The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.\');\n        if ("number" == typeof e ? e = n.from([e]) : "string" == typeof e ? e = n.from(e, r) : this._isBufferList(e) ? e = e.slice() : Array.isArray(e.buffer) ? e = n.from(e.buffer, e.byteOffset, e.byteLength) : n.isBuffer(e) || (e = n.from(e)), t = Number(t || 0), isNaN(t) && (t = 0), t < 0 && (t = this.length + t), t < 0 && (t = 0), 0 === e.length) return t > this.length ? this.length : t;\n\n        const i = this._offset(t);\n\n        let o = i[0],\n            s = i[1];\n\n        for (; o < this._bufs.length; o++) {\n          const t = this._bufs[o];\n\n          for (; s < t.length;) {\n            if (t.length - s >= e.length) {\n              const r = t.indexOf(e, s);\n              if (-1 !== r) return this._reverseOffset([o, r]);\n              s = t.length - e.length + 1;\n            } else {\n              const t = this._reverseOffset([o, s]);\n\n              if (this._match(t, e)) return t;\n              s++;\n            }\n          }\n\n          s = 0;\n        }\n\n        return -1;\n      }, o.prototype._match = function (e, t) {\n        if (this.length - e < t.length) return !1;\n\n        for (let r = 0; r < t.length; r++) if (this.get(e + r) !== t[r]) return !1;\n\n        return !0;\n      }, function () {\n        const e = {\n          readDoubleBE: 8,\n          readDoubleLE: 8,\n          readFloatBE: 4,\n          readFloatLE: 4,\n          readInt32BE: 4,\n          readInt32LE: 4,\n          readUInt32BE: 4,\n          readUInt32LE: 4,\n          readInt16BE: 2,\n          readInt16LE: 2,\n          readUInt16BE: 2,\n          readUInt16LE: 2,\n          readInt8: 1,\n          readUInt8: 1,\n          readIntBE: null,\n          readIntLE: null,\n          readUIntBE: null,\n          readUIntLE: null\n        };\n\n        for (const t in e) !function (t) {\n          o.prototype[t] = null === e[t] ? function (e, r) {\n            return this.slice(e, e + r)[t](0, r);\n          } : function (r = 0) {\n            return this.slice(r, r + e[t])[t](0);\n          };\n        }(t);\n      }(), o.prototype._isBufferList = function (e) {\n        return e instanceof o || o.isBufferList(e);\n      }, o.isBufferList = function (e) {\n        return null != e && e[i];\n      }, t.exports = o;\n    }, {\n      buffer: 17\n    }],\n    15: [function (e, t, r) {\n      "use strict";\n\n      const n = e("readable-stream").Duplex,\n            i = e("inherits"),\n            o = e("./BufferList");\n\n      function s(e) {\n        if (!(this instanceof s)) return new s(e);\n\n        if ("function" == typeof e) {\n          this._callback = e;\n\n          const t = function (e) {\n            this._callback && (this._callback(e), this._callback = null);\n          }.bind(this);\n\n          this.on("pipe", function (e) {\n            e.on("error", t);\n          }), this.on("unpipe", function (e) {\n            e.removeListener("error", t);\n          }), e = null;\n        }\n\n        o._init.call(this, e), n.call(this);\n      }\n\n      i(s, n), Object.assign(s.prototype, o.prototype), s.prototype._new = function (e) {\n        return new s(e);\n      }, s.prototype._write = function (e, t, r) {\n        this._appendBuffer(e), "function" == typeof r && r();\n      }, s.prototype._read = function (e) {\n        if (!this.length) return this.push(null);\n        e = Math.min(e, this.length), this.push(this.slice(0, e)), this.consume(e);\n      }, s.prototype.end = function (e) {\n        n.prototype.end.call(this, e), this._callback && (this._callback(null, this.slice()), this._callback = null);\n      }, s.prototype._destroy = function (e, t) {\n        this._bufs.length = 0, this.length = 0, t(e);\n      }, s.prototype._isBufferList = function (e) {\n        return e instanceof s || e instanceof o || s.isBufferList(e);\n      }, s.isBufferList = o.isBufferList, t.exports = s, t.exports.BufferListStream = s, t.exports.BufferList = o;\n    }, {\n      "./BufferList": 14,\n      inherits: 24,\n      "readable-stream": 69\n    }],\n    16: [function (e, t, r) {}, {}],\n    17: [function (e, t, r) {\n      (function (t) {\n        (function () {\n          "use strict";\n\n          var t = e("base64-js"),\n              n = e("ieee754");\n          r.Buffer = s, r.SlowBuffer = function (e) {\n            +e != e && (e = 0);\n            return s.alloc(+e);\n          }, r.INSPECT_MAX_BYTES = 50;\n          var i = 2147483647;\n\n          function o(e) {\n            if (e > i) throw new RangeError(\'The value "\' + e + \'" is invalid for option "size"\');\n            var t = new Uint8Array(e);\n            return t.__proto__ = s.prototype, t;\n          }\n\n          function s(e, t, r) {\n            if ("number" == typeof e) {\n              if ("string" == typeof t) throw new TypeError(\'The "string" argument must be of type string. Received type number\');\n              return u(e);\n            }\n\n            return a(e, t, r);\n          }\n\n          function a(e, t, r) {\n            if ("string" == typeof e) return function (e, t) {\n              "string" == typeof t && "" !== t || (t = "utf8");\n              if (!s.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);\n              var r = 0 | f(e, t),\n                  n = o(r),\n                  i = n.write(e, t);\n              i !== r && (n = n.slice(0, i));\n              return n;\n            }(e, t);\n            if (ArrayBuffer.isView(e)) return c(e);\n            if (null == e) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);\n            if (q(e, ArrayBuffer) || e && q(e.buffer, ArrayBuffer)) return function (e, t, r) {\n              if (t < 0 || e.byteLength < t) throw new RangeError(\'"offset" is outside of buffer bounds\');\n              if (e.byteLength < t + (r || 0)) throw new RangeError(\'"length" is outside of buffer bounds\');\n              var n;\n              n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);\n              return n.__proto__ = s.prototype, n;\n            }(e, t, r);\n            if ("number" == typeof e) throw new TypeError(\'The "value" argument must not be of type number. Received type number\');\n            var n = e.valueOf && e.valueOf();\n            if (null != n && n !== e) return s.from(n, t, r);\n\n            var i = function (e) {\n              if (s.isBuffer(e)) {\n                var t = 0 | h(e.length),\n                    r = o(t);\n                return 0 === r.length ? r : (e.copy(r, 0, 0, t), r);\n              }\n\n              if (void 0 !== e.length) return "number" != typeof e.length || D(e.length) ? o(0) : c(e);\n              if ("Buffer" === e.type && Array.isArray(e.data)) return c(e.data);\n            }(e);\n\n            if (i) return i;\n            if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return s.from(e[Symbol.toPrimitive]("string"), t, r);\n            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);\n          }\n\n          function l(e) {\n            if ("number" != typeof e) throw new TypeError(\'"size" argument must be of type number\');\n            if (e < 0) throw new RangeError(\'The value "\' + e + \'" is invalid for option "size"\');\n          }\n\n          function u(e) {\n            return l(e), o(e < 0 ? 0 : 0 | h(e));\n          }\n\n          function c(e) {\n            for (var t = e.length < 0 ? 0 : 0 | h(e.length), r = o(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];\n\n            return r;\n          }\n\n          function h(e) {\n            if (e >= i) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");\n            return 0 | e;\n          }\n\n          function f(e, t) {\n            if (s.isBuffer(e)) return e.length;\n            if (ArrayBuffer.isView(e) || q(e, ArrayBuffer)) return e.byteLength;\n            if ("string" != typeof e) throw new TypeError(\'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type \' + typeof e);\n            var r = e.length,\n                n = arguments.length > 2 && !0 === arguments[2];\n            if (!n && 0 === r) return 0;\n\n            for (var i = !1;;) switch (t) {\n              case "ascii":\n              case "latin1":\n              case "binary":\n                return r;\n\n              case "utf8":\n              case "utf-8":\n                return L(e).length;\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return 2 * r;\n\n              case "hex":\n                return r >>> 1;\n\n              case "base64":\n                return j(e).length;\n\n              default:\n                if (i) return n ? -1 : L(e).length;\n                t = ("" + t).toLowerCase(), i = !0;\n            }\n          }\n\n          function p(e, t, r) {\n            var n = e[t];\n            e[t] = e[r], e[r] = n;\n          }\n\n          function d(e, t, r, n, i) {\n            if (0 === e.length) return -1;\n\n            if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), D(r = +r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {\n              if (i) return -1;\n              r = e.length - 1;\n            } else if (r < 0) {\n              if (!i) return -1;\n              r = 0;\n            }\n\n            if ("string" == typeof t && (t = s.from(t, n)), s.isBuffer(t)) return 0 === t.length ? -1 : g(e, t, r, n, i);\n            if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : g(e, [t], r, n, i);\n            throw new TypeError("val must be string, number or Buffer");\n          }\n\n          function g(e, t, r, n, i) {\n            var o,\n                s = 1,\n                a = e.length,\n                l = t.length;\n\n            if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {\n              if (e.length < 2 || t.length < 2) return -1;\n              s = 2, a /= 2, l /= 2, r /= 2;\n            }\n\n            function u(e, t) {\n              return 1 === s ? e[t] : e.readUInt16BE(t * s);\n            }\n\n            if (i) {\n              var c = -1;\n\n              for (o = r; o < a; o++) if (u(e, o) === u(t, -1 === c ? 0 : o - c)) {\n                if (-1 === c && (c = o), o - c + 1 === l) return c * s;\n              } else -1 !== c && (o -= o - c), c = -1;\n            } else for (r + l > a && (r = a - l), o = r; o >= 0; o--) {\n              for (var h = !0, f = 0; f < l; f++) if (u(e, o + f) !== u(t, f)) {\n                h = !1;\n                break;\n              }\n\n              if (h) return o;\n            }\n\n            return -1;\n          }\n\n          function y(e, t, r, n) {\n            r = Number(r) || 0;\n            var i = e.length - r;\n            n ? (n = Number(n)) > i && (n = i) : n = i;\n            var o = t.length;\n            n > o / 2 && (n = o / 2);\n\n            for (var s = 0; s < n; ++s) {\n              var a = parseInt(t.substr(2 * s, 2), 16);\n              if (D(a)) return s;\n              e[r + s] = a;\n            }\n\n            return s;\n          }\n\n          function b(e, t, r, n) {\n            return U(L(t, e.length - r), e, r, n);\n          }\n\n          function m(e, t, r, n) {\n            return U(function (e) {\n              for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));\n\n              return t;\n            }(t), e, r, n);\n          }\n\n          function v(e, t, r, n) {\n            return m(e, t, r, n);\n          }\n\n          function w(e, t, r, n) {\n            return U(j(t), e, r, n);\n          }\n\n          function _(e, t, r, n) {\n            return U(function (e, t) {\n              for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);\n\n              return o;\n            }(t, e.length - r), e, r, n);\n          }\n\n          function k(e, r, n) {\n            return 0 === r && n === e.length ? t.fromByteArray(e) : t.fromByteArray(e.slice(r, n));\n          }\n\n          function S(e, t, r) {\n            r = Math.min(e.length, r);\n\n            for (var n = [], i = t; i < r;) {\n              var o,\n                  s,\n                  a,\n                  l,\n                  u = e[i],\n                  c = null,\n                  h = u > 239 ? 4 : u > 223 ? 3 : u > 191 ? 2 : 1;\n              if (i + h <= r) switch (h) {\n                case 1:\n                  u < 128 && (c = u);\n                  break;\n\n                case 2:\n                  128 == (192 & (o = e[i + 1])) && (l = (31 & u) << 6 | 63 & o) > 127 && (c = l);\n                  break;\n\n                case 3:\n                  o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (l = (15 & u) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (l < 55296 || l > 57343) && (c = l);\n                  break;\n\n                case 4:\n                  o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (l = (15 & u) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && l < 1114112 && (c = l);\n              }\n              null === c ? (c = 65533, h = 1) : c > 65535 && (c -= 65536, n.push(c >>> 10 & 1023 | 55296), c = 56320 | 1023 & c), n.push(c), i += h;\n            }\n\n            return function (e) {\n              var t = e.length;\n              if (t <= E) return String.fromCharCode.apply(String, e);\n              var r = "",\n                  n = 0;\n\n              for (; n < t;) r += String.fromCharCode.apply(String, e.slice(n, n += E));\n\n              return r;\n            }(n);\n          }\n\n          r.kMaxLength = i, s.TYPED_ARRAY_SUPPORT = function () {\n            try {\n              var e = new Uint8Array(1);\n              return e.__proto__ = {\n                __proto__: Uint8Array.prototype,\n                foo: function () {\n                  return 42;\n                }\n              }, 42 === e.foo();\n            } catch (e) {\n              return !1;\n            }\n          }(), s.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(s.prototype, "parent", {\n            enumerable: !0,\n            get: function () {\n              if (s.isBuffer(this)) return this.buffer;\n            }\n          }), Object.defineProperty(s.prototype, "offset", {\n            enumerable: !0,\n            get: function () {\n              if (s.isBuffer(this)) return this.byteOffset;\n            }\n          }), "undefined" != typeof Symbol && null != Symbol.species && s[Symbol.species] === s && Object.defineProperty(s, Symbol.species, {\n            value: null,\n            configurable: !0,\n            enumerable: !1,\n            writable: !1\n          }), s.poolSize = 8192, s.from = function (e, t, r) {\n            return a(e, t, r);\n          }, s.prototype.__proto__ = Uint8Array.prototype, s.__proto__ = Uint8Array, s.alloc = function (e, t, r) {\n            return function (e, t, r) {\n              return l(e), e <= 0 ? o(e) : void 0 !== t ? "string" == typeof r ? o(e).fill(t, r) : o(e).fill(t) : o(e);\n            }(e, t, r);\n          }, s.allocUnsafe = function (e) {\n            return u(e);\n          }, s.allocUnsafeSlow = function (e) {\n            return u(e);\n          }, s.isBuffer = function (e) {\n            return null != e && !0 === e._isBuffer && e !== s.prototype;\n          }, s.compare = function (e, t) {\n            if (q(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)), q(t, Uint8Array) && (t = s.from(t, t.offset, t.byteLength)), !s.isBuffer(e) || !s.isBuffer(t)) throw new TypeError(\'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array\');\n            if (e === t) return 0;\n\n            for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) if (e[i] !== t[i]) {\n              r = e[i], n = t[i];\n              break;\n            }\n\n            return r < n ? -1 : n < r ? 1 : 0;\n          }, s.isEncoding = function (e) {\n            switch (String(e).toLowerCase()) {\n              case "hex":\n              case "utf8":\n              case "utf-8":\n              case "ascii":\n              case "latin1":\n              case "binary":\n              case "base64":\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return !0;\n\n              default:\n                return !1;\n            }\n          }, s.concat = function (e, t) {\n            if (!Array.isArray(e)) throw new TypeError(\'"list" argument must be an Array of Buffers\');\n            if (0 === e.length) return s.alloc(0);\n            var r;\n            if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) t += e[r].length;\n            var n = s.allocUnsafe(t),\n                i = 0;\n\n            for (r = 0; r < e.length; ++r) {\n              var o = e[r];\n              if (q(o, Uint8Array) && (o = s.from(o)), !s.isBuffer(o)) throw new TypeError(\'"list" argument must be an Array of Buffers\');\n              o.copy(n, i), i += o.length;\n            }\n\n            return n;\n          }, s.byteLength = f, s.prototype._isBuffer = !0, s.prototype.swap16 = function () {\n            var e = this.length;\n            if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");\n\n            for (var t = 0; t < e; t += 2) p(this, t, t + 1);\n\n            return this;\n          }, s.prototype.swap32 = function () {\n            var e = this.length;\n            if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");\n\n            for (var t = 0; t < e; t += 4) p(this, t, t + 3), p(this, t + 1, t + 2);\n\n            return this;\n          }, s.prototype.swap64 = function () {\n            var e = this.length;\n            if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");\n\n            for (var t = 0; t < e; t += 8) p(this, t, t + 7), p(this, t + 1, t + 6), p(this, t + 2, t + 5), p(this, t + 3, t + 4);\n\n            return this;\n          }, s.prototype.toString = function () {\n            var e = this.length;\n            return 0 === e ? "" : 0 === arguments.length ? S(this, 0, e) : function (e, t, r) {\n              var n = !1;\n              if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";\n              if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";\n              if ((r >>>= 0) <= (t >>>= 0)) return "";\n\n              for (e || (e = "utf8");;) switch (e) {\n                case "hex":\n                  return x(this, t, r);\n\n                case "utf8":\n                case "utf-8":\n                  return S(this, t, r);\n\n                case "ascii":\n                  return C(this, t, r);\n\n                case "latin1":\n                case "binary":\n                  return T(this, t, r);\n\n                case "base64":\n                  return k(this, t, r);\n\n                case "ucs2":\n                case "ucs-2":\n                case "utf16le":\n                case "utf-16le":\n                  return A(this, t, r);\n\n                default:\n                  if (n) throw new TypeError("Unknown encoding: " + e);\n                  e = (e + "").toLowerCase(), n = !0;\n              }\n            }.apply(this, arguments);\n          }, s.prototype.toLocaleString = s.prototype.toString, s.prototype.equals = function (e) {\n            if (!s.isBuffer(e)) throw new TypeError("Argument must be a Buffer");\n            return this === e || 0 === s.compare(this, e);\n          }, s.prototype.inspect = function () {\n            var e = "",\n                t = r.INSPECT_MAX_BYTES;\n            return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">";\n          }, s.prototype.compare = function (e, t, r, n, i) {\n            if (q(e, Uint8Array) && (e = s.from(e, e.offset, e.byteLength)), !s.isBuffer(e)) throw new TypeError(\'The "target" argument must be one of type Buffer or Uint8Array. Received type \' + typeof e);\n            if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");\n            if (n >= i && t >= r) return 0;\n            if (n >= i) return -1;\n            if (t >= r) return 1;\n            if (t >>>= 0, r >>>= 0, n >>>= 0, i >>>= 0, this === e) return 0;\n\n            for (var o = i - n, a = r - t, l = Math.min(o, a), u = this.slice(n, i), c = e.slice(t, r), h = 0; h < l; ++h) if (u[h] !== c[h]) {\n              o = u[h], a = c[h];\n              break;\n            }\n\n            return o < a ? -1 : a < o ? 1 : 0;\n          }, s.prototype.includes = function (e, t, r) {\n            return -1 !== this.indexOf(e, t, r);\n          }, s.prototype.indexOf = function (e, t, r) {\n            return d(this, e, t, r, !0);\n          }, s.prototype.lastIndexOf = function (e, t, r) {\n            return d(this, e, t, r, !1);\n          }, s.prototype.write = function (e, t, r, n) {\n            if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {\n              if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");\n              t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);\n            }\n            var i = this.length - t;\n            if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");\n            n || (n = "utf8");\n\n            for (var o = !1;;) switch (n) {\n              case "hex":\n                return y(this, e, t, r);\n\n              case "utf8":\n              case "utf-8":\n                return b(this, e, t, r);\n\n              case "ascii":\n                return m(this, e, t, r);\n\n              case "latin1":\n              case "binary":\n                return v(this, e, t, r);\n\n              case "base64":\n                return w(this, e, t, r);\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return _(this, e, t, r);\n\n              default:\n                if (o) throw new TypeError("Unknown encoding: " + n);\n                n = ("" + n).toLowerCase(), o = !0;\n            }\n          }, s.prototype.toJSON = function () {\n            return {\n              type: "Buffer",\n              data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n          };\n          var E = 4096;\n\n          function C(e, t, r) {\n            var n = "";\n            r = Math.min(e.length, r);\n\n            for (var i = t; i < r; ++i) n += String.fromCharCode(127 & e[i]);\n\n            return n;\n          }\n\n          function T(e, t, r) {\n            var n = "";\n            r = Math.min(e.length, r);\n\n            for (var i = t; i < r; ++i) n += String.fromCharCode(e[i]);\n\n            return n;\n          }\n\n          function x(e, t, r) {\n            var n = e.length;\n            (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);\n\n            for (var i = "", o = t; o < r; ++o) i += N(e[o]);\n\n            return i;\n          }\n\n          function A(e, t, r) {\n            for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);\n\n            return i;\n          }\n\n          function I(e, t, r) {\n            if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");\n            if (e + t > r) throw new RangeError("Trying to access beyond buffer length");\n          }\n\n          function P(e, t, r, n, i, o) {\n            if (!s.isBuffer(e)) throw new TypeError(\'"buffer" argument must be a Buffer instance\');\n            if (t > i || t < o) throw new RangeError(\'"value" argument is out of bounds\');\n            if (r + n > e.length) throw new RangeError("Index out of range");\n          }\n\n          function O(e, t, r, n, i, o) {\n            if (r + n > e.length) throw new RangeError("Index out of range");\n            if (r < 0) throw new RangeError("Index out of range");\n          }\n\n          function B(e, t, r, i, o) {\n            return t = +t, r >>>= 0, o || O(e, 0, r, 4), n.write(e, t, r, i, 23, 4), r + 4;\n          }\n\n          function R(e, t, r, i, o) {\n            return t = +t, r >>>= 0, o || O(e, 0, r, 8), n.write(e, t, r, i, 52, 8), r + 8;\n          }\n\n          s.prototype.slice = function (e, t) {\n            var r = this.length;\n            e = ~~e, t = void 0 === t ? r : ~~t, e < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), t < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), t < e && (t = e);\n            var n = this.subarray(e, t);\n            return n.__proto__ = s.prototype, n;\n          }, s.prototype.readUIntLE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;\n\n            return n;\n          }, s.prototype.readUIntBE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e + --t], i = 1; t > 0 && (i *= 256);) n += this[e + --t] * i;\n\n            return n;\n          }, s.prototype.readUInt8 = function (e, t) {\n            return e >>>= 0, t || I(e, 1, this.length), this[e];\n          }, s.prototype.readUInt16LE = function (e, t) {\n            return e >>>= 0, t || I(e, 2, this.length), this[e] | this[e + 1] << 8;\n          }, s.prototype.readUInt16BE = function (e, t) {\n            return e >>>= 0, t || I(e, 2, this.length), this[e] << 8 | this[e + 1];\n          }, s.prototype.readUInt32LE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];\n          }, s.prototype.readUInt32BE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n          }, s.prototype.readIntLE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) n += this[e + o] * i;\n\n            return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;\n          }, s.prototype.readIntBE = function (e, t, r) {\n            e >>>= 0, t >>>= 0, r || I(e, t, this.length);\n\n            for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256);) o += this[e + --n] * i;\n\n            return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;\n          }, s.prototype.readInt8 = function (e, t) {\n            return e >>>= 0, t || I(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];\n          }, s.prototype.readInt16LE = function (e, t) {\n            e >>>= 0, t || I(e, 2, this.length);\n            var r = this[e] | this[e + 1] << 8;\n            return 32768 & r ? 4294901760 | r : r;\n          }, s.prototype.readInt16BE = function (e, t) {\n            e >>>= 0, t || I(e, 2, this.length);\n            var r = this[e + 1] | this[e] << 8;\n            return 32768 & r ? 4294901760 | r : r;\n          }, s.prototype.readInt32LE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n          }, s.prototype.readInt32BE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n          }, s.prototype.readFloatLE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), n.read(this, e, !0, 23, 4);\n          }, s.prototype.readFloatBE = function (e, t) {\n            return e >>>= 0, t || I(e, 4, this.length), n.read(this, e, !1, 23, 4);\n          }, s.prototype.readDoubleLE = function (e, t) {\n            return e >>>= 0, t || I(e, 8, this.length), n.read(this, e, !0, 52, 8);\n          }, s.prototype.readDoubleBE = function (e, t) {\n            return e >>>= 0, t || I(e, 8, this.length), n.read(this, e, !1, 52, 8);\n          }, s.prototype.writeUIntLE = function (e, t, r, n) {\n            (e = +e, t >>>= 0, r >>>= 0, n) || P(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);\n            var i = 1,\n                o = 0;\n\n            for (this[t] = 255 & e; ++o < r && (i *= 256);) this[t + o] = e / i & 255;\n\n            return t + r;\n          }, s.prototype.writeUIntBE = function (e, t, r, n) {\n            (e = +e, t >>>= 0, r >>>= 0, n) || P(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);\n            var i = r - 1,\n                o = 1;\n\n            for (this[t + i] = 255 & e; --i >= 0 && (o *= 256);) this[t + i] = e / o & 255;\n\n            return t + r;\n          }, s.prototype.writeUInt8 = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;\n          }, s.prototype.writeUInt16LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;\n          }, s.prototype.writeUInt16BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;\n          }, s.prototype.writeUInt32LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;\n          }, s.prototype.writeUInt32BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;\n          }, s.prototype.writeIntLE = function (e, t, r, n) {\n            if (e = +e, t >>>= 0, !n) {\n              var i = Math.pow(2, 8 * r - 1);\n              P(this, e, t, r, i - 1, -i);\n            }\n\n            var o = 0,\n                s = 1,\n                a = 0;\n\n            for (this[t] = 255 & e; ++o < r && (s *= 256);) e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n\n            return t + r;\n          }, s.prototype.writeIntBE = function (e, t, r, n) {\n            if (e = +e, t >>>= 0, !n) {\n              var i = Math.pow(2, 8 * r - 1);\n              P(this, e, t, r, i - 1, -i);\n            }\n\n            var o = r - 1,\n                s = 1,\n                a = 0;\n\n            for (this[t + o] = 255 & e; --o >= 0 && (s *= 256);) e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n\n            return t + r;\n          }, s.prototype.writeInt8 = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;\n          }, s.prototype.writeInt16LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;\n          }, s.prototype.writeInt16BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;\n          }, s.prototype.writeInt32LE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;\n          }, s.prototype.writeInt32BE = function (e, t, r) {\n            return e = +e, t >>>= 0, r || P(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;\n          }, s.prototype.writeFloatLE = function (e, t, r) {\n            return B(this, e, t, !0, r);\n          }, s.prototype.writeFloatBE = function (e, t, r) {\n            return B(this, e, t, !1, r);\n          }, s.prototype.writeDoubleLE = function (e, t, r) {\n            return R(this, e, t, !0, r);\n          }, s.prototype.writeDoubleBE = function (e, t, r) {\n            return R(this, e, t, !1, r);\n          }, s.prototype.copy = function (e, t, r, n) {\n            if (!s.isBuffer(e)) throw new TypeError("argument should be a Buffer");\n            if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r) return 0;\n            if (0 === e.length || 0 === this.length) return 0;\n            if (t < 0) throw new RangeError("targetStart out of bounds");\n            if (r < 0 || r >= this.length) throw new RangeError("Index out of range");\n            if (n < 0) throw new RangeError("sourceEnd out of bounds");\n            n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);\n            var i = n - r;\n            if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);else if (this === e && r < t && t < n) for (var o = i - 1; o >= 0; --o) e[o + t] = this[o + r];else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);\n            return i;\n          }, s.prototype.fill = function (e, t, r, n) {\n            if ("string" == typeof e) {\n              if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");\n              if ("string" == typeof n && !s.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);\n\n              if (1 === e.length) {\n                var i = e.charCodeAt(0);\n                ("utf8" === n && i < 128 || "latin1" === n) && (e = i);\n              }\n            } else "number" == typeof e && (e &= 255);\n\n            if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");\n            if (r <= t) return this;\n            var o;\n            if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) this[o] = e;else {\n              var a = s.isBuffer(e) ? e : s.from(e, n),\n                  l = a.length;\n              if (0 === l) throw new TypeError(\'The value "\' + e + \'" is invalid for argument "value"\');\n\n              for (o = 0; o < r - t; ++o) this[o + t] = a[o % l];\n            }\n            return this;\n          };\n          var M = /[^+/0-9A-Za-z-_]/g;\n\n          function N(e) {\n            return e < 16 ? "0" + e.toString(16) : e.toString(16);\n          }\n\n          function L(e, t) {\n            var r;\n            t = t || 1 / 0;\n\n            for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {\n              if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {\n                if (!i) {\n                  if (r > 56319) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                  }\n\n                  if (s + 1 === n) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                  }\n\n                  i = r;\n                  continue;\n                }\n\n                if (r < 56320) {\n                  (t -= 3) > -1 && o.push(239, 191, 189), i = r;\n                  continue;\n                }\n\n                r = 65536 + (i - 55296 << 10 | r - 56320);\n              } else i && (t -= 3) > -1 && o.push(239, 191, 189);\n\n              if (i = null, r < 128) {\n                if ((t -= 1) < 0) break;\n                o.push(r);\n              } else if (r < 2048) {\n                if ((t -= 2) < 0) break;\n                o.push(r >> 6 | 192, 63 & r | 128);\n              } else if (r < 65536) {\n                if ((t -= 3) < 0) break;\n                o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);\n              } else {\n                if (!(r < 1114112)) throw new Error("Invalid code point");\n                if ((t -= 4) < 0) break;\n                o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);\n              }\n            }\n\n            return o;\n          }\n\n          function j(e) {\n            return t.toByteArray(function (e) {\n              if ((e = (e = e.split("=")[0]).trim().replace(M, "")).length < 2) return "";\n\n              for (; e.length % 4 != 0;) e += "=";\n\n              return e;\n            }(e));\n          }\n\n          function U(e, t, r, n) {\n            for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) t[i + r] = e[i];\n\n            return i;\n          }\n\n          function q(e, t) {\n            return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;\n          }\n\n          function D(e) {\n            return e != e;\n          }\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "base64-js": 13,\n      buffer: 17,\n      ieee754: 23\n    }],\n    18: [function (e, t, r) {\n      (function (n) {\n        (function () {\n          r.formatArgs = function (e) {\n            if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + t.exports.humanize(this.diff), !this.useColors) return;\n            const r = "color: " + this.color;\n            e.splice(1, 0, r, "color: inherit");\n            let n = 0,\n                i = 0;\n            e[0].replace(/%[a-zA-Z%]/g, e => {\n              "%%" !== e && "%c" === e && (i = ++n);\n            }), e.splice(i, 0, r);\n          }, r.save = function (e) {\n            try {\n              e ? r.storage.setItem("debug", e) : r.storage.removeItem("debug");\n            } catch (e) {}\n          }, r.load = function () {\n            let e;\n\n            try {\n              e = r.storage.getItem("debug");\n            } catch (e) {}\n\n            !e && void 0 !== n && "env" in n && (e = n.env.DEBUG);\n            return e;\n          }, r.useColors = function () {\n            if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return !0;\n            if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) return !1;\n            return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n          }, r.storage = function () {\n            try {\n              return localStorage;\n            } catch (e) {}\n          }(), r.destroy = (() => {\n            let e = !1;\n            return () => {\n              e || (e = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));\n            };\n          })(), r.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], r.log = console.debug || console.log || (() => {}), t.exports = e("./common")(r);\n          const {\n            formatters: i\n          } = t.exports;\n\n          i.j = function (e) {\n            try {\n              return JSON.stringify(e);\n            } catch (e) {\n              return "[UnexpectedJSONParseError]: " + e.message;\n            }\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./common": 19,\n      _process: 50\n    }],\n    19: [function (e, t, r) {\n      t.exports = function (t) {\n        function r(e) {\n          let t,\n              i,\n              o,\n              s = null;\n\n          function a(...e) {\n            if (!a.enabled) return;\n            const n = a,\n                  i = Number(new Date()),\n                  o = i - (t || i);\n            n.diff = o, n.prev = t, n.curr = i, t = i, e[0] = r.coerce(e[0]), "string" != typeof e[0] && e.unshift("%O");\n            let s = 0;\n            e[0] = e[0].replace(/%([a-zA-Z%])/g, (t, i) => {\n              if ("%%" === t) return "%";\n              s++;\n              const o = r.formatters[i];\n\n              if ("function" == typeof o) {\n                const r = e[s];\n                t = o.call(n, r), e.splice(s, 1), s--;\n              }\n\n              return t;\n            }), r.formatArgs.call(n, e), (n.log || r.log).apply(n, e);\n          }\n\n          return a.namespace = e, a.useColors = r.useColors(), a.color = r.selectColor(e), a.extend = n, a.destroy = r.destroy, Object.defineProperty(a, "enabled", {\n            enumerable: !0,\n            configurable: !1,\n            get: () => null !== s ? s : (i !== r.namespaces && (i = r.namespaces, o = r.enabled(e)), o),\n            set: e => {\n              s = e;\n            }\n          }), "function" == typeof r.init && r.init(a), a;\n        }\n\n        function n(e, t) {\n          const n = r(this.namespace + (void 0 === t ? ":" : t) + e);\n          return n.log = this.log, n;\n        }\n\n        function i(e) {\n          return e.toString().substring(2, e.toString().length - 2).replace(/\\.\\*\\?$/, "*");\n        }\n\n        return r.debug = r, r.default = r, r.coerce = function (e) {\n          return e instanceof Error ? e.stack || e.message : e;\n        }, r.disable = function () {\n          const e = [...r.names.map(i), ...r.skips.map(i).map(e => "-" + e)].join(",");\n          return r.enable(""), e;\n        }, r.enable = function (e) {\n          let t;\n          r.save(e), r.namespaces = e, r.names = [], r.skips = [];\n          const n = ("string" == typeof e ? e : "").split(/[\\s,]+/),\n                i = n.length;\n\n          for (t = 0; t < i; t++) n[t] && ("-" === (e = n[t].replace(/\\*/g, ".*?"))[0] ? r.skips.push(new RegExp("^" + e.substr(1) + "$")) : r.names.push(new RegExp("^" + e + "$")));\n        }, r.enabled = function (e) {\n          if ("*" === e[e.length - 1]) return !0;\n          let t, n;\n\n          for (t = 0, n = r.skips.length; t < n; t++) if (r.skips[t].test(e)) return !1;\n\n          for (t = 0, n = r.names.length; t < n; t++) if (r.names[t].test(e)) return !0;\n\n          return !1;\n        }, r.humanize = e("ms"), r.destroy = function () {\n          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");\n        }, Object.keys(t).forEach(e => {\n          r[e] = t[e];\n        }), r.names = [], r.skips = [], r.formatters = {}, r.selectColor = function (e) {\n          let t = 0;\n\n          for (let r = 0; r < e.length; r++) t = (t << 5) - t + e.charCodeAt(r), t |= 0;\n\n          return r.colors[Math.abs(t) % r.colors.length];\n        }, r.enable(r.load()), r;\n      };\n    }, {\n      ms: 45\n    }],\n    20: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          var i = e("readable-stream"),\n              o = e("end-of-stream"),\n              s = e("inherits"),\n              a = e("stream-shift"),\n              l = n.from && n.from !== Uint8Array.from ? n.from([0]) : new n([0]),\n              u = function (e, t) {\n            e._corked ? e.once("uncork", t) : t();\n          },\n              c = function (e, t) {\n            return function (r) {\n              r ? function (e, t) {\n                e._autoDestroy && e.destroy(t);\n              }(e, "premature close" === r.message ? null : r) : t && !e._ended && e.end();\n            };\n          },\n              h = function () {},\n              f = function (e, t, r) {\n            if (!(this instanceof f)) return new f(e, t, r);\n            i.Duplex.call(this, r), this._writable = null, this._readable = null, this._readable2 = null, this._autoDestroy = !r || !1 !== r.autoDestroy, this._forwardDestroy = !r || !1 !== r.destroy, this._forwardEnd = !r || !1 !== r.end, this._corked = 1, this._ondrain = null, this._drained = !1, this._forwarding = !1, this._unwrite = null, this._unread = null, this._ended = !1, this.destroyed = !1, e && this.setWritable(e), t && this.setReadable(t);\n          };\n\n          s(f, i.Duplex), f.obj = function (e, t, r) {\n            return r || (r = {}), r.objectMode = !0, r.highWaterMark = 16, new f(e, t, r);\n          }, f.prototype.cork = function () {\n            1 == ++this._corked && this.emit("cork");\n          }, f.prototype.uncork = function () {\n            this._corked && 0 == --this._corked && this.emit("uncork");\n          }, f.prototype.setWritable = function (e) {\n            if (this._unwrite && this._unwrite(), this.destroyed) e && e.destroy && e.destroy();else if (null !== e && !1 !== e) {\n              var t = this,\n                  n = o(e, {\n                writable: !0,\n                readable: !1\n              }, c(this, this._forwardEnd)),\n                  i = function () {\n                var e = t._ondrain;\n                t._ondrain = null, e && e();\n              };\n\n              this._unwrite && r.nextTick(i), this._writable = e, this._writable.on("drain", i), this._unwrite = function () {\n                t._writable.removeListener("drain", i), n();\n              }, this.uncork();\n            } else this.end();\n          }, f.prototype.setReadable = function (e) {\n            if (this._unread && this._unread(), this.destroyed) e && e.destroy && e.destroy();else {\n              if (null === e || !1 === e) return this.push(null), void this.resume();\n\n              var t,\n                  r = this,\n                  n = o(e, {\n                writable: !1,\n                readable: !0\n              }, c(this)),\n                  s = function () {\n                r._forward();\n              },\n                  a = function () {\n                r.push(null);\n              };\n\n              this._drained = !0, this._readable = e, this._readable2 = e._readableState ? e : (t = e, new i.Readable({\n                objectMode: !0,\n                highWaterMark: 16\n              }).wrap(t)), this._readable2.on("readable", s), this._readable2.on("end", a), this._unread = function () {\n                r._readable2.removeListener("readable", s), r._readable2.removeListener("end", a), n();\n              }, this._forward();\n            }\n          }, f.prototype._read = function () {\n            this._drained = !0, this._forward();\n          }, f.prototype._forward = function () {\n            if (!this._forwarding && this._readable2 && this._drained) {\n              var e;\n\n              for (this._forwarding = !0; this._drained && null !== (e = a(this._readable2));) this.destroyed || (this._drained = this.push(e));\n\n              this._forwarding = !1;\n            }\n          }, f.prototype.destroy = function (e, t) {\n            if (t || (t = h), this.destroyed) return t(null);\n            this.destroyed = !0;\n            var n = this;\n            r.nextTick(function () {\n              n._destroy(e), t(null);\n            });\n          }, f.prototype._destroy = function (e) {\n            if (e) {\n              var t = this._ondrain;\n              this._ondrain = null, t ? t(e) : this.emit("error", e);\n            }\n\n            this._forwardDestroy && (this._readable && this._readable.destroy && this._readable.destroy(), this._writable && this._writable.destroy && this._writable.destroy()), this.emit("close");\n          }, f.prototype._write = function (e, t, r) {\n            if (!this.destroyed) return this._corked ? u(this, this._write.bind(this, e, t, r)) : e === l ? this._finish(r) : this._writable ? void (!1 === this._writable.write(e) ? this._ondrain = r : this.destroyed || r()) : r();\n          }, f.prototype._finish = function (e) {\n            var t = this;\n            this.emit("preend"), u(this, function () {\n              var r, n;\n              r = t._forwardEnd && t._writable, n = function () {\n                !1 === t._writableState.prefinished && (t._writableState.prefinished = !0), t.emit("prefinish"), u(t, e);\n              }, r ? r._writableState && r._writableState.finished ? n() : r._writableState ? r.end(n) : (r.end(), n()) : n();\n            });\n          }, f.prototype.end = function (e, t, r) {\n            return "function" == typeof e ? this.end(null, null, e) : "function" == typeof t ? this.end(e, null, t) : (this._ended = !0, e && this.write(e), this._writableState.ending || this._writableState.destroyed || this.write(l), i.Writable.prototype.end.call(this, r));\n          }, t.exports = f;\n        }).call(this);\n      }).call(this, e("_process"), e("buffer").Buffer);\n    }, {\n      _process: 50,\n      buffer: 17,\n      "end-of-stream": 21,\n      inherits: 24,\n      "readable-stream": 69,\n      "stream-shift": 74\n    }],\n    21: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          var n = e("once"),\n              i = function () {},\n              o = function (e, t, s) {\n            if ("function" == typeof t) return o(e, null, t);\n            t || (t = {}), s = n(s || i);\n\n            var a = e._writableState,\n                l = e._readableState,\n                u = t.readable || !1 !== t.readable && e.readable,\n                c = t.writable || !1 !== t.writable && e.writable,\n                h = !1,\n                f = function () {\n              e.writable || p();\n            },\n                p = function () {\n              c = !1, u || s.call(e);\n            },\n                d = function () {\n              u = !1, c || s.call(e);\n            },\n                g = function (t) {\n              s.call(e, t ? new Error("exited with error code: " + t) : null);\n            },\n                y = function (t) {\n              s.call(e, t);\n            },\n                b = function () {\n              r.nextTick(m);\n            },\n                m = function () {\n              if (!h) return (!u || l && l.ended && !l.destroyed) && (!c || a && a.ended && !a.destroyed) ? void 0 : s.call(e, new Error("premature close"));\n            },\n                v = function () {\n              e.req.on("finish", p);\n            };\n\n            return !function (e) {\n              return e.setHeader && "function" == typeof e.abort;\n            }(e) ? c && !a && (e.on("end", f), e.on("close", f)) : (e.on("complete", p), e.on("abort", b), e.req ? v() : e.on("request", v)), function (e) {\n              return e.stdio && Array.isArray(e.stdio) && 3 === e.stdio.length;\n            }(e) && e.on("exit", g), e.on("end", d), e.on("finish", p), !1 !== t.error && e.on("error", y), e.on("close", b), function () {\n              h = !0, e.removeListener("complete", p), e.removeListener("abort", b), e.removeListener("request", v), e.req && e.req.removeListener("finish", p), e.removeListener("end", f), e.removeListener("close", f), e.removeListener("finish", p), e.removeListener("exit", g), e.removeListener("end", d), e.removeListener("error", y), e.removeListener("close", b);\n            };\n          };\n\n          t.exports = o;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50,\n      once: 48\n    }],\n    22: [function (e, t, r) {\n      var n = Object.create || function (e) {\n        var t = function () {};\n\n        return t.prototype = e, new t();\n      },\n          i = Object.keys || function (e) {\n        var t = [];\n\n        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);\n\n        return r;\n      },\n          o = Function.prototype.bind || function (e) {\n        var t = this;\n        return function () {\n          return t.apply(e, arguments);\n        };\n      };\n\n      function s() {\n        this._events && Object.prototype.hasOwnProperty.call(this, "_events") || (this._events = n(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n      }\n\n      t.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._maxListeners = void 0;\n      var a,\n          l = 10;\n\n      try {\n        var u = {};\n        Object.defineProperty && Object.defineProperty(u, "x", {\n          value: 0\n        }), a = 0 === u.x;\n      } catch (e) {\n        a = !1;\n      }\n\n      function c(e) {\n        return void 0 === e._maxListeners ? s.defaultMaxListeners : e._maxListeners;\n      }\n\n      function h(e, t, r, i) {\n        var o, s, a;\n        if ("function" != typeof r) throw new TypeError(\'"listener" argument must be a function\');\n\n        if ((s = e._events) ? (s.newListener && (e.emit("newListener", t, r.listener ? r.listener : r), s = e._events), a = s[t]) : (s = e._events = n(null), e._eventsCount = 0), a) {\n          if ("function" == typeof a ? a = s[t] = i ? [r, a] : [a, r] : i ? a.unshift(r) : a.push(r), !a.warned && (o = c(e)) && o > 0 && a.length > o) {\n            a.warned = !0;\n            var l = new Error("Possible EventEmitter memory leak detected. " + a.length + \' "\' + String(t) + \'" listeners added. Use emitter.setMaxListeners() to increase limit.\');\n            l.name = "MaxListenersExceededWarning", l.emitter = e, l.type = t, l.count = a.length, "object" == typeof console && console.warn && console.warn("%s: %s", l.name, l.message);\n          }\n        } else a = s[t] = r, ++e._eventsCount;\n\n        return e;\n      }\n\n      function f() {\n        if (!this.fired) switch (this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length) {\n          case 0:\n            return this.listener.call(this.target);\n\n          case 1:\n            return this.listener.call(this.target, arguments[0]);\n\n          case 2:\n            return this.listener.call(this.target, arguments[0], arguments[1]);\n\n          case 3:\n            return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);\n\n          default:\n            for (var e = new Array(arguments.length), t = 0; t < e.length; ++t) e[t] = arguments[t];\n\n            this.listener.apply(this.target, e);\n        }\n      }\n\n      function p(e, t, r) {\n        var n = {\n          fired: !1,\n          wrapFn: void 0,\n          target: e,\n          type: t,\n          listener: r\n        },\n            i = o.call(f, n);\n        return i.listener = r, n.wrapFn = i, i;\n      }\n\n      function d(e, t, r) {\n        var n = e._events;\n        if (!n) return [];\n        var i = n[t];\n        return i ? "function" == typeof i ? r ? [i.listener || i] : [i] : r ? function (e) {\n          for (var t = new Array(e.length), r = 0; r < t.length; ++r) t[r] = e[r].listener || e[r];\n\n          return t;\n        }(i) : y(i, i.length) : [];\n      }\n\n      function g(e) {\n        var t = this._events;\n\n        if (t) {\n          var r = t[e];\n          if ("function" == typeof r) return 1;\n          if (r) return r.length;\n        }\n\n        return 0;\n      }\n\n      function y(e, t) {\n        for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];\n\n        return r;\n      }\n\n      a ? Object.defineProperty(s, "defaultMaxListeners", {\n        enumerable: !0,\n        get: function () {\n          return l;\n        },\n        set: function (e) {\n          if ("number" != typeof e || e < 0 || e != e) throw new TypeError(\'"defaultMaxListeners" must be a positive number\');\n          l = e;\n        }\n      }) : s.defaultMaxListeners = l, s.prototype.setMaxListeners = function (e) {\n        if ("number" != typeof e || e < 0 || isNaN(e)) throw new TypeError(\'"n" argument must be a positive number\');\n        return this._maxListeners = e, this;\n      }, s.prototype.getMaxListeners = function () {\n        return c(this);\n      }, s.prototype.emit = function (e) {\n        var t,\n            r,\n            n,\n            i,\n            o,\n            s,\n            a = "error" === e;\n        if (s = this._events) a = a && null == s.error;else if (!a) return !1;\n\n        if (a) {\n          if (arguments.length > 1 && (t = arguments[1]), t instanceof Error) throw t;\n          var l = new Error(\'Unhandled "error" event. (\' + t + ")");\n          throw l.context = t, l;\n        }\n\n        if (!(r = s[e])) return !1;\n        var u = "function" == typeof r;\n\n        switch (n = arguments.length) {\n          case 1:\n            !function (e, t, r) {\n              if (t) e.call(r);else for (var n = e.length, i = y(e, n), o = 0; o < n; ++o) i[o].call(r);\n            }(r, u, this);\n            break;\n\n          case 2:\n            !function (e, t, r, n) {\n              if (t) e.call(r, n);else for (var i = e.length, o = y(e, i), s = 0; s < i; ++s) o[s].call(r, n);\n            }(r, u, this, arguments[1]);\n            break;\n\n          case 3:\n            !function (e, t, r, n, i) {\n              if (t) e.call(r, n, i);else for (var o = e.length, s = y(e, o), a = 0; a < o; ++a) s[a].call(r, n, i);\n            }(r, u, this, arguments[1], arguments[2]);\n            break;\n\n          case 4:\n            !function (e, t, r, n, i, o) {\n              if (t) e.call(r, n, i, o);else for (var s = e.length, a = y(e, s), l = 0; l < s; ++l) a[l].call(r, n, i, o);\n            }(r, u, this, arguments[1], arguments[2], arguments[3]);\n            break;\n\n          default:\n            for (i = new Array(n - 1), o = 1; o < n; o++) i[o - 1] = arguments[o];\n\n            !function (e, t, r, n) {\n              if (t) e.apply(r, n);else for (var i = e.length, o = y(e, i), s = 0; s < i; ++s) o[s].apply(r, n);\n            }(r, u, this, i);\n        }\n\n        return !0;\n      }, s.prototype.addListener = function (e, t) {\n        return h(this, e, t, !1);\n      }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function (e, t) {\n        return h(this, e, t, !0);\n      }, s.prototype.once = function (e, t) {\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        return this.on(e, p(this, e, t)), this;\n      }, s.prototype.prependOnceListener = function (e, t) {\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        return this.prependListener(e, p(this, e, t)), this;\n      }, s.prototype.removeListener = function (e, t) {\n        var r, i, o, s, a;\n        if ("function" != typeof t) throw new TypeError(\'"listener" argument must be a function\');\n        if (!(i = this._events)) return this;\n        if (!(r = i[e])) return this;\n        if (r === t || r.listener === t) 0 == --this._eventsCount ? this._events = n(null) : (delete i[e], i.removeListener && this.emit("removeListener", e, r.listener || t));else if ("function" != typeof r) {\n          for (o = -1, s = r.length - 1; s >= 0; s--) if (r[s] === t || r[s].listener === t) {\n            a = r[s].listener, o = s;\n            break;\n          }\n\n          if (o < 0) return this;\n          0 === o ? r.shift() : function (e, t) {\n            for (var r = t, n = r + 1, i = e.length; n < i; r += 1, n += 1) e[r] = e[n];\n\n            e.pop();\n          }(r, o), 1 === r.length && (i[e] = r[0]), i.removeListener && this.emit("removeListener", e, a || t);\n        }\n        return this;\n      }, s.prototype.removeAllListeners = function (e) {\n        var t, r, o;\n        if (!(r = this._events)) return this;\n        if (!r.removeListener) return 0 === arguments.length ? (this._events = n(null), this._eventsCount = 0) : r[e] && (0 == --this._eventsCount ? this._events = n(null) : delete r[e]), this;\n\n        if (0 === arguments.length) {\n          var s,\n              a = i(r);\n\n          for (o = 0; o < a.length; ++o) "removeListener" !== (s = a[o]) && this.removeAllListeners(s);\n\n          return this.removeAllListeners("removeListener"), this._events = n(null), this._eventsCount = 0, this;\n        }\n\n        if ("function" == typeof (t = r[e])) this.removeListener(e, t);else if (t) for (o = t.length - 1; o >= 0; o--) this.removeListener(e, t[o]);\n        return this;\n      }, s.prototype.listeners = function (e) {\n        return d(this, e, !0);\n      }, s.prototype.rawListeners = function (e) {\n        return d(this, e, !1);\n      }, s.listenerCount = function (e, t) {\n        return "function" == typeof e.listenerCount ? e.listenerCount(t) : g.call(e, t);\n      }, s.prototype.listenerCount = g, s.prototype.eventNames = function () {\n        return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n      };\n    }, {}],\n    23: [function (e, t, r) {\n      r.read = function (e, t, r, n, i) {\n        var o,\n            s,\n            a = 8 * i - n - 1,\n            l = (1 << a) - 1,\n            u = l >> 1,\n            c = -7,\n            h = r ? i - 1 : 0,\n            f = r ? -1 : 1,\n            p = e[t + h];\n\n        for (h += f, o = p & (1 << -c) - 1, p >>= -c, c += a; c > 0; o = 256 * o + e[t + h], h += f, c -= 8);\n\n        for (s = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; s = 256 * s + e[t + h], h += f, c -= 8);\n\n        if (0 === o) o = 1 - u;else {\n          if (o === l) return s ? NaN : 1 / 0 * (p ? -1 : 1);\n          s += Math.pow(2, n), o -= u;\n        }\n        return (p ? -1 : 1) * s * Math.pow(2, o - n);\n      }, r.write = function (e, t, r, n, i, o) {\n        var s,\n            a,\n            l,\n            u = 8 * o - i - 1,\n            c = (1 << u) - 1,\n            h = c >> 1,\n            f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,\n            p = n ? 0 : o - 1,\n            d = n ? 1 : -1,\n            g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;\n\n        for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = c) : (s = Math.floor(Math.log(t) / Math.LN2), t * (l = Math.pow(2, -s)) < 1 && (s--, l *= 2), (t += s + h >= 1 ? f / l : f * Math.pow(2, 1 - h)) * l >= 2 && (s++, l /= 2), s + h >= c ? (a = 0, s = c) : s + h >= 1 ? (a = (t * l - 1) * Math.pow(2, i), s += h) : (a = t * Math.pow(2, h - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + p] = 255 & a, p += d, a /= 256, i -= 8);\n\n        for (s = s << i | a, u += i; u > 0; e[r + p] = 255 & s, p += d, s /= 256, u -= 8);\n\n        e[r + p - d] |= 128 * g;\n      };\n    }, {}],\n    24: [function (e, t, r) {\n      "function" == typeof Object.create ? t.exports = function (e, t) {\n        t && (e.super_ = t, e.prototype = Object.create(t.prototype, {\n          constructor: {\n            value: e,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n          }\n        }));\n      } : t.exports = function (e, t) {\n        if (t) {\n          e.super_ = t;\n\n          var r = function () {};\n\n          r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;\n        }\n      };\n    }, {}],\n    25: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n\n      var n = function () {\n        function e(e, t) {\n          this.color = !0, this.key = void 0, this.value = void 0, this.parent = void 0, this.brother = void 0, this.leftChild = void 0, this.rightChild = void 0, this.key = e, this.value = t;\n        }\n\n        return e.prototype.rotateLeft = function () {\n          var e = this.parent,\n              t = this.brother,\n              r = this.leftChild,\n              n = this.rightChild;\n          if (!n) throw new Error("unknown error");\n          var i = n.leftChild,\n              o = n.rightChild;\n          return e && (e.leftChild === this ? e.leftChild = n : e.rightChild === this && (e.rightChild = n)), n.parent = e, n.brother = t, n.leftChild = this, n.rightChild = o, t && (t.brother = n), this.parent = n, this.brother = o, this.leftChild = r, this.rightChild = i, o && (o.parent = n, o.brother = this), r && (r.parent = this, r.brother = i), i && (i.parent = this, i.brother = r), n;\n        }, e.prototype.rotateRight = function () {\n          var e = this.parent,\n              t = this.brother,\n              r = this.leftChild;\n          if (!r) throw new Error("unknown error");\n          var n = this.rightChild,\n              i = r.leftChild,\n              o = r.rightChild;\n          return e && (e.leftChild === this ? e.leftChild = r : e.rightChild === this && (e.rightChild = r)), r.parent = e, r.brother = t, r.leftChild = i, r.rightChild = this, t && (t.brother = r), i && (i.parent = r, i.brother = this), this.parent = r, this.brother = i, this.leftChild = o, this.rightChild = n, o && (o.parent = this, o.brother = n), n && (n.parent = this, n.brother = o), r;\n        }, e.prototype.remove = function () {\n          if (this.leftChild || this.rightChild) throw new Error("can only remove leaf node");\n          this.parent && (this === this.parent.leftChild ? this.parent.leftChild = void 0 : this === this.parent.rightChild && (this.parent.rightChild = void 0)), this.brother && (this.brother.brother = void 0), this.key = void 0, this.value = void 0, this.parent = void 0, this.brother = void 0;\n        }, e.TreeNodeColorType = {\n          red: !0,\n          black: !1\n        }, e;\n      }();\n\n      Object.freeze(n), r.default = n;\n    }, {}],\n    26: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      };\n\n      function i(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = [],\n            o = 0,\n            s = 0,\n            a = 0,\n            l = 0,\n            u = 0,\n            c = 0;\n        this.size = function () {\n          return c;\n        }, this.empty = function () {\n          return 0 === c;\n        }, this.clear = function () {\n          o = a = s = l = u = c = 0, f.call(this, i.bucketSize), c = 0;\n        }, this.front = function () {\n          return r[o][s];\n        }, this.back = function () {\n          return r[a][l];\n        }, this.forEach = function (e) {\n          if (!this.empty()) {\n            var t = 0;\n\n            if (o !== a) {\n              for (u = s; u < i.bucketSize; ++u) e(r[o][u], t++);\n\n              for (u = o + 1; u < a; ++u) for (var n = 0; n < i.bucketSize; ++n) e(r[u][n], t++);\n\n              for (u = 0; u <= l; ++u) e(r[a][u], t++);\n            } else for (var u = s; u <= l; ++u) e(r[o][u], t++);\n          }\n        };\n\n        var h = function (e) {\n          var t = o * i.bucketSize + s,\n              r = t + e,\n              n = a * i.bucketSize + l;\n          if (r < t || r > n) throw new Error("pos should more than 0 and less than queue\'s size");\n          return {\n            curNodeBucketIndex: Math.floor(r / i.bucketSize),\n            curNodePointerIndex: r % i.bucketSize\n          };\n        };\n\n        this.getElementByPos = function (e) {\n          var t = h(e),\n              n = t.curNodeBucketIndex,\n              i = t.curNodePointerIndex;\n          return r[n][i];\n        }, this.eraseElementByPos = function (e) {\n          var t = this;\n          if (e < 0 || e > c) throw new Error("pos should more than 0 and less than queue\'s size");\n          if (0 === e) this.popFront();else if (e === this.size()) this.popBack();else {\n            for (var r = [], n = e + 1; n < c; ++n) r.push(this.getElementByPos(n));\n\n            this.cut(e), this.popBack(), r.forEach(function (e) {\n              return t.pushBack(e);\n            });\n          }\n        }, this.eraseElementByValue = function (e) {\n          if (!this.empty()) {\n            var t = [];\n            this.forEach(function (r) {\n              r !== e && t.push(r);\n            });\n\n            for (var r = t.length, n = 0; n < r; ++n) this.setElementByPos(n, t[n]);\n\n            this.cut(r - 1);\n          }\n        };\n\n        var f = function (e) {\n          for (var t = [], n = e * i.sigma, h = Math.max(Math.ceil(n / i.bucketSize), 2), f = 0; f < h; ++f) t.push(new Array(i.bucketSize));\n\n          var p = Math.ceil(e / i.bucketSize),\n              d = Math.floor(h / 2) - Math.floor(p / 2),\n              g = d,\n              y = 0;\n          if (this.size()) for (f = 0; f < p; ++f) {\n            for (var b = 0; b < i.bucketSize; ++b) if (t[d + f][b] = this.front(), this.popFront(), this.empty()) {\n              g = d + f, y = b;\n              break;\n            }\n\n            if (this.empty()) break;\n          }\n          r = t, o = d, s = 0, a = g, l = y, u = h, c = e;\n        };\n\n        this.pushBack = function (e) {\n          this.empty() || (a === u - 1 && l === i.bucketSize - 1 && f.call(this, this.size()), l < i.bucketSize - 1 ? ++l : a < u - 1 && (++a, l = 0)), ++c, r[a][l] = e;\n        }, this.popBack = function () {\n          this.empty() || (1 !== this.size() && (l > 0 ? --l : o < a && (--a, l = i.bucketSize - 1)), c > 0 && --c);\n        }, this.setElementByPos = function (e, t) {\n          var n = h(e),\n              i = n.curNodeBucketIndex,\n              o = n.curNodePointerIndex;\n          r[i][o] = t;\n        }, this.insert = function (e, t, r) {\n          var n = this;\n          if (void 0 === r && (r = 1), 0 === e) for (; r--;) this.pushFront(t);else if (e === this.size()) for (; r--;) this.pushBack(t);else {\n            for (var i = [], o = e; o < c; ++o) i.push(this.getElementByPos(o));\n\n            this.cut(e - 1);\n\n            for (o = 0; o < r; ++o) this.pushBack(t);\n\n            i.forEach(function (e) {\n              return n.pushBack(e);\n            });\n          }\n        }, this.find = function (e) {\n          if (o === a) {\n            for (var t = s; t <= l; ++t) if (r[o][t] === e) return !0;\n\n            return !1;\n          }\n\n          for (t = s; t < i.bucketSize; ++t) if (r[o][t] === e) return !0;\n\n          for (t = o + 1; t < a; ++t) for (var n = 0; n < i.bucketSize; ++n) if (r[t][n] === e) return !0;\n\n          for (t = 0; t <= l; ++t) if (r[a][t] === e) return !0;\n\n          return !1;\n        }, this.reverse = function () {\n          for (var e = 0, t = c - 1; e < t;) {\n            var r = this.getElementByPos(e);\n            this.setElementByPos(e, this.getElementByPos(t)), this.setElementByPos(t, r), ++e, --t;\n          }\n        }, this.unique = function () {\n          if (!this.empty()) {\n            var e = [],\n                t = this.front();\n            this.forEach(function (r, n) {\n              0 !== n && r === t || (e.push(r), t = r);\n            });\n\n            for (var r = 0; r < c; ++r) this.setElementByPos(r, e[r]);\n\n            this.cut(e.length - 1);\n          }\n        }, this.sort = function (e) {\n          var t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          }), t.sort(e);\n\n          for (var r = 0; r < c; ++r) this.setElementByPos(r, t[r]);\n        }, this.pushFront = function (e) {\n          this.empty() || (0 === o && 0 === s && f.call(this, this.size()), s > 0 ? --s : o > 0 && (--o, s = i.bucketSize - 1)), ++c, r[o][s] = e;\n        }, this.popFront = function () {\n          this.empty() || (1 !== this.size() && (s < i.bucketSize - 1 ? ++s : o < a && (++o, s = 0)), c > 0 && --c);\n        }, this.shrinkToFit = function () {\n          var e = this,\n              t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          });\n          var n = t.length;\n          r = [];\n\n          for (var o = Math.ceil(n / i.bucketSize), s = 0; s < o; ++s) r.push(new Array(i.bucketSize));\n\n          this.clear(), t.forEach(function (t) {\n            return e.pushBack(t);\n          });\n        }, this.cut = function (e) {\n          if (e < 0) this.clear();else {\n            var t = h(e),\n                r = t.curNodeBucketIndex,\n                n = t.curNodePointerIndex;\n            a = r, l = n, c = e + 1;\n          }\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  if (0 === c) return [2];\n                  if (o !== a) return [3, 5];\n                  t = s, n.label = 1;\n\n                case 1:\n                  return t <= l ? [4, r[o][t]] : [3, 4];\n\n                case 2:\n                  n.sent(), n.label = 3;\n\n                case 3:\n                  return ++t, [3, 1];\n\n                case 4:\n                  return [2];\n\n                case 5:\n                  t = s, n.label = 6;\n\n                case 6:\n                  return t < i.bucketSize ? [4, r[o][t]] : [3, 9];\n\n                case 7:\n                  n.sent(), n.label = 8;\n\n                case 8:\n                  return ++t, [3, 6];\n\n                case 9:\n                  t = o + 1, n.label = 10;\n\n                case 10:\n                  if (!(t < a)) return [3, 15];\n                  e = 0, n.label = 11;\n\n                case 11:\n                  return e < i.bucketSize ? [4, r[t][e]] : [3, 14];\n\n                case 12:\n                  n.sent(), n.label = 13;\n\n                case 13:\n                  return ++e, [3, 11];\n\n                case 14:\n                  return ++t, [3, 10];\n\n                case 15:\n                  t = 0, n.label = 16;\n\n                case 16:\n                  return t <= l ? [4, r[a][t]] : [3, 19];\n\n                case 17:\n                  n.sent(), n.label = 18;\n\n                case 18:\n                  return ++t, [3, 16];\n\n                case 19:\n                  return [2];\n              }\n            });\n          }();\n        }, function () {\n          var n = i.bucketSize;\n          e.size ? n = e.size() : e.length && (n = e.length);\n          var s = n * i.sigma;\n          u = Math.ceil(s / i.bucketSize), u = Math.max(u, 3);\n\n          for (var l = 0; l < u; ++l) r.push(new Array(i.bucketSize));\n\n          var c = Math.ceil(n / i.bucketSize);\n          o = Math.floor(u / 2) - Math.floor(c / 2), a = o, e.forEach(function (e) {\n            return t.pushBack(e);\n          });\n        }(), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), i.sigma = 3, i.bucketSize = 5e3, Object.freeze(i), r.default = i;\n    }, {}],\n    27: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../LinkList/LinkList"),\n          s = e("../Map/Map");\n\n      function a(e, t, r) {\n        var l = this;\n        if (void 0 === e && (e = []), void 0 === t && (t = a.initSize), r = r || function (e) {\n          var t,\n              r,\n              n = 0,\n              o = "";\n          if ("number" == typeof e) n = ((n = Math.floor(e)) << 5) - n, n &= n;else {\n            o = "string" != typeof e ? JSON.stringify(e) : e;\n\n            try {\n              for (var s = i(o), a = s.next(); !a.done; a = s.next()) {\n                n = (n << 5) - n + a.value.charCodeAt(0), n &= n;\n              }\n            } catch (e) {\n              t = {\n                error: e\n              };\n            } finally {\n              try {\n                a && !a.done && (r = s.return) && r.call(s);\n              } finally {\n                if (t) throw t.error;\n              }\n            }\n          }\n          return n ^= n >>> 16;\n        }, 0 != (t & t - 1)) throw new Error("initBucketNum must be 2 to the power of n");\n        var u = 0,\n            c = [],\n            h = Math.max(a.initSize, Math.min(a.maxSize, t));\n        this.size = function () {\n          return u;\n        }, this.empty = function () {\n          return 0 === u;\n        }, this.clear = function () {\n          u = 0, h = t, c = [];\n        }, this.forEach = function (e) {\n          var t = 0;\n          c.forEach(function (r) {\n            r.forEach(function (r) {\n              e(r, t++);\n            });\n          });\n        };\n        this.setElement = function (e, t) {\n          var n, l;\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n\n          if (null !== t && void 0 !== t) {\n            var f = r(e) & h - 1;\n\n            if (c[f]) {\n              var p = c[f].size();\n\n              if (c[f] instanceof o.default) {\n                try {\n                  for (var d = i(c[f]), g = d.next(); !g.done; g = d.next()) {\n                    var y = g.value;\n                    if (y.key === e) return void (y.value = t);\n                  }\n                } catch (e) {\n                  n = {\n                    error: e\n                  };\n                } finally {\n                  try {\n                    g && !g.done && (l = d.return) && l.call(d);\n                  } finally {\n                    if (n) throw n.error;\n                  }\n                }\n\n                c[f].pushBack({\n                  key: e,\n                  value: t\n                }), c[f].size() >= a.treeifyThreshold && (c[f] = new s.default(c[f]));\n              } else c[f].setElement(e, t);\n\n              var b = c[f].size();\n              u += b - p;\n            } else ++u, c[f] = new o.default([{\n              key: e,\n              value: t\n            }]);\n\n            u > h * a.sigma && function (e) {\n              if (!(e >= a.maxSize)) {\n                h = 2 * e;\n                var t = [];\n                c.forEach(function (n, i) {\n                  if (!n.empty()) {\n                    if (n instanceof o.default && 1 === n.size()) {\n                      var l = n.front(),\n                          u = l.key,\n                          f = l.value;\n                      t[r(u) & h - 1] = new o.default([{\n                        key: u,\n                        value: f\n                      }]);\n                    } else if (n instanceof s.default) {\n                      var p = new o.default(),\n                          d = new o.default();\n                      n.forEach(function (t) {\n                        0 == (r(t.key) & e) ? p.pushBack(t) : d.pushBack(t);\n                      }), p.size() > a.untreeifyThreshold ? t[i] = new s.default(p) : p.size() && (t[i] = p), d.size() > a.untreeifyThreshold ? t[i + e] = new s.default(d) : d.size() && (t[i + e] = d);\n                    } else {\n                      var g = new o.default(),\n                          y = new o.default();\n                      n.forEach(function (t) {\n                        0 == (r(t.key) & e) ? g.pushBack(t) : y.pushBack(t);\n                      }), g.size() && (t[i] = g), y.size() && (t[i + e] = y);\n                    }\n\n                    c[i].clear();\n                  }\n                }), c = t;\n              }\n            }.call(this, h);\n          } else this.eraseElementByKey(e);\n        }, this.getElementByKey = function (e) {\n          var t,\n              n,\n              o = r(e) & h - 1;\n\n          if (c[o]) {\n            if (c[o] instanceof s.default) return c[o].getElementByKey(e);\n\n            try {\n              for (var a = i(c[o]), l = a.next(); !l.done; l = a.next()) {\n                var u = l.value;\n                if (u.key === e) return u.value;\n              }\n            } catch (e) {\n              t = {\n                error: e\n              };\n            } finally {\n              try {\n                l && !l.done && (n = a.return) && n.call(a);\n              } finally {\n                if (t) throw t.error;\n              }\n            }\n          }\n        }, this.eraseElementByKey = function (e) {\n          var t,\n              n,\n              l = r(e) & h - 1;\n\n          if (c[l]) {\n            var f = c[l].size();\n            if (c[l] instanceof s.default) c[l].eraseElementByKey(e), c[l].size() <= a.untreeifyThreshold && (c[l] = new o.default(c[l]));else {\n              var p = -1;\n\n              try {\n                for (var d = i(c[l]), g = d.next(); !g.done; g = d.next()) {\n                  if (++p, g.value.key === e) {\n                    c[l].eraseElementByPos(p);\n                    break;\n                  }\n                }\n              } catch (e) {\n                t = {\n                  error: e\n                };\n              } finally {\n                try {\n                  g && !g.done && (n = d.return) && n.call(d);\n                } finally {\n                  if (t) throw t.error;\n                }\n              }\n            }\n            var y = c[l].size();\n            u += y - f;\n          }\n        }, this.find = function (e) {\n          var t,\n              n,\n              o = r(e) & h - 1;\n          if (!c[o]) return !1;\n          if (c[o] instanceof s.default) return c[o].find(e);\n\n          try {\n            for (var a = i(c[o]), l = a.next(); !l.done; l = a.next()) {\n              if (l.value.key === e) return !0;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              l && !l.done && (n = a.return) && n.call(a);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          return !1;\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t, r, o, s, a;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  e = 0, n.label = 1;\n\n                case 1:\n                  if (!(e < h)) return [3, 10];\n\n                  for (; e < h && !c[e];) ++e;\n\n                  if (e >= h) return [3, 10];\n                  n.label = 2;\n\n                case 2:\n                  n.trys.push([2, 7, 8, 9]), s = void 0, t = i(c[e]), r = t.next(), n.label = 3;\n\n                case 3:\n                  return r.done ? [3, 6] : [4, r.value];\n\n                case 4:\n                  n.sent(), n.label = 5;\n\n                case 5:\n                  return r = t.next(), [3, 3];\n\n                case 6:\n                  return [3, 9];\n\n                case 7:\n                  return o = n.sent(), s = {\n                    error: o\n                  }, [3, 9];\n\n                case 8:\n                  try {\n                    r && !r.done && (a = t.return) && a.call(t);\n                  } finally {\n                    if (s) throw s.error;\n                  }\n\n                  return [7];\n\n                case 9:\n                  return ++e, [3, 1];\n\n                case 10:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          var t = e.key,\n              r = e.value;\n          return l.setElement(t, r);\n        }), Object.freeze(this);\n      }\n\n      a.initSize = 16, a.maxSize = 1 << 30, a.sigma = .75, a.treeifyThreshold = 8, a.untreeifyThreshold = 6, a.minTreeifySize = 64, Object.freeze(a), r.default = a;\n    }, {\n      "../LinkList/LinkList": 29,\n      "../Map/Map": 30\n    }],\n    28: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Set/Set"),\n          s = e("../LinkList/LinkList");\n\n      function a(e, t, r) {\n        var l = this;\n        if (void 0 === e && (e = []), void 0 === t && (t = a.initSize), r = r || function (e) {\n          var t = 0,\n              r = "";\n          if ("number" == typeof e) t = ((t = Math.floor(e)) << 5) - t, t &= t;else {\n            r = "string" != typeof e ? JSON.stringify(e) : e;\n\n            for (var n = 0; n < r.length; n++) {\n              t = (t << 5) - t + r.charCodeAt(n), t &= t;\n            }\n          }\n          return t ^= t >>> 16;\n        }, 0 != (t & t - 1)) throw new Error("initBucketNum must be 2 to the power of n");\n        var u = 0,\n            c = [],\n            h = Math.max(a.initSize, Math.min(a.maxSize, t));\n        this.size = function () {\n          return u;\n        }, this.empty = function () {\n          return 0 === u;\n        }, this.clear = function () {\n          u = 0, h = t, c = [];\n        }, this.forEach = function (e) {\n          var t = 0;\n          c.forEach(function (r) {\n            r.forEach(function (r) {\n              e(r, t++);\n            });\n          });\n        };\n        this.insert = function (e) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n          var t = r(e) & h - 1;\n\n          if (c[t]) {\n            var n = c[t].size();\n\n            if (c[t] instanceof s.default) {\n              if (c[t].find(e)) return;\n              c[t].pushBack(e), c[t].size() >= a.treeifyThreshold && (c[t] = new o.default(c[t]));\n            } else c[t].insert(e);\n\n            var i = c[t].size();\n            u += i - n;\n          } else c[t] = new s.default([e]), ++u;\n\n          u > h * a.sigma && function (e) {\n            if (!(e >= a.maxSize)) {\n              h = 2 * e;\n              var t = [];\n              c.forEach(function (n, i) {\n                if (!n.empty()) {\n                  if (n instanceof s.default && 1 === n.size()) {\n                    var l = n.front();\n                    if (void 0 === l) throw new Error("unknown error");\n                    t[r(l) & h - 1] = new s.default([l]);\n                  } else if (n instanceof o.default) {\n                    var u = new s.default(),\n                        f = new s.default();\n                    n.forEach(function (t) {\n                      0 == (r(t) & e) ? u.pushBack(t) : f.pushBack(t);\n                    }), u.size() > a.untreeifyThreshold ? t[i] = new o.default(u) : u.size() && (t[i] = u), f.size() > a.untreeifyThreshold ? t[i + e] = new o.default(f) : f.size() && (t[i + e] = f);\n                  } else {\n                    var p = new s.default(),\n                        d = new s.default();\n                    n.forEach(function (t) {\n                      0 == (r(t) & e) ? p.pushBack(t) : d.pushBack(t);\n                    }), p.size() && (t[i] = p), d.size() && (t[i + e] = d);\n                  }\n\n                  c[i].clear();\n                }\n              }), c = t;\n            }\n          }.call(this, h);\n        }, this.eraseElementByValue = function (e) {\n          var t = r(e) & h - 1;\n\n          if (c[t]) {\n            var n = c[t].size();\n            c[t].eraseElementByValue(e), c[t] instanceof o.default && c[t].size() <= a.untreeifyThreshold && (c[t] = new s.default(c[t]));\n            var i = c[t].size();\n            u += i - n;\n          }\n        }, this.find = function (e) {\n          var t = r(e) & h - 1;\n          return !!c[t] && c[t].find(e);\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e, t, r, o, s, a;\n            return n(this, function (n) {\n              switch (n.label) {\n                case 0:\n                  e = 0, n.label = 1;\n\n                case 1:\n                  if (!(e < h)) return [3, 10];\n\n                  for (; e < h && !c[e];) ++e;\n\n                  if (e >= h) return [3, 10];\n                  n.label = 2;\n\n                case 2:\n                  n.trys.push([2, 7, 8, 9]), s = void 0, t = i(c[e]), r = t.next(), n.label = 3;\n\n                case 3:\n                  return r.done ? [3, 6] : [4, r.value];\n\n                case 4:\n                  n.sent(), n.label = 5;\n\n                case 5:\n                  return r = t.next(), [3, 3];\n\n                case 6:\n                  return [3, 9];\n\n                case 7:\n                  return o = n.sent(), s = {\n                    error: o\n                  }, [3, 9];\n\n                case 8:\n                  try {\n                    r && !r.done && (a = t.return) && a.call(t);\n                  } finally {\n                    if (s) throw s.error;\n                  }\n\n                  return [7];\n\n                case 9:\n                  return ++e, [3, 1];\n\n                case 10:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return l.insert(e);\n        }), Object.freeze(this);\n      }\n\n      a.initSize = 16, a.maxSize = 1 << 30, a.sigma = .75, a.treeifyThreshold = 8, a.untreeifyThreshold = 6, a.minTreeifySize = 64, Object.freeze(a), r.default = a;\n    }, {\n      "../LinkList/LinkList": 29,\n      "../Set/Set": 33\n    }],\n    29: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n\n      var i = function () {\n        return function (e) {\n          this.value = void 0, this.pre = void 0, this.next = void 0, this.value = e;\n        };\n      }();\n\n      function o(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            o = void 0,\n            s = void 0;\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          o = s = void 0, r = 0;\n        }, this.front = function () {\n          return null === o || void 0 === o ? void 0 : o.value;\n        }, this.back = function () {\n          return null === s || void 0 === s ? void 0 : s.value;\n        }, this.forEach = function (e) {\n          for (var t = o, r = 0; t;) {\n            if (void 0 === t.value) throw new Error("unknown error");\n            e(t.value, r++), t = t.next;\n          }\n        }, this.getElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more then 0 and less then the list length");\n\n          for (var t = o; e-- && t;) t = t.next;\n\n          if (!t || void 0 === t.value) throw new Error("unknown error");\n          return t.value;\n        }, this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("erase pos must more then 0 and less then the list length");\n          if (0 === e) this.popFront();else if (e === r - 1) this.popBack();else {\n            for (var t = o; e--;) {\n              if (!(null === t || void 0 === t ? void 0 : t.next)) throw new Error("unknown error");\n              t = t.next;\n            }\n\n            if (!t || !t.pre || !t.next) throw new Error("unknown error");\n            var n = t.pre,\n                i = t.next;\n            i.pre = n, n.next = i, r > 0 && --r;\n          }\n        }, this.eraseElementByValue = function (e) {\n          for (; o && o.value === e;) this.popFront();\n\n          for (; s && s.value === e;) this.popBack();\n\n          if (o) for (var t = o; t;) {\n            if (t.value === e) {\n              var n = t.pre,\n                  i = t.next;\n              i && (i.pre = n), n && (n.next = i), r > 0 && --r;\n            }\n\n            t = t.next;\n          }\n        }, this.pushBack = function (e) {\n          if (null === e || void 0 === e) throw new Error("you can\'t push null or undefined here");\n          ++r;\n          var t = new i(e);\n          s ? (s.next = t, t.pre = s, s = t) : o = s = t;\n        }, this.popBack = function () {\n          s && (r > 0 && --r, s && (o === s ? o = s = void 0 : (s = s.pre) && (s.next = void 0)));\n        }, this.setElementByPos = function (e, t) {\n          if (null === t || void 0 === t) throw new Error("you can\'t set null or undefined here");\n          if (e < 0 || e >= r) throw new Error("pos must more then 0 and less then the list length");\n\n          for (var n = o; e--;) {\n            if (!n) throw new Error("unknown error");\n            n = n.next;\n          }\n\n          n && (n.value = t);\n        }, this.insert = function (e, t, n) {\n          if (void 0 === n && (n = 1), null === t || void 0 === t) throw new Error("you can\'t insert null or undefined here");\n          if (e < 0 || e > r) throw new Error("insert pos must more then 0 and less then or equal to the list length");\n          if (n < 0) throw new Error("insert size must more than 0");\n          if (0 === e) for (; n--;) this.pushFront(t);else if (e === r) for (; n--;) this.pushBack(t);else {\n            for (var s = o, a = 1; a < e; ++a) {\n              if (!(null === s || void 0 === s ? void 0 : s.next)) throw new Error("unknown error");\n              s = null === s || void 0 === s ? void 0 : s.next;\n            }\n\n            if (!s) throw new Error("unknown error");\n            var l = s.next;\n\n            for (r += n; n--;) s.next = new i(t), s.next.pre = s, s = s.next;\n\n            s.next = l, l && (l.pre = s);\n          }\n        }, this.find = function (e) {\n          for (var t = o; t;) {\n            if (t.value === e) return !0;\n            t = t.next;\n          }\n\n          return !1;\n        }, this.reverse = function () {\n          for (var e = o, t = s, n = 0; e && t && 2 * n < r;) {\n            var i = e.value;\n            e.value = t.value, t.value = i, e = e.next, t = t.pre, ++n;\n          }\n        }, this.unique = function () {\n          for (var e = o; e;) {\n            for (var t = e; t && t.next && t.value === t.next.value;) t = t.next, r > 0 && --r;\n\n            e.next = t.next, e.next && (e.next.pre = e), e = e.next;\n          }\n        }, this.sort = function (e) {\n          var t = [];\n          this.forEach(function (e) {\n            t.push(e);\n          }), t.sort(e);\n          var r = o;\n          t.forEach(function (e) {\n            r && (r.value = e, r = r.next);\n          });\n        }, this.pushFront = function (e) {\n          if (null === e || void 0 === e) throw new Error("you can\'t push null or undefined here");\n          ++r;\n          var t = new i(e);\n          o ? (t.next = o, o.pre = t, o = t) : o = s = t;\n        }, this.popFront = function () {\n          o && (r > 0 && --r, o && (o === s ? o = s = void 0 : (o = o.next) && (o.pre = void 0)));\n        }, this.merge = function (e) {\n          var t = this,\n              n = o;\n          e.forEach(function (e) {\n            for (; n && void 0 !== n.value && n.value <= e;) n = n.next;\n\n            if (void 0 === n) t.pushBack(e), n = s;else if (n === o) t.pushFront(e), n = o;else {\n              ++r;\n              var a = n.pre;\n              a && (a.next = new i(e), a.next.pre = a, a.next.next = n, n && (n.pre = a.next));\n            }\n          });\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            var e;\n            return n(this, function (t) {\n              switch (t.label) {\n                case 0:\n                  e = o, t.label = 1;\n\n                case 1:\n                  if (void 0 === e) return [3, 3];\n                  if (!e.value) throw new Error("unknown error");\n                  return [4, e.value];\n\n                case 2:\n                  return t.sent(), e = e.next, [3, 1];\n\n                case 3:\n                  return [2];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return t.pushBack(e);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(o), r.default = o;\n    }, {}],\n    30: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Base/TreeNode");\n\n      function s(e, t) {\n        var r = this;\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e < t ? -1 : e > t ? 1 : 0;\n        };\n        var s = 0,\n            a = new o.default();\n        a.color = o.default.TreeNodeColorType.black, this.size = function () {\n          return s;\n        }, this.empty = function () {\n          return 0 === s;\n        }, this.clear = function () {\n          s = 0, a.key = a.value = void 0, a.leftChild = a.rightChild = a.brother = void 0;\n        };\n\n        var l = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.leftChild ? l(e.leftChild) : e;\n        },\n            u = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.rightChild ? u(e.rightChild) : e;\n        };\n\n        this.front = function () {\n          if (!this.empty()) {\n            var e = l(a);\n            if (void 0 === e.key || void 0 === e.value) throw new Error("unknown error");\n            return {\n              key: e.key,\n              value: e.value\n            };\n          }\n        }, this.back = function () {\n          if (!this.empty()) {\n            var e = u(a);\n            if (void 0 === e.key || void 0 === e.value) throw new Error("unknown error");\n            return {\n              key: e.key,\n              value: e.value\n            };\n          }\n        }, this.forEach = function (e) {\n          var t,\n              r,\n              n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              e(s.value, n++);\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        }, this.getElementByPos = function (e) {\n          var t, r;\n          if (e < 0 || e >= this.size()) throw new Error("pos must more than 0 and less than set\'s size");\n          var n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              var a = s.value;\n              if (n === e) return a;\n              ++n;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          throw new Error("unknown Error");\n        };\n\n        var c = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) {\n            var n = t(e.key, r);\n            return 0 === n ? {\n              key: e.key,\n              value: e.value\n            } : n < 0 ? c(e.rightChild, r) : c(e.leftChild, r) || {\n              key: e.key,\n              value: e.value\n            };\n          }\n        };\n\n        this.lowerBound = function (e) {\n          return c(a, e);\n        };\n\n        var h = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) return t(e.key, r) <= 0 ? h(e.rightChild, r) : h(e.leftChild, r) || {\n            key: e.key,\n            value: e.value\n          };\n        };\n\n        this.upperBound = function (e) {\n          return h(a, e);\n        };\n\n        var f = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) {\n            var n = t(e.key, r);\n            return 0 === n ? {\n              key: e.key,\n              value: e.value\n            } : n > 0 ? f(e.leftChild, r) : f(e.rightChild, r) || {\n              key: e.key,\n              value: e.value\n            };\n          }\n        };\n\n        this.reverseLowerBound = function (e) {\n          return f(a, e);\n        };\n\n        var p = function (e, r) {\n          if (e && void 0 !== e.key && void 0 !== e.value) return t(e.key, r) >= 0 ? p(e.leftChild, r) : p(e.rightChild, r) || {\n            key: e.key,\n            value: e.value\n          };\n        };\n\n        this.reverseUpperBound = function (e) {\n          return p(a, e);\n        };\n\n        var d = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (e.color !== o.default.TreeNodeColorType.red) {\n            var r = e.brother;\n            if (!r) throw new Error("unknown error");\n\n            if (e === t.leftChild) {\n              if (r.color === o.default.TreeNodeColorType.red) {\n                r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n                var n = t.rotateLeft();\n                a === t && (a = n), d(e);\n              } else if (r.color === o.default.TreeNodeColorType.black) if (r.rightChild && r.rightChild.color === o.default.TreeNodeColorType.red) {\n                r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n                n = t.rotateLeft();\n                a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n              } else if (r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || !r.leftChild || r.leftChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, d(t));else {\n                r.color = o.default.TreeNodeColorType.red, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n                n = r.rotateRight();\n                a === r && (a = n), d(e);\n              }\n            } else if (e === t.rightChild) if (r.color === o.default.TreeNodeColorType.red) {\n              r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n              n = t.rotateRight();\n              a === t && (a = n), d(e);\n            } else if (r.color === o.default.TreeNodeColorType.black) if (r.leftChild && r.leftChild.color === o.default.TreeNodeColorType.red) {\n              r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n              n = t.rotateRight();\n              a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n            } else if (r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || !r.rightChild || r.rightChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, d(t));else {\n              r.color = o.default.TreeNodeColorType.red, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n              n = r.rotateLeft();\n              a === r && (a = n), d(e);\n            }\n          } else e.color = o.default.TreeNodeColorType.black;\n        },\n            g = function (e) {\n          for (var t = e; t.leftChild || t.rightChild;) {\n            if (t.rightChild) {\n              t = l(t.rightChild);\n              var r = e.key;\n              e.key = t.key, t.key = r;\n              var n = e.value;\n              e.value = t.value, t.value = n, e = t;\n            }\n\n            if (t.leftChild) {\n              t = u(t.leftChild);\n              r = e.key;\n              e.key = t.key, t.key = r;\n              n = e.value;\n              e.value = t.value, t.value = n, e = t;\n            }\n          }\n\n          d(t), t && t.remove(), --s, a.color = o.default.TreeNodeColorType.black;\n        },\n            y = function (e, t) {\n          return !(!e || void 0 === e.key) && (!!y(e.leftChild, t) || !!t(e) || y(e.rightChild, t));\n        };\n\n        this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= s) throw new Error("pos must more than 0 and less than set\'s size");\n          var t = 0;\n          y(a, function (r) {\n            return e === t ? (g(r), !0) : (++t, !1);\n          });\n        }, this.eraseElementByKey = function (e) {\n          if (!this.empty()) {\n            var r = v(a, e);\n            void 0 !== r && void 0 !== r.key && 0 === t(r.key, e) && g(r);\n          }\n        };\n\n        var b = function (e, r) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          var n = t(r, e.key);\n          return n < 0 ? e.leftChild ? b(e.leftChild, r) : (e.leftChild = new o.default(), e.leftChild.parent = e, e.leftChild.brother = e.rightChild, e.rightChild && (e.rightChild.brother = e.leftChild), e.leftChild) : n > 0 ? e.rightChild ? b(e.rightChild, r) : (e.rightChild = new o.default(), e.rightChild.parent = e, e.rightChild.brother = e.leftChild, e.leftChild && (e.leftChild.brother = e.rightChild), e.rightChild) : e;\n        },\n            m = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (t.color !== o.default.TreeNodeColorType.black && t.color === o.default.TreeNodeColorType.red) {\n            var r = t.brother,\n                n = t.parent;\n            if (!n) throw new Error("unknown error");\n            if (r && r.color === o.default.TreeNodeColorType.red) r.color = t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red, m(n);else if (!r || r.color === o.default.TreeNodeColorType.black) if (t === n.leftChild) {\n              if (e === t.leftChild) {\n                t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n                var i = n.rotateRight();\n                n === a && (a = i);\n              } else if (e === t.rightChild) {\n                i = t.rotateLeft();\n                n === a && (a = i), m(t);\n              }\n            } else if (t === n.rightChild) if (e === t.leftChild) {\n              i = t.rotateRight();\n              n === a && (a = i), m(t);\n            } else if (e === t.rightChild) {\n              t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n              i = n.rotateLeft();\n              n === a && (a = i);\n            }\n          }\n        };\n\n        this.setElement = function (e, r) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n\n          if (null !== r && void 0 !== r) {\n            if (this.empty()) return ++s, a.key = e, a.value = r, void (a.color = o.default.TreeNodeColorType.black);\n            var n = b(a, e);\n            void 0 === n.key || 0 !== t(n.key, e) ? (++s, n.key = e, n.value = r, m(n), a.color = o.default.TreeNodeColorType.black) : n.value = r;\n          } else this.eraseElementByKey(e);\n        };\n\n        var v = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(r, e.key);\n            return n < 0 ? v(e.leftChild, r) : n > 0 ? v(e.rightChild, r) : e;\n          }\n        };\n\n        this.find = function (e) {\n          return !!v(a, e);\n        }, this.getElementByKey = function (e) {\n          var t = v(a, e);\n          if (void 0 === (null === t || void 0 === t ? void 0 : t.key) || void 0 === (null === t || void 0 === t ? void 0 : t.value)) throw new Error("unknown error");\n          return t.value;\n        }, this.union = function (e) {\n          var t = this;\n          e.forEach(function (e) {\n            var r = e.key,\n                n = e.value;\n            return t.setElement(r, n);\n          });\n        }, this.getHeight = function () {\n          if (this.empty()) return 0;\n\n          var e = function (t) {\n            return t ? Math.max(e(t.leftChild), e(t.rightChild)) + 1 : 1;\n          };\n\n          return e(a);\n        };\n\n        var w = function (e) {\n          return n(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e && void 0 !== e.key && void 0 !== e.value ? [5, i(w(e.leftChild))] : [2];\n\n              case 1:\n                return t.sent(), [4, {\n                  key: e.key,\n                  value: e.value\n                }];\n\n              case 2:\n                return t.sent(), [5, i(w(e.rightChild))];\n\n              case 3:\n                return t.sent(), [2];\n            }\n          });\n        };\n\n        this[Symbol.iterator] = function () {\n          return w(a);\n        }, e.forEach(function (e) {\n          var t = e.key,\n              n = e.value;\n          return r.setElement(t, n);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(s), r.default = s;\n    }, {\n      "../Base/TreeNode": 25\n    }],\n    31: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e > t ? -1 : e < t ? 1 : 0;\n        };\n        var r = [];\n        e.forEach(function (e) {\n          return r.push(e);\n        });\n\n        var n = r.length,\n            i = function (e, t) {\n          if (e < 0 || e >= n) throw new Error("unknown error");\n          if (t < 0 || t >= n) throw new Error("unknown error");\n          var i = r[e];\n          r[e] = r[t], r[t] = i;\n        },\n            o = function (e) {\n          if (e < 0 || e >= n) throw new Error("unknown error");\n          var o = 2 * e + 1,\n              s = 2 * e + 2;\n          o < n && t(r[e], r[o]) > 0 && i(e, o), s < n && t(r[e], r[s]) > 0 && i(e, s);\n        };\n\n        !function () {\n          for (var e = Math.floor((n - 1) / 2); e >= 0; --e) for (var o = e, s = 2 * o + 1; s < n;) {\n            var a = s + 1,\n                l = s;\n            if (a < n && t(r[s], r[a]) > 0 && (l = a), t(r[o], r[l]) <= 0) break;\n            i(o, l), s = 2 * (o = l) + 1;\n          }\n        }(), this.size = function () {\n          return n;\n        }, this.empty = function () {\n          return 0 === n;\n        }, this.clear = function () {\n          n = 0, r.length = 0;\n        }, this.push = function (e) {\n          if (r.push(e), 1 !== ++n) for (var i = n - 1; i > 0;) {\n            var s = Math.floor((i - 1) / 2);\n            if (t(r[s], e) <= 0) break;\n            o(s), i = s;\n          }\n        }, this.pop = function () {\n          if (!this.empty()) if (1 !== this.size()) {\n            var e = r[n - 1];\n            --n;\n\n            for (var i = 0; i < this.size();) {\n              var o = 2 * i + 1,\n                  s = 2 * i + 2;\n              if (o >= this.size()) break;\n              var a = o;\n              if (s < this.size() && t(r[o], r[s]) > 0 && (a = s), t(r[a], e) >= 0) break;\n              r[i] = r[a], i = a;\n            }\n\n            r[i] = e;\n          } else --n;\n        }, this.top = function () {\n          return r[0];\n        }, Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(n), r.default = n;\n    }, {}],\n    32: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var n = e("../LinkList/LinkList");\n\n      function i(e) {\n        void 0 === e && (e = []);\n        var t = new n.default(e);\n        this.size = function () {\n          return t.size();\n        }, this.empty = function () {\n          return t.empty();\n        }, this.clear = function () {\n          t.clear();\n        }, this.push = function (e) {\n          t.pushBack(e);\n        }, this.pop = function () {\n          t.popFront();\n        }, this.front = function () {\n          return t.front();\n        }, Object.freeze(this);\n      }\n\n      Object.freeze(i), r.default = i;\n    }, {\n      "../LinkList/LinkList": 29\n    }],\n    33: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      });\n      var o = e("../Base/TreeNode");\n\n      function s(e, t) {\n        var r = this;\n        void 0 === e && (e = []), t = t || function (e, t) {\n          return e < t ? -1 : e > t ? 1 : 0;\n        };\n        var s = 0,\n            a = new o.default();\n        a.color = o.default.TreeNodeColorType.black, this.size = function () {\n          return s;\n        }, this.empty = function () {\n          return 0 === s;\n        }, this.clear = function () {\n          s = 0, a.key = void 0, a.leftChild = a.rightChild = a.brother = a.parent = void 0, a.color = o.default.TreeNodeColorType.black;\n        };\n\n        var l = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.leftChild ? l(e.leftChild) : e;\n        },\n            u = function (e) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          return e.rightChild ? u(e.rightChild) : e;\n        };\n\n        this.front = function () {\n          if (!this.empty()) return l(a).key;\n        }, this.back = function () {\n          if (!this.empty()) return u(a).key;\n        }, this.forEach = function (e) {\n          var t,\n              r,\n              n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              e(s.value, n++);\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n        }, this.getElementByPos = function (e) {\n          var t, r;\n          if (e < 0 || e >= this.size()) throw new Error("pos must more than 0 and less than set\'s size");\n          var n = 0;\n\n          try {\n            for (var o = i(this), s = o.next(); !s.done; s = o.next()) {\n              var a = s.value;\n              if (n === e) return a;\n              ++n;\n            }\n          } catch (e) {\n            t = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (r = o.return) && r.call(o);\n            } finally {\n              if (t) throw t.error;\n            }\n          }\n\n          throw new Error("unknown error");\n        };\n\n        var c = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (e.color !== o.default.TreeNodeColorType.red) {\n            var r = e.brother;\n            if (!r) throw new Error("unknown error");\n\n            if (e === t.leftChild) {\n              if (r.color === o.default.TreeNodeColorType.red) {\n                r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n                var n = t.rotateLeft();\n                a === t && (a = n), c(e);\n              } else if (r.color === o.default.TreeNodeColorType.black) if (r.rightChild && r.rightChild.color === o.default.TreeNodeColorType.red) {\n                r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n                n = t.rotateLeft();\n                a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n              } else if (r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || !r.leftChild || r.leftChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, c(t));else {\n                r.color = o.default.TreeNodeColorType.red, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n                n = r.rotateRight();\n                a === r && (a = n), c(e);\n              }\n            } else if (e === t.rightChild) if (r.color === o.default.TreeNodeColorType.red) {\n              r.color = o.default.TreeNodeColorType.black, t.color = o.default.TreeNodeColorType.red;\n              n = t.rotateRight();\n              a === t && (a = n), c(e);\n            } else if (r.color === o.default.TreeNodeColorType.black) if (r.leftChild && r.leftChild.color === o.default.TreeNodeColorType.red) {\n              r.color = t.color, t.color = o.default.TreeNodeColorType.black, r.leftChild && (r.leftChild.color = o.default.TreeNodeColorType.black);\n              n = t.rotateRight();\n              a === t && (a = n), e.color = o.default.TreeNodeColorType.black;\n            } else if (r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || !r.rightChild || r.rightChild.color !== o.default.TreeNodeColorType.red) r.leftChild && r.leftChild.color !== o.default.TreeNodeColorType.black || r.rightChild && r.rightChild.color !== o.default.TreeNodeColorType.black || (r.color = o.default.TreeNodeColorType.red, c(t));else {\n              r.color = o.default.TreeNodeColorType.red, r.rightChild && (r.rightChild.color = o.default.TreeNodeColorType.black);\n              n = r.rotateLeft();\n              a === r && (a = n), c(e);\n            }\n          } else e.color = o.default.TreeNodeColorType.black;\n        },\n            h = function (e) {\n          for (var t = e; t.leftChild || t.rightChild;) {\n            if (t.rightChild) {\n              t = l(t.rightChild);\n              var r = e.key;\n              e.key = t.key, t.key = r, e = t;\n            }\n\n            if (t.leftChild) {\n              t = u(t.leftChild);\n              r = e.key;\n              e.key = t.key, t.key = r, e = t;\n            }\n          }\n\n          c(t), t && t.remove(), --s, a.color = o.default.TreeNodeColorType.black;\n        },\n            f = function (e, t) {\n          return !(!e || void 0 === e.key) && (!!f(e.leftChild, t) || !!t(e) || f(e.rightChild, t));\n        };\n\n        this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= s) throw new Error("pos must more than 0 and less than set\'s size");\n          var t = 0;\n          f(a, function (r) {\n            return e === t ? (h(r), !0) : (++t, !1);\n          });\n        }, this.eraseElementByValue = function (e) {\n          if (!this.empty()) {\n            var r = g(a, e);\n            void 0 !== r && void 0 !== r.key && 0 === t(r.key, e) && h(r);\n          }\n        };\n\n        var p = function (e, r) {\n          if (!e || void 0 === e.key) throw new Error("unknown error");\n          var n = t(r, e.key);\n          return n < 0 ? e.leftChild ? p(e.leftChild, r) : (e.leftChild = new o.default(), e.leftChild.parent = e, e.leftChild.brother = e.rightChild, e.rightChild && (e.rightChild.brother = e.leftChild), e.leftChild) : n > 0 ? e.rightChild ? p(e.rightChild, r) : (e.rightChild = new o.default(), e.rightChild.parent = e, e.rightChild.brother = e.leftChild, e.leftChild && (e.leftChild.brother = e.rightChild), e.rightChild) : e;\n        },\n            d = function (e) {\n          var t = e.parent;\n\n          if (!t) {\n            if (e === a) return;\n            throw new Error("unknown error");\n          }\n\n          if (t.color !== o.default.TreeNodeColorType.black && t.color === o.default.TreeNodeColorType.red) {\n            var r = t.brother,\n                n = t.parent;\n            if (!n) throw new Error("unknown error");\n            if (r && r.color === o.default.TreeNodeColorType.red) r.color = t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red, d(n);else if (!r || r.color === o.default.TreeNodeColorType.black) if (t === n.leftChild) {\n              if (e === t.leftChild) {\n                t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n                var i = n.rotateRight();\n                n === a && (a = i);\n              } else if (e === t.rightChild) {\n                i = t.rotateLeft();\n                n === a && (a = i), d(t);\n              }\n            } else if (t === n.rightChild) if (e === t.leftChild) {\n              i = t.rotateRight();\n              n === a && (a = i), d(t);\n            } else if (e === t.rightChild) {\n              t.color = o.default.TreeNodeColorType.black, n.color = o.default.TreeNodeColorType.red;\n              i = n.rotateLeft();\n              n === a && (a = i);\n            }\n          }\n        };\n\n        this.insert = function (e) {\n          if (null === e || void 0 === e) throw new Error("to avoid some unnecessary errors, we don\'t suggest you insert null or undefined here");\n          if (this.empty()) return ++s, a.key = e, void (a.color = o.default.TreeNodeColorType.black);\n          var r = p(a, e);\n          void 0 !== r.key && 0 === t(r.key, e) || (++s, r.key = e, d(r), a.color = o.default.TreeNodeColorType.black);\n        };\n\n        var g = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(r, e.key);\n            return n < 0 ? g(e.leftChild, r) : n > 0 ? g(e.rightChild, r) : e;\n          }\n        };\n\n        this.find = function (e) {\n          var r = g(a, e);\n          return void 0 !== r && void 0 !== r.key && 0 === t(r.key, e);\n        };\n\n        var y = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(e.key, r);\n            return 0 === n ? e.key : n < 0 ? y(e.rightChild, r) : y(e.leftChild, r) || e.key;\n          }\n        };\n\n        this.lowerBound = function (e) {\n          return y(a, e);\n        };\n\n        var b = function (e, r) {\n          if (e && void 0 !== e.key) return t(e.key, r) <= 0 ? b(e.rightChild, r) : b(e.leftChild, r) || e.key;\n        };\n\n        this.upperBound = function (e) {\n          return b(a, e);\n        };\n\n        var m = function (e, r) {\n          if (e && void 0 !== e.key) {\n            var n = t(e.key, r);\n            return 0 === n ? e.key : n > 0 ? m(e.leftChild, r) : m(e.rightChild, r) || e.key;\n          }\n        };\n\n        this.reverseLowerBound = function (e) {\n          return m(a, e);\n        };\n\n        var v = function (e, r) {\n          if (e && void 0 !== e.key) return t(e.key, r) >= 0 ? v(e.leftChild, r) : v(e.rightChild, r) || e.key;\n        };\n\n        this.reverseUpperBound = function (e) {\n          return v(a, e);\n        }, this.union = function (e) {\n          var t = this;\n          e.forEach(function (e) {\n            return t.insert(e);\n          });\n        }, this.getHeight = function () {\n          if (this.empty()) return 0;\n\n          var e = function (t) {\n            return t ? Math.max(e(t.leftChild), e(t.rightChild)) + 1 : 1;\n          };\n\n          return e(a);\n        };\n\n        var w = function (e) {\n          return n(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e && void 0 !== e.key ? [5, i(w(e.leftChild))] : [2];\n\n              case 1:\n                return t.sent(), [4, e.key];\n\n              case 2:\n                return t.sent(), [5, i(w(e.rightChild))];\n\n              case 3:\n                return t.sent(), [2];\n            }\n          });\n        };\n\n        this[Symbol.iterator] = function () {\n          return w(a);\n        }, e.forEach(function (e) {\n          return r.insert(e);\n        }), Object.freeze(this);\n      }\n\n      Object.freeze(s), r.default = s;\n    }, {\n      "../Base/TreeNode": 25\n    }],\n    34: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            n = [];\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          r = 0, n.length = 0;\n        }, this.push = function (e) {\n          n.push(e), ++r;\n        }, this.pop = function () {\n          n.pop(), r > 0 && --r;\n        }, this.top = function () {\n          return n[r - 1];\n        }, e.forEach(function (e) {\n          return t.push(e);\n        }), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(n), r.default = n;\n    }, {}],\n    35: [function (e, t, r) {\n      "use strict";\n\n      var n = this && this.__generator || function (e, t) {\n        var r,\n            n,\n            i,\n            o,\n            s = {\n          label: 0,\n          sent: function () {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return o = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, "function" == typeof Symbol && (o[Symbol.iterator] = function () {\n          return this;\n        }), o;\n\n        function a(o) {\n          return function (a) {\n            return function (o) {\n              if (r) throw new TypeError("Generator is already executing.");\n\n              for (; s;) try {\n                if (r = 1, n && (i = 2 & o[0] ? n.return : o[0] ? n.throw || ((i = n.return) && i.call(n), 0) : n.next) && !(i = i.call(n, o[1])).done) return i;\n\n                switch (n = 0, i && (o = [2 & o[0], i.value]), o[0]) {\n                  case 0:\n                  case 1:\n                    i = o;\n                    break;\n\n                  case 4:\n                    return s.label++, {\n                      value: o[1],\n                      done: !1\n                    };\n\n                  case 5:\n                    s.label++, n = o[1], o = [0];\n                    continue;\n\n                  case 7:\n                    o = s.ops.pop(), s.trys.pop();\n                    continue;\n\n                  default:\n                    if (!(i = (i = s.trys).length > 0 && i[i.length - 1]) && (6 === o[0] || 2 === o[0])) {\n                      s = 0;\n                      continue;\n                    }\n\n                    if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                      s.label = o[1];\n                      break;\n                    }\n\n                    if (6 === o[0] && s.label < i[1]) {\n                      s.label = i[1], i = o;\n                      break;\n                    }\n\n                    if (i && s.label < i[2]) {\n                      s.label = i[2], s.ops.push(o);\n                      break;\n                    }\n\n                    i[2] && s.ops.pop(), s.trys.pop();\n                    continue;\n                }\n\n                o = t.call(e, s);\n              } catch (e) {\n                o = [6, e], n = 0;\n              } finally {\n                r = i = 0;\n              }\n\n              if (5 & o[0]) throw o[1];\n              return {\n                value: o[0] ? o[1] : void 0,\n                done: !0\n              };\n            }([o, a]);\n          };\n        }\n      },\n          i = this && this.__read || function (e, t) {\n        var r = "function" == typeof Symbol && e[Symbol.iterator];\n        if (!r) return e;\n        var n,\n            i,\n            o = r.call(e),\n            s = [];\n\n        try {\n          for (; (void 0 === t || t-- > 0) && !(n = o.next()).done;) s.push(n.value);\n        } catch (e) {\n          i = {\n            error: e\n          };\n        } finally {\n          try {\n            n && !n.done && (r = o.return) && r.call(o);\n          } finally {\n            if (i) throw i.error;\n          }\n        }\n\n        return s;\n      },\n          o = this && this.__spreadArray || function (e, t, r) {\n        if (r || 2 === arguments.length) for (var n, i = 0, o = t.length; i < o; i++) !n && i in t || (n || (n = Array.prototype.slice.call(t, 0, i)), n[i] = t[i]);\n        return e.concat(n || Array.prototype.slice.call(t));\n      },\n          s = this && this.__values || function (e) {\n        var t = "function" == typeof Symbol && Symbol.iterator,\n            r = t && e[t],\n            n = 0;\n        if (r) return r.call(e);\n        if (e && "number" == typeof e.length) return {\n          next: function () {\n            return e && n >= e.length && (e = void 0), {\n              value: e && e[n++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");\n      };\n\n      function a(e) {\n        var t = this;\n        void 0 === e && (e = []);\n        var r = 0,\n            a = [];\n        this.size = function () {\n          return r;\n        }, this.empty = function () {\n          return 0 === r;\n        }, this.clear = function () {\n          r = 0, a.length = 0;\n        }, this.front = function () {\n          if (!this.empty()) return a[0];\n        }, this.back = function () {\n          if (!this.empty()) return a[r - 1];\n        }, this.forEach = function (e) {\n          a.forEach(e);\n        }, this.getElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n          return a[e];\n        }, this.eraseElementByPos = function (e) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n\n          for (var t = e; t < r - 1; ++t) a[t] = a[t + 1];\n\n          this.popBack();\n        }, this.eraseElementByValue = function (e) {\n          var t = [];\n          this.forEach(function (r) {\n            r !== e && t.push(r);\n          }), t.forEach(function (e, t) {\n            a[t] = e;\n          });\n\n          for (var n = t.length; r > n;) this.popBack();\n        }, this.pushBack = function (e) {\n          a.push(e), ++r;\n        }, this.popBack = function () {\n          a.pop(), r > 0 && --r;\n        }, this.setElementByPos = function (e, t) {\n          if (e < 0 || e >= r) throw new Error("pos must more than 0 and less than vector\'s size");\n          a[e] = t;\n        }, this.insert = function (e, t, n) {\n          if (void 0 === n && (n = 1), e < 0 || e > r) throw new Error("pos must more than 0 and less than or equal to vector\'s size");\n          a.splice.apply(a, o([e, 0], i(new Array(n).fill(t)), !1)), r += n;\n        }, this.find = function (e) {\n          return a.includes(e);\n        }, this.reverse = function () {\n          a.reverse();\n        }, this.unique = function () {\n          var e,\n              t = [];\n          this.forEach(function (r, n) {\n            0 !== n && r === e || (t.push(r), e = r);\n          }), t.forEach(function (e, t) {\n            a[t] = e;\n          });\n\n          for (var n = t.length; r > n;) this.popBack();\n        }, this.sort = function (e) {\n          a.sort(e);\n        }, this[Symbol.iterator] = function () {\n          return function () {\n            return n(this, function (e) {\n              switch (e.label) {\n                case 0:\n                  return [5, s(a)];\n\n                case 1:\n                  return [2, e.sent()];\n              }\n            });\n          }();\n        }, e.forEach(function (e) {\n          return t.pushBack(e);\n        }), Object.freeze(this);\n      }\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), Object.freeze(a), r.default = a;\n    }, {}],\n    36: [function (e, t, r) {\n      "use strict";\n\n      Object.defineProperty(r, "__esModule", {\n        value: !0\n      }), r.HashMap = r.HashSet = r.Map = r.Set = r.PriorityQueue = r.Deque = r.LinkList = r.Queue = r.Stack = r.Vector = void 0;\n      var n = e("./Vector/Vector");\n      r.Vector = n.default;\n      var i = e("./Stack/Stack");\n      r.Stack = i.default;\n      var o = e("./Queue/Queue");\n      r.Queue = o.default;\n      var s = e("./LinkList/LinkList");\n      r.LinkList = s.default;\n      var a = e("./Deque/Deque");\n      r.Deque = a.default;\n      var l = e("./PriorityQueue/PriorityQueue");\n      r.PriorityQueue = l.default;\n      var u = e("./Set/Set");\n      r.Set = u.default;\n      var c = e("./Map/Map");\n      r.Map = c.default;\n      var h = e("./HashSet/HashSet");\n      r.HashSet = h.default;\n      var f = e("./HashMap/HashMap");\n      r.HashMap = f.default;\n    }, {\n      "./Deque/Deque": 26,\n      "./HashMap/HashMap": 27,\n      "./HashSet/HashSet": 28,\n      "./LinkList/LinkList": 29,\n      "./Map/Map": 30,\n      "./PriorityQueue/PriorityQueue": 31,\n      "./Queue/Queue": 32,\n      "./Set/Set": 33,\n      "./Stack/Stack": 34,\n      "./Vector/Vector": 35\n    }],\n    37: [function (e, t, r) {\n      "use strict";\n\n      const n = e("yallist"),\n            i = Symbol("max"),\n            o = Symbol("length"),\n            s = Symbol("lengthCalculator"),\n            a = Symbol("allowStale"),\n            l = Symbol("maxAge"),\n            u = Symbol("dispose"),\n            c = Symbol("noDisposeOnSet"),\n            h = Symbol("lruList"),\n            f = Symbol("cache"),\n            p = Symbol("updateAgeOnGet"),\n            d = () => 1;\n\n      const g = (e, t, r) => {\n        const n = e[f].get(t);\n\n        if (n) {\n          const t = n.value;\n\n          if (y(e, t)) {\n            if (m(e, n), !e[a]) return;\n          } else r && (e[p] && (n.value.now = Date.now()), e[h].unshiftNode(n));\n\n          return t.value;\n        }\n      },\n            y = (e, t) => {\n        if (!t || !t.maxAge && !e[l]) return !1;\n        const r = Date.now() - t.now;\n        return t.maxAge ? r > t.maxAge : e[l] && r > e[l];\n      },\n            b = e => {\n        if (e[o] > e[i]) for (let t = e[h].tail; e[o] > e[i] && null !== t;) {\n          const r = t.prev;\n          m(e, t), t = r;\n        }\n      },\n            m = (e, t) => {\n        if (t) {\n          const r = t.value;\n          e[u] && e[u](r.key, r.value), e[o] -= r.length, e[f].delete(r.key), e[h].removeNode(t);\n        }\n      };\n\n      class v {\n        constructor(e, t, r, n, i) {\n          this.key = e, this.value = t, this.length = r, this.now = n, this.maxAge = i || 0;\n        }\n\n      }\n\n      const w = (e, t, r, n) => {\n        let i = r.value;\n        y(e, i) && (m(e, r), e[a] || (i = void 0)), i && t.call(n, i.value, i.key, e);\n      };\n\n      t.exports = class {\n        constructor(e) {\n          if ("number" == typeof e && (e = {\n            max: e\n          }), e || (e = {}), e.max && ("number" != typeof e.max || e.max < 0)) throw new TypeError("max must be a non-negative number");\n          this[i] = e.max || 1 / 0;\n          const t = e.length || d;\n          if (this[s] = "function" != typeof t ? d : t, this[a] = e.stale || !1, e.maxAge && "number" != typeof e.maxAge) throw new TypeError("maxAge must be a number");\n          this[l] = e.maxAge || 0, this[u] = e.dispose, this[c] = e.noDisposeOnSet || !1, this[p] = e.updateAgeOnGet || !1, this.reset();\n        }\n\n        set max(e) {\n          if ("number" != typeof e || e < 0) throw new TypeError("max must be a non-negative number");\n          this[i] = e || 1 / 0, b(this);\n        }\n\n        get max() {\n          return this[i];\n        }\n\n        set allowStale(e) {\n          this[a] = !!e;\n        }\n\n        get allowStale() {\n          return this[a];\n        }\n\n        set maxAge(e) {\n          if ("number" != typeof e) throw new TypeError("maxAge must be a non-negative number");\n          this[l] = e, b(this);\n        }\n\n        get maxAge() {\n          return this[l];\n        }\n\n        set lengthCalculator(e) {\n          "function" != typeof e && (e = d), e !== this[s] && (this[s] = e, this[o] = 0, this[h].forEach(e => {\n            e.length = this[s](e.value, e.key), this[o] += e.length;\n          })), b(this);\n        }\n\n        get lengthCalculator() {\n          return this[s];\n        }\n\n        get length() {\n          return this[o];\n        }\n\n        get itemCount() {\n          return this[h].length;\n        }\n\n        rforEach(e, t) {\n          t = t || this;\n\n          for (let r = this[h].tail; null !== r;) {\n            const n = r.prev;\n            w(this, e, r, t), r = n;\n          }\n        }\n\n        forEach(e, t) {\n          t = t || this;\n\n          for (let r = this[h].head; null !== r;) {\n            const n = r.next;\n            w(this, e, r, t), r = n;\n          }\n        }\n\n        keys() {\n          return this[h].toArray().map(e => e.key);\n        }\n\n        values() {\n          return this[h].toArray().map(e => e.value);\n        }\n\n        reset() {\n          this[u] && this[h] && this[h].length && this[h].forEach(e => this[u](e.key, e.value)), this[f] = new Map(), this[h] = new n(), this[o] = 0;\n        }\n\n        dump() {\n          return this[h].map(e => !y(this, e) && {\n            k: e.key,\n            v: e.value,\n            e: e.now + (e.maxAge || 0)\n          }).toArray().filter(e => e);\n        }\n\n        dumpLru() {\n          return this[h];\n        }\n\n        set(e, t, r) {\n          if ((r = r || this[l]) && "number" != typeof r) throw new TypeError("maxAge must be a number");\n          const n = r ? Date.now() : 0,\n                a = this[s](t, e);\n\n          if (this[f].has(e)) {\n            if (a > this[i]) return m(this, this[f].get(e)), !1;\n            const s = this[f].get(e).value;\n            return this[u] && (this[c] || this[u](e, s.value)), s.now = n, s.maxAge = r, s.value = t, this[o] += a - s.length, s.length = a, this.get(e), b(this), !0;\n          }\n\n          const p = new v(e, t, a, n, r);\n          return p.length > this[i] ? (this[u] && this[u](e, t), !1) : (this[o] += p.length, this[h].unshift(p), this[f].set(e, this[h].head), b(this), !0);\n        }\n\n        has(e) {\n          if (!this[f].has(e)) return !1;\n          const t = this[f].get(e).value;\n          return !y(this, t);\n        }\n\n        get(e) {\n          return g(this, e, !0);\n        }\n\n        peek(e) {\n          return g(this, e, !1);\n        }\n\n        pop() {\n          const e = this[h].tail;\n          return e ? (m(this, e), e.value) : null;\n        }\n\n        del(e) {\n          m(this, this[f].get(e));\n        }\n\n        load(e) {\n          this.reset();\n          const t = Date.now();\n\n          for (let r = e.length - 1; r >= 0; r--) {\n            const n = e[r],\n                  i = n.e || 0;\n            if (0 === i) this.set(n.k, n.v);else {\n              const e = i - t;\n              e > 0 && this.set(n.k, n.v, e);\n            }\n          }\n        }\n\n        prune() {\n          this[f].forEach((e, t) => g(this, t, !1));\n        }\n\n      };\n    }, {\n      yallist: 83\n    }],\n    38: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          const r = t.exports;\n          r.types = {\n            0: "reserved",\n            1: "connect",\n            2: "connack",\n            3: "publish",\n            4: "puback",\n            5: "pubrec",\n            6: "pubrel",\n            7: "pubcomp",\n            8: "subscribe",\n            9: "suback",\n            10: "unsubscribe",\n            11: "unsuback",\n            12: "pingreq",\n            13: "pingresp",\n            14: "disconnect",\n            15: "auth"\n          }, r.codes = {};\n\n          for (const e in r.types) {\n            const t = r.types[e];\n            r.codes[t] = e;\n          }\n\n          r.CMD_SHIFT = 4, r.CMD_MASK = 240, r.DUP_MASK = 8, r.QOS_MASK = 3, r.QOS_SHIFT = 1, r.RETAIN_MASK = 1, r.VARBYTEINT_MASK = 127, r.VARBYTEINT_FIN_MASK = 128, r.VARBYTEINT_MAX = 268435455, r.SESSIONPRESENT_MASK = 1, r.SESSIONPRESENT_HEADER = e.from([r.SESSIONPRESENT_MASK]), r.CONNACK_HEADER = e.from([r.codes.connack << r.CMD_SHIFT]), r.USERNAME_MASK = 128, r.PASSWORD_MASK = 64, r.WILL_RETAIN_MASK = 32, r.WILL_QOS_MASK = 24, r.WILL_QOS_SHIFT = 3, r.WILL_FLAG_MASK = 4, r.CLEAN_SESSION_MASK = 2, r.CONNECT_HEADER = e.from([r.codes.connect << r.CMD_SHIFT]), r.properties = {\n            sessionExpiryInterval: 17,\n            willDelayInterval: 24,\n            receiveMaximum: 33,\n            maximumPacketSize: 39,\n            topicAliasMaximum: 34,\n            requestResponseInformation: 25,\n            requestProblemInformation: 23,\n            userProperties: 38,\n            authenticationMethod: 21,\n            authenticationData: 22,\n            payloadFormatIndicator: 1,\n            messageExpiryInterval: 2,\n            contentType: 3,\n            responseTopic: 8,\n            correlationData: 9,\n            maximumQoS: 36,\n            retainAvailable: 37,\n            assignedClientIdentifier: 18,\n            reasonString: 31,\n            wildcardSubscriptionAvailable: 40,\n            subscriptionIdentifiersAvailable: 41,\n            sharedSubscriptionAvailable: 42,\n            serverKeepAlive: 19,\n            responseInformation: 26,\n            serverReference: 28,\n            topicAlias: 35,\n            subscriptionIdentifier: 11\n          }, r.propertiesCodes = {};\n\n          for (const e in r.properties) {\n            const t = r.properties[e];\n            r.propertiesCodes[t] = e;\n          }\n\n          function n(t) {\n            return [0, 1, 2].map(n => [0, 1].map(i => [0, 1].map(o => {\n              const s = e.alloc(1);\n              return s.writeUInt8(r.codes[t] << r.CMD_SHIFT | (i ? r.DUP_MASK : 0) | n << r.QOS_SHIFT | o, 0, !0), s;\n            })));\n          }\n\n          r.propertiesTypes = {\n            sessionExpiryInterval: "int32",\n            willDelayInterval: "int32",\n            receiveMaximum: "int16",\n            maximumPacketSize: "int32",\n            topicAliasMaximum: "int16",\n            requestResponseInformation: "byte",\n            requestProblemInformation: "byte",\n            userProperties: "pair",\n            authenticationMethod: "string",\n            authenticationData: "binary",\n            payloadFormatIndicator: "byte",\n            messageExpiryInterval: "int32",\n            contentType: "string",\n            responseTopic: "string",\n            correlationData: "binary",\n            maximumQoS: "int8",\n            retainAvailable: "byte",\n            assignedClientIdentifier: "string",\n            reasonString: "string",\n            wildcardSubscriptionAvailable: "byte",\n            subscriptionIdentifiersAvailable: "byte",\n            sharedSubscriptionAvailable: "byte",\n            serverKeepAlive: "int16",\n            responseInformation: "string",\n            serverReference: "string",\n            topicAlias: "int16",\n            subscriptionIdentifier: "var"\n          }, r.PUBLISH_HEADER = n("publish"), r.SUBSCRIBE_HEADER = n("subscribe"), r.SUBSCRIBE_OPTIONS_QOS_MASK = 3, r.SUBSCRIBE_OPTIONS_NL_MASK = 1, r.SUBSCRIBE_OPTIONS_NL_SHIFT = 2, r.SUBSCRIBE_OPTIONS_RAP_MASK = 1, r.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3, r.SUBSCRIBE_OPTIONS_RH_MASK = 3, r.SUBSCRIBE_OPTIONS_RH_SHIFT = 4, r.SUBSCRIBE_OPTIONS_RH = [0, 16, 32], r.SUBSCRIBE_OPTIONS_NL = 4, r.SUBSCRIBE_OPTIONS_RAP = 8, r.SUBSCRIBE_OPTIONS_QOS = [0, 1, 2], r.UNSUBSCRIBE_HEADER = n("unsubscribe"), r.ACKS = {\n            unsuback: n("unsuback"),\n            puback: n("puback"),\n            pubcomp: n("pubcomp"),\n            pubrel: n("pubrel"),\n            pubrec: n("pubrec")\n          }, r.SUBACK_HEADER = e.from([r.codes.suback << r.CMD_SHIFT]), r.VERSION3 = e.from([3]), r.VERSION4 = e.from([4]), r.VERSION5 = e.from([5]), r.VERSION131 = e.from([131]), r.VERSION132 = e.from([132]), r.QOS = [0, 1, 2].map(t => e.from([t])), r.EMPTY = {\n            pingreq: e.from([r.codes.pingreq << 4, 0]),\n            pingresp: e.from([r.codes.pingresp << 4, 0]),\n            disconnect: e.from([r.codes.disconnect << 4, 0])\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    39: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          const n = e("./writeToStream"),\n                i = e("events");\n\n          class o extends i {\n            constructor() {\n              super(), this._array = new Array(20), this._i = 0;\n            }\n\n            write(e) {\n              return this._array[this._i++] = e, !0;\n            }\n\n            concat() {\n              let e = 0;\n              const t = new Array(this._array.length),\n                    n = this._array;\n              let i,\n                  o = 0;\n\n              for (i = 0; i < n.length && void 0 !== n[i]; i++) "string" != typeof n[i] ? t[i] = n[i].length : t[i] = r.byteLength(n[i]), e += t[i];\n\n              const s = r.allocUnsafe(e);\n\n              for (i = 0; i < n.length && void 0 !== n[i]; i++) "string" != typeof n[i] ? (n[i].copy(s, o), o += t[i]) : (s.write(n[i], o), o += t[i]);\n\n              return s;\n            }\n\n          }\n\n          t.exports = function (e, t) {\n            const r = new o();\n            return n(e, r, t), r.concat();\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "./writeToStream": 44,\n      buffer: 17,\n      events: 22\n    }],\n    40: [function (e, t, r) {\n      r.parser = e("./parser").parser, r.generate = e("./generate"), r.writeToStream = e("./writeToStream");\n    }, {\n      "./generate": 39,\n      "./parser": 43,\n      "./writeToStream": 44\n    }],\n    41: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          const r = 65536,\n                n = {},\n                i = e.isBuffer(e.from([1, 2]).subarray(0, 1));\n\n          function o(t) {\n            const r = e.allocUnsafe(2);\n            return r.writeUInt8(t >> 8, 0), r.writeUInt8(255 & t, 1), r;\n          }\n\n          t.exports = {\n            cache: n,\n            generateCache: function () {\n              for (let e = 0; e < r; e++) n[e] = o(e);\n            },\n            generateNumber: o,\n            genBufVariableByteInt: function (t) {\n              let r = 0,\n                  n = 0;\n              const o = e.allocUnsafe(4);\n\n              do {\n                r = t % 128 | 0, (t = t / 128 | 0) > 0 && (r |= 128), o.writeUInt8(r, n++);\n              } while (t > 0 && n < 4);\n\n              return t > 0 && (n = 0), i ? o.subarray(0, n) : o.slice(0, n);\n            },\n            generate4ByteBuffer: function (t) {\n              const r = e.allocUnsafe(4);\n              return r.writeUInt32BE(t, 0), r;\n            }\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    42: [function (e, t, r) {\n      t.exports = class {\n        constructor() {\n          this.cmd = null, this.retain = !1, this.qos = 0, this.dup = !1, this.length = -1, this.topic = null, this.payload = null;\n        }\n\n      };\n    }, {}],\n    43: [function (e, t, r) {\n      const n = e("bl"),\n            i = e("events"),\n            o = e("./packet"),\n            s = e("./constants"),\n            a = e("debug")("mqtt-packet:parser");\n\n      class l extends i {\n        constructor() {\n          super(), this.parser = this.constructor.parser;\n        }\n\n        static parser(e) {\n          return this instanceof l ? (this.settings = e || {}, this._states = ["_parseHeader", "_parseLength", "_parsePayload", "_newPacket"], this._resetState(), this) : new l().parser(e);\n        }\n\n        _resetState() {\n          a("_resetState: resetting packet, error, _list, and _stateCounter"), this.packet = new o(), this.error = null, this._list = n(), this._stateCounter = 0;\n        }\n\n        parse(e) {\n          for (this.error && this._resetState(), this._list.append(e), a("parse: current state: %s", this._states[this._stateCounter]); (-1 !== this.packet.length || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error;) this._stateCounter++, a("parse: state complete. _stateCounter is now: %d", this._stateCounter), a("parse: packet.length: %d, buffer list length: %d", this.packet.length, this._list.length), this._stateCounter >= this._states.length && (this._stateCounter = 0);\n\n          return a("parse: exited while loop. packet: %d, buffer list length: %d", this.packet.length, this._list.length), this._list.length;\n        }\n\n        _parseHeader() {\n          const e = this._list.readUInt8(0);\n\n          return this.packet.cmd = s.types[e >> s.CMD_SHIFT], this.packet.retain = 0 != (e & s.RETAIN_MASK), this.packet.qos = e >> s.QOS_SHIFT & s.QOS_MASK, this.packet.dup = 0 != (e & s.DUP_MASK), a("_parseHeader: packet: %o", this.packet), this._list.consume(1), !0;\n        }\n\n        _parseLength() {\n          const e = this._parseVarByteNum(!0);\n\n          return e && (this.packet.length = e.value, this._list.consume(e.bytes)), a("_parseLength %d", e.value), !!e;\n        }\n\n        _parsePayload() {\n          a("_parsePayload: payload %O", this._list);\n          let e = !1;\n\n          if (0 === this.packet.length || this._list.length >= this.packet.length) {\n            switch (this._pos = 0, this.packet.cmd) {\n              case "connect":\n                this._parseConnect();\n\n                break;\n\n              case "connack":\n                this._parseConnack();\n\n                break;\n\n              case "publish":\n                this._parsePublish();\n\n                break;\n\n              case "puback":\n              case "pubrec":\n              case "pubrel":\n              case "pubcomp":\n                this._parseConfirmation();\n\n                break;\n\n              case "subscribe":\n                this._parseSubscribe();\n\n                break;\n\n              case "suback":\n                this._parseSuback();\n\n                break;\n\n              case "unsubscribe":\n                this._parseUnsubscribe();\n\n                break;\n\n              case "unsuback":\n                this._parseUnsuback();\n\n                break;\n\n              case "pingreq":\n              case "pingresp":\n                break;\n\n              case "disconnect":\n                this._parseDisconnect();\n\n                break;\n\n              case "auth":\n                this._parseAuth();\n\n                break;\n\n              default:\n                this._emitError(new Error("Not supported"));\n\n            }\n\n            e = !0;\n          }\n\n          return a("_parsePayload complete result: %s", e), e;\n        }\n\n        _parseConnect() {\n          let e, t, r, n;\n          a("_parseConnect");\n\n          const i = {},\n                o = this.packet,\n                l = this._parseString();\n\n          if (null === l) return this._emitError(new Error("Cannot parse protocolId"));\n          if ("MQTT" !== l && "MQIsdp" !== l) return this._emitError(new Error("Invalid protocolId"));\n          if (o.protocolId = l, this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));\n          if (o.protocolVersion = this._list.readUInt8(this._pos), o.protocolVersion >= 128 && (o.bridgeMode = !0, o.protocolVersion = o.protocolVersion - 128), 3 !== o.protocolVersion && 4 !== o.protocolVersion && 5 !== o.protocolVersion) return this._emitError(new Error("Invalid protocol version"));\n          if (this._pos++, this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));\n          if (i.username = this._list.readUInt8(this._pos) & s.USERNAME_MASK, i.password = this._list.readUInt8(this._pos) & s.PASSWORD_MASK, i.will = this._list.readUInt8(this._pos) & s.WILL_FLAG_MASK, i.will && (o.will = {}, o.will.retain = 0 != (this._list.readUInt8(this._pos) & s.WILL_RETAIN_MASK), o.will.qos = (this._list.readUInt8(this._pos) & s.WILL_QOS_MASK) >> s.WILL_QOS_SHIFT), o.clean = 0 != (this._list.readUInt8(this._pos) & s.CLEAN_SESSION_MASK), this._pos++, o.keepalive = this._parseNum(), -1 === o.keepalive) return this._emitError(new Error("Packet too short"));\n\n          if (5 === o.protocolVersion) {\n            const e = this._parseProperties();\n\n            Object.getOwnPropertyNames(e).length && (o.properties = e);\n          }\n\n          const u = this._parseString();\n\n          if (null === u) return this._emitError(new Error("Packet too short"));\n\n          if (o.clientId = u, a("_parseConnect: packet.clientId: %s", o.clientId), i.will) {\n            if (5 === o.protocolVersion) {\n              const e = this._parseProperties();\n\n              Object.getOwnPropertyNames(e).length && (o.will.properties = e);\n            }\n\n            if (null === (e = this._parseString())) return this._emitError(new Error("Cannot parse will topic"));\n            if (o.will.topic = e, a("_parseConnect: packet.will.topic: %s", o.will.topic), null === (t = this._parseBuffer())) return this._emitError(new Error("Cannot parse will payload"));\n            o.will.payload = t, a("_parseConnect: packet.will.paylaod: %s", o.will.payload);\n          }\n\n          if (i.username) {\n            if (null === (n = this._parseString())) return this._emitError(new Error("Cannot parse username"));\n            o.username = n, a("_parseConnect: packet.username: %s", o.username);\n          }\n\n          if (i.password) {\n            if (null === (r = this._parseBuffer())) return this._emitError(new Error("Cannot parse password"));\n            o.password = r;\n          }\n\n          return this.settings = o, a("_parseConnect: complete"), o;\n        }\n\n        _parseConnack() {\n          a("_parseConnack");\n          const e = this.packet;\n          if (this._list.length < 1) return null;\n          if (e.sessionPresent = !!(this._list.readUInt8(this._pos++) & s.SESSIONPRESENT_MASK), 5 === this.settings.protocolVersion) this._list.length >= 2 ? e.reasonCode = this._list.readUInt8(this._pos++) : e.reasonCode = 0;else {\n            if (this._list.length < 2) return null;\n            e.returnCode = this._list.readUInt8(this._pos++);\n          }\n          if (-1 === e.returnCode || -1 === e.reasonCode) return this._emitError(new Error("Cannot parse return code"));\n\n          if (5 === this.settings.protocolVersion) {\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          a("_parseConnack: complete");\n        }\n\n        _parsePublish() {\n          a("_parsePublish");\n          const e = this.packet;\n          if (e.topic = this._parseString(), null === e.topic) return this._emitError(new Error("Cannot parse topic"));\n\n          if (!(e.qos > 0) || this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            e.payload = this._list.slice(this._pos, e.length), a("_parsePublish: payload from buffer list: %o", e.payload);\n          }\n        }\n\n        _parseSubscribe() {\n          a("_parseSubscribe");\n          const e = this.packet;\n          let t, r, n, i, o, l, u;\n          if (1 !== e.qos) return this._emitError(new Error("Wrong subscribe header"));\n\n          if (e.subscriptions = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < e.length;) {\n              if (null === (t = this._parseString())) return this._emitError(new Error("Cannot parse topic"));\n              if (this._pos >= e.length) return this._emitError(new Error("Malformed Subscribe Payload"));\n              n = (r = this._parseByte()) & s.SUBSCRIBE_OPTIONS_QOS_MASK, l = 0 != (r >> s.SUBSCRIBE_OPTIONS_NL_SHIFT & s.SUBSCRIBE_OPTIONS_NL_MASK), o = 0 != (r >> s.SUBSCRIBE_OPTIONS_RAP_SHIFT & s.SUBSCRIBE_OPTIONS_RAP_MASK), i = r >> s.SUBSCRIBE_OPTIONS_RH_SHIFT & s.SUBSCRIBE_OPTIONS_RH_MASK, u = {\n                topic: t,\n                qos: n\n              }, 5 === this.settings.protocolVersion ? (u.nl = l, u.rap = o, u.rh = i) : this.settings.bridgeMode && (u.rh = 0, u.rap = !0, u.nl = !0), a("_parseSubscribe: push subscription `%s` to subscription", u), e.subscriptions.push(u);\n            }\n          }\n        }\n\n        _parseSuback() {\n          a("_parseSuback");\n          const e = this.packet;\n\n          if (this.packet.granted = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < this.packet.length;) this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n\n        _parseUnsubscribe() {\n          a("_parseUnsubscribe");\n          const e = this.packet;\n\n          if (e.unsubscriptions = [], this._parseMessageId()) {\n            if (5 === this.settings.protocolVersion) {\n              const t = this._parseProperties();\n\n              Object.getOwnPropertyNames(t).length && (e.properties = t);\n            }\n\n            for (; this._pos < e.length;) {\n              const t = this._parseString();\n\n              if (null === t) return this._emitError(new Error("Cannot parse topic"));\n              a("_parseUnsubscribe: push topic `%s` to unsubscriptions", t), e.unsubscriptions.push(t);\n            }\n          }\n        }\n\n        _parseUnsuback() {\n          a("_parseUnsuback");\n          const e = this.packet;\n          if (!this._parseMessageId()) return this._emitError(new Error("Cannot parse messageId"));\n\n          if (5 === this.settings.protocolVersion) {\n            const t = this._parseProperties();\n\n            for (Object.getOwnPropertyNames(t).length && (e.properties = t), e.granted = []; this._pos < this.packet.length;) this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n\n        _parseConfirmation() {\n          a("_parseConfirmation: packet.cmd: `%s`", this.packet.cmd);\n          const e = this.packet;\n\n          if (this._parseMessageId(), 5 === this.settings.protocolVersion && (e.length > 2 ? (e.reasonCode = this._parseByte(), a("_parseConfirmation: packet.reasonCode `%d`", e.reasonCode)) : e.reasonCode = 0, e.length > 3)) {\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          return !0;\n        }\n\n        _parseDisconnect() {\n          const e = this.packet;\n\n          if (a("_parseDisconnect"), 5 === this.settings.protocolVersion) {\n            this._list.length > 0 ? e.reasonCode = this._parseByte() : e.reasonCode = 0;\n\n            const t = this._parseProperties();\n\n            Object.getOwnPropertyNames(t).length && (e.properties = t);\n          }\n\n          return a("_parseDisconnect result: true"), !0;\n        }\n\n        _parseAuth() {\n          a("_parseAuth");\n          const e = this.packet;\n          if (5 !== this.settings.protocolVersion) return this._emitError(new Error("Not supported auth packet for this version MQTT"));\n          e.reasonCode = this._parseByte();\n\n          const t = this._parseProperties();\n\n          return Object.getOwnPropertyNames(t).length && (e.properties = t), a("_parseAuth: result: true"), !0;\n        }\n\n        _parseMessageId() {\n          const e = this.packet;\n          return e.messageId = this._parseNum(), null === e.messageId ? (this._emitError(new Error("Cannot parse messageId")), !1) : (a("_parseMessageId: packet.messageId %d", e.messageId), !0);\n        }\n\n        _parseString(e) {\n          const t = this._parseNum(),\n                r = t + this._pos;\n\n          if (-1 === t || r > this._list.length || r > this.packet.length) return null;\n\n          const n = this._list.toString("utf8", this._pos, r);\n\n          return this._pos += t, a("_parseString: result: %s", n), n;\n        }\n\n        _parseStringPair() {\n          return a("_parseStringPair"), {\n            name: this._parseString(),\n            value: this._parseString()\n          };\n        }\n\n        _parseBuffer() {\n          const e = this._parseNum(),\n                t = e + this._pos;\n\n          if (-1 === e || t > this._list.length || t > this.packet.length) return null;\n\n          const r = this._list.slice(this._pos, t);\n\n          return this._pos += e, a("_parseBuffer: result: %o", r), r;\n        }\n\n        _parseNum() {\n          if (this._list.length - this._pos < 2) return -1;\n\n          const e = this._list.readUInt16BE(this._pos);\n\n          return this._pos += 2, a("_parseNum: result: %s", e), e;\n        }\n\n        _parse4ByteNum() {\n          if (this._list.length - this._pos < 4) return -1;\n\n          const e = this._list.readUInt32BE(this._pos);\n\n          return this._pos += 4, a("_parse4ByteNum: result: %s", e), e;\n        }\n\n        _parseVarByteNum(e) {\n          a("_parseVarByteNum");\n          let t,\n              r = 0,\n              n = 1,\n              i = 0,\n              o = !1;\n          const l = this._pos ? this._pos : 0;\n\n          for (; r < 4 && l + r < this._list.length;) {\n            if (i += n * ((t = this._list.readUInt8(l + r++)) & s.VARBYTEINT_MASK), n *= 128, 0 == (t & s.VARBYTEINT_FIN_MASK)) {\n              o = !0;\n              break;\n            }\n\n            if (this._list.length <= r) break;\n          }\n\n          return !o && 4 === r && this._list.length >= r && this._emitError(new Error("Invalid variable byte integer")), l && (this._pos += r), a("_parseVarByteNum: result: %o", o = !!o && (e ? {\n            bytes: r,\n            value: i\n          } : i)), o;\n        }\n\n        _parseByte() {\n          let e;\n          return this._pos < this._list.length && (e = this._list.readUInt8(this._pos), this._pos++), a("_parseByte: result: %o", e), e;\n        }\n\n        _parseByType(e) {\n          switch (a("_parseByType: type: %s", e), e) {\n            case "byte":\n              return 0 !== this._parseByte();\n\n            case "int8":\n              return this._parseByte();\n\n            case "int16":\n              return this._parseNum();\n\n            case "int32":\n              return this._parse4ByteNum();\n\n            case "var":\n              return this._parseVarByteNum();\n\n            case "string":\n              return this._parseString();\n\n            case "pair":\n              return this._parseStringPair();\n\n            case "binary":\n              return this._parseBuffer();\n          }\n        }\n\n        _parseProperties() {\n          a("_parseProperties");\n\n          const e = this._parseVarByteNum(),\n                t = this._pos + e,\n                r = {};\n\n          for (; this._pos < t;) {\n            const e = this._parseByte();\n\n            if (!e) return this._emitError(new Error("Cannot parse property code type")), !1;\n            const t = s.propertiesCodes[e];\n            if (!t) return this._emitError(new Error("Unknown property")), !1;\n            if ("userProperties" !== t) r[t] ? Array.isArray(r[t]) ? r[t].push(this._parseByType(s.propertiesTypes[t])) : (r[t] = [r[t]], r[t].push(this._parseByType(s.propertiesTypes[t]))) : r[t] = this._parseByType(s.propertiesTypes[t]);else {\n              r[t] || (r[t] = Object.create(null));\n\n              const e = this._parseByType(s.propertiesTypes[t]);\n\n              if (r[t][e.name]) {\n                if (Array.isArray(r[t][e.name])) r[t][e.name].push(e.value);else {\n                  const n = r[t][e.name];\n                  r[t][e.name] = [n], r[t][e.name].push(e.value);\n                }\n              } else r[t][e.name] = e.value;\n            }\n          }\n\n          return r;\n        }\n\n        _newPacket() {\n          return a("_newPacket"), this.packet && (this._list.consume(this.packet.length), a("_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d", this.packet.cmd, this.packet.payload, this.packet.length), this.emit("packet", this.packet)), a("_newPacket: new packet"), this.packet = new o(), this._pos = 0, !0;\n        }\n\n        _emitError(e) {\n          a("_emitError"), this.error = e, this.emit("error", e);\n        }\n\n      }\n\n      t.exports = l;\n    }, {\n      "./constants": 38,\n      "./packet": 42,\n      bl: 15,\n      debug: 18,\n      events: 22\n    }],\n    44: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          const n = e("./constants"),\n                i = r.allocUnsafe(0),\n                o = r.from([0]),\n                s = e("./numbers"),\n                a = e("process-nextick-args").nextTick,\n                l = e("debug")("mqtt-packet:writeToStream"),\n                u = s.cache,\n                c = s.generateNumber,\n                h = s.generateCache,\n                f = s.genBufVariableByteInt,\n                p = s.generate4ByteBuffer;\n          let d = k,\n              g = !0;\n\n          function y(e, t, s) {\n            switch (l("generate called"), t.cork && (t.cork(), a(b, t)), g && (g = !1, h()), l("generate: packet.cmd: %s", e.cmd), e.cmd) {\n              case "connect":\n                return function (e, t, i) {\n                  const o = e || {},\n                        s = o.protocolId || "MQTT";\n                  let a = o.protocolVersion || 4;\n                  const l = o.will;\n                  let u = o.clean;\n                  const c = o.keepalive || 0,\n                        h = o.clientId || "",\n                        f = o.username,\n                        p = o.password,\n                        g = o.properties;\n                  void 0 === u && (u = !0);\n                  let y = 0;\n                  if (!s || "string" != typeof s && !r.isBuffer(s)) return t.emit("error", new Error("Invalid protocolId")), !1;\n                  y += s.length + 2;\n                  if (3 !== a && 4 !== a && 5 !== a) return t.emit("error", new Error("Invalid protocol version")), !1;\n                  y += 1;\n                  if (("string" == typeof h || r.isBuffer(h)) && (h || a >= 4) && (h || u)) y += r.byteLength(h) + 2;else {\n                    if (a < 4) return t.emit("error", new Error("clientId must be supplied before 3.1.1")), !1;\n                    if (1 * u == 0) return t.emit("error", new Error("clientId must be given if cleanSession set to 0")), !1;\n                  }\n                  if ("number" != typeof c || c < 0 || c > 65535 || c % 1 != 0) return t.emit("error", new Error("Invalid keepalive")), !1;\n                  y += 2;\n\n                  if (y += 1, 5 === a) {\n                    var b = C(t, g);\n                    if (!b) return !1;\n                    y += b.length;\n                  }\n\n                  if (l) {\n                    if ("object" != typeof l) return t.emit("error", new Error("Invalid will")), !1;\n                    if (!l.topic || "string" != typeof l.topic) return t.emit("error", new Error("Invalid will topic")), !1;\n\n                    if (y += r.byteLength(l.topic) + 2, y += 2, l.payload) {\n                      if (!(l.payload.length >= 0)) return t.emit("error", new Error("Invalid will payload")), !1;\n                      "string" == typeof l.payload ? y += r.byteLength(l.payload) : y += l.payload.length;\n                    }\n\n                    var m = {};\n\n                    if (5 === a) {\n                      if (!(m = C(t, l.properties))) return !1;\n                      y += m.length;\n                    }\n                  }\n\n                  let _ = !1;\n\n                  if (null != f) {\n                    if (!P(f)) return t.emit("error", new Error("Invalid username")), !1;\n                    _ = !0, y += r.byteLength(f) + 2;\n                  }\n\n                  if (null != p) {\n                    if (!_) return t.emit("error", new Error("Username is required to use password")), !1;\n                    if (!P(p)) return t.emit("error", new Error("Invalid password")), !1;\n                    y += I(p) + 2;\n                  }\n\n                  t.write(n.CONNECT_HEADER), v(t, y), E(t, s), o.bridgeMode && (a += 128);\n                  t.write(131 === a ? n.VERSION131 : 132 === a ? n.VERSION132 : 4 === a ? n.VERSION4 : 5 === a ? n.VERSION5 : n.VERSION3);\n                  let k = 0;\n                  k |= null != f ? n.USERNAME_MASK : 0, k |= null != p ? n.PASSWORD_MASK : 0, k |= l && l.retain ? n.WILL_RETAIN_MASK : 0, k |= l && l.qos ? l.qos << n.WILL_QOS_SHIFT : 0, k |= l ? n.WILL_FLAG_MASK : 0, k |= u ? n.CLEAN_SESSION_MASK : 0, t.write(r.from([k])), d(t, c), 5 === a && b.write();\n                  E(t, h), l && (5 === a && m.write(), w(t, l.topic), E(t, l.payload));\n                  null != f && E(t, f);\n                  null != p && E(t, p);\n                  return !0;\n                }(e, t);\n\n              case "connack":\n                return function (e, t, i) {\n                  const s = i ? i.protocolVersion : 4,\n                        a = e || {},\n                        l = 5 === s ? a.reasonCode : a.returnCode,\n                        u = a.properties;\n                  let c = 2;\n                  if ("number" != typeof l) return t.emit("error", new Error("Invalid return code")), !1;\n                  let h = null;\n\n                  if (5 === s) {\n                    if (!(h = C(t, u))) return !1;\n                    c += h.length;\n                  }\n\n                  t.write(n.CONNACK_HEADER), v(t, c), t.write(a.sessionPresent ? n.SESSIONPRESENT_HEADER : o), t.write(r.from([l])), null != h && h.write();\n                  return !0;\n                }(e, t, s);\n\n              case "publish":\n                return function (e, t, o) {\n                  l("publish: packet: %o", e);\n                  const s = o ? o.protocolVersion : 4,\n                        a = e || {},\n                        u = a.qos || 0,\n                        c = a.retain ? n.RETAIN_MASK : 0,\n                        h = a.topic,\n                        f = a.payload || i,\n                        p = a.messageId,\n                        g = a.properties;\n                  let y = 0;\n                  if ("string" == typeof h) y += r.byteLength(h) + 2;else {\n                    if (!r.isBuffer(h)) return t.emit("error", new Error("Invalid topic")), !1;\n                    y += h.length + 2;\n                  }\n                  r.isBuffer(f) ? y += f.length : y += r.byteLength(f);\n                  if (u && "number" != typeof p) return t.emit("error", new Error("Invalid messageId")), !1;\n                  u && (y += 2);\n                  let b = null;\n\n                  if (5 === s) {\n                    if (!(b = C(t, g))) return !1;\n                    y += b.length;\n                  }\n\n                  t.write(n.PUBLISH_HEADER[u][a.dup ? 1 : 0][c ? 1 : 0]), v(t, y), d(t, I(h)), t.write(h), u > 0 && d(t, p);\n                  null != b && b.write();\n                  return l("publish: payload: %o", f), t.write(f);\n                }(e, t, s);\n\n              case "puback":\n              case "pubrec":\n              case "pubrel":\n              case "pubcomp":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.cmd || "puback",\n                        l = s.messageId,\n                        u = s.dup && "pubrel" === a ? n.DUP_MASK : 0;\n                  let c = 0;\n                  const h = s.reasonCode,\n                        f = s.properties;\n                  let p = 5 === o ? 3 : 2;\n                  "pubrel" === a && (c = 1);\n                  if ("number" != typeof l) return t.emit("error", new Error("Invalid messageId")), !1;\n                  let g = null;\n\n                  if (5 === o && "object" == typeof f) {\n                    if (!(g = T(t, f, i, p))) return !1;\n                    p += g.length;\n                  }\n\n                  t.write(n.ACKS[a][c][u][0]), v(t, p), d(t, l), 5 === o && t.write(r.from([h]));\n                  null !== g && g.write();\n                  return !0;\n                }(e, t, s);\n\n              case "subscribe":\n                return function (e, t, i) {\n                  l("subscribe: packet: ");\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.dup ? n.DUP_MASK : 0,\n                        u = s.messageId,\n                        c = s.subscriptions,\n                        h = s.properties;\n                  let f = 0;\n                  if ("number" != typeof u) return t.emit("error", new Error("Invalid messageId")), !1;\n                  f += 2;\n                  let p = null;\n\n                  if (5 === o) {\n                    if (!(p = C(t, h))) return !1;\n                    f += p.length;\n                  }\n\n                  if ("object" != typeof c || !c.length) return t.emit("error", new Error("Invalid subscriptions")), !1;\n\n                  for (let e = 0; e < c.length; e += 1) {\n                    const n = c[e].topic,\n                          i = c[e].qos;\n                    if ("string" != typeof n) return t.emit("error", new Error("Invalid subscriptions - invalid topic")), !1;\n                    if ("number" != typeof i) return t.emit("error", new Error("Invalid subscriptions - invalid qos")), !1;\n\n                    if (5 === o) {\n                      const r = c[e].nl || !1;\n                      if ("boolean" != typeof r) return t.emit("error", new Error("Invalid subscriptions - invalid No Local")), !1;\n                      const n = c[e].rap || !1;\n                      if ("boolean" != typeof n) return t.emit("error", new Error("Invalid subscriptions - invalid Retain as Published")), !1;\n                      const i = c[e].rh || 0;\n                      if ("number" != typeof i || i > 2) return t.emit("error", new Error("Invalid subscriptions - invalid Retain Handling")), !1;\n                    }\n\n                    f += r.byteLength(n) + 2 + 1;\n                  }\n\n                  l("subscribe: writing to stream: %o", n.SUBSCRIBE_HEADER), t.write(n.SUBSCRIBE_HEADER[1][a ? 1 : 0][0]), v(t, f), d(t, u), null !== p && p.write();\n                  let g = !0;\n\n                  for (const e of c) {\n                    const i = e.topic,\n                          s = e.qos,\n                          a = +e.nl,\n                          l = +e.rap,\n                          u = e.rh;\n                    let c;\n                    w(t, i), c = n.SUBSCRIBE_OPTIONS_QOS[s], 5 === o && (c |= a ? n.SUBSCRIBE_OPTIONS_NL : 0, c |= l ? n.SUBSCRIBE_OPTIONS_RAP : 0, c |= u ? n.SUBSCRIBE_OPTIONS_RH[u] : 0), g = t.write(r.from([c]));\n                  }\n\n                  return g;\n                }(e, t, s);\n\n              case "suback":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.granted,\n                        u = s.properties;\n                  let c = 0;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n                  c += 2;\n                  if ("object" != typeof l || !l.length) return t.emit("error", new Error("Invalid qos vector")), !1;\n\n                  for (let e = 0; e < l.length; e += 1) {\n                    if ("number" != typeof l[e]) return t.emit("error", new Error("Invalid qos vector")), !1;\n                    c += 1;\n                  }\n\n                  let h = null;\n\n                  if (5 === o) {\n                    if (!(h = T(t, u, i, c))) return !1;\n                    c += h.length;\n                  }\n\n                  t.write(n.SUBACK_HEADER), v(t, c), d(t, a), null !== h && h.write();\n                  return t.write(r.from(l));\n                }(e, t, s);\n\n              case "unsubscribe":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.dup ? n.DUP_MASK : 0,\n                        u = s.unsubscriptions,\n                        c = s.properties;\n                  let h = 0;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n                  h += 2;\n                  if ("object" != typeof u || !u.length) return t.emit("error", new Error("Invalid unsubscriptions")), !1;\n\n                  for (let e = 0; e < u.length; e += 1) {\n                    if ("string" != typeof u[e]) return t.emit("error", new Error("Invalid unsubscriptions")), !1;\n                    h += r.byteLength(u[e]) + 2;\n                  }\n\n                  let f = null;\n\n                  if (5 === o) {\n                    if (!(f = C(t, c))) return !1;\n                    h += f.length;\n                  }\n\n                  t.write(n.UNSUBSCRIBE_HEADER[1][l ? 1 : 0][0]), v(t, h), d(t, a), null !== f && f.write();\n                  let p = !0;\n\n                  for (let e = 0; e < u.length; e++) p = w(t, u[e]);\n\n                  return p;\n                }(e, t, s);\n\n              case "unsuback":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.messageId,\n                        l = s.dup ? n.DUP_MASK : 0,\n                        u = s.granted,\n                        c = s.properties,\n                        h = s.cmd;\n                  let f = 2;\n                  if ("number" != typeof a) return t.emit("error", new Error("Invalid messageId")), !1;\n\n                  if (5 === o) {\n                    if ("object" != typeof u || !u.length) return t.emit("error", new Error("Invalid qos vector")), !1;\n\n                    for (let e = 0; e < u.length; e += 1) {\n                      if ("number" != typeof u[e]) return t.emit("error", new Error("Invalid qos vector")), !1;\n                      f += 1;\n                    }\n                  }\n\n                  let p = null;\n\n                  if (5 === o) {\n                    if (!(p = T(t, c, i, f))) return !1;\n                    f += p.length;\n                  }\n\n                  t.write(n.ACKS[h][0][l][0]), v(t, f), d(t, a), null !== p && p.write();\n                  5 === o && t.write(r.from(u));\n                  return !0;\n                }(e, t, s);\n\n              case "pingreq":\n              case "pingresp":\n                return function (e, t, r) {\n                  return t.write(n.EMPTY[e.cmd]);\n                }(e, t);\n\n              case "disconnect":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.reasonCode,\n                        l = s.properties;\n                  let u = 5 === o ? 1 : 0,\n                      c = null;\n\n                  if (5 === o) {\n                    if (!(c = T(t, l, i, u))) return !1;\n                    u += c.length;\n                  }\n\n                  t.write(r.from([n.codes.disconnect << 4])), v(t, u), 5 === o && t.write(r.from([a]));\n                  null !== c && c.write();\n                  return !0;\n                }(e, t, s);\n\n              case "auth":\n                return function (e, t, i) {\n                  const o = i ? i.protocolVersion : 4,\n                        s = e || {},\n                        a = s.reasonCode,\n                        l = s.properties;\n                  let u = 5 === o ? 1 : 0;\n                  5 !== o && t.emit("error", new Error("Invalid mqtt version for auth packet"));\n                  const c = T(t, l, i, u);\n                  if (!c) return !1;\n                  u += c.length, t.write(r.from([n.codes.auth << 4])), v(t, u), t.write(r.from([a])), null !== c && c.write();\n                  return !0;\n                }(e, t, s);\n\n              default:\n                return t.emit("error", new Error("Unknown command")), !1;\n            }\n          }\n\n          function b(e) {\n            e.uncork();\n          }\n\n          Object.defineProperty(y, "cacheNumbers", {\n            get: () => d === k,\n\n            set(e) {\n              e ? (u && 0 !== Object.keys(u).length || (g = !0), d = k) : (g = !1, d = S);\n            }\n\n          });\n          const m = {};\n\n          function v(e, t) {\n            if (t > n.VARBYTEINT_MAX) return e.emit("error", new Error(`Invalid variable byte integer: ${t}`)), !1;\n            let r = m[t];\n            return r || (r = f(t), t < 16384 && (m[t] = r)), l("writeVarByteInt: writing to stream: %o", r), e.write(r);\n          }\n\n          function w(e, t) {\n            const n = r.byteLength(t);\n            return d(e, n), l("writeString: %s", t), e.write(t, "utf8");\n          }\n\n          function _(e, t, r) {\n            w(e, t), w(e, r);\n          }\n\n          function k(e, t) {\n            return l("writeNumberCached: number: %d", t), l("writeNumberCached: %o", u[t]), e.write(u[t]);\n          }\n\n          function S(e, t) {\n            const r = c(t);\n            return l("writeNumberGenerated: %o", r), e.write(r);\n          }\n\n          function E(e, t) {\n            "string" == typeof t ? w(e, t) : t ? (d(e, t.length), e.write(t)) : d(e, 0);\n          }\n\n          function C(e, t) {\n            if ("object" != typeof t || null != t.length) return {\n              length: 1,\n\n              write() {\n                A(e, {}, 0);\n              }\n\n            };\n            let i = 0;\n\n            function o(t, i) {\n              let o = 0;\n\n              switch (n.propertiesTypes[t]) {\n                case "byte":\n                  if ("boolean" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 2;\n                  break;\n\n                case "int8":\n                  if ("number" != typeof i || i < 0 || i > 255) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 2;\n                  break;\n\n                case "binary":\n                  if (i && null === i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 1 + r.byteLength(i) + 2;\n                  break;\n\n                case "int16":\n                  if ("number" != typeof i || i < 0 || i > 65535) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 3;\n                  break;\n\n                case "int32":\n                  if ("number" != typeof i || i < 0 || i > 4294967295) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 5;\n                  break;\n\n                case "var":\n                  if ("number" != typeof i || i < 0 || i > 268435455) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 1 + r.byteLength(f(i));\n                  break;\n\n                case "string":\n                  if ("string" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += 3 + r.byteLength(i.toString());\n                  break;\n\n                case "pair":\n                  if ("object" != typeof i) return e.emit("error", new Error(`Invalid ${t}: ${i}`)), !1;\n                  o += Object.getOwnPropertyNames(i).reduce((e, t) => {\n                    const n = i[t];\n                    return Array.isArray(n) ? e += n.reduce((e, n) => e += 3 + r.byteLength(t.toString()) + 2 + r.byteLength(n.toString()), 0) : e += 3 + r.byteLength(t.toString()) + 2 + r.byteLength(i[t].toString()), e;\n                  }, 0);\n                  break;\n\n                default:\n                  return e.emit("error", new Error(`Invalid property ${t}: ${i}`)), !1;\n              }\n\n              return o;\n            }\n\n            if (t) for (const e in t) {\n              let r = 0,\n                  n = 0;\n              const s = t[e];\n              if (Array.isArray(s)) for (let t = 0; t < s.length; t++) {\n                if (!(n = o(e, s[t]))) return !1;\n                r += n;\n              } else {\n                if (!(n = o(e, s))) return !1;\n                r = n;\n              }\n              if (!r) return !1;\n              i += r;\n            }\n            return {\n              length: r.byteLength(f(i)) + i,\n\n              write() {\n                A(e, t, i);\n              }\n\n            };\n          }\n\n          function T(e, t, r, n) {\n            const i = ["reasonString", "userProperties"],\n                  o = r && r.properties && r.properties.maximumPacketSize ? r.properties.maximumPacketSize : 0;\n            let s = C(e, t);\n            if (o) for (; n + s.length > o;) {\n              const r = i.shift();\n              if (!r || !t[r]) return !1;\n              delete t[r], s = C(e, t);\n            }\n            return s;\n          }\n\n          function x(e, t, i) {\n            switch (n.propertiesTypes[t]) {\n              case "byte":\n                e.write(r.from([n.properties[t]])), e.write(r.from([+i]));\n                break;\n\n              case "int8":\n                e.write(r.from([n.properties[t]])), e.write(r.from([i]));\n                break;\n\n              case "binary":\n                e.write(r.from([n.properties[t]])), E(e, i);\n                break;\n\n              case "int16":\n                e.write(r.from([n.properties[t]])), d(e, i);\n                break;\n\n              case "int32":\n                e.write(r.from([n.properties[t]])), function (e, t) {\n                  const r = p(t);\n                  l("write4ByteNumber: %o", r), e.write(r);\n                }(e, i);\n                break;\n\n              case "var":\n                e.write(r.from([n.properties[t]])), v(e, i);\n                break;\n\n              case "string":\n                e.write(r.from([n.properties[t]])), w(e, i);\n                break;\n\n              case "pair":\n                Object.getOwnPropertyNames(i).forEach(o => {\n                  const s = i[o];\n                  Array.isArray(s) ? s.forEach(i => {\n                    e.write(r.from([n.properties[t]])), _(e, o.toString(), i.toString());\n                  }) : (e.write(r.from([n.properties[t]])), _(e, o.toString(), s.toString()));\n                });\n                break;\n\n              default:\n                return e.emit("error", new Error(`Invalid property ${t} value: ${i}`)), !1;\n            }\n          }\n\n          function A(e, t, r) {\n            v(e, r);\n\n            for (const r in t) if (Object.prototype.hasOwnProperty.call(t, r) && null !== t[r]) {\n              const n = t[r];\n              if (Array.isArray(n)) for (let t = 0; t < n.length; t++) x(e, r, n[t]);else x(e, r, n);\n            }\n          }\n\n          function I(e) {\n            return e ? e instanceof r ? e.length : r.byteLength(e) : 0;\n          }\n\n          function P(e) {\n            return "string" == typeof e || e instanceof r;\n          }\n\n          t.exports = y;\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      "./constants": 38,\n      "./numbers": 41,\n      buffer: 17,\n      debug: 18,\n      "process-nextick-args": 49\n    }],\n    45: [function (e, t, r) {\n      var n = 1e3,\n          i = 60 * n,\n          o = 60 * i,\n          s = 24 * o,\n          a = 7 * s,\n          l = 365.25 * s;\n\n      function u(e, t, r, n) {\n        var i = t >= 1.5 * r;\n        return Math.round(e / r) + " " + n + (i ? "s" : "");\n      }\n\n      t.exports = function (e, t) {\n        t = t || {};\n        var r = typeof e;\n        if ("string" === r && e.length > 0) return function (e) {\n          if ((e = String(e)).length > 100) return;\n          var t = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);\n          if (!t) return;\n          var r = parseFloat(t[1]);\n\n          switch ((t[2] || "ms").toLowerCase()) {\n            case "years":\n            case "year":\n            case "yrs":\n            case "yr":\n            case "y":\n              return r * l;\n\n            case "weeks":\n            case "week":\n            case "w":\n              return r * a;\n\n            case "days":\n            case "day":\n            case "d":\n              return r * s;\n\n            case "hours":\n            case "hour":\n            case "hrs":\n            case "hr":\n            case "h":\n              return r * o;\n\n            case "minutes":\n            case "minute":\n            case "mins":\n            case "min":\n            case "m":\n              return r * i;\n\n            case "seconds":\n            case "second":\n            case "secs":\n            case "sec":\n            case "s":\n              return r * n;\n\n            case "milliseconds":\n            case "millisecond":\n            case "msecs":\n            case "msec":\n            case "ms":\n              return r;\n\n            default:\n              return;\n          }\n        }(e);\n        if ("number" === r && isFinite(e)) return t.long ? function (e) {\n          var t = Math.abs(e);\n          if (t >= s) return u(e, t, s, "day");\n          if (t >= o) return u(e, t, o, "hour");\n          if (t >= i) return u(e, t, i, "minute");\n          if (t >= n) return u(e, t, n, "second");\n          return e + " ms";\n        }(e) : function (e) {\n          var t = Math.abs(e);\n          if (t >= s) return Math.round(e / s) + "d";\n          if (t >= o) return Math.round(e / o) + "h";\n          if (t >= i) return Math.round(e / i) + "m";\n          if (t >= n) return Math.round(e / n) + "s";\n          return e + "ms";\n        }(e);\n        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));\n      };\n    }, {}],\n    46: [function (e, t, r) {\n      const n = e("./lib/number-allocator.js");\n      t.exports.NumberAllocator = n;\n    }, {\n      "./lib/number-allocator.js": 47\n    }],\n    47: [function (e, t, r) {\n      "use strict";\n\n      const n = e("js-sdsl").Set,\n            i = e("debug")("number-allocator:trace"),\n            o = e("debug")("number-allocator:error");\n\n      function s(e, t) {\n        this.low = e, this.high = t;\n      }\n\n      function a(e, t) {\n        if (!(this instanceof a)) return new a(e, t);\n        this.min = e, this.max = t, this.ss = new n([], (e, t) => e.compare(t)), i("Create"), this.clear();\n      }\n\n      s.prototype.equals = function (e) {\n        return this.low === e.low && this.high === e.high;\n      }, s.prototype.compare = function (e) {\n        return this.low < e.low && this.high < e.low ? -1 : e.low < this.low && e.high < this.low ? 1 : 0;\n      }, a.prototype.firstVacant = function () {\n        return 0 === this.ss.size() ? null : this.ss.front().low;\n      }, a.prototype.alloc = function () {\n        if (0 === this.ss.size()) return i("alloc():empty"), null;\n        const e = this.ss.front(),\n              t = e.low;\n        return t + 1 <= e.high ? ++e.low : this.ss.eraseElementByPos(0), i("alloc():" + t), t;\n      }, a.prototype.use = function (e) {\n        const t = new s(e, e),\n              r = this.ss.lowerBound(t);\n\n        if (r) {\n          if (r.equals(t)) return this.ss.eraseElementByValue(r), i("use():" + e), !0;\n          if (r.low > e) return !1;\n          if (r.low === e) return ++r.low, i("use():" + e), !0;\n          if (r.high === e) return --r.high, i("use():" + e), !0;\n          const n = r.low;\n          return r.low = e + 1, this.ss.insert(new s(n, e - 1)), i("use():" + e), !0;\n        }\n\n        return i("use():failed"), !1;\n      }, a.prototype.free = function (e) {\n        if (e < this.min || e > this.max) return void o("free():" + e + " is out of range");\n        const t = new s(e, e),\n              r = this.ss.lowerBound(t);\n\n        if (r) {\n          if (r.low <= e && e <= r.high) return void o("free():" + e + " has already been vacant");\n          if (r === this.ss.front()) e + 1 === r.low ? --r.low : this.ss.insert(t);else {\n            const n = this.ss.reverseLowerBound(t);\n            n.high + 1 === e ? e + 1 === r.low ? (this.ss.eraseElementByValue(n), r.low = n.low) : n.high = e : e + 1 === r.low ? r.low = e : this.ss.insert(t);\n          }\n        } else {\n          if (r === this.ss.front()) return void this.ss.insert(t);\n          const n = this.ss.reverseLowerBound(t);\n          n.high + 1 === e ? n.high = e : this.ss.insert(t);\n        }\n\n        i("free():" + e);\n      }, a.prototype.clear = function () {\n        i("clear()"), this.ss.clear(), this.ss.insert(new s(this.min, this.max));\n      }, a.prototype.intervalCount = function () {\n        return this.ss.size();\n      }, a.prototype.dump = function () {\n        console.log("length:" + this.ss.size());\n\n        for (const e of this.ss) console.log(e);\n      }, t.exports = a;\n    }, {\n      debug: 18,\n      "js-sdsl": 36\n    }],\n    48: [function (e, t, r) {\n      var n = e("wrappy");\n\n      function i(e) {\n        var t = function () {\n          return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));\n        };\n\n        return t.called = !1, t;\n      }\n\n      function o(e) {\n        var t = function () {\n          if (t.called) throw new Error(t.onceError);\n          return t.called = !0, t.value = e.apply(this, arguments);\n        },\n            r = e.name || "Function wrapped with `once`";\n\n        return t.onceError = r + " shouldn\'t be called more than once", t.called = !1, t;\n      }\n\n      t.exports = n(i), t.exports.strict = n(o), i.proto = i(function () {\n        Object.defineProperty(Function.prototype, "once", {\n          value: function () {\n            return i(this);\n          },\n          configurable: !0\n        }), Object.defineProperty(Function.prototype, "onceStrict", {\n          value: function () {\n            return o(this);\n          },\n          configurable: !0\n        });\n      });\n    }, {\n      wrappy: 79\n    }],\n    49: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          void 0 === e || !e.version || 0 === e.version.indexOf("v0.") || 0 === e.version.indexOf("v1.") && 0 !== e.version.indexOf("v1.8.") ? t.exports = {\n            nextTick: function (t, r, n, i) {\n              if ("function" != typeof t) throw new TypeError(\'"callback" argument must be a function\');\n              var o,\n                  s,\n                  a = arguments.length;\n\n              switch (a) {\n                case 0:\n                case 1:\n                  return e.nextTick(t);\n\n                case 2:\n                  return e.nextTick(function () {\n                    t.call(null, r);\n                  });\n\n                case 3:\n                  return e.nextTick(function () {\n                    t.call(null, r, n);\n                  });\n\n                case 4:\n                  return e.nextTick(function () {\n                    t.call(null, r, n, i);\n                  });\n\n                default:\n                  for (o = new Array(a - 1), s = 0; s < o.length;) o[s++] = arguments[s];\n\n                  return e.nextTick(function () {\n                    t.apply(null, o);\n                  });\n              }\n            }\n          } : t.exports = e;\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50\n    }],\n    50: [function (e, t, r) {\n      var n,\n          i,\n          o = t.exports = {};\n\n      function s() {\n        throw new Error("setTimeout has not been defined");\n      }\n\n      function a() {\n        throw new Error("clearTimeout has not been defined");\n      }\n\n      function l(e) {\n        if (n === setTimeout) return setTimeout(e, 0);\n        if ((n === s || !n) && setTimeout) return n = setTimeout, setTimeout(e, 0);\n\n        try {\n          return n(e, 0);\n        } catch (t) {\n          try {\n            return n.call(null, e, 0);\n          } catch (t) {\n            return n.call(this, e, 0);\n          }\n        }\n      }\n\n      !function () {\n        try {\n          n = "function" == typeof setTimeout ? setTimeout : s;\n        } catch (e) {\n          n = s;\n        }\n\n        try {\n          i = "function" == typeof clearTimeout ? clearTimeout : a;\n        } catch (e) {\n          i = a;\n        }\n      }();\n      var u,\n          c = [],\n          h = !1,\n          f = -1;\n\n      function p() {\n        h && u && (h = !1, u.length ? c = u.concat(c) : f = -1, c.length && d());\n      }\n\n      function d() {\n        if (!h) {\n          var e = l(p);\n          h = !0;\n\n          for (var t = c.length; t;) {\n            for (u = c, c = []; ++f < t;) u && u[f].run();\n\n            f = -1, t = c.length;\n          }\n\n          u = null, h = !1, function (e) {\n            if (i === clearTimeout) return clearTimeout(e);\n            if ((i === a || !i) && clearTimeout) return i = clearTimeout, clearTimeout(e);\n\n            try {\n              i(e);\n            } catch (t) {\n              try {\n                return i.call(null, e);\n              } catch (t) {\n                return i.call(this, e);\n              }\n            }\n          }(e);\n        }\n      }\n\n      function g(e, t) {\n        this.fun = e, this.array = t;\n      }\n\n      function y() {}\n\n      o.nextTick = function (e) {\n        var t = new Array(arguments.length - 1);\n        if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];\n        c.push(new g(e, t)), 1 !== c.length || h || l(d);\n      }, g.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      }, o.title = "browser", o.browser = !0, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = y, o.addListener = y, o.once = y, o.off = y, o.removeListener = y, o.removeAllListeners = y, o.emit = y, o.prependListener = y, o.prependOnceListener = y, o.listeners = function (e) {\n        return [];\n      }, o.binding = function (e) {\n        throw new Error("process.binding is not supported");\n      }, o.cwd = function () {\n        return "/";\n      }, o.chdir = function (e) {\n        throw new Error("process.chdir is not supported");\n      }, o.umask = function () {\n        return 0;\n      };\n    }, {}],\n    51: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          !function (n) {\n            var i = "object" == typeof r && r && !r.nodeType && r,\n                o = "object" == typeof t && t && !t.nodeType && t,\n                s = "object" == typeof e && e;\n            s.global !== s && s.window !== s && s.self !== s || (n = s);\n            var a,\n                l,\n                u = 2147483647,\n                c = 36,\n                h = 1,\n                f = 26,\n                p = 38,\n                d = 700,\n                g = 72,\n                y = 128,\n                b = "-",\n                m = /^xn--/,\n                v = /[^\\x20-\\x7E]/,\n                w = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n                _ = {\n              overflow: "Overflow: input needs wider integers to process",\n              "not-basic": "Illegal input >= 0x80 (not a basic code point)",\n              "invalid-input": "Invalid input"\n            },\n                k = c - h,\n                S = Math.floor,\n                E = String.fromCharCode;\n\n            function C(e) {\n              throw new RangeError(_[e]);\n            }\n\n            function T(e, t) {\n              for (var r = e.length, n = []; r--;) n[r] = t(e[r]);\n\n              return n;\n            }\n\n            function x(e, t) {\n              var r = e.split("@"),\n                  n = "";\n              return r.length > 1 && (n = r[0] + "@", e = r[1]), n + T((e = e.replace(w, ".")).split("."), t).join(".");\n            }\n\n            function A(e) {\n              for (var t, r, n = [], i = 0, o = e.length; i < o;) (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);\n\n              return n;\n            }\n\n            function I(e) {\n              return T(e, function (e) {\n                var t = "";\n                return e > 65535 && (t += E((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += E(e);\n              }).join("");\n            }\n\n            function P(e, t) {\n              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);\n            }\n\n            function O(e, t, r) {\n              var n = 0;\n\n              for (e = r ? S(e / d) : e >> 1, e += S(e / t); e > k * f >> 1; n += c) e = S(e / k);\n\n              return S(n + (k + 1) * e / (e + p));\n            }\n\n            function B(e) {\n              var t,\n                  r,\n                  n,\n                  i,\n                  o,\n                  s,\n                  a,\n                  l,\n                  p,\n                  d,\n                  m,\n                  v = [],\n                  w = e.length,\n                  _ = 0,\n                  k = y,\n                  E = g;\n\n              for ((r = e.lastIndexOf(b)) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && C("not-basic"), v.push(e.charCodeAt(n));\n\n              for (i = r > 0 ? r + 1 : 0; i < w;) {\n                for (o = _, s = 1, a = c; i >= w && C("invalid-input"), ((l = (m = e.charCodeAt(i++)) - 48 < 10 ? m - 22 : m - 65 < 26 ? m - 65 : m - 97 < 26 ? m - 97 : c) >= c || l > S((u - _) / s)) && C("overflow"), _ += l * s, !(l < (p = a <= E ? h : a >= E + f ? f : a - E)); a += c) s > S(u / (d = c - p)) && C("overflow"), s *= d;\n\n                E = O(_ - o, t = v.length + 1, 0 == o), S(_ / t) > u - k && C("overflow"), k += S(_ / t), _ %= t, v.splice(_++, 0, k);\n              }\n\n              return I(v);\n            }\n\n            function R(e) {\n              var t,\n                  r,\n                  n,\n                  i,\n                  o,\n                  s,\n                  a,\n                  l,\n                  p,\n                  d,\n                  m,\n                  v,\n                  w,\n                  _,\n                  k,\n                  T = [];\n\n              for (v = (e = A(e)).length, t = y, r = 0, o = g, s = 0; s < v; ++s) (m = e[s]) < 128 && T.push(E(m));\n\n              for (n = i = T.length, i && T.push(b); n < v;) {\n                for (a = u, s = 0; s < v; ++s) (m = e[s]) >= t && m < a && (a = m);\n\n                for (a - t > S((u - r) / (w = n + 1)) && C("overflow"), r += (a - t) * w, t = a, s = 0; s < v; ++s) if ((m = e[s]) < t && ++r > u && C("overflow"), m == t) {\n                  for (l = r, p = c; !(l < (d = p <= o ? h : p >= o + f ? f : p - o)); p += c) k = l - d, _ = c - d, T.push(E(P(d + k % _, 0))), l = S(k / _);\n\n                  T.push(E(P(l, 0))), o = O(r, w, n == i), r = 0, ++n;\n                }\n\n                ++r, ++t;\n              }\n\n              return T.join("");\n            }\n\n            if (a = {\n              version: "1.4.1",\n              ucs2: {\n                decode: A,\n                encode: I\n              },\n              decode: B,\n              encode: R,\n              toASCII: function (e) {\n                return x(e, function (e) {\n                  return v.test(e) ? "xn--" + R(e) : e;\n                });\n              },\n              toUnicode: function (e) {\n                return x(e, function (e) {\n                  return m.test(e) ? B(e.slice(4).toLowerCase()) : e;\n                });\n              }\n            }, i && o) {\n              if (t.exports == i) o.exports = a;else for (l in a) a.hasOwnProperty(l) && (i[l] = a[l]);\n            } else n.punycode = a;\n          }(this);\n        }).call(this);\n      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {}],\n    52: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        return Object.prototype.hasOwnProperty.call(e, t);\n      }\n\n      t.exports = function (e, t, r, o) {\n        t = t || "&", r = r || "=";\n        var s = {};\n        if ("string" != typeof e || 0 === e.length) return s;\n        var a = /\\+/g;\n        e = e.split(t);\n        var l = 1e3;\n        o && "number" == typeof o.maxKeys && (l = o.maxKeys);\n        var u = e.length;\n        l > 0 && u > l && (u = l);\n\n        for (var c = 0; c < u; ++c) {\n          var h,\n              f,\n              p,\n              d,\n              g = e[c].replace(a, "%20"),\n              y = g.indexOf(r);\n          y >= 0 ? (h = g.substr(0, y), f = g.substr(y + 1)) : (h = g, f = ""), p = decodeURIComponent(h), d = decodeURIComponent(f), n(s, p) ? i(s[p]) ? s[p].push(d) : s[p] = [s[p], d] : s[p] = d;\n        }\n\n        return s;\n      };\n\n      var i = Array.isArray || function (e) {\n        return "[object Array]" === Object.prototype.toString.call(e);\n      };\n    }, {}],\n    53: [function (e, t, r) {\n      "use strict";\n\n      var n = function (e) {\n        switch (typeof e) {\n          case "string":\n            return e;\n\n          case "boolean":\n            return e ? "true" : "false";\n\n          case "number":\n            return isFinite(e) ? e : "";\n\n          default:\n            return "";\n        }\n      };\n\n      t.exports = function (e, t, r, a) {\n        return t = t || "&", r = r || "=", null === e && (e = void 0), "object" == typeof e ? o(s(e), function (s) {\n          var a = encodeURIComponent(n(s)) + r;\n          return i(e[s]) ? o(e[s], function (e) {\n            return a + encodeURIComponent(n(e));\n          }).join(t) : a + encodeURIComponent(n(e[s]));\n        }).join(t) : a ? encodeURIComponent(n(a)) + r + encodeURIComponent(n(e)) : "";\n      };\n\n      var i = Array.isArray || function (e) {\n        return "[object Array]" === Object.prototype.toString.call(e);\n      };\n\n      function o(e, t) {\n        if (e.map) return e.map(t);\n\n        for (var r = [], n = 0; n < e.length; n++) r.push(t(e[n], n));\n\n        return r;\n      }\n\n      var s = Object.keys || function (e) {\n        var t = [];\n\n        for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.push(r);\n\n        return t;\n      };\n    }, {}],\n    54: [function (e, t, r) {\n      "use strict";\n\n      r.decode = r.parse = e("./decode"), r.encode = r.stringify = e("./encode");\n    }, {\n      "./decode": 52,\n      "./encode": 53\n    }],\n    55: [function (e, t, r) {\n      "use strict";\n\n      var n = {};\n\n      function i(e, t, r) {\n        r || (r = Error);\n\n        var i = function (e) {\n          var r, n;\n\n          function i(r, n, i) {\n            return e.call(this, function (e, r, n) {\n              return "string" == typeof t ? t : t(e, r, n);\n            }(r, n, i)) || this;\n          }\n\n          return n = e, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n, i;\n        }(r);\n\n        i.prototype.name = r.name, i.prototype.code = e, n[e] = i;\n      }\n\n      function o(e, t) {\n        if (Array.isArray(e)) {\n          var r = e.length;\n          return e = e.map(function (e) {\n            return String(e);\n          }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : 2 === r ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);\n        }\n\n        return "of ".concat(t, " ").concat(String(e));\n      }\n\n      i("ERR_INVALID_OPT_VALUE", function (e, t) {\n        return \'The value "\' + t + \'" is invalid for option "\' + e + \'"\';\n      }, TypeError), i("ERR_INVALID_ARG_TYPE", function (e, t, r) {\n        var n, i, s, a;\n        if ("string" == typeof t && (i = "not ", t.substr(!s || s < 0 ? 0 : +s, i.length) === i) ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be", function (e, t, r) {\n          return (void 0 === r || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;\n        }(e, " argument")) a = "The ".concat(e, " ").concat(n, " ").concat(o(t, "type"));else {\n          var l = function (e, t, r) {\n            return "number" != typeof r && (r = 0), !(r + t.length > e.length) && -1 !== e.indexOf(t, r);\n          }(e, ".") ? "property" : "argument";\n          a = \'The "\'.concat(e, \'" \').concat(l, " ").concat(n, " ").concat(o(t, "type"));\n        }\n        return a += ". Received type ".concat(typeof r);\n      }, TypeError), i("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), i("ERR_METHOD_NOT_IMPLEMENTED", function (e) {\n        return "The " + e + " method is not implemented";\n      }), i("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), i("ERR_STREAM_DESTROYED", function (e) {\n        return "Cannot call " + e + " after a stream was destroyed";\n      }), i("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), i("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), i("ERR_STREAM_WRITE_AFTER_END", "write after end"), i("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), i("ERR_UNKNOWN_ENCODING", function (e) {\n        return "Unknown encoding: " + e;\n      }, TypeError), i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), t.exports.codes = n;\n    }, {}],\n    56: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          var n = Object.keys || function (e) {\n            var t = [];\n\n            for (var r in e) t.push(r);\n\n            return t;\n          };\n\n          t.exports = u;\n          var i = e("./_stream_readable"),\n              o = e("./_stream_writable");\n          e("inherits")(u, i);\n\n          for (var s = n(o.prototype), a = 0; a < s.length; a++) {\n            var l = s[a];\n            u.prototype[l] || (u.prototype[l] = o.prototype[l]);\n          }\n\n          function u(e) {\n            if (!(this instanceof u)) return new u(e);\n            i.call(this, e), o.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once("end", c)));\n          }\n\n          function c() {\n            this._writableState.ended || r.nextTick(h, this);\n          }\n\n          function h(e) {\n            e.end();\n          }\n\n          Object.defineProperty(u.prototype, "writableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.highWaterMark;\n            }\n          }), Object.defineProperty(u.prototype, "writableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState && this._writableState.getBuffer();\n            }\n          }), Object.defineProperty(u.prototype, "writableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.length;\n            }\n          }), Object.defineProperty(u.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;\n            },\n            set: function (e) {\n              void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);\n            }\n          });\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./_stream_readable": 58,\n      "./_stream_writable": 60,\n      _process: 50,\n      inherits: 24\n    }],\n    57: [function (e, t, r) {\n      "use strict";\n\n      t.exports = i;\n      var n = e("./_stream_transform");\n\n      function i(e) {\n        if (!(this instanceof i)) return new i(e);\n        n.call(this, e);\n      }\n\n      e("inherits")(i, n), i.prototype._transform = function (e, t, r) {\n        r(null, e);\n      };\n    }, {\n      "./_stream_transform": 59,\n      inherits: 24\n    }],\n    58: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          var i;\n          t.exports = C, C.ReadableState = E;\n          e("events").EventEmitter;\n\n          var o = function (e, t) {\n            return e.listeners(t).length;\n          },\n              s = e("./internal/streams/stream"),\n              a = e("buffer").Buffer,\n              l = n.Uint8Array || function () {};\n\n          var u,\n              c = e("util");\n          u = c && c.debuglog ? c.debuglog("stream") : function () {};\n          var h,\n              f,\n              p,\n              d = e("./internal/streams/buffer_list"),\n              g = e("./internal/streams/destroy"),\n              y = e("./internal/streams/state").getHighWaterMark,\n              b = e("../errors").codes,\n              m = b.ERR_INVALID_ARG_TYPE,\n              v = b.ERR_STREAM_PUSH_AFTER_EOF,\n              w = b.ERR_METHOD_NOT_IMPLEMENTED,\n              _ = b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n          e("inherits")(C, s);\n          var k = g.errorOrDestroy,\n              S = ["error", "close", "destroy", "pause", "resume"];\n\n          function E(t, r, n) {\n            i = i || e("./_stream_duplex"), t = t || {}, "boolean" != typeof n && (n = r instanceof i), this.objectMode = !!t.objectMode, n && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = y(this, t, "readableHighWaterMark", n), this.buffer = new d(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (h || (h = e("string_decoder/").StringDecoder), this.decoder = new h(t.encoding), this.encoding = t.encoding);\n          }\n\n          function C(t) {\n            if (i = i || e("./_stream_duplex"), !(this instanceof C)) return new C(t);\n            var r = this instanceof i;\n            this._readableState = new E(t, this, r), this.readable = !0, t && ("function" == typeof t.read && (this._read = t.read), "function" == typeof t.destroy && (this._destroy = t.destroy)), s.call(this);\n          }\n\n          function T(e, t, r, n, i) {\n            u("readableAddChunk", t);\n            var o,\n                s = e._readableState;\n            if (null === t) s.reading = !1, function (e, t) {\n              if (u("onEofChunk"), t.ended) return;\n\n              if (t.decoder) {\n                var r = t.decoder.end();\n                r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);\n              }\n\n              t.ended = !0, t.sync ? P(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, O(e)));\n            }(e, s);else if (i || (o = function (e, t) {\n              var r;\n              n = t, a.isBuffer(n) || n instanceof l || "string" == typeof t || void 0 === t || e.objectMode || (r = new m("chunk", ["string", "Buffer", "Uint8Array"], t));\n              var n;\n              return r;\n            }(s, t)), o) k(e, o);else if (s.objectMode || t && t.length > 0) {\n              if ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === a.prototype || (t = function (e) {\n                return a.from(e);\n              }(t)), n) s.endEmitted ? k(e, new _()) : x(e, s, t, !0);else if (s.ended) k(e, new v());else {\n                if (s.destroyed) return !1;\n                s.reading = !1, s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? x(e, s, t, !1) : B(e, s)) : x(e, s, t, !1);\n              }\n            } else n || (s.reading = !1, B(e, s));\n            return !s.ended && (s.length < s.highWaterMark || 0 === s.length);\n          }\n\n          function x(e, t, r, n) {\n            t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit("data", r)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && P(e)), B(e, t);\n          }\n\n          Object.defineProperty(C.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._readableState && this._readableState.destroyed;\n            },\n            set: function (e) {\n              this._readableState && (this._readableState.destroyed = e);\n            }\n          }), C.prototype.destroy = g.destroy, C.prototype._undestroy = g.undestroy, C.prototype._destroy = function (e, t) {\n            t(e);\n          }, C.prototype.push = function (e, t) {\n            var r,\n                n = this._readableState;\n            return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = a.from(e, t), t = ""), r = !0), T(this, e, t, !1, r);\n          }, C.prototype.unshift = function (e) {\n            return T(this, e, null, !0, !1);\n          }, C.prototype.isPaused = function () {\n            return !1 === this._readableState.flowing;\n          }, C.prototype.setEncoding = function (t) {\n            h || (h = e("string_decoder/").StringDecoder);\n            var r = new h(t);\n            this._readableState.decoder = r, this._readableState.encoding = this._readableState.decoder.encoding;\n\n            for (var n = this._readableState.buffer.head, i = ""; null !== n;) i += r.write(n.data), n = n.next;\n\n            return this._readableState.buffer.clear(), "" !== i && this._readableState.buffer.push(i), this._readableState.length = i.length, this;\n          };\n          var A = 1073741824;\n\n          function I(e, t) {\n            return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function (e) {\n              return e >= A ? e = A : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;\n            }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));\n          }\n\n          function P(e) {\n            var t = e._readableState;\n            u("emitReadable", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (u("emitReadable", t.flowing), t.emittedReadable = !0, r.nextTick(O, e));\n          }\n\n          function O(e) {\n            var t = e._readableState;\n            u("emitReadable_", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit("readable"), t.emittedReadable = !1), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, j(e);\n          }\n\n          function B(e, t) {\n            t.readingMore || (t.readingMore = !0, r.nextTick(R, e, t));\n          }\n\n          function R(e, t) {\n            for (; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length);) {\n              var r = t.length;\n              if (u("maybeReadMore read 0"), e.read(0), r === t.length) break;\n            }\n\n            t.readingMore = !1;\n          }\n\n          function M(e) {\n            var t = e._readableState;\n            t.readableListening = e.listenerCount("readable") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount("data") > 0 && e.resume();\n          }\n\n          function N(e) {\n            u("readable nexttick read 0"), e.read(0);\n          }\n\n          function L(e, t) {\n            u("resume", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit("resume"), j(e), t.flowing && !t.reading && e.read(0);\n          }\n\n          function j(e) {\n            var t = e._readableState;\n\n            for (u("flow", t.flowing); t.flowing && null !== e.read(););\n          }\n\n          function U(e, t) {\n            return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), t.buffer.clear()) : r = t.buffer.consume(e, t.decoder), r);\n            var r;\n          }\n\n          function q(e) {\n            var t = e._readableState;\n            u("endReadable", t.endEmitted), t.endEmitted || (t.ended = !0, r.nextTick(D, t, e));\n          }\n\n          function D(e, t) {\n            if (u("endReadableNT", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, t.emit("end"), e.autoDestroy)) {\n              var r = t._writableState;\n              (!r || r.autoDestroy && r.finished) && t.destroy();\n            }\n          }\n\n          function z(e, t) {\n            for (var r = 0, n = e.length; r < n; r++) if (e[r] === t) return r;\n\n            return -1;\n          }\n\n          C.prototype.read = function (e) {\n            u("read", e), e = parseInt(e, 10);\n            var t = this._readableState,\n                r = e;\n            if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return u("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? q(this) : P(this), null;\n            if (0 === (e = I(e, t)) && t.ended) return 0 === t.length && q(this), null;\n            var n,\n                i = t.needReadable;\n            return u("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && u("length less than watermark", i = !0), t.ended || t.reading ? u("reading or ended", i = !1) : i && (u("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = I(r, t))), null === (n = e > 0 ? U(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && q(this)), null !== n && this.emit("data", n), n;\n          }, C.prototype._read = function (e) {\n            k(this, new w("_read()"));\n          }, C.prototype.pipe = function (e, t) {\n            var n = this,\n                i = this._readableState;\n\n            switch (i.pipesCount) {\n              case 0:\n                i.pipes = e;\n                break;\n\n              case 1:\n                i.pipes = [i.pipes, e];\n                break;\n\n              default:\n                i.pipes.push(e);\n            }\n\n            i.pipesCount += 1, u("pipe count=%d opts=%j", i.pipesCount, t);\n            var s = (!t || !1 !== t.end) && e !== r.stdout && e !== r.stderr ? l : y;\n\n            function a(t, r) {\n              u("onunpipe"), t === n && r && !1 === r.hasUnpiped && (r.hasUnpiped = !0, u("cleanup"), e.removeListener("close", d), e.removeListener("finish", g), e.removeListener("drain", c), e.removeListener("error", p), e.removeListener("unpipe", a), n.removeListener("end", l), n.removeListener("end", y), n.removeListener("data", f), h = !0, !i.awaitDrain || e._writableState && !e._writableState.needDrain || c());\n            }\n\n            function l() {\n              u("onend"), e.end();\n            }\n\n            i.endEmitted ? r.nextTick(s) : n.once("end", s), e.on("unpipe", a);\n\n            var c = function (e) {\n              return function () {\n                var t = e._readableState;\n                u("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && o(e, "data") && (t.flowing = !0, j(e));\n              };\n            }(n);\n\n            e.on("drain", c);\n            var h = !1;\n\n            function f(t) {\n              u("ondata");\n              var r = e.write(t);\n              u("dest.write", r), !1 === r && ((1 === i.pipesCount && i.pipes === e || i.pipesCount > 1 && -1 !== z(i.pipes, e)) && !h && (u("false write response, pause", i.awaitDrain), i.awaitDrain++), n.pause());\n            }\n\n            function p(t) {\n              u("onerror", t), y(), e.removeListener("error", p), 0 === o(e, "error") && k(e, t);\n            }\n\n            function d() {\n              e.removeListener("finish", g), y();\n            }\n\n            function g() {\n              u("onfinish"), e.removeListener("close", d), y();\n            }\n\n            function y() {\n              u("unpipe"), n.unpipe(e);\n            }\n\n            return n.on("data", f), function (e, t, r) {\n              if ("function" == typeof e.prependListener) return e.prependListener(t, r);\n              e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);\n            }(e, "error", p), e.once("close", d), e.once("finish", g), e.emit("pipe", n), i.flowing || (u("pipe resume"), n.resume()), e;\n          }, C.prototype.unpipe = function (e) {\n            var t = this._readableState,\n                r = {\n              hasUnpiped: !1\n            };\n            if (0 === t.pipesCount) return this;\n            if (1 === t.pipesCount) return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r), this);\n\n            if (!e) {\n              var n = t.pipes,\n                  i = t.pipesCount;\n              t.pipes = null, t.pipesCount = 0, t.flowing = !1;\n\n              for (var o = 0; o < i; o++) n[o].emit("unpipe", this, {\n                hasUnpiped: !1\n              });\n\n              return this;\n            }\n\n            var s = z(t.pipes, e);\n            return -1 === s ? this : (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);\n          }, C.prototype.on = function (e, t) {\n            var n = s.prototype.on.call(this, e, t),\n                i = this._readableState;\n            return "data" === e ? (i.readableListening = this.listenerCount("readable") > 0, !1 !== i.flowing && this.resume()) : "readable" === e && (i.endEmitted || i.readableListening || (i.readableListening = i.needReadable = !0, i.flowing = !1, i.emittedReadable = !1, u("on readable", i.length, i.reading), i.length ? P(this) : i.reading || r.nextTick(N, this))), n;\n          }, C.prototype.addListener = C.prototype.on, C.prototype.removeListener = function (e, t) {\n            var n = s.prototype.removeListener.call(this, e, t);\n            return "readable" === e && r.nextTick(M, this), n;\n          }, C.prototype.removeAllListeners = function (e) {\n            var t = s.prototype.removeAllListeners.apply(this, arguments);\n            return "readable" !== e && void 0 !== e || r.nextTick(M, this), t;\n          }, C.prototype.resume = function () {\n            var e = this._readableState;\n            return e.flowing || (u("resume"), e.flowing = !e.readableListening, function (e, t) {\n              t.resumeScheduled || (t.resumeScheduled = !0, r.nextTick(L, e, t));\n            }(this, e)), e.paused = !1, this;\n          }, C.prototype.pause = function () {\n            return u("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (u("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;\n          }, C.prototype.wrap = function (e) {\n            var t = this,\n                r = this._readableState,\n                n = !1;\n\n            for (var i in e.on("end", function () {\n              if (u("wrapped end"), r.decoder && !r.ended) {\n                var e = r.decoder.end();\n                e && e.length && t.push(e);\n              }\n\n              t.push(null);\n            }), e.on("data", function (i) {\n              (u("wrapped data"), r.decoder && (i = r.decoder.write(i)), !r.objectMode || null !== i && void 0 !== i) && (r.objectMode || i && i.length) && (t.push(i) || (n = !0, e.pause()));\n            }), e) void 0 === this[i] && "function" == typeof e[i] && (this[i] = function (t) {\n              return function () {\n                return e[t].apply(e, arguments);\n              };\n            }(i));\n\n            for (var o = 0; o < S.length; o++) e.on(S[o], this.emit.bind(this, S[o]));\n\n            return this._read = function (t) {\n              u("wrapped _read", t), n && (n = !1, e.resume());\n            }, this;\n          }, "function" == typeof Symbol && (C.prototype[Symbol.asyncIterator] = function () {\n            return void 0 === f && (f = e("./internal/streams/async_iterator")), f(this);\n          }), Object.defineProperty(C.prototype, "readableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.highWaterMark;\n            }\n          }), Object.defineProperty(C.prototype, "readableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState && this._readableState.buffer;\n            }\n          }), Object.defineProperty(C.prototype, "readableFlowing", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.flowing;\n            },\n            set: function (e) {\n              this._readableState && (this._readableState.flowing = e);\n            }\n          }), C._fromList = U, Object.defineProperty(C.prototype, "readableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._readableState.length;\n            }\n          }), "function" == typeof Symbol && (C.from = function (t, r) {\n            return void 0 === p && (p = e("./internal/streams/from")), p(C, t, r);\n          });\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      "./internal/streams/async_iterator": 61,\n      "./internal/streams/buffer_list": 62,\n      "./internal/streams/destroy": 63,\n      "./internal/streams/from": 65,\n      "./internal/streams/state": 67,\n      "./internal/streams/stream": 68,\n      _process: 50,\n      buffer: 17,\n      events: 22,\n      inherits: 24,\n      "string_decoder/": 75,\n      util: 16\n    }],\n    59: [function (e, t, r) {\n      "use strict";\n\n      t.exports = u;\n      var n = e("../errors").codes,\n          i = n.ERR_METHOD_NOT_IMPLEMENTED,\n          o = n.ERR_MULTIPLE_CALLBACK,\n          s = n.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n          a = n.ERR_TRANSFORM_WITH_LENGTH_0,\n          l = e("./_stream_duplex");\n\n      function u(e) {\n        if (!(this instanceof u)) return new u(e);\n        l.call(this, e), this._transformState = {\n          afterTransform: function (e, t) {\n            var r = this._transformState;\n            r.transforming = !1;\n            var n = r.writecb;\n            if (null === n) return this.emit("error", new o());\n            r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);\n            var i = this._readableState;\n            i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n          }.bind(this),\n          needTransform: !1,\n          transforming: !1,\n          writecb: null,\n          writechunk: null,\n          writeencoding: null\n        }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", c);\n      }\n\n      function c() {\n        var e = this;\n        "function" != typeof this._flush || this._readableState.destroyed ? h(this, null, null) : this._flush(function (t, r) {\n          h(e, t, r);\n        });\n      }\n\n      function h(e, t, r) {\n        if (t) return e.emit("error", t);\n        if (null != r && e.push(r), e._writableState.length) throw new a();\n        if (e._transformState.transforming) throw new s();\n        return e.push(null);\n      }\n\n      e("inherits")(u, l), u.prototype.push = function (e, t) {\n        return this._transformState.needTransform = !1, l.prototype.push.call(this, e, t);\n      }, u.prototype._transform = function (e, t, r) {\n        r(new i("_transform()"));\n      }, u.prototype._write = function (e, t, r) {\n        var n = this._transformState;\n\n        if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {\n          var i = this._readableState;\n          (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n        }\n      }, u.prototype._read = function (e) {\n        var t = this._transformState;\n        null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));\n      }, u.prototype._destroy = function (e, t) {\n        l.prototype._destroy.call(this, e, function (e) {\n          t(e);\n        });\n      };\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      inherits: 24\n    }],\n    60: [function (e, t, r) {\n      (function (r, n) {\n        (function () {\n          "use strict";\n\n          function i(e) {\n            var t = this;\n            this.next = null, this.entry = null, this.finish = function () {\n              !function (e, t, r) {\n                var n = e.entry;\n                e.entry = null;\n\n                for (; n;) {\n                  var i = n.callback;\n                  t.pendingcb--, i(r), n = n.next;\n                }\n\n                t.corkedRequestsFree.next = e;\n              }(t, e);\n            };\n          }\n\n          var o;\n          t.exports = C, C.WritableState = E;\n\n          var s = {\n            deprecate: e("util-deprecate")\n          },\n              a = e("./internal/streams/stream"),\n              l = e("buffer").Buffer,\n              u = n.Uint8Array || function () {};\n\n          var c,\n              h = e("./internal/streams/destroy"),\n              f = e("./internal/streams/state").getHighWaterMark,\n              p = e("../errors").codes,\n              d = p.ERR_INVALID_ARG_TYPE,\n              g = p.ERR_METHOD_NOT_IMPLEMENTED,\n              y = p.ERR_MULTIPLE_CALLBACK,\n              b = p.ERR_STREAM_CANNOT_PIPE,\n              m = p.ERR_STREAM_DESTROYED,\n              v = p.ERR_STREAM_NULL_VALUES,\n              w = p.ERR_STREAM_WRITE_AFTER_END,\n              _ = p.ERR_UNKNOWN_ENCODING,\n              k = h.errorOrDestroy;\n\n          function S() {}\n\n          function E(t, n, s) {\n            o = o || e("./_stream_duplex"), t = t || {}, "boolean" != typeof s && (s = n instanceof o), this.objectMode = !!t.objectMode, s && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = f(this, t, "writableHighWaterMark", s), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;\n            var a = !1 === t.decodeStrings;\n            this.decodeStrings = !a, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {\n              !function (e, t) {\n                var n = e._writableState,\n                    i = n.sync,\n                    o = n.writecb;\n                if ("function" != typeof o) throw new y();\n                if (function (e) {\n                  e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;\n                }(n), t) !function (e, t, n, i, o) {\n                  --t.pendingcb, n ? (r.nextTick(o, i), r.nextTick(O, e, t), e._writableState.errorEmitted = !0, k(e, i)) : (o(i), e._writableState.errorEmitted = !0, k(e, i), O(e, t));\n                }(e, n, i, t, o);else {\n                  var s = I(n) || e.destroyed;\n                  s || n.corked || n.bufferProcessing || !n.bufferedRequest || A(e, n), i ? r.nextTick(x, e, n, s, o) : x(e, n, s, o);\n                }\n              }(n, e);\n            }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new i(this);\n          }\n\n          function C(t) {\n            var r = this instanceof (o = o || e("./_stream_duplex"));\n            if (!r && !c.call(C, this)) return new C(t);\n            this._writableState = new E(t, this, r), this.writable = !0, t && ("function" == typeof t.write && (this._write = t.write), "function" == typeof t.writev && (this._writev = t.writev), "function" == typeof t.destroy && (this._destroy = t.destroy), "function" == typeof t.final && (this._final = t.final)), a.call(this);\n          }\n\n          function T(e, t, r, n, i, o, s) {\n            t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new m("write")) : r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;\n          }\n\n          function x(e, t, r, n) {\n            r || function (e, t) {\n              0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));\n            }(e, t), t.pendingcb--, n(), O(e, t);\n          }\n\n          function A(e, t) {\n            t.bufferProcessing = !0;\n            var r = t.bufferedRequest;\n\n            if (e._writev && r && r.next) {\n              var n = t.bufferedRequestCount,\n                  o = new Array(n),\n                  s = t.corkedRequestsFree;\n              s.entry = r;\n\n              for (var a = 0, l = !0; r;) o[a] = r, r.isBuf || (l = !1), r = r.next, a += 1;\n\n              o.allBuffers = l, T(e, t, !0, t.length, o, "", s.finish), t.pendingcb++, t.lastBufferedRequest = null, s.next ? (t.corkedRequestsFree = s.next, s.next = null) : t.corkedRequestsFree = new i(t), t.bufferedRequestCount = 0;\n            } else {\n              for (; r;) {\n                var u = r.chunk,\n                    c = r.encoding,\n                    h = r.callback;\n                if (T(e, t, !1, t.objectMode ? 1 : u.length, u, c, h), r = r.next, t.bufferedRequestCount--, t.writing) break;\n              }\n\n              null === r && (t.lastBufferedRequest = null);\n            }\n\n            t.bufferedRequest = r, t.bufferProcessing = !1;\n          }\n\n          function I(e) {\n            return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;\n          }\n\n          function P(e, t) {\n            e._final(function (r) {\n              t.pendingcb--, r && k(e, r), t.prefinished = !0, e.emit("prefinish"), O(e, t);\n            });\n          }\n\n          function O(e, t) {\n            var n = I(t);\n\n            if (n && (function (e, t) {\n              t.prefinished || t.finalCalled || ("function" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit("prefinish")) : (t.pendingcb++, t.finalCalled = !0, r.nextTick(P, e, t)));\n            }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"), t.autoDestroy))) {\n              var i = e._readableState;\n              (!i || i.autoDestroy && i.endEmitted) && e.destroy();\n            }\n\n            return n;\n          }\n\n          e("inherits")(C, a), E.prototype.getBuffer = function () {\n            for (var e = this.bufferedRequest, t = []; e;) t.push(e), e = e.next;\n\n            return t;\n          }, function () {\n            try {\n              Object.defineProperty(E.prototype, "buffer", {\n                get: s.deprecate(function () {\n                  return this.getBuffer();\n                }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")\n              });\n            } catch (e) {}\n          }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c = Function.prototype[Symbol.hasInstance], Object.defineProperty(C, Symbol.hasInstance, {\n            value: function (e) {\n              return !!c.call(this, e) || this === C && e && e._writableState instanceof E;\n            }\n          })) : c = function (e) {\n            return e instanceof this;\n          }, C.prototype.pipe = function () {\n            k(this, new b());\n          }, C.prototype.write = function (e, t, n) {\n            var i,\n                o = this._writableState,\n                s = !1,\n                a = !o.objectMode && (i = e, l.isBuffer(i) || i instanceof u);\n            return a && !l.isBuffer(e) && (e = function (e) {\n              return l.from(e);\n            }(e)), "function" == typeof t && (n = t, t = null), a ? t = "buffer" : t || (t = o.defaultEncoding), "function" != typeof n && (n = S), o.ending ? function (e, t) {\n              var n = new w();\n              k(e, n), r.nextTick(t, n);\n            }(this, n) : (a || function (e, t, n, i) {\n              var o;\n              return null === n ? o = new v() : "string" == typeof n || t.objectMode || (o = new d("chunk", ["string", "Buffer"], n)), !o || (k(e, o), r.nextTick(i, o), !1);\n            }(this, o, e, n)) && (o.pendingcb++, s = function (e, t, r, n, i, o) {\n              if (!r) {\n                var s = function (e, t, r) {\n                  e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = l.from(t, r));\n                  return t;\n                }(t, n, i);\n\n                n !== s && (r = !0, i = "buffer", n = s);\n              }\n\n              var a = t.objectMode ? 1 : n.length;\n              t.length += a;\n              var u = t.length < t.highWaterMark;\n              u || (t.needDrain = !0);\n\n              if (t.writing || t.corked) {\n                var c = t.lastBufferedRequest;\n                t.lastBufferedRequest = {\n                  chunk: n,\n                  encoding: i,\n                  isBuf: r,\n                  callback: o,\n                  next: null\n                }, c ? c.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;\n              } else T(e, t, !1, a, n, i, o);\n\n              return u;\n            }(this, o, a, e, t, n)), s;\n          }, C.prototype.cork = function () {\n            this._writableState.corked++;\n          }, C.prototype.uncork = function () {\n            var e = this._writableState;\n            e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || A(this, e));\n          }, C.prototype.setDefaultEncoding = function (e) {\n            if ("string" == typeof e && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new _(e);\n            return this._writableState.defaultEncoding = e, this;\n          }, Object.defineProperty(C.prototype, "writableBuffer", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState && this._writableState.getBuffer();\n            }\n          }), Object.defineProperty(C.prototype, "writableHighWaterMark", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.highWaterMark;\n            }\n          }), C.prototype._write = function (e, t, r) {\n            r(new g("_write()"));\n          }, C.prototype._writev = null, C.prototype.end = function (e, t, n) {\n            var i = this._writableState;\n            return "function" == typeof e ? (n = e, e = null, t = null) : "function" == typeof t && (n = t, t = null), null !== e && void 0 !== e && this.write(e, t), i.corked && (i.corked = 1, this.uncork()), i.ending || function (e, t, n) {\n              t.ending = !0, O(e, t), n && (t.finished ? r.nextTick(n) : e.once("finish", n));\n              t.ended = !0, e.writable = !1;\n            }(this, i, n), this;\n          }, Object.defineProperty(C.prototype, "writableLength", {\n            enumerable: !1,\n            get: function () {\n              return this._writableState.length;\n            }\n          }), Object.defineProperty(C.prototype, "destroyed", {\n            enumerable: !1,\n            get: function () {\n              return void 0 !== this._writableState && this._writableState.destroyed;\n            },\n            set: function (e) {\n              this._writableState && (this._writableState.destroyed = e);\n            }\n          }), C.prototype.destroy = h.destroy, C.prototype._undestroy = h.undestroy, C.prototype._destroy = function (e, t) {\n            t(e);\n          };\n        }).call(this);\n      }).call(this, e("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {\n      "../errors": 55,\n      "./_stream_duplex": 56,\n      "./internal/streams/destroy": 63,\n      "./internal/streams/state": 67,\n      "./internal/streams/stream": 68,\n      _process: 50,\n      buffer: 17,\n      inherits: 24,\n      "util-deprecate": 78\n    }],\n    61: [function (e, t, r) {\n      (function (r) {\n        (function () {\n          "use strict";\n\n          var n;\n\n          function i(e, t, r) {\n            return t in e ? Object.defineProperty(e, t, {\n              value: r,\n              enumerable: !0,\n              configurable: !0,\n              writable: !0\n            }) : e[t] = r, e;\n          }\n\n          var o = e("./end-of-stream"),\n              s = Symbol("lastResolve"),\n              a = Symbol("lastReject"),\n              l = Symbol("error"),\n              u = Symbol("ended"),\n              c = Symbol("lastPromise"),\n              h = Symbol("handlePromise"),\n              f = Symbol("stream");\n\n          function p(e, t) {\n            return {\n              value: e,\n              done: t\n            };\n          }\n\n          function d(e) {\n            var t = e[s];\n\n            if (null !== t) {\n              var r = e[f].read();\n              null !== r && (e[c] = null, e[s] = null, e[a] = null, t(p(r, !1)));\n            }\n          }\n\n          var g = Object.getPrototypeOf(function () {}),\n              y = Object.setPrototypeOf((i(n = {\n            get stream() {\n              return this[f];\n            },\n\n            next: function () {\n              var e = this,\n                  t = this[l];\n              if (null !== t) return Promise.reject(t);\n              if (this[u]) return Promise.resolve(p(void 0, !0));\n              if (this[f].destroyed) return new Promise(function (t, n) {\n                r.nextTick(function () {\n                  e[l] ? n(e[l]) : t(p(void 0, !0));\n                });\n              });\n              var n,\n                  i = this[c];\n              if (i) n = new Promise(function (e, t) {\n                return function (r, n) {\n                  e.then(function () {\n                    t[u] ? r(p(void 0, !0)) : t[h](r, n);\n                  }, n);\n                };\n              }(i, this));else {\n                var o = this[f].read();\n                if (null !== o) return Promise.resolve(p(o, !1));\n                n = new Promise(this[h]);\n              }\n              return this[c] = n, n;\n            }\n          }, Symbol.asyncIterator, function () {\n            return this;\n          }), i(n, "return", function () {\n            var e = this;\n            return new Promise(function (t, r) {\n              e[f].destroy(null, function (e) {\n                e ? r(e) : t(p(void 0, !0));\n              });\n            });\n          }), n), g);\n\n          t.exports = function (e) {\n            var t,\n                n = Object.create(y, (i(t = {}, f, {\n              value: e,\n              writable: !0\n            }), i(t, s, {\n              value: null,\n              writable: !0\n            }), i(t, a, {\n              value: null,\n              writable: !0\n            }), i(t, l, {\n              value: null,\n              writable: !0\n            }), i(t, u, {\n              value: e._readableState.endEmitted,\n              writable: !0\n            }), i(t, h, {\n              value: function (e, t) {\n                var r = n[f].read();\n                r ? (n[c] = null, n[s] = null, n[a] = null, e(p(r, !1))) : (n[s] = e, n[a] = t);\n              },\n              writable: !0\n            }), t));\n            return n[c] = null, o(e, function (e) {\n              if (e && "ERR_STREAM_PREMATURE_CLOSE" !== e.code) {\n                var t = n[a];\n                return null !== t && (n[c] = null, n[s] = null, n[a] = null, t(e)), void (n[l] = e);\n              }\n\n              var r = n[s];\n              null !== r && (n[c] = null, n[s] = null, n[a] = null, r(p(void 0, !0))), n[u] = !0;\n            }), e.on("readable", function (e) {\n              r.nextTick(d, e);\n            }.bind(null, n)), n;\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      "./end-of-stream": 64,\n      _process: 50\n    }],\n    62: [function (e, t, r) {\n      "use strict";\n\n      function n(e, t) {\n        var r = Object.keys(e);\n\n        if (Object.getOwnPropertySymbols) {\n          var n = Object.getOwnPropertySymbols(e);\n          t && (n = n.filter(function (t) {\n            return Object.getOwnPropertyDescriptor(e, t).enumerable;\n          })), r.push.apply(r, n);\n        }\n\n        return r;\n      }\n\n      function i(e, t, r) {\n        return t in e ? Object.defineProperty(e, t, {\n          value: r,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0\n        }) : e[t] = r, e;\n      }\n\n      function o(e, t) {\n        for (var r = 0; r < t.length; r++) {\n          var n = t[r];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n        }\n      }\n\n      var s = e("buffer").Buffer,\n          a = e("util").inspect,\n          l = a && a.custom || "inspect";\n\n      t.exports = function () {\n        function e() {\n          !function (e, t) {\n            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");\n          }(this, e), this.head = null, this.tail = null, this.length = 0;\n        }\n\n        var t, r, u;\n        return t = e, (r = [{\n          key: "push",\n          value: function (e) {\n            var t = {\n              data: e,\n              next: null\n            };\n            this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;\n          }\n        }, {\n          key: "unshift",\n          value: function (e) {\n            var t = {\n              data: e,\n              next: this.head\n            };\n            0 === this.length && (this.tail = t), this.head = t, ++this.length;\n          }\n        }, {\n          key: "shift",\n          value: function () {\n            if (0 !== this.length) {\n              var e = this.head.data;\n              return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;\n            }\n          }\n        }, {\n          key: "clear",\n          value: function () {\n            this.head = this.tail = null, this.length = 0;\n          }\n        }, {\n          key: "join",\n          value: function (e) {\n            if (0 === this.length) return "";\n\n            for (var t = this.head, r = "" + t.data; t = t.next;) r += e + t.data;\n\n            return r;\n          }\n        }, {\n          key: "concat",\n          value: function (e) {\n            if (0 === this.length) return s.alloc(0);\n\n            for (var t, r, n, i = s.allocUnsafe(e >>> 0), o = this.head, a = 0; o;) t = o.data, r = i, n = a, s.prototype.copy.call(t, r, n), a += o.data.length, o = o.next;\n\n            return i;\n          }\n        }, {\n          key: "consume",\n          value: function (e, t) {\n            var r;\n            return e < this.head.data.length ? (r = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : r = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), r;\n          }\n        }, {\n          key: "first",\n          value: function () {\n            return this.head.data;\n          }\n        }, {\n          key: "_getString",\n          value: function (e) {\n            var t = this.head,\n                r = 1,\n                n = t.data;\n\n            for (e -= n.length; t = t.next;) {\n              var i = t.data,\n                  o = e > i.length ? i.length : e;\n\n              if (o === i.length ? n += i : n += i.slice(0, e), 0 === (e -= o)) {\n                o === i.length ? (++r, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));\n                break;\n              }\n\n              ++r;\n            }\n\n            return this.length -= r, n;\n          }\n        }, {\n          key: "_getBuffer",\n          value: function (e) {\n            var t = s.allocUnsafe(e),\n                r = this.head,\n                n = 1;\n\n            for (r.data.copy(t), e -= r.data.length; r = r.next;) {\n              var i = r.data,\n                  o = e > i.length ? i.length : e;\n\n              if (i.copy(t, t.length - e, 0, o), 0 === (e -= o)) {\n                o === i.length ? (++n, r.next ? this.head = r.next : this.head = this.tail = null) : (this.head = r, r.data = i.slice(o));\n                break;\n              }\n\n              ++n;\n            }\n\n            return this.length -= n, t;\n          }\n        }, {\n          key: l,\n          value: function (e, t) {\n            return a(this, function (e) {\n              for (var t = 1; t < arguments.length; t++) {\n                var r = null != arguments[t] ? arguments[t] : {};\n                t % 2 ? n(Object(r), !0).forEach(function (t) {\n                  i(e, t, r[t]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : n(Object(r)).forEach(function (t) {\n                  Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t));\n                });\n              }\n\n              return e;\n            }({}, t, {\n              depth: 0,\n              customInspect: !1\n            }));\n          }\n        }]) && o(t.prototype, r), u && o(t, u), e;\n      }();\n    }, {\n      buffer: 17,\n      util: 16\n    }],\n    63: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          function r(e, t) {\n            i(e, t), n(e);\n          }\n\n          function n(e) {\n            e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");\n          }\n\n          function i(e, t) {\n            e.emit("error", t);\n          }\n\n          t.exports = {\n            destroy: function (t, o) {\n              var s = this,\n                  a = this._readableState && this._readableState.destroyed,\n                  l = this._writableState && this._writableState.destroyed;\n              return a || l ? (o ? o(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, e.nextTick(i, this, t)) : e.nextTick(i, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function (t) {\n                !o && t ? s._writableState ? s._writableState.errorEmitted ? e.nextTick(n, s) : (s._writableState.errorEmitted = !0, e.nextTick(r, s, t)) : e.nextTick(r, s, t) : o ? (e.nextTick(n, s), o(t)) : e.nextTick(n, s);\n              }), this);\n            },\n            undestroy: function () {\n              this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);\n            },\n            errorOrDestroy: function (e, t) {\n              var r = e._readableState,\n                  n = e._writableState;\n              r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);\n            }\n          };\n        }).call(this);\n      }).call(this, e("_process"));\n    }, {\n      _process: 50\n    }],\n    64: [function (e, t, r) {\n      "use strict";\n\n      var n = e("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;\n\n      function i() {}\n\n      t.exports = function e(t, r, o) {\n        if ("function" == typeof r) return e(t, null, r);\n        r || (r = {}), o = function (e) {\n          var t = !1;\n          return function () {\n            if (!t) {\n              t = !0;\n\n              for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++) n[i] = arguments[i];\n\n              e.apply(this, n);\n            }\n          };\n        }(o || i);\n\n        var s = r.readable || !1 !== r.readable && t.readable,\n            a = r.writable || !1 !== r.writable && t.writable,\n            l = function () {\n          t.writable || c();\n        },\n            u = t._writableState && t._writableState.finished,\n            c = function () {\n          a = !1, u = !0, s || o.call(t);\n        },\n            h = t._readableState && t._readableState.endEmitted,\n            f = function () {\n          s = !1, h = !0, a || o.call(t);\n        },\n            p = function (e) {\n          o.call(t, e);\n        },\n            d = function () {\n          var e;\n          return s && !h ? (t._readableState && t._readableState.ended || (e = new n()), o.call(t, e)) : a && !u ? (t._writableState && t._writableState.ended || (e = new n()), o.call(t, e)) : void 0;\n        },\n            g = function () {\n          t.req.on("finish", c);\n        };\n\n        return function (e) {\n          return e.setHeader && "function" == typeof e.abort;\n        }(t) ? (t.on("complete", c), t.on("abort", d), t.req ? g() : t.on("request", g)) : a && !t._writableState && (t.on("end", l), t.on("close", l)), t.on("end", f), t.on("finish", c), !1 !== r.error && t.on("error", p), t.on("close", d), function () {\n          t.removeListener("complete", c), t.removeListener("abort", d), t.removeListener("request", g), t.req && t.req.removeListener("finish", c), t.removeListener("end", l), t.removeListener("close", l), t.removeListener("finish", c), t.removeListener("end", f), t.removeListener("error", p), t.removeListener("close", d);\n        };\n      };\n    }, {\n      "../../../errors": 55\n    }],\n    65: [function (e, t, r) {\n      t.exports = function () {\n        throw new Error("Readable.from is not available in the browser");\n      };\n    }, {}],\n    66: [function (e, t, r) {\n      "use strict";\n\n      var n;\n      var i = e("../../../errors").codes,\n          o = i.ERR_MISSING_ARGS,\n          s = i.ERR_STREAM_DESTROYED;\n\n      function a(e) {\n        if (e) throw e;\n      }\n\n      function l(e) {\n        e();\n      }\n\n      function u(e, t) {\n        return e.pipe(t);\n      }\n\n      t.exports = function () {\n        for (var t = arguments.length, r = new Array(t), i = 0; i < t; i++) r[i] = arguments[i];\n\n        var c,\n            h = function (e) {\n          return e.length ? "function" != typeof e[e.length - 1] ? a : e.pop() : a;\n        }(r);\n\n        if (Array.isArray(r[0]) && (r = r[0]), r.length < 2) throw new o("streams");\n        var f = r.map(function (t, i) {\n          var o = i < r.length - 1;\n          return function (t, r, i, o) {\n            o = function (e) {\n              var t = !1;\n              return function () {\n                t || (t = !0, e.apply(void 0, arguments));\n              };\n            }(o);\n\n            var a = !1;\n            t.on("close", function () {\n              a = !0;\n            }), void 0 === n && (n = e("./end-of-stream")), n(t, {\n              readable: r,\n              writable: i\n            }, function (e) {\n              if (e) return o(e);\n              a = !0, o();\n            });\n            var l = !1;\n            return function (e) {\n              if (!a && !l) return l = !0, function (e) {\n                return e.setHeader && "function" == typeof e.abort;\n              }(t) ? t.abort() : "function" == typeof t.destroy ? t.destroy() : void o(e || new s("pipe"));\n            };\n          }(t, o, i > 0, function (e) {\n            c || (c = e), e && f.forEach(l), o || (f.forEach(l), h(c));\n          });\n        });\n        return r.reduce(u);\n      };\n    }, {\n      "../../../errors": 55,\n      "./end-of-stream": 64\n    }],\n    67: [function (e, t, r) {\n      "use strict";\n\n      var n = e("../../../errors").codes.ERR_INVALID_OPT_VALUE;\n      t.exports = {\n        getHighWaterMark: function (e, t, r, i) {\n          var o = function (e, t, r) {\n            return null != e.highWaterMark ? e.highWaterMark : t ? e[r] : null;\n          }(t, i, r);\n\n          if (null != o) {\n            if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new n(i ? r : "highWaterMark", o);\n            return Math.floor(o);\n          }\n\n          return e.objectMode ? 16 : 16384;\n        }\n      };\n    }, {\n      "../../../errors": 55\n    }],\n    68: [function (e, t, r) {\n      t.exports = e("events").EventEmitter;\n    }, {\n      events: 22\n    }],\n    69: [function (e, t, r) {\n      (r = t.exports = e("./lib/_stream_readable.js")).Stream = r, r.Readable = r, r.Writable = e("./lib/_stream_writable.js"), r.Duplex = e("./lib/_stream_duplex.js"), r.Transform = e("./lib/_stream_transform.js"), r.PassThrough = e("./lib/_stream_passthrough.js"), r.finished = e("./lib/internal/streams/end-of-stream.js"), r.pipeline = e("./lib/internal/streams/pipeline.js");\n    }, {\n      "./lib/_stream_duplex.js": 56,\n      "./lib/_stream_passthrough.js": 57,\n      "./lib/_stream_readable.js": 58,\n      "./lib/_stream_transform.js": 59,\n      "./lib/_stream_writable.js": 60,\n      "./lib/internal/streams/end-of-stream.js": 64,\n      "./lib/internal/streams/pipeline.js": 66\n    }],\n    70: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function () {\n        if ("function" != typeof arguments[0]) throw new Error("callback needed");\n        if ("number" != typeof arguments[1]) throw new Error("interval needed");\n        var e;\n\n        if (arguments.length > 0) {\n          e = new Array(arguments.length - 2);\n\n          for (var t = 0; t < e.length; t++) e[t] = arguments[t + 2];\n        }\n\n        return new function (e, t, r) {\n          var n = this;\n          this._callback = e, this._args = r, this._interval = setInterval(e, t, this._args), this.reschedule = function (e) {\n            e || (e = n._interval), n._interval && clearInterval(n._interval), n._interval = setInterval(n._callback, e, n._args);\n          }, this.clear = function () {\n            n._interval && (clearInterval(n._interval), n._interval = void 0);\n          }, this.destroy = function () {\n            n._interval && clearInterval(n._interval), n._callback = void 0, n._interval = void 0, n._args = void 0;\n          };\n        }(arguments[0], arguments[1], e);\n      };\n    }, {}],\n    71: [function (e, t, r) {\n      "use strict";\n\n      t.exports = e("./index.js")();\n    }, {\n      "./index.js": 72\n    }],\n    72: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          "use strict";\n\n          function r(t) {\n            return t instanceof e ? e.from(t) : new t.constructor(t.buffer.slice(), t.byteOffset, t.length);\n          }\n\n          t.exports = function (e) {\n            return (e = e || {}).circles ? function (e) {\n              var t = [],\n                  n = [];\n              return e.proto ? function e(o) {\n                if ("object" != typeof o || null === o) return o;\n                if (o instanceof Date) return new Date(o);\n                if (Array.isArray(o)) return i(o, e);\n                if (o instanceof Map) return new Map(i(Array.from(o), e));\n                if (o instanceof Set) return new Set(i(Array.from(o), e));\n                var s = {};\n\n                for (var a in t.push(o), n.push(s), o) {\n                  var l = o[a];\n                  if ("object" != typeof l || null === l) s[a] = l;else if (l instanceof Date) s[a] = new Date(l);else if (l instanceof Map) s[a] = new Map(i(Array.from(l), e));else if (l instanceof Set) s[a] = new Set(i(Array.from(l), e));else if (ArrayBuffer.isView(l)) s[a] = r(l);else {\n                    var u = t.indexOf(l);\n                    s[a] = -1 !== u ? n[u] : e(l);\n                  }\n                }\n\n                return t.pop(), n.pop(), s;\n              } : function e(o) {\n                if ("object" != typeof o || null === o) return o;\n                if (o instanceof Date) return new Date(o);\n                if (Array.isArray(o)) return i(o, e);\n                if (o instanceof Map) return new Map(i(Array.from(o), e));\n                if (o instanceof Set) return new Set(i(Array.from(o), e));\n                var s = {};\n\n                for (var a in t.push(o), n.push(s), o) if (!1 !== Object.hasOwnProperty.call(o, a)) {\n                  var l = o[a];\n                  if ("object" != typeof l || null === l) s[a] = l;else if (l instanceof Date) s[a] = new Date(l);else if (l instanceof Map) s[a] = new Map(i(Array.from(l), e));else if (l instanceof Set) s[a] = new Set(i(Array.from(l), e));else if (ArrayBuffer.isView(l)) s[a] = r(l);else {\n                    var u = t.indexOf(l);\n                    s[a] = -1 !== u ? n[u] : e(l);\n                  }\n                }\n\n                return t.pop(), n.pop(), s;\n              };\n\n              function i(e, i) {\n                for (var o = Object.keys(e), s = new Array(o.length), a = 0; a < o.length; a++) {\n                  var l = o[a],\n                      u = e[l];\n                  if ("object" != typeof u || null === u) s[l] = u;else if (u instanceof Date) s[l] = new Date(u);else if (ArrayBuffer.isView(u)) s[l] = r(u);else {\n                    var c = t.indexOf(u);\n                    s[l] = -1 !== c ? n[c] : i(u);\n                  }\n                }\n\n                return s;\n              }\n            }(e) : e.proto ? function e(n) {\n              if ("object" != typeof n || null === n) return n;\n              if (n instanceof Date) return new Date(n);\n              if (Array.isArray(n)) return t(n, e);\n              if (n instanceof Map) return new Map(t(Array.from(n), e));\n              if (n instanceof Set) return new Set(t(Array.from(n), e));\n              var i = {};\n\n              for (var o in n) {\n                var s = n[o];\n                "object" != typeof s || null === s ? i[o] = s : s instanceof Date ? i[o] = new Date(s) : s instanceof Map ? i[o] = new Map(t(Array.from(s), e)) : s instanceof Set ? i[o] = new Set(t(Array.from(s), e)) : ArrayBuffer.isView(s) ? i[o] = r(s) : i[o] = e(s);\n              }\n\n              return i;\n            } : function e(n) {\n              if ("object" != typeof n || null === n) return n;\n              if (n instanceof Date) return new Date(n);\n              if (Array.isArray(n)) return t(n, e);\n              if (n instanceof Map) return new Map(t(Array.from(n), e));\n              if (n instanceof Set) return new Set(t(Array.from(n), e));\n              var i = {};\n\n              for (var o in n) if (!1 !== Object.hasOwnProperty.call(n, o)) {\n                var s = n[o];\n                "object" != typeof s || null === s ? i[o] = s : s instanceof Date ? i[o] = new Date(s) : s instanceof Map ? i[o] = new Map(t(Array.from(s), e)) : s instanceof Set ? i[o] = new Set(t(Array.from(s), e)) : ArrayBuffer.isView(s) ? i[o] = r(s) : i[o] = e(s);\n              }\n\n              return i;\n            };\n\n            function t(e, t) {\n              for (var n = Object.keys(e), i = new Array(n.length), o = 0; o < n.length; o++) {\n                var s = n[o],\n                    a = e[s];\n                "object" != typeof a || null === a ? i[s] = a : a instanceof Date ? i[s] = new Date(a) : ArrayBuffer.isView(a) ? i[s] = r(a) : i[s] = t(a);\n              }\n\n              return i;\n            }\n          };\n        }).call(this);\n      }).call(this, e("buffer").Buffer);\n    }, {\n      buffer: 17\n    }],\n    73: [function (e, t, r) {\n      var n = e("buffer"),\n          i = n.Buffer;\n\n      function o(e, t) {\n        for (var r in e) t[r] = e[r];\n      }\n\n      function s(e, t, r) {\n        return i(e, t, r);\n      }\n\n      i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? t.exports = n : (o(n, r), r.Buffer = s), s.prototype = Object.create(i.prototype), o(i, s), s.from = function (e, t, r) {\n        if ("number" == typeof e) throw new TypeError("Argument must not be a number");\n        return i(e, t, r);\n      }, s.alloc = function (e, t, r) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        var n = i(e);\n        return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;\n      }, s.allocUnsafe = function (e) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        return i(e);\n      }, s.allocUnsafeSlow = function (e) {\n        if ("number" != typeof e) throw new TypeError("Argument must be a number");\n        return n.SlowBuffer(e);\n      };\n    }, {\n      buffer: 17\n    }],\n    74: [function (e, t, r) {\n      t.exports = function (e) {\n        var t = e._readableState;\n        return t ? t.objectMode || "number" == typeof e._duplexState ? e.read() : e.read((r = t, r.buffer.length ? r.buffer.head ? r.buffer.head.data.length : r.buffer[0].length : r.length)) : null;\n        var r;\n      };\n    }, {}],\n    75: [function (e, t, r) {\n      "use strict";\n\n      var n = e("safe-buffer").Buffer,\n          i = n.isEncoding || function (e) {\n        switch ((e = "" + e) && e.toLowerCase()) {\n          case "hex":\n          case "utf8":\n          case "utf-8":\n          case "ascii":\n          case "binary":\n          case "base64":\n          case "ucs2":\n          case "ucs-2":\n          case "utf16le":\n          case "utf-16le":\n          case "raw":\n            return !0;\n\n          default:\n            return !1;\n        }\n      };\n\n      function o(e) {\n        var t;\n\n        switch (this.encoding = function (e) {\n          var t = function (e) {\n            if (!e) return "utf8";\n\n            for (var t;;) switch (e) {\n              case "utf8":\n              case "utf-8":\n                return "utf8";\n\n              case "ucs2":\n              case "ucs-2":\n              case "utf16le":\n              case "utf-16le":\n                return "utf16le";\n\n              case "latin1":\n              case "binary":\n                return "latin1";\n\n              case "base64":\n              case "ascii":\n              case "hex":\n                return e;\n\n              default:\n                if (t) return;\n                e = ("" + e).toLowerCase(), t = !0;\n            }\n          }(e);\n\n          if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);\n          return t || e;\n        }(e), this.encoding) {\n          case "utf16le":\n            this.text = l, this.end = u, t = 4;\n            break;\n\n          case "utf8":\n            this.fillLast = a, t = 4;\n            break;\n\n          case "base64":\n            this.text = c, this.end = h, t = 3;\n            break;\n\n          default:\n            return this.write = f, void (this.end = p);\n        }\n\n        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);\n      }\n\n      function s(e) {\n        return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;\n      }\n\n      function a(e) {\n        var t = this.lastTotal - this.lastNeed,\n            r = function (e, t, r) {\n          if (128 != (192 & t[0])) return e.lastNeed = 0, "�";\n\n          if (e.lastNeed > 1 && t.length > 1) {\n            if (128 != (192 & t[1])) return e.lastNeed = 1, "�";\n            if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";\n          }\n        }(this, e);\n\n        return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));\n      }\n\n      function l(e, t) {\n        if ((e.length - t) % 2 == 0) {\n          var r = e.toString("utf16le", t);\n\n          if (r) {\n            var n = r.charCodeAt(r.length - 1);\n            if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);\n          }\n\n          return r;\n        }\n\n        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);\n      }\n\n      function u(e) {\n        var t = e && e.length ? this.write(e) : "";\n\n        if (this.lastNeed) {\n          var r = this.lastTotal - this.lastNeed;\n          return t + this.lastChar.toString("utf16le", 0, r);\n        }\n\n        return t;\n      }\n\n      function c(e, t) {\n        var r = (e.length - t) % 3;\n        return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));\n      }\n\n      function h(e) {\n        var t = e && e.length ? this.write(e) : "";\n        return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;\n      }\n\n      function f(e) {\n        return e.toString(this.encoding);\n      }\n\n      function p(e) {\n        return e && e.length ? this.write(e) : "";\n      }\n\n      r.StringDecoder = o, o.prototype.write = function (e) {\n        if (0 === e.length) return "";\n        var t, r;\n\n        if (this.lastNeed) {\n          if (void 0 === (t = this.fillLast(e))) return "";\n          r = this.lastNeed, this.lastNeed = 0;\n        } else r = 0;\n\n        return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";\n      }, o.prototype.end = function (e) {\n        var t = e && e.length ? this.write(e) : "";\n        return this.lastNeed ? t + "�" : t;\n      }, o.prototype.text = function (e, t) {\n        var r = function (e, t, r) {\n          var n = t.length - 1;\n          if (n < r) return 0;\n          var i = s(t[n]);\n          if (i >= 0) return i > 0 && (e.lastNeed = i - 1), i;\n          if (--n < r || -2 === i) return 0;\n          if ((i = s(t[n])) >= 0) return i > 0 && (e.lastNeed = i - 2), i;\n          if (--n < r || -2 === i) return 0;\n          if ((i = s(t[n])) >= 0) return i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i;\n          return 0;\n        }(this, e, t);\n\n        if (!this.lastNeed) return e.toString("utf8", t);\n        this.lastTotal = r;\n        var n = e.length - (r - this.lastNeed);\n        return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);\n      }, o.prototype.fillLast = function (e) {\n        if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;\n      };\n    }, {\n      "safe-buffer": 73\n    }],\n    76: [function (e, t, r) {\n      "use strict";\n\n      var n = e("punycode"),\n          i = e("./util");\n\n      function o() {\n        this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;\n      }\n\n      r.parse = v, r.resolve = function (e, t) {\n        return v(e, !1, !0).resolve(t);\n      }, r.resolveObject = function (e, t) {\n        return e ? v(e, !1, !0).resolveObject(t) : t;\n      }, r.format = function (e) {\n        i.isString(e) && (e = v(e));\n        return e instanceof o ? e.format() : o.prototype.format.call(e);\n      }, r.Url = o;\n      var s = /^([a-z0-9.+-]+:)/i,\n          a = /:[0-9]*$/,\n          l = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n          u = ["{", "}", "|", "\\\\", "^", "`"].concat(["<", ">", \'"\', "`", " ", "\\r", "\\n", "\\t"]),\n          c = ["\'"].concat(u),\n          h = ["%", "/", "?", ";", "#"].concat(c),\n          f = ["/", "?", "#"],\n          p = /^[+a-z0-9A-Z_-]{0,63}$/,\n          d = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n          g = {\n        javascript: !0,\n        "javascript:": !0\n      },\n          y = {\n        javascript: !0,\n        "javascript:": !0\n      },\n          b = {\n        http: !0,\n        https: !0,\n        ftp: !0,\n        gopher: !0,\n        file: !0,\n        "http:": !0,\n        "https:": !0,\n        "ftp:": !0,\n        "gopher:": !0,\n        "file:": !0\n      },\n          m = e("querystring");\n\n      function v(e, t, r) {\n        if (e && i.isObject(e) && e instanceof o) return e;\n        var n = new o();\n        return n.parse(e, t, r), n;\n      }\n\n      o.prototype.parse = function (e, t, r) {\n        if (!i.isString(e)) throw new TypeError("Parameter \'url\' must be a string, not " + typeof e);\n        var o = e.indexOf("?"),\n            a = -1 !== o && o < e.indexOf("#") ? "?" : "#",\n            u = e.split(a);\n        u[0] = u[0].replace(/\\\\/g, "/");\n        var v = e = u.join(a);\n\n        if (v = v.trim(), !r && 1 === e.split("#").length) {\n          var w = l.exec(v);\n          if (w) return this.path = v, this.href = v, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? m.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;\n        }\n\n        var _ = s.exec(v);\n\n        if (_) {\n          var k = (_ = _[0]).toLowerCase();\n\n          this.protocol = k, v = v.substr(_.length);\n        }\n\n        if (r || _ || v.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n          var S = "//" === v.substr(0, 2);\n          !S || _ && y[_] || (v = v.substr(2), this.slashes = !0);\n        }\n\n        if (!y[_] && (S || _ && !b[_])) {\n          for (var E, C, T = -1, x = 0; x < f.length; x++) {\n            -1 !== (A = v.indexOf(f[x])) && (-1 === T || A < T) && (T = A);\n          }\n\n          -1 !== (C = -1 === T ? v.lastIndexOf("@") : v.lastIndexOf("@", T)) && (E = v.slice(0, C), v = v.slice(C + 1), this.auth = decodeURIComponent(E)), T = -1;\n\n          for (x = 0; x < h.length; x++) {\n            var A;\n            -1 !== (A = v.indexOf(h[x])) && (-1 === T || A < T) && (T = A);\n          }\n\n          -1 === T && (T = v.length), this.host = v.slice(0, T), v = v.slice(T), this.parseHost(), this.hostname = this.hostname || "";\n          var I = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];\n          if (!I) for (var P = this.hostname.split(/\\./), O = (x = 0, P.length); x < O; x++) {\n            var B = P[x];\n\n            if (B && !B.match(p)) {\n              for (var R = "", M = 0, N = B.length; M < N; M++) B.charCodeAt(M) > 127 ? R += "x" : R += B[M];\n\n              if (!R.match(p)) {\n                var L = P.slice(0, x),\n                    j = P.slice(x + 1),\n                    U = B.match(d);\n                U && (L.push(U[1]), j.unshift(U[2])), j.length && (v = "/" + j.join(".") + v), this.hostname = L.join(".");\n                break;\n              }\n            }\n          }\n          this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), I || (this.hostname = n.toASCII(this.hostname));\n          var q = this.port ? ":" + this.port : "",\n              D = this.hostname || "";\n          this.host = D + q, this.href += this.host, I && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== v[0] && (v = "/" + v));\n        }\n\n        if (!g[k]) for (x = 0, O = c.length; x < O; x++) {\n          var z = c[x];\n\n          if (-1 !== v.indexOf(z)) {\n            var F = encodeURIComponent(z);\n            F === z && (F = escape(z)), v = v.split(z).join(F);\n          }\n        }\n        var V = v.indexOf("#");\n        -1 !== V && (this.hash = v.substr(V), v = v.slice(0, V));\n        var H = v.indexOf("?");\n\n        if (-1 !== H ? (this.search = v.substr(H), this.query = v.substr(H + 1), t && (this.query = m.parse(this.query)), v = v.slice(0, H)) : t && (this.search = "", this.query = {}), v && (this.pathname = v), b[k] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {\n          q = this.pathname || "";\n          var W = this.search || "";\n          this.path = q + W;\n        }\n\n        return this.href = this.format(), this;\n      }, o.prototype.format = function () {\n        var e = this.auth || "";\n        e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");\n        var t = this.protocol || "",\n            r = this.pathname || "",\n            n = this.hash || "",\n            o = !1,\n            s = "";\n        this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = m.stringify(this.query));\n        var a = this.search || s && "?" + s || "";\n        return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || b[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, function (e) {\n          return encodeURIComponent(e);\n        })) + (a = a.replace("#", "%23")) + n;\n      }, o.prototype.resolve = function (e) {\n        return this.resolveObject(v(e, !1, !0)).format();\n      }, o.prototype.resolveObject = function (e) {\n        if (i.isString(e)) {\n          var t = new o();\n          t.parse(e, !1, !0), e = t;\n        }\n\n        for (var r = new o(), n = Object.keys(this), s = 0; s < n.length; s++) {\n          var a = n[s];\n          r[a] = this[a];\n        }\n\n        if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;\n\n        if (e.slashes && !e.protocol) {\n          for (var l = Object.keys(e), u = 0; u < l.length; u++) {\n            var c = l[u];\n            "protocol" !== c && (r[c] = e[c]);\n          }\n\n          return b[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;\n        }\n\n        if (e.protocol && e.protocol !== r.protocol) {\n          if (!b[e.protocol]) {\n            for (var h = Object.keys(e), f = 0; f < h.length; f++) {\n              var p = h[f];\n              r[p] = e[p];\n            }\n\n            return r.href = r.format(), r;\n          }\n\n          if (r.protocol = e.protocol, e.host || y[e.protocol]) r.pathname = e.pathname;else {\n            for (var d = (e.pathname || "").split("/"); d.length && !(e.host = d.shift()););\n\n            e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== d[0] && d.unshift(""), d.length < 2 && d.unshift(""), r.pathname = d.join("/");\n          }\n\n          if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {\n            var g = r.pathname || "",\n                m = r.search || "";\n            r.path = g + m;\n          }\n\n          return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;\n        }\n\n        var v = r.pathname && "/" === r.pathname.charAt(0),\n            w = e.host || e.pathname && "/" === e.pathname.charAt(0),\n            _ = w || v || r.host && e.pathname,\n            k = _,\n            S = r.pathname && r.pathname.split("/") || [],\n            E = (d = e.pathname && e.pathname.split("/") || [], r.protocol && !b[r.protocol]);\n\n        if (E && (r.hostname = "", r.port = null, r.host && ("" === S[0] ? S[0] = r.host : S.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === d[0] ? d[0] = e.host : d.unshift(e.host)), e.host = null), _ = _ && ("" === d[0] || "" === S[0])), w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, S = d;else if (d.length) S || (S = []), S.pop(), S = S.concat(d), r.search = e.search, r.query = e.query;else if (!i.isNullOrUndefined(e.search)) {\n          if (E) r.hostname = r.host = S.shift(), (I = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = I.shift(), r.host = r.hostname = I.shift());\n          return r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;\n        }\n        if (!S.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;\n\n        for (var C = S.slice(-1)[0], T = (r.host || e.host || S.length > 1) && ("." === C || ".." === C) || "" === C, x = 0, A = S.length; A >= 0; A--) "." === (C = S[A]) ? S.splice(A, 1) : ".." === C ? (S.splice(A, 1), x++) : x && (S.splice(A, 1), x--);\n\n        if (!_ && !k) for (; x--; x) S.unshift("..");\n        !_ || "" === S[0] || S[0] && "/" === S[0].charAt(0) || S.unshift(""), T && "/" !== S.join("/").substr(-1) && S.push("");\n        var I,\n            P = "" === S[0] || S[0] && "/" === S[0].charAt(0);\n        E && (r.hostname = r.host = P ? "" : S.length ? S.shift() : "", (I = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = I.shift(), r.host = r.hostname = I.shift()));\n        return (_ = _ || r.host && S.length) && !P && S.unshift(""), S.length ? r.pathname = S.join("/") : (r.pathname = null, r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;\n      }, o.prototype.parseHost = function () {\n        var e = this.host,\n            t = a.exec(e);\n        t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);\n      };\n    }, {\n      "./util": 77,\n      punycode: 51,\n      querystring: 54\n    }],\n    77: [function (e, t, r) {\n      "use strict";\n\n      t.exports = {\n        isString: function (e) {\n          return "string" == typeof e;\n        },\n        isObject: function (e) {\n          return "object" == typeof e && null !== e;\n        },\n        isNull: function (e) {\n          return null === e;\n        },\n        isNullOrUndefined: function (e) {\n          return null == e;\n        }\n      };\n    }, {}],\n    78: [function (e, t, r) {\n      (function (e) {\n        (function () {\n          function r(t) {\n            try {\n              if (!e.localStorage) return !1;\n            } catch (e) {\n              return !1;\n            }\n\n            var r = e.localStorage[t];\n            return null != r && "true" === String(r).toLowerCase();\n          }\n\n          t.exports = function (e, t) {\n            if (r("noDeprecation")) return e;\n            var n = !1;\n            return function () {\n              if (!n) {\n                if (r("throwDeprecation")) throw new Error(t);\n                r("traceDeprecation") ? console.trace(t) : console.warn(t), n = !0;\n              }\n\n              return e.apply(this, arguments);\n            };\n          };\n        }).call(this);\n      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});\n    }, {}],\n    79: [function (e, t, r) {\n      t.exports = function e(t, r) {\n        if (t && r) return e(t)(r);\n        if ("function" != typeof t) throw new TypeError("need wrapper function");\n        Object.keys(t).forEach(function (e) {\n          n[e] = t[e];\n        });\n        return n;\n\n        function n() {\n          for (var e = new Array(arguments.length), r = 0; r < e.length; r++) e[r] = arguments[r];\n\n          var n = t.apply(this, e),\n              i = e[e.length - 1];\n          return "function" == typeof n && n !== i && Object.keys(i).forEach(function (e) {\n            n[e] = i[e];\n          }), n;\n        }\n      };\n    }, {}],\n    80: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function () {\n        throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");\n      };\n    }, {}],\n    81: [function (e, t, r) {\n      t.exports = function () {\n        for (var e = {}, t = 0; t < arguments.length; t++) {\n          var r = arguments[t];\n\n          for (var i in r) n.call(r, i) && (e[i] = r[i]);\n        }\n\n        return e;\n      };\n\n      var n = Object.prototype.hasOwnProperty;\n    }, {}],\n    82: [function (e, t, r) {\n      "use strict";\n\n      t.exports = function (e) {\n        e.prototype[Symbol.iterator] = function* () {\n          for (let e = this.head; e; e = e.next) yield e.value;\n        };\n      };\n    }, {}],\n    83: [function (e, t, r) {\n      "use strict";\n\n      function n(e) {\n        var t = this;\n        if (t instanceof n || (t = new n()), t.tail = null, t.head = null, t.length = 0, e && "function" == typeof e.forEach) e.forEach(function (e) {\n          t.push(e);\n        });else if (arguments.length > 0) for (var r = 0, i = arguments.length; r < i; r++) t.push(arguments[r]);\n        return t;\n      }\n\n      function i(e, t, r) {\n        var n = t === e.head ? new a(r, null, t, e) : new a(r, t, t.next, e);\n        return null === n.next && (e.tail = n), null === n.prev && (e.head = n), e.length++, n;\n      }\n\n      function o(e, t) {\n        e.tail = new a(t, e.tail, null, e), e.head || (e.head = e.tail), e.length++;\n      }\n\n      function s(e, t) {\n        e.head = new a(t, null, e.head, e), e.tail || (e.tail = e.head), e.length++;\n      }\n\n      function a(e, t, r, n) {\n        if (!(this instanceof a)) return new a(e, t, r, n);\n        this.list = n, this.value = e, t ? (t.next = this, this.prev = t) : this.prev = null, r ? (r.prev = this, this.next = r) : this.next = null;\n      }\n\n      t.exports = n, n.Node = a, n.create = n, n.prototype.removeNode = function (e) {\n        if (e.list !== this) throw new Error("removing node which does not belong to this list");\n        var t = e.next,\n            r = e.prev;\n        return t && (t.prev = r), r && (r.next = t), e === this.head && (this.head = t), e === this.tail && (this.tail = r), e.list.length--, e.next = null, e.prev = null, e.list = null, t;\n      }, n.prototype.unshiftNode = function (e) {\n        if (e !== this.head) {\n          e.list && e.list.removeNode(e);\n          var t = this.head;\n          e.list = this, e.next = t, t && (t.prev = e), this.head = e, this.tail || (this.tail = e), this.length++;\n        }\n      }, n.prototype.pushNode = function (e) {\n        if (e !== this.tail) {\n          e.list && e.list.removeNode(e);\n          var t = this.tail;\n          e.list = this, e.prev = t, t && (t.next = e), this.tail = e, this.head || (this.head = e), this.length++;\n        }\n      }, n.prototype.push = function () {\n        for (var e = 0, t = arguments.length; e < t; e++) o(this, arguments[e]);\n\n        return this.length;\n      }, n.prototype.unshift = function () {\n        for (var e = 0, t = arguments.length; e < t; e++) s(this, arguments[e]);\n\n        return this.length;\n      }, n.prototype.pop = function () {\n        if (this.tail) {\n          var e = this.tail.value;\n          return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, e;\n        }\n      }, n.prototype.shift = function () {\n        if (this.head) {\n          var e = this.head.value;\n          return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, e;\n        }\n      }, n.prototype.forEach = function (e, t) {\n        t = t || this;\n\n        for (var r = this.head, n = 0; null !== r; n++) e.call(t, r.value, n, this), r = r.next;\n      }, n.prototype.forEachReverse = function (e, t) {\n        t = t || this;\n\n        for (var r = this.tail, n = this.length - 1; null !== r; n--) e.call(t, r.value, n, this), r = r.prev;\n      }, n.prototype.get = function (e) {\n        for (var t = 0, r = this.head; null !== r && t < e; t++) r = r.next;\n\n        if (t === e && null !== r) return r.value;\n      }, n.prototype.getReverse = function (e) {\n        for (var t = 0, r = this.tail; null !== r && t < e; t++) r = r.prev;\n\n        if (t === e && null !== r) return r.value;\n      }, n.prototype.map = function (e, t) {\n        t = t || this;\n\n        for (var r = new n(), i = this.head; null !== i;) r.push(e.call(t, i.value, this)), i = i.next;\n\n        return r;\n      }, n.prototype.mapReverse = function (e, t) {\n        t = t || this;\n\n        for (var r = new n(), i = this.tail; null !== i;) r.push(e.call(t, i.value, this)), i = i.prev;\n\n        return r;\n      }, n.prototype.reduce = function (e, t) {\n        var r,\n            n = this.head;\n        if (arguments.length > 1) r = t;else {\n          if (!this.head) throw new TypeError("Reduce of empty list with no initial value");\n          n = this.head.next, r = this.head.value;\n        }\n\n        for (var i = 0; null !== n; i++) r = e(r, n.value, i), n = n.next;\n\n        return r;\n      }, n.prototype.reduceReverse = function (e, t) {\n        var r,\n            n = this.tail;\n        if (arguments.length > 1) r = t;else {\n          if (!this.tail) throw new TypeError("Reduce of empty list with no initial value");\n          n = this.tail.prev, r = this.tail.value;\n        }\n\n        for (var i = this.length - 1; null !== n; i--) r = e(r, n.value, i), n = n.prev;\n\n        return r;\n      }, n.prototype.toArray = function () {\n        for (var e = new Array(this.length), t = 0, r = this.head; null !== r; t++) e[t] = r.value, r = r.next;\n\n        return e;\n      }, n.prototype.toArrayReverse = function () {\n        for (var e = new Array(this.length), t = 0, r = this.tail; null !== r; t++) e[t] = r.value, r = r.prev;\n\n        return e;\n      }, n.prototype.slice = function (e, t) {\n        (t = t || this.length) < 0 && (t += this.length), (e = e || 0) < 0 && (e += this.length);\n        var r = new n();\n        if (t < e || t < 0) return r;\n        e < 0 && (e = 0), t > this.length && (t = this.length);\n\n        for (var i = 0, o = this.head; null !== o && i < e; i++) o = o.next;\n\n        for (; null !== o && i < t; i++, o = o.next) r.push(o.value);\n\n        return r;\n      }, n.prototype.sliceReverse = function (e, t) {\n        (t = t || this.length) < 0 && (t += this.length), (e = e || 0) < 0 && (e += this.length);\n        var r = new n();\n        if (t < e || t < 0) return r;\n        e < 0 && (e = 0), t > this.length && (t = this.length);\n\n        for (var i = this.length, o = this.tail; null !== o && i > t; i--) o = o.prev;\n\n        for (; null !== o && i > e; i--, o = o.prev) r.push(o.value);\n\n        return r;\n      }, n.prototype.splice = function (e, t, ...r) {\n        e > this.length && (e = this.length - 1), e < 0 && (e = this.length + e);\n\n        for (var n = 0, o = this.head; null !== o && n < e; n++) o = o.next;\n\n        var s = [];\n\n        for (n = 0; o && n < t; n++) s.push(o.value), o = this.removeNode(o);\n\n        null === o && (o = this.tail), o !== this.head && o !== this.tail && (o = o.prev);\n\n        for (n = 0; n < r.length; n++) o = i(this, o, r[n]);\n\n        return s;\n      }, n.prototype.reverse = function () {\n        for (var e = this.head, t = this.tail, r = e; null !== r; r = r.prev) {\n          var n = r.prev;\n          r.prev = r.next, r.next = n;\n        }\n\n        return this.head = t, this.tail = e, this;\n      };\n\n      try {\n        e("./iterator.js")(n);\n      } catch (e) {}\n    }, {\n      "./iterator.js": 82\n    }]\n  }, {}, [12])(12);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(10)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "3ecb6f3ea45120eed47f.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3RpbWVzeW5jL3JlcGxheS9EYXRhU3luY2hyb25pemVyLnJlcGxheS53b3JrZXIuanM/YjE4MyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiV29ya2VyIiwiX193ZWJwYWNrX3B1YmxpY19wYXRoX18iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztFQUMxQixPQUFPLElBQUlDLE1BQUosQ0FBV0MscUJBQXVCLEdBQUcsZ0NBQXJDLENBQVA7QUFDRCxDQUZEIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjNlY2I2ZjNlYTQ1MTIwZWVkNDdmLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "fdaf25e45eb488bc8271.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3RpbWVzeW5jL3J0L0RhdGFTeW5jaHJvbml6ZXIucmVhbHRpbWUud29ya2VyLmpzP2IyZWIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7RUFDMUIsT0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmZGFmMjVlNDVlYjQ4OGJjODI3MS53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/datasource/Mode.js\nvar Mode = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/timesync/replay/DataSynchronizer.replay.worker.js\nvar DataSynchronizer_replay_worker = __webpack_require__(25);\nvar DataSynchronizer_replay_worker_default = /*#__PURE__*/__webpack_require__.n(DataSynchronizer_replay_worker);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(3);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/event/EventType.js\nvar EventType = __webpack_require__(7);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/worker/WorkerExt.js\nvar WorkerExt = __webpack_require__(9);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/timesync/replay/DataSynchronizer.replay.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\n\nclass DataSynchronizer_replay_DataSynchronizerReplay {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.minTime - min range time as ISO date\n   * @param {String} properties.maxTime - max range time as ISO date\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   * @param {DataSynchronizer} timeSync - dataSynchronizer\n   */\n  constructor(properties, timeSync) {\n    this.bufferingTime = 1000; // default\n\n    this.id = properties.id || Object(Utils["n" /* randomUUID */])();\n    this.dataSources = properties.dataSources || [];\n    this.replaySpeed = properties.replaySpeed || 1;\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250;\n    this.initialized = false;\n    this.timeSync = timeSync;\n    this.properties = {};\n    this.properties.replaySpeed = this.replaySpeed;\n    this.properties.startTimestamp = undefined;\n    this.properties.endTimestamp = undefined;\n    this.properties.minTimestamp = undefined;\n    this.properties.maxTimestamp = undefined;\n    this.properties.version = 0;\n\n    if (Object(Utils["l" /* isDefined */])(properties)) {\n      if (Object(Utils["l" /* isDefined */])(properties.minTime)) {\n        this.minTimestamp = new Date(properties.minTime).getTime();\n      }\n\n      if (Object(Utils["l" /* isDefined */])(properties.maxTime)) {\n        this.maxTimestamp = new Date(properties.maxTime).getTime();\n      }\n    }\n\n    this.computeMinMax();\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getTopicId() {\n    return Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getTimeTopicId() {\n    return Constants["d" /* TIME_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getDataSources() {\n    return this.dataSources;\n  }\n\n  computeMinMax() {\n    if (this.dataSources.length > 0) {\n      let minTimestamp = Number.MAX_VALUE,\n          maxTimestamp = Number.MIN_VALUE; // default min/max will be adjusted on the most min/max DataSource\n\n      for (let ds of this.dataSources) {\n        // compute min/max range of dataSynchronizer\n        let dsMinTimestamp = ds.getMinTimeAsTimestamp();\n        let dsMaxTimestamp = ds.getMaxTimeAsTimestamp();\n\n        if (dsMinTimestamp < minTimestamp) {\n          minTimestamp = dsMinTimestamp;\n        }\n\n        if (dsMaxTimestamp > maxTimestamp) {\n          maxTimestamp = dsMaxTimestamp;\n        }\n      } // check if a default Min/Max has been defined into DataSynchronizer forcing intersection with current computed ones\n\n\n      if (Object(Utils["l" /* isDefined */])(this.minTimestamp) && this.minTimestamp > minTimestamp) {\n        // intersect and takes the min of dataSynchronizer\n        minTimestamp = this.minTimestamp;\n      }\n\n      if (Object(Utils["l" /* isDefined */])(this.maxTimestamp) && this.maxTimestamp > maxTimestamp) {\n        // intersect and takes the min of dataSynchronizer\n        maxTimestamp = this.maxTimestamp;\n      }\n\n      this.properties.minTimestamp = minTimestamp;\n      this.properties.maxTimestamp = maxTimestamp;\n    } else {\n      const st = new Date(\'1970-01-01T00:00:00Z\').getTime();\n      const end = new Date(\'2055-01-01T00:00:00Z\').getTime();\n      this.properties.minTimestamp = this.properties.startTimestamp = st;\n      this.properties.maxTimestamp = this.properties.endTimestamp = end;\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    if (this.properties.startTimestamp) {\n      return new Date(this.properties.startTimestamp).toISOString();\n    } else {\n      return this.getMinTimeAsIsoDate();\n    }\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.properties.startTimestamp;\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    if (this.properties.endTimestamp) {\n      return new Date(this.properties.endTimestamp).toISOString();\n    } else {\n      return this.getMaxTimeAsIsoDate();\n    }\n  }\n\n  getEndTimeAsTimestamp() {\n    return this.properties.endTimestamp;\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return new Date(this.properties.minTimestamp).toISOString();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.properties.minTimestamp;\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return new Date(this.properties.maxTimestamp).toISOString();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.properties.maxTimestamp;\n  }\n\n  async setStartTime(time, lazy = false) {\n    this.properties.startTimestamp = new Date(time).getTime();\n\n    if (!lazy) {\n      await this.updateAlgo();\n    }\n  }\n\n  async setEndTime(time, lazy = false) {\n    this.properties.endTimestamp = new Date(time).getTime();\n\n    if (!lazy) {\n      await this.updateAlgo();\n    }\n  }\n\n  async setMinTime(minTime, resetStartTime = false) {\n    this.minTimestamp = new Date(minTime).getTime();\n    this.computeMinMax();\n    this.timeChanged();\n  }\n\n  async setMaxTime(maxTime, resetStartTime = false) {\n    this.maxTimestamp = new Date(maxTime).getTime();\n    this.computeMinMax();\n    this.timeChanged();\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.replaySpeed;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  getMode() {\n    return Mode["a" /* Mode */].REPLAY;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    try {\n      const dataSourcesForWorker = [];\n\n      for (let dataSource of this.dataSources) {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        dataSourcesForWorker.push(dataSourceForWorker);\n      }\n\n      this.synchronizerWorker = new WorkerExt["a" /* default */](new DataSynchronizer_replay_worker_default.a());\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'init\',\n        dataSources: dataSourcesForWorker,\n        replaySpeed: this.replaySpeed,\n        timerResolution: this.timerResolution,\n        masterTimeRefreshRate: this.masterTimeRefreshRate,\n        startTimestamp: this.getStartTimeAsTimestamp(),\n        endTimestamp: this.getEndTimeAsTimestamp(),\n        mode: this.getMode(),\n        version: this.version(),\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }).then(() => {\n        this.initialized = true;\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.getId(),\n      name: dataSource.getName(),\n      minTimestamp: dataSource.getMinTimeAsTimestamp(),\n      maxTimestamp: dataSource.getMaxTimeAsTimestamp()\n    }; // bind dataSource data onto dataSynchronizer data\n\n    try {\n      await dataSource.setDataSynchronizer(this.timeSync);\n      dataSource.properties.replaySpeed = this.replaySpeed;\n    } catch (ex) {\n      console.error("Cannot set the synchronizer to this DataSource", ex);\n      throw ex;\n    }\n\n    return obj;\n  }\n\n  timeChanged() {\n    this.onTimeChanged(this.getMinTimeAsTimestamp(), this.getMaxTimeAsTimestamp(), this.getStartTimeAsTimestamp(), this.getEndTimeAsTimestamp());\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    this.dataSources.push(dataSource);\n    this.computeMinMax();\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, add DataSource ${dataSource.id} as it`);\n      this.timeChanged();\n      this.onAddedDataSource(dataSource.id);\n    } else {\n      dataSource.setStartTime(this.getStartTimeAsIsoDate());\n      dataSource.setEndTime(this.getEndTimeAsIsoDate());\n      const dataSourceForWorker = await this.createDataSourceForWorker(dataSource); // add dataSource to synchronizer algorithm\n\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'add\',\n        dataSources: [dataSourceForWorker]\n      }).then(async () => {\n        if (await this.isConnected()) {\n          await dataSource.connect();\n        }\n\n        this.onAddedDataSource(dataSource.id);\n        this.timeChanged();\n      });\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n\n    if (this.dataSources.length === 0) {\n      await this.reset();\n    }\n\n    this.computeMinMax();\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, remove DataSource ${dataSource.id} as it`);\n      await dataSource.removeDataSynchronizer();\n      this.timeChanged();\n      this.onRemovedDataSource(dataSource.id);\n    } else {\n      await dataSource.disconnect();\n      await dataSource.removeDataSynchronizer();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'remove\',\n        dataSourceIds: [dataSource.getId()],\n        startTimestamp: this.getStartTimeAsTimestamp(),\n        endTimestamp: this.getEndTimeAsTimestamp()\n      }).then(() => {\n        this.timeChanged();\n        this.onRemovedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    if (this.synchronizerWorker) {\n      return this.synchronizerWorker.postMessageWithAck({\n        type: \'data\',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    if (this.dataSources.length > 0) {\n      return this.checkInit().then(async () => {\n        const isConnected = await this.isConnected();\n        return isConnected ? isConnected : this.doConnect();\n      });\n    }\n  }\n\n  async checkInit() {\n    if (!Object(Utils["l" /* isDefined */])(this.init)) {\n      this.init = this.initDataSources();\n    }\n\n    return this.init;\n  }\n\n  checkStartEndTime() {\n    if (!this.properties.startTimestamp) {\n      this.properties.startTimestamp = this.properties.minTimestamp;\n    }\n\n    if (!this.properties.endTimestamp) {\n      this.properties.endTimestamp = this.properties.maxTimestamp;\n    }\n  }\n\n  async doConnect() {\n    this.checkStartEndTime();\n    await this.updateAlgo();\n\n    for (let dataSource of this.dataSources) {\n      await dataSource.setTimeRange(this.getStartTimeAsIsoDate(), this.getEndTimeAsIsoDate(), this.getReplaySpeed(), true);\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'connect\',\n      version: this.version()\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    await this.reset();\n    const promises = [];\n\n    for (let dataSource of this.dataSources) {\n      promises.push(dataSource.disconnect());\n    }\n\n    return Promise.all(promises);\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    this.replaySpeed = replaySpeed;\n    this.properties.replaySpeed = replaySpeed;\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'replay-speed\',\n      replaySpeed: replaySpeed\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   * @param {Mode} mode - default dataSource mode\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false) {\n    await this.disconnect();\n    this.incVersion(); // update properties of DataSynchronizer\n\n    this.replaySpeed = replaySpeed;\n    await this.setStartTime(startTime, false);\n    await this.setEndTime(endTime, false);\n    const promises = []; // update properties of each DataSource\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.setTimeRange(this.getStartTimeAsIsoDate(), this.getEndTimeAsIsoDate(), this.getReplaySpeed(), false, this.getMode(), this.version()));\n    }\n\n    return Promise.all(promises);\n  }\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n  }\n\n  async updateAlgo() {\n    // synchronize startTimestamp of synchronizer to datasources\n    for (let dataSource of this.dataSources) {\n      dataSource.setStartTimestamp(this.getStartTimeAsTimestamp());\n      dataSource.setEndTimestamp(this.getEndTimeAsTimestamp());\n    } // re-compute new min/max of synchronizer\n\n\n    this.computeMinMax(); // provide new min/max of each dataSource to dataSynchronizer\n\n    const dataSourcesForWorker = [];\n\n    for (let dataSource of this.dataSources) {\n      const obj = {\n        bufferingTime: dataSource.properties.bufferingTime || 0,\n        timeOut: dataSource.properties.timeOut || 0,\n        id: dataSource.getId(),\n        name: dataSource.getName(),\n        minTimestamp: dataSource.getMinTimeAsTimestamp(),\n        maxTimestamp: dataSource.getMaxTimeAsTimestamp()\n      };\n      dataSourcesForWorker.push(obj);\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'time-range\',\n      mode: this.getMode(),\n      replaySpeed: this.getReplaySpeed(),\n      startTimestamp: this.getStartTimeAsTimestamp(),\n      endTimestamp: this.getEndTimeAsTimestamp(),\n      version: this.version(),\n      dataSources: dataSourcesForWorker\n    });\n  }\n\n  async updateProperties(properties) {\n    const promises = [];\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.updateProperties(properties));\n    }\n\n    return Promise.all(promises);\n  }\n\n  resetTimes() {\n    this.computeMinMax();\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    await this.checkInit();\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'reset\'\n    }).then(() => this.resetTimes());\n  }\n\n  async getCurrentTime() {\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'current-time\'\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    if (this.dataSources.length === 0) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'is-connected\'\n      }).then(v => v.data);\n    }\n  }\n\n  incVersion() {\n    this.properties.version++;\n  }\n\n  async autoUpdateTime(activate) {\n    const promises = [];\n\n    for (let ds of this.dataSources) {\n      promises.push(ds.autoUpdateTime(activate));\n    }\n\n    return Promise.all(promises);\n  }\n\n  onTimeChanged(min, max, start, end) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSynchronizer_replay = (DataSynchronizer_replay_DataSynchronizerReplay);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/timesync/rt/DataSynchronizer.realtime.worker.js\nvar DataSynchronizer_realtime_worker = __webpack_require__(26);\nvar DataSynchronizer_realtime_worker_default = /*#__PURE__*/__webpack_require__.n(DataSynchronizer_realtime_worker);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/timesync/rt/DataSynchronizer.realtime.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass DataSynchronizer_realtime_DataSynchronizerRealtime {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   * @param {DataSynchronizer} timeSync - dataSynchronizer\n   */\n  constructor(properties, timeSync) {\n    this.bufferingTime = 1000; // default\n\n    this.id = properties.id || Object(Utils["n" /* randomUUID */])();\n    this.dataSources = properties.dataSources || [];\n    this.timerResolution = properties.timerResolution || 5;\n    this.masterTimeRefreshRate = properties.masterTimeRefreshRate || 250;\n    this.initialized = false;\n    this.timeSync = timeSync;\n    this.properties = {};\n    this.properties.version = 0;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getDataSources() {\n    return this.dataSources;\n  }\n\n  getTopicId() {\n    return Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  getTimeTopicId() {\n    return Constants["d" /* TIME_SYNCHRONIZER_TOPIC */] + this.id;\n  }\n\n  setStartTimestamp(timestamp) {\n    this.properties.startTimestamp = timestamp;\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    if (this.synchronizerWorker !== null) {\n      this.synchronizerWorker.terminate();\n      this.synchronizerWorker = null;\n    }\n\n    for (let dataSource of this.dataSources) {\n      dataSource.terminate();\n    }\n  }\n\n  getMode() {\n    return Mode["a" /* Mode */].REAL_TIME;\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    try {\n      const dataSourcesForWorker = [];\n\n      for (let dataSource of this.dataSources) {\n        const dataSourceForWorker = await this.createDataSourceForWorker(dataSource);\n        dataSourcesForWorker.push(dataSourceForWorker);\n      }\n\n      this.synchronizerWorker = new WorkerExt["a" /* default */](new DataSynchronizer_realtime_worker_default.a());\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'init\',\n        dataSources: dataSourcesForWorker,\n        timerResolution: this.timerResolution,\n        masterTimeRefreshRate: this.masterTimeRefreshRate,\n        mode: Mode["a" /* Mode */].REAL_TIME,\n        version: this.version(),\n        topics: {\n          data: this.getTopicId(),\n          time: this.getTimeTopicId()\n        }\n      }).then(() => {\n        this.initialized = true;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /**\n   * @private\n   * @param dataSource\n   */\n\n\n  async createDataSourceForWorker(dataSource) {\n    const obj = {\n      bufferingTime: dataSource.properties.bufferingTime || 0,\n      timeOut: dataSource.properties.timeOut || 0,\n      id: dataSource.id,\n      name: dataSource.name\n    }; // bind dataSource data onto dataSynchronizer data\n\n    await dataSource.setDataSynchronizer(this.timeSync);\n    return obj;\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    this.dataSources.push(dataSource);\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, add DataSource ${dataSource.id} as it`);\n    } else {\n      const dataSourceForWorker = await this.createDataSourceForWorker(dataSource); // add dataSource to synchronizer algorithm\n\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'add\',\n        dataSources: [dataSourceForWorker]\n      }).then(() => {\n        this.onAddedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    await dataSource.removeDataSynchronizer();\n    this.dataSources = this.dataSources.filter(elt => elt.id !== dataSource.getId());\n\n    if (this.dataSources.length === 0) {\n      await this.reset();\n    }\n\n    if (!this.initialized) {\n      console.log(`DataSynchronizer not initialized yet, remove DataSource ${dataSource.id} as it`);\n    } else {\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'remove\',\n        dataSourceIds: [dataSource.getId()]\n      }).then(() => {\n        this.onRemovedDataSource(dataSource.id);\n      });\n    }\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    if (this.synchronizerWorker !== null) {\n      return this.synchronizerWorker.postMessageWithAck({\n        type: \'data\',\n        dataSourceId: dataSourceId,\n        data: data\n      });\n    }\n  }\n\n  version() {\n    return this.properties.version;\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    return this.doConnect();\n  }\n\n  async checkInit() {\n    if (!Object(Utils["l" /* isDefined */])(this.init)) {\n      this.init = this.initDataSources();\n    }\n\n    return this.init;\n  }\n\n  async doConnect() {\n    for (let dataSource of this.dataSources) {\n      await dataSource.connect();\n    }\n\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'connect\',\n      version: this.version()\n    });\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    console.log(\'disconnect\');\n    await this.reset();\n    const promises = [];\n\n    for (let dataSource of this.dataSources) {\n      promises.push(dataSource.disconnect());\n    }\n\n    return Promise.all(promises);\n  }\n\n  async updateProperties(properties) {\n    for (let ds of this.dataSources) {\n      ds.updateProperties(properties);\n    }\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    await this.checkInit();\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'reset\'\n    });\n  }\n\n  async getCurrentTime() {\n    return this.synchronizerWorker.postMessageWithAck({\n      message: \'current-time\'\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async isConnected() {\n    if (this.dataSources.length === 0) {\n      return false;\n    } else {\n      await this.checkInit();\n      return this.synchronizerWorker.postMessageWithAck({\n        message: \'is-connected\'\n      }).then(message => message.data);\n    }\n  }\n\n  setMinTime(minTime) {}\n\n  setMaxTime(maxTime) {}\n\n  incVersion() {\n    this.properties.version++;\n  }\n\n  onTimeChanged(start, min) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n}\n\n/* harmony default export */ var DataSynchronizer_realtime = (DataSynchronizer_realtime_DataSynchronizerRealtime);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/timesync/DataSynchronizer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n\n\nclass DataSynchronizer_DataSynchronizer {\n  /**\n   * Creates The dataSynchronizer.\n   * @param {Object} properties - the property of the object\n   * @param {String} [properties.id=randomUUID] - id of the dataSynchronizer or random if not provided\n   * @param {Number} [properties.replaySpeed=1] - replaySpeed value\n   * @param {Number} [properties.timerResolution=5] - interval in which data is played (in milliseconds)\n   * @param {Number} [properties.masterTimeRefreshRate=250] - interval in which time value is send through broadcast channel (in milliseconds)\n   * @param {Number} [properties.mode=Mode.REPLAY] - mode of the data synchronizer\n   * @param {String} properties.startTime - start time of the temporal run\n   * @param {String} properties.endTime - end time of the temporal run\n   * @param {Datasource[]} properties.dataSources - the dataSource array\n   */\n  constructor(properties) {\n    const id = properties.id || Object(Utils["n" /* randomUUID */])();\n    this.dataSynchronizerReplay = new DataSynchronizer_replay({ ...properties,\n      id: id + \'-replay\'\n    }, this);\n    this.dataSynchronizerRt = new DataSynchronizer_realtime({ ...properties,\n      id: id + \'-realtime\'\n    }, this);\n    this.broadcastChannels = [];\n    this.setMode(properties.mode || Mode["a" /* Mode */].REPLAY, false).then(() => {\n      this.dataSynchronizer.onTimeChanged = (min, max, start, end) => this.onTimeChanged(min, max, start, end);\n\n      this.dataSynchronizer.onAddedDataSource = dataSourceId => this.onAddedDataSource(dataSourceId);\n\n      this.dataSynchronizer.onRemovedDataSource = dataSourceId => this.onRemovedDataSource(dataSourceId);\n    });\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  async setMode(mode, disconnect = true) {\n    if (this.dataSynchronizer && disconnect) {\n      await this.dataSynchronizer.disconnect();\n    }\n\n    if (mode === Mode["a" /* Mode */].REPLAY) {\n      this.dataSynchronizer = this.dataSynchronizerReplay;\n    } else if (mode === Mode["a" /* Mode */].REAL_TIME) {\n      this.dataSynchronizer = this.dataSynchronizerRt;\n    }\n\n    this.id = this.dataSynchronizer.id;\n\n    for (let bc of this.broadcastChannels) {\n      bc.close();\n    }\n\n    this.initEventSubscription();\n    this.broadcastChannels = [];\n    const promises = [];\n\n    for (let ds of this.dataSynchronizer.getDataSources()) {\n      promises.push(ds.setMode(mode, disconnect));\n    }\n\n    this.dataSynchronizer.onTimeChanged = (min, max, start, end) => this.onTimeChanged(min, max, start, end);\n\n    this.dataSynchronizer.onAddedDataSource = dataSourceId => this.onAddedDataSource(dataSourceId);\n\n    this.dataSynchronizer.onRemovedDataSource = dataSourceId => this.onRemovedDataSource(dataSourceId);\n\n    return Promise.all(promises).then(() => this.onChangedMode(mode));\n  }\n\n  initEventSubscription() {\n    this.eventSubscriptionMap = {}; // listen for Events to callback to subscriptions\n\n    this.broadcastChannels.push(new BroadcastChannel(this.getTopicId()).onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    });\n    this.broadcastChannels.push(new BroadcastChannel(this.getTimeTopicId()).onmessage = message => {\n      if (message.data.type === EventType["a" /* EventType */].MASTER_TIME) {\n        // this.properties.startTimestamp = message.data.timestamp; // save as last timestamp\n        this.dataSynchronizer.setStartTimestamp(message.data.timestamp);\n      }\n\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    });\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  }\n\n  getDataSources() {\n    return this.dataSynchronizer.getDataSources();\n  }\n\n  getTopicId() {\n    return this.dataSynchronizer.getTopicId();\n  }\n\n  getTimeTopicId() {\n    return this.dataSynchronizer.getTimeTopicId();\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTimeAsIsoDate() {\n    return this.dataSynchronizer.getStartTimeAsIsoDate();\n  }\n  /**\n   * Gets the startTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getStartTimeAsTimestamp() {\n    return this.dataSynchronizer.getStartTimeAsTimestamp();\n  }\n  /**\n   * Gets the endTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTimeAsIsoDate() {\n    return this.dataSynchronizer.getEndTimeAsIsoDate();\n  }\n\n  getEndTimeAsTimestamp() {\n    return this.dataSynchronizer.getEndTimeAsTimestamp();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTimeAsIsoDate() {\n    return this.dataSynchronizer.getMinTimeAsIsoDate();\n  }\n  /**\n   * Gets the minTime of the first DataSource objet\n   * @returns {String} - startTime as unix timestamp\n   */\n\n\n  getMinTimeAsTimestamp() {\n    return this.dataSynchronizer.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTimeAsIsoDate() {\n    return this.dataSynchronizer.getMinTimeAsTimestamp();\n  }\n  /**\n   * Gets the maxTime of the first DataSource objet\n   * @returns {String} - endTime as unix timestamp\n   */\n\n\n  getMaxTimeAsTimestamp() {\n    return this.dataSynchronizer.getMaxTimeAsTimestamp();\n  }\n  /**\n   * Gets the replaySpeed\n   * @returns {Number} - the replay speed\n   */\n\n\n  getReplaySpeed() {\n    return this.dataSynchronizer.getReplaySpeed();\n  }\n  /**\n   * Terminate the corresponding running WebWorker by calling terminate() on it.\n   */\n\n\n  terminate() {\n    return this.dataSynchronizer.terminate();\n  }\n\n  getMode() {\n    return this.dataSynchronizer.getMode();\n  }\n\n  async autoUpdateTime(activate) {\n    return this.dataSynchronizerReplay.autoUpdateTime(activate);\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async initDataSources() {\n    return this.dataSynchronizer.initDataSources();\n  }\n  /**\n   * Adds a new DataSource object to the list of datasources to synchronize.\n   * note: don\'t forget to call reset() to be sure to re-init the synchronizer internal properties.\n   * @param {TimeSeriesDataSource} dataSource - the new datasource to add\n   */\n\n\n  async addDataSource(dataSource) {\n    await this.dataSynchronizerRt.addDataSource(dataSource);\n    return this.dataSynchronizerReplay.addDataSource(dataSource);\n  }\n  /**\n   * Removes a DataSource object from the list of datasources of the synchronizer.\n   * @param {TimeSeriesDatasource} dataSource - the new datasource to add\n   */\n\n\n  async removeDataSource(dataSource) {\n    await this.dataSynchronizerRt.removeDataSource(dataSource);\n    return this.dataSynchronizerReplay.removeDataSource(dataSource);\n  }\n  /**\n   * @param {String} dataSourceId - the dataSource id\n   * @param {Object} data - the data to push into the data synchronizer\n   */\n\n\n  async push(dataSourceId, data) {\n    return this.dataSynchronizer.push(dataSourceId, data);\n  }\n\n  version() {\n    return this.dataSynchronizer.version();\n  }\n  /**\n   * Connects all dataSources\n   */\n\n\n  async connect() {\n    return this.dataSynchronizer.connect();\n  }\n\n  async checkInit() {\n    return this.dataSynchronizer.checkInit();\n  }\n\n  async doConnect() {\n    return this.dataSynchronizer.doConnect();\n  }\n  /**\n   * Disconnects all dataSources\n   */\n\n\n  async disconnect() {\n    return this.dataSynchronizer.disconnect();\n  }\n  /**\n   * Sets the replaySpeed\n   */\n\n\n  async setReplaySpeed(replaySpeed) {\n    return this.dataSynchronizer.setReplaySpeed(replaySpeed);\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  async setTimeRange(startTime = this.getStartTimeAsIsoDate(), endTime = this.getEndTimeAsIsoDate(), replaySpeed = this.getReplaySpeed(), reconnect = false) {\n    return this.dataSynchronizer.setTimeRange(startTime, endTime, replaySpeed, reconnect);\n  }\n\n  async updateProperties(properties) {\n    return this.dataSynchronizer.updateProperties(properties);\n  }\n  /**\n   * Resets reference time\n   */\n\n\n  async reset() {\n    return this.dataSynchronizer.reset();\n  }\n\n  async getCurrentTime() {\n    return this.dataSynchronizer.getCurrentTime();\n  }\n\n  setMinTime(minTime) {\n    this.dataSynchronizer.setMinTime(minTime);\n  }\n\n  setMaxTime(maxTime) {\n    this.dataSynchronizer.setMaxTime(maxTime);\n  }\n  /**\n  * Connect the dataSource then the protocol will be opened as well.\n  */\n\n\n  async isConnected() {\n    return this.dataSynchronizer.isConnected();\n  }\n\n  minMaxChanged(resetStartTimestamp = false) {\n    if (resetStartTimestamp) {\n      this.dataSynchronizerReplay.properties.startTimestamp = undefined;\n      this.dataSynchronizerReplay.properties.endTimestamp = undefined;\n    }\n\n    this.dataSynchronizerReplay.computeMinMax();\n    this.dataSynchronizerReplay.timeChanged();\n  }\n\n  onTimeChanged(start, min) {}\n\n  onRemovedDataSource(dataSourceId) {}\n\n  onAddedDataSource(dataSourceId) {}\n\n  onChangedMode(mode) {}\n\n}\n\n/* harmony default export */ var timesync_DataSynchronizer = __webpack_exports__["a"] = (DataSynchronizer_DataSynchronizer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3RpbWVzeW5jL3JlcGxheS9EYXRhU3luY2hyb25pemVyLnJlcGxheS5qcz8zNGQwIiwid2VicGFjazovLy8vaG9tZS9uZXZyby9Qcm9ncy9wcm9ncy1sb2NhbC9naXQtcmVwby9PU0gyL2dpdGh1Yi9vc2gtanMvc291cmNlL2NvcmUvdGltZXN5bmMvcnQvRGF0YVN5bmNocm9uaXplci5yZWFsdGltZS5qcz9jNGViIiwid2VicGFjazovLy8vaG9tZS9uZXZyby9Qcm9ncy9wcm9ncy1sb2NhbC9naXQtcmVwby9PU0gyL2dpdGh1Yi9vc2gtanMvc291cmNlL2NvcmUvdGltZXN5bmMvRGF0YVN5bmNocm9uaXplci5qcz9mZTliIl0sIm5hbWVzIjpbIkRhdGFTeW5jaHJvbml6ZXJSZXBsYXkiLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJ0aW1lU3luYyIsImJ1ZmZlcmluZ1RpbWUiLCJpZCIsInJhbmRvbVVVSUQiLCJkYXRhU291cmNlcyIsInJlcGxheVNwZWVkIiwidGltZXJSZXNvbHV0aW9uIiwibWFzdGVyVGltZVJlZnJlc2hSYXRlIiwiaW5pdGlhbGl6ZWQiLCJzdGFydFRpbWVzdGFtcCIsInVuZGVmaW5lZCIsImVuZFRpbWVzdGFtcCIsIm1pblRpbWVzdGFtcCIsIm1heFRpbWVzdGFtcCIsInZlcnNpb24iLCJpc0RlZmluZWQiLCJtaW5UaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJtYXhUaW1lIiwiY29tcHV0ZU1pbk1heCIsImdldElkIiwiZ2V0VG9waWNJZCIsIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiZ2V0VGltZVRvcGljSWQiLCJUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyIsImdldERhdGFTb3VyY2VzIiwibGVuZ3RoIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiTUlOX1ZBTFVFIiwiZHMiLCJkc01pblRpbWVzdGFtcCIsImdldE1pblRpbWVBc1RpbWVzdGFtcCIsImRzTWF4VGltZXN0YW1wIiwiZ2V0TWF4VGltZUFzVGltZXN0YW1wIiwic3QiLCJlbmQiLCJnZXRTdGFydFRpbWVBc0lzb0RhdGUiLCJ0b0lTT1N0cmluZyIsImdldE1pblRpbWVBc0lzb0RhdGUiLCJnZXRTdGFydFRpbWVBc1RpbWVzdGFtcCIsImdldEVuZFRpbWVBc0lzb0RhdGUiLCJnZXRNYXhUaW1lQXNJc29EYXRlIiwiZ2V0RW5kVGltZUFzVGltZXN0YW1wIiwic2V0U3RhcnRUaW1lIiwidGltZSIsImxhenkiLCJ1cGRhdGVBbGdvIiwic2V0RW5kVGltZSIsInNldE1pblRpbWUiLCJyZXNldFN0YXJ0VGltZSIsInRpbWVDaGFuZ2VkIiwic2V0TWF4VGltZSIsImdldFJlcGxheVNwZWVkIiwidGVybWluYXRlIiwic3luY2hyb25pemVyV29ya2VyIiwiZGF0YVNvdXJjZSIsImdldE1vZGUiLCJNb2RlIiwiUkVQTEFZIiwiaW5pdERhdGFTb3VyY2VzIiwiZGF0YVNvdXJjZXNGb3JXb3JrZXIiLCJkYXRhU291cmNlRm9yV29ya2VyIiwiY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlciIsInB1c2giLCJXb3JrZXJFeHQiLCJEYXRhU3luY2hyb25pemVyV29ya2VyIiwicG9zdE1lc3NhZ2VXaXRoQWNrIiwibWVzc2FnZSIsIm1vZGUiLCJ0b3BpY3MiLCJkYXRhIiwidGhlbiIsImVycm9yIiwiY29uc29sZSIsIm9iaiIsInRpbWVPdXQiLCJuYW1lIiwiZ2V0TmFtZSIsInNldERhdGFTeW5jaHJvbml6ZXIiLCJleCIsIm9uVGltZUNoYW5nZWQiLCJhZGREYXRhU291cmNlIiwibG9nIiwib25BZGRlZERhdGFTb3VyY2UiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3QiLCJyZW1vdmVEYXRhU291cmNlIiwiZmlsdGVyIiwiZWx0IiwicmVzZXQiLCJyZW1vdmVEYXRhU3luY2hyb25pemVyIiwib25SZW1vdmVkRGF0YVNvdXJjZSIsImRpc2Nvbm5lY3QiLCJkYXRhU291cmNlSWRzIiwiZGF0YVNvdXJjZUlkIiwidHlwZSIsImNoZWNrSW5pdCIsImRvQ29ubmVjdCIsImluaXQiLCJjaGVja1N0YXJ0RW5kVGltZSIsInNldFRpbWVSYW5nZSIsInByb21pc2VzIiwiUHJvbWlzZSIsImFsbCIsInNldFJlcGxheVNwZWVkIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInJlY29ubmVjdCIsImluY1ZlcnNpb24iLCJzZXRTdGFydFRpbWVzdGFtcCIsInRpbWVzdGFtcCIsInNldEVuZFRpbWVzdGFtcCIsInVwZGF0ZVByb3BlcnRpZXMiLCJyZXNldFRpbWVzIiwiZ2V0Q3VycmVudFRpbWUiLCJ2IiwiYXV0b1VwZGF0ZVRpbWUiLCJhY3RpdmF0ZSIsIm1pbiIsIm1heCIsInN0YXJ0IiwiRGF0YVN5bmNocm9uaXplclJlYWx0aW1lIiwiUkVBTF9USU1FIiwiRGF0YVN5bmNocm9uaXplciIsImRhdGFTeW5jaHJvbml6ZXJSZXBsYXkiLCJkYXRhU3luY2hyb25pemVyUnQiLCJicm9hZGNhc3RDaGFubmVscyIsInNldE1vZGUiLCJkYXRhU3luY2hyb25pemVyIiwiYmMiLCJjbG9zZSIsImluaXRFdmVudFN1YnNjcmlwdGlvbiIsIm9uQ2hhbmdlZE1vZGUiLCJldmVudFN1YnNjcmlwdGlvbk1hcCIsIkJyb2FkY2FzdENoYW5uZWwiLCJvbm1lc3NhZ2UiLCJpIiwiRXZlbnRUeXBlIiwiTUFTVEVSX1RJTUUiLCJzdWJzY3JpYmUiLCJmbiIsImV2ZW50VHlwZXMiLCJtaW5NYXhDaGFuZ2VkIiwicmVzZXRTdGFydFRpbWVzdGFtcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLDhDQUFOLENBQTZCO0VBQ3pCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUsrRyxnQkFBTCxDQUFzQjdFLFVBQXRCLENBQWlDbEMsT0FBakM7RUFDSDtFQUVHO0FBQ1I7QUFDQTs7O0VBQ3FCLE1BQVhtRSxXQUFXLEdBQUc7SUFDaEIsT0FBTyxLQUFLNEMsZ0JBQUwsQ0FBc0I1QyxXQUF0QixFQUFQO0VBQ0g7O0VBRUQwRCxhQUFhLENBQUNDLG1CQUFtQixHQUFHLEtBQXZCLEVBQThCO0lBQ3ZDLElBQUdBLG1CQUFILEVBQXdCO01BQ3BCLEtBQUtuQixzQkFBTCxDQUE0Qi9ILFVBQTVCLENBQXVDVSxjQUF2QyxHQUF3REMsU0FBeEQ7TUFDQSxLQUFLb0gsc0JBQUwsQ0FBNEIvSCxVQUE1QixDQUF1Q1ksWUFBdkMsR0FBc0RELFNBQXREO0lBQ0g7O0lBQ0QsS0FBS29ILHNCQUFMLENBQTRCMUcsYUFBNUI7SUFDQSxLQUFLMEcsc0JBQUwsQ0FBNEIxRSxXQUE1QjtFQUNIOztFQUNEOEIsYUFBYSxDQUFDd0MsS0FBRCxFQUFRRixHQUFSLEVBQWEsQ0FBRTs7RUFFNUIzQixtQkFBbUIsQ0FBQ0csWUFBRCxFQUFlLENBQ2pDOztFQUVEWCxpQkFBaUIsQ0FBQ1csWUFBRCxFQUFlLENBQy9COztFQUVEc0MsYUFBYSxDQUFDaEUsSUFBRCxFQUFPLENBQUU7O0FBN1RIOztBQWdVUnVELDBIQUFmIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge2Fzc2VydERlZmluZWQsIGlzRGVmaW5lZCwgcmFuZG9tVVVJRH0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQgRGF0YVN5bmNocm9uaXplcldvcmtlciBmcm9tICcuL0RhdGFTeW5jaHJvbml6ZXIucmVwbGF5Lndvcmtlci5qcyc7XG5pbXBvcnQge0RBVEFfU1lOQ0hST05JWkVSX1RPUElDLCBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQ30gZnJvbSBcIi4uLy4uL0NvbnN0YW50cy5qc1wiO1xuaW1wb3J0IHtNb2RlfSBmcm9tIFwiLi4vLi4vZGF0YXNvdXJjZS9Nb2RlXCI7XG5pbXBvcnQge0V2ZW50VHlwZX0gZnJvbSBcIi4uLy4uL2V2ZW50L0V2ZW50VHlwZVwiO1xuaW1wb3J0IFdvcmtlckV4dCBmcm9tIFwiLi4vLi4vd29ya2VyL1dvcmtlckV4dFwiO1xuXG5jbGFzcyBEYXRhU3luY2hyb25pemVyUmVwbGF5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIFRoZSBkYXRhU3luY2hyb25pemVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMuaWQ9cmFuZG9tVVVJRF0gLSBpZCBvZiB0aGUgZGF0YVN5bmNocm9uaXplciBvciByYW5kb20gaWYgbm90IHByb3ZpZGVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlcGxheVNwZWVkPTFdIC0gcmVwbGF5U3BlZWQgdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMudGltZXJSZXNvbHV0aW9uPTVdIC0gaW50ZXJ2YWwgaW4gd2hpY2ggZGF0YSBpcyBwbGF5ZWQgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMubWFzdGVyVGltZVJlZnJlc2hSYXRlPTI1MF0gLSBpbnRlcnZhbCBpbiB3aGljaCB0aW1lIHZhbHVlIGlzIHNlbmQgdGhyb3VnaCBicm9hZGNhc3QgY2hhbm5lbCAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5tb2RlPU1vZGUuUkVQTEFZXSAtIG1vZGUgb2YgdGhlIGRhdGEgc3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMubWluVGltZSAtIG1pbiByYW5nZSB0aW1lIGFzIElTTyBkYXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMubWF4VGltZSAtIG1heCByYW5nZSB0aW1lIGFzIElTTyBkYXRlXG4gICAgICogQHBhcmFtIHtEYXRhc291cmNlW119IHByb3BlcnRpZXMuZGF0YVNvdXJjZXMgLSB0aGUgZGF0YVNvdXJjZSBhcnJheVxuICAgICAqIEBwYXJhbSB7RGF0YVN5bmNocm9uaXplcn0gdGltZVN5bmMgLSBkYXRhU3luY2hyb25pemVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJvcGVydGllcywgdGltZVN5bmMpIHtcbiAgICAgICAgdGhpcy5idWZmZXJpbmdUaW1lID0gMTAwMDsgLy8gZGVmYXVsdFxuICAgICAgICB0aGlzLmlkID0gcHJvcGVydGllcy5pZCB8fCByYW5kb21VVUlEKCk7XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZXMgPSBwcm9wZXJ0aWVzLmRhdGFTb3VyY2VzIHx8IFtdO1xuICAgICAgICB0aGlzLnJlcGxheVNwZWVkID0gcHJvcGVydGllcy5yZXBsYXlTcGVlZCB8fCAxO1xuICAgICAgICB0aGlzLnRpbWVyUmVzb2x1dGlvbiA9IHByb3BlcnRpZXMudGltZXJSZXNvbHV0aW9uIHx8IDU7XG4gICAgICAgIHRoaXMubWFzdGVyVGltZVJlZnJlc2hSYXRlID0gcHJvcGVydGllcy5tYXN0ZXJUaW1lUmVmcmVzaFJhdGUgfHwgMjUwO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGltZVN5bmMgPSB0aW1lU3luYztcblxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnJlcGxheVNwZWVkID0gdGhpcy5yZXBsYXlTcGVlZDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuZW5kVGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMubWluVGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMudmVyc2lvbiA9IDA7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzKSkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm1pblRpbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5taW5UaW1lc3RhbXAgPSBuZXcgRGF0ZShwcm9wZXJ0aWVzLm1pblRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5tYXhUaW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWF4VGltZXN0YW1wID0gbmV3IERhdGUocHJvcGVydGllcy5tYXhUaW1lKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG4gICAgfVxuXG4gICAgZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlkO1xuICAgIH1cblxuICAgIGdldFRvcGljSWQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyArIHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgZ2V0VGltZVRvcGljSWQoKSB7XG4gICAgICAgIHJldHVybiBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyArIHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgZ2V0RGF0YVNvdXJjZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTb3VyY2VzO1xuICAgIH1cblxuICAgIGNvbXB1dGVNaW5NYXgoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBtaW5UaW1lc3RhbXAgPSBOdW1iZXIuTUFYX1ZBTFVFLCBtYXhUaW1lc3RhbXAgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgICAgICAgICAgLy8gZGVmYXVsdCBtaW4vbWF4IHdpbGwgYmUgYWRqdXN0ZWQgb24gdGhlIG1vc3QgbWluL21heCBEYXRhU291cmNlXG4gICAgICAgICAgICBmb3IgKGxldCBkcyBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gY29tcHV0ZSBtaW4vbWF4IHJhbmdlIG9mIGRhdGFTeW5jaHJvbml6ZXJcbiAgICAgICAgICAgICAgICBsZXQgZHNNaW5UaW1lc3RhbXAgPSBkcy5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKTtcbiAgICAgICAgICAgICAgICBsZXQgZHNNYXhUaW1lc3RhbXAgPSBkcy5nZXRNYXhUaW1lQXNUaW1lc3RhbXAoKTtcblxuICAgICAgICAgICAgICAgIGlmIChkc01pblRpbWVzdGFtcCA8IG1pblRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICBtaW5UaW1lc3RhbXAgPSBkc01pblRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZHNNYXhUaW1lc3RhbXAgPiBtYXhUaW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4VGltZXN0YW1wID0gZHNNYXhUaW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBhIGRlZmF1bHQgTWluL01heCBoYXMgYmVlbiBkZWZpbmVkIGludG8gRGF0YVN5bmNocm9uaXplciBmb3JjaW5nIGludGVyc2VjdGlvbiB3aXRoIGN1cnJlbnQgY29tcHV0ZWQgb25lc1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZCh0aGlzLm1pblRpbWVzdGFtcCkgJiYgdGhpcy5taW5UaW1lc3RhbXAgPiBtaW5UaW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnNlY3QgYW5kIHRha2VzIHRoZSBtaW4gb2YgZGF0YVN5bmNocm9uaXplclxuICAgICAgICAgICAgICAgIG1pblRpbWVzdGFtcCA9IHRoaXMubWluVGltZXN0YW1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHRoaXMubWF4VGltZXN0YW1wKSAmJiB0aGlzLm1heFRpbWVzdGFtcCA+IG1heFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIC8vIGludGVyc2VjdCBhbmQgdGFrZXMgdGhlIG1pbiBvZiBkYXRhU3luY2hyb25pemVyXG4gICAgICAgICAgICAgICAgbWF4VGltZXN0YW1wID0gdGhpcy5tYXhUaW1lc3RhbXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5taW5UaW1lc3RhbXAgPSBtaW5UaW1lc3RhbXA7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wID0gbWF4VGltZXN0YW1wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc3QgPSBuZXcgRGF0ZSgnMTk3MC0wMS0wMVQwMDowMDowMFonKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBuZXcgRGF0ZSgnMjA1NS0wMS0wMVQwMDowMDowMFonKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMubWluVGltZXN0YW1wID0gdGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wID0gc3Q7XG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wID0gdGhpcy5wcm9wZXJ0aWVzLmVuZFRpbWVzdGFtcCA9IGVuZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXJ0VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gc3RhcnRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wKS50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWluVGltZUFzSXNvRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhcnRUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBzdGFydFRpbWUgYXMgdW5peCB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBnZXRTdGFydFRpbWVBc1RpbWVzdGFtcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbmRUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0RW5kVGltZUFzSXNvRGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnByb3BlcnRpZXMuZW5kVGltZXN0YW1wKS50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF4VGltZUFzSXNvRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RW5kVGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmVuZFRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtaW5UaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBzdGFydFRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKi9cbiAgICBnZXRNaW5UaW1lQXNJc29EYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5wcm9wZXJ0aWVzLm1pblRpbWVzdGFtcCkudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtaW5UaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBzdGFydFRpbWUgYXMgdW5peCB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBnZXRNaW5UaW1lQXNUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMubWluVGltZXN0YW1wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heFRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIGVuZFRpbWUgYXMgSVNPIGRhdGVcbiAgICAgKi9cbiAgICBnZXRNYXhUaW1lQXNJc29EYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5wcm9wZXJ0aWVzLm1heFRpbWVzdGFtcCkudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIHVuaXggdGltZXN0YW1wXG4gICAgICovXG4gICAgZ2V0TWF4VGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLm1heFRpbWVzdGFtcDtcbiAgICB9XG5cblxuICAgIGFzeW5jIHNldFN0YXJ0VGltZSh0aW1lLCBsYXp5ID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wID0gbmV3IERhdGUodGltZSkuZ2V0VGltZSgpO1xuICAgICAgICBpZiAoIWxhenkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQWxnbygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0RW5kVGltZSh0aW1lLCBsYXp5ID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmVuZFRpbWVzdGFtcCA9IG5ldyBEYXRlKHRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgaWYgKCFsYXp5KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUFsZ28oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHNldE1pblRpbWUobWluVGltZSwgcmVzZXRTdGFydFRpbWUgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLm1pblRpbWVzdGFtcCA9IG5ldyBEYXRlKG1pblRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG4gICAgICAgIHRoaXMudGltZUNoYW5nZWQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRNYXhUaW1lKG1heFRpbWUsIHJlc2V0U3RhcnRUaW1lID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5tYXhUaW1lc3RhbXAgPSBuZXcgRGF0ZShtYXhUaW1lKS5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMuY29tcHV0ZU1pbk1heCgpO1xuICAgICAgICB0aGlzLnRpbWVDaGFuZ2VkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmVwbGF5U3BlZWRcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSAtIHRoZSByZXBsYXkgc3BlZWRcbiAgICAgKi9cbiAgICBnZXRSZXBsYXlTcGVlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGF5U3BlZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGVybWluYXRlIHRoZSBjb3JyZXNwb25kaW5nIHJ1bm5pbmcgV2ViV29ya2VyIGJ5IGNhbGxpbmcgdGVybWluYXRlKCkgb24gaXQuXG4gICAgICovXG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgZGF0YVNvdXJjZS50ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE1vZGUoKSB7XG4gICAgICAgIHJldHVybiBNb2RlLlJFUExBWTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tIEFTWU5DSFJPTk9VUyBGVU5DVElPTlMgLS0tLS0tLS0tLS0tLS0tLS0vL1xuXG4gICAgYXN5bmMgaW5pdERhdGFTb3VyY2VzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZXNGb3JXb3JrZXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2VGb3JXb3JrZXIgPSBhd2FpdCB0aGlzLmNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZXNGb3JXb3JrZXIucHVzaChkYXRhU291cmNlRm9yV29ya2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyID0gbmV3IFdvcmtlckV4dChuZXcgRGF0YVN5bmNocm9uaXplcldvcmtlcigpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbml0JyxcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlczogZGF0YVNvdXJjZXNGb3JXb3JrZXIsXG4gICAgICAgICAgICAgICAgcmVwbGF5U3BlZWQ6IHRoaXMucmVwbGF5U3BlZWQsXG4gICAgICAgICAgICAgICAgdGltZXJSZXNvbHV0aW9uOiB0aGlzLnRpbWVyUmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICBtYXN0ZXJUaW1lUmVmcmVzaFJhdGU6IHRoaXMubWFzdGVyVGltZVJlZnJlc2hSYXRlLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiB0aGlzLmdldFN0YXJ0VGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICAgICAgZW5kVGltZXN0YW1wOiB0aGlzLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgICAgIG1vZGU6IHRoaXMuZ2V0TW9kZSgpLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbigpLFxuICAgICAgICAgICAgICAgIHRvcGljczoge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmdldFRvcGljSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZTogdGhpcy5nZXRUaW1lVG9waWNJZCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gZGF0YVNvdXJjZVxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICBidWZmZXJpbmdUaW1lOiBkYXRhU291cmNlLnByb3BlcnRpZXMuYnVmZmVyaW5nVGltZSB8fCAwLFxuICAgICAgICAgICAgdGltZU91dDogZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLnRpbWVPdXQgfHwgMCxcbiAgICAgICAgICAgIGlkOiBkYXRhU291cmNlLmdldElkKCksXG4gICAgICAgICAgICBuYW1lOiBkYXRhU291cmNlLmdldE5hbWUoKSxcbiAgICAgICAgICAgIG1pblRpbWVzdGFtcDogZGF0YVNvdXJjZS5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgIG1heFRpbWVzdGFtcDogZGF0YVNvdXJjZS5nZXRNYXhUaW1lQXNUaW1lc3RhbXAoKVxuICAgICAgICB9O1xuICAgICAgICAvLyBiaW5kIGRhdGFTb3VyY2UgZGF0YSBvbnRvIGRhdGFTeW5jaHJvbml6ZXIgZGF0YVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5zZXREYXRhU3luY2hyb25pemVyKHRoaXMudGltZVN5bmMpO1xuICAgICAgICAgICAgZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLnJlcGxheVNwZWVkID0gdGhpcy5yZXBsYXlTcGVlZDtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW5ub3Qgc2V0IHRoZSBzeW5jaHJvbml6ZXIgdG8gdGhpcyBEYXRhU291cmNlXCIsIGV4KTtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgdGltZUNoYW5nZWQoKSB7XG4gICAgICAgIHRoaXMub25UaW1lQ2hhbmdlZChcbiAgICAgICAgICAgIHRoaXMuZ2V0TWluVGltZUFzVGltZXN0YW1wKCksXG4gICAgICAgICAgICB0aGlzLmdldE1heFRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgdGhpcy5nZXRTdGFydFRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgdGhpcy5nZXRFbmRUaW1lQXNUaW1lc3RhbXAoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBuZXcgRGF0YVNvdXJjZSBvYmplY3QgdG8gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXMgdG8gc3luY2hyb25pemUuXG4gICAgICogbm90ZTogZG9uJ3QgZm9yZ2V0IHRvIGNhbGwgcmVzZXQoKSB0byBiZSBzdXJlIHRvIHJlLWluaXQgdGhlIHN5bmNocm9uaXplciBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB7VGltZVNlcmllc0RhdGFTb3VyY2V9IGRhdGFTb3VyY2UgLSB0aGUgbmV3IGRhdGFzb3VyY2UgdG8gYWRkXG4gICAgICovXG4gICAgYXN5bmMgYWRkRGF0YVNvdXJjZShkYXRhU291cmNlKSB7XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZXMucHVzaChkYXRhU291cmNlKTtcbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYERhdGFTeW5jaHJvbml6ZXIgbm90IGluaXRpYWxpemVkIHlldCwgYWRkIERhdGFTb3VyY2UgJHtkYXRhU291cmNlLmlkfSBhcyBpdGApO1xuICAgICAgICAgICAgdGhpcy50aW1lQ2hhbmdlZCgpO1xuICAgICAgICAgICAgdGhpcy5vbkFkZGVkRGF0YVNvdXJjZShkYXRhU291cmNlLmlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2Uuc2V0U3RhcnRUaW1lKHRoaXMuZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCkpO1xuICAgICAgICAgICAgZGF0YVNvdXJjZS5zZXRFbmRUaW1lKHRoaXMuZ2V0RW5kVGltZUFzSXNvRGF0ZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2VGb3JXb3JrZXIgPSBhd2FpdCB0aGlzLmNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSk7XG5cbiAgICAgICAgICAgIC8vIGFkZCBkYXRhU291cmNlIHRvIHN5bmNocm9uaXplciBhbGdvcml0aG1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VzOiBbZGF0YVNvdXJjZUZvcldvcmtlcl1cbiAgICAgICAgICAgIH0pLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhd2FpdCB0aGlzLmlzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5jb25uZWN0KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vbkFkZGVkRGF0YVNvdXJjZShkYXRhU291cmNlLmlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBEYXRhU291cmNlIG9iamVjdCBmcm9tIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzIG9mIHRoZSBzeW5jaHJvbml6ZXIuXG4gICAgICogQHBhcmFtIHtUaW1lU2VyaWVzRGF0YXNvdXJjZX0gZGF0YVNvdXJjZSAtIHRoZSBuZXcgZGF0YXNvdXJjZSB0byBhZGRcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVEYXRhU291cmNlKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlcyA9IHRoaXMuZGF0YVNvdXJjZXMuZmlsdGVyKGVsdCA9PiBlbHQuaWQgIT09IGRhdGFTb3VyY2UuZ2V0SWQoKSk7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29tcHV0ZU1pbk1heCgpO1xuXG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYERhdGFTeW5jaHJvbml6ZXIgbm90IGluaXRpYWxpemVkIHlldCwgcmVtb3ZlIERhdGFTb3VyY2UgJHtkYXRhU291cmNlLmlkfSBhcyBpdGApO1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5yZW1vdmVEYXRhU3luY2hyb25pemVyKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICB0aGlzLm9uUmVtb3ZlZERhdGFTb3VyY2UoZGF0YVNvdXJjZS5pZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBkYXRhU291cmNlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIGF3YWl0IGRhdGFTb3VyY2UucmVtb3ZlRGF0YVN5bmNocm9uaXplcigpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSWRzOiBbZGF0YVNvdXJjZS5nZXRJZCgpXSxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcDogdGhpcy5nZXRTdGFydFRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgICAgIGVuZFRpbWVzdGFtcDogdGhpcy5nZXRFbmRUaW1lQXNUaW1lc3RhbXAoKVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lQ2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMub25SZW1vdmVkRGF0YVNvdXJjZShkYXRhU291cmNlLmlkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGFTb3VyY2VJZCAtIHRoZSBkYXRhU291cmNlIGlkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSB0aGUgZGF0YSB0byBwdXNoIGludG8gdGhlIGRhdGEgc3luY2hyb25pemVyXG4gICAgICovXG4gICAgYXN5bmMgcHVzaChkYXRhU291cmNlSWQsIGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuc3luY2hyb25pemVyV29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGF0YScsXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZUlkOiBkYXRhU291cmNlSWQsXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2ZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnZlcnNpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdHMgYWxsIGRhdGFTb3VyY2VzXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tJbml0KCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNDb25uZWN0ZWQgPSBhd2FpdCB0aGlzLmlzQ29ubmVjdGVkKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ29ubmVjdGVkPyBpc0Nvbm5lY3RlZCA6IHRoaXMuZG9Db25uZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrSW5pdCgpIHtcbiAgICAgICAgaWYgKCFpc0RlZmluZWQodGhpcy5pbml0KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0ID0gdGhpcy5pbml0RGF0YVNvdXJjZXMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbml0O1xuICAgIH1cblxuICAgIGNoZWNrU3RhcnRFbmRUaW1lKCkge1xuICAgICAgICBpZiAoIXRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnN0YXJ0VGltZXN0YW1wID0gdGhpcy5wcm9wZXJ0aWVzLm1pblRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXApIHtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5lbmRUaW1lc3RhbXAgPSB0aGlzLnByb3BlcnRpZXMubWF4VGltZXN0YW1wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZG9Db25uZWN0KCkge1xuXG4gICAgICAgIHRoaXMuY2hlY2tTdGFydEVuZFRpbWUoKTtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVBbGdvKCk7XG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5zZXRUaW1lUmFuZ2UodGhpcy5nZXRTdGFydFRpbWVBc0lzb0RhdGUoKSwgdGhpcy5nZXRFbmRUaW1lQXNJc29EYXRlKCksIHRoaXMuZ2V0UmVwbGF5U3BlZWQoKSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgbWVzc2FnZTogJ2Nvbm5lY3QnLFxuICAgICAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgYWxsIGRhdGFTb3VyY2VzXG4gICAgICovXG4gICAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZXNldCgpO1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBkYXRhU291cmNlIG9mIHRoaXMuZGF0YVNvdXJjZXMpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goZGF0YVNvdXJjZS5kaXNjb25uZWN0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVwbGF5U3BlZWRcbiAgICAgKi9cbiAgICBhc3luYyBzZXRSZXBsYXlTcGVlZChyZXBsYXlTcGVlZCkge1xuICAgICAgICB0aGlzLnJlcGxheVNwZWVkID0gcmVwbGF5U3BlZWQ7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5yZXBsYXlTcGVlZCA9IHJlcGxheVNwZWVkO1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIucG9zdE1lc3NhZ2VXaXRoQWNrKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdyZXBsYXktc3BlZWQnLFxuICAgICAgICAgICAgcmVwbGF5U3BlZWQ6IHJlcGxheVNwZWVkLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkYXRhIHNvdXJjZSB0aW1lIHJhbmdlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXJ0VGltZSAtIHRoZSBzdGFydFRpbWUgKGluIGRhdGUgSVNPKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlbmRUaW1lIC0gdGhlIHN0YXJ0VGltZSAoaW4gZGF0ZSBJU08pXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlcGxheVNwZWVkIC0gdGhlIHJlcGxheSBzcGVlZFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjb25uZWN0IC0gcmVjb25uZWN0IGlmIHdhcyBjb25uZWN0ZWRcbiAgICAgKiBAcGFyYW0ge01vZGV9IG1vZGUgLSBkZWZhdWx0IGRhdGFTb3VyY2UgbW9kZVxuICAgICAqL1xuICAgIGFzeW5jIHNldFRpbWVSYW5nZShzdGFydFRpbWUgPSB0aGlzLmdldFN0YXJ0VGltZUFzSXNvRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lID0gdGhpcy5nZXRFbmRUaW1lQXNJc29EYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgIHJlcGxheVNwZWVkID0gdGhpcy5nZXRSZXBsYXlTcGVlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICByZWNvbm5lY3QgPSBmYWxzZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5pbmNWZXJzaW9uKCk7XG4gICAgICAgIC8vIHVwZGF0ZSBwcm9wZXJ0aWVzIG9mIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgICAgdGhpcy5yZXBsYXlTcGVlZCA9IHJlcGxheVNwZWVkO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhcnRUaW1lKHN0YXJ0VGltZSwgZmFsc2UpO1xuICAgICAgICBhd2FpdCB0aGlzLnNldEVuZFRpbWUoZW5kVGltZSwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIC8vIHVwZGF0ZSBwcm9wZXJ0aWVzIG9mIGVhY2ggRGF0YVNvdXJjZVxuICAgICAgICBmb3IgKGxldCBkcyBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKGRzLnNldFRpbWVSYW5nZShcbiAgICAgICAgICAgICAgICB0aGlzLmdldFN0YXJ0VGltZUFzSXNvRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RW5kVGltZUFzSXNvRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0UmVwbGF5U3BlZWQoKSxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldE1vZGUoKSxcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnNpb24oKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICB9XG5cbiAgICBzZXRTdGFydFRpbWVzdGFtcCh0aW1lc3RhbXApe1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlQWxnbygpIHtcbiAgICAgICAgLy8gc3luY2hyb25pemUgc3RhcnRUaW1lc3RhbXAgb2Ygc3luY2hyb25pemVyIHRvIGRhdGFzb3VyY2VzXG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgZGF0YVNvdXJjZS5zZXRTdGFydFRpbWVzdGFtcCh0aGlzLmdldFN0YXJ0VGltZUFzVGltZXN0YW1wKCkpO1xuICAgICAgICAgICAgZGF0YVNvdXJjZS5zZXRFbmRUaW1lc3RhbXAodGhpcy5nZXRFbmRUaW1lQXNUaW1lc3RhbXAoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmUtY29tcHV0ZSBuZXcgbWluL21heCBvZiBzeW5jaHJvbml6ZXJcbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG4gICAgICAgIC8vIHByb3ZpZGUgbmV3IG1pbi9tYXggb2YgZWFjaCBkYXRhU291cmNlIHRvIGRhdGFTeW5jaHJvbml6ZXJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZXNGb3JXb3JrZXIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyaW5nVGltZTogZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWUgfHwgMCxcbiAgICAgICAgICAgICAgICB0aW1lT3V0OiBkYXRhU291cmNlLnByb3BlcnRpZXMudGltZU91dCB8fCAwLFxuICAgICAgICAgICAgICAgIGlkOiBkYXRhU291cmNlLmdldElkKCksXG4gICAgICAgICAgICAgICAgbmFtZTogZGF0YVNvdXJjZS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgbWluVGltZXN0YW1wOiBkYXRhU291cmNlLmdldE1pblRpbWVBc1RpbWVzdGFtcCgpLFxuICAgICAgICAgICAgICAgIG1heFRpbWVzdGFtcDogZGF0YVNvdXJjZS5nZXRNYXhUaW1lQXNUaW1lc3RhbXAoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRhdGFTb3VyY2VzRm9yV29ya2VyLnB1c2gob2JqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgbWVzc2FnZTogJ3RpbWUtcmFuZ2UnLFxuICAgICAgICAgICAgbW9kZTogdGhpcy5nZXRNb2RlKCksXG4gICAgICAgICAgICByZXBsYXlTcGVlZDogdGhpcy5nZXRSZXBsYXlTcGVlZCgpLFxuICAgICAgICAgICAgc3RhcnRUaW1lc3RhbXA6IHRoaXMuZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgIGVuZFRpbWVzdGFtcDogdGhpcy5nZXRFbmRUaW1lQXNUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbigpLFxuICAgICAgICAgICAgZGF0YVNvdXJjZXM6IGRhdGFTb3VyY2VzRm9yV29ya2VyXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZVByb3BlcnRpZXMocHJvcGVydGllcykge1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBkcyBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKGRzLnVwZGF0ZVByb3BlcnRpZXMocHJvcGVydGllcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgcmVzZXRUaW1lcygpIHtcbiAgICAgICAgdGhpcy5jb21wdXRlTWluTWF4KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHJlZmVyZW5jZSB0aW1lXG4gICAgICovXG4gICAgYXN5bmMgcmVzZXQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tJbml0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgbWVzc2FnZTogJ3Jlc2V0J1xuICAgICAgICB9KS50aGVuKCgpID0+IHRoaXMucmVzZXRUaW1lcygpKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnY3VycmVudC10aW1lJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRoZSBkYXRhU291cmNlIHRoZW4gdGhlIHByb3RvY29sIHdpbGwgYmUgb3BlbmVkIGFzIHdlbGwuXG4gICAgICovXG4gICAgYXN5bmMgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpcy1jb25uZWN0ZWQnXG4gICAgICAgICAgICB9KS50aGVuKHYgPT4gdi5kYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluY1ZlcnNpb24oKSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy52ZXJzaW9uKys7XG4gICAgfVxuXG4gICAgYXN5bmMgYXV0b1VwZGF0ZVRpbWUoYWN0aXZhdGUpIHtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZHMgb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChkcy5hdXRvVXBkYXRlVGltZShhY3RpdmF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgb25UaW1lQ2hhbmdlZChtaW4sIG1heCwgc3RhcnQsIGVuZCkge1xuICAgIH1cblxuICAgIG9uUmVtb3ZlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKSB7XG4gICAgfVxuXG4gICAgb25BZGRlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKSB7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhU3luY2hyb25pemVyUmVwbGF5O1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge2Fzc2VydERlZmluZWQsIGlzRGVmaW5lZCwgcmFuZG9tVVVJRH0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQgRGF0YVN5bmNocm9uaXplcldvcmtlciBmcm9tICcuL0RhdGFTeW5jaHJvbml6ZXIucmVhbHRpbWUud29ya2VyLmpzJztcbmltcG9ydCB7REFUQV9TWU5DSFJPTklaRVJfVE9QSUMsIFRJTUVfU1lOQ0hST05JWkVSX1RPUElDfSBmcm9tIFwiLi4vLi4vQ29uc3RhbnRzLmpzXCI7XG5pbXBvcnQge01vZGV9IGZyb20gXCIuLi8uLi9kYXRhc291cmNlL01vZGVcIjtcbmltcG9ydCBXb3JrZXJFeHQgZnJvbSBcIi4uLy4uL3dvcmtlci9Xb3JrZXJFeHRcIjtcblxuY2xhc3MgRGF0YVN5bmNocm9uaXplclJlYWx0aW1lIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIFRoZSBkYXRhU3luY2hyb25pemVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIHByb3BlcnR5IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMuaWQ9cmFuZG9tVVVJRF0gLSBpZCBvZiB0aGUgZGF0YVN5bmNocm9uaXplciBvciByYW5kb20gaWYgbm90IHByb3ZpZGVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVyUmVzb2x1dGlvbj01XSAtIGludGVydmFsIGluIHdoaWNoIGRhdGEgaXMgcGxheWVkIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZT0yNTBdIC0gaW50ZXJ2YWwgaW4gd2hpY2ggdGltZSB2YWx1ZSBpcyBzZW5kIHRocm91Z2ggYnJvYWRjYXN0IGNoYW5uZWwgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge0RhdGFzb3VyY2VbXX0gcHJvcGVydGllcy5kYXRhU291cmNlcyAtIHRoZSBkYXRhU291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHtEYXRhU3luY2hyb25pemVyfSB0aW1lU3luYyAtIGRhdGFTeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzLCB0aW1lU3luYykge1xuICAgICAgICB0aGlzLmJ1ZmZlcmluZ1RpbWUgPSAxMDAwOyAvLyBkZWZhdWx0XG4gICAgICAgIHRoaXMuaWQgPSBwcm9wZXJ0aWVzLmlkIHx8IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5kYXRhU291cmNlcyA9IHByb3BlcnRpZXMuZGF0YVNvdXJjZXMgfHwgW107XG4gICAgICAgIHRoaXMudGltZXJSZXNvbHV0aW9uID0gcHJvcGVydGllcy50aW1lclJlc29sdXRpb24gfHwgNTtcbiAgICAgICAgdGhpcy5tYXN0ZXJUaW1lUmVmcmVzaFJhdGUgPSBwcm9wZXJ0aWVzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZSB8fCAyNTA7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50aW1lU3luYyA9IHRpbWVTeW5jO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnZlcnNpb24gPSAwO1xuICAgIH1cblxuICAgIGdldElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pZDtcbiAgICB9XG5cbiAgICBnZXREYXRhU291cmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNvdXJjZXM7XG4gICAgfVxuXG4gICAgZ2V0VG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfU1lOQ0hST05JWkVSX1RPUElDICsgdGhpcy5pZDtcbiAgICB9XG5cbiAgICBnZXRUaW1lVG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIFRJTUVfU1lOQ0hST05JWkVSX1RPUElDICsgdGhpcy5pZDtcbiAgICB9XG5cbiAgICBzZXRTdGFydFRpbWVzdGFtcCh0aW1lc3RhbXApe1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuc3RhcnRUaW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGVybWluYXRlIHRoZSBjb3JyZXNwb25kaW5nIHJ1bm5pbmcgV2ViV29ya2VyIGJ5IGNhbGxpbmcgdGVybWluYXRlKCkgb24gaXQuXG4gICAgICovXG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgZGF0YVNvdXJjZS50ZXJtaW5hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE1vZGUoKSB7XG4gICAgICAgIHJldHVybiBNb2RlLlJFQUxfVElNRTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tIEFTWU5DSFJPTk9VUyBGVU5DVElPTlMgLS0tLS0tLS0tLS0tLS0tLS0vL1xuXG4gICAgYXN5bmMgaW5pdERhdGFTb3VyY2VzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZXNGb3JXb3JrZXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2VGb3JXb3JrZXIgPSBhd2FpdCB0aGlzLmNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSk7XG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZXNGb3JXb3JrZXIucHVzaChkYXRhU291cmNlRm9yV29ya2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3luY2hyb25pemVyV29ya2VyID0gbmV3IFdvcmtlckV4dChuZXcgRGF0YVN5bmNocm9uaXplcldvcmtlcigpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbml0JyxcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlczogZGF0YVNvdXJjZXNGb3JXb3JrZXIsXG4gICAgICAgICAgICAgICAgdGltZXJSZXNvbHV0aW9uOiB0aGlzLnRpbWVyUmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICBtYXN0ZXJUaW1lUmVmcmVzaFJhdGU6IHRoaXMubWFzdGVyVGltZVJlZnJlc2hSYXRlLFxuICAgICAgICAgICAgICAgIG1vZGU6IE1vZGUuUkVBTF9USU1FLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHRoaXMudmVyc2lvbigpLFxuICAgICAgICAgICAgICAgIHRvcGljczoge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmdldFRvcGljSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZTogdGhpcy5nZXRUaW1lVG9waWNJZCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gZGF0YVNvdXJjZVxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZURhdGFTb3VyY2VGb3JXb3JrZXIoZGF0YVNvdXJjZSkge1xuICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICBidWZmZXJpbmdUaW1lOiBkYXRhU291cmNlLnByb3BlcnRpZXMuYnVmZmVyaW5nVGltZSB8fCAwLFxuICAgICAgICAgICAgdGltZU91dDogZGF0YVNvdXJjZS5wcm9wZXJ0aWVzLnRpbWVPdXQgfHwgMCxcbiAgICAgICAgICAgIGlkOiBkYXRhU291cmNlLmlkLFxuICAgICAgICAgICAgbmFtZTogZGF0YVNvdXJjZS5uYW1lXG4gICAgICAgIH07XG4gICAgICAgIC8vIGJpbmQgZGF0YVNvdXJjZSBkYXRhIG9udG8gZGF0YVN5bmNocm9uaXplciBkYXRhXG4gICAgICAgIGF3YWl0IGRhdGFTb3VyY2Uuc2V0RGF0YVN5bmNocm9uaXplcih0aGlzLnRpbWVTeW5jKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IERhdGFTb3VyY2Ugb2JqZWN0IHRvIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzIHRvIHN5bmNocm9uaXplLlxuICAgICAqIG5vdGU6IGRvbid0IGZvcmdldCB0byBjYWxsIHJlc2V0KCkgdG8gYmUgc3VyZSB0byByZS1pbml0IHRoZSBzeW5jaHJvbml6ZXIgaW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0ge1RpbWVTZXJpZXNEYXRhU291cmNlfSBkYXRhU291cmNlIC0gdGhlIG5ldyBkYXRhc291cmNlIHRvIGFkZFxuICAgICAqL1xuICAgIGFzeW5jIGFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2VzLnB1c2goZGF0YVNvdXJjZSk7XG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYERhdGFTeW5jaHJvbml6ZXIgbm90IGluaXRpYWxpemVkIHlldCwgYWRkIERhdGFTb3VyY2UgJHtkYXRhU291cmNlLmlkfSBhcyBpdGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YVNvdXJjZUZvcldvcmtlciA9IGF3YWl0IHRoaXMuY3JlYXRlRGF0YVNvdXJjZUZvcldvcmtlcihkYXRhU291cmNlKTtcbiAgICAgICAgICAgIC8vIGFkZCBkYXRhU291cmNlIHRvIHN5bmNocm9uaXplciBhbGdvcml0aG1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdhZGQnLFxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VzOiBbZGF0YVNvdXJjZUZvcldvcmtlcl1cbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25BZGRlZERhdGFTb3VyY2UoZGF0YVNvdXJjZS5pZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBEYXRhU291cmNlIG9iamVjdCBmcm9tIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzIG9mIHRoZSBzeW5jaHJvbml6ZXIuXG4gICAgICogQHBhcmFtIHtUaW1lU2VyaWVzRGF0YXNvdXJjZX0gZGF0YVNvdXJjZSAtIHRoZSBuZXcgZGF0YXNvdXJjZSB0byBhZGRcbiAgICAgKi9cbiAgICBhc3luYyByZW1vdmVEYXRhU291cmNlKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5yZW1vdmVEYXRhU3luY2hyb25pemVyKCk7XG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZXMgPSB0aGlzLmRhdGFTb3VyY2VzLmZpbHRlcihlbHQgPT4gZWx0LmlkICE9PSBkYXRhU291cmNlLmdldElkKCkpO1xuICAgICAgICBpZiAodGhpcy5kYXRhU291cmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBEYXRhU3luY2hyb25pemVyIG5vdCBpbml0aWFsaXplZCB5ZXQsIHJlbW92ZSBEYXRhU291cmNlICR7ZGF0YVNvdXJjZS5pZH0gYXMgaXRgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdyZW1vdmUnLFxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VJZHM6IFtkYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW92ZWREYXRhU291cmNlKGRhdGFTb3VyY2UuaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVNvdXJjZUlkIC0gdGhlIGRhdGFTb3VyY2UgaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIHRoZSBkYXRhIHRvIHB1c2ggaW50byB0aGUgZGF0YSBzeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBhc3luYyBwdXNoKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5zeW5jaHJvbml6ZXJXb3JrZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRhJyxcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSWQ6IGRhdGFTb3VyY2VJZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMudmVyc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLmNoZWNrSW5pdCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5kb0Nvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBhc3luYyBjaGVja0luaXQoKSB7XG4gICAgICAgIGlmICghaXNEZWZpbmVkKHRoaXMuaW5pdCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdCA9IHRoaXMuaW5pdERhdGFTb3VyY2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5pdDtcbiAgICB9XG5cbiAgICBhc3luYyBkb0Nvbm5lY3QoKSB7XG4gICAgICAgIGZvciAobGV0IGRhdGFTb3VyY2Ugb2YgdGhpcy5kYXRhU291cmNlcykge1xuICAgICAgICAgICAgYXdhaXQgZGF0YVNvdXJjZS5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnY29ubmVjdCcsXG4gICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24oKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICBjb25zb2xlLmxvZygnZGlzY29ubmVjdCcpXG4gICAgICAgIGF3YWl0IHRoaXMucmVzZXQoKTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZGF0YVNvdXJjZSBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKGRhdGFTb3VyY2UuZGlzY29ubmVjdCgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZVByb3BlcnRpZXMocHJvcGVydGllcykge1xuICAgICAgICBmb3IgKGxldCBkcyBvZiB0aGlzLmRhdGFTb3VyY2VzKSB7XG4gICAgICAgICAgICBkcy51cGRhdGVQcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHJlZmVyZW5jZSB0aW1lXG4gICAgICovXG4gICAgYXN5bmMgcmVzZXQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tJbml0KCk7XG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgbWVzc2FnZTogJ3Jlc2V0J1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY2hyb25pemVyV29ya2VyLnBvc3RNZXNzYWdlV2l0aEFjayh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnY3VycmVudC10aW1lJ1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRoZSBkYXRhU291cmNlIHRoZW4gdGhlIHByb3RvY29sIHdpbGwgYmUgb3BlbmVkIGFzIHdlbGwuXG4gICAgICovXG4gICAgYXN5bmMgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTb3VyY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaGVja0luaXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNocm9uaXplcldvcmtlci5wb3N0TWVzc2FnZVdpdGhBY2soe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpcy1jb25uZWN0ZWQnXG4gICAgICAgICAgICB9KS50aGVuKChtZXNzYWdlKSA9PiBtZXNzYWdlLmRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0TWluVGltZShtaW5UaW1lKSB7XG4gICAgfVxuXG4gICAgc2V0TWF4VGltZShtYXhUaW1lKSB7XG4gICAgfVxuXG4gICAgaW5jVmVyc2lvbigpIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnZlcnNpb24rKztcbiAgICB9XG5cbiAgICBvblRpbWVDaGFuZ2VkKHN0YXJ0LCBtaW4pIHtcbiAgICB9XG5cbiAgICBvblJlbW92ZWREYXRhU291cmNlKGRhdGFTb3VyY2VJZCkge1xuICAgIH1cblxuICAgIG9uQWRkZWREYXRhU291cmNlKGRhdGFTb3VyY2VJZCkge1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YVN5bmNocm9uaXplclJlYWx0aW1lO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAyMCBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge01vZGV9IGZyb20gXCIuLi9kYXRhc291cmNlL01vZGVcIjtcbmltcG9ydCBEYXRhU3luY2hyb25pemVyUmVwbGF5IGZyb20gXCIuL3JlcGxheS9EYXRhU3luY2hyb25pemVyLnJlcGxheVwiO1xuaW1wb3J0IERhdGFTeW5jaHJvbml6ZXJSZWFsdGltZSBmcm9tIFwiLi9ydC9EYXRhU3luY2hyb25pemVyLnJlYWx0aW1lXCI7XG5pbXBvcnQge3JhbmRvbVVVSUR9IGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IHtFdmVudFR5cGV9IGZyb20gXCIuLi9ldmVudC9FdmVudFR5cGVcIjtcblxuY2xhc3MgRGF0YVN5bmNocm9uaXplciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBUaGUgZGF0YVN5bmNocm9uaXplci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLmlkPXJhbmRvbVVVSURdIC0gaWQgb2YgdGhlIGRhdGFTeW5jaHJvbml6ZXIgb3IgcmFuZG9tIGlmIG5vdCBwcm92aWRlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXBsYXlTcGVlZD0xXSAtIHJlcGxheVNwZWVkIHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVyUmVzb2x1dGlvbj01XSAtIGludGVydmFsIGluIHdoaWNoIGRhdGEgaXMgcGxheWVkIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLm1hc3RlclRpbWVSZWZyZXNoUmF0ZT0yNTBdIC0gaW50ZXJ2YWwgaW4gd2hpY2ggdGltZSB2YWx1ZSBpcyBzZW5kIHRocm91Z2ggYnJvYWRjYXN0IGNoYW5uZWwgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMubW9kZT1Nb2RlLlJFUExBWV0gLSBtb2RlIG9mIHRoZSBkYXRhIHN5bmNocm9uaXplclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSAtIHN0YXJ0IHRpbWUgb2YgdGhlIHRlbXBvcmFsIHJ1blxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZFRpbWUgLSBlbmQgdGltZSBvZiB0aGUgdGVtcG9yYWwgcnVuXG4gICAgICogQHBhcmFtIHtEYXRhc291cmNlW119IHByb3BlcnRpZXMuZGF0YVNvdXJjZXMgLSB0aGUgZGF0YVNvdXJjZSBhcnJheVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgY29uc3QgaWQgPSBwcm9wZXJ0aWVzLmlkIHx8IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5ID0gbmV3IERhdGFTeW5jaHJvbml6ZXJSZXBsYXkoe1xuICAgICAgICAgICAgLi4ucHJvcGVydGllcyxcbiAgICAgICAgICAgIGlkOiBpZCsnLXJlcGxheSdcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplclJ0ID0gbmV3IERhdGFTeW5jaHJvbml6ZXJSZWFsdGltZSh7XG4gICAgICAgICAgICAuLi5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgaWQ6IGlkKyctcmVhbHRpbWUnXG4gICAgICAgIH0sIHRoaXMpXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbHMgPSBbXTtcbiAgICAgICAgdGhpcy5zZXRNb2RlKHByb3BlcnRpZXMubW9kZSB8fCBNb2RlLlJFUExBWSwgZmFsc2UpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyLm9uVGltZUNoYW5nZWQgPSAobWluLCBtYXgsIHN0YXJ0LCBlbmQpID0+IHRoaXMub25UaW1lQ2hhbmdlZChtaW4sIG1heCwgc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIub25BZGRlZERhdGFTb3VyY2UgPSAoZGF0YVNvdXJjZUlkKSA9PiB0aGlzLm9uQWRkZWREYXRhU291cmNlKGRhdGFTb3VyY2VJZCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIub25SZW1vdmVkRGF0YVNvdXJjZSA9IChkYXRhU291cmNlSWQpID0+IHRoaXMub25SZW1vdmVkRGF0YVNvdXJjZShkYXRhU291cmNlSWQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0TW9kZShtb2RlLCBkaXNjb25uZWN0ID0gdHJ1ZSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhU3luY2hyb25pemVyICYmIGRpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGF0YVN5bmNocm9uaXplci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vZGUgPT09IE1vZGUuUkVQTEFZKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIgPSB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBNb2RlLlJFQUxfVElNRSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyID0gdGhpcy5kYXRhU3luY2hyb25pemVyUnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZGF0YVN5bmNocm9uaXplci5pZDtcbiAgICAgICAgZm9yKGxldCBiYyBvZiB0aGlzLmJyb2FkY2FzdENoYW5uZWxzKSB7XG4gICAgICAgICAgICBiYy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdEV2ZW50U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbHMgPSBbXTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXM9W107XG4gICAgICAgIGZvcihsZXQgZHMgb2YgdGhpcy5kYXRhU3luY2hyb25pemVyLmdldERhdGFTb3VyY2VzKCkpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goZHMuc2V0TW9kZShtb2RlLCBkaXNjb25uZWN0KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyLm9uVGltZUNoYW5nZWQgPSAobWluLCBtYXgsIHN0YXJ0LCBlbmQpID0+IHRoaXMub25UaW1lQ2hhbmdlZChtaW4sIG1heCwgc3RhcnQsIGVuZCk7XG4gICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplci5vbkFkZGVkRGF0YVNvdXJjZSA9IChkYXRhU291cmNlSWQpID0+IHRoaXMub25BZGRlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKTtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyLm9uUmVtb3ZlZERhdGFTb3VyY2UgPSAoZGF0YVNvdXJjZUlkKSA9PiB0aGlzLm9uUmVtb3ZlZERhdGFTb3VyY2UoZGF0YVNvdXJjZUlkKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4gdGhpcy5vbkNoYW5nZWRNb2RlKG1vZGUpKTtcbiAgICB9XG5cbiAgICBpbml0RXZlbnRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXAgPSB7fTtcbiAgICAgICAgLy8gbGlzdGVuIGZvciBFdmVudHMgdG8gY2FsbGJhY2sgdG8gc3Vic2NyaXB0aW9uc1xuICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWxzLnB1c2gobmV3IEJyb2FkY2FzdENoYW5uZWwodGhpcy5nZXRUb3BpY0lkKCkpLm9ubWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5kYXRhLnR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwW3R5cGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbdHlwZV1baV0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0Q2hhbm5lbHMucHVzaChuZXcgQnJvYWRjYXN0Q2hhbm5lbCh0aGlzLmdldFRpbWVUb3BpY0lkKCkpLm9ubWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5kYXRhLnR5cGUgPT09IEV2ZW50VHlwZS5NQVNURVJfVElNRSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCA9IG1lc3NhZ2UuZGF0YS50aW1lc3RhbXA7IC8vIHNhdmUgYXMgbGFzdCB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuc2V0U3RhcnRUaW1lc3RhbXAobWVzc2FnZS5kYXRhLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5kYXRhLnR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwW3R5cGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbdHlwZV1baV0obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN1YnNjcmliZShmbiwgZXZlbnRUeXBlcykge1xuICAgICAgICAvLyBhc3NvY2lhdGUgZnVuY3Rpb24gdG8gZXZlbnRUeXBlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCEoZXZlbnRUeXBlc1tpXSBpbiB0aGlzLmV2ZW50U3Vic2NyaXB0aW9uTWFwKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbZXZlbnRUeXBlc1tpXV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXZlbnRTdWJzY3JpcHRpb25NYXBbZXZlbnRUeXBlc1tpXV0ucHVzaChmbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREYXRhU291cmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXREYXRhU291cmNlcygpO1xuICAgIH1cbiAgICBnZXRUb3BpY0lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldFRvcGljSWQoKTtcbiAgICB9XG5cbiAgICBnZXRUaW1lVG9waWNJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRUaW1lVG9waWNJZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXJ0VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gc3RhcnRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0U3RhcnRUaW1lQXNJc29EYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldFN0YXJ0VGltZUFzSXNvRGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXJ0VGltZSBvZiB0aGUgZmlyc3QgRGF0YVNvdXJjZSBvYmpldFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gc3RhcnRUaW1lIGFzIHVuaXggdGltZXN0YW1wXG4gICAgICovXG4gICAgZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0U3RhcnRUaW1lQXNUaW1lc3RhbXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbmRUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0RW5kVGltZUFzSXNvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRFbmRUaW1lQXNJc29EYXRlKCk7XG4gICAgfVxuXG4gICAgZ2V0RW5kVGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldEVuZFRpbWVBc1RpbWVzdGFtcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyBJU08gZGF0ZVxuICAgICAqL1xuICAgIGdldE1pblRpbWVBc0lzb0RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0TWluVGltZUFzSXNvRGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1pblRpbWUgb2YgdGhlIGZpcnN0IERhdGFTb3VyY2Ugb2JqZXRcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHN0YXJ0VGltZSBhcyB1bml4IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIGdldE1pblRpbWVBc1RpbWVzdGFtcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIElTTyBkYXRlXG4gICAgICovXG4gICAgZ2V0TWF4VGltZUFzSXNvRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRNaW5UaW1lQXNUaW1lc3RhbXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXhUaW1lIG9mIHRoZSBmaXJzdCBEYXRhU291cmNlIG9iamV0XG4gICAgICogQHJldHVybnMge1N0cmluZ30gLSBlbmRUaW1lIGFzIHVuaXggdGltZXN0YW1wXG4gICAgICovXG4gICAgZ2V0TWF4VGltZUFzVGltZXN0YW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmdldE1heFRpbWVBc1RpbWVzdGFtcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlcGxheVNwZWVkXG4gICAgICogQHJldHVybnMge051bWJlcn0gLSB0aGUgcmVwbGF5IHNwZWVkXG4gICAgICovXG4gICAgZ2V0UmVwbGF5U3BlZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0UmVwbGF5U3BlZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGUgdGhlIGNvcnJlc3BvbmRpbmcgcnVubmluZyBXZWJXb3JrZXIgYnkgY2FsbGluZyB0ZXJtaW5hdGUoKSBvbiBpdC5cbiAgICAgKi9cbiAgICB0ZXJtaW5hdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIudGVybWluYXRlKCk7XG4gICAgfVxuXG4gICAgZ2V0TW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5nZXRNb2RlKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgYXV0b1VwZGF0ZVRpbWUoYWN0aXZhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplclJlcGxheS5hdXRvVXBkYXRlVGltZShhY3RpdmF0ZSk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS0tLS0tLSBBU1lOQ0hST05PVVMgRlVOQ1RJT05TIC0tLS0tLS0tLS0tLS0tLS0tLy9cblxuICAgIGFzeW5jIGluaXREYXRhU291cmNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5pbml0RGF0YVNvdXJjZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IERhdGFTb3VyY2Ugb2JqZWN0IHRvIHRoZSBsaXN0IG9mIGRhdGFzb3VyY2VzIHRvIHN5bmNocm9uaXplLlxuICAgICAqIG5vdGU6IGRvbid0IGZvcmdldCB0byBjYWxsIHJlc2V0KCkgdG8gYmUgc3VyZSB0byByZS1pbml0IHRoZSBzeW5jaHJvbml6ZXIgaW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgKiBAcGFyYW0ge1RpbWVTZXJpZXNEYXRhU291cmNlfSBkYXRhU291cmNlIC0gdGhlIG5ldyBkYXRhc291cmNlIHRvIGFkZFxuICAgICAqL1xuICAgIGFzeW5jIGFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSdC5hZGREYXRhU291cmNlKGRhdGFTb3VyY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5LmFkZERhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIERhdGFTb3VyY2Ugb2JqZWN0IGZyb20gdGhlIGxpc3Qgb2YgZGF0YXNvdXJjZXMgb2YgdGhlIHN5bmNocm9uaXplci5cbiAgICAgKiBAcGFyYW0ge1RpbWVTZXJpZXNEYXRhc291cmNlfSBkYXRhU291cmNlIC0gdGhlIG5ldyBkYXRhc291cmNlIHRvIGFkZFxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZURhdGFTb3VyY2UoZGF0YVNvdXJjZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSdC5yZW1vdmVEYXRhU291cmNlKGRhdGFTb3VyY2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyUmVwbGF5LnJlbW92ZURhdGFTb3VyY2UoZGF0YVNvdXJjZSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVNvdXJjZUlkIC0gdGhlIGRhdGFTb3VyY2UgaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIHRoZSBkYXRhIHRvIHB1c2ggaW50byB0aGUgZGF0YSBzeW5jaHJvbml6ZXJcbiAgICAgKi9cbiAgICBhc3luYyBwdXNoKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLnB1c2goZGF0YVNvdXJjZUlkLCBkYXRhKTtcbiAgICB9XG5cbiAgICB2ZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLnZlcnNpb24oKVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyBhbGwgZGF0YVNvdXJjZXNcbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLmNvbm5lY3QoKVxuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrSW5pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5jaGVja0luaXQoKVxuICAgIH1cblxuICAgIGFzeW5jIGRvQ29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci5kb0Nvbm5lY3QoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2Nvbm5lY3RzIGFsbCBkYXRhU291cmNlc1xuICAgICAqL1xuICAgIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZGlzY29ubmVjdCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVwbGF5U3BlZWRcbiAgICAgKi9cbiAgICBhc3luYyBzZXRSZXBsYXlTcGVlZChyZXBsYXlTcGVlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLnNldFJlcGxheVNwZWVkKHJlcGxheVNwZWVkKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGEgc291cmNlIHRpbWUgcmFuZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnRUaW1lIC0gdGhlIHN0YXJ0VGltZSAoaW4gZGF0ZSBJU08pXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVuZFRpbWUgLSB0aGUgc3RhcnRUaW1lIChpbiBkYXRlIElTTylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVwbGF5U3BlZWQgLSB0aGUgcmVwbGF5IHNwZWVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZWNvbm5lY3QgLSByZWNvbm5lY3QgaWYgd2FzIGNvbm5lY3RlZFxuICAgICAqL1xuICAgIGFzeW5jIHNldFRpbWVSYW5nZShzdGFydFRpbWUgPSB0aGlzLmdldFN0YXJ0VGltZUFzSXNvRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICBlbmRUaW1lID0gdGhpcy5nZXRFbmRUaW1lQXNJc29EYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgIHJlcGxheVNwZWVkID0gdGhpcy5nZXRSZXBsYXlTcGVlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICByZWNvbm5lY3QgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLnNldFRpbWVSYW5nZShzdGFydFRpbWUsZW5kVGltZSwgcmVwbGF5U3BlZWQscmVjb25uZWN0KTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVQcm9wZXJ0aWVzKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVN5bmNocm9uaXplci51cGRhdGVQcm9wZXJ0aWVzKHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyByZWZlcmVuY2UgdGltZVxuICAgICAqL1xuICAgIGFzeW5jIHJlc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3luY2hyb25pemVyLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICB9XG5cbiAgICBzZXRNaW5UaW1lKG1pblRpbWUpIHtcbiAgICAgICAgdGhpcy5kYXRhU3luY2hyb25pemVyLnNldE1pblRpbWUobWluVGltZSk7XG4gICAgfVxuXG4gICAgc2V0TWF4VGltZShtYXhUaW1lKSB7XG4gICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplci5zZXRNYXhUaW1lKG1heFRpbWUpO1xuICAgIH1cblxuICAgICAgICAvKipcbiAgICAgKiBDb25uZWN0IHRoZSBkYXRhU291cmNlIHRoZW4gdGhlIHByb3RvY29sIHdpbGwgYmUgb3BlbmVkIGFzIHdlbGwuXG4gICAgICovXG4gICAgYXN5bmMgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTeW5jaHJvbml6ZXIuaXNDb25uZWN0ZWQoKTtcbiAgICB9XG5cbiAgICBtaW5NYXhDaGFuZ2VkKHJlc2V0U3RhcnRUaW1lc3RhbXAgPSBmYWxzZSkge1xuICAgICAgICBpZihyZXNldFN0YXJ0VGltZXN0YW1wKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkucHJvcGVydGllcy5zdGFydFRpbWVzdGFtcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZGF0YVN5bmNocm9uaXplclJlcGxheS5wcm9wZXJ0aWVzLmVuZFRpbWVzdGFtcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkuY29tcHV0ZU1pbk1heCgpO1xuICAgICAgICB0aGlzLmRhdGFTeW5jaHJvbml6ZXJSZXBsYXkudGltZUNoYW5nZWQoKTtcbiAgICB9XG4gICAgb25UaW1lQ2hhbmdlZChzdGFydCwgbWluKSB7fVxuXG4gICAgb25SZW1vdmVkRGF0YVNvdXJjZShkYXRhU291cmNlSWQpIHtcbiAgICB9XG5cbiAgICBvbkFkZGVkRGF0YVNvdXJjZShkYXRhU291cmNlSWQpIHtcbiAgICB9XG5cbiAgICBvbkNoYW5nZWRNb2RlKG1vZGUpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFTeW5jaHJvbml6ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(1);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(31);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/ui/view/View.js\nvar View = __webpack_require__(16);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View[\"a\" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {}; // map Layer id to array of corresponding draping\n\n    this.layerIdToDrapedImage = {};\n  }\n\n  async setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === 'marker') {\n        this.updateMarker(d);\n      } else if (data.type === 'polyline') {\n        this.updatePolyline(d);\n      } else if (data.type === 'drapedImage') {\n        this.updateDrapedImage(d);\n      } else if (data.type === 'ellipse') {\n        this.updateEllipse(d);\n      } else if (data.type === 'polygon') {\n        this.updatePolygon(d);\n      } else if (data.type === 'coplanarPolygon') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === 'frustum') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  async addPolygonToLayer(props, polygon) {\n    this.layerIdToPolygon[props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  async addMarkerToLayer(props, markerObject) {\n    this.layerIdToMarkers[props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  async addPolylineToLayer(props, polylineObject) {\n    this.layerIdToPolylines[props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  async addEllipseToLayer(props, ellipseObject) {\n    this.layerIdToEllipsoids[props.ellipseId] = ellipseObject;\n  }\n  /**\n   * Associate a drapedImageId to a Layer for a fast lookup\n   * @protected\n   * @param {ImageDraping.props} layer - the Layer object\n   * @param {Object} drapedImageObject - the Map drapedImage object\n   */\n\n\n  async addDrapedImageToLayer(props, drapedImageObject) {\n    this.layerIdToDrapedImage[props.drapedImageId] = drapedImageObject;\n  }\n\n  async addFrustumToLayer(props, frustum) {\n    this.layerIdToFrustum[props.frustumId] = frustum;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      array.push(this.layerIdToPolygon[id]);\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.polygonId in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.markerId in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      array.push(this.layerIdToMarkers[id]);\n    }\n\n    return array;\n  }\n\n  listMarkers() {\n    console.log('---- Markers ----');\n\n    for (let id in this.layerIdToMarkers) {\n      console.log('mv: ' + id);\n    }\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      array.push(this.layerIdToPolylines[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      array.push(this.layerIdToEllipsoids[id]);\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.ellipseId in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.polylineId in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.polylineId];\n  }\n  /**\n   * Get the draped image associate to the Layer\n   * @protected\n   * @param {ImageDrapingLayer.props} layer - the Layer Object\n   */\n\n\n  getDrapedImage(props) {\n    if (!(props.drapedImageId in this.layerIdToDrapedImage)) {\n      return null;\n    }\n\n    return this.layerIdToDrapedImage[props.drapedImageId];\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      array.push(this.layerIdToFrustum[id]);\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.frustumId in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (layerId in currentLayer.propsById) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n\n  getLayerObject(id) {\n    if (id in this.layerIdToMarkers) {\n      return this.layerIdToMarkers[id];\n    }\n\n    if (id in this.layerIdToPolylines) {\n      return this.layerIdToMarkers[id];\n    }\n\n    if (id in this.layerIdToEllipsoids) {\n      return this.layerIdToMarkers[id];\n    }\n\n    if (id in this.layerIdToPolygon) {\n      return this.layerIdToMarkers[id];\n    }\n\n    if (id in this.layerIdToFrustum) {\n      return this.layerIdToMarkers[id];\n    }\n\n    if (id in this.layerIdToDrapedImage) {\n      return this.layerIdToDrapedImage[id];\n    }\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    // check for marker\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeDrapedImages(layer);\n    this.removeFrustums(layer);\n    super.removeAllFromLayer(layer);\n  }\n\n  removePolygons(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const polygon = this.layerIdToPolygon[id];\n\n      if (Object(Utils[\"l\" /* isDefined */])(polygon)) {\n        this.removePolygonFromLayer(polygon);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const marker = this.layerIdToMarkers[id];\n\n      if (Object(Utils[\"l\" /* isDefined */])(marker)) {\n        this.removeMarkerFromLayer(marker);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    const ids = ellipse.getIds() || [];\n\n    for (let id of ids) {\n      const ellipse = this.layerIdToEllipsoids[id];\n\n      if (Object(Utils[\"l\" /* isDefined */])(ellipse)) {\n        this.removeEllipseFromLayer(ellipse);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    const ids = polyline.getIds() || [];\n\n    for (let id of ids) {\n      const polyline = this.layerIdToPolylines[id];\n\n      if (Object(Utils[\"l\" /* isDefined */])(polyline)) {\n        this.removePolylineFromLayer(polyline);\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[id];\n    }\n  }\n  /**\n   * Remove the drapedImage corresponding to a ImageDraping Layer\n   * @param {ImageDraping} imageDraping - the layer to remove the drapedImage from\n   */\n\n\n  removeDrapedImages(drapedImage) {\n    const ids = drapedImage.getIds() || [];\n\n    for (let id of ids) {\n      const drapedImage = this.layerIdToDrapedImage[id];\n\n      if (Object(Utils[\"l\" /* isDefined */])(drapedImage)) {\n        this.removeDrapedImageFromLayer(drapedImage);\n      } // remove drapedImage ids from Layer map\n\n\n      delete this.layerIdToDrapedImage[id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    const ids = layer.getIds() || [];\n\n    for (let id of ids) {\n      const frustum = this.layerIdToFrustum[id];\n\n      if (Object(Utils[\"l\" /* isDefined */])(frustum)) {\n        this.removeFrustumFromLayer(frustum);\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a draped image from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} drapedImage - The Map drapedImage object\n   */\n\n\n  removeDrapedImageFromLayer(drapedImage) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils[\"l\" /* isDefined */])(layer.props.onLeftClick)) {\n      layer.props.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils[\"l\" /* isDefined */])(layer.props.onRightClick)) {\n      layer.props.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils[\"l\" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils[\"l\" /* isDefined */])(layer.props.onHover)) {\n      layer.props.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split('$');\n\n    if (Object(Utils[\"l\" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils[\"l\" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split('$');\n\n    if (Object(Utils[\"l\" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  async updateMarker() {}\n\n  async updatePolyline() {}\n\n  async updatePolygon() {}\n\n  async updateEllipse() {}\n\n  async updateCoPlanarPolygon() {}\n\n  async updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from 'core/ui/view/map/LeafletView.js';\n\n let leafletMapView = new LeafletView({\n\tcontainer: 'leafletMap',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: './images/car-location.png',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: 'Car',\n      description: 'GPS car Toulouse'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: ['marker', 'draping', 'polyline', 'polygon'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute(\"class\", cssClass + \" \" + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils[\"l\" /* isDefined */])(options)) {\n      if (Object(Utils[\"l\" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils[\"l\" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils[\"l\" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils[\"l\" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils[\"l\" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils[\"l\" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils[\"l\" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = 'Map data © <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        mbUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    let esriLink = '<a href=\"http://www.esri.com/\">Esri</a>';\n    let esriWholink = 'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n      attribution: '&copy; ' + esriLink + ', ' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: 'mapbox.streets',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: \"OSM Streets\",\n      layer: streets\n    }, {\n      name: \"Esri Satellite\",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    let osmAttrib = 'Map data © <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils[\"c\" /* assertDefined */])(properties.location, 'location'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: 'center',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty(\"name\") && properties.label != null ? properties.label : \"\";\n    let desc = properties.hasOwnProperty(\"description\") && properties.description != null ? properties.description : \"\";\n\n    if (!Object(Utils[\"l\" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + '<div>' + desc + '</div>', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + \"$\" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations;\n    let polylinePoints = [];\n\n    if (Object(Utils[\"l\" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  async updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils[\"l\" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on('click', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on('contextmenu', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on('mouseover', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // console.log(`${marker.id} => ${props.orientation.heading}`);\n    // updates orientation\n\n\n    if (Object(Utils[\"l\" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  async updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils[\"l\" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations;\n\n      if (Object(Utils[\"l\" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  async updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils[\"l\" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices;\n      let polygonPoints = [];\n\n      if (Object(Utils[\"l\" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices;\n    let polygonPoints = [];\n\n    if (Object(Utils[\"l\" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire('popupopen', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === 'msTransform';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + 'px ' + iconAnchor[1] + 'px';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || 'center bottom';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + 'Origin'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = ' rotate(' + this.options.rotationAngle + 'deg)';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += ' rotateZ(' + this.options.rotationAngle + 'deg)';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__[\"a\"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(17);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/ui/layer/BinaryDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import BinaryDataLayer from 'osh-js/core/ui/layer/BinaryDataLayer';\n *\n */\n\nclass BinaryDataLayer_BinaryDataLayer extends Layer[\"a\" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = 'binaryData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      frameData: undefined\n    };\n\n    if (Object(Utils[\"l\" /* isDefined */])(properties.frameData)) {\n      this.props.frameData = properties.frameData;\n    }\n\n    this.definedId('dataId', props);\n\n    if (Object(Utils[\"l\" /* isDefined */])(properties.getFrameData)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('frameData', await this.getFunc('getFrameData')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getFrameData'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_BinaryDataLayer = (BinaryDataLayer_BinaryDataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH2/github/osh-js/source/core/ui/layer/VideoDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends BinaryDataLayer\n * @example\n *\n * import VideoDataLayer from 'osh-js/core/ui/layer/VideoDataLayer';\n *\n */\n\nclass VideoDataLayer_VideoDataLayer extends layer_BinaryDataLayer {\n  constructor(properties) {\n    super(properties);\n    this.type = 'videoData';\n  } // call by super class\n\n\n  init(properties = this.properties) {\n    super.init(properties);\n    const props = {\n      roll: 0\n    };\n\n    if (Object(Utils[\"l\" /* isDefined */])(properties.roll)) {\n      props.roll = properties.roll;\n    }\n\n    this.definedId('videoDataId', props);\n\n    if (Object(Utils[\"l\" /* isDefined */])(properties.getRoll)) {\n      let fn = async (rec, timestamp, options) => {\n        this.updateProperty('roll', await this.getFunc('getRoll')(rec, timestamp, options));\n      };\n\n      this.addFn(this.getDataSourcesIdsByProperty('getRoll'), fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var layer_VideoDataLayer = __webpack_exports__[\"a\"] = (VideoDataLayer_VideoDataLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3VpL2xheWVyL0JpbmFyeURhdGFMYXllci5qcz85YzBhIiwid2VicGFjazovLy8vaG9tZS9uZXZyby9Qcm9ncy9wcm9ncy1sb2NhbC9naXQtcmVwby9PU0gyL2dpdGh1Yi9vc2gtanMvc291cmNlL2NvcmUvdWkvbGF5ZXIvVmlkZW9EYXRhTGF5ZXIuanM/Y2VkYiJdLCJuYW1lcyI6WyJCaW5hcnlEYXRhTGF5ZXIiLCJMYXllciIsImNvbnN0cnVjdG9yIiwicHJvcGVydGllcyIsInR5cGUiLCJpbml0IiwicHJvcHMiLCJmcmFtZURhdGEiLCJ1bmRlZmluZWQiLCJpc0RlZmluZWQiLCJkZWZpbmVkSWQiLCJnZXRGcmFtZURhdGEiLCJmbiIsInJlYyIsInRpbWVzdGFtcCIsIm9wdGlvbnMiLCJ1cGRhdGVQcm9wZXJ0eSIsImdldEZ1bmMiLCJhZGRGbiIsImdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSIsIlZpZGVvRGF0YUxheWVyIiwicm9sbCIsImdldFJvbGwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1BLCtCQUFOLFNBQThCQyx3QkFBOUIsQ0FBb0M7RUFFaENDLFdBQVcsQ0FBQ0MsVUFBRCxFQUFhO0lBQ3BCLE1BQU1BLFVBQU47SUFDQSxLQUFLQyxJQUFMLEdBQVksWUFBWjtFQUNILENBTCtCLENBTWhDOzs7RUFDQUMsSUFBSSxDQUFDRixVQUFVLEdBQUMsS0FBS0EsVUFBakIsRUFBNkI7SUFDN0IsTUFBTUUsSUFBTixDQUFXRixVQUFYO0lBQ0EsTUFBTUcsS0FBSyxHQUFHO01BQ1ZDLFNBQVMsRUFBRUM7SUFERCxDQUFkOztJQUlBLElBQUlDLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ0ksU0FBWixDQUFiLEVBQW9DO01BQ2hDLEtBQUtELEtBQUwsQ0FBV0MsU0FBWCxHQUF1QkosVUFBVSxDQUFDSSxTQUFsQztJQUNIOztJQUVELEtBQUtHLFNBQUwsQ0FBZSxRQUFmLEVBQXlCSixLQUF6Qjs7SUFFQSxJQUFJRyxrQ0FBUyxDQUFDTixVQUFVLENBQUNRLFlBQVosQ0FBYixFQUF1QztNQUNuQyxJQUFJQyxFQUFFLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxTQUFaLEVBQXVCQyxPQUF2QixLQUFtQztRQUN4QyxLQUFLQyxjQUFMLENBQW9CLFdBQXBCLEVBQWdDLE1BQU0sS0FBS0MsT0FBTCxDQUFhLGNBQWIsRUFBNkJKLEdBQTdCLEVBQWtDQyxTQUFsQyxFQUE2Q0MsT0FBN0MsQ0FBdEM7TUFDSCxDQUZEOztNQUdBLEtBQUtHLEtBQUwsQ0FBVyxLQUFLQywyQkFBTCxDQUFpQyxjQUFqQyxDQUFYLEVBQTZEUCxFQUE3RDtJQUNIO0VBQ0o7O0FBekIrQjs7QUEyQnJCWix5RkFBZixFOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTW9CLDZCQUFOLFNBQTZCcEIscUJBQTdCLENBQTZDO0VBRXpDRSxXQUFXLENBQUNDLFVBQUQsRUFBYTtJQUNwQixNQUFNQSxVQUFOO0lBQ0EsS0FBS0MsSUFBTCxHQUFZLFdBQVo7RUFDSCxDQUx3QyxDQU16Qzs7O0VBQ0FDLElBQUksQ0FBQ0YsVUFBVSxHQUFDLEtBQUtBLFVBQWpCLEVBQTZCO0lBQzdCLE1BQU1FLElBQU4sQ0FBV0YsVUFBWDtJQUNBLE1BQU1HLEtBQUssR0FBRztNQUNaZSxJQUFJLEVBQUU7SUFETSxDQUFkOztJQUlBLElBQUlaLGtDQUFTLENBQUNOLFVBQVUsQ0FBQ2tCLElBQVosQ0FBYixFQUErQjtNQUMzQmYsS0FBSyxDQUFDZSxJQUFOLEdBQWFsQixVQUFVLENBQUNrQixJQUF4QjtJQUNIOztJQUVELEtBQUtYLFNBQUwsQ0FBZSxhQUFmLEVBQThCSixLQUE5Qjs7SUFFQSxJQUFJRyxrQ0FBUyxDQUFDTixVQUFVLENBQUNtQixPQUFaLENBQWIsRUFBa0M7TUFDOUIsSUFBSVYsRUFBRSxHQUFHLE9BQU9DLEdBQVAsRUFBWUMsU0FBWixFQUF1QkMsT0FBdkIsS0FBbUM7UUFDeEMsS0FBS0MsY0FBTCxDQUFvQixNQUFwQixFQUEyQixNQUFNLEtBQUtDLE9BQUwsQ0FBYSxTQUFiLEVBQXdCSixHQUF4QixFQUE2QkMsU0FBN0IsRUFBd0NDLE9BQXhDLENBQWpDO01BQ0gsQ0FGRDs7TUFHQSxLQUFLRyxLQUFMLENBQVcsS0FBS0MsMkJBQUwsQ0FBaUMsU0FBakMsQ0FBWCxFQUF3RFAsRUFBeEQ7SUFDSDtFQUNKOztBQXpCd0M7O0FBMkI5QlEsaUhBQWYiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBMYXllciBmcm9tIFwiLi9MYXllci5qc1wiO1xuaW1wb3J0IHtpc0RlZmluZWQsIHJhbmRvbVVVSUR9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIExheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSAnb3NoLWpzL2NvcmUvdWkvbGF5ZXIvQmluYXJ5RGF0YUxheWVyJztcbiAqXG4gKi9cbmNsYXNzIEJpbmFyeURhdGFMYXllciBleHRlbmRzIExheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdiaW5hcnlEYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBmcmFtZURhdGE6IHVuZGVmaW5lZFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5mcmFtZURhdGEpKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZnJhbWVEYXRhID0gcHJvcGVydGllcy5mcmFtZURhdGE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlZmluZWRJZCgnZGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRGcmFtZURhdGEpKXtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ2ZyYW1lRGF0YScsYXdhaXQgdGhpcy5nZXRGdW5jKCdnZXRGcmFtZURhdGEnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEZyYW1lRGF0YScpLCBmbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCaW5hcnlEYXRhTGF5ZXI7XG4iLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7aXNEZWZpbmVkfSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSBcIi4vQmluYXJ5RGF0YUxheWVyXCI7XG5cbi8qKlxuICogQGV4dGVuZHMgQmluYXJ5RGF0YUxheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBWaWRlb0RhdGFMYXllciBmcm9tICdvc2gtanMvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllcic7XG4gKlxuICovXG5jbGFzcyBWaWRlb0RhdGFMYXllciBleHRlbmRzIEJpbmFyeURhdGFMYXllciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAndmlkZW9EYXRhJztcbiAgICB9XG4gICAgLy8gY2FsbCBieSBzdXBlciBjbGFzc1xuICAgIGluaXQocHJvcGVydGllcz10aGlzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIuaW5pdChwcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgcm9sbDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5yb2xsKSl7XG4gICAgICAgICAgICBwcm9wcy5yb2xsID0gcHJvcGVydGllcy5yb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZWZpbmVkSWQoJ3ZpZGVvRGF0YUlkJywgcHJvcHMpO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5nZXRSb2xsKSl7XG4gICAgICAgICAgICBsZXQgZm4gPSBhc3luYyAocmVjLCB0aW1lc3RhbXAsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdyb2xsJyxhd2FpdCB0aGlzLmdldEZ1bmMoJ2dldFJvbGwnKShyZWMsIHRpbWVzdGFtcCwgb3B0aW9ucykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhpcy5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFJvbGwnKSwgZm4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVmlkZW9EYXRhTGF5ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n")},,,,,,,function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(38);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(6).default\nvar update = add(\"759d7ef5\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/NWZhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFzRztBQUM1SDtBQUNBLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMkc7QUFDN0gsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjc1OWQ3ZWY1XCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(5);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIMi9naXRodWIvb3NoLWpzL3NvdXJjZS9jb3JlL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/YWM1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQWlHO0FBQzNJO0FBQ0E7QUFDQSxjQUFjLFFBQVMsY0FBYyxpQkFBaUIsbUJBQW1CLEdBQUc7QUFDNUU7QUFDQSIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm9zaC12aWV3IHtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n')}]]);