!function(Q){var B={};function F(I){if(B[I])return B[I].exports;var U=B[I]={i:I,l:!1,exports:{}};return Q[I].call(U.exports,U,U.exports,F),U.l=!0,U.exports}F.m=Q,F.c=B,F.d=function(Q,B,I){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:I})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var I=Object.create(null);if(F.r(I),Object.defineProperty(I,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var U in Q)F.d(I,U,function(B){return Q[B]}.bind(null,U));return I},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(B,"a",B),B},F.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== 'undefined' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, 'object', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = 'letiable') {\n  if (!isDefined(v)) {\n    throw letName + \" must be defined\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + \" must be of type \" + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, 'boolean', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, 'string', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, 'number', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + \" must be a positive number\";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, 'object', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + \" must be an array\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + \" must not be null\";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== 'undefined';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, \"\");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute(\"class\", div.className + \" \" + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/parsers/DataSourceParser.js\n\n\nclass DataSourceParser_DataSourceParser {\n  /**\n   * Builds the full url.\n   * @protected\n   * @param {Object} properties\n   * @param {String} properties.protocol the connector protocol\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay factor\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Date} properties.lastTimeStamp - the last timestamp to start at this time (ISO String)\n   * @param {Object} properties.customUrlParams - the encoding options\n   * @param {Number} properties.customUrlParams.video_bitrate - define a custom bitrate (in b/s)\n   * @param {Number} properties.customUrlParams.video_scale - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} properties.customUrlParams.video_width - define a custom width\n   * @param {Number} properties.customUrlParams.video_height - define a custom height\n   * @return {String} the full url\n   */\n  buildUrl(properties) {\n    let url = \"\"; // adds protocol\n\n    url += properties.protocol + \"://\"; // adds endpoint url\n\n    url += properties.endpointUrl + \"?\"; // adds service\n\n    url += \"service=\" + properties.service + \"&\"; // adds version\n\n    url += \"version=2.0&\"; // adds request\n\n    url += \"request=GetResult&\"; // adds offering\n\n    url += \"offering=\" + properties.offeringID + \"&\"; // adds feature of interest urn\n\n    if (properties.foiURN && properties.foiURN !== '') {\n      url += 'featureOfInterest=' + properties.foiURN + '&';\n    } // adds observedProperty\n\n\n    url += \"observedProperty=\" + properties.observedProperty + \"&\"; // adds temporalFilter\n\n    const stTime = isDefined(properties.lastTimeStamp) ? properties.lastTimeStamp : properties.startTime;\n    this.lastStartTime = properties.startTime;\n    let endTime = properties.endTime;\n    url += \"temporalFilter=phenomenonTime,\" + stTime + \"/\" + endTime + \"&\";\n\n    if (properties.replaySpeed) {\n      // adds replaySpeed\n      url += \"replaySpeed=\" + properties.replaySpeed;\n    } // adds responseFormat (optional)\n\n\n    if (properties.responseFormat) {\n      url += \"&responseFormat=\" + properties.responseFormat;\n    }\n\n    if (isDefined(properties.customUrlParams) && Object.keys(properties.customUrlParams).length > 0) {\n      url += '&';\n\n      for (let key in properties.customUrlParams) {\n        url += key + '=' + properties.customUrlParams[key] + '&';\n      }\n\n      if (url.endsWith('&')) {\n        url = url.slice(0, -1);\n      }\n    }\n\n    return url;\n  }\n\n}\n\n/* harmony default export */ var parsers_DataSourceParser = (DataSourceParser_DataSourceParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/parsers/SweJson.parser.js\n\n\nclass SweJson_parser_SweJsonParser extends parsers_DataSourceParser {\n  /**\n   * Extracts timestamp from the message. The timestamp corresponds to the 'time' attribute of the JSON object.\n   * @param {String} data - the data to parse\n   * @return {Number} the extracted timestamp\n   */\n  parseTimeStamp(data) {\n    let rec = String.fromCharCode.apply(null, new Uint8Array(data));\n    return new Date(JSON.parse(rec)['time']).getTime();\n  }\n  /**\n   * Extract data from the message. The data are corresponding to the whole list of attributes of the JSON object\n   * excepting the 'time' one.\n   * @param {Object} data - the data to parse\n   * @return {Object} the parsed data\n   * @example\n   * {\n   *   location : {\n   *    lat:43.61758626,\n   *    lon: 1.42376557,\n   *    alt:100\n   *   }\n   * }\n   */\n\n\n  parseData(data) {\n    let rec = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(data)));\n    let result = {};\n\n    for (let key in rec) {\n      if (key !== 'time') {\n        result[key] = rec[key];\n      }\n    }\n\n    return result;\n  }\n\n  buildUrl(properties) {\n    return super.buildUrl({ ...properties,\n      responseFormat: 'application/json'\n    });\n  }\n\n}\n\n/* harmony default export */ var SweJson_parser = (SweJson_parser_SweJsonParser);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Status.js\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/DataConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * The DataConnector is the abstract class used to create different connectors.\n */\n\nclass DataConnector_DataConnector {\n  /**\n   * @param {String} url - The full url used to connect to the data stream\n   */\n  constructor(url) {\n    this.url = url;\n    this.id = \"DataConnector-\" + randomUUID();\n    this.reconnectTimeout = 1000 * 60 * 2; //2 min\n\n    this.status = Status.DISCONNECTED;\n    this.reconnectionInterval = -1;\n  }\n\n  checkAndClearReconnection() {\n    if (this.reconnectionInterval !== -1) {\n      clearInterval(this.reconnectionInterval);\n      this.reconnectionInterval = -1;\n    }\n  }\n\n  disconnect() {\n    this.checkStatus(Status.DISCONNECTED);\n    this.checkAndClearReconnection();\n  }\n  /**\n   * Sets the url\n   * @param url\n   */\n\n\n  setUrl(url) {\n    this.url = url;\n  }\n  /**\n   * The data connector default id.\n   * @return {String}\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * The stream url.\n   * @return {String}\n   */\n\n\n  getUrl() {\n    return this.url;\n  }\n  /**\n   * Sets the reconnection timeout\n   * @param {Number} timeout - delay in milliseconds before reconnecting dataSource\n   */\n\n\n  setReconnectTimeout(timeout) {\n    this.reconnectTimeout = timeout;\n  }\n\n  onReconnect() {\n    return true;\n  }\n\n  connect() {}\n\n  forceReconnect() {\n    this.disconnect();\n    this.connect();\n  }\n  /**\n   * Called when the connection STATUS changes\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {}\n  /**\n   * Check a change of the status and call the corresponding callbacks if necessary\n   * @param {Status} status - the currentStatus\n   */\n\n\n  checkStatus(status) {\n    if (status !== this.status) {\n      this.onChangeStatus(status);\n      this.status = status;\n    }\n  }\n  /**\n   * Called when the connector has been disconnected\n   */\n\n\n  onDisconnect() {}\n  /**\n   * Called when the connector has been connected\n   */\n\n\n  onConnect() {}\n\n}\n\n/* harmony default export */ var dataconnector_DataConnector = (DataConnector_DataConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/WebSocketConnector.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * Defines the WebSocketConnector to connect to a remote server by creating a WebSocket channel.\n * @extends DataConnector\n * @example\n * import WebSocketConnector from 'osh/dataconnector/WebSocketConnector.js';\n *\n * let url = ...;\n * let connector = new WebSocketConnector(url);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nclass WebSocketConnector_WebSocketConnector extends dataconnector_DataConnector {\n  /**\n   *\n   * @param properties -\n   */\n  constructor(properties) {\n    super(properties);\n    this.interval = -1;\n    this.lastReceiveTime = 0;\n  }\n  /**\n   * Connect to the webSocket. If the system supports WebWorker, it will automatically creates one otherwise use\n   * the main thread.\n   */\n\n\n  async connect() {\n    if (!this.init) {\n      this.closed = false;\n      this.init = true; //creates Web Socket\n\n      this.ws = new WebSocket(this.getUrl());\n      this.ws.binaryType = 'arraybuffer';\n\n      this.ws.onmessage = function (event) {\n        this.checkAndClearReconnection();\n        this.checkStatus(Status.CONNECTED);\n        this.lastReceiveTime = Date.now(); //callback data on message received\n\n        if (event.data.byteLength > 0) {\n          this.onMessage(event.data);\n        }\n      }.bind(this); // closes socket if any errors occur\n\n\n      this.ws.onerror = function (event) {\n        console.error('WebSocket stream error');\n        this.checkStatus(Status.DISCONNECTED);\n        this.init = false;\n        this.lastReceiveTime = -1;\n        this.createReconnection();\n      }.bind(this);\n\n      this.ws.onclose = event => {\n        this.checkStatus(Status.DISCONNECTED);\n        console.warn('WebSocket stream closed: ', event.reason, event.code);\n        this.init = false;\n\n        if (event.code !== 1000 && !this.closed) {\n          this.createReconnection();\n        }\n      };\n    }\n  }\n\n  createReconnection() {\n    if (!this.closed && this.reconnectionInterval === -1 && this.onReconnect()) {\n      this.reconnectionInterval = setInterval(function () {\n        let delta = Date.now() - this.lastReceiveTime; // -1 means the WS went in error\n\n        if (this.lastReceiveTime === -1 || delta >= this.reconnectTimeout) {\n          console.warn('trying to reconnect', this.url);\n          this.connect();\n        }\n      }.bind(this), this.reconnectTimeout);\n    }\n  }\n  /**\n   * Disconnects and close the websocket.\n   */\n\n\n  disconnect() {\n    super.disconnect();\n    this.init = false;\n    this.closed = true;\n\n    if (this.ws != null && this.ws.readyState !== WebSocket.CLOSED) {\n      this.ws.close();\n    }\n  }\n  /**\n   * The onMessage method used by the websocket to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n\n  isConnected() {\n    return this.ws != null && this.ws.readyState === WebSocket.OPEN;\n  }\n\n}\n\n/* harmony default export */ var dataconnector_WebSocketConnector = (WebSocketConnector_WebSocketConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Ajax.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * Defines the AjaxConnector to connect to a remote server by making AjaxRequest.\n * @extends DataConnector\n * @example\n * import Ajax from 'osh/dataconnector/Ajax.js';\n *\n * let request = ...;\n * let connector = new Ajax(url);\n *\n * // handle onSuccess\n * connector.onSuccess = function(event) {\n *  // does something\n * }\n *\n * connector.onError = function(event) {\n *  // does something\n * }\n *\n * // send request\n * connector.sendRequest(request);\n *\n */\n\nclass Ajax_Ajax extends dataconnector_DataConnector {\n  /**\n   * Creates Ajax.\n   * @param {String} url -\n   * @param {Object} properties -\n   * @param {String} properties.method -\n   * @param {String} properties.responseType -\n   */\n  constructor(url, properties) {\n    super(url);\n    this.method = \"POST\";\n    this.responseType = \"arraybuffer\";\n\n    if (isDefined(properties)) {\n      if (properties.method) {\n        this.method = properties.method;\n      }\n\n      if (properties.responseType) {\n        this.responseType = properties.responseType;\n      }\n    }\n  }\n  /**\n   * Sends the request to the defined server.\n   * @param {String} request - The Http request\n   * @param {String} extraUrl - get query parameters\n   */\n\n\n  sendRequest(request, extraUrl) {\n    let self = this;\n    let xmlhttp = new XMLHttpRequest();\n    xmlhttp.withCredentials = true;\n    xmlhttp.timeout = 60000;\n\n    if (request === null) {\n      if (isDefined(extraUrl)) {\n        xmlhttp.open(\"GET\", this.getUrl() + \"?\" + extraUrl, true);\n      } else {\n        xmlhttp.open(\"GET\", this.getUrl(), true);\n      }\n\n      xmlhttp.responseType = this.responseType;\n\n      xmlhttp.onload = oEvent => {\n        if (xmlhttp.response) {\n          self.onMessage(xmlhttp.response);\n        }\n      };\n\n      xmlhttp.ontimeout = e => {\n        console.log(\"Timeout\");\n      };\n\n      xmlhttp.send(null);\n    } else {\n      xmlhttp.open(\"POST\", this.getUrl(), true);\n      xmlhttp.setRequestHeader('Content-Type', 'text/xml');\n      xmlhttp.send(request);\n\n      xmlhttp.onreadystatechange = () => {\n        if (xmlhttp.readyState < 4) {// while waiting response from server\n        } else if (xmlhttp.readyState === 4) {\n          // 4 = Response from server has been completely loaded.\n          if (xmlhttp.status === 200 && xmlhttp.status < 300) {\n            // http status between 200 to 299 are all successful\n            self.onSuccess(xmlhttp.responseText);\n          } else {\n            self.onError(\"\");\n          }\n        }\n      };\n    }\n  }\n  /**\n   * This is the callback method in case of getting error connection.\n   * @param event The error details\n   * @event\n   */\n\n\n  onError(event) {}\n  /**\n   * This is the callback method in case of getting success connection.\n   * @param event\n   * @event\n   */\n\n\n  onSuccess(event) {}\n  /**\n   * Sends the request\n   * @private\n   */\n\n\n  connect() {\n    this.sendRequest(null);\n  }\n\n}\n\n/* harmony default export */ var dataconnector_Ajax = (Ajax_Ajax);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/TopicConnector.js\n\n/**\n * Defines the FileConnector to read a File content\n * @extends DataConnector\n * @example\n * import FileConnector from 'osh/dataconnector/TopicConnector.js';\n *\n * let connector = new TopicConnector(<topic_name>);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nclass TopicConnector_TopicConnector extends dataconnector_DataConnector {\n  /**\n   *\n   * @param properties -\n   */\n  constructor(properties) {\n    super(properties);\n    this.lastReceiveTime = -1;\n    this.interval = -1;\n    this.broadcastChannel = null;\n  }\n  /**\n   * Connect to the broadcastChannel.\n   */\n\n\n  connect() {\n    if (this.broadcastChannel === null) {\n      //creates broadcastChannel\n      this.broadcastChannel = new BroadcastChannel(this.getUrl());\n\n      this.broadcastChannel.onmessage = event => {\n        this.lastReceiveTime = Date.now(); //callback data on message received\n\n        this.onMessage(event.data.data);\n      }; // closes socket if any errors occur\n\n\n      this.broadcastChannel.onerror = event => {\n        console.error('BroadcastChannel stream error: ' + event);\n        this.broadcastChannel.close();\n        this.init = false;\n        this.lastReceiveTime = -1;\n        this.opened = false;\n      };\n\n      this.opened = true; //init the reconnect handler\n\n      if (this.interval === -1) {\n        this.interval = setInterval(function () {\n          let delta = Date.now() - this.lastReceiveTime; // -1 means the WS went in error\n\n          if (this.lastReceiveTime === -1 || delta >= this.reconnectTimeout) {\n            console.warn(`trying to reconnect after ${this.reconnectTimeout} ..`);\n            this.reconnect();\n          }\n        }.bind(this), this.reconnectTimeout);\n      }\n    }\n  }\n  /**\n   * Disconnects the websocket.\n   */\n\n\n  disconnect() {\n    this.fullDisconnect(true);\n  }\n  /**\n   * Fully disconnect the websocket connection by sending a close message to the webWorker.\n   * @param {Boolean} removeInterval  - force removing the interval\n   */\n\n\n  fullDisconnect(removeInterval) {\n    if (this.broadcastChannel != null) {\n      this.broadcastChannel.close();\n      this.broadcastChannel = null;\n    }\n\n    if (removeInterval) {\n      clearInterval(this.interval);\n    }\n\n    this.opened = false;\n  }\n  /**\n   * Try to reconnect if the connexion if closed\n   */\n\n\n  reconnect() {\n    this.onReconnect();\n\n    if (this.init) {\n      this.fullDisconnect(false);\n    }\n\n    this.connect();\n  }\n  /**\n   * The onMessage method used by the websocket to callback the data\n   * @param data the callback data\n   * @event\n   */\n\n\n  onMessage(data) {}\n  /**\n   * Closes the webSocket.\n   */\n\n\n  close() {\n    this.disconnect();\n  }\n\n  isConnected() {\n    return this.broadcastChannel !== null && this.opened;\n  }\n\n}\n\n/* harmony default export */ var dataconnector_TopicConnector = (TopicConnector_TopicConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/event/EventType.js\nconst EventType = {\n  DATA: 'data',\n  STATUS: 'status'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/FileConnector.js\n\n\n/**\n * Defines the FileConnector to read a File content\n * @extends DataConnector\n * @example\n * import FileConnector from 'osh/dataconnector/FileConnector.js';\n *\n * let paths = ['path1','path2]...];\n * let connector = new FileConnector(paths);\n *\n * // connect\n * connector.connect();\n *\n * // disconnect\n * connector.disconnect();\n *\n * // close\n * connector.close();\n *\n */\n\nclass FileConnector_FileConnector extends dataconnector_DataConnector {\n  /**\n   * @param (string[]) paths - list of file paths\n   */\n  constructor(paths) {\n    super(paths);\n    this.opened = false;\n  }\n  /**\n   * Start reading file content\n   */\n\n\n  async connect() {\n    if (!this.opened) {\n      this.opened = true;\n      this.onChangeStatus(Status.CONNECTED);\n      const urls = this.getUrl();\n\n      for (let url of urls) {\n        this.onMessage(await fetch(url));\n      }\n\n      this.onChangeStatus(Status.DISCONNECTED); // read is done\n\n      this.opened = false;\n    }\n  }\n\n  isConnected() {\n    return this.opened;\n  }\n\n}\n\n/* harmony default export */ var dataconnector_FileConnector = (FileConnector_FileConnector);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/workers/DataSourceHandler.js\n\n\n\n\n\n\n\n\nclass DataSourceHandler_DataSourceHandler {\n  constructor(parser) {\n    this.parser = parser;\n    this.connector = null;\n    this.lastTimeStamp = null;\n    this.lastStartTime = 'now';\n    this.timeShift = 0;\n    this.reconnectTimeout = 1000 * 10; // 10 secs\n\n    this.values = [];\n  }\n\n  createConnector(propertiesStr, topic, dataSourceId) {\n    this.dataSourceId = dataSourceId; // check for existing connector\n\n    if (this.connector !== null) {\n      this.connector.disconnect();\n      this.connector = null;\n    }\n\n    this.broadcastChannel = new BroadcastChannel(topic);\n    const properties = JSON.parse(propertiesStr);\n\n    if (isDefined(properties.fetch)) {\n      this.fetch = properties.fetch;\n    }\n\n    if (isDefined(properties.timeShift)) {\n      this.timeShift = properties.timeShift;\n    }\n\n    if (isDefined(properties.bufferingTime)) {\n      this.bufferingTime = properties.bufferingTime;\n    }\n\n    if (isDefined(properties.timeOut)) {\n      this.timeOut = properties.timeOut;\n    }\n\n    if (isDefined(properties.reconnectTimeout)) {\n      this.reconnectTimeout = properties.reconnectTimeout;\n    }\n\n    if (properties.startTime === 'now') {\n      this.batchSize = 1;\n    } else {\n      if (isDefined(properties.replaySpeed)) {\n        if (!isDefined(properties.batchSize)) {\n          this.batchSize = 1;\n        }\n      }\n\n      if (isDefined(properties.batchSize)) {\n        this.batchSize = properties.batchSize;\n      }\n    }\n\n    this.properties = properties;\n    this.createDataConnector(this.properties);\n  }\n  /**\n   * @private\n   */\n\n\n  createDataConnector(properties) {\n    const url = this.parser.buildUrl({ ...properties,\n      timeShift: this.timeShift\n    }); // checks if type is WebSocketConnector\n\n    if (properties.protocol.startsWith('ws')) {\n      this.connector = new dataconnector_WebSocketConnector(url);\n    } else if (properties.protocol.startsWith('http')) {\n      this.connector = new dataconnector_Ajax(url);\n      this.connector.responseType = 'arraybuffer';\n    } else if (properties.protocol.startsWith('topic')) {\n      this.connector = new dataconnector_TopicConnector(url);\n    } else if (properties.protocol.startsWith('file')) {\n      this.connector = new dataconnector_FileConnector(url, properties);\n    }\n\n    const lastStartTimeCst = this.parser.lastStartTime;\n    const lastProperties = properties;\n\n    if (this.connector !== null) {\n      // set the reconnectTimeout\n      this.connector.setReconnectTimeout(this.reconnectTimeout); // connects the callback\n\n      this.connector.onMessage = this.onMessage.bind(this); // bind change connection STATUS\n\n      this.connector.onChangeStatus = this.onChangeStatus.bind(this);\n\n      this.connector.onReconnect = () => {\n        // if not real time, preserve last timestamp to reconnect at the last time received\n        // for that, we update the URL with the new last time received\n        if (lastStartTimeCst !== 'now') {\n          this.connector.setUrl(this.parser.buildUrl({ ...properties,\n            lastTimeStamp: isDefined(this.lastTimeStamp) ? new Date(this.lastTimeStamp).toISOString() : properties.startTime\n          }));\n        }\n\n        return true;\n      };\n    }\n  }\n  /**\n   * Sets the current topic to listen\n   * @param {String} topic - the topic to listen\n   */\n\n\n  setTopic(topic) {\n    if (this.broadcastChannel !== null) {\n      this.broadcastChannel.close();\n    }\n\n    this.broadcastChannel = new BroadcastChannel(topic);\n    this.topic = topic;\n  }\n\n  connect() {\n    if (this.connector !== null) {\n      this.connector.connect();\n    }\n  }\n\n  disconnect() {\n    if (this.connector !== null) {\n      this.connector.disconnect();\n    }\n  }\n\n  async onMessage(event) {\n    const timeStamp = await Promise.resolve(this.parser.parseTimeStamp(event) + this.timeShift);\n    const data = await Promise.resolve(this.parser.parseData(event)); // check if data is array\n\n    if (Array.isArray(data)) {\n      for (let i = 0; i < data.length; i++) {\n        this.values.push({\n          data: data[i],\n          timeStamp: timeStamp\n        });\n      }\n    } else {\n      this.values.push({\n        data: data,\n        timeStamp: timeStamp\n      });\n    }\n\n    this.lastTimeStamp = timeStamp;\n\n    if (isDefined(this.batchSize) && this.values.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n  /**\n   * Send a change status event into the broadcast channel\n   * @param {Status} status - the new status\n   */\n\n\n  onChangeStatus(status) {\n    if (status === Status.DISCONNECTED) {\n      this.flushAll();\n    }\n\n    this.broadcastChannel.postMessage({\n      type: EventType.STATUS,\n      status: status,\n      dataSourceId: this.dataSourceId\n    });\n  }\n\n  getLastTimeStamp() {\n    return this.lastTimeStamp;\n  }\n\n  updateUrl(properties) {\n    this.disconnect();\n    let lastTimestamp = new Date(this.lastTimeStamp).toISOString();\n\n    if (properties.hasOwnProperty('startTime')) {\n      lastTimestamp = properties.startTime;\n    } else if (this.properties.startTime === 'now') {\n      //handle RealTime\n      lastTimestamp = 'now';\n    }\n\n    this.createDataConnector({ ...this.properties,\n      ...properties,\n      lastTimeStamp: lastTimestamp\n    });\n    this.connect();\n  }\n\n  flushAll() {\n    while (this.values.length > 0) {\n      this.flush();\n    }\n  }\n\n  flush() {\n    let nbElements = this.values.length;\n\n    if (isDefined(this.batchSize) && this.values.length > this.batchSize) {\n      nbElements = this.batchSize;\n    }\n\n    this.broadcastChannel.postMessage({\n      dataSourceId: this.dataSourceId,\n      type: EventType.DATA,\n      values: this.values.splice(0, nbElements)\n    });\n  }\n\n  handleMessage(message, worker) {\n    if (message.message === 'init') {\n      this.createConnector(message.properties, message.topic, message.id);\n    } else if (message.message === 'connect') {\n      this.connect();\n    } else if (message.message === 'disconnect') {\n      this.disconnect();\n    } else if (message.message === 'topic') {\n      this.setTopic(message.topic);\n    } else if (message.message === 'last-timestamp') {\n      const lastTimeStamp = this.getLastTimeStamp();\n      worker.postMessage({\n        message: 'last-timestamp',\n        data: lastTimeStamp\n      });\n    } else if (message.message === 'update-url') {\n      this.updateUrl(message.data);\n    } else if (message.message === 'is-connected') {\n      worker.postMessage({\n        message: 'is-connected',\n        data: this.connector === null ? false : this.connector.isConnected()\n      });\n    }\n  }\n\n}\n\n/* harmony default export */ var workers_DataSourceHandler = (DataSourceHandler_DataSourceHandler);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/workers/SweJson.worker.js\n\n\n\nconst dataSourceHandler = new workers_DataSourceHandler(new SweJson_parser());\n\nself.onmessage = (event) => {\n    dataSourceHandler.handleMessage(event.data, self);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);