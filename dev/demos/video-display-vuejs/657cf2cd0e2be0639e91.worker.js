!function(Q){var I={};function B(F){if(I[F])return I[F].exports;var U=I[F]={i:F,l:!1,exports:{}};return Q[F].call(U.exports,U,U.exports,B),U.l=!0,U.exports}B.m=Q,B.c=I,B.d=function(Q,I,F){B.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:F})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,I){if(1&I&&(Q=B(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(B.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var U in Q)B.d(F,U,function(I){return Q[I]}.bind(null,U));return F},B.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(I,"a",I),I},B.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\nconst MAGIC_END_PACKET = 'magic-packet';\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: 'data',\n  LAST_TIME: 'last-time',\n  MASTER_TIME: 'master-time',\n  STATUS: 'status',\n  TIME_CHANGED: 'time-changed',\n  CLOSED: 'closed'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== 'undefined' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGB\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\nfunction hex2rgba(hex) {\n  return [parseInt(hex.slice(1, 3), 16), parseInt(hex.slice(3, 5), 16), parseInt(hex.slice(5, 7), 16), parseInt(hex.slice(7, 9), 16) / 255];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, 'object', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = 'letiable') {\n  if (!isDefined(v)) {\n    throw letName + \" must be defined\";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = 'letiable') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + \" must be of type \" + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, 'boolean', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, 'string', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, 'number', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + \" must be a positive number\";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, 'object', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + \" must be an array\";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, 'function', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = 'letiable') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + \" must not be null\";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return 'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== 'undefined';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, \"\");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute(\"class\", div.className + \" \" + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Capitalize the first letter of a given string\n * @param {String} str - the input string\n * @returns {String} the result\n */\n\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf('(') + 1;\n  let endIdxValue = str.indexOf(')');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(',').map(Number);\n}\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/connector/Status.js\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  FETCH_STARTED: 'fetch-start',\n  FETCH_ENDED: 'fetch-end',\n  CLOSED: \"closed\",\n  CLOSED_ERROR: \"closed-error\"\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/DataSynchronizerAlgo.js\n\n\n\nclass DataSynchronizerAlgo_DataSynchronizerAlgo {\n  constructor(dataSources, timerResolution = 5) {\n    this.dataSourceMap = {};\n    this.tsRun = undefined;\n    this.timerResolution = timerResolution;\n    this.interval = null;\n    this.datasources = [];\n\n    for (let ds of dataSources) {\n      this.addDataSource(ds);\n    }\n  }\n\n  removeDataSource(dataSourceId) {\n    this.datasources = this.datasources.filter(elt => elt.id !== dataSourceId);\n    delete this.dataSourceMap[dataSourceId];\n  }\n\n  push(dataSourceId, dataBlocks) {}\n\n  getCurrentTimestamp() {\n    return this.tsRun;\n  }\n\n  processData() {\n    let tsRef = -1;\n    let clockTimeRef = performance.now(); // get reference start timestamp\n    // the reference start timestamp should the oldest one\n\n    let currentDs;\n\n    for (let currentDsId in this.dataSourceMap) {\n      currentDs = this.dataSourceMap[currentDsId];\n\n      if (currentDs.dataBuffer.length > 0) {\n        tsRef = tsRef === -1 || currentDs.dataBuffer[0].data.timestamp < tsRef ? currentDs.dataBuffer[0].data.timestamp : tsRef;\n      }\n    }\n\n    this.interval = setInterval(() => {\n      // 1) return the oldest data if any\n      while (this.computeNextData(tsRef, clockTimeRef));\n    }, this.timerResolution);\n    console.warn(`Started Algorithm ${this.constructor.name} with  tsRef=${new Date(tsRef).toISOString()}`);\n  }\n  /**\n   * Compute the next data if any. We return only 1 value for this iteration. If there are multiple values to return,\n   * we return only the oldest one.\n   * @param tsRef - the timestamp of the first data\n   * @param refClockTime - the absolute diff time really spent\n   */\n\n\n  computeNextData(tsRef, refClockTime) {\n    throw Error('Should be overridden');\n  }\n  /**\n   * Add dataSource to be synchronized\n   * @param {Datasource} dataSource - the dataSource to synchronize\n   */\n\n\n  addDataSource(dataSource) {\n    throw Error('Should be overridden');\n  }\n\n  checkVersion(datasource, dataBlock) {\n    throw Error('Should be overridden');\n  }\n\n  onData(dataSourceId, dataBlock) {}\n\n  checkStart() {}\n  /**\n   * Change the dataSource status\n   * @param {Status} status - the new status\n   * @param {String} dataSourceId - the corresponding dataSource id\n   */\n\n\n  setStatus(dataSourceId, status) {\n    throw Error('Should be overridden');\n  }\n\n  close() {\n    if (isDefined(this.interval)) {\n      clearInterval(this.interval);\n      this.interval = undefined;\n    }\n\n    console.log(\"Data synchronizer terminated successfully\");\n    this.onClose();\n  }\n\n  onStart() {}\n\n  onClose() {}\n\n}\n\n/* harmony default export */ var timesync_DataSynchronizerAlgo = (DataSynchronizerAlgo_DataSynchronizerAlgo);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/replay/DataSynchronizerAlgo.replay.js\n\n\n\n\nclass DataSynchronizerAlgo_replay_DataSynchronizerAlgoReplay extends timesync_DataSynchronizerAlgo {\n  constructor(dataSources, replaySpeed = 1, startTimestamp, endTimestamp, timerResolution = 5, version) {\n    super(dataSources, replaySpeed, timerResolution);\n    this.replaySpeed = replaySpeed;\n    this.startTimestamp = startTimestamp;\n    this.endTimestamp = endTimestamp;\n    this.version = version;\n  }\n\n  push(dataSourceId, dataBlocks) {\n    if (dataBlocks.length === 0) {\n      return;\n    }\n\n    if (dataSourceId in this.dataSourceMap) {\n      const ds = this.dataSourceMap[dataSourceId];\n      const lastData = dataBlocks[dataBlocks.length - 1];\n\n      if (!this.checkVersion(lastData)) {\n        console.warn(`[DataSynchronizer] incompatible version ${lastData.version} ~ ${this.version}, skipping data`);\n        return;\n      }\n\n      ds.dataBuffer.push(...dataBlocks);\n    }\n  }\n\n  processData() {\n    this.clockTimeRef = performance.now();\n    this.interval = setInterval(() => {\n      // 1) return the oldest data if any\n      while (this.computeNextData(this.startTimestamp, this.clockTimeRef)) {\n        this.checkEnd();\n      }\n\n      this.checkEnd();\n    }, this.timerResolution);\n    console.warn(`Started Replay Algorithm with tsRef=${new Date(this.startTimestamp).toISOString()}`);\n  }\n  /**\n   * Compute the next data if any. We return only 1 value for this iteration. If there are multiple values to return,\n   * we return only the oldest one.\n   * @param tsRef - the timestamp of the first data\n   * @param refClockTime - the absolute diff time really spent\n   */\n\n\n  computeNextData(tsRef, refClockTime) {\n    try {\n      let currentDs;\n      let currentDsToShift = null;\n      const dClock = (performance.now() - refClockTime) * this.replaySpeed;\n      let tsRun = tsRef + dClock;\n      let computeNext = false; // compute next data to return\n\n      for (let currentDsId in this.dataSourceMap) {\n        currentDs = this.dataSourceMap[currentDsId];\n\n        if (currentDs.skip) {\n          // if datasource is in current range\n          if (tsRun > currentDs.minTimestamp && tsRun < currentDs.maxTimestamp) {\n            currentDs.skip = false;\n          }\n        } // skip DatSource if out of time range\n\n\n        if (currentDs.skip) continue;\n\n        if (currentDs.dataBuffer.length > 0) {\n          const dTs = currentDs.dataBuffer[0].data.timestamp - tsRef; // we use an intermediate object to store the data to shift because we want to return the oldest one\n          // only\n\n          if (dTs <= dClock) {\n            // no other one to compare\n            if (currentDsToShift === null) {\n              currentDsToShift = currentDs;\n            } else {\n              // take the oldest data\n              currentDsToShift = currentDsToShift.dataBuffer[0].data.timestamp < currentDs.dataBuffer[0].data.timestamp ? currentDsToShift : currentDs;\n            }\n          }\n        }\n      } // finally pop the data from DS queue\n\n\n      if (currentDsToShift !== null) {\n        if (currentDsToShift.id in this.dataSourceMap) {\n          this.onData(currentDsToShift.id, currentDsToShift.dataBuffer.shift());\n        }\n\n        computeNext = true;\n      }\n\n      this.tsRun = tsRun;\n      return computeNext;\n    } catch (ex) {\n      console.log(ex);\n      return false;\n    }\n  }\n  /**\n   * Add dataSource to be synchronized\n   * @param {Datasource} dataSource - the dataSource to synchronize\n   */\n\n\n  addDataSource(dataSource) {\n    this.dataSourceMap[dataSource.id] = {\n      dataBuffer: [],\n      id: dataSource.id,\n      name: dataSource.name || dataSource.id,\n      status: Status.DISCONNECTED,\n      //MEANING Enabled, 0 = Disabled\n      minTimestamp: dataSource.minTimestamp,\n      maxTimestamp: dataSource.maxTimestamp,\n      skip: false\n    };\n\n    if (dataSource.maxTimestamp < this.getCurrentTimestamp() || dataSource.minTimestamp > this.getCurrentTimestamp()) {\n      this.dataSourceMap[dataSource.id].skip = true;\n      console.warn(`Skipping new added dataSource ${dataSource.id} because timeRange of the dataSource is not intersecting the synchronizer one`);\n    }\n\n    this.datasources.push(dataSource);\n  }\n\n  checkVersion(dataBlock) {\n    return dataBlock.version === this.version;\n  }\n  /**\n   * Change the dataSource status\n   * @param {Status} status - the new status\n   * @param {String} dataSourceId - the corresponding dataSource id\n   */\n\n\n  setStatus(dataSourceId, status) {\n    if (dataSourceId in this.dataSourceMap) {\n      this.dataSourceMap[dataSourceId].status = status;\n      console.warn(status + ' DataSource ' + dataSourceId + ' from the synchronizer ');\n    }\n\n    this.checkStart();\n  }\n\n  checkStart() {\n    if (!isDefined(this.interval)) {\n      let nbSkip = 0;\n      let nbFetch = 0;\n      let totalDataSources = Object.keys(this.dataSourceMap).length;\n\n      if (totalDataSources === 0) {\n        return;\n      }\n\n      let dataSource;\n\n      for (let dataSourceID in this.dataSourceMap) {\n        dataSource = this.dataSourceMap[dataSourceID];\n        dataSource.skip = this.startTimestamp < dataSource.minTimestamp || this.startTimestamp > dataSource.maxTimestamp;\n\n        if (dataSource.status === Status.FETCH_STARTED) {\n          nbFetch++;\n        } else if (dataSource.skip) {\n          nbSkip++;\n        }\n      }\n\n      console.warn(`[Synchronizer] Fetched ${nbFetch}/${totalDataSources} datasources`);\n      console.warn(`[Synchronizer] Skipped ${nbSkip}/${totalDataSources} datasources`);\n\n      if (nbFetch + nbSkip === totalDataSources) {\n        console.warn('Starting Replay Algorithm...');\n        this.processData();\n        this.onStart();\n      }\n    }\n  }\n\n  checkEnd() {\n    if (this.getCurrentTimestamp() > this.endTimestamp) {\n      this.onEnd();\n      this.reset();\n    }\n  }\n\n  reset() {\n    console.log('reset synchronizer algo');\n    this.close();\n\n    for (let currentDsId in this.dataSourceMap) {\n      this.resetDataSource(currentDsId);\n    }\n\n    this.tsRun = undefined;\n  }\n\n  resetDataSource(datasourceId) {\n    const currentDs = this.dataSourceMap[datasourceId];\n    currentDs.dataBuffer = [];\n    currentDs.status = Status.DISCONNECTED;\n    currentDs.version = undefined;\n    currentDs.skip = false;\n  }\n\n  removeDataSource(dataSourceId) {\n    super.removeDataSource(dataSourceId); // looking for next start Timestamp\n\n    let currentTimestamp = this.getCurrentTimestamp();\n    let min, ds;\n\n    for (let dsKey in this.dataSourceMap) {\n      ds = this.dataSourceMap[dsKey];\n\n      if (currentTimestamp >= ds.minTimestamp && currentTimestamp <= ds.maxTimestamp) {\n        // continue because this datasource is in the current range\n        return;\n      } else {\n        // otherwise\n        // looking for next range and reset algo\n        if (!min) {\n          min = ds.minTimestamp;\n        } else if (ds.minTimestamp < min) {\n          min = ds.minTimestamp;\n        }\n      }\n    }\n  }\n\n  setEndTimestamp(maxTimestamp) {\n    this.endTimestamp = maxTimestamp;\n  }\n\n  setTimeRange(startTimestamp, endTimestamp, replaySped) {\n    this.replaySpeed = replaySped;\n    this.startTimestamp = startTimestamp;\n    this.endTimestamp = endTimestamp;\n    this.clockTimeRef = performance.now();\n    this.reset();\n    this.checkStart();\n  }\n\n  onEnd() {}\n\n  onStart() {}\n\n}\n\n/* harmony default export */ var DataSynchronizerAlgo_replay = (DataSynchronizerAlgo_replay_DataSynchronizerAlgoReplay);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/timesync/replay/DataSynchronizer.replay.worker.js\n\n\n\n\n\nconst bcChannels = {};\nlet dataSynchronizerAlgo;\n\nlet init = false;\nlet dataSynchronizerBroadCastChannel = null;\nlet lastData = undefined;\nconst dataSources = {};\nlet timeBroadcastChannel = null;\nlet topicTime;\nlet topicData;\nlet DataSynchronizer_replay_worker_replaySpeed;\nlet masterTimeInterval = undefined;\nlet cTime;\nlet cId;\nlet lastTime = -1;\nlet version = -1;\nlet promise;\nlet DataSynchronizer_replay_worker_masterTimeRefreshRate;\nlet DataSynchronizer_replay_worker_startTimestamp;\nlet DataSynchronizer_replay_worker_endTimestamp;\nlet timerResolution;\n\nself.onmessage = async (event) => {\n    if(isDefined(promise)) {\n        await promise;\n    }\n    promise = handleMessage(event);\n}\n\nasync function handleMessage(event) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let sendResponse = true;\n            let data = undefined;\n            if (event.data.message === 'init') {\n                DataSynchronizer_replay_worker_replaySpeed = event.data.replaySpeed;\n                DataSynchronizer_replay_worker_startTimestamp = event.data.startTimestamp;\n                DataSynchronizer_replay_worker_endTimestamp = event.data.endTimestamp;\n                version = event.data.version;\n                timerResolution = event.data.timerResolution;\n\n                dataSynchronizerAlgo = new DataSynchronizerAlgo_replay(\n                    event.data.dataSources,\n                    DataSynchronizer_replay_worker_replaySpeed,\n                    DataSynchronizer_replay_worker_startTimestamp,\n                    DataSynchronizer_replay_worker_endTimestamp,\n                    event.data.timerResolution,\n                    version\n                );\n                dataSynchronizerAlgo.onClose = onClose;\n                dataSynchronizerAlgo.onData = onData;\n                init = true;\n                addDataSources(event.data.dataSources);\n                topicData = event.data.topics.data;\n                topicTime = event.data.topics.time;\n                initBroadcastChannel(topicData, topicTime);\n                DataSynchronizer_replay_worker_masterTimeRefreshRate = event.data.masterTimeRefreshRate;\n            } else if (event.data.message === 'add' && event.data.dataSources) {\n                console.log('Add datasource to synchronizer..')\n                addDataSources(event.data.dataSources);\n            } else if (event.data.message === 'connect') {\n                startMasterTimeInterval(DataSynchronizer_replay_worker_masterTimeRefreshRate);\n                dataSynchronizerAlgo.checkStart();\n                version = event.data.version;\n            } else if(event.data.message === 'is-connected') {\n                data = {\n                    message: 'is-connected',\n                    data: isDefined(masterTimeInterval) && isDefined(dataSynchronizerAlgo) && isDefined(dataSynchronizerAlgo.interval)\n                };\n            } else if (event.data.message === 'remove') {\n                console.log('Remove datasource from synchronizer algorithm..')\n                await removeDataSources(event.data.dataSourceIds);\n                if(dataSynchronizerAlgo instanceof DataSynchronizerAlgo_replay) {\n                    dataSynchronizerAlgo.endTimestamp = event.data.endTimestamp;\n                }\n            } else if (event.data.message === 'current-time') {\n                data = {\n                    message: 'current-time',\n                    data: dataSynchronizerAlgo.getCurrentTimestamp()\n                };\n            } else if (event.data.message === 'reset') {\n                DataSynchronizer_replay_worker_reset();\n            } else if (event.data.message === 'replay-speed') {\n                if (dataSynchronizerAlgo !== null) {\n                    DataSynchronizer_replay_worker_reset();\n                    dataSynchronizerAlgo.replaySpeed = event.data.replaySpeed;\n                }\n            }  else if (event.data.message === 'set-max-time') {\n                dataSynchronizerAlgo.setEndTimestamp(event.data.maxTimestamp);\n            } else if (event.data.message === 'time-range') {\n                setTimeRange(\n                    event.data.startTimestamp,\n                    event.data.endTimestamp,\n                    event.data.mode,\n                    event.data.replaySpeed,\n                    event.data.version,\n                    event.data.dataSources\n                )\n            } else if (event.data.message === 'data') {\n                checkMasterTime();\n                if (dataSynchronizerAlgo !== null) {\n                    dataSynchronizerAlgo.push(event.data.dataSourceId, event.data.data);\n                }\n            } else {\n                // skip response\n                sendResponse = false;\n            }\n            if (sendResponse) {\n                self.postMessage({\n                    message: event.data.message,\n                    data: data,\n                    messageId: event.data.messageId\n                });\n            }\n            resolve();\n        } catch (ex) {\n            reject(ex);\n        }\n    });\n}\nfunction setTimeRange(startTimestamp, endTimestamp, mode, replaySpeed, newVersion, dsArray) {\n    DataSynchronizer_replay_worker_reset();\n    version = newVersion;\n\n    dataSynchronizerAlgo = new DataSynchronizerAlgo_replay(\n        dsArray,\n        replaySpeed,\n        startTimestamp,\n        endTimestamp,\n        timerResolution,\n        version\n    );\n    dataSynchronizerAlgo.onEnd = onEnd;\n    dataSynchronizerAlgo.onStart = onStart;\n    dataSynchronizerAlgo.onClose = onClose;\n    dataSynchronizerAlgo.onData = onData;\n}\nfunction DataSynchronizer_replay_worker_reset() {\n    clearInterval(masterTimeInterval);\n    masterTimeInterval = undefined;\n    if(dataSynchronizerAlgo !== null) {\n        dataSynchronizerAlgo.reset();\n    }\n    timeBroadcastChannel.postMessage({\n        type: EventType.TIME_CHANGED\n    });\n    timeBroadcastChannel.postMessage({\n        type: EventType.CLOSED\n    });\n\n    dataSynchronizerBroadCastChannel.postMessage({\n        type: EventType.STATUS,\n        status: 'not_running',\n    });\n}\nfunction initBroadcastChannel(dataTopic, timeTopic) {\n    console.log('listen on topic ',dataTopic)\n\n    dataSynchronizerBroadCastChannel = new BroadcastChannel(dataTopic);\n    dataSynchronizerBroadCastChannel.onmessage = async (event) => {\n        if(event.data.type === EventType.DATA) {\n            checkMasterTime();\n            dataSynchronizerAlgo.push(event.data.dataSourceId,event.data.values);\n        } else if(event.data.type === EventType.STATUS) {\n            const dataSourceId = event.data.dataSourceId;\n            dataSynchronizerAlgo.setStatus(dataSourceId, event.data.status);\n            // bubble the message\n            if(dataSourceId in bcChannels) {\n                console.log(dataSources[dataSourceId].name + \": status=\" + event.data.status);\n                bcChannels[dataSourceId].postMessage(event.data);\n            }\n        }\n    }\n\n    timeBroadcastChannel = new BroadcastChannel(timeTopic);\n\n}\n\n/**\n *\n * @param dataSources\n */\nfunction addDataSources(dataSources) {\n    for(let dataSource of dataSources) {\n        addDataSource(dataSource);\n    }\n}\n\nfunction addDataSource(dataSource) {\n    dataSynchronizerAlgo.addDataSource(dataSource);\n    // create a BC to push back the synchronized data into the DATA Stream.\n    bcChannels[dataSource.id] = new BroadcastChannel(DATASOURCE_DATA_TOPIC + dataSource.id);\n\n    if(!(dataSource.id in dataSources)) {\n        dataSources[dataSource.id] = dataSource;\n    }\n}\n\n/**\n *\n * @param dataSourceIds\n */\nasync function removeDataSources(dataSourceIds) {\n    for(let dataSourceId of dataSourceIds) {\n        await removeDataSource(dataSourceId);\n    }\n}\n\nasync function removeDataSource(dataSourceId) {\n    await dataSynchronizerAlgo.removeDataSource(dataSourceId);\n    // create a BC to push back the synchronized data into the DATA Stream.\n    console.log('deleting BC for datasource '+dataSourceId);\n    delete bcChannels[dataSourceId];\n    delete dataSources[dataSourceId];\n}\n\nfunction checkMasterTime() {\n    if(!isDefined(masterTimeInterval)) {\n        startMasterTimeInterval(DataSynchronizer_replay_worker_masterTimeRefreshRate);\n    }\n}\nasync function onEnd() {\n    const masterTime = dataSynchronizerAlgo.getCurrentTimestamp();\n    clearInterval(masterTimeInterval);\n    masterTimeInterval = undefined;\n    // end at this time\n    timeBroadcastChannel.postMessage({\n        timestamp: masterTime,\n        type: EventType.MASTER_TIME\n    });\n    dataSynchronizerBroadCastChannel.postMessage({\n        type: EventType.STATUS,\n        status: 'not_running',\n    });\n}\n\nasync function onStart() {\n    checkMasterTime();\n}\n\nfunction onClose() {\n    timeBroadcastChannel.postMessage({\n        type: EventType.CLOSED\n    });\n    dataSynchronizerBroadCastChannel.postMessage({\n        type: EventType.STATUS,\n        status: 'not_running',\n    });\n}\n\nasync function onData(dataSourceId, dataBlock) {\n    if(dataBlock.version !== version) {\n        console.error('version are different:',dataBlock.version,version);\n        return;\n    }\n    lastData = {\n        dataSourceId: dataSourceId,\n        dataBlock: dataBlock,\n    };\n    bcChannels[dataSourceId].postMessage({\n            values: [dataBlock],\n            dataSourceId:dataSourceId,\n            type: EventType.DATA\n        }\n    );\n}\nself.onclose = function() {\n    dataSynchronizerAlgo.close();\n    console.log(\"Data Synchronizer has been terminated successfully\");\n    dataSynchronizerBroadCastChannel.postMessage({\n        type: EventType.STATUS,\n        status: 'not_running',\n    });\n}\n\nlet DataSynchronizer_replay_worker_masterTime;\nfunction startMasterTimeInterval(masterTimeRefreshRate) {\n    if (!isDefined(masterTimeInterval)) {\n        masterTimeInterval = setInterval(() => {\n            DataSynchronizer_replay_worker_masterTime = dataSynchronizerAlgo.getCurrentTimestamp();\n            if (isDefined(DataSynchronizer_replay_worker_masterTime)) {\n                timeBroadcastChannel.postMessage({\n                    timestamp: DataSynchronizer_replay_worker_masterTime,\n                    type: EventType.MASTER_TIME\n                });\n            }\n\n            if(isDefined(lastData)) {\n                cTime = lastData.dataBlock.data.timestamp;\n                cId = lastData.dataSourceId;\n\n                if ((cTime !== -1 && lastTime === -1) || (lastTime !== -1 && cTime !== lastTime)) { // does not send the same data twice\n                    timeBroadcastChannel.postMessage({\n                        timestamp: cTime,\n                        dataSourceId: cId,\n                        type: EventType.LAST_TIME\n                    });\n                }\n                lastTime = cTime;\n            }\n        }, masterTimeRefreshRate);\n        dataSynchronizerBroadCastChannel.postMessage({\n            type: EventType.STATUS,\n            status: 'running',\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);