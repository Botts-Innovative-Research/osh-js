(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return hasValue; });\n/* unused harmony export hex2rgb */\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* unused harmony export merge */\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      // Sinon on s’endort pendant le temps restant\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* unused harmony export TIME_SYNCHRONIZER_TOPIC */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\n/* unused harmony export MAGIC_END_PACKET */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';\nconst MAGIC_END_PACKET = 'magic-packet';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIiwiTUFHSUNfRU5EX1BBQ0tFVCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDO0FBRUEsTUFBTUMsZ0JBQWdCLEdBQUcsY0FBekIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IFRJTUVfU1lOQ0hST05JWkVSX1RPUElDID0gJ2RhdGEtc3luY2hyb25pemVyLXRpbWUtJztcblxuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX1RJTUVfVE9QSUMgPSAnZGF0YXNvdXJjZS10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuXG5leHBvcnQgY29uc3QgTUFHSUNfRU5EX1BBQ0tFVCA9ICdtYWdpYy1wYWNrZXQnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   * @param {Number} properties.timestamp - defines the timestamp of the data\n   * @param {Function} properties.getTimestamp - function which defines the timestamp of the data\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.dataSourcesToFn = undefined;\n    this.data = [];\n    this.props = {};\n    this.props.id = "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "m"])();\n    this.props.name = \'\';\n    this.props.description = \'\';\n    this.props.dataSourceId = \'\';\n    this.props.visible = true;\n    this.props.filter = true;\n    this.props.timestamp = 0;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.dataSourceId)) {\n      this.props.dataSourceId = properties.dataSourceId;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.timestamp)) {\n      this.props.timestamp = properties.timestamp;\n    }\n\n    this.initEvents();\n    const that = this;\n\n    if (this.checkFn("filter")) {\n      let fn = function (rec, timestamp, options) {\n        that.props.filter = that.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timestamp, options) {\n        return true;\n      };\n\n      let fn = async function (rec, timestamp, options) {\n        that.props.filter = await that.getFunc(\'filter\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = async function (rec, timestamp, options) {\n        that.props.visible = await that.getFunc(\'getVisible\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n\n    if (this.checkFn("getTimestamp")) {\n      let fn = async rec => {\n        that.props.timestamp = await that.getFunc(\'getTimestamp\')(rec);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getTimestamp\'), fn);\n    }\n  }\n\n  saveState() {\n    this.initialState = { ...this.props\n    };\n  }\n\n  restoreState() {\n    this.props = { ...this.initialState\n    };\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "l"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.properties.dataSourceId, \'dataSourceId\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      this.dataSourcesToFn[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  async setData(dataSourceId, records, options = {}) {\n    // store data into data props\n    this.data = [];\n    options.dataSourceId = dataSourceId;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n\n        for (let j = 0; j < records.length; j++) {\n          for (let i = 0; i < fnArr.length; i++) {\n            await fnArr[i](records[j].data, records[j].data.timestamp, options);\n\n            if (!this.props.filter) {\n              break;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.properties.dataSourceId, \'dataSourceId must be defined\');\n      return [this.properties.dataSourceId];\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || [this.properties.dataSourceId];\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init() {}\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.restoreState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(16);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Boolean} [properties.tls=false] - set TLS mode\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties) {\n    this.id = "DataSource-" + Object(Utils["m" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.currentRunningProperties = {};\n    this.eventSubscriptionMap = {};\n    this.initialized = false;\n    this.init = undefined;\n    this.messagesMap = {};\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n\n  getCurrentRunningProperties() {\n    return this.currentRunningProperties;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  getVersion() {\n    return 0;\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async createWorker(properties) {}\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  async updateProperties(properties) {\n    // save current running properties\n    this.currentRunningProperties = { ...this.properties,\n      ...properties\n    };\n    return new Promise(resolve => {\n      this.postMessage({\n        message: \'update-url\',\n        data: properties\n      }, resolve);\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    await this.checkInit();\n    await this.doConnect();\n  }\n\n  async initDataSource() {\n    return new Promise(async resolve => {\n      this.dataSourceWorker = await this.createWorker(this.properties);\n      this.handleWorkerMessage();\n      this.postMessage({\n        message: \'init\',\n        id: this.id,\n        properties: this.properties,\n        topic: this.getTopicId()\n      }, async message => {\n        // listen for Events to callback to subscriptions\n        const datasourceBroadcastChannel = new BroadcastChannel(this.getTopicId());\n\n        datasourceBroadcastChannel.onmessage = async message => {\n          this.handleMessage(message);\n        };\n\n        this.initialized = message;\n        resolve();\n      });\n    });\n  }\n\n  async handleMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n\n  async checkInit() {\n    return new Promise(async (resolve, reject) => {\n      if (!Object(Utils["k" /* isDefined */])(this.init)) {\n        this.init = this.initDataSource();\n      }\n\n      await this.init;\n      resolve();\n    });\n  }\n\n  async doConnect() {\n    return new Promise(async resolve => {\n      this.postMessage({\n        message: \'connect\'\n      }, resolve);\n    });\n  }\n\n  async isConnected() {\n    return new Promise(async resolve => {\n      await this.checkInit();\n      this.postMessage({\n        message: \'is-connected\'\n      }, resolve);\n    });\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  async disconnect() {\n    return new Promise(async resolve => {\n      await this.checkInit();\n      this.postMessage({\n        message: \'disconnect\'\n      }, resolve);\n    });\n  }\n\n  postMessage(props, Fn) {\n    const messageId = Object(Utils["m" /* randomUUID */])();\n    this.dataSourceWorker.postMessage({ ...props,\n      messageId: messageId\n    });\n\n    if (Object(Utils["k" /* isDefined */])(Fn)) {\n      this.messagesMap[messageId] = Fn;\n    }\n  }\n\n  handleWorkerMessage() {\n    this.dataSourceWorker.onmessage = event => {\n      const id = event.data.messageId;\n\n      if (id in this.messagesMap) {\n        this.messagesMap[id](event.data.data);\n        delete this.messagesMap[id];\n      }\n    };\n  }\n\n  async onDisconnect() {}\n\n  reset() {}\n\n}\n\n/* harmony default export */ var datasource_DataSource = (DataSource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeriesDataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeriesDataSource_TimeSeriesDataSource extends datasource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {String} [properties.minTime=properties.startTime] the min range time (ISO format)\n   * @param {String} [properties.maxTime=properties.endTime] the max range time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties) {\n    super(name, properties);\n    Object(Utils["c" /* assertDefined */])(properties, \'Some properties must be defined\');\n    Object(Utils["c" /* assertDefined */])(properties.startTime, \'startTime must must be defined\');\n    Object(Utils["c" /* assertDefined */])(properties.endTime, \'startTime must must be defined\');\n    this.timeSync = null;\n  }\n\n  getTimeTopicId() {\n    return Constants["b" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    return this.properties.minTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    return this.properties.maxTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    if (Object(Utils["k" /* isDefined */])(this.currentRunningProperties) && Object(Utils["k" /* isDefined */])(this.currentRunningProperties.replaySpeed)) {\n      return this.currentRunningProperties.replaySpeed;\n    } else if (Object(Utils["k" /* isDefined */])(this.properties.replaySpeed)) {\n      return this.properties.replaySpeed;\n    } else {\n      return 1.0;\n    }\n  } //----------- ASYNCHRONOUS FUNCTIONS -----------------//\n\n\n  async setDataSynchronizer(timeSync) {\n    return new Promise(async (resolve, reject) => {\n      await this.checkInit();\n      const topic = Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + timeSync.id;\n      this.timeSync = timeSync;\n      this.postMessage({\n        message: \'topic\',\n        topic: topic,\n        timeTopic: this.getTimeTopicId()\n      }, resolve);\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  async initDataSource(properties) {\n    await super.initDataSource(properties);\n    return new Promise(async resolve => {\n      this.postMessage({\n        message: \'topic\',\n        topic: this.getTopicId(),\n        timeTopic: this.getTimeTopicId()\n      }, async () => {\n        // listen for Events to callback to subscriptions\n        const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n        datasourceBroadcastChannel.onmessage = async message => {\n          this.handleTimeMessage(message);\n        };\n\n        resolve();\n      });\n    });\n  }\n\n  async handleTimeMessage(message) {\n    const type = message.data.type;\n\n    if (type in this.eventSubscriptionMap) {\n      for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n        this.eventSubscriptionMap[type][i](message.data);\n      }\n    }\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  async setTimeRange(startTime, endTime, replaySpeed, reconnect = false) {\n    let replay = {};\n\n    if (Object(Utils["k" /* isDefined */])(replaySpeed)) {\n      replay = {\n        replaySpeed: replaySpeed\n      };\n    }\n\n    return this.updateProperties({ ...this.currentRunningProperties,\n      startTime: startTime,\n      endTime: endTime,\n      ...replay,\n      reconnect: reconnect\n    });\n  }\n\n  async getCurrentTime() {\n    if (Object(Utils["k" /* isDefined */])(this.timeSync)) {\n      return this.timeSync.getCurrentTime();\n    } else {\n      return new Promise(resolve => {\n        this.postMessage({\n          message: \'last-timestamp\'\n        }, resolve);\n      });\n    }\n  }\n\n}\n\n/* harmony default export */ var datasource_TimeSeriesDataSource = (TimeSeriesDataSource_TimeSeriesDataSource);\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/sos/worker/SosGetResult.worker.js\nvar SosGetResult_worker = __webpack_require__(17);\nvar SosGetResult_worker_default = /*#__PURE__*/__webpack_require__.n(SosGetResult_worker);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/sos/SosGetResult.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\nclass SosGetResult_SosGetResult extends datasource_TimeSeriesDataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl - the endpoint url\n   * @param {String} properties.service - the service\n   * @param {String} properties.offeringID - the offeringID\n   * @param {String} properties.observedProperty - the observed property\n   * @param {String} properties.startTime - the start time (ISO format)\n   * @param {String} properties.endTime - the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1]  - the replay factor\n   * @param {Number} [properties.responseFormat] - the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      tls: false,\n      ...properties\n    });\n  }\n\n  async createWorker(properties) {\n    return new SosGetResult_worker_default.a();\n  }\n\n}\n\n/* harmony default export */ var sos_SosGetResult = __webpack_exports__["a"] = (SosGetResult_SosGetResult);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/resources/css/view.css\nvar view = __webpack_require__(30);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(16);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: \'data\',\n  TIME: \'time\',\n  STATUS: \'status\',\n  TIME_CHANGED: \'time-changed\'\n};\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(5);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/DataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass DataLayer_DataLayer extends Layer["a" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = \'data\';\n  }\n\n  async setData(dataSourceId, records, options) {\n    this.props.data = records;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.props.data\n    };\n  }\n\n}\n\n/* harmony default export */ var layer_DataLayer = (DataLayer_DataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\n\nclass View_View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = []; //this.divId = divId;\n\n    this.id = "view-" + Object(Utils["m" /* randomUUID */])();\n    this.css = "";\n\n    if (Object(Utils["k" /* isDefined */])(properties) && Object(Utils["k" /* isDefined */])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(Utils["c" /* assertDefined */])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["a" /* assertArray */])(properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["i" /* assertTrue */])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(Utils["k" /* isDefined */])(properties.container) ? properties.container : document.body;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(Utils["k" /* isDefined */])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(Utils["k" /* isDefined */])(properties)) {\n      if (Object(Utils["k" /* isDefined */])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(Utils["k" /* isDefined */])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(Utils["k" /* isDefined */])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(Utils["k" /* isDefined */])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {}\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(Utils["i" /* assertTrue */])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n      broadcastChannel.onmessage = async event => {\n        if (event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === EventType.DATA) {\n          const that = this; // transform the data\n\n          layer.setData(dataSourceId, event.data.values).then(() => {\n            // set the transformed data to the view\n            that.setData(dataSourceId, layer.getProps()); // store as last record\n\n            self.lastRec[dataSourceId] = event.data;\n          });\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(Constants["b" /* DATASOURCE_TIME_TOPIC */] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === EventType.TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ var view_View = __webpack_exports__["a"] = (View_View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9wcm90b2NvbC9TdGF0dXMuanM/ODg4YSJdLCJuYW1lcyI6WyJTdGF0dXMiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIiwiQ0xPU0VEX0VSUk9SIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUc7QUFDbEJDLFlBQVUsRUFBRSxZQURNO0FBRWxCQyxXQUFTLEVBQUcsV0FGTTtBQUdsQkMsY0FBWSxFQUFFLGNBSEk7QUFJbEJDLGNBQVksRUFBRTtBQUpJLENBQWYiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGNvbm5lY3Rpb24gc3RhdHVzLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG4gICAgQ09OTkVDVElORzogXCJjb25uZWN0aW5nXCIsXG4gICAgQ09OTkVDVEVEOiAgXCJjb25uZWN0ZWRcIixcbiAgICBESVNDT05ORUNURUQ6IFwiZGlzY29ubmVjdGVkXCIsXG4gICAgQ0xPU0VEX0VSUk9SOiBcImNsb3NlZC1lcnJvclwiXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "e9b0782ff39e8fd36b15.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3Nvcy93b3JrZXIvU29zR2V0UmVzdWx0Lndvcmtlci5qcz82NDM5Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLFNBQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZTliMDc4MmZmMzllOGZkMzZiMTUud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n   * Create the PointMarker\n   * @param {Object} properties\n   * @param {Number[]} properties.location - [x,y,z]\n   * @param {Number} [properties.orientation=0] -\n   * @param {String} properties.icon -\n   * @param {String} [properties.iconScale=1] - the icon scale size\n   * @param {String} [properties.iconColor="#000000"] - the icon color\n   * @param {Number[]} [properties.iconAnchor=[16,16]] -\n   * @param {Number[]} [properties.iconSize=[16,16]] -\n   * @param {Number} [properties.iconOpacity=0.75] - icon opacity\n   * @param {String} [properties.label=""] - the label to display\n   * @param {String} [properties.labelColor="#000000"] - color\n   * @param {String} [properties.labelOutlineColor=undefined] - color\n   * @param {String} [properties.labelBackgroundColor=undefined] -  color\n   * @param {Number} [properties.labelSize=16] -\n   * @param {Number} [properties.labelScale=1.0] - label scale\n   * @param {Number[]} [properties.labelOffset=[0,0]] -\n   * @param {Number} [properties.zIndex=0] - z-ordering of markers\n   * @param {Number} [properties.allowBillboardRotation=true] - allow billboard rotation\n   * @param {Function} [properties.getLocation] -\n   * @param {Function} [properties.getDescription] -\n   * @param {Function} [properties.getOrientation] -\n   * @param {Function} [properties.getIcon] -\n   * @param {Function} [properties.getIconColor] -\n   * @param {Function} [properties.getIconScale] -\n   * @param {Function} [properties.getLabel] -\n   * @param {Function} [properties.getLabelColor] -\n   * @param {Function} [properties.getLabelSize] -\n   * @param {Function} [properties.getZindex] - z-ordering of markers\n   * @param {Function} [properties.onLeftClick] - trigger onLeftClick marker event\n   * @param {Function} [properties.onRightClick] - trigger onRightClick marker event\n   * @param {Function} [properties.onHover] - trigger onHover marker event\n   * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   * @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n   * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n    this.props.location = null;\n    this.props.orientation = {\n      heading: 0\n    };\n    this.props.icon = null;\n    this.props.iconAnchor = [16, 16];\n    this.props.iconSize = [16, 16];\n    this.props.iconScale = 1.0;\n    this.props.iconColor = "#000000";\n    this.props.iconOpacity = 0.75;\n    this.props.label = null;\n    this.props.labelColor = "#000000";\n    this.props.labelOutlineColor = undefined;\n    this.props.labelBackgroundColor = undefined;\n    this.props.labelSize = 16;\n    this.props.labelScale = 1.0;\n    this.props.labelOffset = [0, 0];\n    this.props.zoomLevel = 15;\n    this.props.color = \'#000000\';\n    this.props.defaultToTerrainElevation = false;\n    this.props.zIndex = 0;\n    this.props.allowBillboardRotation = true;\n    this.props.options = {};\n    this.props.markerId = \'marker\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.defaultToTerrainElevation)) {\n      this.props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.location, "location");\n      this.props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.orientation, "orientation");\n      this.props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.icon, "icon");\n      this.props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      this.props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      this.props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.iconScale, "iconScale");\n      this.props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconColor, "iconColor");\n      this.props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconOpacity)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconOpacity, "iconOpacity");\n      this.props.iconOpacity = properties.iconOpacity;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.label, "label");\n      this.props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelColor, "labelColor");\n      this.props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelOutlineColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelOutlineColor, "labelOutlineColor");\n      this.props.labelOutlineColor = properties.labelOutlineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelBackgroundColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelBackgroundColor, "labelBackgroundColor");\n      this.props.labelBackgroundColor = properties.labelBackgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelSize, "labelSize");\n      this.props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelScale, "labelScale");\n      this.props.labelScale = properties.labelScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      this.props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.zoomLevel, "zoomLevel");\n      this.props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "e"])(properties.zIndex, "zIndex");\n      this.props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.allowBillboardRotation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertBoolean */ "b"])(properties.allowBillboardRotation, "allowBillboardRotation");\n      this.props.allowBillboardRotation = properties.allowBillboardRotation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.color)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.color, "color");\n      this.props.color = properties.color;\n    }\n\n    const that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getMarkerId")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.markerId = await that.getFunc(\'getMarkerId\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getMarkerId\'), fn);\n    }\n\n    if (this.checkFn("getLocation")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.location = await that.getFunc(\'getLocation\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.orientation = await that.getFunc(\'getOrientation\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.description = await that.getFunc(\'getDescription\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.icon = await that.getFunc(\'getIcon\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.iconColor = await that.getFunc(\'getIconColor\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.iconScale = await that.getFunc(\'getIconScale\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.label = await that.getFunc(\'getLabel\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.labelColor = await that.getFunc(\'getLabelColor\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.labelSize = await that.getFunc(\'getLabelSize\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = async (rec, timestamp, options) => {\n        that.props.zIndex = await that.getFunc(\'getZindex\')(rec, timestamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\n import MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id,\n         getFrameData: (rec) => rec.videoFrame,\n         getTimestamp: (rec) => rec.timestamp\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'videoData\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timestamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.showTime) && properties.showTime) {\n      this.timestamp = document.createElement("div");\n      this.timestamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timestamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  async setData(dataSourceId, data) {\n    if (data.type === \'videoData\') {\n      const values = data.values;\n\n      for (let i = 0; i < values.length; i++) {\n        this.updateVideo(values[i]);\n      }\n    }\n  }\n\n  updateVideo(props) {\n    let imgBlob = new Blob([props.frameData.data]);\n    let url = window.URL.createObjectURL(imgBlob);\n    let oldBlobURL = this.imgTag.src;\n    this.imgTag.src = url;\n\n    if (this.timestamp !== null) {\n      this.timestamp.innerHTML = new Date(props.timestamp).toISOString();\n    }\n\n    window.URL.revokeObjectURL(oldBlobURL);\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n  async getCanvas() {\n    return this.canvas;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(1);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(24);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js + 2 modules\nvar View = __webpack_require__(13);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {}; // map Layer id to array of corresponding draping\n\n    this.layerIdToDrapedImage = {};\n  }\n\n  async setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'drapedImage\') {\n        this.updateDrapedImage(d);\n      } else if (data.type === \'ellipse\') {\n        this.updateEllipse(d);\n      } else if (data.type === \'polygon\') {\n        this.updatePolygon(d);\n      } else if (data.type === \'coplanarPolygon\') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === \'frustum\') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  async addPolygonToLayer(props, polygon) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToPolygon)) {\n      this.layerIdToPolygon[props.id] = {};\n    }\n\n    this.layerIdToPolygon[props.id][props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  async addMarkerToLayer(props, markerObject) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToMarkers)) {\n      this.layerIdToMarkers[props.id] = {};\n    }\n\n    this.layerIdToMarkers[props.id][props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  async addPolylineToLayer(props, polylineObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToPolylines)) {\n      this.layerIdToPolylines[props.id] = {};\n    }\n\n    this.layerIdToPolylines[props.id][props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  async addEllipseToLayer(props, ellipseObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      this.layerIdToEllipsoids[props.id] = {};\n    }\n\n    this.layerIdToEllipsoids[props.id][props.ellipseId] = ellipseObject;\n  }\n  /**\n   * Associate a drapedImageId to a Layer for a fast lookup\n   * @protected\n   * @param {ImageDraping.props} layer - the Layer object\n   * @param {Object} drapedImageObject - the Map drapedImage object\n   */\n\n\n  async addDrapedImageToLayer(props, drapedImageObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToDrapedImage)) {\n      this.layerIdToDrapedImage[props.id] = {};\n    }\n\n    this.layerIdToDrapedImage[props.id][props.drapedImageId] = drapedImageObject;\n  }\n\n  async addFrustumToLayer(props, frustum) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToFrustum)) {\n      this.layerIdToFrustum[props.id] = {};\n    }\n\n    this.layerIdToFrustum[props.id][props.frustumId] = frustum;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      for (let polygonId in this.layerIdToPolygon[id]) {\n        array.push(this.layerIdToPolygon[id][polygonId]);\n      }\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.id in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.id][props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.id in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.id][props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      for (let markerId in this.layerIdToMarkers[id]) {\n        array.push(this.layerIdToMarkers[id][markerId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      for (let polylineId in this.layerIdToPolylines[id]) {\n        array.push(this.layerIdToPolylines[id][polylineId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      for (let ellipseId in this.layerIdToEllipsoids[id]) {\n        array.push(this.layerIdToEllipsoids[id][ellipseId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.id][props.ellipseId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.id][props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.id][props.polylineId];\n  }\n  /**\n   * Get the draped image associate to the Layer\n   * @protected\n   * @param {ImageDrapingLayer.props} layer - the Layer Object\n   */\n\n\n  getDrapedImage(props) {\n    if (!(props.id in this.layerIdToDrapedImage)) {\n      return null;\n    }\n\n    return this.layerIdToDrapedImage[props.id][props.drapedImageId];\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      for (let frustumId in this.layerIdToFrustum[id]) {\n        array.push(this.layerIdToFrustum[id][frustumId]);\n      }\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.id in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.id][props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    super.removeAllFromLayer(layer); // check for marker\n\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeFrustums(layer);\n  }\n\n  removePolygons(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.polygonId)) {\n      const polygonMap = this.layerIdToPolygon[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(polygonMap)) {\n        for (let polygonId in polygonMap) {\n          const polygon = polygonMap[polygonId];\n          this.removePolygonFromLayer(polygon);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[layer.props.id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.markerId)) {\n      const markersMap = this.layerIdToMarkers[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(markersMap)) {\n        for (let markerId in markersMap) {\n          const marker = markersMap[markerId];\n          this.removeMarkerFromLayer(marker);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[layer.props.id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    if (Object(Utils["k" /* isDefined */])(ellipse.props.ellipseId)) {\n      const ellipseMap = this.layerIdToEllipsoids[ellipse.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(ellipseMap)) {\n        for (let ellipseId in ellipseMap) {\n          const ellipse = ellipseMap[ellipseId];\n          this.removeEllipseFromLayer(ellipse);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[ellipse.props.id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    if (Object(Utils["k" /* isDefined */])(polyline.props.polylineId)) {\n      const polylinesMap = this.layerIdToPolylines[polyline.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(polylinesMap)) {\n        for (let polylineId in polylinesMap) {\n          const polyline = polylinesMap[polylineId];\n          this.removePolylineFromLayer(polyline);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[polyline.props.id];\n    }\n  }\n  /**\n   * Remove the drapedImage corresponding to a ImageDraping Layer\n   * @param {ImageDraping} imageDraping - the layer to remove the drapedImage from\n   */\n\n\n  removeDrapedImages(drapedImage) {\n    if (Object(Utils["k" /* isDefined */])(drapedImage.props.drapedImageId)) {\n      const drapedImageMap = this.layerIdToDrapedImage[drapedImage.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(drapedImageMap)) {\n        for (let drapedImageId in drapedImageMap) {\n          const drapedImage = drapedImageMap[drapedImageId];\n          this.removeDrapedImageFromLayer(drapedImage);\n        }\n      } // remove drapedImage ids from Layer map\n\n\n      delete this.layerIdToDrapedImage[drapedImage.props.id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.frustumId)) {\n      const frustumMap = this.layerIdToFrustum[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(frustumMap)) {\n        for (let frustumId in frustumMap) {\n          const frustum = frustumMap[frustumId];\n          this.removeFrustumFromLayer(frustum);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[layer.props.id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a draped image from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} drapedImage - The Map drapedImage object\n   */\n\n\n  removeDrapedImageFromLayer(drapedImage) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["k" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["k" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["k" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  async updateMarker() {}\n\n  async updatePolyline() {}\n\n  async updatePolygon() {}\n\n  async updateEllipse() {}\n\n  async updateCoPlanarPolygon() {}\n\n  async updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\', \'polygon\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["k" /* isDefined */])(options)) {\n      if (Object(Utils["k" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["k" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["k" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["k" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["k" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["k" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["k" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["c" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["k" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations[properties.polylineId];\n    let polylinePoints = [];\n\n    if (Object(Utils["k" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  async updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["k" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on(\'click\', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on(\'contextmenu\', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on(\'mouseover\', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["k" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  async updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils["k" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations[props.polylineId];\n\n      if (Object(Utils["k" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  async updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils["k" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices[props.polygonId];\n      let polygonPoints = [];\n\n      if (Object(Utils["k" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices[properties.polygonId];\n    let polygonPoints = [];\n\n    if (Object(Utils["k" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(5);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/BinaryDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import BinaryDataLayer from \'osh-js/core/ui/layer/BinaryDataLayer\';\n *\n */\n\nclass BinaryDataLayer_BinaryDataLayer extends Layer["a" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = \'binaryData\';\n    this.props.dataId = Object(Utils["m" /* randomUUID */])();\n    this.props.frameData = undefined;\n\n    if (Object(Utils["k" /* isDefined */])(properties.frameData)) {\n      this.props.frameData = properties.frameData;\n    }\n\n    let that = this;\n\n    if (Object(Utils["k" /* isDefined */])(properties.getFrameData)) {\n      let fn = async rec => {\n        that.props.frameData = await that.getFunc(\'getFrameData\')(rec);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getFrameData\'), fn);\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ var layer_BinaryDataLayer = (BinaryDataLayer_BinaryDataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/VideoDataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2022 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends BinaryDataLayer\n * @example\n *\n * import VideoDataLayer from \'osh-js/core/ui/layer/VideoDataLayer\';\n *\n */\n\nclass VideoDataLayer_VideoDataLayer extends layer_BinaryDataLayer {\n  constructor(properties) {\n    super(properties);\n    this.type = \'videoData\';\n    this.props.roll = 0;\n\n    if (Object(Utils["k" /* isDefined */])(properties.roll)) {\n      this.props.roll = properties.roll;\n    }\n\n    let that = this;\n\n    if (Object(Utils["k" /* isDefined */])(properties.getRoll)) {\n      let fn = async rec => {\n        that.props.roll = await that.getFunc(\'getRoll\')(rec);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getRoll\'), fn);\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ var layer_VideoDataLayer = __webpack_exports__["a"] = (VideoDataLayer_VideoDataLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9CaW5hcnlEYXRhTGF5ZXIuanM/MzMzYyIsIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9WaWRlb0RhdGFMYXllci5qcz9kZjZhIl0sIm5hbWVzIjpbIkJpbmFyeURhdGFMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsInByb3BzIiwiZGF0YUlkIiwicmFuZG9tVVVJRCIsImZyYW1lRGF0YSIsInVuZGVmaW5lZCIsImlzRGVmaW5lZCIsInRoYXQiLCJnZXRGcmFtZURhdGEiLCJmbiIsInJlYyIsImdldEZ1bmMiLCJhZGRGbiIsImdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSIsInNhdmVTdGF0ZSIsIlZpZGVvRGF0YUxheWVyIiwicm9sbCIsImdldFJvbGwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1BLCtCQUFOLFNBQThCQyx3QkFBOUIsQ0FBb0M7QUFFaENDLGFBQVcsQ0FBQ0MsVUFBRCxFQUFhO0FBQ3BCLFVBQU1BLFVBQU47QUFDQSxTQUFLQyxJQUFMLEdBQVksWUFBWjtBQUNBLFNBQUtDLEtBQUwsQ0FBV0MsTUFBWCxHQUFvQkMsbUNBQVUsRUFBOUI7QUFDQSxTQUFLRixLQUFMLENBQVdHLFNBQVgsR0FBdUJDLFNBQXZCOztBQUVBLFFBQUlDLGtDQUFTLENBQUNQLFVBQVUsQ0FBQ0ssU0FBWixDQUFiLEVBQW9DO0FBQ2hDLFdBQUtILEtBQUwsQ0FBV0csU0FBWCxHQUF1QkwsVUFBVSxDQUFDSyxTQUFsQztBQUNIOztBQUVELFFBQUlHLElBQUksR0FBRyxJQUFYOztBQUVBLFFBQUlELGtDQUFTLENBQUNQLFVBQVUsQ0FBQ1MsWUFBWixDQUFiLEVBQXVDO0FBQ25DLFVBQUlDLEVBQUUsR0FBRyxNQUFPQyxHQUFQLElBQWU7QUFDcEJILFlBQUksQ0FBQ04sS0FBTCxDQUFXRyxTQUFYLEdBQXVCLE1BQU1HLElBQUksQ0FBQ0ksT0FBTCxDQUFhLGNBQWIsRUFBNkJELEdBQTdCLENBQTdCO0FBQ0gsT0FGRDs7QUFHQSxXQUFLRSxLQUFMLENBQVdMLElBQUksQ0FBQ00sMkJBQUwsQ0FBaUMsY0FBakMsQ0FBWCxFQUE2REosRUFBN0Q7QUFDSDs7QUFFRCxTQUFLSyxTQUFMO0FBQ0g7O0FBdEIrQjs7QUF3QnJCbEIseUZBQWYsRTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1tQiw2QkFBTixTQUE2Qm5CLHFCQUE3QixDQUE2QztBQUV6Q0UsYUFBVyxDQUFDQyxVQUFELEVBQWE7QUFDcEIsVUFBTUEsVUFBTjtBQUNBLFNBQUtDLElBQUwsR0FBWSxXQUFaO0FBQ0EsU0FBS0MsS0FBTCxDQUFXZSxJQUFYLEdBQWtCLENBQWxCOztBQUVBLFFBQUlWLGtDQUFTLENBQUNQLFVBQVUsQ0FBQ2lCLElBQVosQ0FBYixFQUErQjtBQUMzQixXQUFLZixLQUFMLENBQVdlLElBQVgsR0FBa0JqQixVQUFVLENBQUNpQixJQUE3QjtBQUNIOztBQUVELFFBQUlULElBQUksR0FBRyxJQUFYOztBQUVBLFFBQUlELGtDQUFTLENBQUNQLFVBQVUsQ0FBQ2tCLE9BQVosQ0FBYixFQUFrQztBQUM5QixVQUFJUixFQUFFLEdBQUcsTUFBT0MsR0FBUCxJQUFlO0FBQ3BCSCxZQUFJLENBQUNOLEtBQUwsQ0FBV2UsSUFBWCxHQUFrQixNQUFNVCxJQUFJLENBQUNJLE9BQUwsQ0FBYSxTQUFiLEVBQXdCRCxHQUF4QixDQUF4QjtBQUNILE9BRkQ7O0FBR0EsV0FBS0UsS0FBTCxDQUFXTCxJQUFJLENBQUNNLDJCQUFMLENBQWlDLFNBQWpDLENBQVgsRUFBd0RKLEVBQXhEO0FBQ0g7O0FBRUQsU0FBS0ssU0FBTDtBQUNIOztBQXJCd0M7O0FBdUI5QkMsaUhBQWYiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIyIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBMYXllciBmcm9tIFwiLi9MYXllci5qc1wiO1xuaW1wb3J0IHtpc0RlZmluZWQsIHJhbmRvbVVVSUR9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIExheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBCaW5hcnlEYXRhTGF5ZXIgZnJvbSAnb3NoLWpzL2NvcmUvdWkvbGF5ZXIvQmluYXJ5RGF0YUxheWVyJztcbiAqXG4gKi9cbmNsYXNzIEJpbmFyeURhdGFMYXllciBleHRlbmRzIExheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdiaW5hcnlEYXRhJztcbiAgICAgICAgdGhpcy5wcm9wcy5kYXRhSWQgPSByYW5kb21VVUlEKCk7XG4gICAgICAgIHRoaXMucHJvcHMuZnJhbWVEYXRhID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5mcmFtZURhdGEpKXtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZnJhbWVEYXRhID0gcHJvcGVydGllcy5mcmFtZURhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmdldEZyYW1lRGF0YSkpe1xuICAgICAgICAgICAgbGV0IGZuID0gYXN5bmMgKHJlYykgPT4ge1xuICAgICAgICAgICAgICAgIHRoYXQucHJvcHMuZnJhbWVEYXRhID0gYXdhaXQgdGhhdC5nZXRGdW5jKCdnZXRGcmFtZURhdGEnKShyZWMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEZyYW1lRGF0YScpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNhdmVTdGF0ZSgpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJpbmFyeURhdGFMYXllcjtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjIgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHtpc0RlZmluZWR9IGZyb20gXCIuLi8uLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IEJpbmFyeURhdGFMYXllciBmcm9tIFwiLi9CaW5hcnlEYXRhTGF5ZXJcIjtcblxuLyoqXG4gKiBAZXh0ZW5kcyBCaW5hcnlEYXRhTGF5ZXJcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFZpZGVvRGF0YUxheWVyIGZyb20gJ29zaC1qcy9jb3JlL3VpL2xheWVyL1ZpZGVvRGF0YUxheWVyJztcbiAqXG4gKi9cbmNsYXNzIFZpZGVvRGF0YUxheWVyIGV4dGVuZHMgQmluYXJ5RGF0YUxheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICd2aWRlb0RhdGEnO1xuICAgICAgICB0aGlzLnByb3BzLnJvbGwgPSAwO1xuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5yb2xsKSl7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnJvbGwgPSBwcm9wZXJ0aWVzLnJvbGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmdldFJvbGwpKXtcbiAgICAgICAgICAgIGxldCBmbiA9IGFzeW5jIChyZWMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLnJvbGwgPSBhd2FpdCB0aGF0LmdldEZ1bmMoJ2dldFJvbGwnKShyZWMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFJvbGwnKSwgZm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zYXZlU3RhdGUoKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBWaWRlb0RhdGFMYXllcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n')},,,,,,,function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(31);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"759d7ef5\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBc0c7QUFDNUg7QUFDQSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTJHO0FBQzdILCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI3NTlkN2VmNVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUFpRztBQUMzSTtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vc2gtdmlldyB7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n')}]]);