(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return hasValue; });\n/* unused harmony export hex2rgb */\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertBoolean; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return assertString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/* unused harmony export merge */\n/* unused harmony export rgbaToArray */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      // Sinon on s’endort pendant le temps restant\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target) Object.assign(source[key], merge(target[key], source[key]));\n  } // Join `target` and modified `source`\n\n\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\'(\') + 1;\n  let endIdxValue = str.indexOf(\')\');\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\',\').map(Number);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* unused harmony export TIME_SYNCHRONIZER_TOPIC */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgREFUQV9TWU5DSFJPTklaRVJfVE9QSUMgPSAnZGF0YS1zeW5jaHJvbml6ZXItJztcbmV4cG9ydCBjb25zdCBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX0RBVEFfVE9QSUMgPSAnZGF0YXNvdXJjZS1kYXRhLSc7XG5leHBvcnQgY29uc3QgREFUQVNPVVJDRV9USU1FX1RPUElDID0gJ2RhdGFzb3VyY2UtdGltZS0nO1xuXG5leHBvcnQgY29uc3QgRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDID0gJ2ZmbXBlZy1kZWNvZGUtJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected",\n  CLOSED_ERROR: "closed-error"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9wcm90b2NvbC9TdGF0dXMuanM/ODg4YSJdLCJuYW1lcyI6WyJTdGF0dXMiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIiwiQ0xPU0VEX0VSUk9SIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUc7QUFDbEJDLFlBQVUsRUFBRSxZQURNO0FBRWxCQyxXQUFTLEVBQUcsV0FGTTtBQUdsQkMsY0FBWSxFQUFFLGNBSEk7QUFJbEJDLGNBQVksRUFBRTtBQUpJLENBQWYiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGNvbm5lY3Rpb24gc3RhdHVzLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG4gICAgQ09OTkVDVElORzogXCJjb25uZWN0aW5nXCIsXG4gICAgQ09OTkVDVEVEOiAgXCJjb25uZWN0ZWRcIixcbiAgICBESVNDT05ORUNURUQ6IFwiZGlzY29ubmVjdGVkXCIsXG4gICAgQ0xPU0VEX0VSUk9SOiBcImNsb3NlZC1lcnJvclwiXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   * @param {boolean} properties.visible - defines if the layer is visible\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.dataSourcesToFn = undefined;\n    this.data = [];\n    this.props = {};\n    this.props.id = "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "m"])();\n    this.props.name = \'\';\n    this.props.description = \'\';\n    this.props.dataSourceId = \'\';\n    this.props.visible = true;\n    this.props.filter = true;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.dataSourceId)) {\n      this.props.dataSourceId = properties.dataSourceId;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.visible)) {\n      this.props.visible = properties.visible;\n    }\n\n    this.initEvents();\n    const that = this;\n\n    if (this.checkFn("filter")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.filter = that.getFunc(\'filter\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'filter\'), fn);\n    } else {\n      this.properties.filter = function (rec, timeStamp, options) {\n        return true;\n      };\n\n      let fn = function (rec, timeStamp, options) {\n        that.props.filter = that.getFunc(\'filter\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'filter\'), fn);\n    }\n\n    if (this.checkFn("getVisible")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.visible = that.getFunc(\'getVisible\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getVisible\'), fn);\n    }\n  }\n\n  saveState() {\n    this.initialState = { ...this.props\n    };\n  }\n\n  restoreState() {\n    this.props = { ...this.initialState\n    };\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "l"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.properties.dataSourceId, \'dataSourceId\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      this.dataSourcesToFn[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  setData(dataSourceId, records, options = {}) {\n    // store data into data props\n    this.data = [];\n    options.dataSourceId = dataSourceId;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      if (dataSourceId in this.dataSourcesToFn) {\n        let fnArr = this.dataSourcesToFn[dataSourceId];\n\n        outer: for (let j = 0; j < records.length; j++) {\n          inner: for (let i = 0; i < fnArr.length; i++) {\n            fnArr[i](records[j].data, records[j].timeStamp, options);\n\n            if (!this.props.filter) {\n              break inner;\n            }\n          }\n\n          if (this.props.filter) {\n            this.data.push({ ...this.props\n            });\n          }\n        }\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "c"])(this.properties.dataSourceId, \'dataSourceId must be defined\');\n      return [this.properties.dataSourceId];\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || [this.properties.dataSourceId];\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init() {}\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.restoreState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/resources/css/view.css\nvar view = __webpack_require__(32);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(11);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: \'data\',\n  TIME: \'time\',\n  STATUS: \'status\',\n  TIME_CHANGED: \'time-changed\'\n};\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(12);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/DataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass DataLayer_DataLayer extends Layer["a" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = \'data\';\n  }\n\n  setData(dataSourceId, records, options) {\n    this.props.data = records;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.props.data\n    };\n  }\n\n}\n\n/* harmony default export */ var layer_DataLayer = (DataLayer_DataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\n\nclass View_View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = []; //this.divId = divId;\n\n    this.id = "view-" + Object(Utils["m" /* randomUUID */])();\n    this.css = "";\n\n    if (Object(Utils["k" /* isDefined */])(properties) && Object(Utils["k" /* isDefined */])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(Utils["c" /* assertDefined */])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["a" /* assertArray */])(properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["i" /* assertTrue */])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.properties = properties;\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(Utils["k" /* isDefined */])(properties.container) ? properties.container : document.body;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(Utils["k" /* isDefined */])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(Utils["k" /* isDefined */])(properties)) {\n      if (Object(Utils["k" /* isDefined */])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(Utils["k" /* isDefined */])(properties.dataSourceId)) {\n        this.addLayer(new layer_DataLayer({\n          dataSourceId: properties.dataSourceId\n        }));\n      }\n\n      if (Object(Utils["k" /* isDefined */])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(Utils["k" /* isDefined */])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(Utils["k" /* isDefined */])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {}\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(Utils["i" /* assertTrue */])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n      broadcastChannel.onmessage = event => {\n        if (event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].CLOSED_ERROR) {\n          self.reset();\n        } else if (event.data.type === EventType.DATA) {\n          // transform the data\n          layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          this.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n\n      const timeBroadcastChannel = new BroadcastChannel(Constants["b" /* DATASOURCE_TIME_TOPIC */] + dataSourceId);\n\n      timeBroadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === EventType.TIME_CHANGED) {\n          self.reset(); // on time changed\n        }\n      };\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {\n    this.removeAllFromLayers();\n  }\n\n}\n\n/* harmony default export */ var view_View = __webpack_exports__["a"] = (View_View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(2);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(11);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2021 Georobotix Inc. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    this.id = "DataSource-" + Object(Utils["m" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.dataSourceWorker = worker;\n    this.currentRunningProperties = {};\n    this.eventSubscriptionMap = {};\n    this.initDataSource(properties);\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    this.dataSourceWorker.postMessage({\n      message: \'init\',\n      id: this.id,\n      properties: JSON.stringify(properties),\n      topic: this.getTopicId()\n    }); // listen for Events to callback to subscriptions\n\n    const datasourceBroadcastChannel = new BroadcastChannel(this.getTopicId());\n\n    datasourceBroadcastChannel.onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    };\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  disconnect() {\n    this.dataSourceWorker.postMessage({\n      message: \'disconnect\'\n    });\n  }\n  /**\n   * Trigger when the datasource is disconnected for some reason.\n   */\n\n\n  onDisconnect() {\n    return new Promise(resolve => {\n      new BroadcastChannel(this.getTopicId()).onmessage = event => {\n        if (event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          resolve();\n        }\n      };\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    this.dataSourceWorker.postMessage({\n      message: \'connect\'\n    });\n    return this.isConnected();\n  }\n\n  async isConnected() {\n    const promise = new Promise(resolve => {\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.onmessage = event => {\n          if (event.data.message === \'is-connected\') {\n            resolve(event.data.data);\n          }\n        };\n      }\n    });\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'is-connected\'\n      });\n    }\n\n    return promise;\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    // save current running properties\n    this.currentRunningProperties = { ...this.properties,\n      ...properties\n    };\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'update-url\',\n        data: properties\n      });\n    }\n  }\n\n  getCurrentRunningProperties() {\n    return this.currentRunningProperties;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n  getVersion() {\n    return 0;\n  }\n\n  subscribe(fn, eventTypes) {\n    // associate function to eventType\n    for (let i = 0; i < eventTypes.length; i++) {\n      if (!(eventTypes[i] in this.eventSubscriptionMap)) {\n        this.eventSubscriptionMap[eventTypes[i]] = [];\n      }\n\n      this.eventSubscriptionMap[eventTypes[i]].push(fn);\n    }\n  }\n\n}\n\n/* harmony default export */ var datasource_DataSource = (DataSource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeriesDataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeriesDataSource_TimeSeriesDataSource extends datasource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {String} [properties.minTime=properties.startTime] the min range time (ISO format)\n   * @param {String} [properties.maxTime=properties.endTime] the max range time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    super(name, properties, worker);\n    Object(Utils["c" /* assertDefined */])(properties, \'Some properties must be defined\');\n    Object(Utils["c" /* assertDefined */])(properties.startTime, \'startTime must must be defined\');\n    Object(Utils["c" /* assertDefined */])(properties.endTime, \'startTime must must be defined\');\n    this.timeSync = null;\n  }\n\n  setDataSynchronizer(timeSync) {\n    this.timeSync = timeSync;\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.timeSync.id,\n      timeTopic: this.getTimeTopicId()\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    super.initDataSource(properties);\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: this.getTopicId(),\n      timeTopic: this.getTimeTopicId()\n    }); // listen for Events to callback to subscriptions\n\n    const datasourceBroadcastChannel = new BroadcastChannel(this.getTimeTopicId());\n\n    datasourceBroadcastChannel.onmessage = message => {\n      const type = message.data.type;\n\n      if (type in this.eventSubscriptionMap) {\n        for (let i = 0; i < this.eventSubscriptionMap[type].length; i++) {\n          this.eventSubscriptionMap[type][i](message.data);\n        }\n      }\n    };\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  setTimeRange(startTime, endTime, replaySpeed, reconnect = false) {\n    let replay = {};\n\n    if (Object(Utils["k" /* isDefined */])(replaySpeed)) {\n      replay = {\n        replaySpeed: replaySpeed\n      };\n    }\n\n    this.updateProperties({ ...this.currentRunningProperties,\n      startTime: startTime,\n      endTime: endTime,\n      ...replay,\n      reconnect: reconnect\n    });\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    return this.properties.minTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    return this.properties.maxTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    if (Object(Utils["k" /* isDefined */])(this.currentRunningProperties) && Object(Utils["k" /* isDefined */])(this.currentRunningProperties.replaySpeed)) {\n      return this.currentRunningProperties.replaySpeed;\n    } else if (Object(Utils["k" /* isDefined */])(this.properties.replaySpeed)) {\n      return this.properties.replaySpeed;\n    } else {\n      return 1.0;\n    }\n  }\n\n  async getCurrentTime() {\n    if (Object(Utils["k" /* isDefined */])(this.timeSync)) {\n      return this.timeSync.getCurrentTime();\n    } else {\n      const promise = new Promise(resolve => {\n        if (this.dataSourceWorker !== null) {\n          this.dataSourceWorker.onmessage = event => {\n            if (event.data.message === \'last-timestamp\') {\n              resolve(event.data.data);\n            }\n          };\n        }\n      });\n\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.postMessage({\n          message: \'last-timestamp\'\n        });\n      }\n\n      return promise;\n    }\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay speed\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    super.updateProperties(properties);\n  }\n\n  getTimeTopicId() {\n    return Constants["b" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n\n}\n\n/* harmony default export */ var datasource_TimeSeriesDataSource = __webpack_exports__["a"] = (TimeSeriesDataSource_TimeSeriesDataSource);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides generic parsing for JSON response.\n *\n * @extends DataSource\n * @example\n * import SosGetResultJson from \'core/datasource/SosGetResultJson.js\';\n *\n * let androidPhoneGpsDataSource = new SosGetResultJson("android-GPS", {\n    protocol: "ws",\n    service: "SOS",\n    endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n    offeringID: "urn:android:device:060693280a28e015-sos",\n    observedProperty: "http://sensorml.com/ont/swe/property/Location",\n    startTime: "2015-02-16T07:58:00Z",\n    endTime: "2015-02-16T08:09:00Z",\n    replaySpeed: replaySpeed+"",\n    bufferingTime: 1000,\n    timeShift: -16000\n  });\n */\n\nclass SosGetResultJson extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl - the endpoint url\n   * @param {String} properties.service - the service\n   * @param {String} properties.offeringID - the offeringID\n   * @param {String} properties.observedProperty - the observed property\n   * @param {String} properties.startTime - the start time (ISO format)\n   * @param {String} properties.endTime - the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1]  - the replay factor\n   * @param {Number} [properties.responseFormat] - the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL1Nvc0dldFJlc3VsdEpzb24uanM/MTE3NCJdLCJuYW1lcyI6WyJTb3NHZXRSZXN1bHRKc29uIiwiVGltZVNlcmllc0RhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwidGltZVNoaWZ0IiwicmVjb25uZWN0VGltZW91dCIsIlNvc0dldFJlc3VsdEpzb25Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLGdCQUFOLFNBQStCQyx3RUFBL0IsQ0FBb0Q7QUFDaEQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxhQUFXLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQjtBQUMxQixVQUFNRCxJQUFOLEVBQVk7QUFDUkUsZUFBUyxFQUFDLENBREY7QUFFUkMsc0JBQWdCLEVBQUUsT0FBTyxDQUZqQjtBQUVvQjtBQUM1QixTQUFHRjtBQUhLLEtBQVosRUFJRyxJQUFJRywwRUFBSixFQUpIO0FBS0g7O0FBeEIrQzs7QUEyQnJDUCx5RUFBZiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG5pbXBvcnQgVGltZVNlcmllc0RhdGFTb3VyY2UgZnJvbSAnLi9UaW1lU2VyaWVzRGF0YVNvdXJjZS5qcyc7XG5pbXBvcnQgU29zR2V0UmVzdWx0SnNvbldvcmtlciBmcm9tICcuL3dvcmtlcnMvU29zR2V0UmVzdWx0SnNvbi53b3JrZXIuanMnO1xuXG4vKipcbiAqIFRoaXMgZGF0YXNvdXJjZSBwcm92aWRlcyBnZW5lcmljIHBhcnNpbmcgZm9yIEpTT04gcmVzcG9uc2UuXG4gKlxuICogQGV4dGVuZHMgRGF0YVNvdXJjZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBTb3NHZXRSZXN1bHRKc29uIGZyb20gJ2NvcmUvZGF0YXNvdXJjZS9Tb3NHZXRSZXN1bHRKc29uLmpzJztcbiAqXG4gKiBsZXQgYW5kcm9pZFBob25lR3BzRGF0YVNvdXJjZSA9IG5ldyBTb3NHZXRSZXN1bHRKc29uKFwiYW5kcm9pZC1HUFNcIiwge1xuICAgIHByb3RvY29sOiBcIndzXCIsXG4gICAgc2VydmljZTogXCJTT1NcIixcbiAgICBlbmRwb2ludFVybDogXCJzZW5zaWFzb2Z0Lm5ldDo4MTgxL3NlbnNvcmh1Yi9zb3NcIixcbiAgICBvZmZlcmluZ0lEOiBcInVybjphbmRyb2lkOmRldmljZTowNjA2OTMyODBhMjhlMDE1LXNvc1wiLFxuICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L0xvY2F0aW9uXCIsXG4gICAgc3RhcnRUaW1lOiBcIjIwMTUtMDItMTZUMDc6NTg6MDBaXCIsXG4gICAgZW5kVGltZTogXCIyMDE1LTAyLTE2VDA4OjA5OjAwWlwiLFxuICAgIHJlcGxheVNwZWVkOiByZXBsYXlTcGVlZCtcIlwiLFxuICAgIGJ1ZmZlcmluZ1RpbWU6IDEwMDAsXG4gICAgdGltZVNoaWZ0OiAtMTYwMDBcbiAgfSk7XG4gKi9cblxuY2xhc3MgU29zR2V0UmVzdWx0SnNvbiBleHRlbmRzIFRpbWVTZXJpZXNEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLnRpbWVTaGlmdD1mYWxzZV0gLSBmaXggc29tZSBwcm9ibGVtIHdpdGggc29tZSBhbmRyb2lkIGRldmljZXMgd2l0aCBzb21lIHRpbWVzdGFtcCBzaGlmdCB0byAxNiBzZWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYnVmZmVyaW5nVGltZT0wIC0gZGVmaW5lcyB0aGUgdGltZSBkdXJpbmcgdGhlIGRhdGEgaGFzIHRvIGJlIGJ1ZmZlcmVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVPdXQ9MF0gLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCAtIHRoZSBlbmRwb2ludCB1cmxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zZXJ2aWNlIC0gdGhlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vZmZlcmluZ0lEIC0gdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IC0gdGhlIG9ic2VydmVkIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIC0gdGhlIHN0YXJ0IHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kVGltZSAtIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gIC0gdGhlIHJlcGxheSBmYWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVzcG9uc2VGb3JtYXRdIC0gdGhlIHJlc3BvbnNlIGZvcm1hdCAoZS5nIHZpZGVvL21wNClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVjb25uZWN0VGltZW91dD0xMDAwMF0gLSB0aGUgdGltZSBiZWZvcmUgcmVjb25uZWN0aW5nIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihuYW1lLCB7XG4gICAgICAgICAgICB0aW1lU2hpZnQ6MCxcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgU29zR2V0UmVzdWx0SnNvbldvcmtlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvc0dldFJlc3VsdEpzb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "59fa59f55ce399e15206.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlcnMvU29zR2V0UmVzdWx0SnNvbi53b3JrZXIuanM/MzNhYyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiV29ya2VyIiwiX193ZWJwYWNrX3B1YmxpY19wYXRoX18iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUMxQixTQUFPLElBQUlDLE1BQUosQ0FBV0MscUJBQXVCLEdBQUcsZ0NBQXJDLENBQVA7QUFDRCxDQUZEIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjU5ZmE1OWY1NWNlMzk5ZTE1MjA2Lndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n   * Create the PointMarker\n   * @param {Object} properties\n   * @param {Number[]} properties.location - [x,y,z]\n   * @param {Number} [properties.orientation=0] -\n   * @param {String} properties.icon -\n   * @param {String} [properties.iconScale=1] - the icon scale size\n   * @param {String} [properties.iconColor="#000000"] - the icon color\n   * @param {Number[]} [properties.iconAnchor=[16,16]] -\n   * @param {Number[]} [properties.iconSize=[16,16]] -\n   * @param {String} [properties.label=""] - the label to display\n   * @param {String} [properties.labelColor="#000000"] - color\n   * @param {String} [properties.labelOutlineColor=undefined] - color\n   * @param {String} [properties.labelBackgroundColor=undefined] -  color\n   * @param {Number} [properties.labelSize=16] -\n   * @param {Number[]} [properties.labelOffset=[0,0]] -\n   * @param {Number} [properties.zIndex=] - z-ordering of markers\n   * @param {Number} [properties.allowBillboardRotation=true] - allow billboard rotation\n   * @param {Function} [properties.getLocation] -\n   * @param {Function} [properties.getDescription] -\n   * @param {Function} [properties.getOrientation] -\n   * @param {Function} [properties.getIcon] -\n   * @param {Function} [properties.getIconColor] -\n   * @param {Function} [properties.getIconScale] -\n   * @param {Function} [properties.getLabel] -\n   * @param {Function} [properties.getLabelColor] -\n   * @param {Function} [properties.getLabelSize] -\n   * @param {Function} [properties.getZindex] - z-ordering of markers\n   * @param {Function} [properties.onLeftClick] - trigger onLeftClick marker event\n   * @param {Function} [properties.onRightClick] - trigger onRightClick marker event\n   * @param {Function} [properties.onHover] - trigger onHover marker event\n   * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   * @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n   * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n   *\n   */\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n    this.props.location = null;\n    this.props.orientation = {\n      heading: 0\n    };\n    this.props.icon = null;\n    this.props.iconAnchor = [16, 16];\n    this.props.iconSize = [16, 16];\n    this.props.iconScale = 1.0;\n    this.props.iconColor = "#000000";\n    this.props.label = null;\n    this.props.labelColor = "#000000";\n    this.props.labelOutlineColor = undefined;\n    this.props.labelBackgroundColor = undefined;\n    this.props.labelSize = 16;\n    this.props.labelOffset = [0, 0];\n    this.props.zoomLevel = 15;\n    this.props.color = \'#000000\';\n    this.props.defaultToTerrainElevation = false;\n    this.props.zIndex = 0;\n    this.props.allowBillboardRotation = true;\n    this.props.options = {};\n    this.props.markerId = \'marker\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.defaultToTerrainElevation)) {\n      this.props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.location, "location");\n      this.props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "f"])(properties.orientation, "orientation");\n      this.props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.icon, "icon");\n      this.props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      this.props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      this.props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.iconScale, "iconScale");\n      this.props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.iconColor, "iconColor");\n      this.props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.label, "label");\n      this.props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelColor, "labelColor");\n      this.props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelOutlineColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelOutlineColor, "labelOutlineColor");\n      this.props.labelOutlineColor = properties.labelOutlineColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelBackgroundColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.labelBackgroundColor, "labelBackgroundColor");\n      this.props.labelBackgroundColor = properties.labelBackgroundColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.labelSize, "labelSize");\n      this.props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      this.props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "g"])(properties.zoomLevel, "zoomLevel");\n      this.props.zoomLevel = properties.zoomLevel;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.zIndex)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertNumber */ "e"])(properties.zIndex, "zIndex");\n      this.props.zIndex = properties.zIndex;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.allowBillboardRotation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertBoolean */ "b"])(properties.allowBillboardRotation, "allowBillboardRotation");\n      this.props.allowBillboardRotation = properties.allowBillboardRotation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "j"])(properties.color)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "h"])(properties.color, "color");\n      this.props.color = properties.color;\n    }\n\n    const that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getMarkerId")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.markerId = that.getFunc(\'getMarkerId\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getMarkerId\'), fn);\n    }\n\n    if (this.checkFn("getLocation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.location = that.getFunc(\'getLocation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.orientation = that.getFunc(\'getOrientation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.description = that.getFunc(\'getDescription\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.icon = that.getFunc(\'getIcon\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconColor = that.getFunc(\'getIconColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconScale = that.getFunc(\'getIconScale\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.label = that.getFunc(\'getLabel\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelColor = that.getFunc(\'getLabelColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelSize = that.getFunc(\'getLabelSize\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (this.checkFn("getZindex")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.zIndex = that.getFunc(\'getZindex\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getZindex\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "k"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "d"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS9sYXllci9Qb2ludE1hcmtlckxheWVyLmpzPzhiMDUiXSwibmFtZXMiOlsiUG9pbnRNYXJrZXJMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsInByb3BzIiwibG9jYXRpb24iLCJvcmllbnRhdGlvbiIsImhlYWRpbmciLCJpY29uIiwiaWNvbkFuY2hvciIsImljb25TaXplIiwiaWNvblNjYWxlIiwiaWNvbkNvbG9yIiwibGFiZWwiLCJsYWJlbENvbG9yIiwibGFiZWxPdXRsaW5lQ29sb3IiLCJ1bmRlZmluZWQiLCJsYWJlbEJhY2tncm91bmRDb2xvciIsImxhYmVsU2l6ZSIsImxhYmVsT2Zmc2V0Iiwiem9vbUxldmVsIiwiY29sb3IiLCJkZWZhdWx0VG9UZXJyYWluRWxldmF0aW9uIiwiekluZGV4IiwiYWxsb3dCaWxsYm9hcmRSb3RhdGlvbiIsIm9wdGlvbnMiLCJtYXJrZXJJZCIsImlzRGVmaW5lZCIsImhhc1ZhbHVlIiwiYXNzZXJ0T2JqZWN0IiwiYXNzZXJ0U3RyaW5nIiwiYXNzZXJ0QXJyYXkiLCJhc3NlcnRQb3NpdGl2ZSIsImFzc2VydE51bWJlciIsImFzc2VydEJvb2xlYW4iLCJ0aGF0IiwiY2hlY2tGbiIsImZuIiwicmVjIiwidGltZVN0YW1wIiwiZ2V0RnVuYyIsImFkZEZuIiwiZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5IiwiZGVzY3JpcHRpb24iLCJvbkxlZnRDbGljayIsImFzc2VydEZ1bmN0aW9uIiwib25SaWdodENsaWNrIiwib25Ib3ZlciIsInNhdmVTdGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBVUE7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VSxDQUFDNkMsT0FBWixDQUFuRCxFQUF5RTtBQUNyRSxXQUFLM0MsS0FBTCxDQUFXMkMsT0FBWCxHQUFxQjdDLFVBQVUsQ0FBQzZDLE9BQWhDO0FBQ0g7O0FBRUQsU0FBS0MsU0FBTDtBQUNIOztBQXJQZ0M7O0FBd1B0QmpELHlFQUFmIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlLCB2LiAyLjAuXG4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSwgWW91IGNhbiBvYnRhaW4gb25lXG4gYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG4gU29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIGJhc2lzLFxuIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZVxuIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHJpZ2h0cyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUtMjAxNyBNYXRoaWV1IERoYWluYXV0LiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4gQXV0aG9yOiBNYXRoaWV1IERoYWluYXV0IDxtYXRoaWV1LmRoYWluYXV0QGdtYWlsLmNvbT5cblxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5pbXBvcnQge1xuICAgIGFzc2VydEFycmF5LFxuICAgIGFzc2VydEZ1bmN0aW9uLCBhc3NlcnROdW1iZXIsXG4gICAgYXNzZXJ0T2JqZWN0LFxuICAgIGFzc2VydFBvc2l0aXZlLFxuICAgIGFzc2VydFN0cmluZyxcbiAgICBhc3NlcnRCb29sZWFuLFxuICAgIGhhc1ZhbHVlLFxuICAgIGlzRGVmaW5lZFxufSBmcm9tIFwiLi4vLi4vdXRpbHMvVXRpbHMuanNcIjtcbmltcG9ydCBMYXllciBmcm9tIFwiLi9MYXllci5qc1wiO1xuXG4vKipcbiAqIEBleHRlbmRzIExheWVyXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBQb2ludE1hcmtlckxheWVyIGZyb20gJ2NvcmUvdWkvbGF5ZXIvUG9pbnRNYXJrZXJMYXllci5qcyc7XG4gKlxuICogbGV0IHBvaW50TWFya2VyTGF5ZXIgPSBuZXcgUG9pbnRNYXJrZXJMYXllcih7XG4gICAgICAgIGxvY2F0aW9uIDoge1xuICAgICAgICAgICAgeCA6IDEuNDIzNzY1NTcsXG4gICAgICAgICAgICB5IDogNDMuNjE3NTg2MjYsXG4gICAgICAgICAgICB6IDogMTAwXG4gICAgICAgIH0sXG4gICAgICAgIGdldExvY2F0aW9uIDoge1xuICAgICAgICAgICAgZGF0YVNvdXJjZUlkcyA6IFthbmRyb2lkUGhvbmVHcHNEYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgaGFuZGxlciA6IGZ1bmN0aW9uKHJlYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHggOiByZWMubG9uLFxuICAgICAgICAgICAgICAgICAgICB5IDogcmVjLmxhdCxcbiAgICAgICAgICAgICAgICAgICAgeiA6IHJlYy5hbHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRPcmllbnRhdGlvbiA6IHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2VJZHMgOiBbYW5kcm9pZFBob25lT3JpZW50YXRpb25EYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgaGFuZGxlciA6IGZ1bmN0aW9uKHJlYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmcgOiByZWMuaGVhZGluZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGljb24gOiAnaW1hZ2VzL2NhbWVyYWxvb2sucG5nJyxcbiAgICAgICAgZ2V0SWNvbiA6IHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2VJZHM6IFthbmRyb2lkUGhvbmVHcHNEYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgaGFuZGxlciA6IGZ1bmN0aW9uKHJlYyx0aW1lU3RhbXAsb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbWFnZXMvY2FtZXJhbG9vay1zZWxlY3RlZC5wbmcnXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbWFnZXMvY2FtZXJhbG9vay5wbmcnO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAqL1xuY2xhc3MgUG9pbnRNYXJrZXJMYXllciBleHRlbmRzIExheWVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIFBvaW50TWFya2VyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBwcm9wZXJ0aWVzLmxvY2F0aW9uIC0gW3gseSx6XVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5vcmllbnRhdGlvbj0wXSAtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuaWNvbiAtXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLmljb25TY2FsZT0xXSAtIHRoZSBpY29uIHNjYWxlIHNpemVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMuaWNvbkNvbG9yPVwiIzAwMDAwMFwiXSAtIHRoZSBpY29uIGNvbG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gW3Byb3BlcnRpZXMuaWNvbkFuY2hvcj1bMTYsMTZdXSAtXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gW3Byb3BlcnRpZXMuaWNvblNpemU9WzE2LDE2XV0gLVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydGllcy5sYWJlbD1cIlwiXSAtIHRoZSBsYWJlbCB0byBkaXNwbGF5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLmxhYmVsQ29sb3I9XCIjMDAwMDAwXCJdIC0gY29sb3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMubGFiZWxPdXRsaW5lQ29sb3I9dW5kZWZpbmVkXSAtIGNvbG9yXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0aWVzLmxhYmVsQmFja2dyb3VuZENvbG9yPXVuZGVmaW5lZF0gLSAgY29sb3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMubGFiZWxTaXplPTE2XSAtXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gW3Byb3BlcnRpZXMubGFiZWxPZmZzZXQ9WzAsMF1dIC1cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuekluZGV4PV0gLSB6LW9yZGVyaW5nIG9mIG1hcmtlcnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYWxsb3dCaWxsYm9hcmRSb3RhdGlvbj10cnVlXSAtIGFsbG93IGJpbGxib2FyZCByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldExvY2F0aW9uXSAtXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMuZ2V0RGVzY3JpcHRpb25dIC1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRPcmllbnRhdGlvbl0gLVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldEljb25dIC1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRJY29uQ29sb3JdIC1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRJY29uU2NhbGVdIC1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRMYWJlbF0gLVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldExhYmVsQ29sb3JdIC1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRMYWJlbFNpemVdIC1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRaaW5kZXhdIC0gei1vcmRlcmluZyBvZiBtYXJrZXJzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMub25MZWZ0Q2xpY2tdIC0gdHJpZ2dlciBvbkxlZnRDbGljayBtYXJrZXIgZXZlbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5vblJpZ2h0Q2xpY2tdIC0gdHJpZ2dlciBvblJpZ2h0Q2xpY2sgbWFya2VyIGV2ZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMub25Ib3Zlcl0gLSB0cmlnZ2VyIG9uSG92ZXIgbWFya2VyIGV2ZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMuZ2V0TWFya2VySWRdIC0gbWFwIGFuIGlkIHRvIGEgdW5pcXVlIG1hcmtlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy56b29tTGV2ZWw9MTVdIC0gU2V0IHRoZSBkZWZhdWx0IHpvb20gbGV2ZWxcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLmRlZmF1bHRUb1RlcnJhaW5FbGV2YXRpb249ZmFsc2VdIC0gU2V0IHRoZSBkZWZhdWx0IHRvIHRlcnJhaW4gZWxldmF0aW9uXG4gICAgICpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWFya2VyJztcblxuICAgICAgICB0aGlzLnByb3BzLmxvY2F0aW9uID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9wcy5vcmllbnRhdGlvbiA9IHtoZWFkaW5nOiAwfTtcbiAgICAgICAgdGhpcy5wcm9wcy5pY29uID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcm9wcy5pY29uQW5jaG9yID0gWzE2LCAxNl07XG4gICAgICAgIHRoaXMucHJvcHMuaWNvblNpemUgPSBbMTYsIDE2XTtcbiAgICAgICAgdGhpcy5wcm9wcy5pY29uU2NhbGUgPSAxLjA7XG4gICAgICAgIHRoaXMucHJvcHMuaWNvbkNvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgICAgIHRoaXMucHJvcHMubGFiZWwgPSBudWxsO1xuICAgICAgICB0aGlzLnByb3BzLmxhYmVsQ29sb3IgPSBcIiMwMDAwMDBcIjtcbiAgICAgICAgdGhpcy5wcm9wcy5sYWJlbE91dGxpbmVDb2xvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wcm9wcy5sYWJlbEJhY2tncm91bmRDb2xvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wcm9wcy5sYWJlbFNpemUgPSAxNjtcbiAgICAgICAgdGhpcy5wcm9wcy5sYWJlbE9mZnNldCA9IFswLCAwXTtcbiAgICAgICAgdGhpcy5wcm9wcy56b29tTGV2ZWwgPSAxNTtcbiAgICAgICAgdGhpcy5wcm9wcy5jb2xvciA9ICcjMDAwMDAwJztcbiAgICAgICAgdGhpcy5wcm9wcy5kZWZhdWx0VG9UZXJyYWluRWxldmF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMucHJvcHMuekluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wcm9wcy5hbGxvd0JpbGxib2FyZFJvdGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcm9wcy5vcHRpb25zID0ge307XG4gICAgICAgIHRoaXMucHJvcHMubWFya2VySWQgPSAnbWFya2VyJztcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMuZGVmYXVsdFRvVGVycmFpbkVsZXZhdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGVmYXVsdFRvVGVycmFpbkVsZXZhdGlvbiA9IHByb3BlcnRpZXMuZGVmYXVsdFRvVGVycmFpbkVsZXZhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmxvY2F0aW9uKSkge1xuICAgICAgICAgICAgYXNzZXJ0T2JqZWN0KHByb3BlcnRpZXMubG9jYXRpb24sIFwibG9jYXRpb25cIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmxvY2F0aW9uID0gcHJvcGVydGllcy5sb2NhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLm9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgYXNzZXJ0T2JqZWN0KHByb3BlcnRpZXMub3JpZW50YXRpb24sIFwib3JpZW50YXRpb25cIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9yaWVudGF0aW9uID0gcHJvcGVydGllcy5vcmllbnRhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmljb24pKSB7XG4gICAgICAgICAgICBhc3NlcnRTdHJpbmcocHJvcGVydGllcy5pY29uLCBcImljb25cIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmljb24gPSBwcm9wZXJ0aWVzLmljb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy5pY29uQW5jaG9yKSkge1xuICAgICAgICAgICAgYXNzZXJ0QXJyYXkocHJvcGVydGllcy5pY29uQW5jaG9yLCBcImljb25BbmNob3JcIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmljb25BbmNob3IgPSBwcm9wZXJ0aWVzLmljb25BbmNob3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy5pY29uU2l6ZSkpIHtcbiAgICAgICAgICAgIGFzc2VydEFycmF5KHByb3BlcnRpZXMuaWNvblNpemUsIFwiaWNvblNpemVcIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmljb25TaXplID0gcHJvcGVydGllcy5pY29uU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmljb25TY2FsZSkpIHtcbiAgICAgICAgICAgIGFzc2VydFBvc2l0aXZlKHByb3BlcnRpZXMuaWNvblNjYWxlLCBcImljb25TY2FsZVwiKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaWNvblNjYWxlID0gcHJvcGVydGllcy5pY29uU2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy5pY29uQ29sb3IpKSB7XG4gICAgICAgICAgICBhc3NlcnRTdHJpbmcocHJvcGVydGllcy5pY29uQ29sb3IsIFwiaWNvbkNvbG9yXCIpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5pY29uQ29sb3IgPSBwcm9wZXJ0aWVzLmljb25Db2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmxhYmVsKSkge1xuICAgICAgICAgICAgYXNzZXJ0U3RyaW5nKHByb3BlcnRpZXMubGFiZWwsIFwibGFiZWxcIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmxhYmVsID0gcHJvcGVydGllcy5sYWJlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmxhYmVsQ29sb3IpKSB7XG4gICAgICAgICAgICBhc3NlcnRTdHJpbmcocHJvcGVydGllcy5sYWJlbENvbG9yLCBcImxhYmVsQ29sb3JcIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmxhYmVsQ29sb3IgPSBwcm9wZXJ0aWVzLmxhYmVsQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy5sYWJlbE91dGxpbmVDb2xvcikpIHtcbiAgICAgICAgICAgIGFzc2VydFN0cmluZyhwcm9wZXJ0aWVzLmxhYmVsT3V0bGluZUNvbG9yLCBcImxhYmVsT3V0bGluZUNvbG9yXCIpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5sYWJlbE91dGxpbmVDb2xvciA9IHByb3BlcnRpZXMubGFiZWxPdXRsaW5lQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy5sYWJlbEJhY2tncm91bmRDb2xvcikpIHtcbiAgICAgICAgICAgIGFzc2VydFN0cmluZyhwcm9wZXJ0aWVzLmxhYmVsQmFja2dyb3VuZENvbG9yLCBcImxhYmVsQmFja2dyb3VuZENvbG9yXCIpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5sYWJlbEJhY2tncm91bmRDb2xvciA9IHByb3BlcnRpZXMubGFiZWxCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy5sYWJlbFNpemUpKSB7XG4gICAgICAgICAgICBhc3NlcnRQb3NpdGl2ZShwcm9wZXJ0aWVzLmxhYmVsU2l6ZSwgXCJsYWJlbFNpemVcIik7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmxhYmVsU2l6ZSA9IHByb3BlcnRpZXMubGFiZWxTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKHByb3BlcnRpZXMubGFiZWxPZmZzZXQpKSB7XG4gICAgICAgICAgICBhc3NlcnRBcnJheShwcm9wZXJ0aWVzLmxhYmVsT2Zmc2V0LCBcImxhYmVsT2Zmc2V0XCIpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5sYWJlbE9mZnNldCA9IHByb3BlcnRpZXMubGFiZWxPZmZzZXQ7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLnpvb21MZXZlbCkpIHtcbiAgICAgICAgICAgIGFzc2VydFBvc2l0aXZlKHByb3BlcnRpZXMuem9vbUxldmVsLCBcInpvb21MZXZlbFwiKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuem9vbUxldmVsID0gcHJvcGVydGllcy56b29tTGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUocHJvcGVydGllcy56SW5kZXgpKSB7XG4gICAgICAgICAgICBhc3NlcnROdW1iZXIocHJvcGVydGllcy56SW5kZXgsIFwiekluZGV4XCIpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy56SW5kZXggPSBwcm9wZXJ0aWVzLnpJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmFsbG93QmlsbGJvYXJkUm90YXRpb24pKSB7XG4gICAgICAgICAgICBhc3NlcnRCb29sZWFuKHByb3BlcnRpZXMuYWxsb3dCaWxsYm9hcmRSb3RhdGlvbiwgXCJhbGxvd0JpbGxib2FyZFJvdGF0aW9uXCIpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5hbGxvd0JpbGxib2FyZFJvdGF0aW9uID0gcHJvcGVydGllcy5hbGxvd0JpbGxib2FyZFJvdGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKHByb3BlcnRpZXMuY29sb3IpKSB7XG4gICAgICAgICAgICBhc3NlcnRTdHJpbmcocHJvcGVydGllcy5jb2xvciwgXCJjb2xvclwiKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY29sb3IgPSBwcm9wZXJ0aWVzLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgLy8gbXVzdCBiZSBmaXJzdCB0byBhc3NpZ24gY29ycmVjdGx5IHRoZSBmaXJzdCBsb2NhdGlvbiB0byB0aGUgcmlnaHQgaWQgaWYgaXQgaXMgZGVmaW5lZFxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0TWFya2VySWRcIikpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGZ1bmN0aW9uIChyZWMsIHRpbWVTdGFtcCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoYXQucHJvcHMubWFya2VySWQgPSB0aGF0LmdldEZ1bmMoJ2dldE1hcmtlcklkJykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldE1hcmtlcklkJyksIGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJnZXRMb2NhdGlvblwiKSkge1xuICAgICAgICAgICAgbGV0IGZuID0gZnVuY3Rpb24gKHJlYywgdGltZVN0YW1wLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5wcm9wcy5sb2NhdGlvbiA9IHRoYXQuZ2V0RnVuYygnZ2V0TG9jYXRpb24nKShyZWMsIHRpbWVTdGFtcCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGF0LmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0TG9jYXRpb24nKSwgZm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tGbihcImdldE9yaWVudGF0aW9uXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLm9yaWVudGF0aW9uID0gdGhhdC5nZXRGdW5jKCdnZXRPcmllbnRhdGlvbicpKHJlYywgdGltZVN0YW1wLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXRPcmllbnRhdGlvbicpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0RGVzY3JpcHRpb25cIikpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGZ1bmN0aW9uIChyZWMsIHRpbWVTdGFtcCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoYXQucHJvcHMuZGVzY3JpcHRpb24gPSB0aGF0LmdldEZ1bmMoJ2dldERlc2NyaXB0aW9uJykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldERlc2NyaXB0aW9uJyksIGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJnZXRJY29uXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmljb24gPSB0aGF0LmdldEZ1bmMoJ2dldEljb24nKShyZWMsIHRpbWVTdGFtcCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGF0LmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0SWNvbicpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0SWNvbkNvbG9yXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmljb25Db2xvciA9IHRoYXQuZ2V0RnVuYygnZ2V0SWNvbkNvbG9yJykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEljb25Db2xvcicpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0SWNvblNjYWxlXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmljb25TY2FsZSA9IHRoYXQuZ2V0RnVuYygnZ2V0SWNvblNjYWxlJykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldEljb25TY2FsZScpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0TGFiZWxcIikpIHtcbiAgICAgICAgICAgIGxldCBmbiA9IGZ1bmN0aW9uIChyZWMsIHRpbWVTdGFtcCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoYXQucHJvcHMubGFiZWwgPSB0aGF0LmdldEZ1bmMoJ2dldExhYmVsJykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldExhYmVsJyksIGZuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm4oXCJnZXRMYWJlbENvbG9yXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmxhYmVsQ29sb3IgPSB0aGF0LmdldEZ1bmMoJ2dldExhYmVsQ29sb3InKShyZWMsIHRpbWVTdGFtcCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGRGbih0aGF0LmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0TGFiZWxDb2xvcicpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0TGFiZWxTaXplXCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLmxhYmVsU2l6ZSA9IHRoYXQuZ2V0RnVuYygnZ2V0TGFiZWxTaXplJykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldExhYmVsU2l6ZScpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jaGVja0ZuKFwiZ2V0WmluZGV4XCIpKSB7XG4gICAgICAgICAgICBsZXQgZm4gPSBmdW5jdGlvbiAocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnByb3BzLnpJbmRleCA9IHRoYXQuZ2V0RnVuYygnZ2V0WmluZGV4JykocmVjLCB0aW1lU3RhbXAsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldFppbmRleCcpLCBmbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMub25MZWZ0Q2xpY2spICYmIGFzc2VydEZ1bmN0aW9uKHByb3BlcnRpZXMub25MZWZ0Q2xpY2spKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uTGVmdENsaWNrID0gcHJvcGVydGllcy5vbkxlZnRDbGljaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5vblJpZ2h0Q2xpY2spICYmIGFzc2VydEZ1bmN0aW9uKHByb3BlcnRpZXMub25SaWdodENsaWNrKSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblJpZ2h0Q2xpY2sgPSBwcm9wZXJ0aWVzLm9uUmlnaHRDbGljaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZmluZWQocHJvcGVydGllcy5vbkhvdmVyKSAmJiBhc3NlcnRGdW5jdGlvbihwcm9wZXJ0aWVzLm9uSG92ZXIpKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uSG92ZXIgPSBwcm9wZXJ0aWVzLm9uSG92ZXI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNhdmVTdGF0ZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRNYXJrZXJMYXllcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides parsing to H264 raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import SosGetResultVideo from \'core/datasource/SosGetResultVideo.js\';\n *\n * var videoDataSource = new SosGetResultVideo("H264 video ", {\n        protocol: "ws",\n        service: "SOS",\n        endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n        offeringID: "urn:android:device:a0e0eac2fea3f614-sos",\n        observedProperty: "http://sensorml.com/ont/swe/property/VideoFrame",\n        startTime: "2016-08-11T20:17:30.402Z",\n        endTime: "2016-08-11T20:18:05.451Z",\n        replaySpeed: 1,\n        bufferingTime: 1000\n  });\n */\n\nclass SosGetResultVideo extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Object} [properties.customUrlParams={}] - the encoding options\n   * @param {Number} [properties.customUrlParams.video_bitrate] - define a custom bitrate (in b/s)\n   * @param {Number} [properties.customUrlParams.video_scale] - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} [properties.customUrlParams.video_width] - define a custom width\n   * @param {Number} [properties.customUrlParams.video_height] - define a custom height\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultVideo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL1Nvc0dldFJlc3VsdFZpZGVvLmpzPzlhMWQiXSwibmFtZXMiOlsiU29zR2V0UmVzdWx0VmlkZW8iLCJUaW1lU2VyaWVzRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJ0aW1lU2hpZnQiLCJyZWNvbm5lY3RUaW1lb3V0IiwiU29zR2V0UmVzdWx0VmlkZW9Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQSxpQkFBTixTQUFnQ0Msd0VBQWhDLENBQXFEO0FBQ2pEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQW1CO0FBQzFCLFVBQU1ELElBQU4sRUFBWTtBQUNSRSxlQUFTLEVBQUMsQ0FERjtBQUVSQyxzQkFBZ0IsRUFBRSxPQUFPLENBRmpCO0FBRW9CO0FBQzVCLFNBQUdGO0FBSEssS0FBWixFQUlHLElBQUlHLDJFQUFKLEVBSkg7QUFLSDs7QUE3QmdEOztBQWdDckNQLDBFQUFoQiIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFRpbWVTZXJpZXNEYXRhU291cmNlIGZyb20gJy4vVGltZVNlcmllc0RhdGFTb3VyY2UuanMnO1xuaW1wb3J0IFNvc0dldFJlc3VsdFZpZGVvV29ya2VyIGZyb20gXCIuL3dvcmtlcnMvU29zR2V0UmVzdWx0VmlkZW8ud29ya2VyLmpzXCI7XG5cbi8qKlxuICogVGhpcyBkYXRhc291cmNlIHByb3ZpZGVzIHBhcnNpbmcgdG8gSDI2NCByYXcgZGF0YS5cbiAqIERhdGE6IEFycmF5QnVmZmVyXG4gKiBAZXh0ZW5kcyBEYXRhU291cmNlXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IFNvc0dldFJlc3VsdFZpZGVvIGZyb20gJ2NvcmUvZGF0YXNvdXJjZS9Tb3NHZXRSZXN1bHRWaWRlby5qcyc7XG4gKlxuICogdmFyIHZpZGVvRGF0YVNvdXJjZSA9IG5ldyBTb3NHZXRSZXN1bHRWaWRlbyhcIkgyNjQgdmlkZW8gXCIsIHtcbiAgICAgICAgcHJvdG9jb2w6IFwid3NcIixcbiAgICAgICAgc2VydmljZTogXCJTT1NcIixcbiAgICAgICAgZW5kcG9pbnRVcmw6IFwic2Vuc2lhc29mdC5uZXQ6ODE4MS9zZW5zb3JodWIvc29zXCIsXG4gICAgICAgIG9mZmVyaW5nSUQ6IFwidXJuOmFuZHJvaWQ6ZGV2aWNlOmEwZTBlYWMyZmVhM2Y2MTQtc29zXCIsXG4gICAgICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L1ZpZGVvRnJhbWVcIixcbiAgICAgICAgc3RhcnRUaW1lOiBcIjIwMTYtMDgtMTFUMjA6MTc6MzAuNDAyWlwiLFxuICAgICAgICBlbmRUaW1lOiBcIjIwMTYtMDgtMTFUMjA6MTg6MDUuNDUxWlwiLFxuICAgICAgICByZXBsYXlTcGVlZDogMSxcbiAgICAgICAgYnVmZmVyaW5nVGltZTogMTAwMFxuICB9KTtcbiAqL1xuY2xhc3MgU29zR2V0UmVzdWx0VmlkZW8gZXh0ZW5kcyBUaW1lU2VyaWVzRGF0YVNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgZGF0YXNvdXJjZSBuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgZGF0YXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJvcGVydGllcy50aW1lU2hpZnQ9ZmFsc2VdIC0gZml4IHNvbWUgcHJvYmxlbSB3aXRoIHNvbWUgYW5kcm9pZCBkZXZpY2VzIHdpdGggc29tZSB0aW1lc3RhbXAgc2hpZnQgdG8gMTYgc2VjXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWU9MCAtIGRlZmluZXMgdGhlIHRpbWUgZHVyaW5nIHRoZSBkYXRhIGhhcyB0byBiZSBidWZmZXJlZC4gVXNlZnVsIG9ubHkgd2hlbiB1c2VkIHdpdGggRGF0YVN5bmNocm9uaXplclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy50aW1lT3V0PTBdIC0gZGVmaW5lcyB0aGUgbGltaXQgdGltZSBiZWZvcmUgZGF0YSBoYXMgdG8gYmUgc2tpcHBlZC4gVXNlZnVsIG9ubHkgd2hlbiB1c2VkIHdpdGggRGF0YVN5bmNocm9uaXplclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnByb3RvY29sIC0gZGVmaW5lcyB0aGUgcHJvdG9jb2wgb2YgdGhlIGRhdGFzb3VyY2UuIEBzZWUge0BsaW5rIERhdGFDb25uZWN0b3J9XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kcG9pbnRVcmwgdGhlIGVuZHBvaW50IHVybFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnNlcnZpY2UgdGhlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vZmZlcmluZ0lEIHRoZSBvZmZlcmluZ0lEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2JzZXJ2ZWRQcm9wZXJ0eSB0aGUgb2JzZXJ2ZWQgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zdGFydFRpbWUgdGhlIHN0YXJ0IHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kVGltZSB0aGUgZW5kIHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlcGxheVNwZWVkPTFdIHRoZSByZXBsYXkgZmFjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlc3BvbnNlRm9ybWF0XSB0aGUgcmVzcG9uc2UgZm9ybWF0IChlLmcgdmlkZW8vbXA0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZWNvbm5lY3RUaW1lb3V0PTEwMDAwXSAtIHRoZSB0aW1lIGJlZm9yZSByZWNvbm5lY3RpbmcgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zPXt9XSAtIHRoZSBlbmNvZGluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb19iaXRyYXRlXSAtIGRlZmluZSBhIGN1c3RvbSBiaXRyYXRlIChpbiBiL3MpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb19zY2FsZV0gLSBkZWZpbmUgYSBjdXN0b20gc2NhbGUsIDAuMCA8IHZhbHVlIDwgMS4wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb193aWR0aF0gLSBkZWZpbmUgYSBjdXN0b20gd2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX2hlaWdodF0gLSBkZWZpbmUgYSBjdXN0b20gaGVpZ2h0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihuYW1lLCB7XG4gICAgICAgICAgICB0aW1lU2hpZnQ6MCxcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgU29zR2V0UmVzdWx0VmlkZW9Xb3JrZXIoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAgU29zR2V0UmVzdWx0VmlkZW87XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "698d3012e54905cbed5f.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlcnMvU29zR2V0UmVzdWx0VmlkZW8ud29ya2VyLmpzPzkzMGMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2OThkMzAxMmU1NDkwNWNiZWQ1Zi53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\nimport MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'data\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timeStamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(properties.showTime) && properties.showTime) {\n      this.timeStamp = document.createElement("div");\n      this.timeStamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timeStamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const value = values.shift();\n      let imgBlob = new Blob([value.data.frameData]);\n      let url = window.URL.createObjectURL(imgBlob);\n      let oldBlobURL = this.imgTag.src;\n      this.imgTag.src = url;\n\n      if (this.timeStamp !== null) {\n        this.timeStamp.innerHTML = new Date(value.timeStamp).toISOString();\n      }\n\n      window.URL.revokeObjectURL(oldBlobURL);\n    }\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "k"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS92aWV3L3ZpZGVvL01qcGVnVmlldy5qcz9kNmZhIl0sIm5hbWVzIjpbIk1qcGVnVmlldyIsIlZpZXciLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJzdXBwb3J0ZWRMYXllcnMiLCJ0aW1lU3RhbXAiLCJpc0RlZmluZWQiLCJzaG93VGltZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRCeUlkIiwiZGl2SWQiLCJhcHBlbmRDaGlsZCIsImltZ1RhZyIsInJvdGF0aW9uIiwiTWF0aCIsIlBJIiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJjdHgiLCJnZXRDb250ZXh0IiwidHJhbnNsYXRlIiwicm90YXRlIiwic2V0RGF0YSIsImRhdGFTb3VyY2VJZCIsImRhdGEiLCJ2YWx1ZXMiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJzaGlmdCIsImltZ0Jsb2IiLCJCbG9iIiwiZnJhbWVEYXRhIiwidXJsIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwib2xkQmxvYlVSTCIsInNyYyIsImlubmVySFRNTCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInJldm9rZU9iamVjdFVSTCIsInNlbGVjdERhdGFWaWV3IiwiZGF0YVNvdXJjZUlkcyIsImVudGl0eUlkIiwiaW5kZXhPZiIsImVudGl0eSIsImdldElkIiwiY3NzIiwiY3NzU2VsZWN0ZWQiLCJyZXNldCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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SUMsSUFBSixDQUFTWixLQUFLLENBQUMxQixTQUFmLEVBQTBCdUMsV0FBMUIsRUFBM0I7QUFDSDs7QUFDRFAsWUFBTSxDQUFDQyxHQUFQLENBQVdPLGVBQVgsQ0FBMkJMLFVBQTNCO0FBQ0g7QUFDSjs7QUFFRE0sZ0JBQWMsQ0FBQ0MsYUFBRCxFQUFlQyxRQUFmLEVBQXlCO0FBQ3JDLFFBQUdELGFBQWEsQ0FBQ0UsT0FBZCxDQUFzQixLQUFLdkIsWUFBM0IsSUFBMkMsQ0FBQyxDQUE1QyxJQUFrRHBCLHlFQUFTLENBQUMsS0FBSzRDLE1BQU4sQ0FBVixJQUE0QixLQUFLQSxNQUFMLENBQVlDLEtBQVosT0FBd0JILFFBQXhHLEVBQWtIO0FBQ2hIeEMsY0FBUSxDQUFDRyxjQUFULENBQXdCLEtBQUtDLEtBQTdCLEVBQW9DRixZQUFwQyxDQUFpRCxPQUFqRCxFQUF5RCxLQUFLMEMsR0FBTCxHQUFTLEdBQVQsR0FBYSxLQUFLQyxXQUEzRTtBQUNELEtBRkQsTUFFTztBQUNMN0MsY0FBUSxDQUFDRyxjQUFULENBQXdCLEtBQUtDLEtBQTdCLEVBQW9DRixZQUFwQyxDQUFpRCxPQUFqRCxFQUF5RCxLQUFLMEMsR0FBOUQ7QUFDRDtBQUNGOztBQUVERSxPQUFLLEdBQUc7QUFDSixTQUFLeEMsTUFBTCxDQUFZMkIsR0FBWixHQUFrQixFQUFsQjtBQUNIOztBQXhFMEI7O0FBMkVkekMsa0VBQWYiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBWaWV3IGZyb20gXCIuLi9WaWV3LmpzXCI7XG5pbXBvcnQge2lzRGVmaW5lZH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5cbi8qKlxuICogQGV4dGVuZHMgVmlld1xuICogQGV4YW1wbGVcbiAqXG5pbXBvcnQgTWpwZWdWaWV3IGZyb20gJ2NvcmUvdWkvdmlldy92aWRlby9NanBlZ1ZpZXcuanMnO1xuXG4gbGV0IHZpZGVvVmlldyA9IG5ldyBNanBlZ1ZpZXcoe1xuICBjb250YWluZXI6ICdjb250YWluZXInLFxuICBjc3M6ICd2aWRlby1oMjY0JyxcbiAgbmFtZTogJ1VBViBWaWRlbycsXG4gIHNob3dUaW1lOiB0cnVlLFxuICBzaG93U3RhdHM6IHRydWUsXG4gIGxheWVyczogW1xuICAgICAgbmV3IERhdGFMYXllcih7XG4gICAgICAgIGRhdGFTb3VyY2VJZDogdmlkZW9EYXRhU291cmNlLmlkXG4gICAgICB9KVxuICBdXG59KTtcbiAqL1xuXG5jbGFzcyBNanBlZ1ZpZXcgZXh0ZW5kcyBWaWV3IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIFZpZXcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcz17fV0gLSB0aGUgcHJvcGVydGllcyBvZiB0aGUgdmlld1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydGllcy5jb250YWluZXIgLSBUaGUgZGl2IGVsZW1lbnQgdG8gYXR0YWNoIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0aWVzLmNzcyAtIFRoZSBjc3MgY2xhc3NlcyB0byBzZXQsIGNhbiBiZSBtdWx0aXBsZSBpZiBzZXBhcmF0ZSBieSBzcGFjZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc2hvd1RpbWUgLSBEaXNwbGF5IG9yIG5vdCB0aGUgdGltZSBvbnRvIHRoZSB2aWV3XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnJvdGF0aW9uIC0gQWxsb3cgdG8gZGVmaW5lIGEgcm90YXRpb24gaW4gZGVncmVlXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICBzdXBlcih7XG4gICAgICAgICAgc3VwcG9ydGVkTGF5ZXJzOiBbJ2RhdGEnXSxcbiAgICAgICAgICAuLi5wcm9wZXJ0aWVzXG4gICAgICB9KTtcblxuICAgIC8vIGNyZWF0ZSB0aW1lc3RhbXAgc2xvdFxuICAgIHRoaXMudGltZVN0YW1wID0gbnVsbDtcbiAgICBpZiAoaXNEZWZpbmVkKHByb3BlcnRpZXMuc2hvd1RpbWUpICYmIHByb3BlcnRpZXMuc2hvd1RpbWUpIHtcbiAgICAgICAgdGhpcy50aW1lU3RhbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLnRpbWVTdGFtcC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInZpZGVvLXRpbWVcIik7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZGl2SWQpLmFwcGVuZENoaWxkKHRoaXMudGltZVN0YW1wKTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGVzIHZpZGVvIHRhZyBlbGVtZW50XG4gICAgdGhpcy5pbWdUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIHRoaXMuaW1nVGFnLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidmlkZW8tbWpwZWdcIik7XG5cbiAgICAvLyByb3RhdGlvbiBvcHRpb25cbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcbiAgICBpZiAodHlwZW9mKHByb3BlcnRpZXMpICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mKHByb3BlcnRpZXMucm90YXRpb24pICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHByb3BlcnRpZXMucm90YXRpb24qTWF0aC5QSS8xODA7XG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gNjQwO1xuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSA0ODA7XG4gICAgICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBjdHgudHJhbnNsYXRlKDAsIDQ4MCkgO1xuICAgICAgICBjdHgucm90YXRlKHRoaXMucm90YXRpb24pO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRpdklkKS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYXBwZW5kcyA8aW1nPiB0YWcgdG8gPGRpdj5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kaXZJZCkuYXBwZW5kQ2hpbGQodGhpcy5pbWdUYWcpO1xuICAgIH1cbiAgfVxuXG4gIHNldERhdGEoZGF0YVNvdXJjZUlkLGRhdGEpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IGRhdGEudmFsdWVzO1xuICAgICAgZm9yKGxldCBpPTA7IGkgPCB2YWx1ZXMubGVuZ3RoO2krKykge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzLnNoaWZ0KCk7XG5cbiAgICAgICAgICBsZXQgaW1nQmxvYiA9IG5ldyBCbG9iKFt2YWx1ZS5kYXRhLmZyYW1lRGF0YV0pO1xuICAgICAgICAgIGxldCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChpbWdCbG9iKTtcblxuICAgICAgICAgIGxldCBvbGRCbG9iVVJMID0gdGhpcy5pbWdUYWcuc3JjO1xuICAgICAgICAgIHRoaXMuaW1nVGFnLnNyYyA9IHVybDtcbiAgICAgICAgICBpZiAodGhpcy50aW1lU3RhbXAgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy50aW1lU3RhbXAuaW5uZXJIVE1MID0gbmV3IERhdGUodmFsdWUudGltZVN0YW1wKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChvbGRCbG9iVVJMKTtcbiAgICAgIH1cbiAgfVxuXG4gIHNlbGVjdERhdGFWaWV3KGRhdGFTb3VyY2VJZHMsZW50aXR5SWQpIHtcbiAgICBpZihkYXRhU291cmNlSWRzLmluZGV4T2YodGhpcy5kYXRhU291cmNlSWQpID4gLTEgfHwgKGlzRGVmaW5lZCh0aGlzLmVudGl0eSkpICYmIHRoaXMuZW50aXR5LmdldElkKCkgPT09IGVudGl0eUlkKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRpdklkKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHRoaXMuY3NzK1wiIFwiK3RoaXMuY3NzU2VsZWN0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRpdklkKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHRoaXMuY3NzKTtcbiAgICB9XG4gIH1cblxuICByZXNldCgpIHtcbiAgICAgIHRoaXMuaW1nVGFnLnNyYyA9IFwiXCI7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWpwZWdWaWV3O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(1);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(26);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js + 2 modules\nvar View = __webpack_require__(13);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToEllipsoids = {}; // map Layer id to array of corresponding polygons\n\n    this.layerIdToPolygon = {}; // map Layer id to array of corresponding frustums\n\n    this.layerIdToFrustum = {}; // map Layer id to array of corresponding draping\n\n    this.layerIdToDrapedImage = {};\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'drapedImage\') {\n        this.updateDrapedImage(d);\n      } else if (data.type === \'ellipse\') {\n        this.updateEllipse(d);\n      } else if (data.type === \'polygon\') {\n        this.updatePolygon(d);\n      } else if (data.type === \'coplanarPolygon\') {\n        this.updateCoPlanarPolygon(d);\n      } else if (data.type === \'frustum\') {\n        this.updateFrustum(d);\n      }\n    }\n  }\n\n  addPolygonToLayer(props, polygon) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToPolygon)) {\n      this.layerIdToPolygon[props.id] = {};\n    }\n\n    this.layerIdToPolygon[props.id][props.polygonId] = polygon;\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  addMarkerToLayer(props, markerObject) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToMarkers)) {\n      this.layerIdToMarkers[props.id] = {};\n    }\n\n    this.layerIdToMarkers[props.id][props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  addPolylineToLayer(props, polylineObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToPolylines)) {\n      this.layerIdToPolylines[props.id] = {};\n    }\n\n    this.layerIdToPolylines[props.id][props.polylineId] = polylineObject;\n  }\n  /**\n   * Associate a ellipseId to a Layer for a fast lookup\n   * @protected\n   * @param {Ellipse.props} layer - the Layer object\n   * @param {Object} ellipseObject - the Map ellipse object\n   */\n\n\n  addEllipseToLayer(props, ellipseObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      this.layerIdToEllipsoids[props.id] = {};\n    }\n\n    this.layerIdToEllipsoids[props.id][props.ellipseId] = ellipseObject;\n  }\n  /**\n   * Associate a drapedImageId to a Layer for a fast lookup\n   * @protected\n   * @param {ImageDraping.props} layer - the Layer object\n   * @param {Object} drapedImageObject - the Map drapedImage object\n   */\n\n\n  addDrapedImageToLayer(props, drapedImageObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToDrapedImage)) {\n      this.layerIdToDrapedImage[props.id] = {};\n    }\n\n    this.layerIdToDrapedImage[props.id][props.drapedImageId] = drapedImageObject;\n  }\n\n  addFrustumToLayer(props, frustum) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToFrustum)) {\n      this.layerIdToFrustum[props.id] = {};\n    }\n\n    this.layerIdToFrustum[props.id][props.frustumId] = frustum;\n  }\n\n  getPolygons() {\n    const array = [];\n\n    for (let id in this.layerIdToPolygon) {\n      for (let polygonId in this.layerIdToPolygon[id]) {\n        array.push(this.layerIdToPolygon[id][polygonId]);\n      }\n    }\n\n    return array;\n  }\n\n  getPolygon(props) {\n    if (!(props.id in this.layerIdToPolygon)) {\n      return null;\n    }\n\n    return this.layerIdToPolygon[props.id][props.polygonId];\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.id in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.id][props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      for (let markerId in this.layerIdToMarkers[id]) {\n        array.push(this.layerIdToMarkers[id][markerId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all polylines contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      for (let polylineId in this.layerIdToPolylines[id]) {\n        array.push(this.layerIdToPolylines[id][polylineId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all ellpsoids contained in this view\n   * @protected\n   */\n\n\n  getEllipsoids() {\n    const array = [];\n\n    for (let id in this.layerIdToEllipsoids) {\n      for (let ellipseId in this.layerIdToEllipsoids[id]) {\n        array.push(this.layerIdToEllipsoids[id][ellipseId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.id][props.ellipseId];\n  }\n  /**\n   * Get the ellipse associate to the Layer\n   * @protected\n   * @param {Ellipse.props} layer - the Layer Object\n   */\n\n\n  getEllipse(props) {\n    if (!(props.id in this.layerIdToEllipsoids)) {\n      return null;\n    }\n\n    return this.layerIdToEllipsoids[props.id][props.ellipseId];\n  }\n  /**\n   * Get the polyline associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.id][props.polylineId];\n  }\n  /**\n   * Get the draped image associate to the Layer\n   * @protected\n   * @param {ImageDrapingLayer.props} layer - the Layer Object\n   */\n\n\n  getDrapedImage(props) {\n    if (!(props.id in this.layerIdToDrapedImage)) {\n      return null;\n    }\n\n    return this.layerIdToDrapedImage[props.id][props.drapedImageId];\n  }\n\n  getFrustums() {\n    const array = [];\n\n    for (let id in this.layerIdToFrustum) {\n      for (let frustumId in this.layerIdToFrustum[id]) {\n        array.push(this.layerIdToFrustum[id][frustumId]);\n      }\n    }\n\n    return array;\n  }\n\n  getFrustum(props) {\n    if (!(props.id in this.layerIdToFrustum)) {\n      return null;\n    }\n\n    return this.layerIdToFrustum[props.id][props.frustumId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    super.removeAllFromLayer(layer); // check for marker\n\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n    this.removeEllipsoids(layer);\n    this.removePolygons(layer);\n    this.removeFrustums(layer);\n  }\n\n  removePolygons(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.polygonId)) {\n      const polygonMap = this.layerIdToPolygon[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(polygonMap)) {\n        for (let polygonId in polygonMap) {\n          const polygon = polygonMap[polygonId];\n          this.removePolygonFromLayer(polygon);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToPolygon[layer.props.id];\n    }\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.markerId)) {\n      const markersMap = this.layerIdToMarkers[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(markersMap)) {\n        for (let markerId in markersMap) {\n          const marker = markersMap[markerId];\n          this.removeMarkerFromLayer(marker);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[layer.props.id];\n    }\n  }\n  /**\n   * Remove the ellipsoids corresponding to a EllipseLayer Layer\n   * @param {Ellipse} ellipse - the layer to remove the ellipsoids from\n   */\n\n\n  removeEllipsoids(ellipse) {\n    if (Object(Utils["k" /* isDefined */])(ellipse.props.ellipseId)) {\n      const ellipseMap = this.layerIdToEllipsoids[ellipse.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(ellipseMap)) {\n        for (let ellipseId in ellipseMap) {\n          const ellipse = ellipseMap[ellipseId];\n          this.removeEllipseFromLayer(ellipse);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToEllipsoids[ellipse.props.id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    if (Object(Utils["k" /* isDefined */])(polyline.props.polylineId)) {\n      const polylinesMap = this.layerIdToPolylines[polyline.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(polylinesMap)) {\n        for (let polylineId in polylinesMap) {\n          const polyline = polylinesMap[polylineId];\n          this.removePolylineFromLayer(polyline);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[polyline.props.id];\n    }\n  }\n  /**\n   * Remove the drapedImage corresponding to a ImageDraping Layer\n   * @param {ImageDraping} imageDraping - the layer to remove the drapedImage from\n   */\n\n\n  removeDrapedImages(drapedImage) {\n    if (Object(Utils["k" /* isDefined */])(drapedImage.props.drapedImageId)) {\n      const drapedImageMap = this.layerIdToDrapedImage[drapedImage.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(drapedImageMap)) {\n        for (let drapedImageId in drapedImageMap) {\n          const drapedImage = drapedImageMap[drapedImageId];\n          this.removeDrapedImageFromLayer(drapedImage);\n        }\n      } // remove drapedImage ids from Layer map\n\n\n      delete this.layerIdToDrapedImage[drapedImage.props.id];\n    }\n  }\n  /**\n   * Remove the frustums corresponding to a Frustum Layer\n   * @param {FrustumLayer} polyline - the layer to remove the Frustum from\n   */\n\n\n  removeFrustums(layer) {\n    if (Object(Utils["k" /* isDefined */])(layer.props.frustumId)) {\n      const frustumMap = this.layerIdToFrustum[layer.props.id];\n\n      if (Object(Utils["k" /* isDefined */])(frustumMap)) {\n        for (let frustumId in frustumMap) {\n          const frustum = frustumMap[frustumId];\n          this.removeFrustumFromLayer(frustum);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToFrustum[layer.props.id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Abstract method to remove a draped image from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} drapedImage - The Map drapedImage object\n   */\n\n\n  removeDrapedImageFromLayer(drapedImage) {}\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(marker) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["k" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["k" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["k" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["k" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n  updateMarker() {}\n\n  updatePolyline() {}\n\n  updatePolygon() {}\n\n  updateEllipse() {}\n\n  updateCoPlanarPolygon() {}\n\n  updateDrapedImage() {}\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\', \'polygon\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["k" /* isDefined */])(options)) {\n      if (Object(Utils["k" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["k" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["k" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["k" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["k" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["k" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["k" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["c" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["k" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.setZIndexOffset(properties.zIndex);\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolyline(properties) {\n    const locations = properties.locations[properties.polylineId];\n    let polylinePoints = [];\n\n    if (Object(Utils["k" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["k" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      marker = this.addMarker(props);\n      this.addMarkerToLayer(props, marker);\n      const mId = props.markerId; //need to freeze\n\n      marker.on(\'click\', event => this.onMarkerLeftClick(mId, marker, props, event));\n      marker.on(\'contextmenu\', event => this.onMarkerRightClick(mId, marker, props, event));\n      marker.on(\'mouseover\', event => this.onMarkerHover(mId, marker, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n    // updates position\n\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["k" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n\n    marker.setZIndexOffset(props.zIndex);\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (!Object(Utils["k" /* isDefined */])(polyline)) {\n      // adds a new polygon to the leaflet renderer\n      const polylineObj = this.addPolyline(props);\n      this.addPolylineToLayer(props, polylineObj);\n    } else {\n      let polylinePoints = [];\n      const locations = props.locations[props.polylineId];\n\n      if (Object(Utils["k" /* isDefined */])(locations) && locations.length > 0) {\n        for (let i = 0; i < locations.length; i++) {\n          polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n        }\n      }\n\n      polyline.setLatLngs(polylinePoints); // update style\n\n      polyline.setStyle({\n        color: props.color,\n        weight: props.weight,\n        opacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Updates the polygon associated to the layer.\n   * @param {Polygon.props} props - The layer properties allowing the update of the polygon\n   */\n\n\n  updatePolygon(props) {\n    let polygon = this.getPolygon(props);\n\n    if (!Object(Utils["k" /* isDefined */])(polygon)) {\n      // adds a new polygon to the leaflet renderer\n      const polygonObj = this.addPolygon(props);\n      this.addPolygonToLayer(props, polygonObj);\n    } else {\n      // update location\n      const vertices = props.vertices[props.polygonId];\n      let polygonPoints = [];\n\n      if (Object(Utils["k" /* isDefined */])(vertices) && vertices.length > 0) {\n        for (let i = 0; i < vertices.length - 1; i = i + 2) {\n          let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n          polygonPoints.push([latLon.lat, latLon.lng]);\n        }\n      }\n\n      polygon.setLatLngs(polygonPoints); // update style\n\n      polygon.setStyle({\n        color: props.outlineColor,\n        weight: props.outlineWidth,\n        fillColor: props.color,\n        fill: true,\n        fillOpacity: props.opacity\n      });\n    }\n  }\n  /**\n   * Abstract method to remove a polygon from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polygon - The Map polygon object\n   */\n\n\n  removePolygonFromLayer(polygon) {\n    this.map.removeLayer(polygon);\n  }\n  /**\n   * Add a polygon to the map.\n   * @param {Object} properties\n   */\n\n\n  addPolygon(properties) {\n    const vertices = properties.vertices[properties.polygonId];\n    let polygonPoints = [];\n\n    if (Object(Utils["k" /* isDefined */])(vertices) && vertices.length > 0) {\n      for (let i = 0; i < vertices.length - 1; i = i + 2) {\n        let latLon = new leaflet_src_default.a.LatLng(vertices[i + 1], vertices[i]);\n        polygonPoints.push([latLon.lat, latLon.lng]);\n      }\n    } //create polygon\n\n\n    let polygon = new leaflet_src_default.a.polygon(polygonPoints, {\n      color: properties.outlineColor,\n      weight: properties.outlineWidth,\n      fillColor: properties.color,\n      fill: true,\n      fillOpacity: properties.opacity\n    }).addTo(this.map);\n    return polygon;\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS91aS92aWV3L21hcC9NYXBWaWV3LmpzPzA1ZDciLCJ3ZWJwYWNrOi8vLy9ob21lL25ldnJvL1Byb2dzL3Byb2dzLWxvY2FsL2dpdC1yZXBvL09TSC9vc2gtanMvc291cmNlL2NvcmUvdWkvdmlldy9tYXAvTGVhZmxldFZpZXcuanM/NWMzMCJdLCJuYW1lcyI6WyJNYXBWaWV3IiwiVmlldyIsImNvbnN0cnVjdG9yIiwicHJvcGVydGllcyIsImxheWVySWRUb01hcmtlcnMiLCJsYXllcklkVG9Qb2x5bGluZXMiLCJsYXllcklkVG9FbGxpcHNvaWRzIiwibGF5ZXJJZFRvUG9seWdvbiIsImxheWVySWRUb0ZydXN0dW0iLCJsYXllcklkVG9EcmFwZWRJbWFnZSIsInNldERhdGEiLCJkYXRhU291cmNlSWQiLCJkYXRhIiwidmFsdWVzIiwiaSIsImxlbmd0aCIsImQiLCJ0eXBlIiwidXBkYXRlTWFya2VyIiwidXBkYXRlUG9seWxpbmUiLCJ1cGRhdGVEcmFwZWRJbWFnZSIsInVwZGF0ZUVsbGlwc2UiLCJ1cGRhdGVQb2x5Z29uIiwidXBkYXRlQ29QbGFuYXJQb2x5Z29uIiwidXBkYXRlRnJ1c3R1bSIsImFkZFBvbHlnb25Ub0xheWVyIiwicHJvcHMiLCJwb2x5Z29uIiwiY3VycmVudExheWVyIiwiZ2V0TGF5ZXIiLCJpZCIsInBvbHlnb25JZCIsImFkZE1hcmtlclRvTGF5ZXIiLCJtYXJrZXJPYmplY3QiLCJtYXJrZXJJZCIsImFkZFBvbHlsaW5lVG9MYXllciIsInBvbHlsaW5lT2JqZWN0IiwicG9seWxpbmVJZCIsImFkZEVsbGlwc2VUb0xheWVyIiwiZWxsaXBzZU9iamVjdCIsImVsbGlwc2VJZCIsImFkZERyYXBlZEltYWdlVG9MYXllciIsImRyYXBlZEltYWdlT2JqZWN0IiwiZHJhcGVkSW1hZ2VJZCIsImFkZEZydXN0dW1Ub0xheWVyIiwiZnJ1c3R1bSIsImZydXN0dW1JZCIsImdldFBvbHlnb25zIiwiYXJyYXkiLCJwdXNoIiwiZ2V0UG9seWdvbiIsImdldE1hcmtlciIsImdldE1hcmtlcnMiLCJnZXRQb2x5bGluZXMiLCJnZXRFbGxpcHNvaWRzIiwiZ2V0UG9seWxpbmUiLCJnZXRFbGxpcHNlIiwiZ2V0RHJhcGVkSW1hZ2UiLCJnZXRGcnVzdHVtcyIsImdldEZydXN0dW0iLCJsYXllcklkIiwibGF5ZXJzIiwicmVtb3ZlQWxsRnJvbUxheWVyIiwibGF5ZXIiLCJyZW1vdmVNYXJrZXJzIiwicmVtb3ZlUG9seWxpbmVzIiwicmVtb3ZlRWxsaXBzb2lkcyIsInJlbW92ZVBvbHlnb25zIiwicmVtb3ZlRnJ1c3R1bXMiLCJpc0RlZmluZWQiLCJwb2x5Z29uTWFwIiwicmVtb3ZlUG9seWdvbkZyb21MYXllciIsIm1hcmtlcnNNYXAiLCJtYXJrZXIiLCJyZW1vdmVNYXJrZXJGcm9tTGF5ZXIiLCJlbGxpcHNlIiwiZWxsaXBzZU1hcCIsInJlbW92ZUVsbGlwc2VGcm9tTGF5ZXIiLCJwb2x5bGluZSIsInBvbHlsaW5lc01hcCIsInJlbW92ZVBvbHlsaW5lRnJvbUxheWVyIiwicmVtb3ZlRHJhcGVkSW1hZ2VzIiwiZHJhcGVkSW1hZ2UiLCJkcmFwZWRJbWFnZU1hcCIsInJlbW92ZURyYXBlZEltYWdlRnJvbUxheWVyIiwiZnJ1c3R1bU1hcCIsInJlbW92ZUZydXN0dW1Gcm9tTGF5ZXIiLCJvbk1hcmtlckxlZnRDbGljayIsImV2ZW50Iiwib25MZWZ0Q2xpY2siLCJjYWxsIiwib25NYXJrZXJSaWdodENsaWNrIiwib25SaWdodENsaWNrIiwib25NYXJrZXJNb3ZlIiwib25Nb3ZlIiwib25NYXJrZXJIb3ZlciIsIm9uSG92ZXIiLCJnZXRMYXllcklkIiwic3BsaXQiLCJnZXRNYXJrZXJJZCIsIkxlYWZsZXRWaWV3Iiwic3VwcG9ydGVkTGF5ZXJzIiwiY3NzQ2xhc3MiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGl2SWQiLCJjbGFzc05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJjc3MiLCJiZWZvcmVBZGRpbmdJdGVtcyIsIm9wdGlvbnMiLCJpbml0TWFwIiwiaW5pdGlhbFZpZXciLCJsb2NhdGlvbiIsIkwiLCJMYXRMbmciLCJ6b29tIiwiZmlyc3QiLCJmb2xsb3ciLCJhdXRvWm9vbU9uRmlyc3RNYXJrZXIiLCJkZWZhdWx0TGF5ZXJzIiwiZ2V0RGVmYXVsdExheWVycyIsImRlZmF1bHRMYXllciIsImJhc2VMYXllcnMiLCJvdmVybGF5cyIsIm5hbWUiLCJsYXQiLCJsb24iLCJvdmVybGF5TGF5ZXJzIiwibWFwIiwiTWFwIiwiZnVsbHNjcmVlbkNvbnRyb2wiLCJjb250cm9sIiwiYWRkVG8iLCJzZXRWaWV3IiwibWF4Wm9vbSIsIm1iQXR0ciIsIm1iVXJsIiwiZXNyaUxpbmsiLCJlc3JpV2hvbGluayIsImVzcmlMYXllciIsInRpbGVMYXllciIsImF0dHJpYnV0aW9uIiwibWF4TmF0aXZlWm9vbSIsInN0cmVldHMiLCJpbml0TGF5ZXJzIiwib3NtVXJsIiwib3NtQXR0cmliIiwib3NtIiwibWluWm9vbSIsImFkZExheWVyIiwiYWRkTWFya2VyIiwiYXNzZXJ0RGVmaW5lZCIsImljb24iLCJtYXJrZXJJY29uIiwiaWNvbkFuY2hvciIsImljb25VcmwiLCJpY29uU2l6ZSIsInkiLCJ4IiwibGFiZWwiLCJiaW5kVG9vbHRpcCIsInBlcm1hbmVudCIsImRpcmVjdGlvbiIsIm9mZnNldCIsInBvaW50IiwibGFiZWxPZmZzZXQiLCJoYXNPd25Qcm9wZXJ0eSIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImJpbmRQb3B1cCIsInNldFpJbmRleE9mZnNldCIsInpJbmRleCIsIm9yaWVudGF0aW9uIiwic2V0Um90YXRpb25BbmdsZSIsImhlYWRpbmciLCJhZGRQb2x5bGluZSIsImxvY2F0aW9ucyIsInBvbHlsaW5lUG9pbnRzIiwiUG9seWxpbmUiLCJjb2xvciIsIndlaWdodCIsIm9wYWNpdHkiLCJzbW9vdGhGYWN0b3IiLCJtSWQiLCJvbiIsImlzTmFOIiwibmV3TGF0TG5nIiwic2V0TGF0TG5nIiwibWFya2VyQm91bmRzIiwibGF0TG5nQm91bmRzIiwiZml0Qm91bmRzIiwiem9vbUxldmVsIiwiX2ljb24iLCJzZXRJY29uIiwicmVtb3ZlTGF5ZXIiLCJwb2x5bGluZU9iaiIsInNldExhdExuZ3MiLCJzZXRTdHlsZSIsInBvbHlnb25PYmoiLCJhZGRQb2x5Z29uIiwidmVydGljZXMiLCJwb2x5Z29uUG9pbnRzIiwibGF0TG9uIiwibG5nIiwib3V0bGluZUNvbG9yIiwib3V0bGluZVdpZHRoIiwiZmlsbENvbG9yIiwiZmlsbCIsImZpbGxPcGFjaXR5IiwiYXR0YWNoVG8iLCJwYXJlbnRFbGVtZW50IiwiaW52YWxpZGF0ZVNpemUiLCJvblJlc2l6ZSIsInRoYXQiLCJzZXRUaW1lb3V0Iiwib25DaGFuZ2UiLCJleHRlbmQiLCJvcGVuUG9wdXAiLCJwb3B1cCIsIl9wb3B1cCIsImZpcmUiLCJwcm90b19pbml0SWNvbiIsIk1hcmtlciIsInByb3RvdHlwZSIsIl9pbml0SWNvbiIsInByb3RvX3NldFBvcyIsIl9zZXRQb3MiLCJvbGRJRSIsIkRvbVV0aWwiLCJUUkFOU0ZPUk0iLCJhZGRJbml0SG9vayIsInJvdGF0aW9uT3JpZ2luIiwicm90YXRpb25BbmdsZSIsImluY2x1ZGUiLCJwb3MiLCJzdHlsZSIsImFuZ2xlIiwidXBkYXRlIiwic2V0Um90YXRpb25PcmlnaW4iLCJvcmlnaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQSxlQUFOLFNBQXNCQyx1QkFBdEIsQ0FBMkI7QUFDdkJDLGFBQVcsQ0FBQ0MsVUFBRCxFQUFhO0FBQ3BCLFVBQU1BLFVBQU4sRUFEb0IsQ0FHcEI7O0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0IsRUFBeEIsQ0FKb0IsQ0FN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KioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFZpZXcgZnJvbSBcIi4uL1ZpZXdcIjtcbmltcG9ydCB7aXNEZWZpbmVkfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvVXRpbHNcIjtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGFuIGFic3RyYWN0IGNsYXNzIGluIGNoYXJnZSBvZiBoYW5kbGluZyBjb21tb24gTWFwIG9wZXJhdGlvbnMuXG4gKiBAZXh0ZW5kcyBWaWV3XG4gKi9cbmNsYXNzIE1hcFZpZXcgZXh0ZW5kcyBWaWV3IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHByb3BlcnRpZXMpO1xuXG4gICAgICAgIC8vIG1hcCBMYXllciBpZCB0byBhcnJheSBvZiBjb3JyZXNwb25kaW5nIG1hcmtlcnNcbiAgICAgICAgdGhpcy5sYXllcklkVG9NYXJrZXJzID0ge307XG5cbiAgICAgICAgLy8gbWFwIExheWVyIGlkIHRvIGFycmF5IG9mIGNvcnJlc3BvbmRpbmcgcG9seWxpbmVzXG4gICAgICAgIHRoaXMubGF5ZXJJZFRvUG9seWxpbmVzPSB7fTtcblxuICAgICAgICAvLyBtYXAgTGF5ZXIgaWQgdG8gYXJyYXkgb2YgY29ycmVzcG9uZGluZyBwb2x5bGluZXNcbiAgICAgICAgdGhpcy5sYXllcklkVG9FbGxpcHNvaWRzPSB7fTtcblxuICAgICAgICAvLyBtYXAgTGF5ZXIgaWQgdG8gYXJyYXkgb2YgY29ycmVzcG9uZGluZyBwb2x5Z29uc1xuICAgICAgICB0aGlzLmxheWVySWRUb1BvbHlnb249IHt9O1xuXG4gICAgICAgIC8vIG1hcCBMYXllciBpZCB0byBhcnJheSBvZiBjb3JyZXNwb25kaW5nIGZydXN0dW1zXG4gICAgICAgIHRoaXMubGF5ZXJJZFRvRnJ1c3R1bT0ge307XG5cbiAgICAgICAgLy8gbWFwIExheWVyIGlkIHRvIGFycmF5IG9mIGNvcnJlc3BvbmRpbmcgZHJhcGluZ1xuICAgICAgICB0aGlzLmxheWVySWRUb0RyYXBlZEltYWdlPSB7fTtcbiAgICB9XG5cbiAgICBzZXREYXRhKGRhdGFTb3VyY2VJZCwgZGF0YSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBkYXRhLnZhbHVlcztcbiAgICAgICAgZm9yKGxldCBpPTA7aSA8IHZhbHVlcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgaWYoZGF0YS50eXBlID09PSAnbWFya2VyJykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTWFya2VyKGQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGRhdGEudHlwZSA9PT0gJ3BvbHlsaW5lJykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUG9seWxpbmUoZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYoZGF0YS50eXBlID09PSAnZHJhcGVkSW1hZ2UnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVEcmFwZWRJbWFnZShkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhLnR5cGUgPT09ICdlbGxpcHNlJykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRWxsaXBzZShkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAncG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvbHlnb24oZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ2NvcGxhbmFyUG9seWdvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvUGxhbmFyUG9seWdvbihkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZihkYXRhLnR5cGUgPT09ICdmcnVzdHVtJykge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRnJ1c3R1bShkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFBvbHlnb25Ub0xheWVyKHByb3BzLCBwb2x5Z29uKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMYXllciA9IHRoaXMuZ2V0TGF5ZXIocHJvcHMpO1xuICAgICAgICAvLyBhc3NvY2lhdGUgdGhlIGxpc3Qgb2YgbWFya2VycyBvd25pbmcgYnkgYSBzcGVjaWZpYyBtYXJrZXJcbiAgICAgICAgaWYoIShwcm9wcy5pZCBpbiB0aGlzLmxheWVySWRUb1BvbHlnb24pKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVySWRUb1BvbHlnb25bcHJvcHMuaWRdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXllcklkVG9Qb2x5Z29uW3Byb3BzLmlkXVtwcm9wcy5wb2x5Z29uSWRdID0gcG9seWdvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NvY2lhdGUgYSBtYXJrZXJJZCB0byBhIExheWVyIGZvciBhIGZhc3QgbG9va3VwXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7UG9pbnRNYXJrZXJMYXllci5wcm9wc30gbGF5ZXIgLSB0aGUgTGF5ZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcmtlck9iamVjdCAtIHRoZSBNYXAgbWFya2VyIG9iamVjdFxuICAgICAqL1xuICAgIGFkZE1hcmtlclRvTGF5ZXIocHJvcHMsIG1hcmtlck9iamVjdCkge1xuICAgICAgICBjb25zdCBjdXJyZW50TGF5ZXIgPSB0aGlzLmdldExheWVyKHByb3BzKTtcbiAgICAgICAgLy8gYXNzb2NpYXRlIHRoZSBsaXN0IG9mIG1hcmtlcnMgb3duaW5nIGJ5IGEgc3BlY2lmaWMgbWFya2VyXG4gICAgICAgIGlmKCEocHJvcHMuaWQgaW4gdGhpcy5sYXllcklkVG9NYXJrZXJzKSkge1xuICAgICAgICAgICAgdGhpcy5sYXllcklkVG9NYXJrZXJzW3Byb3BzLmlkXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5ZXJJZFRvTWFya2Vyc1twcm9wcy5pZF1bcHJvcHMubWFya2VySWRdID0gbWFya2VyT2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZSBhIHBvbHlsaW5lSWQgdG8gYSBMYXllciBmb3IgYSBmYXN0IGxvb2t1cFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BvbHlsaW5lLnByb3BzfSBsYXllciAtIHRoZSBMYXllciBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9seWxpbmVPYmplY3QgLSB0aGUgTWFwIHBvbHlsaW5lIG9iamVjdFxuICAgICAqL1xuICAgIGFkZFBvbHlsaW5lVG9MYXllcihwcm9wcywgcG9seWxpbmVPYmplY3QpIHtcbiAgICAgICAgLy8gYXNzb2NpYXRlIHRoZSBsaXN0IG9mIG1hcmtlcnMgb3duaW5nIGJ5IGEgc3BlY2lmaWMgbWFya2VyXG4gICAgICAgIGlmKCEocHJvcHMuaWQgaW4gdGhpcy5sYXllcklkVG9Qb2x5bGluZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVySWRUb1BvbHlsaW5lc1twcm9wcy5pZF0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheWVySWRUb1BvbHlsaW5lc1twcm9wcy5pZF1bcHJvcHMucG9seWxpbmVJZF0gPSBwb2x5bGluZU9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NvY2lhdGUgYSBlbGxpcHNlSWQgdG8gYSBMYXllciBmb3IgYSBmYXN0IGxvb2t1cFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0VsbGlwc2UucHJvcHN9IGxheWVyIC0gdGhlIExheWVyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGxpcHNlT2JqZWN0IC0gdGhlIE1hcCBlbGxpcHNlIG9iamVjdFxuICAgICAqL1xuICAgIGFkZEVsbGlwc2VUb0xheWVyKHByb3BzLCBlbGxpcHNlT2JqZWN0KSB7XG4gICAgICAgIC8vIGFzc29jaWF0ZSB0aGUgbGlzdCBvZiBtYXJrZXJzIG93bmluZyBieSBhIHNwZWNpZmljIG1hcmtlclxuICAgICAgICBpZighKHByb3BzLmlkIGluIHRoaXMubGF5ZXJJZFRvRWxsaXBzb2lkcykpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJJZFRvRWxsaXBzb2lkc1twcm9wcy5pZF0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheWVySWRUb0VsbGlwc29pZHNbcHJvcHMuaWRdW3Byb3BzLmVsbGlwc2VJZF0gPSBlbGxpcHNlT2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc29jaWF0ZSBhIGRyYXBlZEltYWdlSWQgdG8gYSBMYXllciBmb3IgYSBmYXN0IGxvb2t1cFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0ltYWdlRHJhcGluZy5wcm9wc30gbGF5ZXIgLSB0aGUgTGF5ZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRyYXBlZEltYWdlT2JqZWN0IC0gdGhlIE1hcCBkcmFwZWRJbWFnZSBvYmplY3RcbiAgICAgKi9cbiAgICBhZGREcmFwZWRJbWFnZVRvTGF5ZXIocHJvcHMsIGRyYXBlZEltYWdlT2JqZWN0KSB7XG4gICAgICAgIC8vIGFzc29jaWF0ZSB0aGUgbGlzdCBvZiBtYXJrZXJzIG93bmluZyBieSBhIHNwZWNpZmljIG1hcmtlclxuICAgICAgICBpZighKHByb3BzLmlkIGluIHRoaXMubGF5ZXJJZFRvRHJhcGVkSW1hZ2UpKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVySWRUb0RyYXBlZEltYWdlW3Byb3BzLmlkXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5ZXJJZFRvRHJhcGVkSW1hZ2VbcHJvcHMuaWRdW3Byb3BzLmRyYXBlZEltYWdlSWRdID0gZHJhcGVkSW1hZ2VPYmplY3Q7XG4gICAgfVxuXG4gICAgYWRkRnJ1c3R1bVRvTGF5ZXIocHJvcHMsIGZydXN0dW0pIHtcbiAgICAgICAgY29uc3QgY3VycmVudExheWVyID0gdGhpcy5nZXRMYXllcihwcm9wcyk7XG4gICAgICAgIC8vIGFzc29jaWF0ZSB0aGUgbGlzdCBvZiBtYXJrZXJzIG93bmluZyBieSBhIHNwZWNpZmljIG1hcmtlclxuICAgICAgICBpZighKHByb3BzLmlkIGluIHRoaXMubGF5ZXJJZFRvRnJ1c3R1bSkpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJJZFRvRnJ1c3R1bVtwcm9wcy5pZF0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheWVySWRUb0ZydXN0dW1bcHJvcHMuaWRdW3Byb3BzLmZydXN0dW1JZF0gPSBmcnVzdHVtO1xuICAgIH1cblxuICAgIGdldFBvbHlnb25zKCkge1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IobGV0IGlkIGluIHRoaXMubGF5ZXJJZFRvUG9seWdvbikge1xuICAgICAgICAgICAgZm9yKGxldCBwb2x5Z29uSWQgaW4gdGhpcy5sYXllcklkVG9Qb2x5Z29uW2lkXSkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godGhpcy5sYXllcklkVG9Qb2x5Z29uW2lkXVtwb2x5Z29uSWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgZ2V0UG9seWdvbihwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb1BvbHlnb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXllcklkVG9Qb2x5Z29uW3Byb3BzLmlkXVtwcm9wcy5wb2x5Z29uSWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWFya2VySWQgYXNzb2NpYXRlIHRvIHRoZSBMYXllclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BvaW50TWFya2VyTGF5ZXIucHJvcHN9IHByb3BzIC0gdGhlIExheWVyIE9iamVjdFxuICAgICAqL1xuICAgIGdldE1hcmtlcihwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb01hcmtlcnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXllcklkVG9NYXJrZXJzW3Byb3BzLmlkXVtwcm9wcy5tYXJrZXJJZF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBtYXJrZXJzIGNvbnRhaW5lZCBpbiB0aGlzIHZpZXdcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgZ2V0TWFya2VycygpIHtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLmxheWVySWRUb01hcmtlcnMpIHtcbiAgICAgICAgICAgIGZvcihsZXQgbWFya2VySWQgaW4gdGhpcy5sYXllcklkVG9NYXJrZXJzW2lkXSkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godGhpcy5sYXllcklkVG9NYXJrZXJzW2lkXVttYXJrZXJJZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHBvbHlsaW5lcyBjb250YWluZWQgaW4gdGhpcyB2aWV3XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGdldFBvbHlsaW5lcygpIHtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLmxheWVySWRUb1BvbHlsaW5lcykge1xuICAgICAgICAgICAgZm9yKGxldCBwb2x5bGluZUlkIGluIHRoaXMubGF5ZXJJZFRvUG9seWxpbmVzW2lkXSkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godGhpcy5sYXllcklkVG9Qb2x5bGluZXNbaWRdW3BvbHlsaW5lSWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBlbGxwc29pZHMgY29udGFpbmVkIGluIHRoaXMgdmlld1xuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBnZXRFbGxpcHNvaWRzKCkge1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IobGV0IGlkIGluIHRoaXMubGF5ZXJJZFRvRWxsaXBzb2lkcykge1xuICAgICAgICAgICAgZm9yKGxldCBlbGxpcHNlSWQgaW4gdGhpcy5sYXllcklkVG9FbGxpcHNvaWRzW2lkXSkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godGhpcy5sYXllcklkVG9FbGxpcHNvaWRzW2lkXVtlbGxpcHNlSWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBlbGxpcHNlIGFzc29jaWF0ZSB0byB0aGUgTGF5ZXJcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtFbGxpcHNlLnByb3BzfSBsYXllciAtIHRoZSBMYXllciBPYmplY3RcbiAgICAgKi9cbiAgICBnZXRQb2x5bGluZShwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb0VsbGlwc29pZHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXllcklkVG9FbGxpcHNvaWRzW3Byb3BzLmlkXVtwcm9wcy5lbGxpcHNlSWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZWxsaXBzZSBhc3NvY2lhdGUgdG8gdGhlIExheWVyXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7RWxsaXBzZS5wcm9wc30gbGF5ZXIgLSB0aGUgTGF5ZXIgT2JqZWN0XG4gICAgICovXG4gICAgZ2V0RWxsaXBzZShwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb0VsbGlwc29pZHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXllcklkVG9FbGxpcHNvaWRzW3Byb3BzLmlkXVtwcm9wcy5lbGxpcHNlSWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcG9seWxpbmUgYXNzb2NpYXRlIHRvIHRoZSBMYXllclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1BvbHlsaW5lLnByb3BzfSBsYXllciAtIHRoZSBMYXllciBPYmplY3RcbiAgICAgKi9cbiAgICBnZXRQb2x5bGluZShwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb1BvbHlsaW5lcykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmxheWVySWRUb1BvbHlsaW5lc1twcm9wcy5pZF1bcHJvcHMucG9seWxpbmVJZF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkcmFwZWQgaW1hZ2UgYXNzb2NpYXRlIHRvIHRoZSBMYXllclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge0ltYWdlRHJhcGluZ0xheWVyLnByb3BzfSBsYXllciAtIHRoZSBMYXllciBPYmplY3RcbiAgICAgKi9cbiAgICBnZXREcmFwZWRJbWFnZShwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb0RyYXBlZEltYWdlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJJZFRvRHJhcGVkSW1hZ2VbcHJvcHMuaWRdW3Byb3BzLmRyYXBlZEltYWdlSWRdO1xuICAgIH1cblxuICAgIGdldEZydXN0dW1zKCkge1xuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgICAgICBmb3IobGV0IGlkIGluIHRoaXMubGF5ZXJJZFRvRnJ1c3R1bSkge1xuICAgICAgICAgICAgZm9yKGxldCBmcnVzdHVtSWQgaW4gdGhpcy5sYXllcklkVG9GcnVzdHVtW2lkXSkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2godGhpcy5sYXllcklkVG9GcnVzdHVtW2lkXVtmcnVzdHVtSWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgZ2V0RnJ1c3R1bShwcm9wcykge1xuICAgICAgICBpZighKHByb3BzLmlkIGluICB0aGlzLmxheWVySWRUb0ZydXN0dW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5sYXllcklkVG9GcnVzdHVtW3Byb3BzLmlkXVtwcm9wcy5mcnVzdHVtSWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgTGF5ZXIgYXNzb2NpYXRlZCB0byBpdHMgaWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGF5ZXJJZCAtIHRoZSBpZCBvZiB0aGUgTGF5ZXJcbiAgICAgKiBAcmV0dXJuIHtMYXllcn0gLSB0aGUgY29ycmVzcG9uZGluZyBsYXllciwgbnVsbCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBnZXRMYXllcihsYXllcklkKSB7XG4gICAgICAgIC8vIGZpbmQgY29ycmVzcG9uZGluZyBsYXllclxuICAgICAgICBmb3IgKGxldCBjdXJyZW50TGF5ZXIgb2YgdGhpcy5sYXllcnMpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50TGF5ZXIucHJvcHMuaWQgPT09IGxheWVySWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudExheWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBDb3JyZXNwb25kaW5nIExheWVyXG4gICAgICogQHBhcmFtIHtMYXllcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgb2JqZWN0XG4gICAgICovXG4gICAgcmVtb3ZlQWxsRnJvbUxheWVyKGxheWVyKSB7XG4gICAgICAgIHN1cGVyLnJlbW92ZUFsbEZyb21MYXllcihsYXllcik7XG4gICAgICAgIC8vIGNoZWNrIGZvciBtYXJrZXJcbiAgICAgICAgdGhpcy5yZW1vdmVNYXJrZXJzKGxheWVyKTtcblxuICAgICAgICAvLyBjaGVjayBmb3IgcG9seWxpbmVzXG4gICAgICAgIHRoaXMucmVtb3ZlUG9seWxpbmVzKGxheWVyKTtcblxuICAgICAgICB0aGlzLnJlbW92ZUVsbGlwc29pZHMobGF5ZXIpO1xuXG4gICAgICAgIHRoaXMucmVtb3ZlUG9seWdvbnMobGF5ZXIpO1xuXG4gICAgICAgIHRoaXMucmVtb3ZlRnJ1c3R1bXMobGF5ZXIpO1xuICAgIH1cblxuICAgIHJlbW92ZVBvbHlnb25zKGxheWVyKSB7XG4gICAgICAgIGlmKGlzRGVmaW5lZChsYXllci5wcm9wcy5wb2x5Z29uSWQpKSB7XG4gICAgICAgICAgICBjb25zdCBwb2x5Z29uTWFwID0gdGhpcy5sYXllcklkVG9Qb2x5Z29uW2xheWVyLnByb3BzLmlkXTtcbiAgICAgICAgICAgIGlmKGlzRGVmaW5lZChwb2x5Z29uTWFwKSkge1xuICAgICAgICAgICAgICAgIGZvcihsZXQgcG9seWdvbklkIGluIHBvbHlnb25NYXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9seWdvbiA9IHBvbHlnb25NYXBbcG9seWdvbklkXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQb2x5Z29uRnJvbUxheWVyKHBvbHlnb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVtb3ZlIG1hcmtlcnMgaWRzIGZyb20gTGF5ZXIgbWFwXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sYXllcklkVG9Qb2x5Z29uW2xheWVyLnByb3BzLmlkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgbWFya2VycyBjb3JyZXNwb25kaW5nIHRvIGEgUG9pbnRNYXJrZXIgTGF5ZXJcbiAgICAgKiBAcGFyYW0ge1BvaW50TWFya2VyTGF5ZXJ9IGxheWVyIC0gdGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgbWFya2VycyBmcm9tXG4gICAgICovXG4gICAgcmVtb3ZlTWFya2VycyhsYXllcikge1xuICAgICAgICBpZihpc0RlZmluZWQobGF5ZXIucHJvcHMubWFya2VySWQpKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrZXJzTWFwID0gdGhpcy5sYXllcklkVG9NYXJrZXJzW2xheWVyLnByb3BzLmlkXTtcbiAgICAgICAgICAgIGlmKGlzRGVmaW5lZChtYXJrZXJzTWFwKSkge1xuICAgICAgICAgICAgICAgIGZvcihsZXQgbWFya2VySWQgaW4gbWFya2Vyc01hcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBtYXJrZXJzTWFwW21hcmtlcklkXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVNYXJrZXJGcm9tTGF5ZXIobWFya2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBtYXJrZXJzIGlkcyBmcm9tIExheWVyIG1hcFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubGF5ZXJJZFRvTWFya2Vyc1tsYXllci5wcm9wcy5pZF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGVsbGlwc29pZHMgY29ycmVzcG9uZGluZyB0byBhIEVsbGlwc2VMYXllciBMYXllclxuICAgICAqIEBwYXJhbSB7RWxsaXBzZX0gZWxsaXBzZSAtIHRoZSBsYXllciB0byByZW1vdmUgdGhlIGVsbGlwc29pZHMgZnJvbVxuICAgICAqL1xuICAgIHJlbW92ZUVsbGlwc29pZHMoZWxsaXBzZSkge1xuICAgICAgICBpZihpc0RlZmluZWQoZWxsaXBzZS5wcm9wcy5lbGxpcHNlSWQpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGxpcHNlTWFwID0gdGhpcy5sYXllcklkVG9FbGxpcHNvaWRzW2VsbGlwc2UucHJvcHMuaWRdO1xuICAgICAgICAgICAgaWYoaXNEZWZpbmVkKGVsbGlwc2VNYXApKSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBlbGxpcHNlSWQgaW4gZWxsaXBzZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGxpcHNlID0gZWxsaXBzZU1hcFtlbGxpcHNlSWRdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUVsbGlwc2VGcm9tTGF5ZXIoZWxsaXBzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZW1vdmUgcG9seWxpbmVzIGlkcyBmcm9tIExheWVyIG1hcFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubGF5ZXJJZFRvRWxsaXBzb2lkc1tlbGxpcHNlLnByb3BzLmlkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgcG9seWxpbmVzIGNvcnJlc3BvbmRpbmcgdG8gYSBQb2x5bGluZUxheWVyIExheWVyXG4gICAgICogQHBhcmFtIHtQb2x5bGluZX0gcG9seWxpbmUgLSB0aGUgbGF5ZXIgdG8gcmVtb3ZlIHRoZSBwb2x5bGluZXMgZnJvbVxuICAgICAqL1xuICAgIHJlbW92ZVBvbHlsaW5lcyhwb2x5bGluZSkge1xuICAgICAgICBpZihpc0RlZmluZWQocG9seWxpbmUucHJvcHMucG9seWxpbmVJZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvbHlsaW5lc01hcCA9IHRoaXMubGF5ZXJJZFRvUG9seWxpbmVzW3BvbHlsaW5lLnByb3BzLmlkXTtcbiAgICAgICAgICAgIGlmKGlzRGVmaW5lZChwb2x5bGluZXNNYXApKSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBwb2x5bGluZUlkIGluIHBvbHlsaW5lc01hcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IHBvbHlsaW5lc01hcFtwb2x5bGluZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQb2x5bGluZUZyb21MYXllcihwb2x5bGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZW1vdmUgcG9seWxpbmVzIGlkcyBmcm9tIExheWVyIG1hcFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubGF5ZXJJZFRvUG9seWxpbmVzW3BvbHlsaW5lLnByb3BzLmlkXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgZHJhcGVkSW1hZ2UgY29ycmVzcG9uZGluZyB0byBhIEltYWdlRHJhcGluZyBMYXllclxuICAgICAqIEBwYXJhbSB7SW1hZ2VEcmFwaW5nfSBpbWFnZURyYXBpbmcgLSB0aGUgbGF5ZXIgdG8gcmVtb3ZlIHRoZSBkcmFwZWRJbWFnZSBmcm9tXG4gICAgICovXG4gICAgcmVtb3ZlRHJhcGVkSW1hZ2VzKGRyYXBlZEltYWdlKSB7XG4gICAgICAgIGlmKGlzRGVmaW5lZChkcmFwZWRJbWFnZS5wcm9wcy5kcmFwZWRJbWFnZUlkKSkge1xuICAgICAgICAgICAgY29uc3QgZHJhcGVkSW1hZ2VNYXAgPSB0aGlzLmxheWVySWRUb0RyYXBlZEltYWdlW2RyYXBlZEltYWdlLnByb3BzLmlkXTtcbiAgICAgICAgICAgIGlmKGlzRGVmaW5lZChkcmFwZWRJbWFnZU1hcCkpIHtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGRyYXBlZEltYWdlSWQgaW4gZHJhcGVkSW1hZ2VNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHJhcGVkSW1hZ2UgPSBkcmFwZWRJbWFnZU1hcFtkcmFwZWRJbWFnZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVEcmFwZWRJbWFnZUZyb21MYXllcihkcmFwZWRJbWFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZW1vdmUgZHJhcGVkSW1hZ2UgaWRzIGZyb20gTGF5ZXIgbWFwXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5sYXllcklkVG9EcmFwZWRJbWFnZVtkcmFwZWRJbWFnZS5wcm9wcy5pZF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGZydXN0dW1zIGNvcnJlc3BvbmRpbmcgdG8gYSBGcnVzdHVtIExheWVyXG4gICAgICogQHBhcmFtIHtGcnVzdHVtTGF5ZXJ9IHBvbHlsaW5lIC0gdGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgRnJ1c3R1bSBmcm9tXG4gICAgICovXG4gICAgcmVtb3ZlRnJ1c3R1bXMobGF5ZXIpIHtcbiAgICAgICAgaWYoaXNEZWZpbmVkKGxheWVyLnByb3BzLmZydXN0dW1JZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZydXN0dW1NYXAgPSB0aGlzLmxheWVySWRUb0ZydXN0dW1bbGF5ZXIucHJvcHMuaWRdO1xuICAgICAgICAgICAgaWYoaXNEZWZpbmVkKGZydXN0dW1NYXApKSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCBmcnVzdHVtSWQgaW4gZnJ1c3R1bU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcnVzdHVtID0gZnJ1c3R1bU1hcFtmcnVzdHVtSWRdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZydXN0dW1Gcm9tTGF5ZXIoZnJ1c3R1bSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZW1vdmUgbWFya2VycyBpZHMgZnJvbSBMYXllciBtYXBcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxheWVySWRUb0ZydXN0dW1bbGF5ZXIucHJvcHMuaWRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFic3RyYWN0IG1ldGhvZCB0byByZW1vdmUgYSBtYXJrZXIgZnJvbSBpdHMgY29ycmVzcG9uZGluZyBsYXllci5cbiAgICAgKiBUaGlzIGlzIGxpYnJhcnkgZGVwZW5kYW50LlxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFya2VyIC0gVGhlIE1hcCBtYXJrZXIgb2JqZWN0XG4gICAgICovXG4gICAgcmVtb3ZlTWFya2VyRnJvbUxheWVyKG1hcmtlcikge31cblxuICAgIC8qKlxuICAgICAqIEFic3RyYWN0IG1ldGhvZCB0byByZW1vdmUgYSBwb2x5bGluZSBmcm9tIGl0cyBjb3JyZXNwb25kaW5nIGxheWVyLlxuICAgICAqIFRoaXMgaXMgbGlicmFyeSBkZXBlbmRhbnQuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2x5bGluZSAtIFRoZSBNYXAgcG9seWxpbmUgb2JqZWN0XG4gICAgICovXG4gICAgcmVtb3ZlUG9seWxpbmVGcm9tTGF5ZXIocG9seWxpbmUpIHt9XG5cbiAgICAvKipcbiAgICAgKiBBYnN0cmFjdCBtZXRob2QgdG8gcmVtb3ZlIGEgZHJhcGVkIGltYWdlIGZyb20gaXRzIGNvcnJlc3BvbmRpbmcgbGF5ZXIuXG4gICAgICogVGhpcyBpcyBsaWJyYXJ5IGRlcGVuZGFudC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRyYXBlZEltYWdlIC0gVGhlIE1hcCBkcmFwZWRJbWFnZSBvYmplY3RcbiAgICAgKi9cbiAgICByZW1vdmVEcmFwZWRJbWFnZUZyb21MYXllcihkcmFwZWRJbWFnZSkge31cblxuICAgIC8qKlxuICAgICAqIEFic3RyYWN0IG1ldGhvZCB0byByZW1vdmUgYSBwb2x5Z29uIGZyb20gaXRzIGNvcnJlc3BvbmRpbmcgbGF5ZXIuXG4gICAgICogVGhpcyBpcyBsaWJyYXJ5IGRlcGVuZGFudC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvbHlnb24gLSBUaGUgTWFwIHBvbHlnb24gb2JqZWN0XG4gICAgICovXG4gICAgcmVtb3ZlUG9seWdvbkZyb21MYXllcihtYXJrZXIpIHt9XG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gY2FsbCBvbkxlZnRDbGljayBMYXllciBtZXRob2QgaWYgZXhpc3RzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1hcmtlcklkIC0gdGhlIExheWVyIG1hcmtlcklkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcmtlck9iamVjdCAtIHRoZSBWaWV3IG1hcmtlciBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1BvaW50TWFya2VyTGF5ZXJ9IGxheWVyIC0gdGhlIExheWVyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIHRoZSBvcmlnaW5hbCBNYXAgVmlldyBldmVudFxuICAgICAqL1xuICAgIG9uTWFya2VyTGVmdENsaWNrKG1hcmtlcklkLCBtYXJrZXJPYmplY3QsIGxheWVyLCBldmVudCkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGxheWVyLm9uTGVmdENsaWNrKSkge1xuICAgICAgICAgICAgbGF5ZXIub25MZWZ0Q2xpY2suY2FsbChsYXllcixtYXJrZXJJZCwgbWFya2VyT2JqZWN0LCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gY2FsbCBvblJpZ2h0Q2xpY2sgTGF5ZXIgbWV0aG9kIGlmIGV4aXN0c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrZXJJZCAtIHRoZSBMYXllciBtYXJrZXJJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXJrZXJPYmplY3QgLSB0aGUgVmlldyBtYXJrZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtQb2ludE1hcmtlckxheWVyfSBsYXllciAtIHRoZSBMYXllciBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSB0aGUgb3JpZ2luYWwgTWFwIFZpZXcgZXZlbnRcbiAgICAgKi9cbiAgICBvbk1hcmtlclJpZ2h0Q2xpY2sobWFya2VySWQsIG1hcmtlck9iamVjdCwgbGF5ZXIsIGV2ZW50KSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQobGF5ZXIub25SaWdodENsaWNrKSkge1xuICAgICAgICAgICAgbGF5ZXIub25SaWdodENsaWNrLmNhbGwobGF5ZXIsbWFya2VySWQsIG1hcmtlck9iamVjdCwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGNhbGwgb25Nb3ZlIExheWVyIG1ldGhvZCBpZiBleGlzdHNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWFya2VySWQgLSB0aGUgTGF5ZXIgbWFya2VySWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFya2VyT2JqZWN0IC0gdGhlIFZpZXcgbWFya2VyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7UG9pbnRNYXJrZXJMYXllcn0gbGF5ZXIgLSB0aGUgTGF5ZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gdGhlIG9yaWdpbmFsIE1hcCBWaWV3IGV2ZW50XG4gICAgICovXG4gICAgb25NYXJrZXJNb3ZlKG1hcmtlcklkLCBtYXJrZXJPYmplY3QsIGxheWVyLCBldmVudCkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGxheWVyLm9uTW92ZSkpIHtcbiAgICAgICAgICAgIGxheWVyLm9uTW92ZS5jYWxsKGxheWVyLG1hcmtlcklkLCBtYXJrZXJPYmplY3QsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBjYWxsIG9uSG92ZXIgTGF5ZXIgbWV0aG9kIGlmIGV4aXN0c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXJrZXJJZCAtIHRoZSBMYXllciBtYXJrZXJJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXJrZXJPYmplY3QgLSB0aGUgVmlldyBtYXJrZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtQb2ludE1hcmtlckxheWVyfSBsYXllciAtIHRoZSBMYXllciBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSB0aGUgb3JpZ2luYWwgTWFwIFZpZXcgZXZlbnRcbiAgICAgKi9cbiAgICBvbk1hcmtlckhvdmVyKG1hcmtlcklkLCBtYXJrZXJPYmplY3QsIGxheWVyLCBldmVudCkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGxheWVyLm9uSG92ZXIpKSB7XG4gICAgICAgICAgICBsYXllci5vbkhvdmVyLmNhbGwobGF5ZXIsbWFya2VySWQsIG1hcmtlck9iamVjdCwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGhlIExheWVyIGlkIGZyb20gIGEgY29uY2F0ZW5hdGVkIGlkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gdGhlIGNvbmNhdGVuYXRlZCBzdWNoIGFzIGxheWVySWQkbWFya2VySWRcbiAgICAgKiBAcmV0dXJuIHtudWxsfFN0cmluZ30gdGhlIExheWVyIGlkXG4gICAgICovXG4gICAgZ2V0TGF5ZXJJZChpZCkge1xuICAgICAgICBjb25zdCBzcGxpdCA9IGlkLnNwbGl0KCckJyk7XG5cbiAgICAgICAgaWYoaXNEZWZpbmVkKHNwbGl0KSAmJiBzcGxpdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgcmV0dXJuICBzcGxpdFswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0aGUgTWFya2VyIGlkIGZyb20gIGEgY29uY2F0ZW5hdGVkIGlkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gdGhlIGNvbmNhdGVuYXRlZCBzdWNoIGFzIGxheWVySWQkbWFya2VySWRcbiAgICAgKiBAcmV0dXJuIHtudWxsfFN0cmluZ30gdGhlIG1hcmtlciBpZFxuICAgICAqL1xuICAgIGdldE1hcmtlcklkKGlkKSB7XG4gICAgICAgIGlmKCFpc0RlZmluZWQoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzcGxpdCA9IGlkLnNwbGl0KCckJyk7XG5cbiAgICAgICAgaWYoaXNEZWZpbmVkKHNwbGl0KSAmJiBzcGxpdC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiAgc3BsaXRbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdXBkYXRlTWFya2VyKCkge31cbiAgICB1cGRhdGVQb2x5bGluZSgpIHt9XG4gICAgdXBkYXRlUG9seWdvbigpIHt9XG4gICAgdXBkYXRlRWxsaXBzZSgpIHt9XG4gICAgdXBkYXRlQ29QbGFuYXJQb2x5Z29uKCkge31cbiAgICB1cGRhdGVEcmFwZWRJbWFnZSgpIHt9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwVmlldztcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHtpc0RlZmluZWQsIGFzc2VydCwgYXNzZXJ0RGVmaW5lZH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQgTCBmcm9tICdsZWFmbGV0JztcbmltcG9ydCAnbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzJztcbmltcG9ydCBNYXBWaWV3IGZyb20gXCIuL01hcFZpZXdcIjtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGluIGNoYXJnZSBvZiBkaXNwbGF5aW5nIEdQUy9vcmllbnRhdGlvbiBkYXRhIGJ5IGFkZGluZyBhIG1hcmtlciB0byB0aGUgTGVhZmxldCBNYXAgb2JqZWN0LlxuICogQGV4dGVuZHMgTWFwVmlld1xuICogQGV4YW1wbGVcblxuIGltcG9ydCBMZWFmbGV0VmlldyBmcm9tICdjb3JlL3VpL3ZpZXcvbWFwL0xlYWZsZXRWaWV3LmpzJztcblxuIGxldCBsZWFmbGV0TWFwVmlldyA9IG5ldyBMZWFmbGV0Vmlldyh7XG5cdGNvbnRhaW5lcjogJ2xlYWZsZXRNYXAnLFxuXHRsYXllcnM6IFtcblx0ICBuZXcgUG9pbnRNYXJrZXJMYXllcih7XG4gICAgICBkYXRhU291cmNlSWQ6IGdwc0RhdGFTb3VyY2UuaWQsXG4gICAgICBnZXRMb2NhdGlvbjogKHJlYykgPT4gKHtcbiAgICAgICAgeDogcmVjLmxvY2F0aW9uLmxvbixcbiAgICAgICAgeTogcmVjLmxvY2F0aW9uLmxhdCxcbiAgICAgICAgejogcmVjLmxvY2F0aW9uLmFsdFxuICAgICAgfSksXG4gICAgICBpY29uOiAnLi9pbWFnZXMvY2FyLWxvY2F0aW9uLnBuZycsXG4gICAgICBpY29uU2l6ZTogWzMyLCA2NF0sXG4gICAgICBpY29uQW5jaG9yOiBbMTYsIDY1XSxcbiAgICAgIG5hbWU6ICdDYXInLFxuICAgICAgZGVzY3JpcHRpb246ICdHUFMgY2FyIFRvdWxvdXNlJ1xuICAgIH0pXG4gIF0sXG5cdGF1dG9ab29tT25GaXJzdE1hcmtlcjogdHJ1ZVxufSk7XG4gKi9cbmNsYXNzIExlYWZsZXRWaWV3IGV4dGVuZHMgTWFwVmlldyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgVmlldy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXM9e31dIC0gdGhlIHByb3BlcnRpZXMgb2YgdGhlIHZpZXdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5jb250YWluZXIgLSBUaGUgZGl2IGVsZW1lbnQgdG8gYXR0YWNoIHRvXG4gICAgICogQHBhcmFtIHtPYmplY3RbXX0gIFtwcm9wZXJ0aWVzLmxheWVycz1bXV0gLSBUaGUgaW5pdGlhbCBsYXllcnMgdG8gYWRkXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJvcGVydGllcy5hdXRvWm9vbU9uRmlyc3RNYXJrZXI9ZmFsc2VdIC0gYXV0byB6b29tIG9uIHRoZSBmaXJzdCBhZGRlZCBtYXJrZXJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLmZvbGxvdz1mYWxzZV0gLSBmb2xsb3cgdGhlIG1hcmtlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcy5pbml0aWFsVmlld10gLSBTZXRzIHRoZSB2aWV3IG9mIHRoZSBtYXAgKGdlb2dyYXBoaWNhbCBjZW50ZXIgYW5kIHpvb20pIHdpdGggdGhlIGdpdmVuIGFuaW1hdGlvbiBvcHRpb25zLiBbU2VlIGRldGFpbHNde0BsaW5rIGh0dHBzOi8vbGVhZmxldGpzLmNvbS9yZWZlcmVuY2UtMS43LjEuaHRtbCNtYXAtc2V0dmlld31cbiAgICAgKiBAcGFyYW0ge09iamVjdFtdfSBbcHJvcGVydGllcy5vdmVybGF5TGF5ZXJzXSAtIFtMLnRpbGVMYXllcl17QGxpbmsgaHR0cHM6Ly9sZWFmbGV0anMuY29tL3JlZmVyZW5jZS0xLjcuMS5odG1sI3RpbGVsYXllci1sLXRpbGVsYXllcn0gb2JqZWN0cyB0byB1c2UgYXMgb3ZlcmxheSBsYXllclxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IFtwcm9wZXJ0aWVzLmJhc2VMYXllcnNdIC0gW0wudGlsZUxheWVyXXtAbGluayBodHRwczovL2xlYWZsZXRqcy5jb20vcmVmZXJlbmNlLTEuNy4xLmh0bWwjdGlsZWxheWVyLWwtdGlsZWxheWVyfSBvYmplY3RzIHRvIHVzZSBhcyBiYXNlIGxheWVyXG4gICAgICpcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIHN1cHBvcnRlZExheWVyczogWydtYXJrZXInLCdkcmFwaW5nJywgJ3BvbHlsaW5lJywgJ3BvbHlnb24nXSxcbiAgICAgICAgICAgIC4uLnByb3BlcnRpZXMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBjc3NDbGFzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZGl2SWQpLmNsYXNzTmFtZTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kaXZJZCkuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY3NzQ2xhc3MrXCIgXCIrdGhpcy5jc3MpO1xuICAgIH1cblxuICAgIGJlZm9yZUFkZGluZ0l0ZW1zKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gaW5pdHMgdGhlIG1hcFxuICAgICAgICB0aGlzLmluaXRNYXAob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8tLS0tLS0tLS0tIE1BUCBTRVRVUCAtLS0tLS0tLS0tLS0tLS8vXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGluaXRNYXAob3B0aW9ucykge1xuICAgICAgICAvLyAjcmVnaW9uIHNuaXBwZXRfbGVhZmxldHZpZXdfaW5pdGlhbF92aWV3XG4gICAgICAgIGxldCBpbml0aWFsVmlldyA9IHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXcgTC5MYXRMbmcoMCwgMCksXG4gICAgICAgICAgICB6b29tOiAzXG4gICAgICAgIH07XG4gICAgICAgIC8vICNlbmRyZWdpb24gc25pcHBldF9sZWFmbGV0dmlld19pbml0aWFsX3ZpZXdcbiAgICAgICAgdGhpcy5maXJzdCA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9sbG93ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXV0b1pvb21PbkZpcnN0TWFya2VyID0gZmFsc2U7XG4gICAgICAgIGxldCBkZWZhdWx0TGF5ZXJzID0gdGhpcy5nZXREZWZhdWx0TGF5ZXJzKCk7XG5cbiAgICAgICAgbGV0IGRlZmF1bHRMYXllciA9IGRlZmF1bHRMYXllcnNbMF0ubGF5ZXI7XG5cbiAgICAgICAgbGV0IGJhc2VMYXllcnMgPSB7fTtcbiAgICAgICAgbGV0IG92ZXJsYXlzID0ge307XG5cbiAgICAgICAgYmFzZUxheWVyc1tkZWZhdWx0TGF5ZXJzWzBdLm5hbWVdID0gZGVmYXVsdExheWVyc1swXS5sYXllcjtcbiAgICAgICAgb3ZlcmxheXNbZGVmYXVsdExheWVyc1sxXS5uYW1lXSA9IGRlZmF1bHRMYXllcnNbMV0ubGF5ZXI7XG4gICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9ucykpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9ucy5pbml0aWFsVmlldykpIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsVmlldyA9IHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IG5ldyBMLkxhdExuZyhvcHRpb25zLmluaXRpYWxWaWV3LmxhdCwgb3B0aW9ucy5pbml0aWFsVmlldy5sb24pLFxuICAgICAgICAgICAgICAgICAgICB6b29tOiBvcHRpb25zLmluaXRpYWxWaWV3Lnpvb21cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2hlY2tzIGF1dG9ab29tXG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKG9wdGlvbnMuYXV0b1pvb21PbkZpcnN0TWFya2VyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXV0b1pvb21PbkZpcnN0TWFya2VyID0gb3B0aW9ucy5hdXRvWm9vbU9uRmlyc3RNYXJrZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNoZWNrcyBvdmVybGF5ZXJzXG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKG9wdGlvbnMub3ZlcmxheUxheWVycykpIHtcbiAgICAgICAgICAgICAgICBvdmVybGF5cyA9IG9wdGlvbnMub3ZlcmxheUxheWVycztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2hlY2tzIGJhc2VMYXllclxuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb25zLmJhc2VMYXllcnMpKSB7XG4gICAgICAgICAgICAgICAgYmFzZUxheWVycyA9IG9wdGlvbnMuYmFzZUxheWVycztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb25zLmZvbGxvdykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvbGxvdyA9IG9wdGlvbnMuZm9sbG93O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjaGVja3MgZGVmYXVsdExheWVyXG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKG9wdGlvbnMuZGVmYXVsdExheWVyKSkge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRMYXllciA9IG9wdGlvbnMuZGVmYXVsdExheWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0cyBsYXllcnMgdG8gbWFwXG4gICAgICAgIHRoaXMubWFwID0gbmV3IEwuTWFwKHRoaXMuZGl2SWQsIHtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW5Db250cm9sOiB0cnVlLFxuICAgICAgICAgICAgbGF5ZXJzOiBkZWZhdWx0TGF5ZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgTC5jb250cm9sLmxheWVycyhiYXNlTGF5ZXJzLCBvdmVybGF5cykuYWRkVG8odGhpcy5tYXApO1xuXG4gICAgICAgIHRoaXMubWFwLnNldFZpZXcoaW5pdGlhbFZpZXcubG9jYXRpb24sIGluaXRpYWxWaWV3Lnpvb20pO1xuXG4gICAgICAgIC8vdGhpcy5pbml0TGF5ZXJzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBvZiBkZWZhdWx0IGxheWVycy5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0TGF5ZXJzKG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG1heFpvb20gPSAyMjtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb25zKSAmJiBvcHRpb25zLm1heFpvb20pIHtcbiAgICAgICAgICAgIG1heFpvb20gPSBvcHRpb25zLm1heFpvb207XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29weXJpZ2h0c1xuICAgICAgICBsZXQgbWJBdHRyID0gJ01hcCBkYXRhIMKpIDxhIGhyZWY9XCJodHRwOi8vb3BlbnN0cmVldG1hcC5vcmdcIj5PcGVuU3RyZWV0TWFwPC9hPiBjb250cmlidXRvcnMnLFxuICAgICAgICAgICAgbWJVcmwgPSAnaHR0cDovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZyc7XG5cbiAgICAgICAgbGV0IGVzcmlMaW5rID0gJzxhIGhyZWY9XCJodHRwOi8vd3d3LmVzcmkuY29tL1wiPkVzcmk8L2E+JztcbiAgICAgICAgbGV0IGVzcmlXaG9saW5rID0gJ2ktY3ViZWQsIFVTREEsIFVTR1MsIEFFWCwgR2VvRXllLCBHZXRtYXBwaW5nLCBBZXJvZ3JpZCwgSUdOLCBJR1AsIFVQUi1FR1AsIGFuZCB0aGUgR0lTIFVzZXIgQ29tbXVuaXR5JztcblxuICAgICAgICAvLyBsZWFmbGV0IGxheWVyc1xuICAgICAgICBsZXQgZXNyaUxheWVyID0gTC50aWxlTGF5ZXIoXG4gICAgICAgICAgICAnaHR0cDovL3NlcnZlci5hcmNnaXNvbmxpbmUuY29tL0FyY0dJUy9yZXN0L3NlcnZpY2VzL1dvcmxkX0ltYWdlcnkvTWFwU2VydmVyL3RpbGUve3p9L3t5fS97eH0nLCB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb246ICcmY29weTsgJyArIGVzcmlMaW5rICsgJywgJyArIGVzcmlXaG9saW5rLFxuICAgICAgICAgICAgICAgIG1heFpvb206IG1heFpvb20sXG4gICAgICAgICAgICAgICAgbWF4TmF0aXZlWm9vbTogMTlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBzdHJlZXRzID0gTC50aWxlTGF5ZXIobWJVcmwsIHtpZDogJ21hcGJveC5zdHJlZXRzJywgYXR0cmlidXRpb246IG1iQXR0ciwgbWF4Wm9vbTogbWF4Wm9vbX0pO1xuXG4gICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgbmFtZTogXCJPU00gU3RyZWV0c1wiLFxuICAgICAgICAgICAgbGF5ZXI6IHN0cmVldHNcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogXCJFc3JpIFNhdGVsbGl0ZVwiLFxuICAgICAgICAgICAgbGF5ZXI6IGVzcmlMYXllclxuICAgICAgICB9XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGluaXRMYXllcnMoKSB7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgdGlsZSBsYXllciB3aXRoIGNvcnJlY3QgYXR0cmlidXRpb25cbiAgICAgICAgbGV0IG9zbVVybCA9ICdodHRwOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nJztcbiAgICAgICAgbGV0IG9zbUF0dHJpYiA9ICdNYXAgZGF0YSDCqSA8YSBocmVmPVwiaHR0cDovL29wZW5zdHJlZXRtYXAub3JnXCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzJztcbiAgICAgICAgbGV0IG9zbSA9IG5ldyBMLnRpbGVMYXllcihvc21VcmwsIHtcbiAgICAgICAgICAgIG1pblpvb206IDEsXG4gICAgICAgICAgICBtYXhab29tOiAyMixcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uOiBvc21BdHRyaWJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFwLmFkZExheWVyKG9zbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbWFya2VyIHRvIHRoZSBtYXAuXG4gICAgICogQHBhcmFtIHtQb2ludE1hcmtlckxheWVyLnByb3BlcnRpZXN9IHByb3BlcnRpZXMgLSB0aGUgbGF5ZXIgcHJvcGVydGllc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIHRoZSBuZXcgY3JlYXRlZCBtYXJrZXJcbiAgICAgKi9cbiAgICBhZGRNYXJrZXIocHJvcGVydGllcykge1xuICAgICAgICBhc3NlcnREZWZpbmVkKHByb3BlcnRpZXMubG9jYXRpb24sJ2xvY2F0aW9uJyk7XG4gICAgICAgIC8vY3JlYXRlIG1hcmtlclxuICAgICAgICBsZXQgbWFya2VyID0gbnVsbDtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMuaWNvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IG1hcmtlckljb24gPSBMLmljb24oe1xuICAgICAgICAgICAgICAgIGljb25BbmNob3I6IHByb3BlcnRpZXMuaWNvbkFuY2hvcixcbiAgICAgICAgICAgICAgICBpY29uVXJsOiBwcm9wZXJ0aWVzLmljb24sXG4gICAgICAgICAgICAgICAgaWNvblNpemU6IHByb3BlcnRpZXMuaWNvblNpemVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtYXJrZXIgPSBMLm1hcmtlcihbcHJvcGVydGllcy5sb2NhdGlvbi55LCBwcm9wZXJ0aWVzLmxvY2F0aW9uLnhdLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogbWFya2VySWNvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXJrZXIgPSBMLm1hcmtlcihbcHJvcGVydGllcy5sb2NhdGlvbi55LCBwcm9wZXJ0aWVzLmxvY2F0aW9uLnhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzLmxhYmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBtYXJrZXIuYmluZFRvb2x0aXAocHJvcGVydGllcy5sYWJlbCwge1xuICAgICAgICAgICAgICAgIHBlcm1hbmVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IEwucG9pbnQocHJvcGVydGllcy5sYWJlbE9mZnNldFswXSwgcHJvcGVydGllcy5sYWJlbE9mZnNldFsxXSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5hbWUgPSBwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KFwibmFtZVwiKSAmJiBwcm9wZXJ0aWVzLmxhYmVsICE9IG51bGwgPyBwcm9wZXJ0aWVzLmxhYmVsIDogXCJcIjtcbiAgICAgICAgbGV0IGRlc2MgPSBwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KFwiZGVzY3JpcHRpb25cIikgJiYgcHJvcGVydGllcy5kZXNjcmlwdGlvbiAhPSBudWxsID8gcHJvcGVydGllcy5kZXNjcmlwdGlvbiA6IFwiXCI7XG4gICAgICAgIGlmICghaXNEZWZpbmVkKHByb3BlcnRpZXMub25MZWZ0Q2xpY2spICYmIChuYW1lLmxlbmd0aCA+IDAgfHwgZGVzYy5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgbWFya2VyLmJpbmRQb3B1cChuYW1lICsgJzxkaXY+JyArIGRlc2MgKyAnPC9kaXY+Jyx7XG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBMLnBvaW50KHByb3BlcnRpZXMubGFiZWxPZmZzZXRbMF0sIHByb3BlcnRpZXMubGFiZWxPZmZzZXRbMV0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlci5zZXRaSW5kZXhPZmZzZXQocHJvcGVydGllcy56SW5kZXgpO1xuICAgICAgICBtYXJrZXIuaWQgPSBwcm9wZXJ0aWVzLmlkK1wiJFwiK3Byb3BlcnRpZXMubWFya2VySWQ7XG4gICAgICAgIG1hcmtlci5hZGRUbyh0aGlzLm1hcCk7XG4gICAgICAgIGlmKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydGllcy5vcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgIG1hcmtlci5zZXRSb3RhdGlvbkFuZ2xlKHByb3BlcnRpZXMub3JpZW50YXRpb24uaGVhZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHBvbHlsaW5lIHRvIHRoZSBtYXAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhZGRQb2x5bGluZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IHByb3BlcnRpZXMubG9jYXRpb25zW3Byb3BlcnRpZXMucG9seWxpbmVJZF07XG4gICAgICAgIGxldCBwb2x5bGluZVBvaW50cyA9IFtdO1xuXG4gICAgICAgIGlmKGlzRGVmaW5lZChsb2NhdGlvbnMpICYmIGxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2F0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHBvbHlsaW5lUG9pbnRzLnB1c2gobmV3IEwuTGF0TG5nKFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbnNbaV0ueSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25zW2ldLngpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vY3JlYXRlIHBhdGhcbiAgICAgICAgbGV0IHBvbHlsaW5lID0gbmV3IEwuUG9seWxpbmUocG9seWxpbmVQb2ludHMsIHtcbiAgICAgICAgICAgIGNvbG9yOiBwcm9wZXJ0aWVzLmNvbG9yLFxuICAgICAgICAgICAgd2VpZ2h0OiBwcm9wZXJ0aWVzLndlaWdodCxcbiAgICAgICAgICAgIG9wYWNpdHk6IHByb3BlcnRpZXMub3BhY2l0eSxcbiAgICAgICAgICAgIHNtb290aEZhY3RvcjogcHJvcGVydGllcy5zbW9vdGhGYWN0b3JcbiAgICAgICAgfSkuYWRkVG8odGhpcy5tYXApO1xuXG4gICAgICAgIHJldHVybiBwb2x5bGluZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBtYXJrZXIgYXNzb2NpYXRlZCB0byB0aGUgbGF5ZXIuXG4gICAgICogQHBhcmFtIHtQb2ludE1hcmtlckxheWVyLnByb3BzfSBwcm9wcyAtIFRoZSBsYXllciBwcm9wZXJ0aWVzIGFsbG93aW5nIHRoZSB1cGRhdGUgb2YgdGhlIG1hcmtlclxuICAgICAqL1xuICAgIHVwZGF0ZU1hcmtlcihwcm9wcykge1xuICAgICAgICBsZXQgbWFya2VyID0gdGhpcy5nZXRNYXJrZXIocHJvcHMpO1xuICAgICAgICBpZiAoIWlzRGVmaW5lZChtYXJrZXIpKSB7XG4gICAgICAgICAgICAvLyBhZGRzIGEgbmV3IG1hcmtlciB0byB0aGUgbGVhZmxldCByZW5kZXJlclxuICAgICAgICAgICAgbWFya2VyID0gdGhpcy5hZGRNYXJrZXIocHJvcHMpO1xuICAgICAgICAgICAgdGhpcy5hZGRNYXJrZXJUb0xheWVyKHByb3BzLCBtYXJrZXIpO1xuICAgICAgICAgICAgY29uc3QgbUlkID0gcHJvcHMubWFya2VySWQ7IC8vbmVlZCB0byBmcmVlemVcbiAgICAgICAgICAgIG1hcmtlci5vbignY2xpY2snLCAoZXZlbnQpID0+IHRoaXMub25NYXJrZXJMZWZ0Q2xpY2sobUlkLG1hcmtlciwgcHJvcHMsIGV2ZW50KSk7XG4gICAgICAgICAgICBtYXJrZXIub24oJ2NvbnRleHRtZW51JywgKGV2ZW50KSA9PiB0aGlzLm9uTWFya2VyUmlnaHRDbGljayhtSWQsbWFya2VyLCBwcm9wcywgZXZlbnQpKTtcbiAgICAgICAgICAgIG1hcmtlci5vbignbW91c2VvdmVyJywgKGV2ZW50KSA9PiB0aGlzLm9uTWFya2VySG92ZXIobUlkLG1hcmtlciwgcHJvcHMsIGV2ZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZXQgdGhlIGN1cnJlbnQgbWFya2VyIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGN1cnJlbnQgbWFya2VySWQgdmFsdWUgb2YgdGhlIFBvaW50TWFya2VyXG4gICAgICAgIC8vIHVwZGF0ZXMgcG9zaXRpb25cbiAgICAgICAgbGV0IGxvbiA9IHByb3BzLmxvY2F0aW9uLng7XG4gICAgICAgIGxldCBsYXQgPSBwcm9wcy5sb2NhdGlvbi55O1xuXG4gICAgICAgIGlmICghaXNOYU4obG9uKSAmJiAhaXNOYU4obGF0KSkge1xuICAgICAgICAgICAgbGV0IG5ld0xhdExuZyA9IG5ldyBMLkxhdExuZyhsYXQsIGxvbik7XG4gICAgICAgICAgICBtYXJrZXIuc2V0TGF0TG5nKG5ld0xhdExuZyk7XG4gICAgICAgICAgICBpZigodGhpcy5maXJzdCAmJiB0aGlzLmF1dG9ab29tT25GaXJzdE1hcmtlcikgfHwgdGhpcy5mb2xsb3cpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXJCb3VuZHMgPSBMLmxhdExuZ0JvdW5kcyhbbmV3TGF0TG5nIF0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhtYXJrZXJCb3VuZHMsIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4Wm9vbTogcHJvcHMuem9vbUxldmVsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5maXJzdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlcyBvcmllbnRhdGlvblxuICAgICAgICBpZihpc0RlZmluZWQocHJvcHMub3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICBtYXJrZXIuc2V0Um90YXRpb25BbmdsZShwcm9wcy5vcmllbnRhdGlvbi5oZWFkaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wcy5pY29uICE9PSBudWxsICYmIG1hcmtlci5faWNvbi5pY29uVXJsICE9PSBwcm9wcy5pY29uKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGVzIGljb25cbiAgICAgICAgICAgIGxldCBtYXJrZXJJY29uID0gTC5pY29uKHtcbiAgICAgICAgICAgICAgICBpY29uQW5jaG9yOiBwcm9wcy5pY29uQW5jaG9yLFxuICAgICAgICAgICAgICAgIGljb25Vcmw6IHByb3BzLmljb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWFya2VyLnNldEljb24obWFya2VySWNvbik7XG4gICAgICAgIH1cbiAgICAgICAgbWFya2VyLnNldFpJbmRleE9mZnNldChwcm9wcy56SW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFic3RyYWN0IG1ldGhvZCB0byByZW1vdmUgYSBtYXJrZXIgZnJvbSBpdHMgY29ycmVzcG9uZGluZyBsYXllci5cbiAgICAgKiBUaGlzIGlzIGxpYnJhcnkgZGVwZW5kYW50LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXJrZXIgLSBUaGUgTWFwIG1hcmtlciBvYmplY3RcbiAgICAgKi9cbiAgICByZW1vdmVNYXJrZXJGcm9tTGF5ZXIobWFya2VyKSB7XG4gICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKG1hcmtlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWJzdHJhY3QgbWV0aG9kIHRvIHJlbW92ZSBhIHBvbHlsaW5lIGZyb20gaXRzIGNvcnJlc3BvbmRpbmcgbGF5ZXIuXG4gICAgICogVGhpcyBpcyBsaWJyYXJ5IGRlcGVuZGFudC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9seWxpbmUgLSBUaGUgTWFwIHBvbHlsaW5lIG9iamVjdFxuICAgICAqL1xuICAgIHJlbW92ZVBvbHlsaW5lRnJvbUxheWVyKHBvbHlsaW5lKSB7XG4gICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHBvbHlsaW5lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBwb2x5bGluZSBhc3NvY2lhdGVkIHRvIHRoZSBsYXllci5cbiAgICAgKiBAcGFyYW0ge1BvbHlsaW5lTGF5ZXIucHJvcHN9IHByb3BzIC0gVGhlIGxheWVyIHByb3BlcnRpZXMgYWxsb3dpbmcgdGhlIHVwZGF0ZSBvZiB0aGUgcG9seWxpbmVcbiAgICAgKi9cbiAgICB1cGRhdGVQb2x5bGluZShwcm9wcykge1xuICAgICAgICBsZXQgcG9seWxpbmUgPSB0aGlzLmdldFBvbHlsaW5lKHByb3BzKTtcbiAgICAgICAgaWYgKCFpc0RlZmluZWQocG9seWxpbmUpKSB7XG4gICAgICAgICAgICAvLyBhZGRzIGEgbmV3IHBvbHlnb24gdG8gdGhlIGxlYWZsZXQgcmVuZGVyZXJcbiAgICAgICAgICAgIGNvbnN0IHBvbHlsaW5lT2JqID0gdGhpcy5hZGRQb2x5bGluZShwcm9wcyk7XG4gICAgICAgICAgICB0aGlzLmFkZFBvbHlsaW5lVG9MYXllcihwcm9wcywgcG9seWxpbmVPYmopO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHBvbHlsaW5lUG9pbnRzID0gW107XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbnMgPSBwcm9wcy5sb2NhdGlvbnNbcHJvcHMucG9seWxpbmVJZF07XG5cbiAgICAgICAgICAgIGlmKGlzRGVmaW5lZChsb2NhdGlvbnMpICYmIGxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcG9seWxpbmVQb2ludHMucHVzaChuZXcgTC5MYXRMbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbnNbaV0ueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uc1tpXS54KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvbHlsaW5lLnNldExhdExuZ3MocG9seWxpbmVQb2ludHMpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgc3R5bGVcbiAgICAgICAgICAgIHBvbHlsaW5lLnNldFN0eWxlKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcHJvcHMuY29sb3IsXG4gICAgICAgICAgICAgICAgd2VpZ2h0OiBwcm9wcy53ZWlnaHQsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogcHJvcHMub3BhY2l0eVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBwb2x5Z29uIGFzc29jaWF0ZWQgdG8gdGhlIGxheWVyLlxuICAgICAqIEBwYXJhbSB7UG9seWdvbi5wcm9wc30gcHJvcHMgLSBUaGUgbGF5ZXIgcHJvcGVydGllcyBhbGxvd2luZyB0aGUgdXBkYXRlIG9mIHRoZSBwb2x5Z29uXG4gICAgICovXG4gICAgdXBkYXRlUG9seWdvbihwcm9wcykge1xuICAgICAgICBsZXQgcG9seWdvbiA9IHRoaXMuZ2V0UG9seWdvbihwcm9wcyk7XG4gICAgICAgIGlmICghaXNEZWZpbmVkKHBvbHlnb24pKSB7XG4gICAgICAgICAgICAvLyBhZGRzIGEgbmV3IHBvbHlnb24gdG8gdGhlIGxlYWZsZXQgcmVuZGVyZXJcbiAgICAgICAgICAgIGNvbnN0IHBvbHlnb25PYmogPSB0aGlzLmFkZFBvbHlnb24ocHJvcHMpO1xuICAgICAgICAgICAgdGhpcy5hZGRQb2x5Z29uVG9MYXllcihwcm9wcywgcG9seWdvbk9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb25cbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2VzID0gcHJvcHMudmVydGljZXNbcHJvcHMucG9seWdvbklkXTtcblxuICAgICAgICAgICAgbGV0IHBvbHlnb25Qb2ludHMgPSBbXTtcblxuICAgICAgICAgICAgaWYoaXNEZWZpbmVkKHZlcnRpY2VzKSAmJiB2ZXJ0aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGggLSAxOyBpID0gaSArIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhdExvbiA9IG5ldyBMLkxhdExuZyh2ZXJ0aWNlc1tpICsgMSBdLCB2ZXJ0aWNlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIHBvbHlnb25Qb2ludHMucHVzaChbbGF0TG9uLmxhdCxsYXRMb24ubG5nXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9seWdvbi5zZXRMYXRMbmdzKHBvbHlnb25Qb2ludHMpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgc3R5bGVcbiAgICAgICAgICAgIHBvbHlnb24uc2V0U3R5bGUoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBwcm9wcy5vdXRsaW5lQ29sb3IsXG4gICAgICAgICAgICAgICAgd2VpZ2h0OiBwcm9wcy5vdXRsaW5lV2lkdGgsXG4gICAgICAgICAgICAgICAgZmlsbENvbG9yOiBwcm9wcy5jb2xvcixcbiAgICAgICAgICAgICAgICBmaWxsIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogcHJvcHMub3BhY2l0eVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBYnN0cmFjdCBtZXRob2QgdG8gcmVtb3ZlIGEgcG9seWdvbiBmcm9tIGl0cyBjb3JyZXNwb25kaW5nIGxheWVyLlxuICAgICAqIFRoaXMgaXMgbGlicmFyeSBkZXBlbmRhbnQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvbHlnb24gLSBUaGUgTWFwIHBvbHlnb24gb2JqZWN0XG4gICAgICovXG4gICAgcmVtb3ZlUG9seWdvbkZyb21MYXllcihwb2x5Z29uKSB7XG4gICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHBvbHlnb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHBvbHlnb24gdG8gdGhlIG1hcC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllc1xuICAgICAqL1xuICAgIGFkZFBvbHlnb24ocHJvcGVydGllcykge1xuICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IHByb3BlcnRpZXMudmVydGljZXNbcHJvcGVydGllcy5wb2x5Z29uSWRdO1xuXG4gICAgICAgIGxldCBwb2x5Z29uUG9pbnRzID0gW107XG5cbiAgICAgICAgaWYoaXNEZWZpbmVkKHZlcnRpY2VzKSAmJiB2ZXJ0aWNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aCAtIDE7IGkgPSBpICsgMikge1xuICAgICAgICAgICAgICAgIGxldCBsYXRMb24gPSBuZXcgTC5MYXRMbmcodmVydGljZXNbaSArIDEgXSwgdmVydGljZXNbaV0pO1xuICAgICAgICAgICAgICAgIHBvbHlnb25Qb2ludHMucHVzaChbbGF0TG9uLmxhdCxsYXRMb24ubG5nXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NyZWF0ZSBwb2x5Z29uXG4gICAgICAgIGxldCBwb2x5Z29uID0gbmV3IEwucG9seWdvbihwb2x5Z29uUG9pbnRzLCB7XG4gICAgICAgICAgICBjb2xvcjogcHJvcGVydGllcy5vdXRsaW5lQ29sb3IsXG4gICAgICAgICAgICB3ZWlnaHQ6IHByb3BlcnRpZXMub3V0bGluZVdpZHRoLFxuICAgICAgICAgICAgZmlsbENvbG9yOiBwcm9wZXJ0aWVzLmNvbG9yLFxuICAgICAgICAgICAgZmlsbCA6IHRydWUsXG4gICAgICAgICAgICBmaWxsT3BhY2l0eTogcHJvcGVydGllcy5vcGFjaXR5XG4gICAgICAgIH0pLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfVxuXG4gICAgYXR0YWNoVG8ocGFyZW50RWxlbWVudCkge1xuICAgICAgICBzdXBlci5hdHRhY2hUbyhwYXJlbnRFbGVtZW50KTtcbiAgICAgICAgLy8gRml4IGxlYWZsZXQgYnVnIHdoZW4gcmVzaXppbmcgdGhlIGRpdiBwYXJlbnQgY29udGFpbmVyXG4gICAgICAgIHRoaXMubWFwLmludmFsaWRhdGVTaXplKCk7XG4gICAgfVxuXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIHN1cGVyLm9uUmVzaXplKCk7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpeyB0aGF0Lm1hcC5pbnZhbGlkYXRlU2l6ZSgpfSwgMTAwKTtcblxuICAgIH1cblxuICAgIG9uQ2hhbmdlKGRhdGEpIHt9XG59XG5cbi8qKiogIGxpdHRsZSBoYWNrIHN0YXJ0cyBoZXJlICoqKi9cblxuTC5NYXAgPSBMLk1hcC5leHRlbmQoe1xuICAgIG9wZW5Qb3B1cDogZnVuY3Rpb24gKHBvcHVwKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwID0gcG9wdXA7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExheWVyKHBvcHVwKS5maXJlKCdwb3B1cG9wZW4nLCB7XG4gICAgICAgICAgICBwb3B1cDogdGhpcy5fcG9wdXBcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8vIERlZmluZXMgcm90YXRlZCBtYXJrZXJcbihmdW5jdGlvbiAoKSB7XG4gICAgLy8gc2F2ZSB0aGVzZSBvcmlnaW5hbCBtZXRob2RzIGJlZm9yZSB0aGV5IGFyZSBvdmVyd3JpdHRlblxuICAgIGxldCBwcm90b19pbml0SWNvbiA9IEwuTWFya2VyLnByb3RvdHlwZS5faW5pdEljb247XG4gICAgbGV0IHByb3RvX3NldFBvcyA9IEwuTWFya2VyLnByb3RvdHlwZS5fc2V0UG9zO1xuXG4gICAgbGV0IG9sZElFID0gKEwuRG9tVXRpbC5UUkFOU0ZPUk0gPT09ICdtc1RyYW5zZm9ybScpO1xuXG4gICAgTC5NYXJrZXIuYWRkSW5pdEhvb2soZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgaWNvbkFuY2hvciA9IHRoaXMub3B0aW9ucy5pY29uLm9wdGlvbnMuaWNvbkFuY2hvcjtcbiAgICAgICAgaWYgKGljb25BbmNob3IpIHtcbiAgICAgICAgICAgIGljb25BbmNob3IgPSAoaWNvbkFuY2hvclswXSArICdweCAnICsgaWNvbkFuY2hvclsxXSArICdweCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5yb3RhdGlvbk9yaWdpbiA9IHRoaXMub3B0aW9ucy5yb3RhdGlvbk9yaWdpbiB8fCBpY29uQW5jaG9yIHx8ICdjZW50ZXIgYm90dG9tJztcbiAgICAgICAgdGhpcy5vcHRpb25zLnJvdGF0aW9uQW5nbGUgPSB0aGlzLm9wdGlvbnMucm90YXRpb25BbmdsZSB8fCAwO1xuICAgIH0pO1xuXG4gICAgTC5NYXJrZXIuaW5jbHVkZSh7XG4gICAgICAgIF9pbml0SWNvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvdG9faW5pdEljb24uY2FsbCh0aGlzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfc2V0UG9zOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgICAgICBwcm90b19zZXRQb3MuY2FsbCh0aGlzLCBwb3MpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJvdGF0aW9uQW5nbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pY29uLnN0eWxlW0wuRG9tVXRpbC5UUkFOU0ZPUk0gKyAnT3JpZ2luJ10gPSB0aGlzLm9wdGlvbnMucm90YXRpb25PcmlnaW47XG5cbiAgICAgICAgICAgICAgICBpZiAob2xkSUUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIElFIDksIHVzZSB0aGUgMkQgcm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faWNvbi5zdHlsZVtMLkRvbVV0aWwuVFJBTlNGT1JNXSA9ICcgcm90YXRlKCcgKyB0aGlzLm9wdGlvbnMucm90YXRpb25BbmdsZSArICdkZWcpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgbW9kZXJuIGJyb3dzZXJzLCBwcmVmZXIgdGhlIDNEIGFjY2VsZXJhdGVkIHZlcnNpb25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faWNvbi5zdHlsZVtMLkRvbVV0aWwuVFJBTlNGT1JNXSArPSAnIHJvdGF0ZVooJyArIHRoaXMub3B0aW9ucy5yb3RhdGlvbkFuZ2xlICsgJ2RlZyknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzZXRSb3RhdGlvbkFuZ2xlOiBmdW5jdGlvbiAoYW5nbGUpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yb3RhdGlvbkFuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0Um90YXRpb25PcmlnaW46IGZ1bmN0aW9uIChvcmlnaW4pIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yb3RhdGlvbk9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcblxuXG4vKioqICBlbmQgb2YgaGFjayAqKiovXG5cbmV4cG9ydCBkZWZhdWx0ICBMZWFmbGV0VmlldztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n')},,,,,,,function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(33);\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(4).default\nvar update = add(\"759d7ef5\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBc0c7QUFDNUg7QUFDQSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTJHO0FBQzdILCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI3NTlkN2VmNVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(3);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUFpRztBQUMzSTtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vc2gtdmlldyB7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n')}]]);