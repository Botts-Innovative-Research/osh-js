(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return hasValue; });\n/* unused harmony export hex2rgb */\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* unused harmony export assertBoolean */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertString; });\n/* unused harmony export assertNumber */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/* unused harmony export roundHalf */\n/* unused harmony export debounce */\n/* unused harmony export throttle */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}\n/**\n * Round off number to nearest 0.5\n * @param {Number} num - The number to round off\n * @return {number} The rounded number\n */\n\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\n/**\n * Returns a function that, as long as it continues to be invoked,\n * will not be executed. The function will only be executed when\n * it will stop being called for more than N milliseconds.\n * If the `immediate` parameter is true, then the function\n * will be executed at the first call instead of the last.\n * Parameters :\n * - func: the function to `debouncer`.\n * - wait: the number of milliseconds (N) to wait before\n * call func()\n * - immediate (optional): Call func() at the first invocation\n * instead of the last one (Default false)\n * - context (optional): the context in which to call func()\n * (this by default)\n */\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function () {\n    var now = new Date().getTime(),\n        last = now - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n\n  var later = function () {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n\n  return function () {\n    var now = new Date();\n    if (!previous && !leading) previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      // Sinon on s’endort pendant le temps restant\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* unused harmony export TIME_SYNCHRONIZER_TOPIC */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATASOURCE_TIME_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst TIME_SYNCHRONIZER_TOPIC = 'data-synchronizer-time-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst DATASOURCE_TIME_TOPIC = 'datasource-time-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9Db25zdGFudHMuanM/YjliMSJdLCJuYW1lcyI6WyJEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyIsIlRJTUVfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiREFUQVNPVVJDRV9USU1FX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQU8sTUFBTUEsdUJBQXVCLEdBQUcsb0JBQWhDO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDO0FBRUEsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsa0JBQTlCO0FBRUEsTUFBTUMsd0JBQXdCLEdBQUcsZ0JBQWpDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgREFUQV9TWU5DSFJPTklaRVJfVE9QSUMgPSAnZGF0YS1zeW5jaHJvbml6ZXItJztcbmV4cG9ydCBjb25zdCBUSU1FX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci10aW1lLSc7XG5cbmV4cG9ydCBjb25zdCBEQVRBU09VUkNFX0RBVEFfVE9QSUMgPSAnZGF0YXNvdXJjZS1kYXRhLSc7XG5leHBvcnQgY29uc3QgREFUQVNPVVJDRV9USU1FX1RPUElDID0gJ2RhdGFzb3VyY2UtdGltZS0nO1xuXG5leHBvcnQgY29uc3QgRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDID0gJ2ZmbXBlZy1kZWNvZGUtJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n")},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTING: "connecting",\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9wcm90b2NvbC9TdGF0dXMuanM/ODg4YSJdLCJuYW1lcyI6WyJTdGF0dXMiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUc7QUFDbEJDLFlBQVUsRUFBRSxZQURNO0FBRWxCQyxXQUFTLEVBQUcsV0FGTTtBQUdsQkMsY0FBWSxFQUFFO0FBSEksQ0FBZiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnVtIGZvciBjb25uZWN0aW9uIHN0YXR1cy5cbiAqIEByZWFkb25seVxuICogQGVudW0ge3tuYW1lOiBzdHJpbmd9fVxuICovXG5leHBvcnQgY29uc3QgU3RhdHVzID0ge1xuICAgIENPTk5FQ1RJTkc6IFwiY29ubmVjdGluZ1wiLFxuICAgIENPTk5FQ1RFRDogIFwiY29ubmVjdGVkXCIsXG4gICAgRElTQ09OTkVDVEVEOiBcImRpc2Nvbm5lY3RlZFwiXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.dataSourcesToFn = undefined;\n    this.data = [];\n    this.props = {};\n    this.props.id = "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "k"])();\n    this.props.name = \'\';\n    this.props.description = \'\';\n    this.props.dataSourceId = \'\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.dataSourceId)) {\n      this.props.dataSourceId = properties.dataSourceId;\n    }\n\n    this.initEvents();\n  }\n\n  saveState() {\n    this.initialState = { ...this.props\n    };\n  }\n\n  restoreState() {\n    this.props = { ...this.initialState\n    };\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "j"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "b"])(this.properties.dataSourceId, \'dataSourceId\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      this.dataSourcesToFn[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  setData(dataSourceId, records, options) {\n    // store data into data props\n    this.data = [];\n\n    if (dataSourceId in this.dataSourcesToFn) {\n      let fnArr = this.dataSourcesToFn[dataSourceId];\n\n      for (let j = 0; j < records.length; j++) {\n        for (let i = 0; i < fnArr.length; i++) {\n          fnArr[i](records[j].data, records[j].timeStamp, options);\n        }\n\n        this.data.push({ ...this.props\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "b"])(this.properties.dataSourceId, \'dataSourceId must be defined\');\n      return [this.properties.dataSourceId];\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || [this.properties.dataSourceId];\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init() {}\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.restoreState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/resources/css/view.css\nvar view = __webpack_require__(32);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(6);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/event/EventType.js\nconst EventType = {\n  DATA: \'data\',\n  STATUS: \'status\'\n};\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/Layer.js\nvar Layer = __webpack_require__(7);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/layer/DataLayer.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass DataLayer_DataLayer extends Layer["a" /* default */] {\n  constructor(properties) {\n    super(properties);\n    this.type = \'data\';\n  }\n\n  setData(dataSourceId, records, options) {\n    this.props.data = records;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.props.data\n    };\n  }\n\n}\n\n/* harmony default export */ var layer_DataLayer = (DataLayer_DataLayer);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\n\nclass View_View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = []; //this.divId = divId;\n\n    this.id = "view-" + Object(Utils["k" /* randomUUID */])();\n    this.css = "";\n\n    if (Object(Utils["i" /* isDefined */])(properties) && Object(Utils["i" /* isDefined */])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(Utils["b" /* assertDefined */])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["a" /* assertArray */])(properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["g" /* assertTrue */])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(Utils["i" /* isDefined */])(properties.container) ? properties.container : document.body;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(Utils["i" /* isDefined */])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(Utils["i" /* isDefined */])(properties)) {\n      if (Object(Utils["i" /* isDefined */])(properties.layers)) {\n        for (let i = 0; i < properties.layers.length; i++) {\n          this.addLayer(properties.layers[i]);\n        }\n      }\n\n      if (Object(Utils["i" /* isDefined */])(properties.dataSourceId)) {\n        this.addLayer(new layer_DataLayer({\n          dataSourceId: properties.dataSourceId\n        }));\n      }\n\n      if (Object(Utils["i" /* isDefined */])(properties.visible)) {\n        document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n      }\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(Utils["i" /* isDefined */])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(Utils["i" /* isDefined */])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {}\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(Utils["g" /* assertTrue */])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n      broadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          return;\n        }\n\n        if (event.data.message && event.data.message === \'reset\' || event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          self.reset(); // on data stream reset\n\n          return;\n        }\n\n        if (event.data.type === EventType.DATA) {\n          // transform the data\n          layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          this.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {}\n\n}\n\n/* harmony default export */ var view_View = __webpack_exports__["a"] = (View_View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/protocol/Status.js\nvar Status = __webpack_require__(6);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/DataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    this.id = "DataSource-" + Object(Utils["k" /* randomUUID */])();\n    this.name = name;\n    this.properties = properties;\n    this.dataSourceWorker = worker;\n    this.currentRunningProperties = {};\n    this.initDataSource(properties);\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    this.dataSourceWorker.postMessage({\n      message: \'init\',\n      id: this.id,\n      properties: JSON.stringify(properties),\n      topic: this.getTopicId()\n    });\n  }\n  /**\n   * Disconnect the dataSource then the protocol will be closed as well.\n   */\n\n\n  disconnect() {\n    this.dataSourceWorker.postMessage({\n      message: \'disconnect\'\n    });\n  }\n  /**\n   * Trigger when the datasource is disconnected for some reason.\n   */\n\n\n  onDisconnect() {\n    return new Promise(resolve => {\n      new BroadcastChannel(this.getTopicId()).onmessage = event => {\n        if (event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          resolve();\n        }\n      };\n    });\n  }\n  /**\n   * Connect the dataSource then the protocol will be opened as well.\n   */\n\n\n  async connect() {\n    this.dataSourceWorker.postMessage({\n      message: \'connect\'\n    });\n    return this.isConnected();\n  }\n\n  async isConnected() {\n    const promise = new Promise(resolve => {\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.onmessage = event => {\n          if (event.data.message === \'is-connected\') {\n            resolve(event.data.data);\n          }\n        };\n      }\n    });\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'is-connected\'\n      });\n    }\n\n    return promise;\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    // save current running properties\n    this.currentRunningProperties = { ...this.properties,\n      ...properties\n    };\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'update-url\',\n        data: properties\n      });\n    }\n  }\n\n  getCurrentRunningProperties() {\n    return this.currentRunningProperties;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n  getTopicId() {\n    return Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id;\n  }\n\n}\n\n/* harmony default export */ var datasource_DataSource = (DataSource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/datasource/TimeSeriesDataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeriesDataSource_TimeSeriesDataSource extends datasource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {String} [properties.minTime=properties.startTime] the min range time (ISO format)\n   * @param {String} [properties.maxTime=properties.endTime] the max range time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    super(name, properties, worker);\n    Object(Utils["b" /* assertDefined */])(properties, \'Some properties must be defined\');\n    Object(Utils["b" /* assertDefined */])(properties.startTime, \'startTime must must be defined\');\n    Object(Utils["b" /* assertDefined */])(properties.endTime, \'startTime must must be defined\');\n    this.timeSync = null;\n  }\n\n  setDataSynchronizer(timeSync) {\n    this.timeSync = timeSync;\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: Constants["c" /* DATA_SYNCHRONIZER_TOPIC */] + this.timeSync.id,\n      timeTopic: this.getTimeTopicId()\n    });\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @protected\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    super.initDataSource(properties);\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: this.getTopicId(),\n      timeTopic: this.getTimeTopicId()\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   * @param {boolean} reconnect - reconnect if was connected\n   */\n\n\n  setTimeRange(startTime, endTime, replaySpeed, reconnect = false) {\n    let replay = {};\n\n    if (Object(Utils["i" /* isDefined */])(replaySpeed)) {\n      replay = {\n        replaySpeed: replaySpeed\n      };\n    }\n\n    this.updateProperties({ ...this.currentRunningProperties,\n      startTime: startTime,\n      endTime: endTime,\n      ...replay,\n      reconnect: reconnect\n    });\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getMinTime() {\n    return this.properties.minTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getMaxTime() {\n    return this.properties.maxTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return Object(Utils["i" /* isDefined */])(this.properties.replaySpeed) ? this.properties.replaySpeed : 1;\n  }\n\n  async getCurrentTime() {\n    if (Object(Utils["i" /* isDefined */])(this.timeSync)) {\n      return this.timeSync.getCurrentTime();\n    } else {\n      const promise = new Promise(resolve => {\n        if (this.dataSourceWorker !== null) {\n          this.dataSourceWorker.onmessage = event => {\n            if (event.data.message === \'last-timestamp\') {\n              resolve(event.data.data);\n            }\n          };\n        }\n      });\n\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.postMessage({\n          message: \'last-timestamp\'\n        });\n      }\n\n      return promise;\n    }\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay speed\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    super.updateProperties(properties);\n  }\n\n  getTimeTopicId() {\n    return Constants["b" /* DATASOURCE_TIME_TOPIC */] + this.id;\n  }\n\n}\n\n/* harmony default export */ var datasource_TimeSeriesDataSource = __webpack_exports__["a"] = (TimeSeriesDataSource_TimeSeriesDataSource);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides generic parsing for JSON response.\n *\n * @extends DataSource\n * @example\n * import SosGetResultJson from \'core/datasource/SosGetResultJson.js\';\n *\n * let androidPhoneGpsDataSource = new SosGetResultJson("android-GPS", {\n    protocol: "ws",\n    service: "SOS",\n    endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n    offeringID: "urn:android:device:060693280a28e015-sos",\n    observedProperty: "http://sensorml.com/ont/swe/property/Location",\n    startTime: "2015-02-16T07:58:00Z",\n    endTime: "2015-02-16T08:09:00Z",\n    replaySpeed: replaySpeed+"",\n    bufferingTime: 1000,\n    timeShift: -16000\n  });\n */\n\nclass SosGetResultJson extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL1Nvc0dldFJlc3VsdEpzb24uanM/MTE3NCJdLCJuYW1lcyI6WyJTb3NHZXRSZXN1bHRKc29uIiwiVGltZVNlcmllc0RhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwidGltZVNoaWZ0IiwicmVjb25uZWN0VGltZW91dCIsIlNvc0dldFJlc3VsdEpzb25Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLGdCQUFOLFNBQStCQyx3RUFBL0IsQ0FBb0Q7QUFDaEQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxhQUFXLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQjtBQUMxQixVQUFNRCxJQUFOLEVBQVk7QUFDUkUsZUFBUyxFQUFDLENBREY7QUFFUkMsc0JBQWdCLEVBQUUsT0FBTyxDQUZqQjtBQUVvQjtBQUM1QixTQUFHRjtBQUhLLEtBQVosRUFJRyxJQUFJRywwRUFBSixFQUpIO0FBS0g7O0FBeEIrQzs7QUEyQnJDUCx5RUFBZiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG5pbXBvcnQgVGltZVNlcmllc0RhdGFTb3VyY2UgZnJvbSAnLi9UaW1lU2VyaWVzRGF0YVNvdXJjZS5qcyc7XG5pbXBvcnQgU29zR2V0UmVzdWx0SnNvbldvcmtlciBmcm9tICcuL3dvcmtlcnMvU29zR2V0UmVzdWx0SnNvbi53b3JrZXIuanMnO1xuXG4vKipcbiAqIFRoaXMgZGF0YXNvdXJjZSBwcm92aWRlcyBnZW5lcmljIHBhcnNpbmcgZm9yIEpTT04gcmVzcG9uc2UuXG4gKlxuICogQGV4dGVuZHMgRGF0YVNvdXJjZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBTb3NHZXRSZXN1bHRKc29uIGZyb20gJ2NvcmUvZGF0YXNvdXJjZS9Tb3NHZXRSZXN1bHRKc29uLmpzJztcbiAqXG4gKiBsZXQgYW5kcm9pZFBob25lR3BzRGF0YVNvdXJjZSA9IG5ldyBTb3NHZXRSZXN1bHRKc29uKFwiYW5kcm9pZC1HUFNcIiwge1xuICAgIHByb3RvY29sOiBcIndzXCIsXG4gICAgc2VydmljZTogXCJTT1NcIixcbiAgICBlbmRwb2ludFVybDogXCJzZW5zaWFzb2Z0Lm5ldDo4MTgxL3NlbnNvcmh1Yi9zb3NcIixcbiAgICBvZmZlcmluZ0lEOiBcInVybjphbmRyb2lkOmRldmljZTowNjA2OTMyODBhMjhlMDE1LXNvc1wiLFxuICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L0xvY2F0aW9uXCIsXG4gICAgc3RhcnRUaW1lOiBcIjIwMTUtMDItMTZUMDc6NTg6MDBaXCIsXG4gICAgZW5kVGltZTogXCIyMDE1LTAyLTE2VDA4OjA5OjAwWlwiLFxuICAgIHJlcGxheVNwZWVkOiByZXBsYXlTcGVlZCtcIlwiLFxuICAgIGJ1ZmZlcmluZ1RpbWU6IDEwMDAsXG4gICAgdGltZVNoaWZ0OiAtMTYwMDBcbiAgfSk7XG4gKi9cblxuY2xhc3MgU29zR2V0UmVzdWx0SnNvbiBleHRlbmRzIFRpbWVTZXJpZXNEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLnRpbWVTaGlmdD1mYWxzZV0gLSBmaXggc29tZSBwcm9ibGVtIHdpdGggc29tZSBhbmRyb2lkIGRldmljZXMgd2l0aCBzb21lIHRpbWVzdGFtcCBzaGlmdCB0byAxNiBzZWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYnVmZmVyaW5nVGltZT0wIC0gZGVmaW5lcyB0aGUgdGltZSBkdXJpbmcgdGhlIGRhdGEgaGFzIHRvIGJlIGJ1ZmZlcmVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVPdXQ9MF0gLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCB0aGUgZW5kcG9pbnQgdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc2VydmljZSB0aGUgc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9mZmVyaW5nSUQgdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IHRoZSBvYnNlcnZlZCBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSB0aGUgc3RhcnQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRUaW1lIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gdGhlIHJlcGxheSBmYWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVzcG9uc2VGb3JtYXRdIHRoZSByZXNwb25zZSBmb3JtYXQgKGUuZyB2aWRlby9tcDQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlY29ubmVjdFRpbWVvdXQ9MTAwMDBdIC0gdGhlIHRpbWUgYmVmb3JlIHJlY29ubmVjdGluZyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIobmFtZSwge1xuICAgICAgICAgICAgdGltZVNoaWZ0OjAsXG4gICAgICAgICAgICByZWNvbm5lY3RUaW1lb3V0OiAxMDAwICogNSwgLy8gZGVmYXVsdCBpZiBub3QgZGVmaW5lZCBpbnRvIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC4uLnByb3BlcnRpZXNcbiAgICAgICAgfSwgbmV3IFNvc0dldFJlc3VsdEpzb25Xb3JrZXIoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTb3NHZXRSZXN1bHRKc29uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "612e12a569e3f6dbc4f2.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlcnMvU29zR2V0UmVzdWx0SnNvbi53b3JrZXIuanM/MzNhYyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiV29ya2VyIiwiX193ZWJwYWNrX3B1YmxpY19wYXRoX18iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUMxQixTQUFPLElBQUlDLE1BQUosQ0FBV0MscUJBQXVCLEdBQUcsZ0NBQXJDLENBQVA7QUFDRCxDQUZEIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBXb3JrZXIoX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjYxMmUxMmE1NjllM2Y2ZGJjNGYyLndvcmtlci5qc1wiKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'core/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n  \t* Create the PointMarker\n  \t* @param {Object} properties\n  \t* @param {Number[]} properties.location - [x,y,z]\n   \t* @param {Number} [properties.orientation=0] -\n  \t* @param {String} properties.icon -\n    * @param {String} [properties.iconScale=1] - the icon scale size\n    * @param {String} [properties.iconColor="#000000"] - the icon color\n  \t* @param {Number[]} [properties.iconAnchor=[16,16]] -\n  \t* @param {Number[]} [properties.iconSize=[16,16]] -\n  \t* @param {String} properties.label -\n  \t* @param {String} [properties.labelColor="#000000"] - HTML color\n  \t* @param {Number} [properties.labelSize=16] -\n  \t* @param {Number[]} [properties.labelOffset=[0,0]] -\n  \t* @param {Function} [properties.getLocation] -\n    * @param {Function} [properties.getDescription] -\n  \t* @param {Function} [properties.getOrientation] -\n  \t* @param {Function} [properties.getIcon] -\n    * @param {Function} [properties.getIconColor] -\n    * @param {Function} [properties.getIconScale] -\n  \t* @param {Function} [properties.getLabel] -\n  \t* @param {Function} [properties.getLabelColor] -\n  \t* @param {Function} [properties.getLabelSize] -\n    * @param {Function} [properties.onLeftClick] - trigger onLeftClick marker event\n    * @param {Function} [properties.onRightClick] - trigger onRightClick marker event\n    * @param {Function} [properties.onHover] - trigger onHover marker event\n    * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   \t* @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n    * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n  \t*\n  \t*/\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n    this.props.location = null;\n    this.props.orientation = {\n      heading: 0\n    };\n    this.props.icon = null;\n    this.props.iconAnchor = [16, 16];\n    this.props.iconSize = [16, 16];\n    this.props.iconScale = 10;\n    this.props.iconColor = "#000000";\n    this.props.label = null;\n    this.props.labelColor = "#000000";\n    this.props.labelSize = 16;\n    this.props.labelOffset = [0, 0];\n    this.props.zoomLevel = 15;\n    this.props.color = \'#000000\';\n    this.props.defaultToTerrainElevation = false;\n    this.props.options = {};\n    this.props.markerId = \'marker\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.defaultToTerrainElevation)) {\n      this.props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "d"])(properties.location, "location");\n      this.props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "d"])(properties.orientation, "orientation");\n      this.props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.icon, "icon");\n      this.props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      this.props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      this.props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "e"])(properties.iconScale, "iconScale");\n      this.props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.iconColor, "iconColor");\n      this.props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.label, "label");\n      this.props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.labelColor, "labelColor");\n      this.props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "e"])(properties.labelSize, "labelSize");\n      this.props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      this.props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "e"])(properties.zoomLevel, "zoomLevel");\n      this.props.zoomLevel = properties.zoomLevel;\n    }\n\n    const that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getMarkerId")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.markerId = that.getFunc(\'getMarkerId\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getMarkerId\'), fn);\n    }\n\n    if (this.checkFn("getLocation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.location = that.getFunc(\'getLocation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.orientation = that.getFunc(\'getOrientation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.description = that.getFunc(\'getDescription\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.icon = that.getFunc(\'getIcon\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconColor = that.getFunc(\'getIconColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconScale = that.getFunc(\'getIconScale\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.label = that.getFunc(\'getLabel\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelColor = that.getFunc(\'getLabelColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelSize = that.getFunc(\'getLabelSize\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides parsing to H264 raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import SosGetResultVideo from \'core/datasource/SosGetResultVideo.js\';\n *\n * var videoDataSource = new SosGetResultVideo("H264 video ", {\n        protocol: "ws",\n        service: "SOS",\n        endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n        offeringID: "urn:android:device:a0e0eac2fea3f614-sos",\n        observedProperty: "http://sensorml.com/ont/swe/property/VideoFrame",\n        startTime: "2016-08-11T20:17:30.402Z",\n        endTime: "2016-08-11T20:18:05.451Z",\n        replaySpeed: 1,\n        bufferingTime: 1000\n  });\n */\n\nclass SosGetResultVideo extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Object} [properties.customUrlParams={}] - the encoding options\n   * @param {Number} [properties.customUrlParams.video_bitrate] - define a custom bitrate (in b/s)\n   * @param {Number} [properties.customUrlParams.video_scale] - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} [properties.customUrlParams.video_width] - define a custom width\n   * @param {Number} [properties.customUrlParams.video_height] - define a custom height\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultVideo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL1Nvc0dldFJlc3VsdFZpZGVvLmpzPzlhMWQiXSwibmFtZXMiOlsiU29zR2V0UmVzdWx0VmlkZW8iLCJUaW1lU2VyaWVzRGF0YVNvdXJjZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsInByb3BlcnRpZXMiLCJ0aW1lU2hpZnQiLCJyZWNvbm5lY3RUaW1lb3V0IiwiU29zR2V0UmVzdWx0VmlkZW9Xb3JrZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQSxpQkFBTixTQUFnQ0Msd0VBQWhDLENBQXFEO0FBQ2pEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQW1CO0FBQzFCLFVBQU1ELElBQU4sRUFBWTtBQUNSRSxlQUFTLEVBQUMsQ0FERjtBQUVSQyxzQkFBZ0IsRUFBRSxPQUFPLENBRmpCO0FBRW9CO0FBQzVCLFNBQUdGO0FBSEssS0FBWixFQUlHLElBQUlHLDJFQUFKLEVBSkg7QUFLSDs7QUE3QmdEOztBQWdDckNQLDBFQUFoQiIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMjAgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IFRpbWVTZXJpZXNEYXRhU291cmNlIGZyb20gJy4vVGltZVNlcmllc0RhdGFTb3VyY2UuanMnO1xuaW1wb3J0IFNvc0dldFJlc3VsdFZpZGVvV29ya2VyIGZyb20gXCIuL3dvcmtlcnMvU29zR2V0UmVzdWx0VmlkZW8ud29ya2VyLmpzXCI7XG5cbi8qKlxuICogVGhpcyBkYXRhc291cmNlIHByb3ZpZGVzIHBhcnNpbmcgdG8gSDI2NCByYXcgZGF0YS5cbiAqIERhdGE6IEFycmF5QnVmZmVyXG4gKiBAZXh0ZW5kcyBEYXRhU291cmNlXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IFNvc0dldFJlc3VsdFZpZGVvIGZyb20gJ2NvcmUvZGF0YXNvdXJjZS9Tb3NHZXRSZXN1bHRWaWRlby5qcyc7XG4gKlxuICogdmFyIHZpZGVvRGF0YVNvdXJjZSA9IG5ldyBTb3NHZXRSZXN1bHRWaWRlbyhcIkgyNjQgdmlkZW8gXCIsIHtcbiAgICAgICAgcHJvdG9jb2w6IFwid3NcIixcbiAgICAgICAgc2VydmljZTogXCJTT1NcIixcbiAgICAgICAgZW5kcG9pbnRVcmw6IFwic2Vuc2lhc29mdC5uZXQ6ODE4MS9zZW5zb3JodWIvc29zXCIsXG4gICAgICAgIG9mZmVyaW5nSUQ6IFwidXJuOmFuZHJvaWQ6ZGV2aWNlOmEwZTBlYWMyZmVhM2Y2MTQtc29zXCIsXG4gICAgICAgIG9ic2VydmVkUHJvcGVydHk6IFwiaHR0cDovL3NlbnNvcm1sLmNvbS9vbnQvc3dlL3Byb3BlcnR5L1ZpZGVvRnJhbWVcIixcbiAgICAgICAgc3RhcnRUaW1lOiBcIjIwMTYtMDgtMTFUMjA6MTc6MzAuNDAyWlwiLFxuICAgICAgICBlbmRUaW1lOiBcIjIwMTYtMDgtMTFUMjA6MTg6MDUuNDUxWlwiLFxuICAgICAgICByZXBsYXlTcGVlZDogMSxcbiAgICAgICAgYnVmZmVyaW5nVGltZTogMTAwMFxuICB9KTtcbiAqL1xuY2xhc3MgU29zR2V0UmVzdWx0VmlkZW8gZXh0ZW5kcyBUaW1lU2VyaWVzRGF0YVNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgZGF0YXNvdXJjZSBuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgZGF0YXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbcHJvcGVydGllcy50aW1lU2hpZnQ9ZmFsc2VdIC0gZml4IHNvbWUgcHJvYmxlbSB3aXRoIHNvbWUgYW5kcm9pZCBkZXZpY2VzIHdpdGggc29tZSB0aW1lc3RhbXAgc2hpZnQgdG8gMTYgc2VjXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmJ1ZmZlcmluZ1RpbWU9MCAtIGRlZmluZXMgdGhlIHRpbWUgZHVyaW5nIHRoZSBkYXRhIGhhcyB0byBiZSBidWZmZXJlZC4gVXNlZnVsIG9ubHkgd2hlbiB1c2VkIHdpdGggRGF0YVN5bmNocm9uaXplclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy50aW1lT3V0PTBdIC0gZGVmaW5lcyB0aGUgbGltaXQgdGltZSBiZWZvcmUgZGF0YSBoYXMgdG8gYmUgc2tpcHBlZC4gVXNlZnVsIG9ubHkgd2hlbiB1c2VkIHdpdGggRGF0YVN5bmNocm9uaXplclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnByb3RvY29sIC0gZGVmaW5lcyB0aGUgcHJvdG9jb2wgb2YgdGhlIGRhdGFzb3VyY2UuIEBzZWUge0BsaW5rIERhdGFDb25uZWN0b3J9XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kcG9pbnRVcmwgdGhlIGVuZHBvaW50IHVybFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnNlcnZpY2UgdGhlIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vZmZlcmluZ0lEIHRoZSBvZmZlcmluZ0lEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2JzZXJ2ZWRQcm9wZXJ0eSB0aGUgb2JzZXJ2ZWQgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zdGFydFRpbWUgdGhlIHN0YXJ0IHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuZW5kVGltZSB0aGUgZW5kIHRpbWUgKElTTyBmb3JtYXQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlcGxheVNwZWVkPTFdIHRoZSByZXBsYXkgZmFjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlc3BvbnNlRm9ybWF0XSB0aGUgcmVzcG9uc2UgZm9ybWF0IChlLmcgdmlkZW8vbXA0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZWNvbm5lY3RUaW1lb3V0PTEwMDAwXSAtIHRoZSB0aW1lIGJlZm9yZSByZWNvbm5lY3RpbmcgKGluIG1pbGxpc2Vjb25kcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zPXt9XSAtIHRoZSBlbmNvZGluZyBvcHRpb25zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb19iaXRyYXRlXSAtIGRlZmluZSBhIGN1c3RvbSBiaXRyYXRlIChpbiBiL3MpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb19zY2FsZV0gLSBkZWZpbmUgYSBjdXN0b20gc2NhbGUsIDAuMCA8IHZhbHVlIDwgMS4wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLmN1c3RvbVVybFBhcmFtcy52aWRlb193aWR0aF0gLSBkZWZpbmUgYSBjdXN0b20gd2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX2hlaWdodF0gLSBkZWZpbmUgYSBjdXN0b20gaGVpZ2h0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihuYW1lLCB7XG4gICAgICAgICAgICB0aW1lU2hpZnQ6MCxcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgU29zR2V0UmVzdWx0VmlkZW9Xb3JrZXIoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAgU29zR2V0UmVzdWx0VmlkZW87XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "a53f1233eb84371dde51.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9kYXRhc291cmNlL3dvcmtlcnMvU29zR2V0UmVzdWx0VmlkZW8ud29ya2VyLmpzPzkzMGMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhNTNmMTIzM2ViODQzNzFkZGU1MS53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\nimport MjpegView from \'core/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'data\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timeStamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "i"])(properties.showTime) && properties.showTime) {\n      this.timeStamp = document.createElement("div");\n      this.timeStamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timeStamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const value = values.shift();\n      let imgBlob = new Blob([value.data.frameData]);\n      let url = window.URL.createObjectURL(imgBlob);\n      let oldBlobURL = this.imgTag.src;\n      this.imgTag.src = url;\n\n      if (this.timeStamp !== null) {\n        this.timeStamp.innerHTML = new Date(value.timeStamp).toISOString();\n      }\n\n      window.URL.revokeObjectURL(oldBlobURL);\n    }\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "i"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(1);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(26);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/View.js + 2 modules\nvar View = __webpack_require__(8);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {};\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'draping\') {\n        this.updateDrapedImage(d);\n      }\n    }\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  addMarkerToLayer(props, markerObject) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToMarkers)) {\n      this.layerIdToMarkers[props.id] = {};\n    }\n\n    this.layerIdToMarkers[props.id][props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  addPolylineToLayer(props, polylineObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToPolylines)) {\n      this.layerIdToPolylines[props.id] = {};\n    }\n\n    this.layerIdToPolylines[props.id][props.polylineId] = polylineObject;\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.id in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.id][props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      for (let markerId in this.layerIdToMarkers[id]) {\n        array.push(this.layerIdToMarkers[id][markerId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all marker contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      for (let polylineId in this.layerIdToPolylines[id]) {\n        array.push(this.layerIdToPolylines[id][polylineId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.id][props.polylineId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    super.removeAllFromLayer(layer); // check for marker\n\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    if (Object(Utils["i" /* isDefined */])(layer.props.markerId)) {\n      const markersMap = this.layerIdToMarkers[layer.props.id];\n\n      if (Object(Utils["i" /* isDefined */])(markersMap)) {\n        for (let markerId in markersMap) {\n          const marker = markersMap[markerId];\n          this.removeMarkerFromLayer(marker);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[layer.props.id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    if (Object(Utils["i" /* isDefined */])(polyline.props.polylineId)) {\n      const polylinesMap = this.layerIdToPolylines[polyline.props.id];\n\n      if (Object(Utils["i" /* isDefined */])(polylinesMap)) {\n        for (let polylineId in polylinesMap) {\n          const polyline = polylinesMap[polylineId];\n          this.removePolylineFromLayer(polyline);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[polyline.props.id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["i" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["i" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["i" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/core/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'core/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["i" /* isDefined */])(options)) {\n      if (Object(Utils["i" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["i" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["i" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["i" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["i" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["i" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["i" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["b" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["i" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {locations} locations - the coordinates [{x, y}]\n   * @param {Object} properties\n   * @param {String} properties.color\n   * @param {Number} properties.weight\n   * @param {Number} properties.opacity\n   * @param {Number} properties.smoothFactor\n   * @return {string} the id of the new created polyline\n   */\n\n\n  addPolyline(locations, properties) {\n    let polylinePoints = [];\n\n    if (Object(Utils["i" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["i" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      const markerObject = this.addMarker(props);\n      this.addMarkerToLayer(props, markerObject);\n      const mId = props.markerId; //need to freeze\n\n      markerObject.on(\'click\', event => this.onMarkerLeftClick(mId, markerObject, props, event));\n      markerObject.on(\'contextmenu\', event => this.onMarkerRightClick(mId, markerObject, props, event));\n      markerObject.on(\'mouseover\', event => this.onMarkerHover(mId, markerObject, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n\n\n    marker = this.getMarker(props); // updates position\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["i" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (Object(Utils["i" /* isDefined */])(polyline)) {\n      // removes the layer\n      this.removePolylineFromLayer(polyline);\n    } // adds a new polyline to the leaflet renderer\n\n\n    const polylineObj = this.addPolyline(props.locations[props.polylineId], {\n      color: props.color,\n      weight: props.weight,\n      locations: props.locations,\n      maxPoints: props.maxPoints,\n      opacity: props.opacity,\n      smoothFactor: props.smoothFactor\n    });\n    this.addPolylineToLayer(props, polylineObj);\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n')},,,,,,,function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(33);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(3).default\nvar update = add(\"759d7ef5\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzM5ZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxjQUFjLG1CQUFPLENBQUMsRUFBc0c7QUFDNUgsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyxDQUEyRztBQUM3SCwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktdnVlanMvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi92aWV3LmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9kZW1vcy92aWRlby1kaXNwbGF5L3ZpZGVvLWRpc3BsYXktdnVlanMvbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzU5ZDdlZjVcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(2);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2UvY29yZS9yZXNvdXJjZXMvY3NzL3ZpZXcuY3NzPzE1ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxDQUFpRztBQUMzSTtBQUNBO0FBQ0EsY0FBYyxRQUFTLGNBQWMsaUJBQWlCLG1CQUFtQixHQUFHO0FBQzVFO0FBQ0EiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vc2gtdmlldyB7XFxuICAgIHdpZHRoOjEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n')}]]);