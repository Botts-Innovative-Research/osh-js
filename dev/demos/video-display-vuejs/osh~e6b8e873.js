(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* unused harmony export MAX_LONG */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return hasValue; });\n/* unused harmony export hex2rgb */\n/* unused harmony export hasType */\n/* unused harmony export isObject */\n/* unused harmony export isArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return assertDefined; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return assertTrue; });\n/* unused harmony export assertType */\n/* unused harmony export assertBoolean */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return assertString; });\n/* unused harmony export assertNumber */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return assertPositive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return assertObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assertArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return assertFunction; });\n/* unused harmony export assertHasValue */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return randomUUID; });\n/* unused harmony export stampUUID */\n/* unused harmony export ParseBytes */\n/* unused harmony export ReadData */\n/* unused harmony export GetResultObject */\n/* unused harmony export isOpera */\n/* unused harmony export isFirefox */\n/* unused harmony export isSafari */\n/* unused harmony export isChrome */\n/* unused harmony export isBlink */\n/* unused harmony export isArrayIntersect */\n/* unused harmony export isElement */\n/* unused harmony export isWebWorker */\n/* unused harmony export takeScreenShot */\n/* unused harmony export removeCss */\n/* unused harmony export addCss */\n/* unused harmony export removeLastCharIfExist */\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/** * @module Utils */\n\n/** Maximum value of a long */\nconst MAX_LONG = Math.pow(2, 53) + 1;\n/**\n * Global helper method to test if a letiable or object attribute is defined\n */\n\nfunction isDefined(v) {\n  return typeof v !== \'undefined\' && v !== null;\n}\n/**\n Global helper method to test if a letiable or object attribute has a value,\n that is it is defined and non null\n */\n\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\n/**\n Global helper method to transform hex color into RGBA\n */\n\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n  return [r, g, b];\n}\n/**\n Global helper method to test if a letiable or object attribute is of a particular type\n */\n\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\n/**\n Global helper method to test if a letiable or object attribute is an object\n */\n\nfunction isObject(v, letName) {\n  return hasType(v, \'object\', letName);\n}\n/**\n Global helper method to test if a letiable or object attribute is an array\n */\n\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\n/**\n Global helper method to test if a letiable or object attribute is a function\n */\n\nfunction isFunction(v, letName) {\n  return hasType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined\n **/\n\nfunction assertDefined(v, letName = \'letiable\') {\n  if (!isDefined(v)) {\n    throw letName + " must be defined";\n  }\n\n  return v;\n}\nfunction assertTrue(v, letName = \'letiable\') {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertType(v, expectedType, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (typeof v !== expectedType) {\n    throw letName + " must be of type " + expectedType;\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertBoolean(v, letName) {\n  return assertType(v, \'boolean\', letName);\n}\n/**\n Assert that a letiable or object attribute is a string\n **/\n\nfunction assertString(v, letName) {\n  return assertType(v, \'string\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertNumber(v, letName) {\n  return assertType(v, \'number\', letName);\n}\n/**\n Assert that a letiable or object attribute is a number\n **/\n\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n\n  if (v <= 0) {\n    throw letName + " must be a positive number";\n  }\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertObject(v, letName) {\n  return assertType(v, \'object\', letName);\n}\n/**\n Assert that a letiable or object attribute is an object\n **/\n\nfunction assertArray(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!Array.isArray(v)) {\n    throw letName + " must be an array";\n  }\n\n  return v;\n}\n/**\n Assert that a letiable or object attribute is a function\n **/\n\nfunction assertFunction(v, letName) {\n  return assertType(v, \'function\', letName);\n}\n/**\n Assert that a letiable or object attribute is defined and non-null\n **/\n\nfunction assertHasValue(v, letName = \'letiable\') {\n  assertDefined(v, letName);\n\n  if (!hasValue(v)) {\n    throw letName + " must not be null";\n  }\n\n  return v;\n}\n/**\n *\n * @return {String}\n */\n\nfunction randomUUID() {\n  return \'xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n        v = c === \'x\' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n/**\n * This function stamps/embeds a UUID into an object and returns the UUID generated for it\n * @return {String}\n */\n\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n} //buffer is an ArrayBuffer object, the offset if specified in bytes, and the type is a string\n//corresponding to an OGC data type.\n//See http://def.seegrid.csiro.au/sissvoc/ogc-def/resource?uri=http://www.opengis.net/def/dataType/OGC/0/\n\n/**\n *\n * @param buffer\n * @param offset\n * @param type\n * @return {*}\n */\n\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer); //Note: There exist types not listed in the map below that have OGC definitions, but no appropriate\n  //methods or corresponding types available for parsing in javascript. They are float128, float16, signedLong,\n  //and unsignedLong\n\n  let typeMap = {\n    double: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float64: function (offset) {\n      return {\n        val: view.getFloat64(offset),\n        bytes: 8\n      };\n    },\n    float32: function (offset) {\n      return {\n        val: view.getFloat32(offset),\n        bytes: 4\n      };\n    },\n    signedByte: function (offset) {\n      return {\n        val: view.getInt8(offset),\n        bytes: 1\n      };\n    },\n    signedInt: function (offset) {\n      return {\n        val: view.getInt32(offset),\n        bytes: 4\n      };\n    },\n    signedShort: function (offset) {\n      return {\n        val: view.getInt16(offset),\n        bytes: 2\n      };\n    },\n    unsignedByte: function (offset) {\n      return {\n        val: view.getUint8(offset),\n        bytes: 1\n      };\n    },\n    unsignedInt: function (offset) {\n      return {\n        val: view.getUint32(offset),\n        bytes: 4\n      };\n    },\n    unsignedShort: function (offset) {\n      return {\n        val: view.getUint16(offset),\n        bytes: 2\n      };\n    } //TODO: string-utf-8:\n\n  };\n  return typeMap[type](offset);\n} //This function recursivley iterates over the resultStructure to fill in\n//values read from data which should be an ArrayBuffer containing the payload from a websocket\n\n/**\n *\n * @param struct\n * @param data\n * @param offsetBytes\n * @return {*}\n */\n\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      //check if count is a reference to another letiable\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n\n  return offset;\n}\n/**\n *\n * @param resultStructure\n * @return {{}}\n */\n\nfunction GetResultObject(resultStructure) {\n  //TODO: handle cases for nested arrays / matrix data types\n  let result = {};\n\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n\n  return result;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\' OPR/\') >= 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isFirefox() {\n  return typeof InstallTrigger !== \'undefined\';\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\'Constructor\') > 0;\n}\n/**\n *\n * @return {boolean}\n */\n\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\n/**\n *\n * @return {*|boolean}\n */\n\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\n/**\n *\n * @param a\n * @param b\n * @return {boolean}\n */\n\nfunction isArrayIntersect(a, b) {\n  return a.filter(function (element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\n/**\n *\n * @param o\n * @return {boolean}\n */\n\nfunction isElement(o) {\n  return typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2\n  o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";\n}\n/**\n *\n * @return {*}\n */\n\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\n/**\n *\n * @param div\n */\n\nfunction takeScreenShot(div) {}\n/**\n * Remove a css class from a the div given as argument.\n * @param div the div to remove the class from\n * @param css the css class to remove\n */\n\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, "");\n  div.className = css;\n}\n/**\n * Add a css class to a the div given as argument.\n * @param div the div to add the class to\n * @param css the css class to add\n */\n\nfunction addCss(div, css) {\n  div.setAttribute("class", div.className + " " + css);\n}\n/**\n * Removes the last character of a {string} object.\n * @param {string} value - The input {string}\n * @return {string} The value without the last character\n */\n\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(undefined) || value === null || value.length === 0 || !value.endsWith("/")) {\n    return value;\n  }\n\n  return value.substring(0, value.length - 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return DATA_SYNCHRONIZER_TOPIC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DATASOURCE_DATA_TOPIC; });\n/* unused harmony export FFMPEG_VIEW_DECODE_TOPIC */\nconst DATA_SYNCHRONIZER_TOPIC = 'data-synchronizer-';\nconst DATASOURCE_DATA_TOPIC = 'datasource-data-';\nconst FFMPEG_VIEW_DECODE_TOPIC = 'ffmpeg-decode-';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL0NvbnN0YW50cy5qcz9kYmY3Il0sIm5hbWVzIjpbIkRBVEFfU1lOQ0hST05JWkVSX1RPUElDIiwiREFUQVNPVVJDRV9EQVRBX1RPUElDIiwiRkZNUEVHX1ZJRVdfREVDT0RFX1RPUElDIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBTyxNQUFNQSx1QkFBdUIsR0FBRyxvQkFBaEM7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxrQkFBOUI7QUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxnQkFBakMiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBEQVRBX1NZTkNIUk9OSVpFUl9UT1BJQyA9ICdkYXRhLXN5bmNocm9uaXplci0nO1xuZXhwb3J0IGNvbnN0IERBVEFTT1VSQ0VfREFUQV9UT1BJQyA9ICdkYXRhc291cmNlLWRhdGEtJztcbmV4cG9ydCBjb25zdCBGRk1QRUdfVklFV19ERUNPREVfVE9QSUMgPSAnZmZtcGVnLWRlY29kZS0nO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Status; });\n/**\n * Enum for connection status.\n * @readonly\n * @enum {{name: string}}\n */\nconst Status = {\n  CONNECTED: "connected",\n  DISCONNECTED: "disconnected"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFjb25uZWN0b3IvU3RhdHVzLmpzPzA5ODciXSwibmFtZXMiOlsiU3RhdHVzIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxNQUFNLEdBQUc7QUFDbEJDLFdBQVMsRUFBRyxXQURNO0FBRWxCQyxjQUFZLEVBQUU7QUFGSSxDQUFmIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudW0gZm9yIGNvbm5lY3Rpb24gc3RhdHVzLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7e25hbWU6IHN0cmluZ319XG4gKi9cbmV4cG9ydCBjb25zdCBTdGF0dXMgPSB7XG4gICAgQ09OTkVDVEVEOiAgXCJjb25uZWN0ZWRcIixcbiAgICBESVNDT05ORUNURUQ6IFwiZGlzY29ubmVjdGVkXCJcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * This class is in charge of defining a Layer object.\n */\n\nclass Layer {\n  /**\n   *\n   * @param {Object} properties - contains a list of properties\n   * @param {string} properties.name - default name\n   * @param {string} properties.description - default description\n   * @param {string} properties.dataSourceId - default dataSourceId\n   */\n  constructor(properties) {\n    this.properties = properties;\n    this.dataSourcesToFn = undefined;\n    this.data = [];\n    this.props = {};\n    this.props.id = "layer-" + Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* randomUUID */ "k"])();\n    this.props.name = \'\';\n    this.props.description = \'\';\n    this.props.dataSourceId = \'\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.name)) {\n      this.props.name = properties.name;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.description)) {\n      this.props.description = properties.description;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.dataSourceId)) {\n      this.props.dataSourceId = properties.dataSourceId;\n    }\n\n    this.initEvents();\n  }\n\n  saveState() {\n    this.initialState = { ...this.props\n    };\n  }\n\n  restoreState() {\n    this.props = { ...this.initialState\n    };\n  }\n\n  getFunc(funcName) {\n    return this.properties[funcName].handler || this.properties[funcName];\n  }\n  /**\n   * @private\n   * @param funcName\n   * @return {*}\n   */\n\n\n  checkFn(funcName) {\n    let func = this.properties[funcName];\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ "j"])(func)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "b"])(this.properties.dataSourceId, \'dataSourceId\');\n      return true;\n    } else {\n      let isSet = Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(func);\n\n      if (isSet) {\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(func.dataSourceIds, funcName + ".dataSourceIds");\n        Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(func.handler, funcName + ".handler");\n      }\n\n      return isSet;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  initEvents() {}\n  /**\n   * Clear the layer.\n   */\n\n\n  clear() {}\n  /**\n   * Gets the layer id.\n   * @return {String} the layer id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Selects the datasource contained into the list\n   * @param {Array} dataSourceIds the list of datasources\n   */\n\n\n  select(dataSourceIds) {}\n  /**\n   * Adds a function associated to a list of dataSource ids\n   * @param {String[]} dataSourceIds - the list of datasources\n   * @param {Function} fn - the function to add\n   */\n\n\n  addFn(dataSourceIds, fn) {\n    if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(this.dataSourcesToFn)) {\n      this.dataSourcesToFn = {};\n    }\n\n    for (let i = 0; i < dataSourceIds.length; i++) {\n      let dataSourceId = dataSourceIds[i];\n\n      if (!Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(this.dataSourcesToFn[dataSourceId])) {\n        this.dataSourcesToFn[dataSourceId] = [];\n      }\n\n      this.dataSourcesToFn[dataSourceId].push(fn);\n    }\n  }\n  /**\n   *\n   * @param dataSourceId\n   * @param {Object[]} records\n   * @param options\n   */\n\n\n  setData(dataSourceId, records, options) {\n    // store data into data props\n    this.data = [];\n\n    if (dataSourceId in this.dataSourcesToFn) {\n      let fnArr = this.dataSourcesToFn[dataSourceId];\n\n      for (let j = 0; j < records.length; j++) {\n        for (let i = 0; i < fnArr.length; i++) {\n          fnArr[i](records[j].data, records[j].timeStamp, options);\n        }\n\n        this.data.push({ ...this.props\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesIds() {\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(this.dataSourcesToFn)) {\n      let res = [];\n\n      for (let i in this.dataSourcesToFn) {\n        res.push(i);\n      }\n\n      return res;\n    } else {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertDefined */ "b"])(this.properties.dataSourceId, \'dataSourceId must be defined\');\n      return [this.properties.dataSourceId];\n    }\n  }\n\n  getDataSourcesIdsByProperty(name) {\n    return this.properties[name].dataSourceIds || [this.properties.dataSourceId];\n  }\n  /**\n   * Inits the layer.\n   */\n\n\n  init() {}\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.data\n    };\n  }\n  /**\n   * Reset to default Layer values\n   */\n\n\n  reset() {\n    this.restoreState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (Layer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/resources/css/view.css\nvar view = __webpack_require__(33);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Status.js\nvar Status = __webpack_require__(6);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/event/EventType.js\nconst EventType = {\n  DATA: \'data\',\n  STATUS: \'status\'\n};\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/View.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n/**\n * The abstract object to represent a view.\n */\n\n\n\n\n\n\nclass View_View {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {string[]} properties.supportedLayers - List the supported layers of this View. It is corresponding to the the \'type\' Layer property\n   * @param {boolean} properties.visible - set the default behavior of the visibility of the view\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   */\n  constructor(properties) {\n    // list of layers\n    this.layers = [];\n    this.lastRec = {};\n    this.dataSources = []; //this.divId = divId;\n\n    this.id = "view-" + Object(Utils["k" /* randomUUID */])();\n    this.css = "";\n\n    if (Object(Utils["i" /* isDefined */])(properties) && Object(Utils["i" /* isDefined */])(properties.css)) {\n      this.css = properties.css;\n    }\n\n    Object(Utils["b" /* assertDefined */])(properties && properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["a" /* assertArray */])(properties.supportedLayers, \'supportedLayers\');\n    Object(Utils["g" /* assertTrue */])(properties.supportedLayers.length > 0, \'supportedLayers.length === 0\');\n    this.supportedLayers = properties.supportedLayers; // inits the view before adding the viewItem\n\n    this.init(properties);\n  }\n  /**\n   * Inits the view component.\n   * @private\n   */\n\n\n  init(properties) {\n    this.elementDiv = document.createElement("div");\n    this.elementDiv.setAttribute("id", this.id);\n    this.elementDiv.setAttribute("class", this.css + " osh-view");\n    this.divId = this.id;\n    let parentDivId = Object(Utils["i" /* isDefined */])(properties.container) ? properties.container : document.body;\n    let div = document.getElementById(parentDivId);\n\n    if (!Object(Utils["i" /* isDefined */])(div) || div === null) {\n      document.body.appendChild(this.elementDiv);\n      this.hide();\n      this.container = document.body;\n    } else {\n      div.appendChild(this.elementDiv);\n      this.container = div;\n    }\n\n    this.beforeAddingItems(properties);\n\n    if (Object(Utils["i" /* isDefined */])(properties) && Object(Utils["i" /* isDefined */])(properties.layers)) {\n      for (let i = 0; i < properties.layers.length; i++) {\n        this.addLayer(properties.layers[i]);\n      }\n    }\n\n    if (Object(Utils["i" /* isDefined */])(properties) && Object(Utils["i" /* isDefined */])(properties.visible)) {\n      document.getElementById(this.divId).style.display = properties.visible ? "block" : "none";\n    }\n\n    const that = this; // observes the event associated to the dataSourceId\n\n    let observer = new MutationObserver(mutations => {\n      mutations.forEach(function (mutation) {\n        // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too?\n        // You might want to remove the attribute condition) Is display set to \'none\'?\n        if (mutation.attributeName === \'style\') {\n          that.onResize();\n        }\n      });\n    }); // Attach the mutation observer to blocker, and only when attribute values change\n\n    observer.observe(this.elementDiv, {\n      attributes: true\n    });\n    const rootObserver = new MutationObserver(function (mutations) {\n      // try to get the div element by the id to check if it is still owned by the document object\n      if (!Object(Utils["i" /* isDefined */])(document.getElementById(that.divId))) {\n        this.disconnect();\n        that.destroy();\n      }\n    });\n    rootObserver.observe(document.body, {\n      childList: true\n    });\n  }\n  /**\n   * Hide the view\n   */\n\n\n  hide() {\n    this.elementDiv.style.display = "none";\n  }\n  /**\n   * Callback called when the view is resized\n   * @event\n   */\n\n\n  onResize() {}\n  /**\n   * Attach the view to a specific div. If the view has already been attached to a div, it will be removed\n   * from its current parent and will be attached to new one.\n   * Note: the onResize() is called at the end of the process.\n   * @param {String} divId - The div element to attach to\n   */\n\n\n  attachTo(divId) {\n    if (Object(Utils["i" /* isDefined */])(this.elementDiv.parentNode)) {\n      // detach from its parent\n      this.elementDiv.parentNode.removeChild(this.elementDiv);\n    }\n\n    document.getElementById(divId).appendChild(this.elementDiv);\n\n    if (this.elementDiv.style.display === "none") {\n      this.elementDiv.style.display = "block";\n    }\n\n    this.onResize();\n  }\n  /**\n   * This method is called before attaching any view items passed as arguments in the constructor of the view.\n   * @event\n   * @param {Object} options - A generic object to use\n   */\n\n\n  beforeAddingItems(options) {}\n  /**\n   * Gets the inner id of the view object.\n   * @return {String} The id of the view\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the div id of the DOM element.\n   * @return {String} The div id of the view\n   */\n\n\n  getDivId() {\n    return this.divId;\n  }\n  /**\n   * Set the data to the view. Each view has to handle the kind of the data separately.\n   * @param {String} dataSourceId - The dataSource id of the source providing the data\n   * @param {any[]} data - The data array to set\n   */\n\n\n  setData(dataSourceId, data) {}\n  /**\n   * Show the view.\n   * @param  {Object} properties - A generic object\n   */\n\n\n  show(properties) {}\n\n  destroy() {}\n  /**\n   * Adds a layer to the view. A broadcastChannel is going to listen the new dataSources\n   * @param {Layer} layer - The layer object\n   */\n\n\n  addLayer(layer) {\n    Object(Utils["g" /* assertTrue */])(this.supportedLayers.includes(layer.type), \'this layer is not supported: \' + layer.type + \', should be \' + this.supportedLayers);\n    this.layers.push(layer);\n    let ds = layer.getDataSourcesIds();\n\n    for (let i = 0; i < ds.length; i++) {\n      const dataSourceId = ds[i]; // this.setData(dataSourceId, [layer.getProps()]);\n      // observes the data come in\n\n      let self = this;\n      const broadcastChannel = new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + dataSourceId);\n\n      broadcastChannel.onmessage = event => {\n        // skip data reset events for now\n        if (event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          return;\n        }\n\n        if (event.data.message && event.data.message === \'reset\' || event.data.type === EventType.STATUS && event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          self.reset(); // on data stream reset\n\n          return;\n        }\n\n        if (event.data.type === EventType.DATA) {\n          // transform the data\n          layer.setData(dataSourceId, event.data.values); // set the transformed data to the view\n\n          this.setData(dataSourceId, layer.getProps()); // store as last record\n\n          self.lastRec[dataSourceId] = event.data;\n        }\n      };\n    }\n  }\n  /**\n   * Removes a Layer from the view.\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    if (this.layers.includes(layer)) {\n      // 1) remove from STYLER fn\n      for (let ds in layer.dataSourcesToFn) {\n        delete this.lastRec[ds];\n      }\n\n      layer.reset();\n    }\n  }\n  /**\n   * Removes all view item from the view.\n   */\n\n\n  removeAllFromLayers() {\n    for (let layer of this.layers) {\n      this.removeAllFromLayer(layer);\n    }\n  }\n  /**\n   * Gets the list of the dataSource ids contained into the view.\n   * @return {String[]} The list of dataSource ids\n   */\n\n\n  getDataSourcesId() {\n    let res = []; // check for layers\n\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      res = res.concat(layer.getDataSourcesIds());\n    }\n\n    return res;\n  }\n  /**\n   * Calls for resetting the view.\n   */\n\n\n  reset() {}\n\n}\n\n/* harmony default export */ var view_View = __webpack_exports__["a"] = (View_View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/Constants.js\nvar Constants = __webpack_require__(4);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/dataconnector/Status.js\nvar Status = __webpack_require__(6);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/DataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass DataSource_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    this.id = "DataSource-" + Object(Utils["k" /* randomUUID */])();\n    this.name = name;\n    this.properties = {\n      fetch: 1,\n      // default value if not defined\n      ...properties\n    };\n    this.dataSourceWorker = worker;\n    this.currentRunningProperties = {};\n    this.initDataSource(properties);\n  }\n  /**\n   * Inits the datasource with the constructor properties.\n   * @private\n   * @param properties\n   */\n\n\n  initDataSource(properties) {\n    this.dataSourceWorker.postMessage({\n      message: \'init\',\n      id: this.id,\n      properties: JSON.stringify(properties),\n      topic: Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id\n    });\n  }\n  /**\n   * Disconnect the dataSource then the connector will be closed as well.\n   */\n\n\n  disconnect() {\n    this.dataSourceWorker.postMessage({\n      message: \'disconnect\'\n    });\n  }\n  /**\n   * Trigger when the datasource is disconnected for some reason.\n   */\n\n\n  onDisconnect() {\n    return new Promise(resolve => {\n      new BroadcastChannel(Constants["a" /* DATASOURCE_DATA_TOPIC */] + this.id).onmessage = event => {\n        if (event.data.status === Status["a" /* Status */].DISCONNECTED) {\n          resolve();\n        }\n      };\n    });\n  }\n  /**\n   * Connect the dataSource then the connector will be opened as well.\n   */\n\n\n  async connect() {\n    this.dataSourceWorker.postMessage({\n      message: \'connect\'\n    });\n    return this.isConnected();\n  }\n\n  async isConnected() {\n    const promise = new Promise(resolve => {\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.onmessage = event => {\n          if (event.data.message === \'is-connected\') {\n            resolve(event.data.data);\n          }\n        };\n      }\n    });\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'is-connected\'\n      });\n    }\n\n    return promise;\n  }\n  /**\n   * Gets the datasource id.\n   * @return {String} the datasource id\n   */\n\n\n  getId() {\n    return this.id;\n  }\n  /**\n   * Gets the datasource name.\n   * @return {String} the datasource name\n   */\n\n\n  getName() {\n    return this.name;\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    // save current running properties\n    this.currentRunningProperties = { ...this.properties,\n      ...properties\n    };\n\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.postMessage({\n        message: \'update-url\',\n        data: properties\n      });\n    }\n  }\n\n  getCurrentRunningProperties() {\n    return this.currentRunningProperties;\n  }\n\n  terminate() {\n    if (this.dataSourceWorker !== null) {\n      this.dataSourceWorker.terminate();\n    }\n  }\n\n}\n\n/* harmony default export */ var datareceiver_DataSource = (DataSource_DataSource);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/datareceiver/TimeSeriesDataSource.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n/**\n * The DataSource is the abstract class used to create different datasources.\n *\n */\n\nclass TimeSeriesDataSource_TimeSeriesDataSource extends datareceiver_DataSource {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Number} [properties.batchSize=1] - the number of data to fetch\n   * @param {Object} [properties.customUrlParams={}] - custom parameters appended to the URL as they are\n   * @param {Object} worker - DataSource worker\n   */\n  constructor(name, properties, worker) {\n    super(name, properties, worker);\n    this.dataSynchronizer = null;\n  }\n\n  setDataSynchronizer(dataSynchronizer) {\n    this.dataSynchronizer = dataSynchronizer;\n    this.dataSourceWorker.postMessage({\n      message: \'topic\',\n      topic: Constants["b" /* DATA_SYNCHRONIZER_TOPIC */] + this.dataSynchronizer.id\n    });\n  }\n  /**\n   * Sets the data source time range\n   * @param {String} startTime - the startTime (in date ISO)\n   * @param {String} endTime - the startTime (in date ISO)\n   * @param {Number} replaySpeed - the replay speed\n   */\n\n\n  setTimeRange(startTime, endTime, replaySpeed) {\n    this.updateProperties({ ...this.currentRunningProperties,\n      startTime: startTime,\n      endTime: endTime,\n      replaySpeed: replaySpeed\n    });\n  }\n  /**\n   * Gets the startTime\n   * @returns {String} - startTime as ISO date\n   */\n\n\n  getStartTime() {\n    return this.properties.startTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getEndTime() {\n    return this.properties.endTime;\n  }\n  /**\n   * Gets the endTime\n   * @returns {String} - endTime as ISO date\n   */\n\n\n  getReplaySpeed() {\n    return Object(Utils["i" /* isDefined */])(this.properties.replaySpeed) ? this.properties.replaySpeed : 1;\n  }\n\n  async getCurrentTime() {\n    if (Object(Utils["i" /* isDefined */])(this.dataSynchronizer)) {\n      return this.dataSynchronizer.getCurrentTime();\n    } else {\n      const promise = new Promise(resolve => {\n        if (this.dataSourceWorker !== null) {\n          this.dataSourceWorker.onmessage = event => {\n            if (event.data.message === \'last-timestamp\') {\n              resolve(event.data.data);\n            }\n          };\n        }\n      });\n\n      if (this.dataSourceWorker !== null) {\n        this.dataSourceWorker.postMessage({\n          message: \'last-timestamp\'\n        });\n      }\n\n      return promise;\n    }\n  }\n  /**\n   * Update properties\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} properties.timeShift - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} properties.bufferingTime - defines the time during the data has to be buffered\n   * @param {Number} properties.timeOut - defines the limit time before data has to be skipped\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} properties.replaySpeed the replay speed\n   * @param {Number} properties.responseFormat the response format (e.g video/mp4)\n   * @param {Number} properties.reconnectTimeout - the timeout before reconnecting\n   */\n\n\n  updateProperties(properties) {\n    super.updateProperties(properties);\n  }\n\n}\n\n/* harmony default export */ var datareceiver_TimeSeriesDataSource = __webpack_exports__["a"] = (TimeSeriesDataSource_TimeSeriesDataSource);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);\n/* harmony import */ var _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides generic parsing for JSON response.\n *\n * @extends DataSource\n * @example\n * import SosGetResultJson from \'osh/datareceiver/SosGetResultJson.js\';\n *\n * let androidPhoneGpsDataSource = new SosGetResultJson("android-GPS", {\n    protocol: "ws",\n    service: "SOS",\n    endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n    offeringID: "urn:android:device:060693280a28e015-sos",\n    observedProperty: "http://sensorml.com/ont/swe/property/Location",\n    startTime: "2015-02-16T07:58:00Z",\n    endTime: "2015-02-16T08:09:00Z",\n    replaySpeed: replaySpeed+"",\n    bufferingTime: 1000,\n    timeShift: -16000\n  });\n */\n\nclass SosGetResultJson extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultJson_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultJson);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9Tb3NHZXRSZXN1bHRKc29uLmpzP2NkNWEiXSwibmFtZXMiOlsiU29zR2V0UmVzdWx0SnNvbiIsIlRpbWVTZXJpZXNEYXRhU291cmNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwicHJvcGVydGllcyIsInRpbWVTaGlmdCIsInJlY29ubmVjdFRpbWVvdXQiLCJTb3NHZXRSZXN1bHRKc29uV29ya2VyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxnQkFBTixTQUErQkMsd0VBQS9CLENBQW9EO0FBQ2hEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsYUFBVyxDQUFDQyxJQUFELEVBQU9DLFVBQVAsRUFBbUI7QUFDMUIsVUFBTUQsSUFBTixFQUFZO0FBQ1JFLGVBQVMsRUFBQyxDQURGO0FBRVJDLHNCQUFnQixFQUFFLE9BQU8sQ0FGakI7QUFFb0I7QUFDNUIsU0FBR0Y7QUFISyxLQUFaLEVBSUcsSUFBSUcsMEVBQUosRUFKSDtBQUtIOztBQXhCK0M7O0FBMkJyQ1AseUVBQWYiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuaW1wb3J0IFRpbWVTZXJpZXNEYXRhU291cmNlIGZyb20gJy4vVGltZVNlcmllc0RhdGFTb3VyY2UuanMnO1xuaW1wb3J0IFNvc0dldFJlc3VsdEpzb25Xb3JrZXIgZnJvbSAnLi93b3JrZXJzL1Nvc0dldFJlc3VsdEpzb24ud29ya2VyLmpzJztcblxuLyoqXG4gKiBUaGlzIGRhdGFzb3VyY2UgcHJvdmlkZXMgZ2VuZXJpYyBwYXJzaW5nIGZvciBKU09OIHJlc3BvbnNlLlxuICpcbiAqIEBleHRlbmRzIERhdGFTb3VyY2VcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgU29zR2V0UmVzdWx0SnNvbiBmcm9tICdvc2gvZGF0YXJlY2VpdmVyL1Nvc0dldFJlc3VsdEpzb24uanMnO1xuICpcbiAqIGxldCBhbmRyb2lkUGhvbmVHcHNEYXRhU291cmNlID0gbmV3IFNvc0dldFJlc3VsdEpzb24oXCJhbmRyb2lkLUdQU1wiLCB7XG4gICAgcHJvdG9jb2w6IFwid3NcIixcbiAgICBzZXJ2aWNlOiBcIlNPU1wiLFxuICAgIGVuZHBvaW50VXJsOiBcInNlbnNpYXNvZnQubmV0OjgxODEvc2Vuc29yaHViL3Nvc1wiLFxuICAgIG9mZmVyaW5nSUQ6IFwidXJuOmFuZHJvaWQ6ZGV2aWNlOjA2MDY5MzI4MGEyOGUwMTUtc29zXCIsXG4gICAgb2JzZXJ2ZWRQcm9wZXJ0eTogXCJodHRwOi8vc2Vuc29ybWwuY29tL29udC9zd2UvcHJvcGVydHkvTG9jYXRpb25cIixcbiAgICBzdGFydFRpbWU6IFwiMjAxNS0wMi0xNlQwNzo1ODowMFpcIixcbiAgICBlbmRUaW1lOiBcIjIwMTUtMDItMTZUMDg6MDk6MDBaXCIsXG4gICAgcmVwbGF5U3BlZWQ6IHJlcGxheVNwZWVkK1wiXCIsXG4gICAgYnVmZmVyaW5nVGltZTogMTAwMCxcbiAgICB0aW1lU2hpZnQ6IC0xNjAwMFxuICB9KTtcbiAqL1xuXG5jbGFzcyBTb3NHZXRSZXN1bHRKc29uIGV4dGVuZHMgVGltZVNlcmllc0RhdGFTb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIGRhdGFzb3VyY2UgbmFtZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIC0gdGhlIGRhdGFzb3VyY2UgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Byb3BlcnRpZXMudGltZVNoaWZ0PWZhbHNlXSAtIGZpeCBzb21lIHByb2JsZW0gd2l0aCBzb21lIGFuZHJvaWQgZGV2aWNlcyB3aXRoIHNvbWUgdGltZXN0YW1wIHNoaWZ0IHRvIDE2IHNlY1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5idWZmZXJpbmdUaW1lPTAgLSBkZWZpbmVzIHRoZSB0aW1lIGR1cmluZyB0aGUgZGF0YSBoYXMgdG8gYmUgYnVmZmVyZWQuIFVzZWZ1bCBvbmx5IHdoZW4gdXNlZCB3aXRoIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMudGltZU91dD0wXSAtIGRlZmluZXMgdGhlIGxpbWl0IHRpbWUgYmVmb3JlIGRhdGEgaGFzIHRvIGJlIHNraXBwZWQuIFVzZWZ1bCBvbmx5IHdoZW4gdXNlZCB3aXRoIERhdGFTeW5jaHJvbml6ZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5wcm90b2NvbCAtIGRlZmluZXMgdGhlIHByb3RvY29sIG9mIHRoZSBkYXRhc291cmNlLiBAc2VlIHtAbGluayBEYXRhQ29ubmVjdG9yfVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZHBvaW50VXJsIHRoZSBlbmRwb2ludCB1cmxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5zZXJ2aWNlIHRoZSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMub2ZmZXJpbmdJRCB0aGUgb2ZmZXJpbmdJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9ic2VydmVkUHJvcGVydHkgdGhlIG9ic2VydmVkIHByb3BlcnR5XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc3RhcnRUaW1lIHRoZSBzdGFydCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmVuZFRpbWUgdGhlIGVuZCB0aW1lIChJU08gZm9ybWF0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXBsYXlTcGVlZD0xXSB0aGUgcmVwbGF5IGZhY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5yZXNwb25zZUZvcm1hdF0gdGhlIHJlc3BvbnNlIGZvcm1hdCAoZS5nIHZpZGVvL21wNClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVjb25uZWN0VGltZW91dD0xMDAwMF0gLSB0aGUgdGltZSBiZWZvcmUgcmVjb25uZWN0aW5nIChpbiBtaWxsaXNlY29uZHMpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgcHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihuYW1lLCB7XG4gICAgICAgICAgICB0aW1lU2hpZnQ6MCxcbiAgICAgICAgICAgIHJlY29ubmVjdFRpbWVvdXQ6IDEwMDAgKiA1LCAvLyBkZWZhdWx0IGlmIG5vdCBkZWZpbmVkIGludG8gcHJvcGVydGllc1xuICAgICAgICAgICAgLi4ucHJvcGVydGllc1xuICAgICAgICB9LCBuZXcgU29zR2V0UmVzdWx0SnNvbldvcmtlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvc0dldFJlc3VsdEpzb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "bd7c21197b985c2dfb00.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1Nvc0dldFJlc3VsdEpzb24ud29ya2VyLmpzPzFlNjUiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIldvcmtlciIsIl9fd2VicGFja19wdWJsaWNfcGF0aF9fIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsU0FBTyxJQUFJQyxNQUFKLENBQVdDLHFCQUF1QixHQUFHLGdDQUFyQyxDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgV29ya2VyKF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiZDdjMjExOTdiOTg1YzJkZmIwMC53b3JrZXIuanNcIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _Layer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends Layer\n * @example\n *\n * import PointMarkerLayer from \'osh/ui/layer/PointMarkerLayer.js\';\n *\n * let pointMarkerLayer = new PointMarkerLayer({\n        location : {\n            x : 1.42376557,\n            y : 43.61758626,\n            z : 100\n        },\n        getLocation : {\n            dataSourceIds : [androidPhoneGpsDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    x : rec.lon,\n                    y : rec.lat,\n                    z : rec.alt\n                };\n            }\n        },\n        getOrientation : {\n            dataSourceIds : [androidPhoneOrientationDataSource.getId()],\n            handler : function(rec) {\n                return {\n                    heading : rec.heading\n                };\n            }\n        },\n        icon : \'images/cameralook.png\',\n        getIcon : {\n            dataSourceIds: [androidPhoneGpsDataSource.getId()],\n            handler : function(rec,timeStamp,options) {\n                if(options.selected) {\n                    return \'images/cameralook-selected.png\'\n                } else {\n                    return \'images/cameralook.png\';\n                };\n            }\n        }\n    });\n */\n\nclass PointMarkerLayer extends _Layer_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {\n  /**\n  \t* Create the PointMarker\n  \t* @param {Object} properties\n  \t* @param {Number[]} properties.location - [x,y,z]\n   \t* @param {Number} [properties.orientation=0] -\n  \t* @param {String} properties.icon -\n    * @param {String} [properties.iconScale=1] - the icon scale size\n    * @param {String} [properties.iconColor="#000000"] - the icon color\n  \t* @param {Number[]} [properties.iconAnchor=[16,16]] -\n  \t* @param {Number[]} [properties.iconSize=[16,16]] -\n  \t* @param {String} properties.label -\n  \t* @param {String} [properties.labelColor="#000000"] - HTML color\n  \t* @param {Number} [properties.labelSize=16] -\n  \t* @param {Number[]} [properties.labelOffset=[0,0]] -\n  \t* @param {Function} [properties.getLocation] -\n    * @param {Function} [properties.getDescription] -\n  \t* @param {Function} [properties.getOrientation] -\n  \t* @param {Function} [properties.getIcon] -\n    * @param {Function} [properties.getIconColor] -\n    * @param {Function} [properties.getIconScale] -\n  \t* @param {Function} [properties.getLabel] -\n  \t* @param {Function} [properties.getLabelColor] -\n  \t* @param {Function} [properties.getLabelSize] -\n    * @param {Function} [properties.onLeftClick] - trigger onLeftClick marker event\n    * @param {Function} [properties.onRightClick] - trigger onRightClick marker event\n    * @param {Function} [properties.onHover] - trigger onHover marker event\n    * @param {Function} [properties.getMarkerId] - map an id to a unique marker\n   \t* @param {Number} [properties.zoomLevel=15] - Set the default zoom level\n    * @param {Boolean} [properties.defaultToTerrainElevation=false] - Set the default to terrain elevation\n  \t*\n  \t*/\n  constructor(properties) {\n    super(properties);\n    this.type = \'marker\';\n    this.props.location = null;\n    this.props.orientation = {\n      heading: 0\n    };\n    this.props.icon = null;\n    this.props.iconAnchor = [16, 16];\n    this.props.iconSize = [16, 16];\n    this.props.iconScale = 10;\n    this.props.iconColor = "#000000";\n    this.props.label = null;\n    this.props.labelColor = "#000000";\n    this.props.labelSize = 16;\n    this.props.labelOffset = [0, 0];\n    this.props.zoomLevel = 15;\n    this.props.color = \'#000000\';\n    this.props.defaultToTerrainElevation = false;\n    this.props.options = {};\n    this.props.markerId = \'marker\';\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.defaultToTerrainElevation)) {\n      this.props.defaultToTerrainElevation = properties.defaultToTerrainElevation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.location)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "d"])(properties.location, "location");\n      this.props.location = properties.location;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.orientation)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertObject */ "d"])(properties.orientation, "orientation");\n      this.props.orientation = properties.orientation;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.icon)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.icon, "icon");\n      this.props.icon = properties.icon;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconAnchor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconAnchor, "iconAnchor");\n      this.props.iconAnchor = properties.iconAnchor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.iconSize, "iconSize");\n      this.props.iconSize = properties.iconSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconScale)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "e"])(properties.iconScale, "iconScale");\n      this.props.iconScale = properties.iconScale;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.iconColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.iconColor, "iconColor");\n      this.props.iconColor = properties.iconColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.label)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.label, "label");\n      this.props.label = properties.label;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.labelColor)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertString */ "f"])(properties.labelColor, "labelColor");\n      this.props.labelColor = properties.labelColor;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.labelSize)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "e"])(properties.labelSize, "labelSize");\n      this.props.labelSize = properties.labelSize;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.labelOffset)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertArray */ "a"])(properties.labelOffset, "labelOffset");\n      this.props.labelOffset = properties.labelOffset;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* hasValue */ "h"])(properties.zoomLevel)) {\n      Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertPositive */ "e"])(properties.zoomLevel, "zoomLevel");\n      this.props.zoomLevel = properties.zoomLevel;\n    }\n\n    const that = this; // must be first to assign correctly the first location to the right id if it is defined\n\n    if (this.checkFn("getMarkerId")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.markerId = that.getFunc(\'getMarkerId\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getMarkerId\'), fn);\n    }\n\n    if (this.checkFn("getLocation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.location = that.getFunc(\'getLocation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLocation\'), fn);\n    }\n\n    if (this.checkFn("getOrientation")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.orientation = that.getFunc(\'getOrientation\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getOrientation\'), fn);\n    }\n\n    if (this.checkFn("getDescription")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.description = that.getFunc(\'getDescription\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getDescription\'), fn);\n    }\n\n    if (this.checkFn("getIcon")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.icon = that.getFunc(\'getIcon\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIcon\'), fn);\n    }\n\n    if (this.checkFn("getIconColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconColor = that.getFunc(\'getIconColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconColor\'), fn);\n    }\n\n    if (this.checkFn("getIconScale")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.iconScale = that.getFunc(\'getIconScale\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getIconScale\'), fn);\n    }\n\n    if (this.checkFn("getLabel")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.label = that.getFunc(\'getLabel\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabel\'), fn);\n    }\n\n    if (this.checkFn("getLabelColor")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelColor = that.getFunc(\'getLabelColor\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelColor\'), fn);\n    }\n\n    if (this.checkFn("getLabelSize")) {\n      let fn = function (rec, timeStamp, options) {\n        that.props.labelSize = that.getFunc(\'getLabelSize\')(rec, timeStamp, options);\n      };\n\n      this.addFn(that.getDataSourcesIdsByProperty(\'getLabelSize\'), fn);\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.onLeftClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onLeftClick)) {\n      this.props.onLeftClick = properties.onLeftClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.onRightClick) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onRightClick)) {\n      this.props.onRightClick = properties.onRightClick;\n    }\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* isDefined */ "i"])(properties.onHover) && Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_0__[/* assertFunction */ "c"])(properties.onHover)) {\n      this.props.onHover = properties.onHover;\n    }\n\n    this.saveState();\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (PointMarkerLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3VpL2xheWVyL1BvaW50TWFya2VyTGF5ZXIuanM/NzQwZSJdLCJuYW1lcyI6WyJQb2ludE1hcmtlckxheWVyIiwiTGF5ZXIiLCJjb25zdHJ1Y3RvciIsInByb3BlcnRpZXMiLCJ0eXBlIiwicHJvcHMiLCJsb2NhdGlvbiIsIm9yaWVudGF0aW9uIiwiaGVhZGluZyIsImljb24iLCJpY29uQW5jaG9yIiwiaWNvblNpemUiLCJpY29uU2NhbGUiLCJpY29uQ29sb3IiLCJsYWJlbCIsImxhYmVsQ29sb3IiLCJsYWJlbFNpemUiLCJsYWJlbE9mZnNldCIsInpvb21MZXZlbCIsImNvbG9yIiwiZGVmYXVsdFRvVGVycmFpbkVsZXZhdGlvbiIsIm9wdGlvbnMiLCJtYXJrZXJJZCIsImlzRGVmaW5lZCIsImhhc1ZhbHVlIiwiYXNzZXJ0T2JqZWN0IiwiYXNzZXJ0U3RyaW5nIiwiYXNzZXJ0QXJyYXkiLCJhc3NlcnRQb3NpdGl2ZSIsInRoYXQiLCJjaGVja0ZuIiwiZm4iLCJyZWMiLCJ0aW1lU3RhbXAiLCJnZXRGdW5jIiwiYWRkRm4iLCJnZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkiLCJkZXNjcmlwdGlvbiIsIm9uTGVmdENsaWNrIiwiYXNzZXJ0RnVuY3Rpb24iLCJvblJpZ2h0Q2xpY2siLCJvbkhvdmVyIiwic2F2ZVN0YXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFTQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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Q0FBdkQsRUFBaUY7QUFDaEYsV0FBS2pDLEtBQUwsQ0FBV2lDLFdBQVgsR0FBeUJuQyxVQUFVLENBQUNtQyxXQUFwQztBQUNBOztBQUVELFFBQUlmLHlFQUFTLENBQUNwQixVQUFVLENBQUNxQyxZQUFaLENBQVQsSUFBc0NELDhFQUFjLENBQUNwQyxVQUFVLENBQUNxQyxZQUFaLENBQXhELEVBQW1GO0FBQ2xGLFdBQUtuQyxLQUFMLENBQVdtQyxZQUFYLEdBQTBCckMsVUFBVSxDQUFDcUMsWUFBckM7QUFDQTs7QUFFRCxRQUFJakIseUVBQVMsQ0FBQ3BCLFVBQVUsQ0FBQ3NDLE9BQVosQ0FBVCxJQUFpQ0YsOEVBQWMsQ0FBQ3BDLFVBQVUsQ0FBQ3NDLE9BQVosQ0FBbkQsRUFBeUU7QUFDeEUsV0FBS3BDLEtBQUwsQ0FBV29DLE9BQVgsR0FBcUJ0QyxVQUFVLENBQUNzQyxPQUFoQztBQUNBOztBQUVELFNBQUtDLFNBQUw7QUFDQTs7QUE1TW1DOztBQStNdEIxQyx5RUFBZiIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMTcgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IHtcblx0YXNzZXJ0QXJyYXksXG5cdGFzc2VydEZ1bmN0aW9uLFxuXHRhc3NlcnRPYmplY3QsXG5cdGFzc2VydFBvc2l0aXZlLFxuXHRhc3NlcnRTdHJpbmcsXG5cdGhhc1ZhbHVlLFxuXHRpc0RlZmluZWRcbn0gZnJvbSBcIi4uLy4uL3V0aWxzL1V0aWxzLmpzXCI7XG5pbXBvcnQgTGF5ZXIgZnJvbSBcIi4vTGF5ZXIuanNcIjtcblxuLyoqXG4gKiBAZXh0ZW5kcyBMYXllclxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUG9pbnRNYXJrZXJMYXllciBmcm9tICdvc2gvdWkvbGF5ZXIvUG9pbnRNYXJrZXJMYXllci5qcyc7XG4gKlxuICogbGV0IHBvaW50TWFya2VyTGF5ZXIgPSBuZXcgUG9pbnRNYXJrZXJMYXllcih7XG4gICAgICAgIGxvY2F0aW9uIDoge1xuICAgICAgICAgICAgeCA6IDEuNDIzNzY1NTcsXG4gICAgICAgICAgICB5IDogNDMuNjE3NTg2MjYsXG4gICAgICAgICAgICB6IDogMTAwXG4gICAgICAgIH0sXG4gICAgICAgIGdldExvY2F0aW9uIDoge1xuICAgICAgICAgICAgZGF0YVNvdXJjZUlkcyA6IFthbmRyb2lkUGhvbmVHcHNEYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgaGFuZGxlciA6IGZ1bmN0aW9uKHJlYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHggOiByZWMubG9uLFxuICAgICAgICAgICAgICAgICAgICB5IDogcmVjLmxhdCxcbiAgICAgICAgICAgICAgICAgICAgeiA6IHJlYy5hbHRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRPcmllbnRhdGlvbiA6IHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2VJZHMgOiBbYW5kcm9pZFBob25lT3JpZW50YXRpb25EYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgaGFuZGxlciA6IGZ1bmN0aW9uKHJlYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmcgOiByZWMuaGVhZGluZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGljb24gOiAnaW1hZ2VzL2NhbWVyYWxvb2sucG5nJyxcbiAgICAgICAgZ2V0SWNvbiA6IHtcbiAgICAgICAgICAgIGRhdGFTb3VyY2VJZHM6IFthbmRyb2lkUGhvbmVHcHNEYXRhU291cmNlLmdldElkKCldLFxuICAgICAgICAgICAgaGFuZGxlciA6IGZ1bmN0aW9uKHJlYyx0aW1lU3RhbXAsb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbWFnZXMvY2FtZXJhbG9vay1zZWxlY3RlZC5wbmcnXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbWFnZXMvY2FtZXJhbG9vay5wbmcnO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAqL1xuY2xhc3MgUG9pbnRNYXJrZXJMYXllciBleHRlbmRzIExheWVyIHtcblx0LyoqXG5cdFx0KiBDcmVhdGUgdGhlIFBvaW50TWFya2VyXG5cdFx0KiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllc1xuXHRcdCogQHBhcmFtIHtOdW1iZXJbXX0gcHJvcGVydGllcy5sb2NhdGlvbiAtIFt4LHksel1cbiAgXHQqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5vcmllbnRhdGlvbj0wXSAtXG5cdFx0KiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5pY29uIC1cblx0ICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydGllcy5pY29uU2NhbGU9MV0gLSB0aGUgaWNvbiBzY2FsZSBzaXplXG5cdCAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnRpZXMuaWNvbkNvbG9yPVwiIzAwMDAwMFwiXSAtIHRoZSBpY29uIGNvbG9yXG5cdFx0KiBAcGFyYW0ge051bWJlcltdfSBbcHJvcGVydGllcy5pY29uQW5jaG9yPVsxNiwxNl1dIC1cblx0XHQqIEBwYXJhbSB7TnVtYmVyW119IFtwcm9wZXJ0aWVzLmljb25TaXplPVsxNiwxNl1dIC1cblx0XHQqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLmxhYmVsIC1cblx0XHQqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydGllcy5sYWJlbENvbG9yPVwiIzAwMDAwMFwiXSAtIEhUTUwgY29sb3Jcblx0XHQqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5sYWJlbFNpemU9MTZdIC1cblx0XHQqIEBwYXJhbSB7TnVtYmVyW119IFtwcm9wZXJ0aWVzLmxhYmVsT2Zmc2V0PVswLDBdXSAtXG5cdFx0KiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRMb2NhdGlvbl0gLVxuXHQgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMuZ2V0RGVzY3JpcHRpb25dIC1cblx0XHQqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldE9yaWVudGF0aW9uXSAtXG5cdFx0KiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRJY29uXSAtXG5cdCAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcGVydGllcy5nZXRJY29uQ29sb3JdIC1cblx0ICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldEljb25TY2FsZV0gLVxuXHRcdCogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMuZ2V0TGFiZWxdIC1cblx0XHQqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldExhYmVsQ29sb3JdIC1cblx0XHQqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLmdldExhYmVsU2l6ZV0gLVxuXHQgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMub25MZWZ0Q2xpY2tdIC0gdHJpZ2dlciBvbkxlZnRDbGljayBtYXJrZXIgZXZlbnRcblx0ICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLm9uUmlnaHRDbGlja10gLSB0cmlnZ2VyIG9uUmlnaHRDbGljayBtYXJrZXIgZXZlbnRcblx0ICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wZXJ0aWVzLm9uSG92ZXJdIC0gdHJpZ2dlciBvbkhvdmVyIG1hcmtlciBldmVudFxuXHQgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BlcnRpZXMuZ2V0TWFya2VySWRdIC0gbWFwIGFuIGlkIHRvIGEgdW5pcXVlIG1hcmtlclxuXHQgXHQqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy56b29tTGV2ZWw9MTVdIC0gU2V0IHRoZSBkZWZhdWx0IHpvb20gbGV2ZWxcblx0ICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3Byb3BlcnRpZXMuZGVmYXVsdFRvVGVycmFpbkVsZXZhdGlvbj1mYWxzZV0gLSBTZXQgdGhlIGRlZmF1bHQgdG8gdGVycmFpbiBlbGV2YXRpb25cblx0XHQqXG5cdFx0Ki9cblx0Y29uc3RydWN0b3IocHJvcGVydGllcykge1xuXHRcdHN1cGVyKHByb3BlcnRpZXMpO1xuXHRcdHRoaXMudHlwZSA9ICdtYXJrZXInO1xuXG5cdFx0dGhpcy5wcm9wcy5sb2NhdGlvbiA9IG51bGw7XG5cdFx0dGhpcy5wcm9wcy5vcmllbnRhdGlvbiA9IHtoZWFkaW5nOjB9O1xuXHRcdHRoaXMucHJvcHMuaWNvbiA9IG51bGw7XG5cdFx0dGhpcy5wcm9wcy5pY29uQW5jaG9yID0gWzE2LDE2XTtcblx0XHR0aGlzLnByb3BzLmljb25TaXplID0gWzE2LDE2XTtcblx0XHR0aGlzLnByb3BzLmljb25TY2FsZSA9IDEwO1xuXHRcdHRoaXMucHJvcHMuaWNvbkNvbG9yID0gXCIjMDAwMDAwXCI7XG5cdFx0dGhpcy5wcm9wcy5sYWJlbCA9IG51bGw7XG5cdFx0dGhpcy5wcm9wcy5sYWJlbENvbG9yID0gXCIjMDAwMDAwXCI7XG5cdFx0dGhpcy5wcm9wcy5sYWJlbFNpemUgPSAxNjtcblx0XHR0aGlzLnByb3BzLmxhYmVsT2Zmc2V0ID0gWzAsMF07XG5cdFx0dGhpcy5wcm9wcy56b29tTGV2ZWwgPSAxNTtcblx0XHR0aGlzLnByb3BzLmNvbG9yID0gJyMwMDAwMDAnO1xuXHRcdHRoaXMucHJvcHMuZGVmYXVsdFRvVGVycmFpbkVsZXZhdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMucHJvcHMub3B0aW9ucyA9IHt9O1xuXHRcdHRoaXMucHJvcHMubWFya2VySWQgPSAnbWFya2VyJztcblxuXHRcdGlmKGlzRGVmaW5lZChwcm9wZXJ0aWVzLmRlZmF1bHRUb1RlcnJhaW5FbGV2YXRpb24pKSB7XG5cdFx0XHR0aGlzLnByb3BzLmRlZmF1bHRUb1RlcnJhaW5FbGV2YXRpb24gPSBwcm9wZXJ0aWVzLmRlZmF1bHRUb1RlcnJhaW5FbGV2YXRpb247XG5cdFx0fVxuXG5cdFx0aWYgKGhhc1ZhbHVlKHByb3BlcnRpZXMubG9jYXRpb24pKSB7XG5cdFx0XHRhc3NlcnRPYmplY3QocHJvcGVydGllcy5sb2NhdGlvbiwgXCJsb2NhdGlvblwiKTtcblx0XHRcdHRoaXMucHJvcHMubG9jYXRpb24gPSBwcm9wZXJ0aWVzLmxvY2F0aW9uO1xuXHRcdH1cblxuXHRcdGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLm9yaWVudGF0aW9uKSkge1xuXHRcdFx0YXNzZXJ0T2JqZWN0KHByb3BlcnRpZXMub3JpZW50YXRpb24sIFwib3JpZW50YXRpb25cIik7XG5cdFx0XHR0aGlzLnByb3BzLm9yaWVudGF0aW9uID0gcHJvcGVydGllcy5vcmllbnRhdGlvbjtcblx0XHR9XG5cblx0XHRpZiAoaGFzVmFsdWUocHJvcGVydGllcy5pY29uKSkge1xuXHRcdFx0YXNzZXJ0U3RyaW5nKHByb3BlcnRpZXMuaWNvbiwgXCJpY29uXCIpO1xuXHRcdFx0dGhpcy5wcm9wcy5pY29uID0gcHJvcGVydGllcy5pY29uO1xuXHRcdH1cblxuXHRcdGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmljb25BbmNob3IpKSB7XG5cdFx0XHRhc3NlcnRBcnJheShwcm9wZXJ0aWVzLmljb25BbmNob3IsIFwiaWNvbkFuY2hvclwiKTtcblx0XHRcdHRoaXMucHJvcHMuaWNvbkFuY2hvciA9IHByb3BlcnRpZXMuaWNvbkFuY2hvcjtcblx0XHR9XG5cblx0XHRpZiAoaGFzVmFsdWUocHJvcGVydGllcy5pY29uU2l6ZSkpIHtcblx0XHRcdGFzc2VydEFycmF5KHByb3BlcnRpZXMuaWNvblNpemUsIFwiaWNvblNpemVcIik7XG5cdFx0XHR0aGlzLnByb3BzLmljb25TaXplID0gcHJvcGVydGllcy5pY29uU2l6ZTtcblx0XHR9XG5cblx0XHRpZiAoaGFzVmFsdWUocHJvcGVydGllcy5pY29uU2NhbGUpKSB7XG5cdFx0XHRhc3NlcnRQb3NpdGl2ZShwcm9wZXJ0aWVzLmljb25TY2FsZSwgXCJpY29uU2NhbGVcIik7XG5cdFx0XHR0aGlzLnByb3BzLmljb25TY2FsZSA9IHByb3BlcnRpZXMuaWNvblNjYWxlO1xuXHRcdH1cblxuXHRcdGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmljb25Db2xvcikpIHtcblx0XHRcdGFzc2VydFN0cmluZyhwcm9wZXJ0aWVzLmljb25Db2xvciwgXCJpY29uQ29sb3JcIik7XG5cdFx0XHR0aGlzLnByb3BzLmljb25Db2xvciA9IHByb3BlcnRpZXMuaWNvbkNvbG9yO1xuXHRcdH1cblxuXHRcdGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmxhYmVsKSkge1xuXHRcdFx0YXNzZXJ0U3RyaW5nKHByb3BlcnRpZXMubGFiZWwsIFwibGFiZWxcIik7XG5cdFx0XHR0aGlzLnByb3BzLmxhYmVsID0gcHJvcGVydGllcy5sYWJlbDtcblx0XHR9XG5cblx0XHRpZiAoaGFzVmFsdWUocHJvcGVydGllcy5sYWJlbENvbG9yKSkge1xuXHRcdFx0YXNzZXJ0U3RyaW5nKHByb3BlcnRpZXMubGFiZWxDb2xvciwgXCJsYWJlbENvbG9yXCIpO1xuXHRcdFx0dGhpcy5wcm9wcy5sYWJlbENvbG9yID0gcHJvcGVydGllcy5sYWJlbENvbG9yO1xuXHRcdH1cblxuXHRcdGlmIChoYXNWYWx1ZShwcm9wZXJ0aWVzLmxhYmVsU2l6ZSkpIHtcblx0XHRcdGFzc2VydFBvc2l0aXZlKHByb3BlcnRpZXMubGFiZWxTaXplLCBcImxhYmVsU2l6ZVwiKTtcblx0XHRcdHRoaXMucHJvcHMubGFiZWxTaXplID0gcHJvcGVydGllcy5sYWJlbFNpemU7XG5cdFx0fVxuXG5cdFx0aWYgKGhhc1ZhbHVlKHByb3BlcnRpZXMubGFiZWxPZmZzZXQpKSB7XG5cdFx0XHRhc3NlcnRBcnJheShwcm9wZXJ0aWVzLmxhYmVsT2Zmc2V0LCBcImxhYmVsT2Zmc2V0XCIpO1xuXHRcdFx0dGhpcy5wcm9wcy5sYWJlbE9mZnNldCA9IHByb3BlcnRpZXMubGFiZWxPZmZzZXQ7XG5cdFx0fVxuXG5cblx0XHRpZiAoaGFzVmFsdWUocHJvcGVydGllcy56b29tTGV2ZWwpKSB7XG5cdFx0XHRhc3NlcnRQb3NpdGl2ZShwcm9wZXJ0aWVzLnpvb21MZXZlbCwgXCJ6b29tTGV2ZWxcIik7XG5cdFx0XHR0aGlzLnByb3BzLnpvb21MZXZlbCA9IHByb3BlcnRpZXMuem9vbUxldmVsO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRoYXQgPSB0aGlzO1xuXG5cdFx0Ly8gbXVzdCBiZSBmaXJzdCB0byBhc3NpZ24gY29ycmVjdGx5IHRoZSBmaXJzdCBsb2NhdGlvbiB0byB0aGUgcmlnaHQgaWQgaWYgaXQgaXMgZGVmaW5lZFxuXHRcdGlmICh0aGlzLmNoZWNrRm4oXCJnZXRNYXJrZXJJZFwiKSkge1xuXHRcdFx0bGV0IGZuID0gZnVuY3Rpb24ocmVjLHRpbWVTdGFtcCxvcHRpb25zKSB7XG5cdFx0XHRcdHRoYXQucHJvcHMubWFya2VySWQgPSB0aGF0LmdldEZ1bmMoJ2dldE1hcmtlcklkJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXRNYXJrZXJJZCcpLGZuKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5jaGVja0ZuKFwiZ2V0TG9jYXRpb25cIikpIHtcblx0XHRcdGxldCBmbiA9IGZ1bmN0aW9uKHJlYyx0aW1lU3RhbXAsb3B0aW9ucykge1xuXHRcdFx0XHR0aGF0LnByb3BzLmxvY2F0aW9uID0gdGhhdC5nZXRGdW5jKCdnZXRMb2NhdGlvbicpKHJlYyx0aW1lU3RhbXAsb3B0aW9ucyk7XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5hZGRGbih0aGF0LmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0TG9jYXRpb24nKSxmbik7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY2hlY2tGbihcImdldE9yaWVudGF0aW9uXCIpKSB7XG5cdFx0XHRsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcblx0XHRcdFx0dGhhdC5wcm9wcy5vcmllbnRhdGlvbiA9IHRoYXQuZ2V0RnVuYygnZ2V0T3JpZW50YXRpb24nKShyZWMsdGltZVN0YW1wLG9wdGlvbnMpO1xuXHRcdFx0fTtcblx0XHRcdHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldE9yaWVudGF0aW9uJyksZm4pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNoZWNrRm4oXCJnZXREZXNjcmlwdGlvblwiKSkge1xuXHRcdFx0bGV0IGZuID0gZnVuY3Rpb24ocmVjLHRpbWVTdGFtcCxvcHRpb25zKSB7XG5cdFx0XHRcdHRoYXQucHJvcHMuZGVzY3JpcHRpb24gPSB0aGF0LmdldEZ1bmMoJ2dldERlc2NyaXB0aW9uJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXREZXNjcmlwdGlvbicpLGZuKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5jaGVja0ZuKFwiZ2V0SWNvblwiKSkge1xuXHRcdFx0bGV0IGZuID0gZnVuY3Rpb24ocmVjLHRpbWVTdGFtcCxvcHRpb25zKSB7XG5cdFx0XHRcdHRoYXQucHJvcHMuaWNvbiA9IHRoYXQuZ2V0RnVuYygnZ2V0SWNvbicpKHJlYyx0aW1lU3RhbXAsb3B0aW9ucyk7XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5hZGRGbih0aGF0LmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0SWNvbicpLGZuKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5jaGVja0ZuKFwiZ2V0SWNvbkNvbG9yXCIpKSB7XG5cdFx0XHRsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcblx0XHRcdFx0dGhhdC5wcm9wcy5pY29uQ29sb3IgPSB0aGF0LmdldEZ1bmMoJ2dldEljb25Db2xvcicpKHJlYyx0aW1lU3RhbXAsb3B0aW9ucyk7XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5hZGRGbih0aGF0LmdldERhdGFTb3VyY2VzSWRzQnlQcm9wZXJ0eSgnZ2V0SWNvbkNvbG9yJyksZm4pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNoZWNrRm4oXCJnZXRJY29uU2NhbGVcIikpIHtcblx0XHRcdGxldCBmbiA9IGZ1bmN0aW9uKHJlYyx0aW1lU3RhbXAsb3B0aW9ucykge1xuXHRcdFx0XHR0aGF0LnByb3BzLmljb25TY2FsZSA9IHRoYXQuZ2V0RnVuYygnZ2V0SWNvblNjYWxlJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXRJY29uU2NhbGUnKSxmbik7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuY2hlY2tGbihcImdldExhYmVsXCIpKSB7XG5cdFx0XHRsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcblx0XHRcdFx0dGhhdC5wcm9wcy5sYWJlbCA9IHRoYXQuZ2V0RnVuYygnZ2V0TGFiZWwnKShyZWMsdGltZVN0YW1wLG9wdGlvbnMpO1xuXHRcdFx0fTtcblx0XHRcdHRoaXMuYWRkRm4odGhhdC5nZXREYXRhU291cmNlc0lkc0J5UHJvcGVydHkoJ2dldExhYmVsJyksZm4pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNoZWNrRm4oXCJnZXRMYWJlbENvbG9yXCIpKSB7XG5cdFx0XHRsZXQgZm4gPSBmdW5jdGlvbihyZWMsdGltZVN0YW1wLG9wdGlvbnMpIHtcblx0XHRcdFx0dGhhdC5wcm9wcy5sYWJlbENvbG9yID0gdGhhdC5nZXRGdW5jKCdnZXRMYWJlbENvbG9yJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXRMYWJlbENvbG9yJyksZm4pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNoZWNrRm4oXCJnZXRMYWJlbFNpemVcIikpIHtcblx0XHRcdGxldCBmbiA9IGZ1bmN0aW9uKHJlYyx0aW1lU3RhbXAsb3B0aW9ucykge1xuXHRcdFx0XHR0aGF0LnByb3BzLmxhYmVsU2l6ZSA9IHRoYXQuZ2V0RnVuYygnZ2V0TGFiZWxTaXplJykocmVjLHRpbWVTdGFtcCxvcHRpb25zKTtcblx0XHRcdH07XG5cdFx0XHR0aGlzLmFkZEZuKHRoYXQuZ2V0RGF0YVNvdXJjZXNJZHNCeVByb3BlcnR5KCdnZXRMYWJlbFNpemUnKSxmbik7XG5cdFx0fVxuXG5cdFx0aWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm9uTGVmdENsaWNrKSAmJiBhc3NlcnRGdW5jdGlvbihwcm9wZXJ0aWVzLm9uTGVmdENsaWNrKSkge1xuXHRcdFx0dGhpcy5wcm9wcy5vbkxlZnRDbGljayA9IHByb3BlcnRpZXMub25MZWZ0Q2xpY2s7XG5cdFx0fVxuXG5cdFx0aWYgKGlzRGVmaW5lZChwcm9wZXJ0aWVzLm9uUmlnaHRDbGljaykgJiYgYXNzZXJ0RnVuY3Rpb24ocHJvcGVydGllcy5vblJpZ2h0Q2xpY2spKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uUmlnaHRDbGljayA9IHByb3BlcnRpZXMub25SaWdodENsaWNrO1xuXHRcdH1cblxuXHRcdGlmIChpc0RlZmluZWQocHJvcGVydGllcy5vbkhvdmVyKSAmJiBhc3NlcnRGdW5jdGlvbihwcm9wZXJ0aWVzLm9uSG92ZXIpKSB7XG5cdFx0XHR0aGlzLnByb3BzLm9uSG92ZXIgPSBwcm9wZXJ0aWVzLm9uSG92ZXI7XG5cdFx0fVxuXG5cdFx0dGhpcy5zYXZlU3RhdGUoKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb2ludE1hcmtlckxheWVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22);\n/* harmony import */ var _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1__);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This datasource provides parsing to H264 raw data.\n * Data: ArrayBuffer\n * @extends DataSource\n * @example\n * import SosGetResultVideo from \'osh/datareceiver/SosGetResultVideo.js\';\n *\n * var videoDataSource = new SosGetResultVideo("H264 video ", {\n        protocol: "ws",\n        service: "SOS",\n        endpointUrl: "sensiasoft.net:8181/sensorhub/sos",\n        offeringID: "urn:android:device:a0e0eac2fea3f614-sos",\n        observedProperty: "http://sensorml.com/ont/swe/property/VideoFrame",\n        startTime: "2016-08-11T20:17:30.402Z",\n        endTime: "2016-08-11T20:18:05.451Z",\n        replaySpeed: 1,\n        bufferingTime: 1000\n  });\n */\n\nclass SosGetResultVideo extends _TimeSeriesDataSource_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * @param {String} name - the datasource name\n   * @param {Object} properties - the datasource properties\n   * @param {Boolean} [properties.timeShift=false] - fix some problem with some android devices with some timestamp shift to 16 sec\n   * @param {Number} [properties.bufferingTime=0 - defines the time during the data has to be buffered. Useful only when used with DataSynchronizer\n   * @param {Number} [properties.timeOut=0] - defines the limit time before data has to be skipped. Useful only when used with DataSynchronizer\n   * @param {String} properties.protocol - defines the protocol of the datasource. @see {@link DataConnector}\n   * @param {String} properties.endpointUrl the endpoint url\n   * @param {String} properties.service the service\n   * @param {String} properties.offeringID the offeringID\n   * @param {String} properties.observedProperty the observed property\n   * @param {String} properties.startTime the start time (ISO format)\n   * @param {String} properties.endTime the end time (ISO format)\n   * @param {Number} [properties.replaySpeed=1] the replay factor\n   * @param {Number} [properties.responseFormat] the response format (e.g video/mp4)\n   * @param {Number} [properties.reconnectTimeout=10000] - the time before reconnecting (in milliseconds)\n   * @param {Object} [properties.customUrlParams={}] - the encoding options\n   * @param {Number} [properties.customUrlParams.video_bitrate] - define a custom bitrate (in b/s)\n   * @param {Number} [properties.customUrlParams.video_scale] - define a custom scale, 0.0 < value < 1.0\n   * @param {Number} [properties.customUrlParams.video_width] - define a custom width\n   * @param {Number} [properties.customUrlParams.video_height] - define a custom height\n   */\n  constructor(name, properties) {\n    super(name, {\n      timeShift: 0,\n      reconnectTimeout: 1000 * 5,\n      // default if not defined into properties\n      ...properties\n    }, new _workers_SosGetResultVideo_worker_js__WEBPACK_IMPORTED_MODULE_1___default.a());\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (SosGetResultVideo);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci9Tb3NHZXRSZXN1bHRWaWRlby5qcz9mODFiIl0sIm5hbWVzIjpbIlNvc0dldFJlc3VsdFZpZGVvIiwiVGltZVNlcmllc0RhdGFTb3VyY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJwcm9wZXJ0aWVzIiwidGltZVNoaWZ0IiwicmVjb25uZWN0VGltZW91dCIsIlNvc0dldFJlc3VsdFZpZGVvV29ya2VyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUEsaUJBQU4sU0FBZ0NDLHdFQUFoQyxDQUFxRDtBQUNqRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJQyxhQUFXLENBQUNDLElBQUQsRUFBT0MsVUFBUCxFQUFtQjtBQUMxQixVQUFNRCxJQUFOLEVBQVk7QUFDUkUsZUFBUyxFQUFDLENBREY7QUFFUkMsc0JBQWdCLEVBQUUsT0FBTyxDQUZqQjtBQUVvQjtBQUM1QixTQUFHRjtBQUhLLEtBQVosRUFJRyxJQUFJRywyRUFBSixFQUpIO0FBS0g7O0FBN0JnRDs7QUFnQ3JDUCwwRUFBaEIiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuIFRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHN1YmplY3QgdG8gdGhlIE1vemlsbGEgUHVibGljIExpY2Vuc2UsIHYuIDIuMC5cbiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmVcbiBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uXG5cbiBTb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgYmFzaXMsXG4gV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlXG4gZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcmlnaHRzIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuIENvcHlyaWdodCAoQykgMjAxNS0yMDIwIE1hdGhpZXUgRGhhaW5hdXQuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbiBBdXRob3I6IE1hdGhpZXUgRGhhaW5hdXQgPG1hdGhpZXUuZGhhaW5hdXRAZ21haWwuY29tPlxuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBUaW1lU2VyaWVzRGF0YVNvdXJjZSBmcm9tICcuL1RpbWVTZXJpZXNEYXRhU291cmNlLmpzJztcbmltcG9ydCBTb3NHZXRSZXN1bHRWaWRlb1dvcmtlciBmcm9tIFwiLi93b3JrZXJzL1Nvc0dldFJlc3VsdFZpZGVvLndvcmtlci5qc1wiO1xuXG4vKipcbiAqIFRoaXMgZGF0YXNvdXJjZSBwcm92aWRlcyBwYXJzaW5nIHRvIEgyNjQgcmF3IGRhdGEuXG4gKiBEYXRhOiBBcnJheUJ1ZmZlclxuICogQGV4dGVuZHMgRGF0YVNvdXJjZVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBTb3NHZXRSZXN1bHRWaWRlbyBmcm9tICdvc2gvZGF0YXJlY2VpdmVyL1Nvc0dldFJlc3VsdFZpZGVvLmpzJztcbiAqXG4gKiB2YXIgdmlkZW9EYXRhU291cmNlID0gbmV3IFNvc0dldFJlc3VsdFZpZGVvKFwiSDI2NCB2aWRlbyBcIiwge1xuICAgICAgICBwcm90b2NvbDogXCJ3c1wiLFxuICAgICAgICBzZXJ2aWNlOiBcIlNPU1wiLFxuICAgICAgICBlbmRwb2ludFVybDogXCJzZW5zaWFzb2Z0Lm5ldDo4MTgxL3NlbnNvcmh1Yi9zb3NcIixcbiAgICAgICAgb2ZmZXJpbmdJRDogXCJ1cm46YW5kcm9pZDpkZXZpY2U6YTBlMGVhYzJmZWEzZjYxNC1zb3NcIixcbiAgICAgICAgb2JzZXJ2ZWRQcm9wZXJ0eTogXCJodHRwOi8vc2Vuc29ybWwuY29tL29udC9zd2UvcHJvcGVydHkvVmlkZW9GcmFtZVwiLFxuICAgICAgICBzdGFydFRpbWU6IFwiMjAxNi0wOC0xMVQyMDoxNzozMC40MDJaXCIsXG4gICAgICAgIGVuZFRpbWU6IFwiMjAxNi0wOC0xMVQyMDoxODowNS40NTFaXCIsXG4gICAgICAgIHJlcGxheVNwZWVkOiAxLFxuICAgICAgICBidWZmZXJpbmdUaW1lOiAxMDAwXG4gIH0pO1xuICovXG5jbGFzcyBTb3NHZXRSZXN1bHRWaWRlbyBleHRlbmRzIFRpbWVTZXJpZXNEYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBkYXRhc291cmNlIG5hbWVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyAtIHRoZSBkYXRhc291cmNlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtwcm9wZXJ0aWVzLnRpbWVTaGlmdD1mYWxzZV0gLSBmaXggc29tZSBwcm9ibGVtIHdpdGggc29tZSBhbmRyb2lkIGRldmljZXMgd2l0aCBzb21lIHRpbWVzdGFtcCBzaGlmdCB0byAxNiBzZWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuYnVmZmVyaW5nVGltZT0wIC0gZGVmaW5lcyB0aGUgdGltZSBkdXJpbmcgdGhlIGRhdGEgaGFzIHRvIGJlIGJ1ZmZlcmVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnRpbWVPdXQ9MF0gLSBkZWZpbmVzIHRoZSBsaW1pdCB0aW1lIGJlZm9yZSBkYXRhIGhhcyB0byBiZSBza2lwcGVkLiBVc2VmdWwgb25seSB3aGVuIHVzZWQgd2l0aCBEYXRhU3luY2hyb25pemVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMucHJvdG9jb2wgLSBkZWZpbmVzIHRoZSBwcm90b2NvbCBvZiB0aGUgZGF0YXNvdXJjZS4gQHNlZSB7QGxpbmsgRGF0YUNvbm5lY3Rvcn1cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRwb2ludFVybCB0aGUgZW5kcG9pbnQgdXJsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnRpZXMuc2VydmljZSB0aGUgc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLm9mZmVyaW5nSUQgdGhlIG9mZmVyaW5nSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5vYnNlcnZlZFByb3BlcnR5IHRoZSBvYnNlcnZlZCBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0aWVzLnN0YXJ0VGltZSB0aGUgc3RhcnQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydGllcy5lbmRUaW1lIHRoZSBlbmQgdGltZSAoSVNPIGZvcm1hdClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVwbGF5U3BlZWQ9MV0gdGhlIHJlcGxheSBmYWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMucmVzcG9uc2VGb3JtYXRdIHRoZSByZXNwb25zZSBmb3JtYXQgKGUuZyB2aWRlby9tcDQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtwcm9wZXJ0aWVzLnJlY29ubmVjdFRpbWVvdXQ9MTAwMDBdIC0gdGhlIHRpbWUgYmVmb3JlIHJlY29ubmVjdGluZyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXM9e31dIC0gdGhlIGVuY29kaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX2JpdHJhdGVdIC0gZGVmaW5lIGEgY3VzdG9tIGJpdHJhdGUgKGluIGIvcylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX3NjYWxlXSAtIGRlZmluZSBhIGN1c3RvbSBzY2FsZSwgMC4wIDwgdmFsdWUgPCAxLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3Byb3BlcnRpZXMuY3VzdG9tVXJsUGFyYW1zLnZpZGVvX3dpZHRoXSAtIGRlZmluZSBhIGN1c3RvbSB3aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcHJvcGVydGllcy5jdXN0b21VcmxQYXJhbXMudmlkZW9faGVpZ2h0XSAtIGRlZmluZSBhIGN1c3RvbSBoZWlnaHRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHtcbiAgICAgICAgICAgIHRpbWVTaGlmdDowLFxuICAgICAgICAgICAgcmVjb25uZWN0VGltZW91dDogMTAwMCAqIDUsIC8vIGRlZmF1bHQgaWYgbm90IGRlZmluZWQgaW50byBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAuLi5wcm9wZXJ0aWVzXG4gICAgICAgIH0sIG5ldyBTb3NHZXRSZXN1bHRWaWRlb1dvcmtlcigpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0ICBTb3NHZXRSZXN1bHRWaWRlbztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('module.exports = function () {\n  return new Worker(__webpack_require__.p + "6b7e266165e36cd85879.worker.js");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL2RhdGFyZWNlaXZlci93b3JrZXJzL1Nvc0dldFJlc3VsdFZpZGVvLndvcmtlci5qcz8yZGI3Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJXb3JrZXIiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLFNBQU8sSUFBSUMsTUFBSixDQUFXQyxxQkFBdUIsR0FBRyxnQ0FBckMsQ0FBUDtBQUNELENBRkQiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFdvcmtlcihfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmI3ZTI2NjE2NWUzNmNkODU4Nzkud29ya2VyLmpzXCIpO1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _View_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);\n/* harmony import */ var _utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * @extends View\n * @example\n *\nimport MjpegView from \'osh/ui/view/video/MjpegView.js\';\n\n let videoView = new MjpegView({\n  container: \'container\',\n  css: \'video-h264\',\n  name: \'UAV Video\',\n  showTime: true,\n  showStats: true,\n  layers: [\n      new DataLayer({\n        dataSourceId: videoDataSource.id\n      })\n  ]\n});\n */\n\nclass MjpegView extends _View_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {string} properties.container - The div element to attach to\n   * @param {string} properties.css - The css classes to set, can be multiple if separate by spaces\n   * @param {String} properties.showTime - Display or not the time onto the view\n   * @param {String} properties.rotation - Allow to define a rotation in degree\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'data\'],\n      ...properties\n    }); // create timestamp slot\n\n    this.timeStamp = null;\n\n    if (Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "i"])(properties.showTime) && properties.showTime) {\n      this.timeStamp = document.createElement("div");\n      this.timeStamp.setAttribute("class", "video-time");\n      document.getElementById(this.divId).appendChild(this.timeStamp);\n    } // creates video tag element\n\n\n    this.imgTag = document.createElement("img");\n    this.imgTag.setAttribute("class", "video-mjpeg"); // rotation option\n\n    this.rotation = 0;\n\n    if (typeof properties != "undefined" && typeof properties.rotation != "undefined") {\n      this.rotation = properties.rotation * Math.PI / 180;\n      this.canvas = document.createElement(\'canvas\');\n      this.canvas.width = 640;\n      this.canvas.height = 480;\n      var ctx = this.canvas.getContext(\'2d\');\n      ctx.translate(0, 480);\n      ctx.rotate(this.rotation);\n      document.getElementById(this.divId).appendChild(this.canvas);\n    } else {\n      // appends <img> tag to <div>\n      document.getElementById(this.divId).appendChild(this.imgTag);\n    }\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const value = values.shift();\n      let imgBlob = new Blob([value.data.frameData]);\n      let url = window.URL.createObjectURL(imgBlob);\n      let oldBlobURL = this.imgTag.src;\n      this.imgTag.src = url;\n\n      if (this.timeStamp !== null) {\n        this.timeStamp.innerHTML = new Date(value.timeStamp).toISOString();\n      }\n\n      window.URL.revokeObjectURL(oldBlobURL);\n    }\n  }\n\n  selectDataView(dataSourceIds, entityId) {\n    if (dataSourceIds.indexOf(this.dataSourceId) > -1 || Object(_utils_Utils_js__WEBPACK_IMPORTED_MODULE_1__[/* isDefined */ "i"])(this.entity) && this.entity.getId() === entityId) {\n      document.getElementById(this.divId).setAttribute("class", this.css + " " + this.cssSelected);\n    } else {\n      document.getElementById(this.divId).setAttribute("class", this.css);\n    }\n  }\n\n  reset() {\n    this.imgTag.src = "";\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (MjpegView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _Layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2017 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\nclass DataLayer extends _Layer__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {\n  constructor(properties) {\n    super(properties);\n    this.type = \'data\';\n  }\n\n  setData(dataSourceId, records, options) {\n    this.props.data = records;\n  }\n  /**\n   * Clone current layer properties\n   * @return {Object} a shallow copy of current properties\n   */\n\n\n  getProps() {\n    return {\n      type: this.type,\n      values: this.props.data\n    };\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__["a"] = (DataLayer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3VpL2xheWVyL0RhdGFMYXllci5qcz83Yzc4Il0sIm5hbWVzIjpbIkRhdGFMYXllciIsIkxheWVyIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0aWVzIiwidHlwZSIsInNldERhdGEiLCJkYXRhU291cmNlSWQiLCJyZWNvcmRzIiwib3B0aW9ucyIsInByb3BzIiwiZGF0YSIsImdldFByb3BzIiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBLE1BQU1BLFNBQU4sU0FBd0JDLHNEQUF4QixDQUE4QjtBQUUxQkMsYUFBVyxDQUFDQyxVQUFELEVBQWE7QUFDcEIsVUFBTUEsVUFBTjtBQUNBLFNBQUtDLElBQUwsR0FBWSxNQUFaO0FBQ0g7O0FBRURDLFNBQU8sQ0FBQ0MsWUFBRCxFQUFlQyxPQUFmLEVBQXdCQyxPQUF4QixFQUFpQztBQUNwQyxTQUFLQyxLQUFMLENBQVdDLElBQVgsR0FBa0JILE9BQWxCO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTs7O0FBQ0lJLFVBQVEsR0FBRztBQUNQLFdBQU87QUFDSFAsVUFBSSxFQUFFLEtBQUtBLElBRFI7QUFFSFEsWUFBTSxFQUFFLEtBQUtILEtBQUwsQ0FBV0M7QUFGaEIsS0FBUDtBQUlIOztBQXBCeUI7O0FBc0JmVixrRUFBZiIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4gVGhlIGNvbnRlbnRzIG9mIHRoaXMgZmlsZSBhcmUgc3ViamVjdCB0byB0aGUgTW96aWxsYSBQdWJsaWMgTGljZW5zZSwgdi4gMi4wLlxuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZVxuIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy5cblxuIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBiYXNpcyxcbiBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2VcbiBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4gQ29weXJpZ2h0IChDKSAyMDE1LTIwMTcgTWF0aGlldSBEaGFpbmF1dC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIEF1dGhvcjogTWF0aGlldSBEaGFpbmF1dCA8bWF0aGlldS5kaGFpbmF1dEBnbWFpbC5jb20+XG5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaW1wb3J0IExheWVyIGZyb20gXCIuL0xheWVyXCI7XG5cbmNsYXNzIERhdGFMYXllciBleHRlbmRzIExheWVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdkYXRhJztcbiAgICB9XG5cbiAgICBzZXREYXRhKGRhdGFTb3VyY2VJZCwgcmVjb3Jkcywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnByb3BzLmRhdGEgPSByZWNvcmRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb25lIGN1cnJlbnQgbGF5ZXIgcHJvcGVydGllc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ2V0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICB2YWx1ZXM6IHRoaXMucHJvcHMuZGF0YVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgRGF0YUxheWVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/utils/Utils.js\nvar Utils = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js\nvar leaflet_src = __webpack_require__(1);\nvar leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);\n\n// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css\nvar leaflet = __webpack_require__(27);\n\n// EXTERNAL MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/View.js + 1 modules\nvar View = __webpack_require__(8);\n\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/map/MapView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n/**\n * This class is an abstract class in charge of handling common Map operations.\n * @extends View\n */\n\nclass MapView_MapView extends View["a" /* default */] {\n  constructor(properties) {\n    super(properties); // map Layer id to array of corresponding markers\n\n    this.layerIdToMarkers = {}; // map Layer id to array of corresponding polylines\n\n    this.layerIdToPolylines = {};\n  }\n\n  setData(dataSourceId, data) {\n    const values = data.values;\n\n    for (let i = 0; i < values.length; i++) {\n      const d = values[i];\n\n      if (data.type === \'marker\') {\n        this.updateMarker(d);\n      } else if (data.type === \'polyline\') {\n        this.updatePolyline(d);\n      } else if (data.type === \'draping\') {\n        this.updateDrapedImage(d);\n      }\n    }\n  }\n  /**\n   * Associate a markerId to a Layer for a fast lookup\n   * @protected\n   * @param {PointMarkerLayer.props} layer - the Layer object\n   * @param {Object} markerObject - the Map marker object\n   */\n\n\n  addMarkerToLayer(props, markerObject) {\n    const currentLayer = this.getLayer(props); // associate the list of markers owning by a specific marker\n\n    if (!(props.id in this.layerIdToMarkers)) {\n      this.layerIdToMarkers[props.id] = {};\n    }\n\n    this.layerIdToMarkers[props.id][props.markerId] = markerObject;\n  }\n  /**\n   * Associate a polylineId to a Layer for a fast lookup\n   * @protected\n   * @param {Polyline.props} layer - the Layer object\n   * @param {Object} polylineObject - the Map polyline object\n   */\n\n\n  addPolylineToLayer(props, polylineObject) {\n    // associate the list of markers owning by a specific marker\n    if (!(props.id in this.layerIdToPolylines)) {\n      this.layerIdToPolylines[props.id] = {};\n    }\n\n    this.layerIdToPolylines[props.id][props.polylineId] = polylineObject;\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {PointMarkerLayer.props} props - the Layer Object\n   */\n\n\n  getMarker(props) {\n    if (!(props.id in this.layerIdToMarkers)) {\n      return null;\n    }\n\n    return this.layerIdToMarkers[props.id][props.markerId];\n  }\n  /**\n   * Get all markers contained in this view\n   * @protected\n   */\n\n\n  getMarkers() {\n    const array = [];\n\n    for (let id in this.layerIdToMarkers) {\n      for (let markerId in this.layerIdToMarkers[id]) {\n        array.push(this.layerIdToMarkers[id][markerId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get all marker contained in this view\n   * @protected\n   */\n\n\n  getPolylines() {\n    const array = [];\n\n    for (let id in this.layerIdToPolylines) {\n      for (let polylineId in this.layerIdToPolylines[id]) {\n        array.push(this.layerIdToPolylines[id][polylineId]);\n      }\n    }\n\n    return array;\n  }\n  /**\n   * Get the markerId associate to the Layer\n   * @protected\n   * @param {Polyline.props} layer - the Layer Object\n   */\n\n\n  getPolyline(props) {\n    if (!(props.id in this.layerIdToPolylines)) {\n      return null;\n    }\n\n    return this.layerIdToPolylines[props.id][props.polylineId];\n  }\n  /**\n   * Get the Layer associated to its id\n   * @param {String} layerId - the id of the Layer\n   * @return {Layer} - the corresponding layer, null otherwise\n   */\n\n\n  getLayer(layerId) {\n    // find corresponding layer\n    for (let currentLayer of this.layers) {\n      if (currentLayer.props.id === layerId) {\n        return currentLayer;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Remove Corresponding Layer\n   * @param {Layer} layer - The layer object\n   */\n\n\n  removeAllFromLayer(layer) {\n    super.removeAllFromLayer(layer); // check for marker\n\n    this.removeMarkers(layer); // check for polylines\n\n    this.removePolylines(layer);\n  }\n  /**\n   * Remove the markers corresponding to a PointMarker Layer\n   * @param {PointMarkerLayer} layer - the layer to remove the markers from\n   */\n\n\n  removeMarkers(layer) {\n    if (Object(Utils["i" /* isDefined */])(layer.props.markerId)) {\n      const markersMap = this.layerIdToMarkers[layer.props.id];\n\n      if (Object(Utils["i" /* isDefined */])(markersMap)) {\n        for (let markerId in markersMap) {\n          const marker = markersMap[markerId];\n          this.removeMarkerFromLayer(marker);\n        }\n      } // remove markers ids from Layer map\n\n\n      delete this.layerIdToMarkers[layer.props.id];\n    }\n  }\n  /**\n   * Remove the polylines corresponding to a PolylineLayer Layer\n   * @param {Polyline} polyline - the layer to remove the polylines from\n   */\n\n\n  removePolylines(polyline) {\n    if (Object(Utils["i" /* isDefined */])(polyline.props.polylineId)) {\n      const polylinesMap = this.layerIdToPolylines[polyline.props.id];\n\n      if (Object(Utils["i" /* isDefined */])(polylinesMap)) {\n        for (let polylineId in polylinesMap) {\n          const polyline = polylinesMap[polylineId];\n          this.removePolylineFromLayer(polyline);\n        }\n      } // remove polylines ids from Layer map\n\n\n      delete this.layerIdToPolylines[polyline.props.id];\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {}\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @protected\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {}\n  /**\n   * Method to call onLeftClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerLeftClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onLeftClick)) {\n      layer.onLeftClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onRightClick Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerRightClick(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onRightClick)) {\n      layer.onRightClick.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onMove Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerMove(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onMove)) {\n      layer.onMove.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Method to call onHover Layer method if exists\n   * @param {String} markerId - the Layer markerId\n   * @param {Object} markerObject - the View marker object\n   * @param {PointMarkerLayer} layer - the Layer object\n   * @param {Object} event - the original Map View event\n   */\n\n\n  onMarkerHover(markerId, markerObject, layer, event) {\n    if (Object(Utils["i" /* isDefined */])(layer.onHover)) {\n      layer.onHover.call(layer, markerId, markerObject, event);\n    }\n  }\n  /**\n   * Gets the the Layer id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the Layer id\n   */\n\n\n  getLayerId(id) {\n    const split = id.split(\'$\');\n\n    if (Object(Utils["i" /* isDefined */])(split) && split.length === 2) {\n      return split[0];\n    }\n\n    return null;\n  }\n  /**\n   * Gets the the Marker id from  a concatenated id\n   * @param {String} id - the concatenated such as layerId$markerId\n   * @return {null|String} the marker id\n   */\n\n\n  getMarkerId(id) {\n    if (!Object(Utils["i" /* isDefined */])(id)) {\n      return null;\n    }\n\n    const split = id.split(\'$\');\n\n    if (Object(Utils["i" /* isDefined */])(split) && split.length === 2) {\n      return split[1];\n    }\n\n    return null;\n  }\n\n}\n\n/* harmony default export */ var map_MapView = (MapView_MapView);\n// CONCATENATED MODULE: /home/nevro/Progs/progs-local/git-repo/OSH/osh-js/source/osh/ui/view/map/LeafletView.js\n/***************************** BEGIN LICENSE BLOCK ***************************\n\n The contents of this file are subject to the Mozilla Public License, v. 2.0.\n If a copy of the MPL was not distributed with this file, You can obtain one\n at http://mozilla.org/MPL/2.0/.\n\n Software distributed under the License is distributed on an "AS IS" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n for the specific language governing rights and limitations under the License.\n\n Copyright (C) 2015-2020 Mathieu Dhainaut. All Rights Reserved.\n\n Author: Mathieu Dhainaut <mathieu.dhainaut@gmail.com>\n\n ******************************* END LICENSE BLOCK ***************************/\n\n\n\n\n/**\n * This class is in charge of displaying GPS/orientation data by adding a marker to the Leaflet Map object.\n * @extends MapView\n * @example\n\n import LeafletView from \'osh/ui/view/map/LeafletView.js\';\n\n let leafletMapView = new LeafletView({\n\tcontainer: \'leafletMap\',\n\tlayers: [\n\t  new PointMarkerLayer({\n      dataSourceId: gpsDataSource.id,\n      getLocation: (rec) => ({\n        x: rec.location.lon,\n        y: rec.location.lat,\n        z: rec.location.alt\n      }),\n      icon: \'./images/car-location.png\',\n      iconSize: [32, 64],\n      iconAnchor: [16, 65],\n      name: \'Car\',\n      description: \'GPS car Toulouse\'\n    })\n  ],\n\tautoZoomOnFirstMarker: true\n});\n */\n\nclass LeafletView_LeafletView extends map_MapView {\n  /**\n   * Create a View.\n   * @param {Object} [properties={}] - the properties of the view\n   * @param {String} properties.container - The div element to attach to\n   * @param {Object[]}  [properties.layers=[]] - The initial layers to add\n   * @param {Boolean} [properties.autoZoomOnFirstMarker=false] - auto zoom on the first added marker\n   * @param {Boolean} [properties.follow=false] - follow the marker\n   * @param {Object} [properties.initialView] - Sets the view of the map (geographical center and zoom) with the given animation options. [See details]{@link https://leafletjs.com/reference-1.7.1.html#map-setview}\n   * @param {Object[]} [properties.overlayLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as overlay layer\n   * @param {Object[]} [properties.baseLayers] - [L.tileLayer]{@link https://leafletjs.com/reference-1.7.1.html#tilelayer-l-tilelayer} objects to use as base layer\n   *\n   */\n  constructor(properties) {\n    super({\n      supportedLayers: [\'marker\', \'draping\', \'polyline\'],\n      ...properties\n    });\n    let cssClass = document.getElementById(this.divId).className;\n    document.getElementById(this.divId).setAttribute("class", cssClass + " " + this.css);\n  }\n\n  beforeAddingItems(options) {\n    // inits the map\n    this.initMap(options);\n  } //---------- MAP SETUP --------------//\n\n  /**\n   *\n   * @private\n   */\n\n\n  initMap(options) {\n    // #region snippet_leafletview_initial_view\n    let initialView = {\n      location: new leaflet_src_default.a.LatLng(0, 0),\n      zoom: 3\n    }; // #endregion snippet_leafletview_initial_view\n\n    this.first = true;\n    this.follow = false;\n    this.autoZoomOnFirstMarker = false;\n    let defaultLayers = this.getDefaultLayers();\n    let defaultLayer = defaultLayers[0].layer;\n    let baseLayers = {};\n    let overlays = {};\n    baseLayers[defaultLayers[0].name] = defaultLayers[0].layer;\n    overlays[defaultLayers[1].name] = defaultLayers[1].layer;\n\n    if (Object(Utils["i" /* isDefined */])(options)) {\n      if (Object(Utils["i" /* isDefined */])(options.initialView)) {\n        initialView = {\n          location: new leaflet_src_default.a.LatLng(options.initialView.lat, options.initialView.lon),\n          zoom: options.initialView.zoom\n        };\n      } // checks autoZoom\n\n\n      if (Object(Utils["i" /* isDefined */])(options.autoZoomOnFirstMarker)) {\n        this.autoZoomOnFirstMarker = options.autoZoomOnFirstMarker;\n      } // checks overlayers\n\n\n      if (Object(Utils["i" /* isDefined */])(options.overlayLayers)) {\n        overlays = options.overlayLayers;\n      } // checks baseLayer\n\n\n      if (Object(Utils["i" /* isDefined */])(options.baseLayers)) {\n        baseLayers = options.baseLayers;\n      }\n\n      if (Object(Utils["i" /* isDefined */])(options.follow)) {\n        this.follow = options.follow;\n      } // checks defaultLayer\n\n\n      if (Object(Utils["i" /* isDefined */])(options.defaultLayer)) {\n        defaultLayer = options.defaultLayer;\n      }\n    } // sets layers to map\n\n\n    this.map = new leaflet_src_default.a.Map(this.divId, {\n      fullscreenControl: true,\n      layers: defaultLayer\n    });\n    leaflet_src_default.a.control.layers(baseLayers, overlays).addTo(this.map);\n    this.map.setView(initialView.location, initialView.zoom); //this.initLayers();\n  }\n  /**\n   * Gets the list of default layers.\n   * @return {Array}\n   */\n\n\n  getDefaultLayers(options) {\n    let maxZoom = 22;\n\n    if (Object(Utils["i" /* isDefined */])(options) && options.maxZoom) {\n      maxZoom = options.maxZoom;\n    } // copyrights\n\n\n    let mbAttr = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\',\n        mbUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let esriLink = \'<a href="http://www.esri.com/">Esri</a>\';\n    let esriWholink = \'i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\'; // leaflet layers\n\n    let esriLayer = leaflet_src_default.a.tileLayer(\'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\', {\n      attribution: \'&copy; \' + esriLink + \', \' + esriWholink,\n      maxZoom: maxZoom,\n      maxNativeZoom: 19\n    });\n    let streets = leaflet_src_default.a.tileLayer(mbUrl, {\n      id: \'mapbox.streets\',\n      attribution: mbAttr,\n      maxZoom: maxZoom\n    });\n    return [{\n      name: "OSM Streets",\n      layer: streets\n    }, {\n      name: "Esri Satellite",\n      layer: esriLayer\n    }];\n  }\n  /**\n   * @private\n   */\n\n\n  initLayers() {\n    // create the tile layer with correct attribution\n    let osmUrl = \'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\';\n    let osmAttrib = \'Map data © <a href="http://openstreetmap.org">OpenStreetMap</a> contributors\';\n    let osm = new leaflet_src_default.a.tileLayer(osmUrl, {\n      minZoom: 1,\n      maxZoom: 22,\n      attribution: osmAttrib\n    });\n    this.map.addLayer(osm);\n  }\n  /**\n   * Add a marker to the map.\n   * @param {PointMarkerLayer.properties} properties - the layer properties\n   * @return {Object} the the new created marker\n   */\n\n\n  addMarker(properties) {\n    Object(Utils["b" /* assertDefined */])(properties.location, \'location\'); //create marker\n\n    let marker = null;\n\n    if (properties.icon !== null) {\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: properties.iconAnchor,\n        iconUrl: properties.icon,\n        iconSize: properties.iconSize\n      });\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x], {\n        icon: markerIcon\n      });\n    } else {\n      marker = leaflet_src_default.a.marker([properties.location.y, properties.location.x]);\n    }\n\n    if (properties.label !== null) {\n      marker.bindTooltip(properties.label, {\n        permanent: false,\n        direction: \'center\',\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    let name = properties.hasOwnProperty("name") && properties.label != null ? properties.label : "";\n    let desc = properties.hasOwnProperty("description") && properties.description != null ? properties.description : "";\n\n    if (!Object(Utils["i" /* isDefined */])(properties.onLeftClick) && (name.length > 0 || desc.length > 0)) {\n      marker.bindPopup(name + \'<div>\' + desc + \'</div>\', {\n        offset: leaflet_src_default.a.point(properties.labelOffset[0], properties.labelOffset[1])\n      });\n    }\n\n    marker.id = properties.id + "$" + properties.markerId;\n    marker.addTo(this.map);\n\n    if (properties.hasOwnProperty(properties.orientation)) {\n      marker.setRotationAngle(properties.orientation.heading);\n    }\n\n    return marker;\n  }\n  /**\n   * Add a polyline to the map.\n   * @param {locations} locations - the coordinates [{x, y}]\n   * @param {Object} properties\n   * @param {String} properties.color\n   * @param {Number} properties.weight\n   * @param {Number} properties.opacity\n   * @param {Number} properties.smoothFactor\n   * @return {string} the id of the new created polyline\n   */\n\n\n  addPolyline(locations, properties) {\n    let polylinePoints = [];\n\n    if (Object(Utils["i" /* isDefined */])(locations) && locations.length > 0) {\n      for (let i = 0; i < locations.length; i++) {\n        polylinePoints.push(new leaflet_src_default.a.LatLng(locations[i].y, locations[i].x));\n      }\n    } //create path\n\n\n    let polyline = new leaflet_src_default.a.Polyline(polylinePoints, {\n      color: properties.color,\n      weight: properties.weight,\n      opacity: properties.opacity,\n      smoothFactor: properties.smoothFactor\n    }).addTo(this.map);\n    return polyline;\n  }\n  /**\n   * Updates the marker associated to the layer.\n   * @param {PointMarkerLayer.props} props - The layer properties allowing the update of the marker\n   */\n\n\n  updateMarker(props) {\n    let marker = this.getMarker(props);\n\n    if (!Object(Utils["i" /* isDefined */])(marker)) {\n      // adds a new marker to the leaflet renderer\n      const markerObject = this.addMarker(props);\n      this.addMarkerToLayer(props, markerObject);\n      const mId = props.markerId; //need to freeze\n\n      markerObject.on(\'click\', event => this.onMarkerLeftClick(mId, markerObject, props, event));\n      markerObject.on(\'contextmenu\', event => this.onMarkerRightClick(mId, markerObject, props, event));\n      markerObject.on(\'mouseover\', event => this.onMarkerHover(mId, markerObject, props, event));\n    } // get the current marker corresponding to the current markerId value of the PointMarker\n\n\n    marker = this.getMarker(props); // updates position\n\n    let lon = props.location.x;\n    let lat = props.location.y;\n\n    if (!isNaN(lon) && !isNaN(lat)) {\n      let newLatLng = new leaflet_src_default.a.LatLng(lat, lon);\n      marker.setLatLng(newLatLng);\n\n      if (this.first && this.autoZoomOnFirstMarker || this.follow) {\n        const markerBounds = leaflet_src_default.a.latLngBounds([newLatLng]);\n        this.map.fitBounds(markerBounds, {\n          maxZoom: props.zoomLevel\n        });\n\n        if (this.first) {\n          this.first = false;\n        }\n      }\n    } // updates orientation\n\n\n    if (Object(Utils["i" /* isDefined */])(props.orientation)) {\n      marker.setRotationAngle(props.orientation.heading);\n    }\n\n    if (props.icon !== null && marker._icon.iconUrl !== props.icon) {\n      // updates icon\n      let markerIcon = leaflet_src_default.a.icon({\n        iconAnchor: props.iconAnchor,\n        iconUrl: props.icon\n      });\n      marker.setIcon(markerIcon);\n    }\n  }\n  /**\n   * Abstract method to remove a marker from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} marker - The Map marker object\n   */\n\n\n  removeMarkerFromLayer(marker) {\n    this.map.removeLayer(marker);\n  }\n  /**\n   * Abstract method to remove a polyline from its corresponding layer.\n   * This is library dependant.\n   * @param {Object} polyline - The Map polyline object\n   */\n\n\n  removePolylineFromLayer(polyline) {\n    this.map.removeLayer(polyline);\n  }\n  /**\n   * Updates the polyline associated to the layer.\n   * @param {PolylineLayer.props} props - The layer properties allowing the update of the polyline\n   */\n\n\n  updatePolyline(props) {\n    let polyline = this.getPolyline(props);\n\n    if (Object(Utils["i" /* isDefined */])(polyline)) {\n      // removes the layer\n      this.removePolylineFromLayer(polyline);\n    } // adds a new polyline to the leaflet renderer\n\n\n    const polylineObj = this.addPolyline(props.locations[props.polylineId], {\n      color: props.color,\n      weight: props.weight,\n      locations: props.locations,\n      maxPoints: props.maxPoints,\n      opacity: props.opacity,\n      smoothFactor: props.smoothFactor\n    });\n    this.addPolylineToLayer(props, polylineObj);\n  }\n\n  attachTo(parentElement) {\n    super.attachTo(parentElement); // Fix leaflet bug when resizing the div parent container\n\n    this.map.invalidateSize();\n  }\n\n  onResize() {\n    super.onResize();\n    let that = this;\n    setTimeout(function () {\n      that.map.invalidateSize();\n    }, 100);\n  }\n\n  onChange(data) {}\n\n}\n/***  little hack starts here ***/\n\n\nleaflet_src_default.a.Map = leaflet_src_default.a.Map.extend({\n  openPopup: function (popup) {\n    this._popup = popup;\n    return this.addLayer(popup).fire(\'popupopen\', {\n      popup: this._popup\n    });\n  }\n}); // Defines rotated marker\n\n(function () {\n  // save these original methods before they are overwritten\n  let proto_initIcon = leaflet_src_default.a.Marker.prototype._initIcon;\n  let proto_setPos = leaflet_src_default.a.Marker.prototype._setPos;\n  let oldIE = leaflet_src_default.a.DomUtil.TRANSFORM === \'msTransform\';\n  leaflet_src_default.a.Marker.addInitHook(function () {\n    let iconAnchor = this.options.icon.options.iconAnchor;\n\n    if (iconAnchor) {\n      iconAnchor = iconAnchor[0] + \'px \' + iconAnchor[1] + \'px\';\n    }\n\n    this.options.rotationOrigin = this.options.rotationOrigin || iconAnchor || \'center bottom\';\n    this.options.rotationAngle = this.options.rotationAngle || 0;\n  });\n  leaflet_src_default.a.Marker.include({\n    _initIcon: function () {\n      proto_initIcon.call(this);\n    },\n    _setPos: function (pos) {\n      proto_setPos.call(this, pos);\n\n      if (this.options.rotationAngle) {\n        this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM + \'Origin\'] = this.options.rotationOrigin;\n\n        if (oldIE) {\n          // for IE 9, use the 2D rotation\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] = \' rotate(\' + this.options.rotationAngle + \'deg)\';\n        } else {\n          // for modern browsers, prefer the 3D accelerated version\n          this._icon.style[leaflet_src_default.a.DomUtil.TRANSFORM] += \' rotateZ(\' + this.options.rotationAngle + \'deg)\';\n        }\n      }\n    },\n    setRotationAngle: function (angle) {\n      this.options.rotationAngle = angle;\n      this.update();\n      return this;\n    },\n    setRotationOrigin: function (origin) {\n      this.options.rotationOrigin = origin;\n      this.update();\n      return this;\n    }\n  });\n})();\n/***  end of hack ***/\n\n\n/* harmony default export */ var map_LeafletView = __webpack_exports__["a"] = (LeafletView_LeafletView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n')},,,,,,,function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(34);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(3).default\nvar update = add(\"c3cc55b4\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/OTViOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFzRztBQUM1SCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTJHO0FBQzdILCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3ZpZXcuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL2RlbW9zL3ZpZGVvLWRpc3BsYXkvdmlkZW8tZGlzcGxheS12dWVqcy9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJjM2NjNTViNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdmlldy5jc3NcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(2);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".osh-view {\\n    width:100%;\\n    height: 100%;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvbmV2cm8vUHJvZ3MvcHJvZ3MtbG9jYWwvZ2l0LXJlcG8vT1NIL29zaC1qcy9zb3VyY2Uvb3NoL3Jlc291cmNlcy9jc3Mvdmlldy5jc3M/NWEyOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLENBQWlHO0FBQzNJO0FBQ0E7QUFDQSxjQUFjLFFBQVMsY0FBYyxpQkFBaUIsbUJBQW1CLEdBQUc7QUFDNUU7QUFDQSIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vZGVtb3MvdmlkZW8tZGlzcGxheS92aWRlby1kaXNwbGF5LXZ1ZWpzL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm9zaC12aWV3IHtcXG4gICAgd2lkdGg6MTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n')}]]);