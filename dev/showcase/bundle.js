/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n  var legacy_beautify_js = function(modules) {\n    var installedModules = {};\n    function __webpack_require__(moduleId) {\n      if (installedModules[moduleId]) {\n        return installedModules[moduleId].exports;\n      }\n      var module = installedModules[moduleId] = {\n        i: moduleId,\n        l: false,\n        exports: {}\n      };\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      module.l = true;\n      return module.exports;\n    }\n    __webpack_require__.m = modules;\n    __webpack_require__.c = installedModules;\n    __webpack_require__.d = function(exports2, name, getter) {\n      if (!__webpack_require__.o(exports2, name)) {\n        Object.defineProperty(exports2, name, { enumerable: true, get: getter });\n      }\n    };\n    __webpack_require__.r = function(exports2) {\n      if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n        Object.defineProperty(exports2, Symbol.toStringTag, { value: \"Module\" });\n      }\n      Object.defineProperty(exports2, \"__esModule\", { value: true });\n    };\n    __webpack_require__.t = function(value, mode) {\n      if (mode & 1)\n        value = __webpack_require__(value);\n      if (mode & 8)\n        return value;\n      if (mode & 4 && typeof value === \"object\" && value && value.__esModule)\n        return value;\n      var ns = /* @__PURE__ */ Object.create(null);\n      __webpack_require__.r(ns);\n      Object.defineProperty(ns, \"default\", { enumerable: true, value });\n      if (mode & 2 && typeof value != \"string\")\n        for (var key in value)\n          __webpack_require__.d(ns, key, function(key2) {\n            return value[key2];\n          }.bind(null, key));\n      return ns;\n    };\n    __webpack_require__.n = function(module) {\n      var getter = module && module.__esModule ? function getDefault() {\n        return module[\"default\"];\n      } : function getModuleExports() {\n        return module;\n      };\n      __webpack_require__.d(getter, \"a\", getter);\n      return getter;\n    };\n    __webpack_require__.o = function(object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    __webpack_require__.p = \"\";\n    return __webpack_require__(__webpack_require__.s = 0);\n  }([\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Beautifier = __webpack_require__(1).Beautifier, Options = __webpack_require__(5).Options;\n      function js_beautify2(js_source_text, options) {\n        var beautifier = new Beautifier(js_source_text, options);\n        return beautifier.beautify();\n      }\n      module.exports = js_beautify2;\n      module.exports.defaultOptions = function() {\n        return new Options();\n      };\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Output = __webpack_require__(2).Output;\n      var Token = __webpack_require__(3).Token;\n      var acorn = __webpack_require__(4);\n      var Options = __webpack_require__(5).Options;\n      var Tokenizer = __webpack_require__(7).Tokenizer;\n      var line_starters = __webpack_require__(7).line_starters;\n      var positionable_operators = __webpack_require__(7).positionable_operators;\n      var TOKEN = __webpack_require__(7).TOKEN;\n      function in_array(what, arr) {\n        return arr.indexOf(what) !== -1;\n      }\n      function ltrim(s) {\n        return s.replace(/^\\s+/g, \"\");\n      }\n      function generateMapFromStrings(list) {\n        var result = {};\n        for (var x = 0; x < list.length; x++) {\n          result[list[x].replace(/-/g, \"_\")] = list[x];\n        }\n        return result;\n      }\n      function reserved_word(token, word) {\n        return token && token.type === TOKEN.RESERVED && token.text === word;\n      }\n      function reserved_array(token, words) {\n        return token && token.type === TOKEN.RESERVED && in_array(token.text, words);\n      }\n      var special_words = [\"case\", \"return\", \"do\", \"if\", \"throw\", \"else\", \"await\", \"break\", \"continue\", \"async\"];\n      var validPositionValues = [\"before-newline\", \"after-newline\", \"preserve-newline\"];\n      var OPERATOR_POSITION = generateMapFromStrings(validPositionValues);\n      var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];\n      var MODE = {\n        BlockStatement: \"BlockStatement\",\n        Statement: \"Statement\",\n        ObjectLiteral: \"ObjectLiteral\",\n        ArrayLiteral: \"ArrayLiteral\",\n        ForInitializer: \"ForInitializer\",\n        Conditional: \"Conditional\",\n        Expression: \"Expression\"\n      };\n      function remove_redundant_indentation(output, frame) {\n        if (frame.multiline_frame || frame.mode === MODE.ForInitializer || frame.mode === MODE.Conditional) {\n          return;\n        }\n        output.remove_indent(frame.start_line_index);\n      }\n      function split_linebreaks(s) {\n        s = s.replace(acorn.allLineBreaks, \"\\n\");\n        var out = [], idx = s.indexOf(\"\\n\");\n        while (idx !== -1) {\n          out.push(s.substring(0, idx));\n          s = s.substring(idx + 1);\n          idx = s.indexOf(\"\\n\");\n        }\n        if (s.length) {\n          out.push(s);\n        }\n        return out;\n      }\n      function is_array(mode) {\n        return mode === MODE.ArrayLiteral;\n      }\n      function is_expression(mode) {\n        return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);\n      }\n      function all_lines_start_with(lines, c) {\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i].trim();\n          if (line.charAt(0) !== c) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function each_line_matches_indent(lines, indent) {\n        var i = 0, len = lines.length, line;\n        for (; i < len; i++) {\n          line = lines[i];\n          if (line && line.indexOf(indent) !== 0) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function Beautifier(source_text, options) {\n        options = options || {};\n        this._source_text = source_text || \"\";\n        this._output = null;\n        this._tokens = null;\n        this._last_last_text = null;\n        this._flags = null;\n        this._previous_flags = null;\n        this._flag_store = null;\n        this._options = new Options(options);\n      }\n      Beautifier.prototype.create_flags = function(flags_base, mode) {\n        var next_indent_level = 0;\n        if (flags_base) {\n          next_indent_level = flags_base.indentation_level;\n          if (!this._output.just_added_newline() && flags_base.line_indent_level > next_indent_level) {\n            next_indent_level = flags_base.line_indent_level;\n          }\n        }\n        var next_flags = {\n          mode,\n          parent: flags_base,\n          last_token: flags_base ? flags_base.last_token : new Token(TOKEN.START_BLOCK, \"\"),\n          last_word: flags_base ? flags_base.last_word : \"\",\n          declaration_statement: false,\n          declaration_assignment: false,\n          multiline_frame: false,\n          inline_frame: false,\n          if_block: false,\n          else_block: false,\n          do_block: false,\n          do_while: false,\n          import_block: false,\n          in_case_statement: false,\n          in_case: false,\n          case_body: false,\n          indentation_level: next_indent_level,\n          alignment: 0,\n          line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n          start_line_index: this._output.get_line_number(),\n          ternary_depth: 0\n        };\n        return next_flags;\n      };\n      Beautifier.prototype._reset = function(source_text) {\n        var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n        this._last_last_text = \"\";\n        this._output = new Output(this._options, baseIndentString);\n        this._output.raw = this._options.test_output_raw;\n        this._flag_store = [];\n        this.set_mode(MODE.BlockStatement);\n        var tokenizer = new Tokenizer(source_text, this._options);\n        this._tokens = tokenizer.tokenize();\n        return source_text;\n      };\n      Beautifier.prototype.beautify = function() {\n        if (this._options.disabled) {\n          return this._source_text;\n        }\n        var sweet_code;\n        var source_text = this._reset(this._source_text);\n        var eol = this._options.eol;\n        if (this._options.eol === \"auto\") {\n          eol = \"\\n\";\n          if (source_text && acorn.lineBreak.test(source_text || \"\")) {\n            eol = source_text.match(acorn.lineBreak)[0];\n          }\n        }\n        var current_token = this._tokens.next();\n        while (current_token) {\n          this.handle_token(current_token);\n          this._last_last_text = this._flags.last_token.text;\n          this._flags.last_token = current_token;\n          current_token = this._tokens.next();\n        }\n        sweet_code = this._output.get_code(eol);\n        return sweet_code;\n      };\n      Beautifier.prototype.handle_token = function(current_token, preserve_statement_flags) {\n        if (current_token.type === TOKEN.START_EXPR) {\n          this.handle_start_expr(current_token);\n        } else if (current_token.type === TOKEN.END_EXPR) {\n          this.handle_end_expr(current_token);\n        } else if (current_token.type === TOKEN.START_BLOCK) {\n          this.handle_start_block(current_token);\n        } else if (current_token.type === TOKEN.END_BLOCK) {\n          this.handle_end_block(current_token);\n        } else if (current_token.type === TOKEN.WORD) {\n          this.handle_word(current_token);\n        } else if (current_token.type === TOKEN.RESERVED) {\n          this.handle_word(current_token);\n        } else if (current_token.type === TOKEN.SEMICOLON) {\n          this.handle_semicolon(current_token);\n        } else if (current_token.type === TOKEN.STRING) {\n          this.handle_string(current_token);\n        } else if (current_token.type === TOKEN.EQUALS) {\n          this.handle_equals(current_token);\n        } else if (current_token.type === TOKEN.OPERATOR) {\n          this.handle_operator(current_token);\n        } else if (current_token.type === TOKEN.COMMA) {\n          this.handle_comma(current_token);\n        } else if (current_token.type === TOKEN.BLOCK_COMMENT) {\n          this.handle_block_comment(current_token, preserve_statement_flags);\n        } else if (current_token.type === TOKEN.COMMENT) {\n          this.handle_comment(current_token, preserve_statement_flags);\n        } else if (current_token.type === TOKEN.DOT) {\n          this.handle_dot(current_token);\n        } else if (current_token.type === TOKEN.EOF) {\n          this.handle_eof(current_token);\n        } else if (current_token.type === TOKEN.UNKNOWN) {\n          this.handle_unknown(current_token, preserve_statement_flags);\n        } else {\n          this.handle_unknown(current_token, preserve_statement_flags);\n        }\n      };\n      Beautifier.prototype.handle_whitespace_and_comments = function(current_token, preserve_statement_flags) {\n        var newlines = current_token.newlines;\n        var keep_whitespace = this._options.keep_array_indentation && is_array(this._flags.mode);\n        if (current_token.comments_before) {\n          var comment_token = current_token.comments_before.next();\n          while (comment_token) {\n            this.handle_whitespace_and_comments(comment_token, preserve_statement_flags);\n            this.handle_token(comment_token, preserve_statement_flags);\n            comment_token = current_token.comments_before.next();\n          }\n        }\n        if (keep_whitespace) {\n          for (var i = 0; i < newlines; i += 1) {\n            this.print_newline(i > 0, preserve_statement_flags);\n          }\n        } else {\n          if (this._options.max_preserve_newlines && newlines > this._options.max_preserve_newlines) {\n            newlines = this._options.max_preserve_newlines;\n          }\n          if (this._options.preserve_newlines) {\n            if (newlines > 1) {\n              this.print_newline(false, preserve_statement_flags);\n              for (var j = 1; j < newlines; j += 1) {\n                this.print_newline(true, preserve_statement_flags);\n              }\n            }\n          }\n        }\n      };\n      var newline_restricted_tokens = [\"async\", \"break\", \"continue\", \"return\", \"throw\", \"yield\"];\n      Beautifier.prototype.allow_wrap_or_preserved_newline = function(current_token, force_linewrap) {\n        force_linewrap = force_linewrap === void 0 ? false : force_linewrap;\n        if (this._output.just_added_newline()) {\n          return;\n        }\n        var shouldPreserveOrForce = this._options.preserve_newlines && current_token.newlines || force_linewrap;\n        var operatorLogicApplies = in_array(this._flags.last_token.text, positionable_operators) || in_array(current_token.text, positionable_operators);\n        if (operatorLogicApplies) {\n          var shouldPrintOperatorNewline = in_array(this._flags.last_token.text, positionable_operators) && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE) || in_array(current_token.text, positionable_operators);\n          shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n        }\n        if (shouldPreserveOrForce) {\n          this.print_newline(false, true);\n        } else if (this._options.wrap_line_length) {\n          if (reserved_array(this._flags.last_token, newline_restricted_tokens)) {\n            return;\n          }\n          this._output.set_wrap_point();\n        }\n      };\n      Beautifier.prototype.print_newline = function(force_newline, preserve_statement_flags) {\n        if (!preserve_statement_flags) {\n          if (this._flags.last_token.text !== \";\" && this._flags.last_token.text !== \",\" && this._flags.last_token.text !== \"=\" && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === \"--\" || this._flags.last_token.text === \"++\")) {\n            var next_token = this._tokens.peek();\n            while (this._flags.mode === MODE.Statement && !(this._flags.if_block && reserved_word(next_token, \"else\")) && !this._flags.do_block) {\n              this.restore_mode();\n            }\n          }\n        }\n        if (this._output.add_new_line(force_newline)) {\n          this._flags.multiline_frame = true;\n        }\n      };\n      Beautifier.prototype.print_token_line_indentation = function(current_token) {\n        if (this._output.just_added_newline()) {\n          if (this._options.keep_array_indentation && current_token.newlines && (current_token.text === \"[\" || is_array(this._flags.mode))) {\n            this._output.current_line.set_indent(-1);\n            this._output.current_line.push(current_token.whitespace_before);\n            this._output.space_before_token = false;\n          } else if (this._output.set_indent(this._flags.indentation_level, this._flags.alignment)) {\n            this._flags.line_indent_level = this._flags.indentation_level;\n          }\n        }\n      };\n      Beautifier.prototype.print_token = function(current_token) {\n        if (this._output.raw) {\n          this._output.add_raw_token(current_token);\n          return;\n        }\n        if (this._options.comma_first && current_token.previous && current_token.previous.type === TOKEN.COMMA && this._output.just_added_newline()) {\n          if (this._output.previous_line.last() === \",\") {\n            var popped = this._output.previous_line.pop();\n            if (this._output.previous_line.is_empty()) {\n              this._output.previous_line.push(popped);\n              this._output.trim(true);\n              this._output.current_line.pop();\n              this._output.trim();\n            }\n            this.print_token_line_indentation(current_token);\n            this._output.add_token(\",\");\n            this._output.space_before_token = true;\n          }\n        }\n        this.print_token_line_indentation(current_token);\n        this._output.non_breaking_space = true;\n        this._output.add_token(current_token.text);\n        if (this._output.previous_token_wrapped) {\n          this._flags.multiline_frame = true;\n        }\n      };\n      Beautifier.prototype.indent = function() {\n        this._flags.indentation_level += 1;\n        this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n      };\n      Beautifier.prototype.deindent = function() {\n        if (this._flags.indentation_level > 0 && (!this._flags.parent || this._flags.indentation_level > this._flags.parent.indentation_level)) {\n          this._flags.indentation_level -= 1;\n          this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n        }\n      };\n      Beautifier.prototype.set_mode = function(mode) {\n        if (this._flags) {\n          this._flag_store.push(this._flags);\n          this._previous_flags = this._flags;\n        } else {\n          this._previous_flags = this.create_flags(null, mode);\n        }\n        this._flags = this.create_flags(this._previous_flags, mode);\n        this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n      };\n      Beautifier.prototype.restore_mode = function() {\n        if (this._flag_store.length > 0) {\n          this._previous_flags = this._flags;\n          this._flags = this._flag_store.pop();\n          if (this._previous_flags.mode === MODE.Statement) {\n            remove_redundant_indentation(this._output, this._previous_flags);\n          }\n          this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n        }\n      };\n      Beautifier.prototype.start_of_object_property = function() {\n        return this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement && (this._flags.last_token.text === \":\" && this._flags.ternary_depth === 0 || reserved_array(this._flags.last_token, [\"get\", \"set\"]));\n      };\n      Beautifier.prototype.start_of_statement = function(current_token) {\n        var start = false;\n        start = start || reserved_array(this._flags.last_token, [\"var\", \"let\", \"const\"]) && current_token.type === TOKEN.WORD;\n        start = start || reserved_word(this._flags.last_token, \"do\");\n        start = start || !(this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement) && reserved_array(this._flags.last_token, newline_restricted_tokens) && !current_token.newlines;\n        start = start || reserved_word(this._flags.last_token, \"else\") && !(reserved_word(current_token, \"if\") && !current_token.comments_before);\n        start = start || this._flags.last_token.type === TOKEN.END_EXPR && (this._previous_flags.mode === MODE.ForInitializer || this._previous_flags.mode === MODE.Conditional);\n        start = start || this._flags.last_token.type === TOKEN.WORD && this._flags.mode === MODE.BlockStatement && !this._flags.in_case && !(current_token.text === \"--\" || current_token.text === \"++\") && this._last_last_text !== \"function\" && current_token.type !== TOKEN.WORD && current_token.type !== TOKEN.RESERVED;\n        start = start || this._flags.mode === MODE.ObjectLiteral && (this._flags.last_token.text === \":\" && this._flags.ternary_depth === 0 || reserved_array(this._flags.last_token, [\"get\", \"set\"]));\n        if (start) {\n          this.set_mode(MODE.Statement);\n          this.indent();\n          this.handle_whitespace_and_comments(current_token, true);\n          if (!this.start_of_object_property()) {\n            this.allow_wrap_or_preserved_newline(\n              current_token,\n              reserved_array(current_token, [\"do\", \"for\", \"if\", \"while\"])\n            );\n          }\n          return true;\n        }\n        return false;\n      };\n      Beautifier.prototype.handle_start_expr = function(current_token) {\n        if (!this.start_of_statement(current_token)) {\n          this.handle_whitespace_and_comments(current_token);\n        }\n        var next_mode = MODE.Expression;\n        if (current_token.text === \"[\") {\n          if (this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === \")\") {\n            if (reserved_array(this._flags.last_token, line_starters)) {\n              this._output.space_before_token = true;\n            }\n            this.print_token(current_token);\n            this.set_mode(next_mode);\n            this.indent();\n            if (this._options.space_in_paren) {\n              this._output.space_before_token = true;\n            }\n            return;\n          }\n          next_mode = MODE.ArrayLiteral;\n          if (is_array(this._flags.mode)) {\n            if (this._flags.last_token.text === \"[\" || this._flags.last_token.text === \",\" && (this._last_last_text === \"]\" || this._last_last_text === \"}\")) {\n              if (!this._options.keep_array_indentation) {\n                this.print_newline();\n              }\n            }\n          }\n          if (!in_array(this._flags.last_token.type, [TOKEN.START_EXPR, TOKEN.END_EXPR, TOKEN.WORD, TOKEN.OPERATOR])) {\n            this._output.space_before_token = true;\n          }\n        } else {\n          if (this._flags.last_token.type === TOKEN.RESERVED) {\n            if (this._flags.last_token.text === \"for\") {\n              this._output.space_before_token = this._options.space_before_conditional;\n              next_mode = MODE.ForInitializer;\n            } else if (in_array(this._flags.last_token.text, [\"if\", \"while\"])) {\n              this._output.space_before_token = this._options.space_before_conditional;\n              next_mode = MODE.Conditional;\n            } else if (in_array(this._flags.last_word, [\"await\", \"async\"])) {\n              this._output.space_before_token = true;\n            } else if (this._flags.last_token.text === \"import\" && current_token.whitespace_before === \"\") {\n              this._output.space_before_token = false;\n            } else if (in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === \"catch\") {\n              this._output.space_before_token = true;\n            }\n          } else if (this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {\n            if (!this.start_of_object_property()) {\n              this.allow_wrap_or_preserved_newline(current_token);\n            }\n          } else if (this._flags.last_token.type === TOKEN.WORD) {\n            this._output.space_before_token = false;\n            var peek_back_two = this._tokens.peek(-3);\n            if (this._options.space_after_named_function && peek_back_two) {\n              var peek_back_three = this._tokens.peek(-4);\n              if (reserved_array(peek_back_two, [\"async\", \"function\"]) || peek_back_two.text === \"*\" && reserved_array(peek_back_three, [\"async\", \"function\"])) {\n                this._output.space_before_token = true;\n              } else if (this._flags.mode === MODE.ObjectLiteral) {\n                if (peek_back_two.text === \"{\" || peek_back_two.text === \",\" || peek_back_two.text === \"*\" && (peek_back_three.text === \"{\" || peek_back_three.text === \",\")) {\n                  this._output.space_before_token = true;\n                }\n              }\n            }\n          } else {\n            this.allow_wrap_or_preserved_newline(current_token);\n          }\n          if (this._flags.last_token.type === TOKEN.RESERVED && (this._flags.last_word === \"function\" || this._flags.last_word === \"typeof\") || this._flags.last_token.text === \"*\" && (in_array(this._last_last_text, [\"function\", \"yield\"]) || this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, [\"{\", \",\"]))) {\n            this._output.space_before_token = this._options.space_after_anon_function;\n          }\n        }\n        if (this._flags.last_token.text === \";\" || this._flags.last_token.type === TOKEN.START_BLOCK) {\n          this.print_newline();\n        } else if (this._flags.last_token.type === TOKEN.END_EXPR || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.END_BLOCK || this._flags.last_token.text === \".\" || this._flags.last_token.type === TOKEN.COMMA) {\n          this.allow_wrap_or_preserved_newline(current_token, current_token.newlines);\n        }\n        this.print_token(current_token);\n        this.set_mode(next_mode);\n        if (this._options.space_in_paren) {\n          this._output.space_before_token = true;\n        }\n        this.indent();\n      };\n      Beautifier.prototype.handle_end_expr = function(current_token) {\n        while (this._flags.mode === MODE.Statement) {\n          this.restore_mode();\n        }\n        this.handle_whitespace_and_comments(current_token);\n        if (this._flags.multiline_frame) {\n          this.allow_wrap_or_preserved_newline(\n            current_token,\n            current_token.text === \"]\" && is_array(this._flags.mode) && !this._options.keep_array_indentation\n          );\n        }\n        if (this._options.space_in_paren) {\n          if (this._flags.last_token.type === TOKEN.START_EXPR && !this._options.space_in_empty_paren) {\n            this._output.trim();\n            this._output.space_before_token = false;\n          } else {\n            this._output.space_before_token = true;\n          }\n        }\n        this.deindent();\n        this.print_token(current_token);\n        this.restore_mode();\n        remove_redundant_indentation(this._output, this._previous_flags);\n        if (this._flags.do_while && this._previous_flags.mode === MODE.Conditional) {\n          this._previous_flags.mode = MODE.Expression;\n          this._flags.do_block = false;\n          this._flags.do_while = false;\n        }\n      };\n      Beautifier.prototype.handle_start_block = function(current_token) {\n        this.handle_whitespace_and_comments(current_token);\n        var next_token = this._tokens.peek();\n        var second_token = this._tokens.peek(1);\n        if (this._flags.last_word === \"switch\" && this._flags.last_token.type === TOKEN.END_EXPR) {\n          this.set_mode(MODE.BlockStatement);\n          this._flags.in_case_statement = true;\n        } else if (this._flags.case_body) {\n          this.set_mode(MODE.BlockStatement);\n        } else if (second_token && (in_array(second_token.text, [\":\", \",\"]) && in_array(next_token.type, [TOKEN.STRING, TOKEN.WORD, TOKEN.RESERVED]) || in_array(next_token.text, [\"get\", \"set\", \"...\"]) && in_array(second_token.type, [TOKEN.WORD, TOKEN.RESERVED]))) {\n          if (!in_array(this._last_last_text, [\"class\", \"interface\"])) {\n            this.set_mode(MODE.ObjectLiteral);\n          } else {\n            this.set_mode(MODE.BlockStatement);\n          }\n        } else if (this._flags.last_token.type === TOKEN.OPERATOR && this._flags.last_token.text === \"=>\") {\n          this.set_mode(MODE.BlockStatement);\n        } else if (in_array(this._flags.last_token.type, [TOKEN.EQUALS, TOKEN.START_EXPR, TOKEN.COMMA, TOKEN.OPERATOR]) || reserved_array(this._flags.last_token, [\"return\", \"throw\", \"import\", \"default\"])) {\n          this.set_mode(MODE.ObjectLiteral);\n        } else {\n          this.set_mode(MODE.BlockStatement);\n        }\n        var empty_braces = !next_token.comments_before && next_token.text === \"}\";\n        var empty_anonymous_function = empty_braces && this._flags.last_word === \"function\" && this._flags.last_token.type === TOKEN.END_EXPR;\n        if (this._options.brace_preserve_inline) {\n          var index = 0;\n          var check_token = null;\n          this._flags.inline_frame = true;\n          do {\n            index += 1;\n            check_token = this._tokens.peek(index - 1);\n            if (check_token.newlines) {\n              this._flags.inline_frame = false;\n              break;\n            }\n          } while (check_token.type !== TOKEN.EOF && !(check_token.type === TOKEN.END_BLOCK && check_token.opened === current_token));\n        }\n        if ((this._options.brace_style === \"expand\" || this._options.brace_style === \"none\" && current_token.newlines) && !this._flags.inline_frame) {\n          if (this._flags.last_token.type !== TOKEN.OPERATOR && (empty_anonymous_function || this._flags.last_token.type === TOKEN.EQUALS || reserved_array(this._flags.last_token, special_words) && this._flags.last_token.text !== \"else\")) {\n            this._output.space_before_token = true;\n          } else {\n            this.print_newline(false, true);\n          }\n        } else {\n          if (is_array(this._previous_flags.mode) && (this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.COMMA)) {\n            if (this._flags.last_token.type === TOKEN.COMMA || this._options.space_in_paren) {\n              this._output.space_before_token = true;\n            }\n            if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR && this._flags.inline_frame) {\n              this.allow_wrap_or_preserved_newline(current_token);\n              this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame;\n              this._flags.multiline_frame = false;\n            }\n          }\n          if (this._flags.last_token.type !== TOKEN.OPERATOR && this._flags.last_token.type !== TOKEN.START_EXPR) {\n            if (this._flags.last_token.type === TOKEN.START_BLOCK && !this._flags.inline_frame) {\n              this.print_newline();\n            } else {\n              this._output.space_before_token = true;\n            }\n          }\n        }\n        this.print_token(current_token);\n        this.indent();\n        if (!empty_braces && !(this._options.brace_preserve_inline && this._flags.inline_frame)) {\n          this.print_newline();\n        }\n      };\n      Beautifier.prototype.handle_end_block = function(current_token) {\n        this.handle_whitespace_and_comments(current_token);\n        while (this._flags.mode === MODE.Statement) {\n          this.restore_mode();\n        }\n        var empty_braces = this._flags.last_token.type === TOKEN.START_BLOCK;\n        if (this._flags.inline_frame && !empty_braces) {\n          this._output.space_before_token = true;\n        } else if (this._options.brace_style === \"expand\") {\n          if (!empty_braces) {\n            this.print_newline();\n          }\n        } else {\n          if (!empty_braces) {\n            if (is_array(this._flags.mode) && this._options.keep_array_indentation) {\n              this._options.keep_array_indentation = false;\n              this.print_newline();\n              this._options.keep_array_indentation = true;\n            } else {\n              this.print_newline();\n            }\n          }\n        }\n        this.restore_mode();\n        this.print_token(current_token);\n      };\n      Beautifier.prototype.handle_word = function(current_token) {\n        if (current_token.type === TOKEN.RESERVED) {\n          if (in_array(current_token.text, [\"set\", \"get\"]) && this._flags.mode !== MODE.ObjectLiteral) {\n            current_token.type = TOKEN.WORD;\n          } else if (current_token.text === \"import\" && this._tokens.peek().text === \"(\") {\n            current_token.type = TOKEN.WORD;\n          } else if (in_array(current_token.text, [\"as\", \"from\"]) && !this._flags.import_block) {\n            current_token.type = TOKEN.WORD;\n          } else if (this._flags.mode === MODE.ObjectLiteral) {\n            var next_token = this._tokens.peek();\n            if (next_token.text === \":\") {\n              current_token.type = TOKEN.WORD;\n            }\n          }\n        }\n        if (this.start_of_statement(current_token)) {\n          if (reserved_array(this._flags.last_token, [\"var\", \"let\", \"const\"]) && current_token.type === TOKEN.WORD) {\n            this._flags.declaration_statement = true;\n          }\n        } else if (current_token.newlines && !is_expression(this._flags.mode) && (this._flags.last_token.type !== TOKEN.OPERATOR || (this._flags.last_token.text === \"--\" || this._flags.last_token.text === \"++\")) && this._flags.last_token.type !== TOKEN.EQUALS && (this._options.preserve_newlines || !reserved_array(this._flags.last_token, [\"var\", \"let\", \"const\", \"set\", \"get\"]))) {\n          this.handle_whitespace_and_comments(current_token);\n          this.print_newline();\n        } else {\n          this.handle_whitespace_and_comments(current_token);\n        }\n        if (this._flags.do_block && !this._flags.do_while) {\n          if (reserved_word(current_token, \"while\")) {\n            this._output.space_before_token = true;\n            this.print_token(current_token);\n            this._output.space_before_token = true;\n            this._flags.do_while = true;\n            return;\n          } else {\n            this.print_newline();\n            this._flags.do_block = false;\n          }\n        }\n        if (this._flags.if_block) {\n          if (!this._flags.else_block && reserved_word(current_token, \"else\")) {\n            this._flags.else_block = true;\n          } else {\n            while (this._flags.mode === MODE.Statement) {\n              this.restore_mode();\n            }\n            this._flags.if_block = false;\n            this._flags.else_block = false;\n          }\n        }\n        if (this._flags.in_case_statement && reserved_array(current_token, [\"case\", \"default\"])) {\n          this.print_newline();\n          if (this._flags.last_token.type !== TOKEN.END_BLOCK && (this._flags.case_body || this._options.jslint_happy)) {\n            this.deindent();\n          }\n          this._flags.case_body = false;\n          this.print_token(current_token);\n          this._flags.in_case = true;\n          return;\n        }\n        if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {\n          if (!this.start_of_object_property()) {\n            this.allow_wrap_or_preserved_newline(current_token);\n          }\n        }\n        if (reserved_word(current_token, \"function\")) {\n          if (in_array(this._flags.last_token.text, [\"}\", \";\"]) || this._output.just_added_newline() && !(in_array(this._flags.last_token.text, [\"(\", \"[\", \"{\", \":\", \"=\", \",\"]) || this._flags.last_token.type === TOKEN.OPERATOR)) {\n            if (!this._output.just_added_blankline() && !current_token.comments_before) {\n              this.print_newline();\n              this.print_newline(true);\n            }\n          }\n          if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD) {\n            if (reserved_array(this._flags.last_token, [\"get\", \"set\", \"new\", \"export\"]) || reserved_array(this._flags.last_token, newline_restricted_tokens)) {\n              this._output.space_before_token = true;\n            } else if (reserved_word(this._flags.last_token, \"default\") && this._last_last_text === \"export\") {\n              this._output.space_before_token = true;\n            } else if (this._flags.last_token.text === \"declare\") {\n              this._output.space_before_token = true;\n            } else {\n              this.print_newline();\n            }\n          } else if (this._flags.last_token.type === TOKEN.OPERATOR || this._flags.last_token.text === \"=\") {\n            this._output.space_before_token = true;\n          } else if (!this._flags.multiline_frame && (is_expression(this._flags.mode) || is_array(this._flags.mode))) {\n          } else {\n            this.print_newline();\n          }\n          this.print_token(current_token);\n          this._flags.last_word = current_token.text;\n          return;\n        }\n        var prefix = \"NONE\";\n        if (this._flags.last_token.type === TOKEN.END_BLOCK) {\n          if (this._previous_flags.inline_frame) {\n            prefix = \"SPACE\";\n          } else if (!reserved_array(current_token, [\"else\", \"catch\", \"finally\", \"from\"])) {\n            prefix = \"NEWLINE\";\n          } else {\n            if (this._options.brace_style === \"expand\" || this._options.brace_style === \"end-expand\" || this._options.brace_style === \"none\" && current_token.newlines) {\n              prefix = \"NEWLINE\";\n            } else {\n              prefix = \"SPACE\";\n              this._output.space_before_token = true;\n            }\n          }\n        } else if (this._flags.last_token.type === TOKEN.SEMICOLON && this._flags.mode === MODE.BlockStatement) {\n          prefix = \"NEWLINE\";\n        } else if (this._flags.last_token.type === TOKEN.SEMICOLON && is_expression(this._flags.mode)) {\n          prefix = \"SPACE\";\n        } else if (this._flags.last_token.type === TOKEN.STRING) {\n          prefix = \"NEWLINE\";\n        } else if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === \"*\" && (in_array(this._last_last_text, [\"function\", \"yield\"]) || this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, [\"{\", \",\"]))) {\n          prefix = \"SPACE\";\n        } else if (this._flags.last_token.type === TOKEN.START_BLOCK) {\n          if (this._flags.inline_frame) {\n            prefix = \"SPACE\";\n          } else {\n            prefix = \"NEWLINE\";\n          }\n        } else if (this._flags.last_token.type === TOKEN.END_EXPR) {\n          this._output.space_before_token = true;\n          prefix = \"NEWLINE\";\n        }\n        if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== \")\") {\n          if (this._flags.inline_frame || this._flags.last_token.text === \"else\" || this._flags.last_token.text === \"export\") {\n            prefix = \"SPACE\";\n          } else {\n            prefix = \"NEWLINE\";\n          }\n        }\n        if (reserved_array(current_token, [\"else\", \"catch\", \"finally\"])) {\n          if ((!(this._flags.last_token.type === TOKEN.END_BLOCK && this._previous_flags.mode === MODE.BlockStatement) || this._options.brace_style === \"expand\" || this._options.brace_style === \"end-expand\" || this._options.brace_style === \"none\" && current_token.newlines) && !this._flags.inline_frame) {\n            this.print_newline();\n          } else {\n            this._output.trim(true);\n            var line = this._output.current_line;\n            if (line.last() !== \"}\") {\n              this.print_newline();\n            }\n            this._output.space_before_token = true;\n          }\n        } else if (prefix === \"NEWLINE\") {\n          if (reserved_array(this._flags.last_token, special_words)) {\n            this._output.space_before_token = true;\n          } else if (this._flags.last_token.text === \"declare\" && reserved_array(current_token, [\"var\", \"let\", \"const\"])) {\n            this._output.space_before_token = true;\n          } else if (this._flags.last_token.type !== TOKEN.END_EXPR) {\n            if ((this._flags.last_token.type !== TOKEN.START_EXPR || !reserved_array(current_token, [\"var\", \"let\", \"const\"])) && this._flags.last_token.text !== \":\") {\n              if (reserved_word(current_token, \"if\") && reserved_word(current_token.previous, \"else\")) {\n                this._output.space_before_token = true;\n              } else {\n                this.print_newline();\n              }\n            }\n          } else if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== \")\") {\n            this.print_newline();\n          }\n        } else if (this._flags.multiline_frame && is_array(this._flags.mode) && this._flags.last_token.text === \",\" && this._last_last_text === \"}\") {\n          this.print_newline();\n        } else if (prefix === \"SPACE\") {\n          this._output.space_before_token = true;\n        }\n        if (current_token.previous && (current_token.previous.type === TOKEN.WORD || current_token.previous.type === TOKEN.RESERVED)) {\n          this._output.space_before_token = true;\n        }\n        this.print_token(current_token);\n        this._flags.last_word = current_token.text;\n        if (current_token.type === TOKEN.RESERVED) {\n          if (current_token.text === \"do\") {\n            this._flags.do_block = true;\n          } else if (current_token.text === \"if\") {\n            this._flags.if_block = true;\n          } else if (current_token.text === \"import\") {\n            this._flags.import_block = true;\n          } else if (this._flags.import_block && reserved_word(current_token, \"from\")) {\n            this._flags.import_block = false;\n          }\n        }\n      };\n      Beautifier.prototype.handle_semicolon = function(current_token) {\n        if (this.start_of_statement(current_token)) {\n          this._output.space_before_token = false;\n        } else {\n          this.handle_whitespace_and_comments(current_token);\n        }\n        var next_token = this._tokens.peek();\n        while (this._flags.mode === MODE.Statement && !(this._flags.if_block && reserved_word(next_token, \"else\")) && !this._flags.do_block) {\n          this.restore_mode();\n        }\n        if (this._flags.import_block) {\n          this._flags.import_block = false;\n        }\n        this.print_token(current_token);\n      };\n      Beautifier.prototype.handle_string = function(current_token) {\n        if (this.start_of_statement(current_token)) {\n          this._output.space_before_token = true;\n        } else {\n          this.handle_whitespace_and_comments(current_token);\n          if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.inline_frame) {\n            this._output.space_before_token = true;\n          } else if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {\n            if (!this.start_of_object_property()) {\n              this.allow_wrap_or_preserved_newline(current_token);\n            }\n          } else {\n            this.print_newline();\n          }\n        }\n        this.print_token(current_token);\n      };\n      Beautifier.prototype.handle_equals = function(current_token) {\n        if (this.start_of_statement(current_token)) {\n        } else {\n          this.handle_whitespace_and_comments(current_token);\n        }\n        if (this._flags.declaration_statement) {\n          this._flags.declaration_assignment = true;\n        }\n        this._output.space_before_token = true;\n        this.print_token(current_token);\n        this._output.space_before_token = true;\n      };\n      Beautifier.prototype.handle_comma = function(current_token) {\n        this.handle_whitespace_and_comments(current_token, true);\n        this.print_token(current_token);\n        this._output.space_before_token = true;\n        if (this._flags.declaration_statement) {\n          if (is_expression(this._flags.parent.mode)) {\n            this._flags.declaration_assignment = false;\n          }\n          if (this._flags.declaration_assignment) {\n            this._flags.declaration_assignment = false;\n            this.print_newline(false, true);\n          } else if (this._options.comma_first) {\n            this.allow_wrap_or_preserved_newline(current_token);\n          }\n        } else if (this._flags.mode === MODE.ObjectLiteral || this._flags.mode === MODE.Statement && this._flags.parent.mode === MODE.ObjectLiteral) {\n          if (this._flags.mode === MODE.Statement) {\n            this.restore_mode();\n          }\n          if (!this._flags.inline_frame) {\n            this.print_newline();\n          }\n        } else if (this._options.comma_first) {\n          this.allow_wrap_or_preserved_newline(current_token);\n        }\n      };\n      Beautifier.prototype.handle_operator = function(current_token) {\n        var isGeneratorAsterisk = current_token.text === \"*\" && (reserved_array(this._flags.last_token, [\"function\", \"yield\"]) || in_array(this._flags.last_token.type, [TOKEN.START_BLOCK, TOKEN.COMMA, TOKEN.END_BLOCK, TOKEN.SEMICOLON]));\n        var isUnary = in_array(current_token.text, [\"-\", \"+\"]) && (in_array(this._flags.last_token.type, [TOKEN.START_BLOCK, TOKEN.START_EXPR, TOKEN.EQUALS, TOKEN.OPERATOR]) || in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === \",\");\n        if (this.start_of_statement(current_token)) {\n        } else {\n          var preserve_statement_flags = !isGeneratorAsterisk;\n          this.handle_whitespace_and_comments(current_token, preserve_statement_flags);\n        }\n        if (reserved_array(this._flags.last_token, special_words)) {\n          this._output.space_before_token = true;\n          this.print_token(current_token);\n          return;\n        }\n        if (current_token.text === \"*\" && this._flags.last_token.type === TOKEN.DOT) {\n          this.print_token(current_token);\n          return;\n        }\n        if (current_token.text === \"::\") {\n          this.print_token(current_token);\n          return;\n        }\n        if (this._flags.last_token.type === TOKEN.OPERATOR && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n          this.allow_wrap_or_preserved_newline(current_token);\n        }\n        if (current_token.text === \":\" && this._flags.in_case) {\n          this.print_token(current_token);\n          this._flags.in_case = false;\n          this._flags.case_body = true;\n          if (this._tokens.peek().type !== TOKEN.START_BLOCK) {\n            this.indent();\n            this.print_newline();\n          } else {\n            this._output.space_before_token = true;\n          }\n          return;\n        }\n        var space_before = true;\n        var space_after = true;\n        var in_ternary = false;\n        if (current_token.text === \":\") {\n          if (this._flags.ternary_depth === 0) {\n            space_before = false;\n          } else {\n            this._flags.ternary_depth -= 1;\n            in_ternary = true;\n          }\n        } else if (current_token.text === \"?\") {\n          this._flags.ternary_depth += 1;\n        }\n        if (!isUnary && !isGeneratorAsterisk && this._options.preserve_newlines && in_array(current_token.text, positionable_operators)) {\n          var isColon = current_token.text === \":\";\n          var isTernaryColon = isColon && in_ternary;\n          var isOtherColon = isColon && !in_ternary;\n          switch (this._options.operator_position) {\n            case OPERATOR_POSITION.before_newline:\n              this._output.space_before_token = !isOtherColon;\n              this.print_token(current_token);\n              if (!isColon || isTernaryColon) {\n                this.allow_wrap_or_preserved_newline(current_token);\n              }\n              this._output.space_before_token = true;\n              return;\n            case OPERATOR_POSITION.after_newline:\n              this._output.space_before_token = true;\n              if (!isColon || isTernaryColon) {\n                if (this._tokens.peek().newlines) {\n                  this.print_newline(false, true);\n                } else {\n                  this.allow_wrap_or_preserved_newline(current_token);\n                }\n              } else {\n                this._output.space_before_token = false;\n              }\n              this.print_token(current_token);\n              this._output.space_before_token = true;\n              return;\n            case OPERATOR_POSITION.preserve_newline:\n              if (!isOtherColon) {\n                this.allow_wrap_or_preserved_newline(current_token);\n              }\n              space_before = !(this._output.just_added_newline() || isOtherColon);\n              this._output.space_before_token = space_before;\n              this.print_token(current_token);\n              this._output.space_before_token = true;\n              return;\n          }\n        }\n        if (isGeneratorAsterisk) {\n          this.allow_wrap_or_preserved_newline(current_token);\n          space_before = false;\n          var next_token = this._tokens.peek();\n          space_after = next_token && in_array(next_token.type, [TOKEN.WORD, TOKEN.RESERVED]);\n        } else if (current_token.text === \"...\") {\n          this.allow_wrap_or_preserved_newline(current_token);\n          space_before = this._flags.last_token.type === TOKEN.START_BLOCK;\n          space_after = false;\n        } else if (in_array(current_token.text, [\"--\", \"++\", \"!\", \"~\"]) || isUnary) {\n          if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR) {\n            this.allow_wrap_or_preserved_newline(current_token);\n          }\n          space_before = false;\n          space_after = false;\n          if (current_token.newlines && (current_token.text === \"--\" || current_token.text === \"++\")) {\n            this.print_newline(false, true);\n          }\n          if (this._flags.last_token.text === \";\" && is_expression(this._flags.mode)) {\n            space_before = true;\n          }\n          if (this._flags.last_token.type === TOKEN.RESERVED) {\n            space_before = true;\n          } else if (this._flags.last_token.type === TOKEN.END_EXPR) {\n            space_before = !(this._flags.last_token.text === \"]\" && (current_token.text === \"--\" || current_token.text === \"++\"));\n          } else if (this._flags.last_token.type === TOKEN.OPERATOR) {\n            space_before = in_array(current_token.text, [\"--\", \"-\", \"++\", \"+\"]) && in_array(this._flags.last_token.text, [\"--\", \"-\", \"++\", \"+\"]);\n            if (in_array(current_token.text, [\"+\", \"-\"]) && in_array(this._flags.last_token.text, [\"--\", \"++\"])) {\n              space_after = true;\n            }\n          }\n          if ((this._flags.mode === MODE.BlockStatement && !this._flags.inline_frame || this._flags.mode === MODE.Statement) && (this._flags.last_token.text === \"{\" || this._flags.last_token.text === \";\")) {\n            this.print_newline();\n          }\n        }\n        this._output.space_before_token = this._output.space_before_token || space_before;\n        this.print_token(current_token);\n        this._output.space_before_token = space_after;\n      };\n      Beautifier.prototype.handle_block_comment = function(current_token, preserve_statement_flags) {\n        if (this._output.raw) {\n          this._output.add_raw_token(current_token);\n          if (current_token.directives && current_token.directives.preserve === \"end\") {\n            this._output.raw = this._options.test_output_raw;\n          }\n          return;\n        }\n        if (current_token.directives) {\n          this.print_newline(false, preserve_statement_flags);\n          this.print_token(current_token);\n          if (current_token.directives.preserve === \"start\") {\n            this._output.raw = true;\n          }\n          this.print_newline(false, true);\n          return;\n        }\n        if (!acorn.newline.test(current_token.text) && !current_token.newlines) {\n          this._output.space_before_token = true;\n          this.print_token(current_token);\n          this._output.space_before_token = true;\n          return;\n        } else {\n          this.print_block_commment(current_token, preserve_statement_flags);\n        }\n      };\n      Beautifier.prototype.print_block_commment = function(current_token, preserve_statement_flags) {\n        var lines = split_linebreaks(current_token.text);\n        var j;\n        var javadoc = false;\n        var starless = false;\n        var lastIndent = current_token.whitespace_before;\n        var lastIndentLength = lastIndent.length;\n        this.print_newline(false, preserve_statement_flags);\n        this.print_token_line_indentation(current_token);\n        this._output.add_token(lines[0]);\n        this.print_newline(false, preserve_statement_flags);\n        if (lines.length > 1) {\n          lines = lines.slice(1);\n          javadoc = all_lines_start_with(lines, \"*\");\n          starless = each_line_matches_indent(lines, lastIndent);\n          if (javadoc) {\n            this._flags.alignment = 1;\n          }\n          for (j = 0; j < lines.length; j++) {\n            if (javadoc) {\n              this.print_token_line_indentation(current_token);\n              this._output.add_token(ltrim(lines[j]));\n            } else if (starless && lines[j]) {\n              this.print_token_line_indentation(current_token);\n              this._output.add_token(lines[j].substring(lastIndentLength));\n            } else {\n              this._output.current_line.set_indent(-1);\n              this._output.add_token(lines[j]);\n            }\n            this.print_newline(false, preserve_statement_flags);\n          }\n          this._flags.alignment = 0;\n        }\n      };\n      Beautifier.prototype.handle_comment = function(current_token, preserve_statement_flags) {\n        if (current_token.newlines) {\n          this.print_newline(false, preserve_statement_flags);\n        } else {\n          this._output.trim(true);\n        }\n        this._output.space_before_token = true;\n        this.print_token(current_token);\n        this.print_newline(false, preserve_statement_flags);\n      };\n      Beautifier.prototype.handle_dot = function(current_token) {\n        if (this.start_of_statement(current_token)) {\n        } else {\n          this.handle_whitespace_and_comments(current_token, true);\n        }\n        if (reserved_array(this._flags.last_token, special_words)) {\n          this._output.space_before_token = false;\n        } else {\n          this.allow_wrap_or_preserved_newline(\n            current_token,\n            this._flags.last_token.text === \")\" && this._options.break_chained_methods\n          );\n        }\n        if (this._options.unindent_chained_methods && this._output.just_added_newline()) {\n          this.deindent();\n        }\n        this.print_token(current_token);\n      };\n      Beautifier.prototype.handle_unknown = function(current_token, preserve_statement_flags) {\n        this.print_token(current_token);\n        if (current_token.text[current_token.text.length - 1] === \"\\n\") {\n          this.print_newline(false, preserve_statement_flags);\n        }\n      };\n      Beautifier.prototype.handle_eof = function(current_token) {\n        while (this._flags.mode === MODE.Statement) {\n          this.restore_mode();\n        }\n        this.handle_whitespace_and_comments(current_token);\n      };\n      module.exports.Beautifier = Beautifier;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function OutputLine(parent) {\n        this.__parent = parent;\n        this.__character_count = 0;\n        this.__indent_count = -1;\n        this.__alignment_count = 0;\n        this.__wrap_point_index = 0;\n        this.__wrap_point_character_count = 0;\n        this.__wrap_point_indent_count = -1;\n        this.__wrap_point_alignment_count = 0;\n        this.__items = [];\n      }\n      OutputLine.prototype.clone_empty = function() {\n        var line = new OutputLine(this.__parent);\n        line.set_indent(this.__indent_count, this.__alignment_count);\n        return line;\n      };\n      OutputLine.prototype.item = function(index) {\n        if (index < 0) {\n          return this.__items[this.__items.length + index];\n        } else {\n          return this.__items[index];\n        }\n      };\n      OutputLine.prototype.has_match = function(pattern) {\n        for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n          if (this.__items[lastCheckedOutput].match(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      };\n      OutputLine.prototype.set_indent = function(indent, alignment) {\n        if (this.is_empty()) {\n          this.__indent_count = indent || 0;\n          this.__alignment_count = alignment || 0;\n          this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n        }\n      };\n      OutputLine.prototype._set_wrap_point = function() {\n        if (this.__parent.wrap_line_length) {\n          this.__wrap_point_index = this.__items.length;\n          this.__wrap_point_character_count = this.__character_count;\n          this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n          this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n        }\n      };\n      OutputLine.prototype._should_wrap = function() {\n        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n      };\n      OutputLine.prototype._allow_wrap = function() {\n        if (this._should_wrap()) {\n          this.__parent.add_new_line();\n          var next = this.__parent.current_line;\n          next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n          next.__items = this.__items.slice(this.__wrap_point_index);\n          this.__items = this.__items.slice(0, this.__wrap_point_index);\n          next.__character_count += this.__character_count - this.__wrap_point_character_count;\n          this.__character_count = this.__wrap_point_character_count;\n          if (next.__items[0] === \" \") {\n            next.__items.splice(0, 1);\n            next.__character_count -= 1;\n          }\n          return true;\n        }\n        return false;\n      };\n      OutputLine.prototype.is_empty = function() {\n        return this.__items.length === 0;\n      };\n      OutputLine.prototype.last = function() {\n        if (!this.is_empty()) {\n          return this.__items[this.__items.length - 1];\n        } else {\n          return null;\n        }\n      };\n      OutputLine.prototype.push = function(item) {\n        this.__items.push(item);\n        var last_newline_index = item.lastIndexOf(\"\\n\");\n        if (last_newline_index !== -1) {\n          this.__character_count = item.length - last_newline_index;\n        } else {\n          this.__character_count += item.length;\n        }\n      };\n      OutputLine.prototype.pop = function() {\n        var item = null;\n        if (!this.is_empty()) {\n          item = this.__items.pop();\n          this.__character_count -= item.length;\n        }\n        return item;\n      };\n      OutputLine.prototype._remove_indent = function() {\n        if (this.__indent_count > 0) {\n          this.__indent_count -= 1;\n          this.__character_count -= this.__parent.indent_size;\n        }\n      };\n      OutputLine.prototype._remove_wrap_indent = function() {\n        if (this.__wrap_point_indent_count > 0) {\n          this.__wrap_point_indent_count -= 1;\n        }\n      };\n      OutputLine.prototype.trim = function() {\n        while (this.last() === \" \") {\n          this.__items.pop();\n          this.__character_count -= 1;\n        }\n      };\n      OutputLine.prototype.toString = function() {\n        var result = \"\";\n        if (this.is_empty()) {\n          if (this.__parent.indent_empty_lines) {\n            result = this.__parent.get_indent_string(this.__indent_count);\n          }\n        } else {\n          result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n          result += this.__items.join(\"\");\n        }\n        return result;\n      };\n      function IndentStringCache(options, baseIndentString) {\n        this.__cache = [\"\"];\n        this.__indent_size = options.indent_size;\n        this.__indent_string = options.indent_char;\n        if (!options.indent_with_tabs) {\n          this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n        }\n        baseIndentString = baseIndentString || \"\";\n        if (options.indent_level > 0) {\n          baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n        }\n        this.__base_string = baseIndentString;\n        this.__base_string_length = baseIndentString.length;\n      }\n      IndentStringCache.prototype.get_indent_size = function(indent, column) {\n        var result = this.__base_string_length;\n        column = column || 0;\n        if (indent < 0) {\n          result = 0;\n        }\n        result += indent * this.__indent_size;\n        result += column;\n        return result;\n      };\n      IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n        var result = this.__base_string;\n        column = column || 0;\n        if (indent_level < 0) {\n          indent_level = 0;\n          result = \"\";\n        }\n        column += indent_level * this.__indent_size;\n        this.__ensure_cache(column);\n        result += this.__cache[column];\n        return result;\n      };\n      IndentStringCache.prototype.__ensure_cache = function(column) {\n        while (column >= this.__cache.length) {\n          this.__add_column();\n        }\n      };\n      IndentStringCache.prototype.__add_column = function() {\n        var column = this.__cache.length;\n        var indent = 0;\n        var result = \"\";\n        if (this.__indent_size && column >= this.__indent_size) {\n          indent = Math.floor(column / this.__indent_size);\n          column -= indent * this.__indent_size;\n          result = new Array(indent + 1).join(this.__indent_string);\n        }\n        if (column) {\n          result += new Array(column + 1).join(\" \");\n        }\n        this.__cache.push(result);\n      };\n      function Output(options, baseIndentString) {\n        this.__indent_cache = new IndentStringCache(options, baseIndentString);\n        this.raw = false;\n        this._end_with_newline = options.end_with_newline;\n        this.indent_size = options.indent_size;\n        this.wrap_line_length = options.wrap_line_length;\n        this.indent_empty_lines = options.indent_empty_lines;\n        this.__lines = [];\n        this.previous_line = null;\n        this.current_line = null;\n        this.next_line = new OutputLine(this);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n        this.__add_outputline();\n      }\n      Output.prototype.__add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = this.next_line.clone_empty();\n        this.__lines.push(this.current_line);\n      };\n      Output.prototype.get_line_number = function() {\n        return this.__lines.length;\n      };\n      Output.prototype.get_indent_string = function(indent, column) {\n        return this.__indent_cache.get_indent_string(indent, column);\n      };\n      Output.prototype.get_indent_size = function(indent, column) {\n        return this.__indent_cache.get_indent_size(indent, column);\n      };\n      Output.prototype.is_empty = function() {\n        return !this.previous_line && this.current_line.is_empty();\n      };\n      Output.prototype.add_new_line = function(force_newline) {\n        if (this.is_empty() || !force_newline && this.just_added_newline()) {\n          return false;\n        }\n        if (!this.raw) {\n          this.__add_outputline();\n        }\n        return true;\n      };\n      Output.prototype.get_code = function(eol) {\n        this.trim(true);\n        var last_item = this.current_line.pop();\n        if (last_item) {\n          if (last_item[last_item.length - 1] === \"\\n\") {\n            last_item = last_item.replace(/\\n+$/g, \"\");\n          }\n          this.current_line.push(last_item);\n        }\n        if (this._end_with_newline) {\n          this.__add_outputline();\n        }\n        var sweet_code = this.__lines.join(\"\\n\");\n        if (eol !== \"\\n\") {\n          sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n        return sweet_code;\n      };\n      Output.prototype.set_wrap_point = function() {\n        this.current_line._set_wrap_point();\n      };\n      Output.prototype.set_indent = function(indent, alignment) {\n        indent = indent || 0;\n        alignment = alignment || 0;\n        this.next_line.set_indent(indent, alignment);\n        if (this.__lines.length > 1) {\n          this.current_line.set_indent(indent, alignment);\n          return true;\n        }\n        this.current_line.set_indent();\n        return false;\n      };\n      Output.prototype.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n          this.__add_outputline();\n        }\n        this.current_line.set_indent(-1);\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n      };\n      Output.prototype.add_token = function(printable_token) {\n        this.__add_space_before_token();\n        this.current_line.push(printable_token);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = this.current_line._allow_wrap();\n      };\n      Output.prototype.__add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n          if (!this.non_breaking_space) {\n            this.set_wrap_point();\n          }\n          this.current_line.push(\" \");\n        }\n      };\n      Output.prototype.remove_indent = function(index) {\n        var output_length = this.__lines.length;\n        while (index < output_length) {\n          this.__lines[index]._remove_indent();\n          index++;\n        }\n        this.current_line._remove_wrap_indent();\n      };\n      Output.prototype.trim = function(eat_newlines) {\n        eat_newlines = eat_newlines === void 0 ? false : eat_newlines;\n        this.current_line.trim();\n        while (eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()) {\n          this.__lines.pop();\n          this.current_line = this.__lines[this.__lines.length - 1];\n          this.current_line.trim();\n        }\n        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n      };\n      Output.prototype.just_added_newline = function() {\n        return this.current_line.is_empty();\n      };\n      Output.prototype.just_added_blankline = function() {\n        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n      };\n      Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n        var index = this.__lines.length - 2;\n        while (index >= 0) {\n          var potentialEmptyLine = this.__lines[index];\n          if (potentialEmptyLine.is_empty()) {\n            break;\n          } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n            this.__lines.splice(index + 1, 0, new OutputLine(this));\n            this.previous_line = this.__lines[this.__lines.length - 2];\n            break;\n          }\n          index--;\n        }\n      };\n      module.exports.Output = Output;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Token(type, text, newlines, whitespace_before) {\n        this.type = type;\n        this.text = text;\n        this.comments_before = null;\n        this.newlines = newlines || 0;\n        this.whitespace_before = whitespace_before || \"\";\n        this.parent = null;\n        this.next = null;\n        this.previous = null;\n        this.opened = null;\n        this.closed = null;\n        this.directives = null;\n      }\n      module.exports.Token = Token;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var baseASCIIidentifierStartChars = \"\\\\x23\\\\x24\\\\x40\\\\x41-\\\\x5a\\\\x5f\\\\x61-\\\\x7a\";\n      var baseASCIIidentifierChars = \"\\\\x24\\\\x30-\\\\x39\\\\x41-\\\\x5a\\\\x5f\\\\x61-\\\\x7a\";\n      var nonASCIIidentifierStartChars = \"\\\\xaa\\\\xb5\\\\xba\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\u02c1\\\\u02c6-\\\\u02d1\\\\u02e0-\\\\u02e4\\\\u02ec\\\\u02ee\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037a-\\\\u037d\\\\u0386\\\\u0388-\\\\u038a\\\\u038c\\\\u038e-\\\\u03a1\\\\u03a3-\\\\u03f5\\\\u03f7-\\\\u0481\\\\u048a-\\\\u0527\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05d0-\\\\u05ea\\\\u05f0-\\\\u05f2\\\\u0620-\\\\u064a\\\\u066e\\\\u066f\\\\u0671-\\\\u06d3\\\\u06d5\\\\u06e5\\\\u06e6\\\\u06ee\\\\u06ef\\\\u06fa-\\\\u06fc\\\\u06ff\\\\u0710\\\\u0712-\\\\u072f\\\\u074d-\\\\u07a5\\\\u07b1\\\\u07ca-\\\\u07ea\\\\u07f4\\\\u07f5\\\\u07fa\\\\u0800-\\\\u0815\\\\u081a\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08a0\\\\u08a2-\\\\u08ac\\\\u0904-\\\\u0939\\\\u093d\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0977\\\\u0979-\\\\u097f\\\\u0985-\\\\u098c\\\\u098f\\\\u0990\\\\u0993-\\\\u09a8\\\\u09aa-\\\\u09b0\\\\u09b2\\\\u09b6-\\\\u09b9\\\\u09bd\\\\u09ce\\\\u09dc\\\\u09dd\\\\u09df-\\\\u09e1\\\\u09f0\\\\u09f1\\\\u0a05-\\\\u0a0a\\\\u0a0f\\\\u0a10\\\\u0a13-\\\\u0a28\\\\u0a2a-\\\\u0a30\\\\u0a32\\\\u0a33\\\\u0a35\\\\u0a36\\\\u0a38\\\\u0a39\\\\u0a59-\\\\u0a5c\\\\u0a5e\\\\u0a72-\\\\u0a74\\\\u0a85-\\\\u0a8d\\\\u0a8f-\\\\u0a91\\\\u0a93-\\\\u0aa8\\\\u0aaa-\\\\u0ab0\\\\u0ab2\\\\u0ab3\\\\u0ab5-\\\\u0ab9\\\\u0abd\\\\u0ad0\\\\u0ae0\\\\u0ae1\\\\u0b05-\\\\u0b0c\\\\u0b0f\\\\u0b10\\\\u0b13-\\\\u0b28\\\\u0b2a-\\\\u0b30\\\\u0b32\\\\u0b33\\\\u0b35-\\\\u0b39\\\\u0b3d\\\\u0b5c\\\\u0b5d\\\\u0b5f-\\\\u0b61\\\\u0b71\\\\u0b83\\\\u0b85-\\\\u0b8a\\\\u0b8e-\\\\u0b90\\\\u0b92-\\\\u0b95\\\\u0b99\\\\u0b9a\\\\u0b9c\\\\u0b9e\\\\u0b9f\\\\u0ba3\\\\u0ba4\\\\u0ba8-\\\\u0baa\\\\u0bae-\\\\u0bb9\\\\u0bd0\\\\u0c05-\\\\u0c0c\\\\u0c0e-\\\\u0c10\\\\u0c12-\\\\u0c28\\\\u0c2a-\\\\u0c33\\\\u0c35-\\\\u0c39\\\\u0c3d\\\\u0c58\\\\u0c59\\\\u0c60\\\\u0c61\\\\u0c85-\\\\u0c8c\\\\u0c8e-\\\\u0c90\\\\u0c92-\\\\u0ca8\\\\u0caa-\\\\u0cb3\\\\u0cb5-\\\\u0cb9\\\\u0cbd\\\\u0cde\\\\u0ce0\\\\u0ce1\\\\u0cf1\\\\u0cf2\\\\u0d05-\\\\u0d0c\\\\u0d0e-\\\\u0d10\\\\u0d12-\\\\u0d3a\\\\u0d3d\\\\u0d4e\\\\u0d60\\\\u0d61\\\\u0d7a-\\\\u0d7f\\\\u0d85-\\\\u0d96\\\\u0d9a-\\\\u0db1\\\\u0db3-\\\\u0dbb\\\\u0dbd\\\\u0dc0-\\\\u0dc6\\\\u0e01-\\\\u0e30\\\\u0e32\\\\u0e33\\\\u0e40-\\\\u0e46\\\\u0e81\\\\u0e82\\\\u0e84\\\\u0e87\\\\u0e88\\\\u0e8a\\\\u0e8d\\\\u0e94-\\\\u0e97\\\\u0e99-\\\\u0e9f\\\\u0ea1-\\\\u0ea3\\\\u0ea5\\\\u0ea7\\\\u0eaa\\\\u0eab\\\\u0ead-\\\\u0eb0\\\\u0eb2\\\\u0eb3\\\\u0ebd\\\\u0ec0-\\\\u0ec4\\\\u0ec6\\\\u0edc-\\\\u0edf\\\\u0f00\\\\u0f40-\\\\u0f47\\\\u0f49-\\\\u0f6c\\\\u0f88-\\\\u0f8c\\\\u1000-\\\\u102a\\\\u103f\\\\u1050-\\\\u1055\\\\u105a-\\\\u105d\\\\u1061\\\\u1065\\\\u1066\\\\u106e-\\\\u1070\\\\u1075-\\\\u1081\\\\u108e\\\\u10a0-\\\\u10c5\\\\u10c7\\\\u10cd\\\\u10d0-\\\\u10fa\\\\u10fc-\\\\u1248\\\\u124a-\\\\u124d\\\\u1250-\\\\u1256\\\\u1258\\\\u125a-\\\\u125d\\\\u1260-\\\\u1288\\\\u128a-\\\\u128d\\\\u1290-\\\\u12b0\\\\u12b2-\\\\u12b5\\\\u12b8-\\\\u12be\\\\u12c0\\\\u12c2-\\\\u12c5\\\\u12c8-\\\\u12d6\\\\u12d8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135a\\\\u1380-\\\\u138f\\\\u13a0-\\\\u13f4\\\\u1401-\\\\u166c\\\\u166f-\\\\u167f\\\\u1681-\\\\u169a\\\\u16a0-\\\\u16ea\\\\u16ee-\\\\u16f0\\\\u1700-\\\\u170c\\\\u170e-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176c\\\\u176e-\\\\u1770\\\\u1780-\\\\u17b3\\\\u17d7\\\\u17dc\\\\u1820-\\\\u1877\\\\u1880-\\\\u18a8\\\\u18aa\\\\u18b0-\\\\u18f5\\\\u1900-\\\\u191c\\\\u1950-\\\\u196d\\\\u1970-\\\\u1974\\\\u1980-\\\\u19ab\\\\u19c1-\\\\u19c7\\\\u1a00-\\\\u1a16\\\\u1a20-\\\\u1a54\\\\u1aa7\\\\u1b05-\\\\u1b33\\\\u1b45-\\\\u1b4b\\\\u1b83-\\\\u1ba0\\\\u1bae\\\\u1baf\\\\u1bba-\\\\u1be5\\\\u1c00-\\\\u1c23\\\\u1c4d-\\\\u1c4f\\\\u1c5a-\\\\u1c7d\\\\u1ce9-\\\\u1cec\\\\u1cee-\\\\u1cf1\\\\u1cf5\\\\u1cf6\\\\u1d00-\\\\u1dbf\\\\u1e00-\\\\u1f15\\\\u1f18-\\\\u1f1d\\\\u1f20-\\\\u1f45\\\\u1f48-\\\\u1f4d\\\\u1f50-\\\\u1f57\\\\u1f59\\\\u1f5b\\\\u1f5d\\\\u1f5f-\\\\u1f7d\\\\u1f80-\\\\u1fb4\\\\u1fb6-\\\\u1fbc\\\\u1fbe\\\\u1fc2-\\\\u1fc4\\\\u1fc6-\\\\u1fcc\\\\u1fd0-\\\\u1fd3\\\\u1fd6-\\\\u1fdb\\\\u1fe0-\\\\u1fec\\\\u1ff2-\\\\u1ff4\\\\u1ff6-\\\\u1ffc\\\\u2071\\\\u207f\\\\u2090-\\\\u209c\\\\u2102\\\\u2107\\\\u210a-\\\\u2113\\\\u2115\\\\u2119-\\\\u211d\\\\u2124\\\\u2126\\\\u2128\\\\u212a-\\\\u212d\\\\u212f-\\\\u2139\\\\u213c-\\\\u213f\\\\u2145-\\\\u2149\\\\u214e\\\\u2160-\\\\u2188\\\\u2c00-\\\\u2c2e\\\\u2c30-\\\\u2c5e\\\\u2c60-\\\\u2ce4\\\\u2ceb-\\\\u2cee\\\\u2cf2\\\\u2cf3\\\\u2d00-\\\\u2d25\\\\u2d27\\\\u2d2d\\\\u2d30-\\\\u2d67\\\\u2d6f\\\\u2d80-\\\\u2d96\\\\u2da0-\\\\u2da6\\\\u2da8-\\\\u2dae\\\\u2db0-\\\\u2db6\\\\u2db8-\\\\u2dbe\\\\u2dc0-\\\\u2dc6\\\\u2dc8-\\\\u2dce\\\\u2dd0-\\\\u2dd6\\\\u2dd8-\\\\u2dde\\\\u2e2f\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303c\\\\u3041-\\\\u3096\\\\u309d-\\\\u309f\\\\u30a1-\\\\u30fa\\\\u30fc-\\\\u30ff\\\\u3105-\\\\u312d\\\\u3131-\\\\u318e\\\\u31a0-\\\\u31ba\\\\u31f0-\\\\u31ff\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fcc\\\\ua000-\\\\ua48c\\\\ua4d0-\\\\ua4fd\\\\ua500-\\\\ua60c\\\\ua610-\\\\ua61f\\\\ua62a\\\\ua62b\\\\ua640-\\\\ua66e\\\\ua67f-\\\\ua697\\\\ua6a0-\\\\ua6ef\\\\ua717-\\\\ua71f\\\\ua722-\\\\ua788\\\\ua78b-\\\\ua78e\\\\ua790-\\\\ua793\\\\ua7a0-\\\\ua7aa\\\\ua7f8-\\\\ua801\\\\ua803-\\\\ua805\\\\ua807-\\\\ua80a\\\\ua80c-\\\\ua822\\\\ua840-\\\\ua873\\\\ua882-\\\\ua8b3\\\\ua8f2-\\\\ua8f7\\\\ua8fb\\\\ua90a-\\\\ua925\\\\ua930-\\\\ua946\\\\ua960-\\\\ua97c\\\\ua984-\\\\ua9b2\\\\ua9cf\\\\uaa00-\\\\uaa28\\\\uaa40-\\\\uaa42\\\\uaa44-\\\\uaa4b\\\\uaa60-\\\\uaa76\\\\uaa7a\\\\uaa80-\\\\uaaaf\\\\uaab1\\\\uaab5\\\\uaab6\\\\uaab9-\\\\uaabd\\\\uaac0\\\\uaac2\\\\uaadb-\\\\uaadd\\\\uaae0-\\\\uaaea\\\\uaaf2-\\\\uaaf4\\\\uab01-\\\\uab06\\\\uab09-\\\\uab0e\\\\uab11-\\\\uab16\\\\uab20-\\\\uab26\\\\uab28-\\\\uab2e\\\\uabc0-\\\\uabe2\\\\uac00-\\\\ud7a3\\\\ud7b0-\\\\ud7c6\\\\ud7cb-\\\\ud7fb\\\\uf900-\\\\ufa6d\\\\ufa70-\\\\ufad9\\\\ufb00-\\\\ufb06\\\\ufb13-\\\\ufb17\\\\ufb1d\\\\ufb1f-\\\\ufb28\\\\ufb2a-\\\\ufb36\\\\ufb38-\\\\ufb3c\\\\ufb3e\\\\ufb40\\\\ufb41\\\\ufb43\\\\ufb44\\\\ufb46-\\\\ufbb1\\\\ufbd3-\\\\ufd3d\\\\ufd50-\\\\ufd8f\\\\ufd92-\\\\ufdc7\\\\ufdf0-\\\\ufdfb\\\\ufe70-\\\\ufe74\\\\ufe76-\\\\ufefc\\\\uff21-\\\\uff3a\\\\uff41-\\\\uff5a\\\\uff66-\\\\uffbe\\\\uffc2-\\\\uffc7\\\\uffca-\\\\uffcf\\\\uffd2-\\\\uffd7\\\\uffda-\\\\uffdc\";\n      var nonASCIIidentifierChars = \"\\\\u0300-\\\\u036f\\\\u0483-\\\\u0487\\\\u0591-\\\\u05bd\\\\u05bf\\\\u05c1\\\\u05c2\\\\u05c4\\\\u05c5\\\\u05c7\\\\u0610-\\\\u061a\\\\u0620-\\\\u0649\\\\u0672-\\\\u06d3\\\\u06e7-\\\\u06e8\\\\u06fb-\\\\u06fc\\\\u0730-\\\\u074a\\\\u0800-\\\\u0814\\\\u081b-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082d\\\\u0840-\\\\u0857\\\\u08e4-\\\\u08fe\\\\u0900-\\\\u0903\\\\u093a-\\\\u093c\\\\u093e-\\\\u094f\\\\u0951-\\\\u0957\\\\u0962-\\\\u0963\\\\u0966-\\\\u096f\\\\u0981-\\\\u0983\\\\u09bc\\\\u09be-\\\\u09c4\\\\u09c7\\\\u09c8\\\\u09d7\\\\u09df-\\\\u09e0\\\\u0a01-\\\\u0a03\\\\u0a3c\\\\u0a3e-\\\\u0a42\\\\u0a47\\\\u0a48\\\\u0a4b-\\\\u0a4d\\\\u0a51\\\\u0a66-\\\\u0a71\\\\u0a75\\\\u0a81-\\\\u0a83\\\\u0abc\\\\u0abe-\\\\u0ac5\\\\u0ac7-\\\\u0ac9\\\\u0acb-\\\\u0acd\\\\u0ae2-\\\\u0ae3\\\\u0ae6-\\\\u0aef\\\\u0b01-\\\\u0b03\\\\u0b3c\\\\u0b3e-\\\\u0b44\\\\u0b47\\\\u0b48\\\\u0b4b-\\\\u0b4d\\\\u0b56\\\\u0b57\\\\u0b5f-\\\\u0b60\\\\u0b66-\\\\u0b6f\\\\u0b82\\\\u0bbe-\\\\u0bc2\\\\u0bc6-\\\\u0bc8\\\\u0bca-\\\\u0bcd\\\\u0bd7\\\\u0be6-\\\\u0bef\\\\u0c01-\\\\u0c03\\\\u0c46-\\\\u0c48\\\\u0c4a-\\\\u0c4d\\\\u0c55\\\\u0c56\\\\u0c62-\\\\u0c63\\\\u0c66-\\\\u0c6f\\\\u0c82\\\\u0c83\\\\u0cbc\\\\u0cbe-\\\\u0cc4\\\\u0cc6-\\\\u0cc8\\\\u0cca-\\\\u0ccd\\\\u0cd5\\\\u0cd6\\\\u0ce2-\\\\u0ce3\\\\u0ce6-\\\\u0cef\\\\u0d02\\\\u0d03\\\\u0d46-\\\\u0d48\\\\u0d57\\\\u0d62-\\\\u0d63\\\\u0d66-\\\\u0d6f\\\\u0d82\\\\u0d83\\\\u0dca\\\\u0dcf-\\\\u0dd4\\\\u0dd6\\\\u0dd8-\\\\u0ddf\\\\u0df2\\\\u0df3\\\\u0e34-\\\\u0e3a\\\\u0e40-\\\\u0e45\\\\u0e50-\\\\u0e59\\\\u0eb4-\\\\u0eb9\\\\u0ec8-\\\\u0ecd\\\\u0ed0-\\\\u0ed9\\\\u0f18\\\\u0f19\\\\u0f20-\\\\u0f29\\\\u0f35\\\\u0f37\\\\u0f39\\\\u0f41-\\\\u0f47\\\\u0f71-\\\\u0f84\\\\u0f86-\\\\u0f87\\\\u0f8d-\\\\u0f97\\\\u0f99-\\\\u0fbc\\\\u0fc6\\\\u1000-\\\\u1029\\\\u1040-\\\\u1049\\\\u1067-\\\\u106d\\\\u1071-\\\\u1074\\\\u1082-\\\\u108d\\\\u108f-\\\\u109d\\\\u135d-\\\\u135f\\\\u170e-\\\\u1710\\\\u1720-\\\\u1730\\\\u1740-\\\\u1750\\\\u1772\\\\u1773\\\\u1780-\\\\u17b2\\\\u17dd\\\\u17e0-\\\\u17e9\\\\u180b-\\\\u180d\\\\u1810-\\\\u1819\\\\u1920-\\\\u192b\\\\u1930-\\\\u193b\\\\u1951-\\\\u196d\\\\u19b0-\\\\u19c0\\\\u19c8-\\\\u19c9\\\\u19d0-\\\\u19d9\\\\u1a00-\\\\u1a15\\\\u1a20-\\\\u1a53\\\\u1a60-\\\\u1a7c\\\\u1a7f-\\\\u1a89\\\\u1a90-\\\\u1a99\\\\u1b46-\\\\u1b4b\\\\u1b50-\\\\u1b59\\\\u1b6b-\\\\u1b73\\\\u1bb0-\\\\u1bb9\\\\u1be6-\\\\u1bf3\\\\u1c00-\\\\u1c22\\\\u1c40-\\\\u1c49\\\\u1c5b-\\\\u1c7d\\\\u1cd0-\\\\u1cd2\\\\u1d00-\\\\u1dbe\\\\u1e01-\\\\u1f15\\\\u200c\\\\u200d\\\\u203f\\\\u2040\\\\u2054\\\\u20d0-\\\\u20dc\\\\u20e1\\\\u20e5-\\\\u20f0\\\\u2d81-\\\\u2d96\\\\u2de0-\\\\u2dff\\\\u3021-\\\\u3028\\\\u3099\\\\u309a\\\\ua640-\\\\ua66d\\\\ua674-\\\\ua67d\\\\ua69f\\\\ua6f0-\\\\ua6f1\\\\ua7f8-\\\\ua800\\\\ua806\\\\ua80b\\\\ua823-\\\\ua827\\\\ua880-\\\\ua881\\\\ua8b4-\\\\ua8c4\\\\ua8d0-\\\\ua8d9\\\\ua8f3-\\\\ua8f7\\\\ua900-\\\\ua909\\\\ua926-\\\\ua92d\\\\ua930-\\\\ua945\\\\ua980-\\\\ua983\\\\ua9b3-\\\\ua9c0\\\\uaa00-\\\\uaa27\\\\uaa40-\\\\uaa41\\\\uaa4c-\\\\uaa4d\\\\uaa50-\\\\uaa59\\\\uaa7b\\\\uaae0-\\\\uaae9\\\\uaaf2-\\\\uaaf3\\\\uabc0-\\\\uabe1\\\\uabec\\\\uabed\\\\uabf0-\\\\uabf9\\\\ufb20-\\\\ufb28\\\\ufe00-\\\\ufe0f\\\\ufe20-\\\\ufe26\\\\ufe33\\\\ufe34\\\\ufe4d-\\\\ufe4f\\\\uff10-\\\\uff19\\\\uff3f\";\n      var identifierStart = \"(?:\\\\\\\\u[0-9a-fA-F]{4}|[\" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + \"])\";\n      var identifierChars = \"(?:\\\\\\\\u[0-9a-fA-F]{4}|[\" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"])*\";\n      exports2.identifier = new RegExp(identifierStart + identifierChars, \"g\");\n      exports2.identifierStart = new RegExp(identifierStart);\n      exports2.identifierMatch = new RegExp(\"(?:\\\\\\\\u[0-9a-fA-F]{4}|[\" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"])+\");\n      var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n      exports2.newline = /[\\n\\r\\u2028\\u2029]/;\n      exports2.lineBreak = new RegExp(\"\\r\\n|\" + exports2.newline.source);\n      exports2.allLineBreaks = new RegExp(exports2.lineBreak.source, \"g\");\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var BaseOptions = __webpack_require__(6).Options;\n      var validPositionValues = [\"before-newline\", \"after-newline\", \"preserve-newline\"];\n      function Options(options) {\n        BaseOptions.call(this, options, \"js\");\n        var raw_brace_style = this.raw_options.brace_style || null;\n        if (raw_brace_style === \"expand-strict\") {\n          this.raw_options.brace_style = \"expand\";\n        } else if (raw_brace_style === \"collapse-preserve-inline\") {\n          this.raw_options.brace_style = \"collapse,preserve-inline\";\n        } else if (this.raw_options.braces_on_own_line !== void 0) {\n          this.raw_options.brace_style = this.raw_options.braces_on_own_line ? \"expand\" : \"collapse\";\n        }\n        var brace_style_split = this._get_selection_list(\"brace_style\", [\"collapse\", \"expand\", \"end-expand\", \"none\", \"preserve-inline\"]);\n        this.brace_preserve_inline = false;\n        this.brace_style = \"collapse\";\n        for (var bs = 0; bs < brace_style_split.length; bs++) {\n          if (brace_style_split[bs] === \"preserve-inline\") {\n            this.brace_preserve_inline = true;\n          } else {\n            this.brace_style = brace_style_split[bs];\n          }\n        }\n        this.unindent_chained_methods = this._get_boolean(\"unindent_chained_methods\");\n        this.break_chained_methods = this._get_boolean(\"break_chained_methods\");\n        this.space_in_paren = this._get_boolean(\"space_in_paren\");\n        this.space_in_empty_paren = this._get_boolean(\"space_in_empty_paren\");\n        this.jslint_happy = this._get_boolean(\"jslint_happy\");\n        this.space_after_anon_function = this._get_boolean(\"space_after_anon_function\");\n        this.space_after_named_function = this._get_boolean(\"space_after_named_function\");\n        this.keep_array_indentation = this._get_boolean(\"keep_array_indentation\");\n        this.space_before_conditional = this._get_boolean(\"space_before_conditional\", true);\n        this.unescape_strings = this._get_boolean(\"unescape_strings\");\n        this.e4x = this._get_boolean(\"e4x\");\n        this.comma_first = this._get_boolean(\"comma_first\");\n        this.operator_position = this._get_selection(\"operator_position\", validPositionValues);\n        this.test_output_raw = this._get_boolean(\"test_output_raw\");\n        if (this.jslint_happy) {\n          this.space_after_anon_function = true;\n        }\n      }\n      Options.prototype = new BaseOptions();\n      module.exports.Options = Options;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Options(options, merge_child_field) {\n        this.raw_options = _mergeOpts(options, merge_child_field);\n        this.disabled = this._get_boolean(\"disabled\");\n        this.eol = this._get_characters(\"eol\", \"auto\");\n        this.end_with_newline = this._get_boolean(\"end_with_newline\");\n        this.indent_size = this._get_number(\"indent_size\", 4);\n        this.indent_char = this._get_characters(\"indent_char\", \" \");\n        this.indent_level = this._get_number(\"indent_level\");\n        this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n        this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n        if (!this.preserve_newlines) {\n          this.max_preserve_newlines = 0;\n        }\n        this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n        if (this.indent_with_tabs) {\n          this.indent_char = \"\t\";\n          if (this.indent_size === 1) {\n            this.indent_size = 4;\n          }\n        }\n        this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n        this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n        this.templating = this._get_selection_list(\"templating\", [\"auto\", \"none\", \"django\", \"erb\", \"handlebars\", \"php\"], [\"auto\"]);\n      }\n      Options.prototype._get_array = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || [];\n        if (typeof option_value === \"object\") {\n          if (option_value !== null && typeof option_value.concat === \"function\") {\n            result = option_value.concat();\n          }\n        } else if (typeof option_value === \"string\") {\n          result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n        }\n        return result;\n      };\n      Options.prototype._get_boolean = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = option_value === void 0 ? !!default_value : !!option_value;\n        return result;\n      };\n      Options.prototype._get_characters = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || \"\";\n        if (typeof option_value === \"string\") {\n          result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n        }\n        return result;\n      };\n      Options.prototype._get_number = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        default_value = parseInt(default_value, 10);\n        if (isNaN(default_value)) {\n          default_value = 0;\n        }\n        var result = parseInt(option_value, 10);\n        if (isNaN(result)) {\n          result = default_value;\n        }\n        return result;\n      };\n      Options.prototype._get_selection = function(name, selection_list, default_value) {\n        var result = this._get_selection_list(name, selection_list, default_value);\n        if (result.length !== 1) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result[0];\n      };\n      Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n        if (!selection_list || selection_list.length === 0) {\n          throw new Error(\"Selection list cannot be empty.\");\n        }\n        default_value = default_value || [selection_list[0]];\n        if (!this._is_valid_selection(default_value, selection_list)) {\n          throw new Error(\"Invalid Default Value!\");\n        }\n        var result = this._get_array(name, default_value);\n        if (!this._is_valid_selection(result, selection_list)) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result;\n      };\n      Options.prototype._is_valid_selection = function(result, selection_list) {\n        return result.length && selection_list.length && !result.some(function(item) {\n          return selection_list.indexOf(item) === -1;\n        });\n      };\n      function _mergeOpts(allOptions, childFieldName) {\n        var finalOpts = {};\n        allOptions = _normalizeOpts(allOptions);\n        var name;\n        for (name in allOptions) {\n          if (name !== childFieldName) {\n            finalOpts[name] = allOptions[name];\n          }\n        }\n        if (childFieldName && allOptions[childFieldName]) {\n          for (name in allOptions[childFieldName]) {\n            finalOpts[name] = allOptions[childFieldName][name];\n          }\n        }\n        return finalOpts;\n      }\n      function _normalizeOpts(options) {\n        var convertedOpts = {};\n        var key;\n        for (key in options) {\n          var newKey = key.replace(/-/g, \"_\");\n          convertedOpts[newKey] = options[key];\n        }\n        return convertedOpts;\n      }\n      module.exports.Options = Options;\n      module.exports.normalizeOpts = _normalizeOpts;\n      module.exports.mergeOpts = _mergeOpts;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var InputScanner = __webpack_require__(8).InputScanner;\n      var BaseTokenizer = __webpack_require__(9).Tokenizer;\n      var BASETOKEN = __webpack_require__(9).TOKEN;\n      var Directives = __webpack_require__(13).Directives;\n      var acorn = __webpack_require__(4);\n      var Pattern = __webpack_require__(12).Pattern;\n      var TemplatablePattern = __webpack_require__(14).TemplatablePattern;\n      function in_array(what, arr) {\n        return arr.indexOf(what) !== -1;\n      }\n      var TOKEN = {\n        START_EXPR: \"TK_START_EXPR\",\n        END_EXPR: \"TK_END_EXPR\",\n        START_BLOCK: \"TK_START_BLOCK\",\n        END_BLOCK: \"TK_END_BLOCK\",\n        WORD: \"TK_WORD\",\n        RESERVED: \"TK_RESERVED\",\n        SEMICOLON: \"TK_SEMICOLON\",\n        STRING: \"TK_STRING\",\n        EQUALS: \"TK_EQUALS\",\n        OPERATOR: \"TK_OPERATOR\",\n        COMMA: \"TK_COMMA\",\n        BLOCK_COMMENT: \"TK_BLOCK_COMMENT\",\n        COMMENT: \"TK_COMMENT\",\n        DOT: \"TK_DOT\",\n        UNKNOWN: \"TK_UNKNOWN\",\n        START: BASETOKEN.START,\n        RAW: BASETOKEN.RAW,\n        EOF: BASETOKEN.EOF\n      };\n      var directives_core = new Directives(/\\/\\*/, /\\*\\//);\n      var number_pattern = /0[xX][0123456789abcdefABCDEF]*|0[oO][01234567]*|0[bB][01]*|\\d+n|(?:\\.\\d+|\\d+\\.?\\d*)(?:[eE][+-]?\\d+)?/;\n      var digit = /[0-9]/;\n      var dot_pattern = /[^\\d\\.]/;\n      var positionable_operators = \">>> === !== << && >= ** != == <= >> || |> < / - + > : & % ? ^ | *\".split(\" \");\n      var punct = \">>>= ... >>= <<= === >>> !== **= => ^= :: /= << <= == && -= >= >> != -- += ** || ++ %= &= *= |= |> = ! ? > < : / ^ - + * & % ~ |\";\n      punct = punct.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\");\n      punct = \"\\\\?\\\\.(?!\\\\d) \" + punct;\n      punct = punct.replace(/ /g, \"|\");\n      var punct_pattern = new RegExp(punct);\n      var line_starters = \"continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export\".split(\",\");\n      var reserved_words = line_starters.concat([\"do\", \"in\", \"of\", \"else\", \"get\", \"set\", \"new\", \"catch\", \"finally\", \"typeof\", \"yield\", \"async\", \"await\", \"from\", \"as\"]);\n      var reserved_word_pattern = new RegExp(\"^(?:\" + reserved_words.join(\"|\") + \")$\");\n      var in_html_comment;\n      var Tokenizer = function(input_string, options) {\n        BaseTokenizer.call(this, input_string, options);\n        this._patterns.whitespace = this._patterns.whitespace.matching(\n          /\\u00A0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff/.source,\n          /\\u2028\\u2029/.source\n        );\n        var pattern_reader = new Pattern(this._input);\n        var templatable = new TemplatablePattern(this._input).read_options(this._options);\n        this.__patterns = {\n          template: templatable,\n          identifier: templatable.starting_with(acorn.identifier).matching(acorn.identifierMatch),\n          number: pattern_reader.matching(number_pattern),\n          punct: pattern_reader.matching(punct_pattern),\n          comment: pattern_reader.starting_with(/\\/\\//).until(/[\\n\\r\\u2028\\u2029]/),\n          block_comment: pattern_reader.starting_with(/\\/\\*/).until_after(/\\*\\//),\n          html_comment_start: pattern_reader.matching(/<!--/),\n          html_comment_end: pattern_reader.matching(/-->/),\n          include: pattern_reader.starting_with(/#include/).until_after(acorn.lineBreak),\n          shebang: pattern_reader.starting_with(/#!/).until_after(acorn.lineBreak),\n          xml: pattern_reader.matching(/[\\s\\S]*?<(\\/?)([-a-zA-Z:0-9_.]+|{[\\s\\S]+?}|!\\[CDATA\\[[\\s\\S]*?\\]\\])(\\s+{[\\s\\S]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{[\\s\\S]+?}))*\\s*(\\/?)\\s*>/),\n          single_quote: templatable.until(/['\\\\\\n\\r\\u2028\\u2029]/),\n          double_quote: templatable.until(/[\"\\\\\\n\\r\\u2028\\u2029]/),\n          template_text: templatable.until(/[`\\\\$]/),\n          template_expression: templatable.until(/[`}\\\\]/)\n        };\n      };\n      Tokenizer.prototype = new BaseTokenizer();\n      Tokenizer.prototype._is_comment = function(current_token) {\n        return current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.BLOCK_COMMENT || current_token.type === TOKEN.UNKNOWN;\n      };\n      Tokenizer.prototype._is_opening = function(current_token) {\n        return current_token.type === TOKEN.START_BLOCK || current_token.type === TOKEN.START_EXPR;\n      };\n      Tokenizer.prototype._is_closing = function(current_token, open_token) {\n        return (current_token.type === TOKEN.END_BLOCK || current_token.type === TOKEN.END_EXPR) && (open_token && (current_token.text === \"]\" && open_token.text === \"[\" || current_token.text === \")\" && open_token.text === \"(\" || current_token.text === \"}\" && open_token.text === \"{\"));\n      };\n      Tokenizer.prototype._reset = function() {\n        in_html_comment = false;\n      };\n      Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n        var token = null;\n        this._readWhitespace();\n        var c = this._input.peek();\n        if (c === null) {\n          return this._create_token(TOKEN.EOF, \"\");\n        }\n        token = token || this._read_non_javascript(c);\n        token = token || this._read_string(c);\n        token = token || this._read_word(previous_token);\n        token = token || this._read_singles(c);\n        token = token || this._read_comment(c);\n        token = token || this._read_regexp(c, previous_token);\n        token = token || this._read_xml(c, previous_token);\n        token = token || this._read_punctuation();\n        token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());\n        return token;\n      };\n      Tokenizer.prototype._read_word = function(previous_token) {\n        var resulting_string;\n        resulting_string = this.__patterns.identifier.read();\n        if (resulting_string !== \"\") {\n          resulting_string = resulting_string.replace(acorn.allLineBreaks, \"\\n\");\n          if (!(previous_token.type === TOKEN.DOT || previous_token.type === TOKEN.RESERVED && (previous_token.text === \"set\" || previous_token.text === \"get\")) && reserved_word_pattern.test(resulting_string)) {\n            if (resulting_string === \"in\" || resulting_string === \"of\") {\n              return this._create_token(TOKEN.OPERATOR, resulting_string);\n            }\n            return this._create_token(TOKEN.RESERVED, resulting_string);\n          }\n          return this._create_token(TOKEN.WORD, resulting_string);\n        }\n        resulting_string = this.__patterns.number.read();\n        if (resulting_string !== \"\") {\n          return this._create_token(TOKEN.WORD, resulting_string);\n        }\n      };\n      Tokenizer.prototype._read_singles = function(c) {\n        var token = null;\n        if (c === \"(\" || c === \"[\") {\n          token = this._create_token(TOKEN.START_EXPR, c);\n        } else if (c === \")\" || c === \"]\") {\n          token = this._create_token(TOKEN.END_EXPR, c);\n        } else if (c === \"{\") {\n          token = this._create_token(TOKEN.START_BLOCK, c);\n        } else if (c === \"}\") {\n          token = this._create_token(TOKEN.END_BLOCK, c);\n        } else if (c === \";\") {\n          token = this._create_token(TOKEN.SEMICOLON, c);\n        } else if (c === \".\" && dot_pattern.test(this._input.peek(1))) {\n          token = this._create_token(TOKEN.DOT, c);\n        } else if (c === \",\") {\n          token = this._create_token(TOKEN.COMMA, c);\n        }\n        if (token) {\n          this._input.next();\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_punctuation = function() {\n        var resulting_string = this.__patterns.punct.read();\n        if (resulting_string !== \"\") {\n          if (resulting_string === \"=\") {\n            return this._create_token(TOKEN.EQUALS, resulting_string);\n          } else if (resulting_string === \"?.\") {\n            return this._create_token(TOKEN.DOT, resulting_string);\n          } else {\n            return this._create_token(TOKEN.OPERATOR, resulting_string);\n          }\n        }\n      };\n      Tokenizer.prototype._read_non_javascript = function(c) {\n        var resulting_string = \"\";\n        if (c === \"#\") {\n          if (this._is_first_token()) {\n            resulting_string = this.__patterns.shebang.read();\n            if (resulting_string) {\n              return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + \"\\n\");\n            }\n          }\n          resulting_string = this.__patterns.include.read();\n          if (resulting_string) {\n            return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + \"\\n\");\n          }\n          c = this._input.next();\n          var sharp = \"#\";\n          if (this._input.hasNext() && this._input.testChar(digit)) {\n            do {\n              c = this._input.next();\n              sharp += c;\n            } while (this._input.hasNext() && c !== \"#\" && c !== \"=\");\n            if (c === \"#\") {\n            } else if (this._input.peek() === \"[\" && this._input.peek(1) === \"]\") {\n              sharp += \"[]\";\n              this._input.next();\n              this._input.next();\n            } else if (this._input.peek() === \"{\" && this._input.peek(1) === \"}\") {\n              sharp += \"{}\";\n              this._input.next();\n              this._input.next();\n            }\n            return this._create_token(TOKEN.WORD, sharp);\n          }\n          this._input.back();\n        } else if (c === \"<\" && this._is_first_token()) {\n          resulting_string = this.__patterns.html_comment_start.read();\n          if (resulting_string) {\n            while (this._input.hasNext() && !this._input.testChar(acorn.newline)) {\n              resulting_string += this._input.next();\n            }\n            in_html_comment = true;\n            return this._create_token(TOKEN.COMMENT, resulting_string);\n          }\n        } else if (in_html_comment && c === \"-\") {\n          resulting_string = this.__patterns.html_comment_end.read();\n          if (resulting_string) {\n            in_html_comment = false;\n            return this._create_token(TOKEN.COMMENT, resulting_string);\n          }\n        }\n        return null;\n      };\n      Tokenizer.prototype._read_comment = function(c) {\n        var token = null;\n        if (c === \"/\") {\n          var comment = \"\";\n          if (this._input.peek(1) === \"*\") {\n            comment = this.__patterns.block_comment.read();\n            var directives = directives_core.get_directives(comment);\n            if (directives && directives.ignore === \"start\") {\n              comment += directives_core.readIgnored(this._input);\n            }\n            comment = comment.replace(acorn.allLineBreaks, \"\\n\");\n            token = this._create_token(TOKEN.BLOCK_COMMENT, comment);\n            token.directives = directives;\n          } else if (this._input.peek(1) === \"/\") {\n            comment = this.__patterns.comment.read();\n            token = this._create_token(TOKEN.COMMENT, comment);\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_string = function(c) {\n        if (c === \"`\" || c === \"'\" || c === '\"') {\n          var resulting_string = this._input.next();\n          this.has_char_escapes = false;\n          if (c === \"`\") {\n            resulting_string += this._read_string_recursive(\"`\", true, \"${\");\n          } else {\n            resulting_string += this._read_string_recursive(c);\n          }\n          if (this.has_char_escapes && this._options.unescape_strings) {\n            resulting_string = unescape_string(resulting_string);\n          }\n          if (this._input.peek() === c) {\n            resulting_string += this._input.next();\n          }\n          resulting_string = resulting_string.replace(acorn.allLineBreaks, \"\\n\");\n          return this._create_token(TOKEN.STRING, resulting_string);\n        }\n        return null;\n      };\n      Tokenizer.prototype._allow_regexp_or_xml = function(previous_token) {\n        return previous_token.type === TOKEN.RESERVED && in_array(previous_token.text, [\"return\", \"case\", \"throw\", \"else\", \"do\", \"typeof\", \"yield\"]) || previous_token.type === TOKEN.END_EXPR && previous_token.text === \")\" && previous_token.opened.previous.type === TOKEN.RESERVED && in_array(previous_token.opened.previous.text, [\"if\", \"while\", \"for\"]) || in_array(previous_token.type, [\n          TOKEN.COMMENT,\n          TOKEN.START_EXPR,\n          TOKEN.START_BLOCK,\n          TOKEN.START,\n          TOKEN.END_BLOCK,\n          TOKEN.OPERATOR,\n          TOKEN.EQUALS,\n          TOKEN.EOF,\n          TOKEN.SEMICOLON,\n          TOKEN.COMMA\n        ]);\n      };\n      Tokenizer.prototype._read_regexp = function(c, previous_token) {\n        if (c === \"/\" && this._allow_regexp_or_xml(previous_token)) {\n          var resulting_string = this._input.next();\n          var esc = false;\n          var in_char_class = false;\n          while (this._input.hasNext() && ((esc || in_char_class || this._input.peek() !== c) && !this._input.testChar(acorn.newline))) {\n            resulting_string += this._input.peek();\n            if (!esc) {\n              esc = this._input.peek() === \"\\\\\";\n              if (this._input.peek() === \"[\") {\n                in_char_class = true;\n              } else if (this._input.peek() === \"]\") {\n                in_char_class = false;\n              }\n            } else {\n              esc = false;\n            }\n            this._input.next();\n          }\n          if (this._input.peek() === c) {\n            resulting_string += this._input.next();\n            resulting_string += this._input.read(acorn.identifier);\n          }\n          return this._create_token(TOKEN.STRING, resulting_string);\n        }\n        return null;\n      };\n      Tokenizer.prototype._read_xml = function(c, previous_token) {\n        if (this._options.e4x && c === \"<\" && this._allow_regexp_or_xml(previous_token)) {\n          var xmlStr = \"\";\n          var match = this.__patterns.xml.read_match();\n          if (match) {\n            var rootTag = match[2].replace(/^{\\s+/, \"{\").replace(/\\s+}$/, \"}\");\n            var isCurlyRoot = rootTag.indexOf(\"{\") === 0;\n            var depth = 0;\n            while (match) {\n              var isEndTag = !!match[1];\n              var tagName = match[2];\n              var isSingletonTag = !!match[match.length - 1] || tagName.slice(0, 8) === \"![CDATA[\";\n              if (!isSingletonTag && (tagName === rootTag || isCurlyRoot && tagName.replace(/^{\\s+/, \"{\").replace(/\\s+}$/, \"}\"))) {\n                if (isEndTag) {\n                  --depth;\n                } else {\n                  ++depth;\n                }\n              }\n              xmlStr += match[0];\n              if (depth <= 0) {\n                break;\n              }\n              match = this.__patterns.xml.read_match();\n            }\n            if (!match) {\n              xmlStr += this._input.match(/[\\s\\S]*/g)[0];\n            }\n            xmlStr = xmlStr.replace(acorn.allLineBreaks, \"\\n\");\n            return this._create_token(TOKEN.STRING, xmlStr);\n          }\n        }\n        return null;\n      };\n      function unescape_string(s) {\n        var out = \"\", escaped = 0;\n        var input_scan = new InputScanner(s);\n        var matched = null;\n        while (input_scan.hasNext()) {\n          matched = input_scan.match(/([\\s]|[^\\\\]|\\\\\\\\)+/g);\n          if (matched) {\n            out += matched[0];\n          }\n          if (input_scan.peek() === \"\\\\\") {\n            input_scan.next();\n            if (input_scan.peek() === \"x\") {\n              matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);\n            } else if (input_scan.peek() === \"u\") {\n              matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);\n            } else {\n              out += \"\\\\\";\n              if (input_scan.hasNext()) {\n                out += input_scan.next();\n              }\n              continue;\n            }\n            if (!matched) {\n              return s;\n            }\n            escaped = parseInt(matched[1], 16);\n            if (escaped > 126 && escaped <= 255 && matched[0].indexOf(\"x\") === 0) {\n              return s;\n            } else if (escaped >= 0 && escaped < 32) {\n              out += \"\\\\\" + matched[0];\n              continue;\n            } else if (escaped === 34 || escaped === 39 || escaped === 92) {\n              out += \"\\\\\" + String.fromCharCode(escaped);\n            } else {\n              out += String.fromCharCode(escaped);\n            }\n          }\n        }\n        return out;\n      }\n      Tokenizer.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {\n        var current_char;\n        var pattern;\n        if (delimiter === \"'\") {\n          pattern = this.__patterns.single_quote;\n        } else if (delimiter === '\"') {\n          pattern = this.__patterns.double_quote;\n        } else if (delimiter === \"`\") {\n          pattern = this.__patterns.template_text;\n        } else if (delimiter === \"}\") {\n          pattern = this.__patterns.template_expression;\n        }\n        var resulting_string = pattern.read();\n        var next = \"\";\n        while (this._input.hasNext()) {\n          next = this._input.next();\n          if (next === delimiter || !allow_unescaped_newlines && acorn.newline.test(next)) {\n            this._input.back();\n            break;\n          } else if (next === \"\\\\\" && this._input.hasNext()) {\n            current_char = this._input.peek();\n            if (current_char === \"x\" || current_char === \"u\") {\n              this.has_char_escapes = true;\n            } else if (current_char === \"\\r\" && this._input.peek(1) === \"\\n\") {\n              this._input.next();\n            }\n            next += this._input.next();\n          } else if (start_sub) {\n            if (start_sub === \"${\" && next === \"$\" && this._input.peek() === \"{\") {\n              next += this._input.next();\n            }\n            if (start_sub === next) {\n              if (delimiter === \"`\") {\n                next += this._read_string_recursive(\"}\", allow_unescaped_newlines, \"`\");\n              } else {\n                next += this._read_string_recursive(\"`\", allow_unescaped_newlines, \"${\");\n              }\n              if (this._input.hasNext()) {\n                next += this._input.next();\n              }\n            }\n          }\n          next += pattern.read();\n          resulting_string += next;\n        }\n        return resulting_string;\n      };\n      module.exports.Tokenizer = Tokenizer;\n      module.exports.TOKEN = TOKEN;\n      module.exports.positionable_operators = positionable_operators.slice();\n      module.exports.line_starters = line_starters.slice();\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n      function InputScanner(input_string) {\n        this.__input = input_string || \"\";\n        this.__input_length = this.__input.length;\n        this.__position = 0;\n      }\n      InputScanner.prototype.restart = function() {\n        this.__position = 0;\n      };\n      InputScanner.prototype.back = function() {\n        if (this.__position > 0) {\n          this.__position -= 1;\n        }\n      };\n      InputScanner.prototype.hasNext = function() {\n        return this.__position < this.__input_length;\n      };\n      InputScanner.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__input.charAt(this.__position);\n          this.__position += 1;\n        }\n        return val;\n      };\n      InputScanner.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          val = this.__input.charAt(index);\n        }\n        return val;\n      };\n      InputScanner.prototype.__match = function(pattern, index) {\n        pattern.lastIndex = index;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n          if (pattern_match.index !== index) {\n            pattern_match = null;\n          }\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.test = function(pattern, index) {\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          return !!this.__match(pattern, index);\n        } else {\n          return false;\n        }\n      };\n      InputScanner.prototype.testChar = function(pattern, index) {\n        var val = this.peek(index);\n        pattern.lastIndex = 0;\n        return val !== null && pattern.test(val);\n      };\n      InputScanner.prototype.match = function(pattern) {\n        var pattern_match = this.__match(pattern, this.__position);\n        if (pattern_match) {\n          this.__position += pattern_match[0].length;\n        } else {\n          pattern_match = null;\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n        var val = \"\";\n        var match;\n        if (starting_pattern) {\n          match = this.match(starting_pattern);\n          if (match) {\n            val += match[0];\n          }\n        }\n        if (until_pattern && (match || !starting_pattern)) {\n          val += this.readUntil(until_pattern, until_after);\n        }\n        return val;\n      };\n      InputScanner.prototype.readUntil = function(pattern, until_after) {\n        var val = \"\";\n        var match_index = this.__position;\n        pattern.lastIndex = this.__position;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match) {\n          match_index = pattern_match.index;\n          if (until_after) {\n            match_index += pattern_match[0].length;\n          }\n        } else {\n          match_index = this.__input_length;\n        }\n        val = this.__input.substring(this.__position, match_index);\n        this.__position = match_index;\n        return val;\n      };\n      InputScanner.prototype.readUntilAfter = function(pattern) {\n        return this.readUntil(pattern, true);\n      };\n      InputScanner.prototype.get_regexp = function(pattern, match_from) {\n        var result = null;\n        var flags = \"g\";\n        if (match_from && regexp_has_sticky) {\n          flags = \"y\";\n        }\n        if (typeof pattern === \"string\" && pattern !== \"\") {\n          result = new RegExp(pattern, flags);\n        } else if (pattern) {\n          result = new RegExp(pattern.source, flags);\n        }\n        return result;\n      };\n      InputScanner.prototype.get_literal_regexp = function(literal_string) {\n        return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n      };\n      InputScanner.prototype.peekUntilAfter = function(pattern) {\n        var start = this.__position;\n        var val = this.readUntilAfter(pattern);\n        this.__position = start;\n        return val;\n      };\n      InputScanner.prototype.lookBack = function(testVal) {\n        var start = this.__position - 1;\n        return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n      };\n      module.exports.InputScanner = InputScanner;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var InputScanner = __webpack_require__(8).InputScanner;\n      var Token = __webpack_require__(3).Token;\n      var TokenStream = __webpack_require__(10).TokenStream;\n      var WhitespacePattern = __webpack_require__(11).WhitespacePattern;\n      var TOKEN = {\n        START: \"TK_START\",\n        RAW: \"TK_RAW\",\n        EOF: \"TK_EOF\"\n      };\n      var Tokenizer = function(input_string, options) {\n        this._input = new InputScanner(input_string);\n        this._options = options || {};\n        this.__tokens = null;\n        this._patterns = {};\n        this._patterns.whitespace = new WhitespacePattern(this._input);\n      };\n      Tokenizer.prototype.tokenize = function() {\n        this._input.restart();\n        this.__tokens = new TokenStream();\n        this._reset();\n        var current;\n        var previous = new Token(TOKEN.START, \"\");\n        var open_token = null;\n        var open_stack = [];\n        var comments = new TokenStream();\n        while (previous.type !== TOKEN.EOF) {\n          current = this._get_next_token(previous, open_token);\n          while (this._is_comment(current)) {\n            comments.add(current);\n            current = this._get_next_token(previous, open_token);\n          }\n          if (!comments.isEmpty()) {\n            current.comments_before = comments;\n            comments = new TokenStream();\n          }\n          current.parent = open_token;\n          if (this._is_opening(current)) {\n            open_stack.push(open_token);\n            open_token = current;\n          } else if (open_token && this._is_closing(current, open_token)) {\n            current.opened = open_token;\n            open_token.closed = current;\n            open_token = open_stack.pop();\n            current.parent = open_token;\n          }\n          current.previous = previous;\n          previous.next = current;\n          this.__tokens.add(current);\n          previous = current;\n        }\n        return this.__tokens;\n      };\n      Tokenizer.prototype._is_first_token = function() {\n        return this.__tokens.isEmpty();\n      };\n      Tokenizer.prototype._reset = function() {\n      };\n      Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n        this._readWhitespace();\n        var resulting_string = this._input.read(/.+/g);\n        if (resulting_string) {\n          return this._create_token(TOKEN.RAW, resulting_string);\n        } else {\n          return this._create_token(TOKEN.EOF, \"\");\n        }\n      };\n      Tokenizer.prototype._is_comment = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_opening = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_closing = function(current_token, open_token) {\n        return false;\n      };\n      Tokenizer.prototype._create_token = function(type, text) {\n        var token = new Token(\n          type,\n          text,\n          this._patterns.whitespace.newline_count,\n          this._patterns.whitespace.whitespace_before_token\n        );\n        return token;\n      };\n      Tokenizer.prototype._readWhitespace = function() {\n        return this._patterns.whitespace.read();\n      };\n      module.exports.Tokenizer = Tokenizer;\n      module.exports.TOKEN = TOKEN;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function TokenStream(parent_token) {\n        this.__tokens = [];\n        this.__tokens_length = this.__tokens.length;\n        this.__position = 0;\n        this.__parent_token = parent_token;\n      }\n      TokenStream.prototype.restart = function() {\n        this.__position = 0;\n      };\n      TokenStream.prototype.isEmpty = function() {\n        return this.__tokens_length === 0;\n      };\n      TokenStream.prototype.hasNext = function() {\n        return this.__position < this.__tokens_length;\n      };\n      TokenStream.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__tokens[this.__position];\n          this.__position += 1;\n        }\n        return val;\n      };\n      TokenStream.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__tokens_length) {\n          val = this.__tokens[index];\n        }\n        return val;\n      };\n      TokenStream.prototype.add = function(token) {\n        if (this.__parent_token) {\n          token.parent = this.__parent_token;\n        }\n        this.__tokens.push(token);\n        this.__tokens_length += 1;\n      };\n      module.exports.TokenStream = TokenStream;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Pattern = __webpack_require__(12).Pattern;\n      function WhitespacePattern(input_scanner, parent) {\n        Pattern.call(this, input_scanner, parent);\n        if (parent) {\n          this._line_regexp = this._input.get_regexp(parent._line_regexp);\n        } else {\n          this.__set_whitespace_patterns(\"\", \"\");\n        }\n        this.newline_count = 0;\n        this.whitespace_before_token = \"\";\n      }\n      WhitespacePattern.prototype = new Pattern();\n      WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {\n        whitespace_chars += \"\\\\t \";\n        newline_chars += \"\\\\n\\\\r\";\n        this._match_pattern = this._input.get_regexp(\n          \"[\" + whitespace_chars + newline_chars + \"]+\",\n          true\n        );\n        this._newline_regexp = this._input.get_regexp(\n          \"\\\\r\\\\n|[\" + newline_chars + \"]\"\n        );\n      };\n      WhitespacePattern.prototype.read = function() {\n        this.newline_count = 0;\n        this.whitespace_before_token = \"\";\n        var resulting_string = this._input.read(this._match_pattern);\n        if (resulting_string === \" \") {\n          this.whitespace_before_token = \" \";\n        } else if (resulting_string) {\n          var matches = this.__split(this._newline_regexp, resulting_string);\n          this.newline_count = matches.length - 1;\n          this.whitespace_before_token = matches[this.newline_count];\n        }\n        return resulting_string;\n      };\n      WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {\n        var result = this._create();\n        result.__set_whitespace_patterns(whitespace_chars, newline_chars);\n        result._update();\n        return result;\n      };\n      WhitespacePattern.prototype._create = function() {\n        return new WhitespacePattern(this._input, this);\n      };\n      WhitespacePattern.prototype.__split = function(regexp, input_string) {\n        regexp.lastIndex = 0;\n        var start_index = 0;\n        var result = [];\n        var next_match = regexp.exec(input_string);\n        while (next_match) {\n          result.push(input_string.substring(start_index, next_match.index));\n          start_index = next_match.index + next_match[0].length;\n          next_match = regexp.exec(input_string);\n        }\n        if (start_index < input_string.length) {\n          result.push(input_string.substring(start_index, input_string.length));\n        } else {\n          result.push(\"\");\n        }\n        return result;\n      };\n      module.exports.WhitespacePattern = WhitespacePattern;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Pattern(input_scanner, parent) {\n        this._input = input_scanner;\n        this._starting_pattern = null;\n        this._match_pattern = null;\n        this._until_pattern = null;\n        this._until_after = false;\n        if (parent) {\n          this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);\n          this._match_pattern = this._input.get_regexp(parent._match_pattern, true);\n          this._until_pattern = this._input.get_regexp(parent._until_pattern);\n          this._until_after = parent._until_after;\n        }\n      }\n      Pattern.prototype.read = function() {\n        var result = this._input.read(this._starting_pattern);\n        if (!this._starting_pattern || result) {\n          result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);\n        }\n        return result;\n      };\n      Pattern.prototype.read_match = function() {\n        return this._input.match(this._match_pattern);\n      };\n      Pattern.prototype.until_after = function(pattern) {\n        var result = this._create();\n        result._until_after = true;\n        result._until_pattern = this._input.get_regexp(pattern);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.until = function(pattern) {\n        var result = this._create();\n        result._until_after = false;\n        result._until_pattern = this._input.get_regexp(pattern);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.starting_with = function(pattern) {\n        var result = this._create();\n        result._starting_pattern = this._input.get_regexp(pattern, true);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.matching = function(pattern) {\n        var result = this._create();\n        result._match_pattern = this._input.get_regexp(pattern, true);\n        result._update();\n        return result;\n      };\n      Pattern.prototype._create = function() {\n        return new Pattern(this._input, this);\n      };\n      Pattern.prototype._update = function() {\n      };\n      module.exports.Pattern = Pattern;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Directives(start_block_pattern, end_block_pattern) {\n        start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n        end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n        this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n        this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n        this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n      }\n      Directives.prototype.get_directives = function(text) {\n        if (!text.match(this.__directives_block_pattern)) {\n          return null;\n        }\n        var directives = {};\n        this.__directive_pattern.lastIndex = 0;\n        var directive_match = this.__directive_pattern.exec(text);\n        while (directive_match) {\n          directives[directive_match[1]] = directive_match[2];\n          directive_match = this.__directive_pattern.exec(text);\n        }\n        return directives;\n      };\n      Directives.prototype.readIgnored = function(input) {\n        return input.readUntilAfter(this.__directives_end_ignore_pattern);\n      };\n      module.exports.Directives = Directives;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Pattern = __webpack_require__(12).Pattern;\n      var template_names = {\n        django: false,\n        erb: false,\n        handlebars: false,\n        php: false\n      };\n      function TemplatablePattern(input_scanner, parent) {\n        Pattern.call(this, input_scanner, parent);\n        this.__template_pattern = null;\n        this._disabled = Object.assign({}, template_names);\n        this._excluded = Object.assign({}, template_names);\n        if (parent) {\n          this.__template_pattern = this._input.get_regexp(parent.__template_pattern);\n          this._excluded = Object.assign(this._excluded, parent._excluded);\n          this._disabled = Object.assign(this._disabled, parent._disabled);\n        }\n        var pattern = new Pattern(input_scanner);\n        this.__patterns = {\n          handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),\n          handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),\n          handlebars: pattern.starting_with(/{{/).until_after(/}}/),\n          php: pattern.starting_with(/<\\?(?:[=]|php)/).until_after(/\\?>/),\n          erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),\n          django: pattern.starting_with(/{%/).until_after(/%}/),\n          django_value: pattern.starting_with(/{{/).until_after(/}}/),\n          django_comment: pattern.starting_with(/{#/).until_after(/#}/)\n        };\n      }\n      TemplatablePattern.prototype = new Pattern();\n      TemplatablePattern.prototype._create = function() {\n        return new TemplatablePattern(this._input, this);\n      };\n      TemplatablePattern.prototype._update = function() {\n        this.__set_templated_pattern();\n      };\n      TemplatablePattern.prototype.disable = function(language) {\n        var result = this._create();\n        result._disabled[language] = true;\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.read_options = function(options) {\n        var result = this._create();\n        for (var language in template_names) {\n          result._disabled[language] = options.templating.indexOf(language) === -1;\n        }\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.exclude = function(language) {\n        var result = this._create();\n        result._excluded[language] = true;\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.read = function() {\n        var result = \"\";\n        if (this._match_pattern) {\n          result = this._input.read(this._starting_pattern);\n        } else {\n          result = this._input.read(this._starting_pattern, this.__template_pattern);\n        }\n        var next = this._read_template();\n        while (next) {\n          if (this._match_pattern) {\n            next += this._input.read(this._match_pattern);\n          } else {\n            next += this._input.readUntil(this.__template_pattern);\n          }\n          result += next;\n          next = this._read_template();\n        }\n        if (this._until_after) {\n          result += this._input.readUntilAfter(this._until_pattern);\n        }\n        return result;\n      };\n      TemplatablePattern.prototype.__set_templated_pattern = function() {\n        var items = [];\n        if (!this._disabled.php) {\n          items.push(this.__patterns.php._starting_pattern.source);\n        }\n        if (!this._disabled.handlebars) {\n          items.push(this.__patterns.handlebars._starting_pattern.source);\n        }\n        if (!this._disabled.erb) {\n          items.push(this.__patterns.erb._starting_pattern.source);\n        }\n        if (!this._disabled.django) {\n          items.push(this.__patterns.django._starting_pattern.source);\n          items.push(this.__patterns.django_value._starting_pattern.source);\n          items.push(this.__patterns.django_comment._starting_pattern.source);\n        }\n        if (this._until_pattern) {\n          items.push(this._until_pattern.source);\n        }\n        this.__template_pattern = this._input.get_regexp(\"(?:\" + items.join(\"|\") + \")\");\n      };\n      TemplatablePattern.prototype._read_template = function() {\n        var resulting_string = \"\";\n        var c = this._input.peek();\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (!this._disabled.php && !this._excluded.php && peek1 === \"?\") {\n            resulting_string = resulting_string || this.__patterns.php.read();\n          }\n          if (!this._disabled.erb && !this._excluded.erb && peek1 === \"%\") {\n            resulting_string = resulting_string || this.__patterns.erb.read();\n          }\n        } else if (c === \"{\") {\n          if (!this._disabled.handlebars && !this._excluded.handlebars) {\n            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();\n            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();\n            resulting_string = resulting_string || this.__patterns.handlebars.read();\n          }\n          if (!this._disabled.django) {\n            if (!this._excluded.django && !this._excluded.handlebars) {\n              resulting_string = resulting_string || this.__patterns.django_value.read();\n            }\n            if (!this._excluded.django) {\n              resulting_string = resulting_string || this.__patterns.django_comment.read();\n              resulting_string = resulting_string || this.__patterns.django.read();\n            }\n          }\n        }\n        return resulting_string;\n      };\n      module.exports.TemplatablePattern = TemplatablePattern;\n    }\n  ]);\n  var js_beautify = legacy_beautify_js;\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return { js_beautify };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n  var legacy_beautify_css = function(modules) {\n    var installedModules = {};\n    function __webpack_require__(moduleId) {\n      if (installedModules[moduleId]) {\n        return installedModules[moduleId].exports;\n      }\n      var module = installedModules[moduleId] = {\n        i: moduleId,\n        l: false,\n        exports: {}\n      };\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      module.l = true;\n      return module.exports;\n    }\n    __webpack_require__.m = modules;\n    __webpack_require__.c = installedModules;\n    __webpack_require__.d = function(exports2, name, getter) {\n      if (!__webpack_require__.o(exports2, name)) {\n        Object.defineProperty(exports2, name, { enumerable: true, get: getter });\n      }\n    };\n    __webpack_require__.r = function(exports2) {\n      if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n        Object.defineProperty(exports2, Symbol.toStringTag, { value: \"Module\" });\n      }\n      Object.defineProperty(exports2, \"__esModule\", { value: true });\n    };\n    __webpack_require__.t = function(value, mode) {\n      if (mode & 1)\n        value = __webpack_require__(value);\n      if (mode & 8)\n        return value;\n      if (mode & 4 && typeof value === \"object\" && value && value.__esModule)\n        return value;\n      var ns = /* @__PURE__ */ Object.create(null);\n      __webpack_require__.r(ns);\n      Object.defineProperty(ns, \"default\", { enumerable: true, value });\n      if (mode & 2 && typeof value != \"string\")\n        for (var key in value)\n          __webpack_require__.d(ns, key, function(key2) {\n            return value[key2];\n          }.bind(null, key));\n      return ns;\n    };\n    __webpack_require__.n = function(module) {\n      var getter = module && module.__esModule ? function getDefault() {\n        return module[\"default\"];\n      } : function getModuleExports() {\n        return module;\n      };\n      __webpack_require__.d(getter, \"a\", getter);\n      return getter;\n    };\n    __webpack_require__.o = function(object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    __webpack_require__.p = \"\";\n    return __webpack_require__(__webpack_require__.s = 15);\n  }([\n    ,\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function OutputLine(parent) {\n        this.__parent = parent;\n        this.__character_count = 0;\n        this.__indent_count = -1;\n        this.__alignment_count = 0;\n        this.__wrap_point_index = 0;\n        this.__wrap_point_character_count = 0;\n        this.__wrap_point_indent_count = -1;\n        this.__wrap_point_alignment_count = 0;\n        this.__items = [];\n      }\n      OutputLine.prototype.clone_empty = function() {\n        var line = new OutputLine(this.__parent);\n        line.set_indent(this.__indent_count, this.__alignment_count);\n        return line;\n      };\n      OutputLine.prototype.item = function(index) {\n        if (index < 0) {\n          return this.__items[this.__items.length + index];\n        } else {\n          return this.__items[index];\n        }\n      };\n      OutputLine.prototype.has_match = function(pattern) {\n        for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n          if (this.__items[lastCheckedOutput].match(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      };\n      OutputLine.prototype.set_indent = function(indent, alignment) {\n        if (this.is_empty()) {\n          this.__indent_count = indent || 0;\n          this.__alignment_count = alignment || 0;\n          this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n        }\n      };\n      OutputLine.prototype._set_wrap_point = function() {\n        if (this.__parent.wrap_line_length) {\n          this.__wrap_point_index = this.__items.length;\n          this.__wrap_point_character_count = this.__character_count;\n          this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n          this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n        }\n      };\n      OutputLine.prototype._should_wrap = function() {\n        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n      };\n      OutputLine.prototype._allow_wrap = function() {\n        if (this._should_wrap()) {\n          this.__parent.add_new_line();\n          var next = this.__parent.current_line;\n          next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n          next.__items = this.__items.slice(this.__wrap_point_index);\n          this.__items = this.__items.slice(0, this.__wrap_point_index);\n          next.__character_count += this.__character_count - this.__wrap_point_character_count;\n          this.__character_count = this.__wrap_point_character_count;\n          if (next.__items[0] === \" \") {\n            next.__items.splice(0, 1);\n            next.__character_count -= 1;\n          }\n          return true;\n        }\n        return false;\n      };\n      OutputLine.prototype.is_empty = function() {\n        return this.__items.length === 0;\n      };\n      OutputLine.prototype.last = function() {\n        if (!this.is_empty()) {\n          return this.__items[this.__items.length - 1];\n        } else {\n          return null;\n        }\n      };\n      OutputLine.prototype.push = function(item) {\n        this.__items.push(item);\n        var last_newline_index = item.lastIndexOf(\"\\n\");\n        if (last_newline_index !== -1) {\n          this.__character_count = item.length - last_newline_index;\n        } else {\n          this.__character_count += item.length;\n        }\n      };\n      OutputLine.prototype.pop = function() {\n        var item = null;\n        if (!this.is_empty()) {\n          item = this.__items.pop();\n          this.__character_count -= item.length;\n        }\n        return item;\n      };\n      OutputLine.prototype._remove_indent = function() {\n        if (this.__indent_count > 0) {\n          this.__indent_count -= 1;\n          this.__character_count -= this.__parent.indent_size;\n        }\n      };\n      OutputLine.prototype._remove_wrap_indent = function() {\n        if (this.__wrap_point_indent_count > 0) {\n          this.__wrap_point_indent_count -= 1;\n        }\n      };\n      OutputLine.prototype.trim = function() {\n        while (this.last() === \" \") {\n          this.__items.pop();\n          this.__character_count -= 1;\n        }\n      };\n      OutputLine.prototype.toString = function() {\n        var result = \"\";\n        if (this.is_empty()) {\n          if (this.__parent.indent_empty_lines) {\n            result = this.__parent.get_indent_string(this.__indent_count);\n          }\n        } else {\n          result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n          result += this.__items.join(\"\");\n        }\n        return result;\n      };\n      function IndentStringCache(options, baseIndentString) {\n        this.__cache = [\"\"];\n        this.__indent_size = options.indent_size;\n        this.__indent_string = options.indent_char;\n        if (!options.indent_with_tabs) {\n          this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n        }\n        baseIndentString = baseIndentString || \"\";\n        if (options.indent_level > 0) {\n          baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n        }\n        this.__base_string = baseIndentString;\n        this.__base_string_length = baseIndentString.length;\n      }\n      IndentStringCache.prototype.get_indent_size = function(indent, column) {\n        var result = this.__base_string_length;\n        column = column || 0;\n        if (indent < 0) {\n          result = 0;\n        }\n        result += indent * this.__indent_size;\n        result += column;\n        return result;\n      };\n      IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n        var result = this.__base_string;\n        column = column || 0;\n        if (indent_level < 0) {\n          indent_level = 0;\n          result = \"\";\n        }\n        column += indent_level * this.__indent_size;\n        this.__ensure_cache(column);\n        result += this.__cache[column];\n        return result;\n      };\n      IndentStringCache.prototype.__ensure_cache = function(column) {\n        while (column >= this.__cache.length) {\n          this.__add_column();\n        }\n      };\n      IndentStringCache.prototype.__add_column = function() {\n        var column = this.__cache.length;\n        var indent = 0;\n        var result = \"\";\n        if (this.__indent_size && column >= this.__indent_size) {\n          indent = Math.floor(column / this.__indent_size);\n          column -= indent * this.__indent_size;\n          result = new Array(indent + 1).join(this.__indent_string);\n        }\n        if (column) {\n          result += new Array(column + 1).join(\" \");\n        }\n        this.__cache.push(result);\n      };\n      function Output(options, baseIndentString) {\n        this.__indent_cache = new IndentStringCache(options, baseIndentString);\n        this.raw = false;\n        this._end_with_newline = options.end_with_newline;\n        this.indent_size = options.indent_size;\n        this.wrap_line_length = options.wrap_line_length;\n        this.indent_empty_lines = options.indent_empty_lines;\n        this.__lines = [];\n        this.previous_line = null;\n        this.current_line = null;\n        this.next_line = new OutputLine(this);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n        this.__add_outputline();\n      }\n      Output.prototype.__add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = this.next_line.clone_empty();\n        this.__lines.push(this.current_line);\n      };\n      Output.prototype.get_line_number = function() {\n        return this.__lines.length;\n      };\n      Output.prototype.get_indent_string = function(indent, column) {\n        return this.__indent_cache.get_indent_string(indent, column);\n      };\n      Output.prototype.get_indent_size = function(indent, column) {\n        return this.__indent_cache.get_indent_size(indent, column);\n      };\n      Output.prototype.is_empty = function() {\n        return !this.previous_line && this.current_line.is_empty();\n      };\n      Output.prototype.add_new_line = function(force_newline) {\n        if (this.is_empty() || !force_newline && this.just_added_newline()) {\n          return false;\n        }\n        if (!this.raw) {\n          this.__add_outputline();\n        }\n        return true;\n      };\n      Output.prototype.get_code = function(eol) {\n        this.trim(true);\n        var last_item = this.current_line.pop();\n        if (last_item) {\n          if (last_item[last_item.length - 1] === \"\\n\") {\n            last_item = last_item.replace(/\\n+$/g, \"\");\n          }\n          this.current_line.push(last_item);\n        }\n        if (this._end_with_newline) {\n          this.__add_outputline();\n        }\n        var sweet_code = this.__lines.join(\"\\n\");\n        if (eol !== \"\\n\") {\n          sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n        return sweet_code;\n      };\n      Output.prototype.set_wrap_point = function() {\n        this.current_line._set_wrap_point();\n      };\n      Output.prototype.set_indent = function(indent, alignment) {\n        indent = indent || 0;\n        alignment = alignment || 0;\n        this.next_line.set_indent(indent, alignment);\n        if (this.__lines.length > 1) {\n          this.current_line.set_indent(indent, alignment);\n          return true;\n        }\n        this.current_line.set_indent();\n        return false;\n      };\n      Output.prototype.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n          this.__add_outputline();\n        }\n        this.current_line.set_indent(-1);\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n      };\n      Output.prototype.add_token = function(printable_token) {\n        this.__add_space_before_token();\n        this.current_line.push(printable_token);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = this.current_line._allow_wrap();\n      };\n      Output.prototype.__add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n          if (!this.non_breaking_space) {\n            this.set_wrap_point();\n          }\n          this.current_line.push(\" \");\n        }\n      };\n      Output.prototype.remove_indent = function(index) {\n        var output_length = this.__lines.length;\n        while (index < output_length) {\n          this.__lines[index]._remove_indent();\n          index++;\n        }\n        this.current_line._remove_wrap_indent();\n      };\n      Output.prototype.trim = function(eat_newlines) {\n        eat_newlines = eat_newlines === void 0 ? false : eat_newlines;\n        this.current_line.trim();\n        while (eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()) {\n          this.__lines.pop();\n          this.current_line = this.__lines[this.__lines.length - 1];\n          this.current_line.trim();\n        }\n        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n      };\n      Output.prototype.just_added_newline = function() {\n        return this.current_line.is_empty();\n      };\n      Output.prototype.just_added_blankline = function() {\n        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n      };\n      Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n        var index = this.__lines.length - 2;\n        while (index >= 0) {\n          var potentialEmptyLine = this.__lines[index];\n          if (potentialEmptyLine.is_empty()) {\n            break;\n          } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n            this.__lines.splice(index + 1, 0, new OutputLine(this));\n            this.previous_line = this.__lines[this.__lines.length - 2];\n            break;\n          }\n          index--;\n        }\n      };\n      module.exports.Output = Output;\n    },\n    ,\n    ,\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Options(options, merge_child_field) {\n        this.raw_options = _mergeOpts(options, merge_child_field);\n        this.disabled = this._get_boolean(\"disabled\");\n        this.eol = this._get_characters(\"eol\", \"auto\");\n        this.end_with_newline = this._get_boolean(\"end_with_newline\");\n        this.indent_size = this._get_number(\"indent_size\", 4);\n        this.indent_char = this._get_characters(\"indent_char\", \" \");\n        this.indent_level = this._get_number(\"indent_level\");\n        this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n        this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n        if (!this.preserve_newlines) {\n          this.max_preserve_newlines = 0;\n        }\n        this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n        if (this.indent_with_tabs) {\n          this.indent_char = \"\t\";\n          if (this.indent_size === 1) {\n            this.indent_size = 4;\n          }\n        }\n        this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n        this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n        this.templating = this._get_selection_list(\"templating\", [\"auto\", \"none\", \"django\", \"erb\", \"handlebars\", \"php\"], [\"auto\"]);\n      }\n      Options.prototype._get_array = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || [];\n        if (typeof option_value === \"object\") {\n          if (option_value !== null && typeof option_value.concat === \"function\") {\n            result = option_value.concat();\n          }\n        } else if (typeof option_value === \"string\") {\n          result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n        }\n        return result;\n      };\n      Options.prototype._get_boolean = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = option_value === void 0 ? !!default_value : !!option_value;\n        return result;\n      };\n      Options.prototype._get_characters = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || \"\";\n        if (typeof option_value === \"string\") {\n          result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n        }\n        return result;\n      };\n      Options.prototype._get_number = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        default_value = parseInt(default_value, 10);\n        if (isNaN(default_value)) {\n          default_value = 0;\n        }\n        var result = parseInt(option_value, 10);\n        if (isNaN(result)) {\n          result = default_value;\n        }\n        return result;\n      };\n      Options.prototype._get_selection = function(name, selection_list, default_value) {\n        var result = this._get_selection_list(name, selection_list, default_value);\n        if (result.length !== 1) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result[0];\n      };\n      Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n        if (!selection_list || selection_list.length === 0) {\n          throw new Error(\"Selection list cannot be empty.\");\n        }\n        default_value = default_value || [selection_list[0]];\n        if (!this._is_valid_selection(default_value, selection_list)) {\n          throw new Error(\"Invalid Default Value!\");\n        }\n        var result = this._get_array(name, default_value);\n        if (!this._is_valid_selection(result, selection_list)) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result;\n      };\n      Options.prototype._is_valid_selection = function(result, selection_list) {\n        return result.length && selection_list.length && !result.some(function(item) {\n          return selection_list.indexOf(item) === -1;\n        });\n      };\n      function _mergeOpts(allOptions, childFieldName) {\n        var finalOpts = {};\n        allOptions = _normalizeOpts(allOptions);\n        var name;\n        for (name in allOptions) {\n          if (name !== childFieldName) {\n            finalOpts[name] = allOptions[name];\n          }\n        }\n        if (childFieldName && allOptions[childFieldName]) {\n          for (name in allOptions[childFieldName]) {\n            finalOpts[name] = allOptions[childFieldName][name];\n          }\n        }\n        return finalOpts;\n      }\n      function _normalizeOpts(options) {\n        var convertedOpts = {};\n        var key;\n        for (key in options) {\n          var newKey = key.replace(/-/g, \"_\");\n          convertedOpts[newKey] = options[key];\n        }\n        return convertedOpts;\n      }\n      module.exports.Options = Options;\n      module.exports.normalizeOpts = _normalizeOpts;\n      module.exports.mergeOpts = _mergeOpts;\n    },\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n      function InputScanner(input_string) {\n        this.__input = input_string || \"\";\n        this.__input_length = this.__input.length;\n        this.__position = 0;\n      }\n      InputScanner.prototype.restart = function() {\n        this.__position = 0;\n      };\n      InputScanner.prototype.back = function() {\n        if (this.__position > 0) {\n          this.__position -= 1;\n        }\n      };\n      InputScanner.prototype.hasNext = function() {\n        return this.__position < this.__input_length;\n      };\n      InputScanner.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__input.charAt(this.__position);\n          this.__position += 1;\n        }\n        return val;\n      };\n      InputScanner.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          val = this.__input.charAt(index);\n        }\n        return val;\n      };\n      InputScanner.prototype.__match = function(pattern, index) {\n        pattern.lastIndex = index;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n          if (pattern_match.index !== index) {\n            pattern_match = null;\n          }\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.test = function(pattern, index) {\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          return !!this.__match(pattern, index);\n        } else {\n          return false;\n        }\n      };\n      InputScanner.prototype.testChar = function(pattern, index) {\n        var val = this.peek(index);\n        pattern.lastIndex = 0;\n        return val !== null && pattern.test(val);\n      };\n      InputScanner.prototype.match = function(pattern) {\n        var pattern_match = this.__match(pattern, this.__position);\n        if (pattern_match) {\n          this.__position += pattern_match[0].length;\n        } else {\n          pattern_match = null;\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n        var val = \"\";\n        var match;\n        if (starting_pattern) {\n          match = this.match(starting_pattern);\n          if (match) {\n            val += match[0];\n          }\n        }\n        if (until_pattern && (match || !starting_pattern)) {\n          val += this.readUntil(until_pattern, until_after);\n        }\n        return val;\n      };\n      InputScanner.prototype.readUntil = function(pattern, until_after) {\n        var val = \"\";\n        var match_index = this.__position;\n        pattern.lastIndex = this.__position;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match) {\n          match_index = pattern_match.index;\n          if (until_after) {\n            match_index += pattern_match[0].length;\n          }\n        } else {\n          match_index = this.__input_length;\n        }\n        val = this.__input.substring(this.__position, match_index);\n        this.__position = match_index;\n        return val;\n      };\n      InputScanner.prototype.readUntilAfter = function(pattern) {\n        return this.readUntil(pattern, true);\n      };\n      InputScanner.prototype.get_regexp = function(pattern, match_from) {\n        var result = null;\n        var flags = \"g\";\n        if (match_from && regexp_has_sticky) {\n          flags = \"y\";\n        }\n        if (typeof pattern === \"string\" && pattern !== \"\") {\n          result = new RegExp(pattern, flags);\n        } else if (pattern) {\n          result = new RegExp(pattern.source, flags);\n        }\n        return result;\n      };\n      InputScanner.prototype.get_literal_regexp = function(literal_string) {\n        return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n      };\n      InputScanner.prototype.peekUntilAfter = function(pattern) {\n        var start = this.__position;\n        var val = this.readUntilAfter(pattern);\n        this.__position = start;\n        return val;\n      };\n      InputScanner.prototype.lookBack = function(testVal) {\n        var start = this.__position - 1;\n        return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n      };\n      module.exports.InputScanner = InputScanner;\n    },\n    ,\n    ,\n    ,\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Directives(start_block_pattern, end_block_pattern) {\n        start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n        end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n        this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n        this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n        this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n      }\n      Directives.prototype.get_directives = function(text) {\n        if (!text.match(this.__directives_block_pattern)) {\n          return null;\n        }\n        var directives = {};\n        this.__directive_pattern.lastIndex = 0;\n        var directive_match = this.__directive_pattern.exec(text);\n        while (directive_match) {\n          directives[directive_match[1]] = directive_match[2];\n          directive_match = this.__directive_pattern.exec(text);\n        }\n        return directives;\n      };\n      Directives.prototype.readIgnored = function(input) {\n        return input.readUntilAfter(this.__directives_end_ignore_pattern);\n      };\n      module.exports.Directives = Directives;\n    },\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Beautifier = __webpack_require__(16).Beautifier, Options = __webpack_require__(17).Options;\n      function css_beautify2(source_text, options) {\n        var beautifier = new Beautifier(source_text, options);\n        return beautifier.beautify();\n      }\n      module.exports = css_beautify2;\n      module.exports.defaultOptions = function() {\n        return new Options();\n      };\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Options = __webpack_require__(17).Options;\n      var Output = __webpack_require__(2).Output;\n      var InputScanner = __webpack_require__(8).InputScanner;\n      var Directives = __webpack_require__(13).Directives;\n      var directives_core = new Directives(/\\/\\*/, /\\*\\//);\n      var lineBreak = /\\r\\n|[\\r\\n]/;\n      var allLineBreaks = /\\r\\n|[\\r\\n]/g;\n      var whitespaceChar = /\\s/;\n      var whitespacePattern = /(?:\\s|\\n)+/g;\n      var block_comment_pattern = /\\/\\*(?:[\\s\\S]*?)((?:\\*\\/)|$)/g;\n      var comment_pattern = /\\/\\/(?:[^\\n\\r\\u2028\\u2029]*)/g;\n      function Beautifier(source_text, options) {\n        this._source_text = source_text || \"\";\n        this._options = new Options(options);\n        this._ch = null;\n        this._input = null;\n        this.NESTED_AT_RULE = {\n          \"@page\": true,\n          \"@font-face\": true,\n          \"@keyframes\": true,\n          \"@media\": true,\n          \"@supports\": true,\n          \"@document\": true\n        };\n        this.CONDITIONAL_GROUP_RULE = {\n          \"@media\": true,\n          \"@supports\": true,\n          \"@document\": true\n        };\n      }\n      Beautifier.prototype.eatString = function(endChars) {\n        var result = \"\";\n        this._ch = this._input.next();\n        while (this._ch) {\n          result += this._ch;\n          if (this._ch === \"\\\\\") {\n            result += this._input.next();\n          } else if (endChars.indexOf(this._ch) !== -1 || this._ch === \"\\n\") {\n            break;\n          }\n          this._ch = this._input.next();\n        }\n        return result;\n      };\n      Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {\n        var result = whitespaceChar.test(this._input.peek());\n        var isFirstNewLine = true;\n        while (whitespaceChar.test(this._input.peek())) {\n          this._ch = this._input.next();\n          if (allowAtLeastOneNewLine && this._ch === \"\\n\") {\n            if (this._options.preserve_newlines || isFirstNewLine) {\n              isFirstNewLine = false;\n              this._output.add_new_line(true);\n            }\n          }\n        }\n        return result;\n      };\n      Beautifier.prototype.foundNestedPseudoClass = function() {\n        var openParen = 0;\n        var i = 1;\n        var ch = this._input.peek(i);\n        while (ch) {\n          if (ch === \"{\") {\n            return true;\n          } else if (ch === \"(\") {\n            openParen += 1;\n          } else if (ch === \")\") {\n            if (openParen === 0) {\n              return false;\n            }\n            openParen -= 1;\n          } else if (ch === \";\" || ch === \"}\") {\n            return false;\n          }\n          i++;\n          ch = this._input.peek(i);\n        }\n        return false;\n      };\n      Beautifier.prototype.print_string = function(output_string) {\n        this._output.set_indent(this._indentLevel);\n        this._output.non_breaking_space = true;\n        this._output.add_token(output_string);\n      };\n      Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {\n        if (isAfterSpace) {\n          this._output.space_before_token = true;\n        }\n      };\n      Beautifier.prototype.indent = function() {\n        this._indentLevel++;\n      };\n      Beautifier.prototype.outdent = function() {\n        if (this._indentLevel > 0) {\n          this._indentLevel--;\n        }\n      };\n      Beautifier.prototype.beautify = function() {\n        if (this._options.disabled) {\n          return this._source_text;\n        }\n        var source_text = this._source_text;\n        var eol = this._options.eol;\n        if (eol === \"auto\") {\n          eol = \"\\n\";\n          if (source_text && lineBreak.test(source_text || \"\")) {\n            eol = source_text.match(lineBreak)[0];\n          }\n        }\n        source_text = source_text.replace(allLineBreaks, \"\\n\");\n        var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n        this._output = new Output(this._options, baseIndentString);\n        this._input = new InputScanner(source_text);\n        this._indentLevel = 0;\n        this._nestedLevel = 0;\n        this._ch = null;\n        var parenLevel = 0;\n        var insideRule = false;\n        var insidePropertyValue = false;\n        var enteringConditionalGroup = false;\n        var insideAtExtend = false;\n        var insideAtImport = false;\n        var topCharacter = this._ch;\n        var whitespace;\n        var isAfterSpace;\n        var previous_ch;\n        while (true) {\n          whitespace = this._input.read(whitespacePattern);\n          isAfterSpace = whitespace !== \"\";\n          previous_ch = topCharacter;\n          this._ch = this._input.next();\n          if (this._ch === \"\\\\\" && this._input.hasNext()) {\n            this._ch += this._input.next();\n          }\n          topCharacter = this._ch;\n          if (!this._ch) {\n            break;\n          } else if (this._ch === \"/\" && this._input.peek() === \"*\") {\n            this._output.add_new_line();\n            this._input.back();\n            var comment = this._input.read(block_comment_pattern);\n            var directives = directives_core.get_directives(comment);\n            if (directives && directives.ignore === \"start\") {\n              comment += directives_core.readIgnored(this._input);\n            }\n            this.print_string(comment);\n            this.eatWhitespace(true);\n            this._output.add_new_line();\n          } else if (this._ch === \"/\" && this._input.peek() === \"/\") {\n            this._output.space_before_token = true;\n            this._input.back();\n            this.print_string(this._input.read(comment_pattern));\n            this.eatWhitespace(true);\n          } else if (this._ch === \"@\") {\n            this.preserveSingleSpace(isAfterSpace);\n            if (this._input.peek() === \"{\") {\n              this.print_string(this._ch + this.eatString(\"}\"));\n            } else {\n              this.print_string(this._ch);\n              var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\\]\\/='\"]/g);\n              if (variableOrRule.match(/[ :]$/)) {\n                variableOrRule = this.eatString(\": \").replace(/\\s$/, \"\");\n                this.print_string(variableOrRule);\n                this._output.space_before_token = true;\n              }\n              variableOrRule = variableOrRule.replace(/\\s$/, \"\");\n              if (variableOrRule === \"extend\") {\n                insideAtExtend = true;\n              } else if (variableOrRule === \"import\") {\n                insideAtImport = true;\n              }\n              if (variableOrRule in this.NESTED_AT_RULE) {\n                this._nestedLevel += 1;\n                if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {\n                  enteringConditionalGroup = true;\n                }\n              } else if (!insideRule && parenLevel === 0 && variableOrRule.indexOf(\":\") !== -1) {\n                insidePropertyValue = true;\n                this.indent();\n              }\n            }\n          } else if (this._ch === \"#\" && this._input.peek() === \"{\") {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch + this.eatString(\"}\"));\n          } else if (this._ch === \"{\") {\n            if (insidePropertyValue) {\n              insidePropertyValue = false;\n              this.outdent();\n            }\n            this.indent();\n            this._output.space_before_token = true;\n            this.print_string(this._ch);\n            if (enteringConditionalGroup) {\n              enteringConditionalGroup = false;\n              insideRule = this._indentLevel > this._nestedLevel;\n            } else {\n              insideRule = this._indentLevel >= this._nestedLevel;\n            }\n            if (this._options.newline_between_rules && insideRule) {\n              if (this._output.previous_line && this._output.previous_line.item(-1) !== \"{\") {\n                this._output.ensure_empty_line_above(\"/\", \",\");\n              }\n            }\n            this.eatWhitespace(true);\n            this._output.add_new_line();\n          } else if (this._ch === \"}\") {\n            this.outdent();\n            this._output.add_new_line();\n            if (previous_ch === \"{\") {\n              this._output.trim(true);\n            }\n            insideAtImport = false;\n            insideAtExtend = false;\n            if (insidePropertyValue) {\n              this.outdent();\n              insidePropertyValue = false;\n            }\n            this.print_string(this._ch);\n            insideRule = false;\n            if (this._nestedLevel) {\n              this._nestedLevel--;\n            }\n            this.eatWhitespace(true);\n            this._output.add_new_line();\n            if (this._options.newline_between_rules && !this._output.just_added_blankline()) {\n              if (this._input.peek() !== \"}\") {\n                this._output.add_new_line(true);\n              }\n            }\n          } else if (this._ch === \":\") {\n            if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack(\"&\") || this.foundNestedPseudoClass()) && !this._input.lookBack(\"(\") && !insideAtExtend && parenLevel === 0) {\n              this.print_string(\":\");\n              if (!insidePropertyValue) {\n                insidePropertyValue = true;\n                this._output.space_before_token = true;\n                this.eatWhitespace(true);\n                this.indent();\n              }\n            } else {\n              if (this._input.lookBack(\" \")) {\n                this._output.space_before_token = true;\n              }\n              if (this._input.peek() === \":\") {\n                this._ch = this._input.next();\n                this.print_string(\"::\");\n              } else {\n                this.print_string(\":\");\n              }\n            }\n          } else if (this._ch === '\"' || this._ch === \"'\") {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch + this.eatString(this._ch));\n            this.eatWhitespace(true);\n          } else if (this._ch === \";\") {\n            if (parenLevel === 0) {\n              if (insidePropertyValue) {\n                this.outdent();\n                insidePropertyValue = false;\n              }\n              insideAtExtend = false;\n              insideAtImport = false;\n              this.print_string(this._ch);\n              this.eatWhitespace(true);\n              if (this._input.peek() !== \"/\") {\n                this._output.add_new_line();\n              }\n            } else {\n              this.print_string(this._ch);\n              this.eatWhitespace(true);\n              this._output.space_before_token = true;\n            }\n          } else if (this._ch === \"(\") {\n            if (this._input.lookBack(\"url\")) {\n              this.print_string(this._ch);\n              this.eatWhitespace();\n              parenLevel++;\n              this.indent();\n              this._ch = this._input.next();\n              if (this._ch === \")\" || this._ch === '\"' || this._ch === \"'\") {\n                this._input.back();\n              } else if (this._ch) {\n                this.print_string(this._ch + this.eatString(\")\"));\n                if (parenLevel) {\n                  parenLevel--;\n                  this.outdent();\n                }\n              }\n            } else {\n              this.preserveSingleSpace(isAfterSpace);\n              this.print_string(this._ch);\n              this.eatWhitespace();\n              parenLevel++;\n              this.indent();\n            }\n          } else if (this._ch === \")\") {\n            if (parenLevel) {\n              parenLevel--;\n              this.outdent();\n            }\n            this.print_string(this._ch);\n          } else if (this._ch === \",\") {\n            this.print_string(this._ch);\n            this.eatWhitespace(true);\n            if (this._options.selector_separator_newline && !insidePropertyValue && parenLevel === 0 && !insideAtImport) {\n              this._output.add_new_line();\n            } else {\n              this._output.space_before_token = true;\n            }\n          } else if ((this._ch === \">\" || this._ch === \"+\" || this._ch === \"~\") && !insidePropertyValue && parenLevel === 0) {\n            if (this._options.space_around_combinator) {\n              this._output.space_before_token = true;\n              this.print_string(this._ch);\n              this._output.space_before_token = true;\n            } else {\n              this.print_string(this._ch);\n              this.eatWhitespace();\n              if (this._ch && whitespaceChar.test(this._ch)) {\n                this._ch = \"\";\n              }\n            }\n          } else if (this._ch === \"]\") {\n            this.print_string(this._ch);\n          } else if (this._ch === \"[\") {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch);\n          } else if (this._ch === \"=\") {\n            this.eatWhitespace();\n            this.print_string(\"=\");\n            if (whitespaceChar.test(this._ch)) {\n              this._ch = \"\";\n            }\n          } else if (this._ch === \"!\" && !this._input.lookBack(\"\\\\\")) {\n            this.print_string(\" \");\n            this.print_string(this._ch);\n          } else {\n            this.preserveSingleSpace(isAfterSpace);\n            this.print_string(this._ch);\n          }\n        }\n        var sweetCode = this._output.get_code(eol);\n        return sweetCode;\n      };\n      module.exports.Beautifier = Beautifier;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var BaseOptions = __webpack_require__(6).Options;\n      function Options(options) {\n        BaseOptions.call(this, options, \"css\");\n        this.selector_separator_newline = this._get_boolean(\"selector_separator_newline\", true);\n        this.newline_between_rules = this._get_boolean(\"newline_between_rules\", true);\n        var space_around_selector_separator = this._get_boolean(\"space_around_selector_separator\");\n        this.space_around_combinator = this._get_boolean(\"space_around_combinator\") || space_around_selector_separator;\n      }\n      Options.prototype = new BaseOptions();\n      module.exports.Options = Options;\n    }\n  ]);\n  var css_beautify = legacy_beautify_css;\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        css_beautify\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var _self = typeof window !== \"undefined\" ? window : typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope ? self : {};\nvar Prism = function(_self2) {\n  var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n  var uniqueId = 0;\n  var _ = {\n    manual: _self2.Prism && _self2.Prism.manual,\n    disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function(o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n      objId: function(obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", { value: ++uniqueId });\n        }\n        return obj[\"__id\"];\n      },\n      clone: function deepClone(o, visited) {\n        var clone, id, type = _.util.type(o);\n        visited = visited || {};\n        switch (type) {\n          case \"Object\":\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = {};\n            visited[id] = clone;\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n            return clone;\n          case \"Array\":\n            id = _.util.objId(o);\n            if (visited[id]) {\n              return visited[id];\n            }\n            clone = [];\n            visited[id] = clone;\n            o.forEach(function(v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return clone;\n          default:\n            return o;\n        }\n      },\n      getLanguage: function(element) {\n        while (element && !lang.test(element.className)) {\n          element = element.parentElement;\n        }\n        if (element) {\n          return (element.className.match(lang) || [, \"none\"])[1].toLowerCase();\n        }\n        return \"none\";\n      },\n      currentScript: function() {\n        if (typeof document === \"undefined\") {\n          return null;\n        }\n        if (\"currentScript\" in document) {\n          return document.currentScript;\n        }\n        try {\n          throw new Error();\n        } catch (err) {\n          var src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];\n          if (src) {\n            var scripts = document.getElementsByTagName(\"script\");\n            for (var i in scripts) {\n              if (scripts[i].src == src) {\n                return scripts[i];\n              }\n            }\n          }\n          return null;\n        }\n      }\n    },\n    languages: {\n      extend: function(id, redef) {\n        var lang2 = _.util.clone(_.languages[id]);\n        for (var key in redef) {\n          lang2[key] = redef[key];\n        }\n        return lang2;\n      },\n      insertBefore: function(inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n        var ret = {};\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n        var old = root[inside];\n        root[inside] = ret;\n        _.languages.DFS(_.languages, function(key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n        return ret;\n      },\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i], propertyType = _.util.type(property);\n            if (propertyType === \"Object\" && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === \"Array\" && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlightAll: function(async, callback) {\n      _.highlightAllUnder(document, async, callback);\n    },\n    highlightAllUnder: function(container, async, callback) {\n      var env = {\n        callback,\n        container,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n      _.hooks.run(\"before-highlightall\", env);\n      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n      _.hooks.run(\"before-all-elements-highlight\", env);\n      for (var i = 0, element; element = env.elements[i++]; ) {\n        _.highlightElement(element, async === true, env.callback);\n      }\n    },\n    highlightElement: function(element, async, callback) {\n      var language = _.util.getLanguage(element);\n      var grammar = _.languages[language];\n      element.className = element.className.replace(lang, \"\").replace(/\\s+/g, \" \") + \" language-\" + language;\n      var parent = element.parentNode;\n      if (parent && parent.nodeName.toLowerCase() === \"pre\") {\n        parent.className = parent.className.replace(lang, \"\").replace(/\\s+/g, \" \") + \" language-\" + language;\n      }\n      var code = element.textContent;\n      var env = {\n        element,\n        language,\n        grammar,\n        code\n      };\n      function insertHighlightedCode(highlightedCode) {\n        env.highlightedCode = highlightedCode;\n        _.hooks.run(\"before-insert\", env);\n        env.element.innerHTML = env.highlightedCode;\n        _.hooks.run(\"after-highlight\", env);\n        _.hooks.run(\"complete\", env);\n        callback && callback.call(env.element);\n      }\n      _.hooks.run(\"before-sanity-check\", env);\n      if (!env.code) {\n        _.hooks.run(\"complete\", env);\n        callback && callback.call(env.element);\n        return;\n      }\n      _.hooks.run(\"before-highlight\", env);\n      if (!env.grammar) {\n        insertHighlightedCode(_.util.encode(env.code));\n        return;\n      }\n      if (async && _self2.Worker) {\n        var worker = new Worker(_.filename);\n        worker.onmessage = function(evt) {\n          insertHighlightedCode(evt.data);\n        };\n        worker.postMessage(JSON.stringify({\n          language: env.language,\n          code: env.code,\n          immediateClose: true\n        }));\n      } else {\n        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n      }\n    },\n    highlight: function(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar,\n        language\n      };\n      _.hooks.run(\"before-tokenize\", env);\n      env.tokens = _.tokenize(env.code, env.grammar);\n      _.hooks.run(\"after-tokenize\", env);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    tokenize: function(text, grammar) {\n      var rest = grammar.rest;\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n        delete grammar.rest;\n      }\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n    hooks: {\n      all: {},\n      add: function(name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n      run: function(name, env) {\n        var callbacks = _.hooks.all[name];\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n        for (var i = 0, callback; callback = callbacks[i++]; ) {\n          callback(env);\n        }\n      }\n    },\n    Token\n  };\n  _self2.Prism = _;\n  function Token(type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias;\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  }\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n    if (Array.isArray(o)) {\n      var s = \"\";\n      o.forEach(function(e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language\n    };\n    var aliases = o.alias;\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n    _.hooks.run(\"wrap\", env);\n    var attributes = \"\";\n    for (var name in env.attributes) {\n      attributes += \" \" + name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + attributes + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, oneshot, target) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n      for (var j = 0; j < patterns.length; ++j) {\n        if (target && target == token + \",\" + j) {\n          return;\n        }\n        var pattern = patterns[j], inside = pattern.inside, lookbehind = !!pattern.lookbehind, greedy = !!pattern.greedy, lookbehindLength = 0, alias = pattern.alias;\n        if (greedy && !pattern.pattern.global) {\n          var flags = pattern.pattern.toString().match(/[imsuy]*$/)[0];\n          pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n        }\n        pattern = pattern.pattern || pattern;\n        for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          var str = currentNode.value;\n          if (tokenList.length > text.length) {\n            return;\n          }\n          if (str instanceof Token) {\n            continue;\n          }\n          var removeCount = 1;\n          if (greedy && currentNode != tokenList.tail.prev) {\n            pattern.lastIndex = pos;\n            var match = pattern.exec(text);\n            if (!match) {\n              break;\n            }\n            var from = match.index + (lookbehind && match[1] ? match[1].length : 0);\n            var to = match.index + match[0].length;\n            var p = pos;\n            p += currentNode.value.length;\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            }\n            p -= currentNode.value.length;\n            pos = p;\n            if (currentNode.value instanceof Token) {\n              continue;\n            }\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === \"string\" && !k.prev.value.greedy); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n            removeCount--;\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            pattern.lastIndex = 0;\n            var match = pattern.exec(str);\n          }\n          if (!match) {\n            if (oneshot) {\n              break;\n            }\n            continue;\n          }\n          if (lookbehind) {\n            lookbehindLength = match[1] ? match[1].length : 0;\n          }\n          var from = match.index + lookbehindLength, match = match[0].slice(lookbehindLength), to = from + match.length, before = str.slice(0, from), after = str.slice(to);\n          var removeFrom = currentNode.prev;\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n          if (removeCount > 1)\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, true, token + \",\" + j);\n          if (oneshot)\n            break;\n        }\n      }\n    }\n  }\n  function LinkedList() {\n    var head = { value: null, prev: null, next: null };\n    var tail = { value: null, prev: head, next: null };\n    head.next = tail;\n    this.head = head;\n    this.tail = tail;\n    this.length = 0;\n  }\n  function addAfter(list, node, value) {\n    var next = node.next;\n    var newNode = { value, prev: node, next };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  function removeRange(list, node, count) {\n    var next = node.next;\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n    return array;\n  }\n  if (!_self2.document) {\n    if (!_self2.addEventListener) {\n      return _;\n    }\n    if (!_.disableWorkerMessageHandler) {\n      _self2.addEventListener(\"message\", function(evt) {\n        var message = JSON.parse(evt.data), lang2 = message.language, code = message.code, immediateClose = message.immediateClose;\n        _self2.postMessage(_.highlight(code, _.languages[lang2], lang2));\n        if (immediateClose) {\n          _self2.close();\n        }\n      }, false);\n    }\n    return _;\n  }\n  var script = _.util.currentScript();\n  if (script) {\n    _.filename = script.src;\n    if (script.hasAttribute(\"data-manual\")) {\n      _.manual = true;\n    }\n  }\n  function highlightAutomaticallyCallback() {\n    if (!_.manual) {\n      _.highlightAll();\n    }\n  }\n  if (!_.manual) {\n    var readyState = document.readyState;\n    if (readyState === \"loading\" || readyState === \"interactive\" && script && script.defer) {\n      document.addEventListener(\"DOMContentLoaded\", highlightAutomaticallyCallback);\n    } else {\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(highlightAutomaticallyCallback);\n      } else {\n        window.setTimeout(highlightAutomaticallyCallback, 16);\n      }\n    }\n  }\n  return _;\n}(_self);\nif ( true && module.exports) {\n  module.exports = Prism;\n}\nif (typeof global !== \"undefined\") {\n  global.Prism = Prism;\n}\nPrism.languages.markup = {\n  \"comment\": /<!--[\\s\\S]*?-->/,\n  \"prolog\": /<\\?[\\s\\S]+?\\?>/,\n  \"doctype\": {\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:(?!<!--)[^\"'\\]]|\"[^\"]*\"|'[^']*'|<!--[\\s\\S]*?-->)*\\]\\s*)?>/i,\n    greedy: true\n  },\n  \"cdata\": /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  \"tag\": {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      \"tag\": {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          \"punctuation\": /^<\\/?/,\n          \"namespace\": /^[^\\s>\\/:]+:/\n        }\n      },\n      \"attr-value\": {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          \"punctuation\": [\n            /^=/,\n            {\n              pattern: /^(\\s*)[\"']|[\"']$/,\n              lookbehind: true\n            }\n          ]\n        }\n      },\n      \"punctuation\": /\\/?>/,\n      \"attr-name\": {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          \"namespace\": /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  \"entity\": /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = Prism.languages.markup[\"entity\"];\nPrism.hooks.add(\"wrap\", function(env) {\n  if (env.type === \"entity\") {\n    env.attributes[\"title\"] = env.content.replace(/&amp;/, \"&\");\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside[\"language-\" + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      \"included-cdata\": {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside[\"language-\" + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n        return tagName;\n      }), \"i\"),\n      lookbehind: true,\n      greedy: true,\n      inside\n    };\n    Prism.languages.insertBefore(\"markup\", \"cdata\", def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend(\"markup\", {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n(function(Prism2) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism2.languages.css = {\n    \"comment\": /\\/\\*[\\s\\S]*?\\*\\//,\n    \"atrule\": {\n      pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n      inside: {\n        \"rule\": /^@[\\w-]+/,\n        \"selector-function-argument\": {\n          pattern: /(\\bselector\\s*\\((?!\\s*\\))\\s*)(?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))+?(?=\\s*\\))/,\n          lookbehind: true,\n          alias: \"selector\"\n        }\n      }\n    },\n    \"url\": {\n      pattern: RegExp(\"url\\\\((?:\" + string.source + \"|[^\\n\\r()]*)\\\\)\", \"i\"),\n      greedy: true,\n      inside: {\n        \"function\": /^url/i,\n        \"punctuation\": /^\\(|\\)$/\n      }\n    },\n    \"selector\": RegExp(`[^{}\\\\s](?:[^{};\"']|` + string.source + \")*?(?=\\\\s*\\\\{)\"),\n    \"string\": {\n      pattern: string,\n      greedy: true\n    },\n    \"property\": /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    \"important\": /!important\\b/i,\n    \"function\": /[-a-z0-9]+(?=\\()/i,\n    \"punctuation\": /[(){};:,]/\n  };\n  Prism2.languages.css[\"atrule\"].inside.rest = Prism2.languages.css;\n  var markup = Prism2.languages.markup;\n  if (markup) {\n    markup.tag.addInlined(\"style\", \"css\");\n    Prism2.languages.insertBefore(\"inside\", \"attr-value\", {\n      \"style-attr\": {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          \"attr-name\": {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          \"punctuation\": /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          \"attr-value\": {\n            pattern: /.+/i,\n            inside: Prism2.languages.css\n          }\n        },\n        alias: \"language-css\"\n      }\n    }, markup.tag);\n  }\n})(Prism);\nPrism.languages.clike = {\n  \"comment\": [\n    {\n      pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      lookbehind: true\n    },\n    {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }\n  ],\n  \"string\": {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  \"class-name\": {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      \"punctuation\": /[.\\\\]/\n    }\n  },\n  \"keyword\": /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  \"boolean\": /\\b(?:true|false)\\b/,\n  \"function\": /\\w+(?=\\()/,\n  \"number\": /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  \"operator\": /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  \"punctuation\": /[{}[\\];(),.:]/\n};\nPrism.languages.javascript = Prism.languages.extend(\"clike\", {\n  \"class-name\": [\n    Prism.languages.clike[\"class-name\"],\n    {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n      lookbehind: true\n    }\n  ],\n  \"keyword\": [\n    {\n      pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n      lookbehind: true\n    },\n    {\n      pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n      lookbehind: true\n    }\n  ],\n  \"number\": /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  \"function\": /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  \"operator\": /--|\\+\\+|\\*\\*=?|=>|&&|\\|\\||[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?[.?]?|[~:]/\n});\nPrism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore(\"javascript\", \"keyword\", {\n  \"regex\": {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=(?:\\s|\\/\\*[\\s\\S]*?\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true\n  },\n  \"function-variable\": {\n    pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: \"function\"\n  },\n  \"parameter\": [\n    {\n      pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    {\n      pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n      inside: Prism.languages.javascript\n    },\n    {\n      pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    {\n      pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  ],\n  \"constant\": /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore(\"javascript\", \"string\", {\n  \"template-string\": {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      \"template-punctuation\": {\n        pattern: /^`|`$/,\n        alias: \"string\"\n      },\n      \"interpolation\": {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          \"interpolation-punctuation\": {\n            pattern: /^\\${|}$/,\n            alias: \"punctuation\"\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      \"string\": /[\\s\\S]+/\n    }\n  }\n});\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined(\"script\", \"javascript\");\n}\nPrism.languages.js = Prism.languages.javascript;\n(function() {\n  if (typeof self === \"undefined\" || !self.Prism || !self.document || !document.querySelector) {\n    return;\n  }\n  self.Prism.fileHighlight = function(container) {\n    container = container || document;\n    var Extensions = {\n      \"js\": \"javascript\",\n      \"py\": \"python\",\n      \"rb\": \"ruby\",\n      \"ps1\": \"powershell\",\n      \"psm1\": \"powershell\",\n      \"sh\": \"bash\",\n      \"bat\": \"batch\",\n      \"h\": \"c\",\n      \"tex\": \"latex\"\n    };\n    Array.prototype.slice.call(container.querySelectorAll(\"pre[data-src]\")).forEach(function(pre) {\n      if (pre.hasAttribute(\"data-src-loaded\")) {\n        return;\n      }\n      var src = pre.getAttribute(\"data-src\");\n      var language, parent = pre;\n      var lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n      while (parent && !lang.test(parent.className)) {\n        parent = parent.parentNode;\n      }\n      if (parent) {\n        language = (pre.className.match(lang) || [, \"\"])[1];\n      }\n      if (!language) {\n        var extension = (src.match(/\\.(\\w+)$/) || [, \"\"])[1];\n        language = Extensions[extension] || extension;\n      }\n      var code = document.createElement(\"code\");\n      code.className = \"language-\" + language;\n      pre.textContent = \"\";\n      code.textContent = \"Loading\\u2026\";\n      pre.appendChild(code);\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", src, true);\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n          if (xhr.status < 400 && xhr.responseText) {\n            code.textContent = xhr.responseText;\n            Prism.highlightElement(code);\n            pre.setAttribute(\"data-src-loaded\", \"\");\n          } else if (xhr.status >= 400) {\n            code.textContent = \"\\u2716 Error \" + xhr.status + \" while fetching file: \" + xhr.statusText;\n          } else {\n            code.textContent = \"\\u2716 Error: File does not exist or is empty\";\n          }\n        }\n      };\n      xhr.send(null);\n    });\n  };\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    self.Prism.fileHighlight();\n  });\n})();\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("var g;\ng = function() {\n  return this;\n}();\ntry {\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  if (typeof window === \"object\")\n    g = window;\n}\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSTtBQUdKLElBQUssV0FBVztBQUNmLFNBQU87QUFDUixFQUFHO0FBRUgsSUFBSTtBQUVILE1BQUksS0FBSyxJQUFJLFNBQVMsYUFBYSxFQUFFO0FBQ3RDLFNBQVMsR0FBUDtBQUVELE1BQUksT0FBTyxXQUFXO0FBQVUsUUFBSTtBQUNyQztBQU1BLE9BQU8sVUFBVSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\nfunction get_beautify(js_beautify, css_beautify, html_beautify) {\n  var beautify = function(src, config) {\n    return js_beautify.js_beautify(src, config);\n  };\n  beautify.js = js_beautify.js_beautify;\n  beautify.css = css_beautify.css_beautify;\n  beautify.html = html_beautify.html_beautify;\n  beautify.js_beautify = js_beautify.js_beautify;\n  beautify.css_beautify = css_beautify.css_beautify;\n  beautify.html_beautify = html_beautify.html_beautify;\n  return beautify;\n}\nif (true) {\n  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(0),\n    __webpack_require__(1),\n    __webpack_require__(5)\n  ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(js_beautify, css_beautify, html_beautify) {\n    return get_beautify(js_beautify, css_beautify, html_beautify);\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMtYmVhdXRpZnkvanMvaW5kZXguanM/ZTU1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBK0NBLFNBQVMsYUFBYSxhQUFhLGNBQWMsZUFBZTtBQUU5RCxNQUFJLFdBQVcsU0FBUyxLQUFLLFFBQVE7QUFDbkMsV0FBTyxZQUFZLFlBQVksS0FBSyxNQUFNO0FBQUEsRUFDNUM7QUFHQSxXQUFTLEtBQUssWUFBWTtBQUMxQixXQUFTLE1BQU0sYUFBYTtBQUM1QixXQUFTLE9BQU8sY0FBYztBQUc5QixXQUFTLGNBQWMsWUFBWTtBQUNuQyxXQUFTLGVBQWUsYUFBYTtBQUNyQyxXQUFTLGdCQUFnQixjQUFjO0FBRXZDLFNBQU87QUFDVDtBQUVBLElBQUksSUFBMEMsRUFBRTtBQUU5QyxtQ0FBTztBQUFBLElBQ0wsc0JBQWdCO0FBQWhCLElBQ0Esc0JBQW9CO0FBQXBCLElBQ0Esc0JBQXFCO0FBQXJCLEVBQ0YsQ0FBQyxtQ0FBRSxTQUFTLGFBQWEsY0FBYyxlQUFlO0FBQ3BELFdBQU8sYUFBYSxhQUFhLGNBQWMsYUFBYTtBQUFBLEVBQzlELENBQUM7QUFBQSxvR0FBQztBQUNKLE9BQU8sRUFVTiIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypqc2hpbnQgbm9kZTp0cnVlICovXG4vKiBnbG9iYWxzIGRlZmluZSAqL1xuLypcbiAgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbiAgQ29weXJpZ2h0IChjKSAyMDA3LTIwMTggRWluYXIgTGllbG1hbmlzLCBMaWFtIE5ld21hbiwgYW5kIGNvbnRyaWJ1dG9ycy5cblxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlc1xuICAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTXG4gIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuICBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gIFNPRlRXQVJFLlxuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuVGhlIGZvbGxvd2luZyBiYXRjaGVzIGFyZSBlcXVpdmFsZW50OlxuXG52YXIgYmVhdXRpZnlfanMgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpO1xudmFyIGJlYXV0aWZ5X2pzID0gcmVxdWlyZSgnanMtYmVhdXRpZnknKS5qcztcbnZhciBiZWF1dGlmeV9qcyA9IHJlcXVpcmUoJ2pzLWJlYXV0aWZ5JykuanNfYmVhdXRpZnk7XG5cbnZhciBiZWF1dGlmeV9jc3MgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpLmNzcztcbnZhciBiZWF1dGlmeV9jc3MgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpLmNzc19iZWF1dGlmeTtcblxudmFyIGJlYXV0aWZ5X2h0bWwgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpLmh0bWw7XG52YXIgYmVhdXRpZnlfaHRtbCA9IHJlcXVpcmUoJ2pzLWJlYXV0aWZ5JykuaHRtbF9iZWF1dGlmeTtcblxuQWxsIG1ldGhvZHMgcmV0dXJuZWQgYWNjZXB0IHR3byBhcmd1bWVudHMsIHRoZSBzb3VyY2Ugc3RyaW5nIGFuZCBhbiBvcHRpb25zIG9iamVjdC5cbioqL1xuXG5mdW5jdGlvbiBnZXRfYmVhdXRpZnkoanNfYmVhdXRpZnksIGNzc19iZWF1dGlmeSwgaHRtbF9iZWF1dGlmeSkge1xuICAvLyB0aGUgZGVmYXVsdCBpcyBqc1xuICB2YXIgYmVhdXRpZnkgPSBmdW5jdGlvbihzcmMsIGNvbmZpZykge1xuICAgIHJldHVybiBqc19iZWF1dGlmeS5qc19iZWF1dGlmeShzcmMsIGNvbmZpZyk7XG4gIH07XG5cbiAgLy8gc2hvcnQgYWxpYXNlc1xuICBiZWF1dGlmeS5qcyA9IGpzX2JlYXV0aWZ5LmpzX2JlYXV0aWZ5O1xuICBiZWF1dGlmeS5jc3MgPSBjc3NfYmVhdXRpZnkuY3NzX2JlYXV0aWZ5O1xuICBiZWF1dGlmeS5odG1sID0gaHRtbF9iZWF1dGlmeS5odG1sX2JlYXV0aWZ5O1xuXG4gIC8vIGxlZ2FjeSBhbGlhc2VzXG4gIGJlYXV0aWZ5LmpzX2JlYXV0aWZ5ID0ganNfYmVhdXRpZnkuanNfYmVhdXRpZnk7XG4gIGJlYXV0aWZ5LmNzc19iZWF1dGlmeSA9IGNzc19iZWF1dGlmeS5jc3NfYmVhdXRpZnk7XG4gIGJlYXV0aWZ5Lmh0bWxfYmVhdXRpZnkgPSBodG1sX2JlYXV0aWZ5Lmh0bWxfYmVhdXRpZnk7XG5cbiAgcmV0dXJuIGJlYXV0aWZ5O1xufVxuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgLy8gQWRkIHN1cHBvcnQgZm9yIEFNRCAoIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWRqcy9hbWRqcy1hcGkvd2lraS9BTUQjZGVmaW5lYW1kLXByb3BlcnR5LSApXG4gIGRlZmluZShbXG4gICAgXCIuL2xpYi9iZWF1dGlmeVwiLFxuICAgIFwiLi9saWIvYmVhdXRpZnktY3NzXCIsXG4gICAgXCIuL2xpYi9iZWF1dGlmeS1odG1sXCJcbiAgXSwgZnVuY3Rpb24oanNfYmVhdXRpZnksIGNzc19iZWF1dGlmeSwgaHRtbF9iZWF1dGlmeSkge1xuICAgIHJldHVybiBnZXRfYmVhdXRpZnkoanNfYmVhdXRpZnksIGNzc19iZWF1dGlmeSwgaHRtbF9iZWF1dGlmeSk7XG4gIH0pO1xufSBlbHNlIHtcbiAgKGZ1bmN0aW9uKG1vZCkge1xuICAgIHZhciBiZWF1dGlmaWVyID0gcmVxdWlyZSgnLi9zcmMvaW5kZXgnKTtcbiAgICBiZWF1dGlmaWVyLmpzX2JlYXV0aWZ5ID0gYmVhdXRpZmllci5qcztcbiAgICBiZWF1dGlmaWVyLmNzc19iZWF1dGlmeSA9IGJlYXV0aWZpZXIuY3NzO1xuICAgIGJlYXV0aWZpZXIuaHRtbF9iZWF1dGlmeSA9IGJlYXV0aWZpZXIuaHRtbDtcblxuICAgIG1vZC5leHBvcnRzID0gZ2V0X2JlYXV0aWZ5KGJlYXV0aWZpZXIsIGJlYXV0aWZpZXIsIGJlYXV0aWZpZXIpO1xuXG4gIH0pKG1vZHVsZSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n  var legacy_beautify_html = function(modules) {\n    var installedModules = {};\n    function __webpack_require__(moduleId) {\n      if (installedModules[moduleId]) {\n        return installedModules[moduleId].exports;\n      }\n      var module = installedModules[moduleId] = {\n        i: moduleId,\n        l: false,\n        exports: {}\n      };\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      module.l = true;\n      return module.exports;\n    }\n    __webpack_require__.m = modules;\n    __webpack_require__.c = installedModules;\n    __webpack_require__.d = function(exports2, name, getter) {\n      if (!__webpack_require__.o(exports2, name)) {\n        Object.defineProperty(exports2, name, { enumerable: true, get: getter });\n      }\n    };\n    __webpack_require__.r = function(exports2) {\n      if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n        Object.defineProperty(exports2, Symbol.toStringTag, { value: \"Module\" });\n      }\n      Object.defineProperty(exports2, \"__esModule\", { value: true });\n    };\n    __webpack_require__.t = function(value, mode) {\n      if (mode & 1)\n        value = __webpack_require__(value);\n      if (mode & 8)\n        return value;\n      if (mode & 4 && typeof value === \"object\" && value && value.__esModule)\n        return value;\n      var ns = /* @__PURE__ */ Object.create(null);\n      __webpack_require__.r(ns);\n      Object.defineProperty(ns, \"default\", { enumerable: true, value });\n      if (mode & 2 && typeof value != \"string\")\n        for (var key in value)\n          __webpack_require__.d(ns, key, function(key2) {\n            return value[key2];\n          }.bind(null, key));\n      return ns;\n    };\n    __webpack_require__.n = function(module) {\n      var getter = module && module.__esModule ? function getDefault() {\n        return module[\"default\"];\n      } : function getModuleExports() {\n        return module;\n      };\n      __webpack_require__.d(getter, \"a\", getter);\n      return getter;\n    };\n    __webpack_require__.o = function(object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    __webpack_require__.p = \"\";\n    return __webpack_require__(__webpack_require__.s = 18);\n  }([\n    ,\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function OutputLine(parent) {\n        this.__parent = parent;\n        this.__character_count = 0;\n        this.__indent_count = -1;\n        this.__alignment_count = 0;\n        this.__wrap_point_index = 0;\n        this.__wrap_point_character_count = 0;\n        this.__wrap_point_indent_count = -1;\n        this.__wrap_point_alignment_count = 0;\n        this.__items = [];\n      }\n      OutputLine.prototype.clone_empty = function() {\n        var line = new OutputLine(this.__parent);\n        line.set_indent(this.__indent_count, this.__alignment_count);\n        return line;\n      };\n      OutputLine.prototype.item = function(index) {\n        if (index < 0) {\n          return this.__items[this.__items.length + index];\n        } else {\n          return this.__items[index];\n        }\n      };\n      OutputLine.prototype.has_match = function(pattern) {\n        for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {\n          if (this.__items[lastCheckedOutput].match(pattern)) {\n            return true;\n          }\n        }\n        return false;\n      };\n      OutputLine.prototype.set_indent = function(indent, alignment) {\n        if (this.is_empty()) {\n          this.__indent_count = indent || 0;\n          this.__alignment_count = alignment || 0;\n          this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n        }\n      };\n      OutputLine.prototype._set_wrap_point = function() {\n        if (this.__parent.wrap_line_length) {\n          this.__wrap_point_index = this.__items.length;\n          this.__wrap_point_character_count = this.__character_count;\n          this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n          this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n        }\n      };\n      OutputLine.prototype._should_wrap = function() {\n        return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n      };\n      OutputLine.prototype._allow_wrap = function() {\n        if (this._should_wrap()) {\n          this.__parent.add_new_line();\n          var next = this.__parent.current_line;\n          next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n          next.__items = this.__items.slice(this.__wrap_point_index);\n          this.__items = this.__items.slice(0, this.__wrap_point_index);\n          next.__character_count += this.__character_count - this.__wrap_point_character_count;\n          this.__character_count = this.__wrap_point_character_count;\n          if (next.__items[0] === \" \") {\n            next.__items.splice(0, 1);\n            next.__character_count -= 1;\n          }\n          return true;\n        }\n        return false;\n      };\n      OutputLine.prototype.is_empty = function() {\n        return this.__items.length === 0;\n      };\n      OutputLine.prototype.last = function() {\n        if (!this.is_empty()) {\n          return this.__items[this.__items.length - 1];\n        } else {\n          return null;\n        }\n      };\n      OutputLine.prototype.push = function(item) {\n        this.__items.push(item);\n        var last_newline_index = item.lastIndexOf(\"\\n\");\n        if (last_newline_index !== -1) {\n          this.__character_count = item.length - last_newline_index;\n        } else {\n          this.__character_count += item.length;\n        }\n      };\n      OutputLine.prototype.pop = function() {\n        var item = null;\n        if (!this.is_empty()) {\n          item = this.__items.pop();\n          this.__character_count -= item.length;\n        }\n        return item;\n      };\n      OutputLine.prototype._remove_indent = function() {\n        if (this.__indent_count > 0) {\n          this.__indent_count -= 1;\n          this.__character_count -= this.__parent.indent_size;\n        }\n      };\n      OutputLine.prototype._remove_wrap_indent = function() {\n        if (this.__wrap_point_indent_count > 0) {\n          this.__wrap_point_indent_count -= 1;\n        }\n      };\n      OutputLine.prototype.trim = function() {\n        while (this.last() === \" \") {\n          this.__items.pop();\n          this.__character_count -= 1;\n        }\n      };\n      OutputLine.prototype.toString = function() {\n        var result = \"\";\n        if (this.is_empty()) {\n          if (this.__parent.indent_empty_lines) {\n            result = this.__parent.get_indent_string(this.__indent_count);\n          }\n        } else {\n          result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n          result += this.__items.join(\"\");\n        }\n        return result;\n      };\n      function IndentStringCache(options, baseIndentString) {\n        this.__cache = [\"\"];\n        this.__indent_size = options.indent_size;\n        this.__indent_string = options.indent_char;\n        if (!options.indent_with_tabs) {\n          this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n        }\n        baseIndentString = baseIndentString || \"\";\n        if (options.indent_level > 0) {\n          baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n        }\n        this.__base_string = baseIndentString;\n        this.__base_string_length = baseIndentString.length;\n      }\n      IndentStringCache.prototype.get_indent_size = function(indent, column) {\n        var result = this.__base_string_length;\n        column = column || 0;\n        if (indent < 0) {\n          result = 0;\n        }\n        result += indent * this.__indent_size;\n        result += column;\n        return result;\n      };\n      IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n        var result = this.__base_string;\n        column = column || 0;\n        if (indent_level < 0) {\n          indent_level = 0;\n          result = \"\";\n        }\n        column += indent_level * this.__indent_size;\n        this.__ensure_cache(column);\n        result += this.__cache[column];\n        return result;\n      };\n      IndentStringCache.prototype.__ensure_cache = function(column) {\n        while (column >= this.__cache.length) {\n          this.__add_column();\n        }\n      };\n      IndentStringCache.prototype.__add_column = function() {\n        var column = this.__cache.length;\n        var indent = 0;\n        var result = \"\";\n        if (this.__indent_size && column >= this.__indent_size) {\n          indent = Math.floor(column / this.__indent_size);\n          column -= indent * this.__indent_size;\n          result = new Array(indent + 1).join(this.__indent_string);\n        }\n        if (column) {\n          result += new Array(column + 1).join(\" \");\n        }\n        this.__cache.push(result);\n      };\n      function Output(options, baseIndentString) {\n        this.__indent_cache = new IndentStringCache(options, baseIndentString);\n        this.raw = false;\n        this._end_with_newline = options.end_with_newline;\n        this.indent_size = options.indent_size;\n        this.wrap_line_length = options.wrap_line_length;\n        this.indent_empty_lines = options.indent_empty_lines;\n        this.__lines = [];\n        this.previous_line = null;\n        this.current_line = null;\n        this.next_line = new OutputLine(this);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n        this.__add_outputline();\n      }\n      Output.prototype.__add_outputline = function() {\n        this.previous_line = this.current_line;\n        this.current_line = this.next_line.clone_empty();\n        this.__lines.push(this.current_line);\n      };\n      Output.prototype.get_line_number = function() {\n        return this.__lines.length;\n      };\n      Output.prototype.get_indent_string = function(indent, column) {\n        return this.__indent_cache.get_indent_string(indent, column);\n      };\n      Output.prototype.get_indent_size = function(indent, column) {\n        return this.__indent_cache.get_indent_size(indent, column);\n      };\n      Output.prototype.is_empty = function() {\n        return !this.previous_line && this.current_line.is_empty();\n      };\n      Output.prototype.add_new_line = function(force_newline) {\n        if (this.is_empty() || !force_newline && this.just_added_newline()) {\n          return false;\n        }\n        if (!this.raw) {\n          this.__add_outputline();\n        }\n        return true;\n      };\n      Output.prototype.get_code = function(eol) {\n        this.trim(true);\n        var last_item = this.current_line.pop();\n        if (last_item) {\n          if (last_item[last_item.length - 1] === \"\\n\") {\n            last_item = last_item.replace(/\\n+$/g, \"\");\n          }\n          this.current_line.push(last_item);\n        }\n        if (this._end_with_newline) {\n          this.__add_outputline();\n        }\n        var sweet_code = this.__lines.join(\"\\n\");\n        if (eol !== \"\\n\") {\n          sweet_code = sweet_code.replace(/[\\n]/g, eol);\n        }\n        return sweet_code;\n      };\n      Output.prototype.set_wrap_point = function() {\n        this.current_line._set_wrap_point();\n      };\n      Output.prototype.set_indent = function(indent, alignment) {\n        indent = indent || 0;\n        alignment = alignment || 0;\n        this.next_line.set_indent(indent, alignment);\n        if (this.__lines.length > 1) {\n          this.current_line.set_indent(indent, alignment);\n          return true;\n        }\n        this.current_line.set_indent();\n        return false;\n      };\n      Output.prototype.add_raw_token = function(token) {\n        for (var x = 0; x < token.newlines; x++) {\n          this.__add_outputline();\n        }\n        this.current_line.set_indent(-1);\n        this.current_line.push(token.whitespace_before);\n        this.current_line.push(token.text);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = false;\n      };\n      Output.prototype.add_token = function(printable_token) {\n        this.__add_space_before_token();\n        this.current_line.push(printable_token);\n        this.space_before_token = false;\n        this.non_breaking_space = false;\n        this.previous_token_wrapped = this.current_line._allow_wrap();\n      };\n      Output.prototype.__add_space_before_token = function() {\n        if (this.space_before_token && !this.just_added_newline()) {\n          if (!this.non_breaking_space) {\n            this.set_wrap_point();\n          }\n          this.current_line.push(\" \");\n        }\n      };\n      Output.prototype.remove_indent = function(index) {\n        var output_length = this.__lines.length;\n        while (index < output_length) {\n          this.__lines[index]._remove_indent();\n          index++;\n        }\n        this.current_line._remove_wrap_indent();\n      };\n      Output.prototype.trim = function(eat_newlines) {\n        eat_newlines = eat_newlines === void 0 ? false : eat_newlines;\n        this.current_line.trim();\n        while (eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()) {\n          this.__lines.pop();\n          this.current_line = this.__lines[this.__lines.length - 1];\n          this.current_line.trim();\n        }\n        this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n      };\n      Output.prototype.just_added_newline = function() {\n        return this.current_line.is_empty();\n      };\n      Output.prototype.just_added_blankline = function() {\n        return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n      };\n      Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n        var index = this.__lines.length - 2;\n        while (index >= 0) {\n          var potentialEmptyLine = this.__lines[index];\n          if (potentialEmptyLine.is_empty()) {\n            break;\n          } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n            this.__lines.splice(index + 1, 0, new OutputLine(this));\n            this.previous_line = this.__lines[this.__lines.length - 2];\n            break;\n          }\n          index--;\n        }\n      };\n      module.exports.Output = Output;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Token(type, text, newlines, whitespace_before) {\n        this.type = type;\n        this.text = text;\n        this.comments_before = null;\n        this.newlines = newlines || 0;\n        this.whitespace_before = whitespace_before || \"\";\n        this.parent = null;\n        this.next = null;\n        this.previous = null;\n        this.opened = null;\n        this.closed = null;\n        this.directives = null;\n      }\n      module.exports.Token = Token;\n    },\n    ,\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Options(options, merge_child_field) {\n        this.raw_options = _mergeOpts(options, merge_child_field);\n        this.disabled = this._get_boolean(\"disabled\");\n        this.eol = this._get_characters(\"eol\", \"auto\");\n        this.end_with_newline = this._get_boolean(\"end_with_newline\");\n        this.indent_size = this._get_number(\"indent_size\", 4);\n        this.indent_char = this._get_characters(\"indent_char\", \" \");\n        this.indent_level = this._get_number(\"indent_level\");\n        this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n        this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n        if (!this.preserve_newlines) {\n          this.max_preserve_newlines = 0;\n        }\n        this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n        if (this.indent_with_tabs) {\n          this.indent_char = \"\t\";\n          if (this.indent_size === 1) {\n            this.indent_size = 4;\n          }\n        }\n        this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n        this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n        this.templating = this._get_selection_list(\"templating\", [\"auto\", \"none\", \"django\", \"erb\", \"handlebars\", \"php\"], [\"auto\"]);\n      }\n      Options.prototype._get_array = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || [];\n        if (typeof option_value === \"object\") {\n          if (option_value !== null && typeof option_value.concat === \"function\") {\n            result = option_value.concat();\n          }\n        } else if (typeof option_value === \"string\") {\n          result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n        }\n        return result;\n      };\n      Options.prototype._get_boolean = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = option_value === void 0 ? !!default_value : !!option_value;\n        return result;\n      };\n      Options.prototype._get_characters = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        var result = default_value || \"\";\n        if (typeof option_value === \"string\") {\n          result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n        }\n        return result;\n      };\n      Options.prototype._get_number = function(name, default_value) {\n        var option_value = this.raw_options[name];\n        default_value = parseInt(default_value, 10);\n        if (isNaN(default_value)) {\n          default_value = 0;\n        }\n        var result = parseInt(option_value, 10);\n        if (isNaN(result)) {\n          result = default_value;\n        }\n        return result;\n      };\n      Options.prototype._get_selection = function(name, selection_list, default_value) {\n        var result = this._get_selection_list(name, selection_list, default_value);\n        if (result.length !== 1) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result[0];\n      };\n      Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n        if (!selection_list || selection_list.length === 0) {\n          throw new Error(\"Selection list cannot be empty.\");\n        }\n        default_value = default_value || [selection_list[0]];\n        if (!this._is_valid_selection(default_value, selection_list)) {\n          throw new Error(\"Invalid Default Value!\");\n        }\n        var result = this._get_array(name, default_value);\n        if (!this._is_valid_selection(result, selection_list)) {\n          throw new Error(\n            \"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\"\n          );\n        }\n        return result;\n      };\n      Options.prototype._is_valid_selection = function(result, selection_list) {\n        return result.length && selection_list.length && !result.some(function(item) {\n          return selection_list.indexOf(item) === -1;\n        });\n      };\n      function _mergeOpts(allOptions, childFieldName) {\n        var finalOpts = {};\n        allOptions = _normalizeOpts(allOptions);\n        var name;\n        for (name in allOptions) {\n          if (name !== childFieldName) {\n            finalOpts[name] = allOptions[name];\n          }\n        }\n        if (childFieldName && allOptions[childFieldName]) {\n          for (name in allOptions[childFieldName]) {\n            finalOpts[name] = allOptions[childFieldName][name];\n          }\n        }\n        return finalOpts;\n      }\n      function _normalizeOpts(options) {\n        var convertedOpts = {};\n        var key;\n        for (key in options) {\n          var newKey = key.replace(/-/g, \"_\");\n          convertedOpts[newKey] = options[key];\n        }\n        return convertedOpts;\n      }\n      module.exports.Options = Options;\n      module.exports.normalizeOpts = _normalizeOpts;\n      module.exports.mergeOpts = _mergeOpts;\n    },\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n      function InputScanner(input_string) {\n        this.__input = input_string || \"\";\n        this.__input_length = this.__input.length;\n        this.__position = 0;\n      }\n      InputScanner.prototype.restart = function() {\n        this.__position = 0;\n      };\n      InputScanner.prototype.back = function() {\n        if (this.__position > 0) {\n          this.__position -= 1;\n        }\n      };\n      InputScanner.prototype.hasNext = function() {\n        return this.__position < this.__input_length;\n      };\n      InputScanner.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__input.charAt(this.__position);\n          this.__position += 1;\n        }\n        return val;\n      };\n      InputScanner.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          val = this.__input.charAt(index);\n        }\n        return val;\n      };\n      InputScanner.prototype.__match = function(pattern, index) {\n        pattern.lastIndex = index;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n          if (pattern_match.index !== index) {\n            pattern_match = null;\n          }\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.test = function(pattern, index) {\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__input_length) {\n          return !!this.__match(pattern, index);\n        } else {\n          return false;\n        }\n      };\n      InputScanner.prototype.testChar = function(pattern, index) {\n        var val = this.peek(index);\n        pattern.lastIndex = 0;\n        return val !== null && pattern.test(val);\n      };\n      InputScanner.prototype.match = function(pattern) {\n        var pattern_match = this.__match(pattern, this.__position);\n        if (pattern_match) {\n          this.__position += pattern_match[0].length;\n        } else {\n          pattern_match = null;\n        }\n        return pattern_match;\n      };\n      InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n        var val = \"\";\n        var match;\n        if (starting_pattern) {\n          match = this.match(starting_pattern);\n          if (match) {\n            val += match[0];\n          }\n        }\n        if (until_pattern && (match || !starting_pattern)) {\n          val += this.readUntil(until_pattern, until_after);\n        }\n        return val;\n      };\n      InputScanner.prototype.readUntil = function(pattern, until_after) {\n        var val = \"\";\n        var match_index = this.__position;\n        pattern.lastIndex = this.__position;\n        var pattern_match = pattern.exec(this.__input);\n        if (pattern_match) {\n          match_index = pattern_match.index;\n          if (until_after) {\n            match_index += pattern_match[0].length;\n          }\n        } else {\n          match_index = this.__input_length;\n        }\n        val = this.__input.substring(this.__position, match_index);\n        this.__position = match_index;\n        return val;\n      };\n      InputScanner.prototype.readUntilAfter = function(pattern) {\n        return this.readUntil(pattern, true);\n      };\n      InputScanner.prototype.get_regexp = function(pattern, match_from) {\n        var result = null;\n        var flags = \"g\";\n        if (match_from && regexp_has_sticky) {\n          flags = \"y\";\n        }\n        if (typeof pattern === \"string\" && pattern !== \"\") {\n          result = new RegExp(pattern, flags);\n        } else if (pattern) {\n          result = new RegExp(pattern.source, flags);\n        }\n        return result;\n      };\n      InputScanner.prototype.get_literal_regexp = function(literal_string) {\n        return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n      };\n      InputScanner.prototype.peekUntilAfter = function(pattern) {\n        var start = this.__position;\n        var val = this.readUntilAfter(pattern);\n        this.__position = start;\n        return val;\n      };\n      InputScanner.prototype.lookBack = function(testVal) {\n        var start = this.__position - 1;\n        return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n      };\n      module.exports.InputScanner = InputScanner;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var InputScanner = __webpack_require__(8).InputScanner;\n      var Token = __webpack_require__(3).Token;\n      var TokenStream = __webpack_require__(10).TokenStream;\n      var WhitespacePattern = __webpack_require__(11).WhitespacePattern;\n      var TOKEN = {\n        START: \"TK_START\",\n        RAW: \"TK_RAW\",\n        EOF: \"TK_EOF\"\n      };\n      var Tokenizer = function(input_string, options) {\n        this._input = new InputScanner(input_string);\n        this._options = options || {};\n        this.__tokens = null;\n        this._patterns = {};\n        this._patterns.whitespace = new WhitespacePattern(this._input);\n      };\n      Tokenizer.prototype.tokenize = function() {\n        this._input.restart();\n        this.__tokens = new TokenStream();\n        this._reset();\n        var current;\n        var previous = new Token(TOKEN.START, \"\");\n        var open_token = null;\n        var open_stack = [];\n        var comments = new TokenStream();\n        while (previous.type !== TOKEN.EOF) {\n          current = this._get_next_token(previous, open_token);\n          while (this._is_comment(current)) {\n            comments.add(current);\n            current = this._get_next_token(previous, open_token);\n          }\n          if (!comments.isEmpty()) {\n            current.comments_before = comments;\n            comments = new TokenStream();\n          }\n          current.parent = open_token;\n          if (this._is_opening(current)) {\n            open_stack.push(open_token);\n            open_token = current;\n          } else if (open_token && this._is_closing(current, open_token)) {\n            current.opened = open_token;\n            open_token.closed = current;\n            open_token = open_stack.pop();\n            current.parent = open_token;\n          }\n          current.previous = previous;\n          previous.next = current;\n          this.__tokens.add(current);\n          previous = current;\n        }\n        return this.__tokens;\n      };\n      Tokenizer.prototype._is_first_token = function() {\n        return this.__tokens.isEmpty();\n      };\n      Tokenizer.prototype._reset = function() {\n      };\n      Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n        this._readWhitespace();\n        var resulting_string = this._input.read(/.+/g);\n        if (resulting_string) {\n          return this._create_token(TOKEN.RAW, resulting_string);\n        } else {\n          return this._create_token(TOKEN.EOF, \"\");\n        }\n      };\n      Tokenizer.prototype._is_comment = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_opening = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_closing = function(current_token, open_token) {\n        return false;\n      };\n      Tokenizer.prototype._create_token = function(type, text) {\n        var token = new Token(\n          type,\n          text,\n          this._patterns.whitespace.newline_count,\n          this._patterns.whitespace.whitespace_before_token\n        );\n        return token;\n      };\n      Tokenizer.prototype._readWhitespace = function() {\n        return this._patterns.whitespace.read();\n      };\n      module.exports.Tokenizer = Tokenizer;\n      module.exports.TOKEN = TOKEN;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function TokenStream(parent_token) {\n        this.__tokens = [];\n        this.__tokens_length = this.__tokens.length;\n        this.__position = 0;\n        this.__parent_token = parent_token;\n      }\n      TokenStream.prototype.restart = function() {\n        this.__position = 0;\n      };\n      TokenStream.prototype.isEmpty = function() {\n        return this.__tokens_length === 0;\n      };\n      TokenStream.prototype.hasNext = function() {\n        return this.__position < this.__tokens_length;\n      };\n      TokenStream.prototype.next = function() {\n        var val = null;\n        if (this.hasNext()) {\n          val = this.__tokens[this.__position];\n          this.__position += 1;\n        }\n        return val;\n      };\n      TokenStream.prototype.peek = function(index) {\n        var val = null;\n        index = index || 0;\n        index += this.__position;\n        if (index >= 0 && index < this.__tokens_length) {\n          val = this.__tokens[index];\n        }\n        return val;\n      };\n      TokenStream.prototype.add = function(token) {\n        if (this.__parent_token) {\n          token.parent = this.__parent_token;\n        }\n        this.__tokens.push(token);\n        this.__tokens_length += 1;\n      };\n      module.exports.TokenStream = TokenStream;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Pattern = __webpack_require__(12).Pattern;\n      function WhitespacePattern(input_scanner, parent) {\n        Pattern.call(this, input_scanner, parent);\n        if (parent) {\n          this._line_regexp = this._input.get_regexp(parent._line_regexp);\n        } else {\n          this.__set_whitespace_patterns(\"\", \"\");\n        }\n        this.newline_count = 0;\n        this.whitespace_before_token = \"\";\n      }\n      WhitespacePattern.prototype = new Pattern();\n      WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {\n        whitespace_chars += \"\\\\t \";\n        newline_chars += \"\\\\n\\\\r\";\n        this._match_pattern = this._input.get_regexp(\n          \"[\" + whitespace_chars + newline_chars + \"]+\",\n          true\n        );\n        this._newline_regexp = this._input.get_regexp(\n          \"\\\\r\\\\n|[\" + newline_chars + \"]\"\n        );\n      };\n      WhitespacePattern.prototype.read = function() {\n        this.newline_count = 0;\n        this.whitespace_before_token = \"\";\n        var resulting_string = this._input.read(this._match_pattern);\n        if (resulting_string === \" \") {\n          this.whitespace_before_token = \" \";\n        } else if (resulting_string) {\n          var matches = this.__split(this._newline_regexp, resulting_string);\n          this.newline_count = matches.length - 1;\n          this.whitespace_before_token = matches[this.newline_count];\n        }\n        return resulting_string;\n      };\n      WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {\n        var result = this._create();\n        result.__set_whitespace_patterns(whitespace_chars, newline_chars);\n        result._update();\n        return result;\n      };\n      WhitespacePattern.prototype._create = function() {\n        return new WhitespacePattern(this._input, this);\n      };\n      WhitespacePattern.prototype.__split = function(regexp, input_string) {\n        regexp.lastIndex = 0;\n        var start_index = 0;\n        var result = [];\n        var next_match = regexp.exec(input_string);\n        while (next_match) {\n          result.push(input_string.substring(start_index, next_match.index));\n          start_index = next_match.index + next_match[0].length;\n          next_match = regexp.exec(input_string);\n        }\n        if (start_index < input_string.length) {\n          result.push(input_string.substring(start_index, input_string.length));\n        } else {\n          result.push(\"\");\n        }\n        return result;\n      };\n      module.exports.WhitespacePattern = WhitespacePattern;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Pattern(input_scanner, parent) {\n        this._input = input_scanner;\n        this._starting_pattern = null;\n        this._match_pattern = null;\n        this._until_pattern = null;\n        this._until_after = false;\n        if (parent) {\n          this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);\n          this._match_pattern = this._input.get_regexp(parent._match_pattern, true);\n          this._until_pattern = this._input.get_regexp(parent._until_pattern);\n          this._until_after = parent._until_after;\n        }\n      }\n      Pattern.prototype.read = function() {\n        var result = this._input.read(this._starting_pattern);\n        if (!this._starting_pattern || result) {\n          result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);\n        }\n        return result;\n      };\n      Pattern.prototype.read_match = function() {\n        return this._input.match(this._match_pattern);\n      };\n      Pattern.prototype.until_after = function(pattern) {\n        var result = this._create();\n        result._until_after = true;\n        result._until_pattern = this._input.get_regexp(pattern);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.until = function(pattern) {\n        var result = this._create();\n        result._until_after = false;\n        result._until_pattern = this._input.get_regexp(pattern);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.starting_with = function(pattern) {\n        var result = this._create();\n        result._starting_pattern = this._input.get_regexp(pattern, true);\n        result._update();\n        return result;\n      };\n      Pattern.prototype.matching = function(pattern) {\n        var result = this._create();\n        result._match_pattern = this._input.get_regexp(pattern, true);\n        result._update();\n        return result;\n      };\n      Pattern.prototype._create = function() {\n        return new Pattern(this._input, this);\n      };\n      Pattern.prototype._update = function() {\n      };\n      module.exports.Pattern = Pattern;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      function Directives(start_block_pattern, end_block_pattern) {\n        start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n        end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n        this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n        this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n        this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n      }\n      Directives.prototype.get_directives = function(text) {\n        if (!text.match(this.__directives_block_pattern)) {\n          return null;\n        }\n        var directives = {};\n        this.__directive_pattern.lastIndex = 0;\n        var directive_match = this.__directive_pattern.exec(text);\n        while (directive_match) {\n          directives[directive_match[1]] = directive_match[2];\n          directive_match = this.__directive_pattern.exec(text);\n        }\n        return directives;\n      };\n      Directives.prototype.readIgnored = function(input) {\n        return input.readUntilAfter(this.__directives_end_ignore_pattern);\n      };\n      module.exports.Directives = Directives;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Pattern = __webpack_require__(12).Pattern;\n      var template_names = {\n        django: false,\n        erb: false,\n        handlebars: false,\n        php: false\n      };\n      function TemplatablePattern(input_scanner, parent) {\n        Pattern.call(this, input_scanner, parent);\n        this.__template_pattern = null;\n        this._disabled = Object.assign({}, template_names);\n        this._excluded = Object.assign({}, template_names);\n        if (parent) {\n          this.__template_pattern = this._input.get_regexp(parent.__template_pattern);\n          this._excluded = Object.assign(this._excluded, parent._excluded);\n          this._disabled = Object.assign(this._disabled, parent._disabled);\n        }\n        var pattern = new Pattern(input_scanner);\n        this.__patterns = {\n          handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),\n          handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),\n          handlebars: pattern.starting_with(/{{/).until_after(/}}/),\n          php: pattern.starting_with(/<\\?(?:[=]|php)/).until_after(/\\?>/),\n          erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),\n          django: pattern.starting_with(/{%/).until_after(/%}/),\n          django_value: pattern.starting_with(/{{/).until_after(/}}/),\n          django_comment: pattern.starting_with(/{#/).until_after(/#}/)\n        };\n      }\n      TemplatablePattern.prototype = new Pattern();\n      TemplatablePattern.prototype._create = function() {\n        return new TemplatablePattern(this._input, this);\n      };\n      TemplatablePattern.prototype._update = function() {\n        this.__set_templated_pattern();\n      };\n      TemplatablePattern.prototype.disable = function(language) {\n        var result = this._create();\n        result._disabled[language] = true;\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.read_options = function(options) {\n        var result = this._create();\n        for (var language in template_names) {\n          result._disabled[language] = options.templating.indexOf(language) === -1;\n        }\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.exclude = function(language) {\n        var result = this._create();\n        result._excluded[language] = true;\n        result._update();\n        return result;\n      };\n      TemplatablePattern.prototype.read = function() {\n        var result = \"\";\n        if (this._match_pattern) {\n          result = this._input.read(this._starting_pattern);\n        } else {\n          result = this._input.read(this._starting_pattern, this.__template_pattern);\n        }\n        var next = this._read_template();\n        while (next) {\n          if (this._match_pattern) {\n            next += this._input.read(this._match_pattern);\n          } else {\n            next += this._input.readUntil(this.__template_pattern);\n          }\n          result += next;\n          next = this._read_template();\n        }\n        if (this._until_after) {\n          result += this._input.readUntilAfter(this._until_pattern);\n        }\n        return result;\n      };\n      TemplatablePattern.prototype.__set_templated_pattern = function() {\n        var items = [];\n        if (!this._disabled.php) {\n          items.push(this.__patterns.php._starting_pattern.source);\n        }\n        if (!this._disabled.handlebars) {\n          items.push(this.__patterns.handlebars._starting_pattern.source);\n        }\n        if (!this._disabled.erb) {\n          items.push(this.__patterns.erb._starting_pattern.source);\n        }\n        if (!this._disabled.django) {\n          items.push(this.__patterns.django._starting_pattern.source);\n          items.push(this.__patterns.django_value._starting_pattern.source);\n          items.push(this.__patterns.django_comment._starting_pattern.source);\n        }\n        if (this._until_pattern) {\n          items.push(this._until_pattern.source);\n        }\n        this.__template_pattern = this._input.get_regexp(\"(?:\" + items.join(\"|\") + \")\");\n      };\n      TemplatablePattern.prototype._read_template = function() {\n        var resulting_string = \"\";\n        var c = this._input.peek();\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (!this._disabled.php && !this._excluded.php && peek1 === \"?\") {\n            resulting_string = resulting_string || this.__patterns.php.read();\n          }\n          if (!this._disabled.erb && !this._excluded.erb && peek1 === \"%\") {\n            resulting_string = resulting_string || this.__patterns.erb.read();\n          }\n        } else if (c === \"{\") {\n          if (!this._disabled.handlebars && !this._excluded.handlebars) {\n            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();\n            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();\n            resulting_string = resulting_string || this.__patterns.handlebars.read();\n          }\n          if (!this._disabled.django) {\n            if (!this._excluded.django && !this._excluded.handlebars) {\n              resulting_string = resulting_string || this.__patterns.django_value.read();\n            }\n            if (!this._excluded.django) {\n              resulting_string = resulting_string || this.__patterns.django_comment.read();\n              resulting_string = resulting_string || this.__patterns.django.read();\n            }\n          }\n        }\n        return resulting_string;\n      };\n      module.exports.TemplatablePattern = TemplatablePattern;\n    },\n    ,\n    ,\n    ,\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Beautifier = __webpack_require__(19).Beautifier, Options = __webpack_require__(20).Options;\n      function style_html2(html_source, options, js_beautify2, css_beautify2) {\n        var beautifier = new Beautifier(html_source, options, js_beautify2, css_beautify2);\n        return beautifier.beautify();\n      }\n      module.exports = style_html2;\n      module.exports.defaultOptions = function() {\n        return new Options();\n      };\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var Options = __webpack_require__(20).Options;\n      var Output = __webpack_require__(2).Output;\n      var Tokenizer = __webpack_require__(21).Tokenizer;\n      var TOKEN = __webpack_require__(21).TOKEN;\n      var lineBreak = /\\r\\n|[\\r\\n]/;\n      var allLineBreaks = /\\r\\n|[\\r\\n]/g;\n      var Printer = function(options, base_indent_string) {\n        this.indent_level = 0;\n        this.alignment_size = 0;\n        this.max_preserve_newlines = options.max_preserve_newlines;\n        this.preserve_newlines = options.preserve_newlines;\n        this._output = new Output(options, base_indent_string);\n      };\n      Printer.prototype.current_line_has_match = function(pattern) {\n        return this._output.current_line.has_match(pattern);\n      };\n      Printer.prototype.set_space_before_token = function(value, non_breaking) {\n        this._output.space_before_token = value;\n        this._output.non_breaking_space = non_breaking;\n      };\n      Printer.prototype.set_wrap_point = function() {\n        this._output.set_indent(this.indent_level, this.alignment_size);\n        this._output.set_wrap_point();\n      };\n      Printer.prototype.add_raw_token = function(token) {\n        this._output.add_raw_token(token);\n      };\n      Printer.prototype.print_preserved_newlines = function(raw_token) {\n        var newlines = 0;\n        if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {\n          newlines = raw_token.newlines ? 1 : 0;\n        }\n        if (this.preserve_newlines) {\n          newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;\n        }\n        for (var n = 0; n < newlines; n++) {\n          this.print_newline(n > 0);\n        }\n        return newlines !== 0;\n      };\n      Printer.prototype.traverse_whitespace = function(raw_token) {\n        if (raw_token.whitespace_before || raw_token.newlines) {\n          if (!this.print_preserved_newlines(raw_token)) {\n            this._output.space_before_token = true;\n          }\n          return true;\n        }\n        return false;\n      };\n      Printer.prototype.previous_token_wrapped = function() {\n        return this._output.previous_token_wrapped;\n      };\n      Printer.prototype.print_newline = function(force) {\n        this._output.add_new_line(force);\n      };\n      Printer.prototype.print_token = function(token) {\n        if (token.text) {\n          this._output.set_indent(this.indent_level, this.alignment_size);\n          this._output.add_token(token.text);\n        }\n      };\n      Printer.prototype.indent = function() {\n        this.indent_level++;\n      };\n      Printer.prototype.get_full_indent = function(level) {\n        level = this.indent_level + (level || 0);\n        if (level < 1) {\n          return \"\";\n        }\n        return this._output.get_indent_string(level);\n      };\n      var get_type_attribute = function(start_token) {\n        var result = null;\n        var raw_token = start_token.next;\n        while (raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token) {\n          if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === \"type\") {\n            if (raw_token.next && raw_token.next.type === TOKEN.EQUALS && raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {\n              result = raw_token.next.next.text;\n            }\n            break;\n          }\n          raw_token = raw_token.next;\n        }\n        return result;\n      };\n      var get_custom_beautifier_name = function(tag_check, raw_token) {\n        var typeAttribute = null;\n        var result = null;\n        if (!raw_token.closed) {\n          return null;\n        }\n        if (tag_check === \"script\") {\n          typeAttribute = \"text/javascript\";\n        } else if (tag_check === \"style\") {\n          typeAttribute = \"text/css\";\n        }\n        typeAttribute = get_type_attribute(raw_token) || typeAttribute;\n        if (typeAttribute.search(\"text/css\") > -1) {\n          result = \"css\";\n        } else if (typeAttribute.search(/module|((text|application|dojo)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json|method|aspect))/) > -1) {\n          result = \"javascript\";\n        } else if (typeAttribute.search(/(text|application|dojo)\\/(x-)?(html)/) > -1) {\n          result = \"html\";\n        } else if (typeAttribute.search(/test\\/null/) > -1) {\n          result = \"null\";\n        }\n        return result;\n      };\n      function in_array(what, arr) {\n        return arr.indexOf(what) !== -1;\n      }\n      function TagFrame(parent, parser_token, indent_level) {\n        this.parent = parent || null;\n        this.tag = parser_token ? parser_token.tag_name : \"\";\n        this.indent_level = indent_level || 0;\n        this.parser_token = parser_token || null;\n      }\n      function TagStack(printer) {\n        this._printer = printer;\n        this._current_frame = null;\n      }\n      TagStack.prototype.get_parser_token = function() {\n        return this._current_frame ? this._current_frame.parser_token : null;\n      };\n      TagStack.prototype.record_tag = function(parser_token) {\n        var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);\n        this._current_frame = new_frame;\n      };\n      TagStack.prototype._try_pop_frame = function(frame) {\n        var parser_token = null;\n        if (frame) {\n          parser_token = frame.parser_token;\n          this._printer.indent_level = frame.indent_level;\n          this._current_frame = frame.parent;\n        }\n        return parser_token;\n      };\n      TagStack.prototype._get_frame = function(tag_list, stop_list) {\n        var frame = this._current_frame;\n        while (frame) {\n          if (tag_list.indexOf(frame.tag) !== -1) {\n            break;\n          } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {\n            frame = null;\n            break;\n          }\n          frame = frame.parent;\n        }\n        return frame;\n      };\n      TagStack.prototype.try_pop = function(tag, stop_list) {\n        var frame = this._get_frame([tag], stop_list);\n        return this._try_pop_frame(frame);\n      };\n      TagStack.prototype.indent_to_tag = function(tag_list) {\n        var frame = this._get_frame(tag_list);\n        if (frame) {\n          this._printer.indent_level = frame.indent_level;\n        }\n      };\n      function Beautifier(source_text, options, js_beautify2, css_beautify2) {\n        this._source_text = source_text || \"\";\n        options = options || {};\n        this._js_beautify = js_beautify2;\n        this._css_beautify = css_beautify2;\n        this._tag_stack = null;\n        var optionHtml = new Options(options, \"html\");\n        this._options = optionHtml;\n        this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, \"force\".length) === \"force\";\n        this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === \"force-expand-multiline\";\n        this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === \"force-aligned\";\n        this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === \"aligned-multiple\";\n        this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, \"preserve\".length) === \"preserve\";\n        this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === \"preserve-aligned\";\n      }\n      Beautifier.prototype.beautify = function() {\n        if (this._options.disabled) {\n          return this._source_text;\n        }\n        var source_text = this._source_text;\n        var eol = this._options.eol;\n        if (this._options.eol === \"auto\") {\n          eol = \"\\n\";\n          if (source_text && lineBreak.test(source_text)) {\n            eol = source_text.match(lineBreak)[0];\n          }\n        }\n        source_text = source_text.replace(allLineBreaks, \"\\n\");\n        var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n        var last_token = {\n          text: \"\",\n          type: \"\"\n        };\n        var last_tag_token = new TagOpenParserToken();\n        var printer = new Printer(this._options, baseIndentString);\n        var tokens = new Tokenizer(source_text, this._options).tokenize();\n        this._tag_stack = new TagStack(printer);\n        var parser_token = null;\n        var raw_token = tokens.next();\n        while (raw_token.type !== TOKEN.EOF) {\n          if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {\n            parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token);\n            last_tag_token = parser_token;\n          } else if (raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE || raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete) {\n            parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, tokens);\n          } else if (raw_token.type === TOKEN.TAG_CLOSE) {\n            parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);\n          } else if (raw_token.type === TOKEN.TEXT) {\n            parser_token = this._handle_text(printer, raw_token, last_tag_token);\n          } else {\n            printer.add_raw_token(raw_token);\n          }\n          last_token = parser_token;\n          raw_token = tokens.next();\n        }\n        var sweet_code = printer._output.get_code(eol);\n        return sweet_code;\n      };\n      Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {\n        var parser_token = {\n          text: raw_token.text,\n          type: raw_token.type\n        };\n        printer.alignment_size = 0;\n        last_tag_token.tag_complete = true;\n        printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        if (last_tag_token.is_unformatted) {\n          printer.add_raw_token(raw_token);\n        } else {\n          if (last_tag_token.tag_start_char === \"<\") {\n            printer.set_space_before_token(raw_token.text[0] === \"/\", true);\n            if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {\n              printer.print_newline(false);\n            }\n          }\n          printer.print_token(raw_token);\n        }\n        if (last_tag_token.indent_content && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n          printer.indent();\n          last_tag_token.indent_content = false;\n        }\n        if (!last_tag_token.is_inline_element && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n          printer.set_wrap_point();\n        }\n        return parser_token;\n      };\n      Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, tokens) {\n        var wrapped = last_tag_token.has_wrapped_attrs;\n        var parser_token = {\n          text: raw_token.text,\n          type: raw_token.type\n        };\n        printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n        if (last_tag_token.is_unformatted) {\n          printer.add_raw_token(raw_token);\n        } else if (last_tag_token.tag_start_char === \"{\" && raw_token.type === TOKEN.TEXT) {\n          if (printer.print_preserved_newlines(raw_token)) {\n            raw_token.newlines = 0;\n            printer.add_raw_token(raw_token);\n          } else {\n            printer.print_token(raw_token);\n          }\n        } else {\n          if (raw_token.type === TOKEN.ATTRIBUTE) {\n            printer.set_space_before_token(true);\n            last_tag_token.attr_count += 1;\n          } else if (raw_token.type === TOKEN.EQUALS) {\n            printer.set_space_before_token(false);\n          } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) {\n            printer.set_space_before_token(false);\n          }\n          if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === \"<\") {\n            if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {\n              printer.traverse_whitespace(raw_token);\n              wrapped = wrapped || raw_token.newlines !== 0;\n            }\n            if (this._is_wrap_attributes_force) {\n              var force_attr_wrap = last_tag_token.attr_count > 1;\n              if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.attr_count === 1) {\n                var is_only_attribute = true;\n                var peek_index = 0;\n                var peek_token;\n                do {\n                  peek_token = tokens.peek(peek_index);\n                  if (peek_token.type === TOKEN.ATTRIBUTE) {\n                    is_only_attribute = false;\n                    break;\n                  }\n                  peek_index += 1;\n                } while (peek_index < 4 && peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);\n                force_attr_wrap = !is_only_attribute;\n              }\n              if (force_attr_wrap) {\n                printer.print_newline(false);\n                wrapped = true;\n              }\n            }\n          }\n          printer.print_token(raw_token);\n          wrapped = wrapped || printer.previous_token_wrapped();\n          last_tag_token.has_wrapped_attrs = wrapped;\n        }\n        return parser_token;\n      };\n      Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {\n        var parser_token = {\n          text: raw_token.text,\n          type: \"TK_CONTENT\"\n        };\n        if (last_tag_token.custom_beautifier_name) {\n          this._print_custom_beatifier_text(printer, raw_token, last_tag_token);\n        } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {\n          printer.add_raw_token(raw_token);\n        } else {\n          printer.traverse_whitespace(raw_token);\n          printer.print_token(raw_token);\n        }\n        return parser_token;\n      };\n      Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {\n        var local = this;\n        if (raw_token.text !== \"\") {\n          var text = raw_token.text, _beautifier, script_indent_level = 1, pre = \"\", post = \"\";\n          if (last_tag_token.custom_beautifier_name === \"javascript\" && typeof this._js_beautify === \"function\") {\n            _beautifier = this._js_beautify;\n          } else if (last_tag_token.custom_beautifier_name === \"css\" && typeof this._css_beautify === \"function\") {\n            _beautifier = this._css_beautify;\n          } else if (last_tag_token.custom_beautifier_name === \"html\") {\n            _beautifier = function(html_source, options) {\n              var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);\n              return beautifier.beautify();\n            };\n          }\n          if (this._options.indent_scripts === \"keep\") {\n            script_indent_level = 0;\n          } else if (this._options.indent_scripts === \"separate\") {\n            script_indent_level = -printer.indent_level;\n          }\n          var indentation = printer.get_full_indent(script_indent_level);\n          text = text.replace(/\\n[ \\t]*$/, \"\");\n          if (last_tag_token.custom_beautifier_name !== \"html\" && text[0] === \"<\" && text.match(/^(<!--|<!\\[CDATA\\[)/)) {\n            var matched = /^(<!--[^\\n]*|<!\\[CDATA\\[)(\\n?)([ \\t\\n]*)([\\s\\S]*)(-->|]]>)$/.exec(text);\n            if (!matched) {\n              printer.add_raw_token(raw_token);\n              return;\n            }\n            pre = indentation + matched[1] + \"\\n\";\n            text = matched[4];\n            if (matched[5]) {\n              post = indentation + matched[5];\n            }\n            text = text.replace(/\\n[ \\t]*$/, \"\");\n            if (matched[2] || matched[3].indexOf(\"\\n\") !== -1) {\n              matched = matched[3].match(/[ \\t]+$/);\n              if (matched) {\n                raw_token.whitespace_before = matched[0];\n              }\n            }\n          }\n          if (text) {\n            if (_beautifier) {\n              var Child_options = function() {\n                this.eol = \"\\n\";\n              };\n              Child_options.prototype = this._options.raw_options;\n              var child_options = new Child_options();\n              text = _beautifier(indentation + text, child_options);\n            } else {\n              var white = raw_token.whitespace_before;\n              if (white) {\n                text = text.replace(new RegExp(\"\\n(\" + white + \")?\", \"g\"), \"\\n\");\n              }\n              text = indentation + text.replace(/\\n/g, \"\\n\" + indentation);\n            }\n          }\n          if (pre) {\n            if (!text) {\n              text = pre + post;\n            } else {\n              text = pre + text + \"\\n\" + post;\n            }\n          }\n          printer.print_newline(false);\n          if (text) {\n            raw_token.text = text;\n            raw_token.whitespace_before = \"\";\n            raw_token.newlines = 0;\n            printer.add_raw_token(raw_token);\n            printer.print_newline(true);\n          }\n        }\n      };\n      Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token) {\n        var parser_token = this._get_tag_open_token(raw_token);\n        if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) && raw_token.type === TOKEN.TAG_OPEN && raw_token.text.indexOf(\"</\") === 0) {\n          printer.add_raw_token(raw_token);\n          parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);\n        } else {\n          printer.traverse_whitespace(raw_token);\n          this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);\n          if (!parser_token.is_inline_element) {\n            printer.set_wrap_point();\n          }\n          printer.print_token(raw_token);\n        }\n        if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {\n          parser_token.alignment_size = raw_token.text.length + 1;\n        }\n        if (!parser_token.tag_complete && !parser_token.is_unformatted) {\n          printer.alignment_size = parser_token.alignment_size;\n        }\n        return parser_token;\n      };\n      var TagOpenParserToken = function(parent, raw_token) {\n        this.parent = parent || null;\n        this.text = \"\";\n        this.type = \"TK_TAG_OPEN\";\n        this.tag_name = \"\";\n        this.is_inline_element = false;\n        this.is_unformatted = false;\n        this.is_content_unformatted = false;\n        this.is_empty_element = false;\n        this.is_start_tag = false;\n        this.is_end_tag = false;\n        this.indent_content = false;\n        this.multiline_content = false;\n        this.custom_beautifier_name = null;\n        this.start_tag_token = null;\n        this.attr_count = 0;\n        this.has_wrapped_attrs = false;\n        this.alignment_size = 0;\n        this.tag_complete = false;\n        this.tag_start_char = \"\";\n        this.tag_check = \"\";\n        if (!raw_token) {\n          this.tag_complete = true;\n        } else {\n          var tag_check_match;\n          this.tag_start_char = raw_token.text[0];\n          this.text = raw_token.text;\n          if (this.tag_start_char === \"<\") {\n            tag_check_match = raw_token.text.match(/^<([^\\s>]*)/);\n            this.tag_check = tag_check_match ? tag_check_match[1] : \"\";\n          } else {\n            tag_check_match = raw_token.text.match(/^{{(?:[\\^]|#\\*?)?([^\\s}]+)/);\n            this.tag_check = tag_check_match ? tag_check_match[1] : \"\";\n            if (raw_token.text === \"{{#>\" && this.tag_check === \">\" && raw_token.next !== null) {\n              this.tag_check = raw_token.next.text;\n            }\n          }\n          this.tag_check = this.tag_check.toLowerCase();\n          if (raw_token.type === TOKEN.COMMENT) {\n            this.tag_complete = true;\n          }\n          this.is_start_tag = this.tag_check.charAt(0) !== \"/\";\n          this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;\n          this.is_end_tag = !this.is_start_tag || raw_token.closed && raw_token.closed.text === \"/>\";\n          this.is_end_tag = this.is_end_tag || this.tag_start_char === \"{\" && (this.text.length < 3 || /[^#\\^]/.test(this.text.charAt(2)));\n        }\n      };\n      Beautifier.prototype._get_tag_open_token = function(raw_token) {\n        var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);\n        parser_token.alignment_size = this._options.wrap_attributes_indent_size;\n        parser_token.is_end_tag = parser_token.is_end_tag || in_array(parser_token.tag_check, this._options.void_elements);\n        parser_token.is_empty_element = parser_token.tag_complete || parser_token.is_start_tag && parser_token.is_end_tag;\n        parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);\n        parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);\n        parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || parser_token.tag_start_char === \"{\";\n        return parser_token;\n      };\n      Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {\n        if (!parser_token.is_empty_element) {\n          if (parser_token.is_end_tag) {\n            parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);\n          } else {\n            if (this._do_optional_end_element(parser_token)) {\n              if (!parser_token.is_inline_element) {\n                if (parser_token.parent) {\n                  parser_token.parent.multiline_content = true;\n                }\n                printer.print_newline(false);\n              }\n            }\n            this._tag_stack.record_tag(parser_token);\n            if ((parser_token.tag_name === \"script\" || parser_token.tag_name === \"style\") && !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {\n              parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);\n            }\n          }\n        }\n        if (in_array(parser_token.tag_check, this._options.extra_liners)) {\n          printer.print_newline(false);\n          if (!printer._output.just_added_blankline()) {\n            printer.print_newline(true);\n          }\n        }\n        if (parser_token.is_empty_element) {\n          if (parser_token.tag_start_char === \"{\" && parser_token.tag_check === \"else\") {\n            this._tag_stack.indent_to_tag([\"if\", \"unless\", \"each\"]);\n            parser_token.indent_content = true;\n            var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);\n            if (!foundIfOnCurrentLine) {\n              printer.print_newline(false);\n            }\n          }\n          if (parser_token.tag_name === \"!--\" && last_token.type === TOKEN.TAG_CLOSE && last_tag_token.is_end_tag && parser_token.text.indexOf(\"\\n\") === -1) {\n          } else if (!parser_token.is_inline_element && !parser_token.is_unformatted) {\n            printer.print_newline(false);\n          }\n        } else if (parser_token.is_unformatted || parser_token.is_content_unformatted) {\n          if (!parser_token.is_inline_element && !parser_token.is_unformatted) {\n            printer.print_newline(false);\n          }\n        } else if (parser_token.is_end_tag) {\n          if (parser_token.start_tag_token && parser_token.start_tag_token.multiline_content || !(parser_token.is_inline_element || last_tag_token.is_inline_element || last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token || last_token.type === \"TK_CONTENT\")) {\n            printer.print_newline(false);\n          }\n        } else {\n          parser_token.indent_content = !parser_token.custom_beautifier_name;\n          if (parser_token.tag_start_char === \"<\") {\n            if (parser_token.tag_name === \"html\") {\n              parser_token.indent_content = this._options.indent_inner_html;\n            } else if (parser_token.tag_name === \"head\") {\n              parser_token.indent_content = this._options.indent_head_inner_html;\n            } else if (parser_token.tag_name === \"body\") {\n              parser_token.indent_content = this._options.indent_body_inner_html;\n            }\n          }\n          if (!parser_token.is_inline_element && last_token.type !== \"TK_CONTENT\") {\n            if (parser_token.parent) {\n              parser_token.parent.multiline_content = true;\n            }\n            printer.print_newline(false);\n          }\n        }\n      };\n      var p_closers = [\"address\", \"article\", \"aside\", \"blockquote\", \"details\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hr\", \"main\", \"nav\", \"ol\", \"p\", \"pre\", \"section\", \"table\", \"ul\"];\n      var p_parent_excludes = [\"a\", \"audio\", \"del\", \"ins\", \"map\", \"noscript\", \"video\"];\n      Beautifier.prototype._do_optional_end_element = function(parser_token) {\n        var result = null;\n        if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {\n          return;\n        }\n        if (parser_token.tag_name === \"body\") {\n          result = result || this._tag_stack.try_pop(\"head\");\n        } else if (parser_token.tag_name === \"li\") {\n          result = result || this._tag_stack.try_pop(\"li\", [\"ol\", \"ul\"]);\n        } else if (parser_token.tag_name === \"dd\" || parser_token.tag_name === \"dt\") {\n          result = result || this._tag_stack.try_pop(\"dt\", [\"dl\"]);\n          result = result || this._tag_stack.try_pop(\"dd\", [\"dl\"]);\n        } else if (parser_token.parent.tag_name === \"p\" && p_closers.indexOf(parser_token.tag_name) !== -1) {\n          var p_parent = parser_token.parent.parent;\n          if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {\n            result = result || this._tag_stack.try_pop(\"p\");\n          }\n        } else if (parser_token.tag_name === \"rp\" || parser_token.tag_name === \"rt\") {\n          result = result || this._tag_stack.try_pop(\"rt\", [\"ruby\", \"rtc\"]);\n          result = result || this._tag_stack.try_pop(\"rp\", [\"ruby\", \"rtc\"]);\n        } else if (parser_token.tag_name === \"optgroup\") {\n          result = result || this._tag_stack.try_pop(\"optgroup\", [\"select\"]);\n        } else if (parser_token.tag_name === \"option\") {\n          result = result || this._tag_stack.try_pop(\"option\", [\"select\", \"datalist\", \"optgroup\"]);\n        } else if (parser_token.tag_name === \"colgroup\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n        } else if (parser_token.tag_name === \"thead\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"colgroup\", [\"table\"]);\n        } else if (parser_token.tag_name === \"tbody\" || parser_token.tag_name === \"tfoot\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"colgroup\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"thead\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"tbody\", [\"table\"]);\n        } else if (parser_token.tag_name === \"tr\") {\n          result = result || this._tag_stack.try_pop(\"caption\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"colgroup\", [\"table\"]);\n          result = result || this._tag_stack.try_pop(\"tr\", [\"table\", \"thead\", \"tbody\", \"tfoot\"]);\n        } else if (parser_token.tag_name === \"th\" || parser_token.tag_name === \"td\") {\n          result = result || this._tag_stack.try_pop(\"td\", [\"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\"]);\n          result = result || this._tag_stack.try_pop(\"th\", [\"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\"]);\n        }\n        parser_token.parent = this._tag_stack.get_parser_token();\n        return result;\n      };\n      module.exports.Beautifier = Beautifier;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var BaseOptions = __webpack_require__(6).Options;\n      function Options(options) {\n        BaseOptions.call(this, options, \"html\");\n        if (this.templating.length === 1 && this.templating[0] === \"auto\") {\n          this.templating = [\"django\", \"erb\", \"handlebars\", \"php\"];\n        }\n        this.indent_inner_html = this._get_boolean(\"indent_inner_html\");\n        this.indent_body_inner_html = this._get_boolean(\"indent_body_inner_html\", true);\n        this.indent_head_inner_html = this._get_boolean(\"indent_head_inner_html\", true);\n        this.indent_handlebars = this._get_boolean(\"indent_handlebars\", true);\n        this.wrap_attributes = this._get_selection(\n          \"wrap_attributes\",\n          [\"auto\", \"force\", \"force-aligned\", \"force-expand-multiline\", \"aligned-multiple\", \"preserve\", \"preserve-aligned\"]\n        );\n        this.wrap_attributes_indent_size = this._get_number(\"wrap_attributes_indent_size\", this.indent_size);\n        this.extra_liners = this._get_array(\"extra_liners\", [\"head\", \"body\", \"/html\"]);\n        this.inline = this._get_array(\"inline\", [\n          \"a\",\n          \"abbr\",\n          \"area\",\n          \"audio\",\n          \"b\",\n          \"bdi\",\n          \"bdo\",\n          \"br\",\n          \"button\",\n          \"canvas\",\n          \"cite\",\n          \"code\",\n          \"data\",\n          \"datalist\",\n          \"del\",\n          \"dfn\",\n          \"em\",\n          \"embed\",\n          \"i\",\n          \"iframe\",\n          \"img\",\n          \"input\",\n          \"ins\",\n          \"kbd\",\n          \"keygen\",\n          \"label\",\n          \"map\",\n          \"mark\",\n          \"math\",\n          \"meter\",\n          \"noscript\",\n          \"object\",\n          \"output\",\n          \"progress\",\n          \"q\",\n          \"ruby\",\n          \"s\",\n          \"samp\",\n          \"select\",\n          \"small\",\n          \"span\",\n          \"strong\",\n          \"sub\",\n          \"sup\",\n          \"svg\",\n          \"template\",\n          \"textarea\",\n          \"time\",\n          \"u\",\n          \"var\",\n          \"video\",\n          \"wbr\",\n          \"text\",\n          \"acronym\",\n          \"big\",\n          \"strike\",\n          \"tt\"\n        ]);\n        this.void_elements = this._get_array(\"void_elements\", [\n          \"area\",\n          \"base\",\n          \"br\",\n          \"col\",\n          \"embed\",\n          \"hr\",\n          \"img\",\n          \"input\",\n          \"keygen\",\n          \"link\",\n          \"menuitem\",\n          \"meta\",\n          \"param\",\n          \"source\",\n          \"track\",\n          \"wbr\",\n          \"!doctype\",\n          \"?xml\",\n          \"basefont\",\n          \"isindex\"\n        ]);\n        this.unformatted = this._get_array(\"unformatted\", []);\n        this.content_unformatted = this._get_array(\"content_unformatted\", [\n          \"pre\",\n          \"textarea\"\n        ]);\n        this.unformatted_content_delimiter = this._get_characters(\"unformatted_content_delimiter\");\n        this.indent_scripts = this._get_selection(\"indent_scripts\", [\"normal\", \"keep\", \"separate\"]);\n      }\n      Options.prototype = new BaseOptions();\n      module.exports.Options = Options;\n    },\n    function(module, exports2, __webpack_require__) {\n      \"use strict\";\n      var BaseTokenizer = __webpack_require__(9).Tokenizer;\n      var BASETOKEN = __webpack_require__(9).TOKEN;\n      var Directives = __webpack_require__(13).Directives;\n      var TemplatablePattern = __webpack_require__(14).TemplatablePattern;\n      var Pattern = __webpack_require__(12).Pattern;\n      var TOKEN = {\n        TAG_OPEN: \"TK_TAG_OPEN\",\n        TAG_CLOSE: \"TK_TAG_CLOSE\",\n        ATTRIBUTE: \"TK_ATTRIBUTE\",\n        EQUALS: \"TK_EQUALS\",\n        VALUE: \"TK_VALUE\",\n        COMMENT: \"TK_COMMENT\",\n        TEXT: \"TK_TEXT\",\n        UNKNOWN: \"TK_UNKNOWN\",\n        START: BASETOKEN.START,\n        RAW: BASETOKEN.RAW,\n        EOF: BASETOKEN.EOF\n      };\n      var directives_core = new Directives(/<\\!--/, /-->/);\n      var Tokenizer = function(input_string, options) {\n        BaseTokenizer.call(this, input_string, options);\n        this._current_tag_name = \"\";\n        var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);\n        var pattern_reader = new Pattern(this._input);\n        this.__patterns = {\n          word: templatable_reader.until(/[\\n\\r\\t <]/),\n          single_quote: templatable_reader.until_after(/'/),\n          double_quote: templatable_reader.until_after(/\"/),\n          attribute: templatable_reader.until(/[\\n\\r\\t =>]|\\/>/),\n          element_name: templatable_reader.until(/[\\n\\r\\t >\\/]/),\n          handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),\n          handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),\n          handlebars_open: pattern_reader.until(/[\\n\\r\\t }]/),\n          handlebars_raw_close: pattern_reader.until(/}}/),\n          comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),\n          cdata: pattern_reader.starting_with(/<!\\[CDATA\\[/).until_after(/]]>/),\n          conditional_comment: pattern_reader.starting_with(/<!\\[/).until_after(/]>/),\n          processing: pattern_reader.starting_with(/<\\?/).until_after(/\\?>/)\n        };\n        if (this._options.indent_handlebars) {\n          this.__patterns.word = this.__patterns.word.exclude(\"handlebars\");\n        }\n        this._unformatted_content_delimiter = null;\n        if (this._options.unformatted_content_delimiter) {\n          var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);\n          this.__patterns.unformatted_content_delimiter = pattern_reader.matching(literal_regexp).until_after(literal_regexp);\n        }\n      };\n      Tokenizer.prototype = new BaseTokenizer();\n      Tokenizer.prototype._is_comment = function(current_token) {\n        return false;\n      };\n      Tokenizer.prototype._is_opening = function(current_token) {\n        return current_token.type === TOKEN.TAG_OPEN;\n      };\n      Tokenizer.prototype._is_closing = function(current_token, open_token) {\n        return current_token.type === TOKEN.TAG_CLOSE && (open_token && ((current_token.text === \">\" || current_token.text === \"/>\") && open_token.text[0] === \"<\" || current_token.text === \"}}\" && open_token.text[0] === \"{\" && open_token.text[1] === \"{\"));\n      };\n      Tokenizer.prototype._reset = function() {\n        this._current_tag_name = \"\";\n      };\n      Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n        var token = null;\n        this._readWhitespace();\n        var c = this._input.peek();\n        if (c === null) {\n          return this._create_token(TOKEN.EOF, \"\");\n        }\n        token = token || this._read_open_handlebars(c, open_token);\n        token = token || this._read_attribute(c, previous_token, open_token);\n        token = token || this._read_raw_content(c, previous_token, open_token);\n        token = token || this._read_close(c, open_token);\n        token = token || this._read_content_word(c);\n        token = token || this._read_comment_or_cdata(c);\n        token = token || this._read_processing(c);\n        token = token || this._read_open(c, open_token);\n        token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());\n        return token;\n      };\n      Tokenizer.prototype._read_comment_or_cdata = function(c) {\n        var token = null;\n        var resulting_string = null;\n        var directives = null;\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (peek1 === \"!\") {\n            resulting_string = this.__patterns.comment.read();\n            if (resulting_string) {\n              directives = directives_core.get_directives(resulting_string);\n              if (directives && directives.ignore === \"start\") {\n                resulting_string += directives_core.readIgnored(this._input);\n              }\n            } else {\n              resulting_string = this.__patterns.cdata.read();\n            }\n          }\n          if (resulting_string) {\n            token = this._create_token(TOKEN.COMMENT, resulting_string);\n            token.directives = directives;\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_processing = function(c) {\n        var token = null;\n        var resulting_string = null;\n        var directives = null;\n        if (c === \"<\") {\n          var peek1 = this._input.peek(1);\n          if (peek1 === \"!\" || peek1 === \"?\") {\n            resulting_string = this.__patterns.conditional_comment.read();\n            resulting_string = resulting_string || this.__patterns.processing.read();\n          }\n          if (resulting_string) {\n            token = this._create_token(TOKEN.COMMENT, resulting_string);\n            token.directives = directives;\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_open = function(c, open_token) {\n        var resulting_string = null;\n        var token = null;\n        if (!open_token) {\n          if (c === \"<\") {\n            resulting_string = this._input.next();\n            if (this._input.peek() === \"/\") {\n              resulting_string += this._input.next();\n            }\n            resulting_string += this.__patterns.element_name.read();\n            token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_open_handlebars = function(c, open_token) {\n        var resulting_string = null;\n        var token = null;\n        if (!open_token) {\n          if (this._options.indent_handlebars && c === \"{\" && this._input.peek(1) === \"{\") {\n            if (this._input.peek(2) === \"!\") {\n              resulting_string = this.__patterns.handlebars_comment.read();\n              resulting_string = resulting_string || this.__patterns.handlebars.read();\n              token = this._create_token(TOKEN.COMMENT, resulting_string);\n            } else {\n              resulting_string = this.__patterns.handlebars_open.read();\n              token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n            }\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_close = function(c, open_token) {\n        var resulting_string = null;\n        var token = null;\n        if (open_token) {\n          if (open_token.text[0] === \"<\" && (c === \">\" || c === \"/\" && this._input.peek(1) === \">\")) {\n            resulting_string = this._input.next();\n            if (c === \"/\") {\n              resulting_string += this._input.next();\n            }\n            token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);\n          } else if (open_token.text[0] === \"{\" && c === \"}\" && this._input.peek(1) === \"}\") {\n            this._input.next();\n            this._input.next();\n            token = this._create_token(TOKEN.TAG_CLOSE, \"}}\");\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {\n        var token = null;\n        var resulting_string = \"\";\n        if (open_token && open_token.text[0] === \"<\") {\n          if (c === \"=\") {\n            token = this._create_token(TOKEN.EQUALS, this._input.next());\n          } else if (c === '\"' || c === \"'\") {\n            var content = this._input.next();\n            if (c === '\"') {\n              content += this.__patterns.double_quote.read();\n            } else {\n              content += this.__patterns.single_quote.read();\n            }\n            token = this._create_token(TOKEN.VALUE, content);\n          } else {\n            resulting_string = this.__patterns.attribute.read();\n            if (resulting_string) {\n              if (previous_token.type === TOKEN.EQUALS) {\n                token = this._create_token(TOKEN.VALUE, resulting_string);\n              } else {\n                token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);\n              }\n            }\n          }\n        }\n        return token;\n      };\n      Tokenizer.prototype._is_content_unformatted = function(tag_name) {\n        return this._options.void_elements.indexOf(tag_name) === -1 && (this._options.content_unformatted.indexOf(tag_name) !== -1 || this._options.unformatted.indexOf(tag_name) !== -1);\n      };\n      Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) {\n        var resulting_string = \"\";\n        if (open_token && open_token.text[0] === \"{\") {\n          resulting_string = this.__patterns.handlebars_raw_close.read();\n        } else if (previous_token.type === TOKEN.TAG_CLOSE && previous_token.opened.text[0] === \"<\") {\n          var tag_name = previous_token.opened.text.substr(1).toLowerCase();\n          if (tag_name === \"script\" || tag_name === \"style\") {\n            var token = this._read_comment_or_cdata(c);\n            if (token) {\n              token.type = TOKEN.TEXT;\n              return token;\n            }\n            resulting_string = this._input.readUntil(new RegExp(\"</\" + tag_name + \"[\\\\n\\\\r\\\\t ]*?>\", \"ig\"));\n          } else if (this._is_content_unformatted(tag_name)) {\n            resulting_string = this._input.readUntil(new RegExp(\"</\" + tag_name + \"[\\\\n\\\\r\\\\t ]*?>\", \"ig\"));\n          }\n        }\n        if (resulting_string) {\n          return this._create_token(TOKEN.TEXT, resulting_string);\n        }\n        return null;\n      };\n      Tokenizer.prototype._read_content_word = function(c) {\n        var resulting_string = \"\";\n        if (this._options.unformatted_content_delimiter) {\n          if (c === this._options.unformatted_content_delimiter[0]) {\n            resulting_string = this.__patterns.unformatted_content_delimiter.read();\n          }\n        }\n        if (!resulting_string) {\n          resulting_string = this.__patterns.word.read();\n        }\n        if (resulting_string) {\n          return this._create_token(TOKEN.TEXT, resulting_string);\n        }\n      };\n      module.exports.Tokenizer = Tokenizer;\n      module.exports.TOKEN = TOKEN;\n    }\n  ]);\n  var style_html = legacy_beautify_html;\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, __webpack_require__(0), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = (function(requireamd) {\n      var js_beautify2 = __webpack_require__(0);\n      var css_beautify2 = __webpack_require__(1);\n      return {\n        html_beautify: function(html_source, options) {\n          return style_html(html_source, options, js_beautify2.js_beautify, css_beautify2.css_beautify);\n        }\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var css_beautify, js_beautify; }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("(function() {\n  var assign = Object.assign || function(obj1, obj2) {\n    for (var name in obj2) {\n      if (obj2.hasOwnProperty(name))\n        obj1[name] = obj2[name];\n    }\n    return obj1;\n  };\n  function NormalizeWhitespace(defaults) {\n    this.defaults = assign({}, defaults);\n  }\n  function toCamelCase(value) {\n    return value.replace(/-(\\w)/g, function(match, firstChar) {\n      return firstChar.toUpperCase();\n    });\n  }\n  function tabLen(str) {\n    var res = 0;\n    for (var i = 0; i < str.length; ++i) {\n      if (str.charCodeAt(i) == \"\t\".charCodeAt(0))\n        res += 3;\n    }\n    return str.length + res;\n  }\n  NormalizeWhitespace.prototype = {\n    setDefaults: function(defaults) {\n      this.defaults = assign(this.defaults, defaults);\n    },\n    normalize: function(input, settings) {\n      settings = assign(this.defaults, settings);\n      for (var name in settings) {\n        var methodName = toCamelCase(name);\n        if (name !== \"normalize\" && methodName !== \"setDefaults\" && settings[name] && this[methodName]) {\n          input = this[methodName].call(this, input, settings[name]);\n        }\n      }\n      return input;\n    },\n    leftTrim: function(input) {\n      return input.replace(/^\\s+/, \"\");\n    },\n    rightTrim: function(input) {\n      return input.replace(/\\s+$/, \"\");\n    },\n    tabsToSpaces: function(input, spaces) {\n      spaces = spaces | 0 || 4;\n      return input.replace(/\\t/g, new Array(++spaces).join(\" \"));\n    },\n    spacesToTabs: function(input, spaces) {\n      spaces = spaces | 0 || 4;\n      return input.replace(RegExp(\" {\" + spaces + \"}\", \"g\"), \"\t\");\n    },\n    removeTrailing: function(input) {\n      return input.replace(/\\s*?$/gm, \"\");\n    },\n    removeInitialLineFeed: function(input) {\n      return input.replace(/^(?:\\r?\\n|\\r)/, \"\");\n    },\n    removeIndent: function(input) {\n      var indents = input.match(/^[^\\S\\n\\r]*(?=\\S)/gm);\n      if (!indents || !indents[0].length)\n        return input;\n      indents.sort(function(a, b) {\n        return a.length - b.length;\n      });\n      if (!indents[0].length)\n        return input;\n      return input.replace(RegExp(\"^\" + indents[0], \"gm\"), \"\");\n    },\n    indent: function(input, tabs) {\n      return input.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++tabs).join(\"\t\") + \"$&\");\n    },\n    breakLines: function(input, characters) {\n      characters = characters === true ? 80 : characters | 0 || 80;\n      var lines = input.split(\"\\n\");\n      for (var i = 0; i < lines.length; ++i) {\n        if (tabLen(lines[i]) <= characters)\n          continue;\n        var line = lines[i].split(/(\\s+)/g), len = 0;\n        for (var j = 0; j < line.length; ++j) {\n          var tl = tabLen(line[j]);\n          len += tl;\n          if (len > characters) {\n            line[j] = \"\\n\" + line[j];\n            len = tl;\n          }\n        }\n        lines[i] = line.join(\"\");\n      }\n      return lines.join(\"\\n\");\n    }\n  };\n  if ( true && module.exports) {\n    module.exports = NormalizeWhitespace;\n  }\n  if (typeof Prism === \"undefined\") {\n    return;\n  }\n  Prism.plugins.NormalizeWhitespace = new NormalizeWhitespace({\n    \"remove-trailing\": true,\n    \"remove-indent\": true,\n    \"left-trim\": true,\n    \"right-trim\": true\n  });\n  Prism.hooks.add(\"before-sanity-check\", function(env) {\n    var Normalizer = Prism.plugins.NormalizeWhitespace;\n    if (env.settings && env.settings[\"whitespace-normalization\"] === false) {\n      return;\n    }\n    if ((!env.element || !env.element.parentNode) && env.code) {\n      env.code = Normalizer.normalize(env.code, env.settings);\n      return;\n    }\n    var pre = env.element.parentNode;\n    var clsReg = /(?:^|\\s)no-whitespace-normalization(?:\\s|$)/;\n    if (!env.code || !pre || pre.nodeName.toLowerCase() !== \"pre\" || clsReg.test(pre.className) || clsReg.test(env.element.className))\n      return;\n    var children = pre.childNodes, before = \"\", after = \"\", codeFound = false;\n    for (var i = 0; i < children.length; ++i) {\n      var node = children[i];\n      if (node == env.element) {\n        codeFound = true;\n      } else if (node.nodeName === \"#text\") {\n        if (codeFound) {\n          after += node.nodeValue;\n        } else {\n          before += node.nodeValue;\n        }\n        pre.removeChild(node);\n        --i;\n      }\n    }\n    if (!env.element.children.length || !Prism.plugins.KeepMarkup) {\n      env.code = before + env.code + after;\n      env.code = Normalizer.normalize(env.code, env.settings);\n    } else {\n      var html = before + env.element.innerHTML + after;\n      env.element.innerHTML = Normalizer.normalize(html, env.settings);\n      env.code = env.element.textContent;\n    }\n  });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ../source/core/utils/Utils.js\nconst MAX_LONG = Math.pow(2, 53) + 1;\nfunction isDefined(v) {\n  return typeof v !== \"undefined\" && v !== null;\n}\nfunction hasValue(v) {\n  return isDefined(v) && v !== null;\n}\nfunction hex2rgb(hex) {\n  const [r, g, b] = hex.match(/\\w\\w/g).map((x) => parseInt(x, 16));\n  return [r, g, b];\n}\nfunction hasType(v, expectedType) {\n  let hasVal = hasValue(v);\n  return hasVal && typeof v === expectedType;\n}\nfunction isObject(v, letName) {\n  return hasType(v, \"object\", letName);\n}\nfunction isArray(v) {\n  return isDefined(v) && Array.isArray(v);\n}\nfunction isFunction(v, letName) {\n  return hasType(v, \"function\", letName);\n}\nfunction assertDefined(v, letName = \"letiable\") {\n  if (!isDefined(v)) {\n    throw letName + \" must be defined\";\n  }\n  return v;\n}\nfunction assertTrue(v, letName = \"letiable\") {\n  if (!isDefined(v) || !v) {\n    throw letName;\n  }\n  return v;\n}\nfunction assertType(v, expectedType, letName = \"letiable\") {\n  assertDefined(v, letName);\n  if (typeof v !== expectedType) {\n    throw letName + \" must be of type \" + expectedType;\n  }\n  return v;\n}\nfunction assertBoolean(v, letName) {\n  return assertType(v, \"boolean\", letName);\n}\nfunction assertString(v, letName) {\n  return assertType(v, \"string\", letName);\n}\nfunction assertNumber(v, letName) {\n  return assertType(v, \"number\", letName);\n}\nfunction assertPositive(v, letName) {\n  assertNumber(v, letName);\n  if (v <= 0) {\n    throw letName + \" must be a positive number\";\n  }\n}\nfunction assertObject(v, letName) {\n  return assertType(v, \"object\", letName);\n}\nfunction assertArray(v, letName = \"letiable\") {\n  assertDefined(v, letName);\n  if (!Array.isArray(v)) {\n    throw letName + \" must be an array\";\n  }\n  return v;\n}\nfunction assertFunction(v, letName) {\n  return assertType(v, \"function\", letName);\n}\nfunction assertHasValue(v, letName = \"letiable\") {\n  assertDefined(v, letName);\n  if (!hasValue(v)) {\n    throw letName + \" must not be null\";\n  }\n  return v;\n}\nfunction randomUUID() {\n  return \"xxxxxxxx-xxxx-xxxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    let r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n}\nfunction stampUUID(obj) {\n  obj._osh_id = obj._osh_id || randomUUID();\n  return obj._osh_id;\n}\nfunction ParseBytes(buffer, offset, type) {\n  let view = new DataView(buffer);\n  let typeMap = {\n    double: function(offset2) {\n      return { val: view.getFloat64(offset2), bytes: 8 };\n    },\n    float64: function(offset2) {\n      return { val: view.getFloat64(offset2), bytes: 8 };\n    },\n    float32: function(offset2) {\n      return { val: view.getFloat32(offset2), bytes: 4 };\n    },\n    signedByte: function(offset2) {\n      return { val: view.getInt8(offset2), bytes: 1 };\n    },\n    signedInt: function(offset2) {\n      return { val: view.getInt32(offset2), bytes: 4 };\n    },\n    signedShort: function(offset2) {\n      return { val: view.getInt16(offset2), bytes: 2 };\n    },\n    unsignedByte: function(offset2) {\n      return { val: view.getUint8(offset2), bytes: 1 };\n    },\n    unsignedInt: function(offset2) {\n      return { val: view.getUint32(offset2), bytes: 4 };\n    },\n    unsignedShort: function(offset2) {\n      return { val: view.getUint16(offset2), bytes: 2 };\n    }\n  };\n  return typeMap[type](offset);\n}\nfunction ReadData(struct, data, offsetBytes) {\n  let offset = offsetBytes;\n  for (let i = 0; i < struct.fields.length; i++) {\n    let currFieldStruct = struct.fields[i];\n    if (isDefined(currFieldStruct.type) && currFieldStruct.type !== null) {\n      let ret = ParseBytes(data, offset, currFieldStruct.type);\n      currFieldStruct.val = ret.val;\n      offset += ret.bytes;\n    } else if (isDefined(currFieldStruct.count) && currFieldStruct.count !== null) {\n      if (isNaN(currFieldStruct.count)) {\n        let id = currFieldStruct.count;\n        let fieldName = struct.id2FieldMap[id];\n        currFieldStruct.count = struct.findFieldByName(fieldName).val;\n      }\n      for (let c = 0; c < currFieldStruct.count; c++) {\n        for (let j = 0; j < currFieldStruct.fields.length; j++) {\n          let field = JSON.parse(JSON.stringify(currFieldStruct.fields[j]));\n          offset = ReadData(field, data, offset);\n          currFieldStruct.val.push(field);\n        }\n      }\n    }\n  }\n  return offset;\n}\nfunction GetResultObject(resultStructure) {\n  let result = {};\n  for (let i = 0; i < resultStructure.fields.length; i++) {\n    if (isDefined(resultStructure.fields[i].count)) {\n      result[resultStructure.fields[i].name] = [];\n      for (let c = 0; c < resultStructure.fields[i].count; c++) {\n        let item = {};\n        for (let k = 0; k < resultStructure.fields[i].val[c].fields.length; k++) {\n          item[resultStructure.fields[i].val[c].fields[k].name] = resultStructure.fields[i].val[c].fields[k].val;\n        }\n        result[resultStructure.fields[i].name].push(item);\n      }\n    } else {\n      result[resultStructure.fields[i].name] = resultStructure.fields[i].val;\n    }\n  }\n  return result;\n}\nfunction isOpera() {\n  return !!window.opr && !!opr.addons || !!window.opera || navigator.userAgent.indexOf(\" OPR/\") >= 0;\n}\nfunction isFirefox() {\n  return typeof InstallTrigger !== \"undefined\";\n}\nfunction isSafari() {\n  return Object.prototype.toString.call(window.HTMLElement).indexOf(\"Constructor\") > 0;\n}\nfunction isChrome() {\n  return !!window.chrome && !!window.chrome.webstore;\n}\nfunction isBlink() {\n  return (isChrome || isOpera) && !!window.CSS;\n}\nfunction isArrayIntersect(a, b) {\n  return a.filter(function(element) {\n    return b.indexOf(element) > -1;\n  }).length > 0;\n}\nfunction isElement(o) {\n  return typeof HTMLElement === \"object\" ? o instanceof HTMLElement : o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n}\nfunction isWebWorker() {\n  return isDefined(Worker);\n}\nfunction takeScreenShot(div) {\n}\nfunction removeCss(div, css) {\n  let divCss = div.className;\n  css = divCss.replace(css, \"\");\n  div.className = css;\n}\nfunction addCss(div, css) {\n  div.setAttribute(\"class\", div.className + \" \" + css);\n}\nfunction removeLastCharIfExist(value) {\n  if (!isDefined(void 0) || value === null || value.length === 0 || !value.endsWith(\"/\")) {\n    return value;\n  }\n  return value.substring(0, value.length - 1);\n}\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction roundHalf(num) {\n  return Math.round(num * 2) / 2;\n}\nfunction debounce(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n  var later = function() {\n    var now = new Date().getTime(), last = now - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout)\n          context = args = null;\n      }\n    }\n  };\n  return function() {\n    context = this;\n    args = arguments;\n    timestamp = new Date().getTime();\n    var callNow = immediate && !timeout;\n    if (!timeout)\n      timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n}\n;\nfunction throttle(func, wait, leading, trailing, context) {\n  var ctx, args, result;\n  var timeout = null;\n  var previous = 0;\n  var later = function() {\n    previous = new Date();\n    timeout = null;\n    result = func.apply(ctx, args);\n  };\n  return function() {\n    var now = new Date();\n    if (!previous && !leading)\n      previous = now;\n    var remaining = wait - (now - previous);\n    ctx = context || this;\n    args = arguments;\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(ctx, args);\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n}\n;\nfunction merge(target, source) {\n  for (const key of Object.keys(source)) {\n    if (source[key] instanceof Object && key in target)\n      Object.assign(source[key], merge(target[key], source[key]));\n  }\n  Object.assign(target || {}, source);\n  return target;\n}\n;\nfunction rgbaToArray(str) {\n  let startIdxValue = str.indexOf(\"(\") + 1;\n  let endIdxValue = str.indexOf(\")\");\n  let values = str.substr(startIdxValue, endIdxValue - startIdxValue);\n  return values.split(\",\").map(Number);\n}\n\n// CONCATENATED MODULE: ./index.js\n\nconst Prism = __webpack_require__(2);\nconst beautify = __webpack_require__(4).js;\nvar Normalizer = __webpack_require__(6);\nvar samples = [\n  {\n    name: \"FOI Locations (CesiumJS)\",\n    description: \"Display the location of several features of interest on a CesiumJS globe.\",\n    url: \"cesium-fois\"\n  },\n  {\n    name: \"Moving Location (CesiumJS)\",\n    description: \"Display a moving marker on a CesiumJS globe, tracking the current location of a vehicle.\",\n    url: \"cesium-location\"\n  },\n  {\n    name: \"Moving Location with custom viewer properties(CesiumJS)\",\n    description: \"Display a moving marker on a CesiumJS globe, tracking the current location of a vehicle and define some custom cesium viewer properties.\",\n    url: \"cesium-location-opts\"\n  },\n  {\n    name: \"Moving Location  + path (CesiumJS)\",\n    description: \"Display a moving marker and a polyline on a CesiumJS map, showing both the current location of a vehicle and the historical track.\",\n    url: \"cesium-location-path\"\n  },\n  {\n    name: \"Moving Location (Deck.gl)\",\n    description: \"Display a moving marker on a Deck.gl canvas, tracking the current location of a vehicle.\",\n    url: \"deckgl-location\"\n  },\n  {\n    name: \"Simple Chart (Chart.js)\",\n    description: \"Display a chart with time series of weather measurements.\",\n    url: \"chart\"\n  },\n  {\n    name: \"Moving Location (Leaflet)\",\n    description: \"Display a moving marker on a Leaflet map, tracking the current location of a vehicle.\",\n    url: \"leaflet-location\"\n  },\n  {\n    name: \"FOI Locations (Leaflet)\",\n    description: \"Display the location of several features of interest on a Leaflet map.\",\n    url: \"leaflet-location-fois\",\n    screenshot: \"images/screenshots/leaflet-fois.png\"\n  },\n  {\n    name: \"Moving Location + Heading (Leaflet)\",\n    description: \"Display a moving marker on a Leaflet map, tracking the current location and heading of a vehicle.\",\n    url: \"leaflet-location-heading\"\n  },\n  {\n    name: \"Moving Location + Path (Leaflet)\",\n    description: \"Display a moving marker and a polyline on a Leaflet map, showing both the current location of a vehicle and the historical track.\",\n    url: \"leaflet-location-path\"\n  },\n  {\n    name: \"Moving Location (OpenLayers)\",\n    description: \"Display a moving marker on an OpenLayers map, tracking the current location of a vehicle.\",\n    url: \"openlayers-location\"\n  },\n  {\n    name: \"Moving Location + Heading (OpenLayers)\",\n    description: \"Display a moving marker on an OpenLayers map, tracking the current location and heading of a vehicle.\",\n    url: \"openlayers-location-heading\"\n  },\n  {\n    name: \"Moving Location + Path + Heading (Mapbox)\",\n    description: \"Display a moving marker and a polyline on a Mapbox map, showing both the current location of a vehicle and the historical track.\",\n    url: \"mapbox-location-path-heading\"\n  },\n  {\n    name: \"Moving Location + Heading + Video (Leaflet)\",\n    description: \"Display a moving marker on an Leaflet map, tracking the current location of a vehicle and its correspondingvideo. Create duplicated dataSources running at different time to check there is no collision between data. The 2 datasets are using a DataSynchronizer object. Each one should be independent.\",\n    url: \"video-map-multiple-datasource\"\n  },\n  {\n    name: \"Z-Index ordering\",\n    description: \"Display a moving marker on an Leaflet, DeckGl,Cesium and Openlayers map using a z-Index between markers\",\n    url: \"zIndex-location-path\"\n  },\n  {\n    name: \"Resizable H264 Video\",\n    description: \"Display an H264 video in a simple resizable DIV using our FFMPEG-JS decoder.\",\n    url: \"video-h264\"\n  },\n  {\n    name: \"H264 Video using WebCodecAPI\",\n    description: \"Display an H264 video in a simple DIV using Experimental Hardware WebCodecAPI decoder.\",\n    url: \"video-h264-webcodec-api\"\n  },\n  {\n    name: \"H264 Image draping Video\",\n    description: \"Display an H264 video in a simple DIV using our FFMPEG-JS decoder and drap the decoded frame onto the terrain.\",\n    url: \"video-h264-draping\"\n  },\n  {\n    name: \"Resizable MJPEG Video\",\n    description: \"Display an MJPEG video in a simple resizable DIV.\",\n    url: \"video-mjpeg\"\n  },\n  {\n    name: \"VueJs component: Multiple Video with control\",\n    description: \"Display multiple videos using forward/pause/play/backward control using the same DataSynchronizer\",\n    url: \"video-with-control-vuejs-synchronized\",\n    code: \"vue/App_examples/video-with-control-vuejs-synchronized.vue\"\n  },\n  {\n    name: \"AVL data using multiple ids\",\n    description: \"Display multiple markers corresponding to a unique id provided by the same DataSource\",\n    url: \"avl\"\n  },\n  {\n    name: \"AVL data using multiple ids and Time controller in VueJS\",\n    description: \"Display multiple markers corresponding to a unique id provided by the same DataSource with a Time controller in VueJS\",\n    url: \"avl-with-control-vuejs\",\n    code: \"vue/App_examples/avl-with-control-vuejs.vue\"\n  },\n  {\n    name: \"ISA Biological & MISB UAS sensor data using MQTT protocol\",\n    description: \"Display biological and GPS sensors from ISA Biological Sensor & MISB UAS using MQTT protocol\",\n    url: \"mqtt\"\n  },\n  {\n    name: \"Chart with Time controller (Chart.js)\",\n    description: \"Display a chart with time series of weather measurements and time controller.\",\n    url: \"chart-archive-realtime\",\n    code: \"vue/App_examples/chart-archive-realtime.vue\"\n  },\n  {\n    name: \"Chart with Time controller (Chart.js) in batch mode\",\n    description: \"Display a chart using full batch mode with time series of weather measurements and time controller.\",\n    url: \"chart-archive-realtime-batch\",\n    code: \"vue/App_examples/chart-archive-realtime-batch.vue\"\n  },\n  {\n    name: \"Chart with Time controller and Synchronizer (Chart.js)\",\n    description: \"Display a chart with time series of weather measurements and time controller.\",\n    url: \"chart-archive-realtime-synchronized\",\n    code: \"vue/App_examples/chart-archive-realtime-synchronized.vue\"\n  },\n  {\n    name: \"Audio WebCodec/FFmpeg.js decoding\",\n    description: \"Listen audio stream using WebCodec/FFmpeg.js\",\n    url: \"audio\"\n  },\n  {\n    name: \"Audio WebCodec/FFmpeg.js decoding with time controller\",\n    description: \"Listen audio stream using WebCodec/FFmpeg.js with time controller\",\n    url: \"audio-with-control-vuejs\",\n    code: \"vue/App_examples/audio-with-control-vuejs.vue\"\n  },\n  {\n    name: \"Audio & Video WebCodec/FFmpeg.js decoding with time controller\",\n    description: \"Listen audio stream using WebCodec/FFmpeg.js with time controller and associated Video\",\n    url: \"audio-video-synchronized-with-control-vuejs\",\n    code: \"vue/App_examples/audio-video-synchronized-with-control-vuejs.vue\"\n  },\n  {\n    name: \"Tasking simulated drone using SweApi\",\n    description: \"Tasking simulated drone using SweApi, display drone position and control status\",\n    url: \"tasking\"\n  }\n];\nvar currentSample;\nsamples.forEach((s) => {\n  var $newElt = $($(\"#card-template\").html());\n  $(\"p.card-text\", $newElt).html(s.description);\n  $(\"img\", $newElt).on(\"error\", (e) => e.target.src = \"https://opensensorhub.files.wordpress.com/2017/08/opensensorhub-logo2.png\").attr(\"title\", s.name).attr(\"src\", \"images/screenshots/\" + s.url + \".jpg\");\n  $(\"button\", $newElt).on(\"click\", (e) => {\n    currentSample = s;\n    $(\"#src-code\").empty();\n    $(\"#src-code\").hide();\n    $(\"#sample-area\").empty();\n    $(\"#sample-area\").show();\n    const iframeId = randomUUID();\n    const iframe = document.createElement(\"iframe\");\n    iframe.setAttribute(\"class\", \"iframe-example\");\n    iframe.setAttribute(\"style\", \"width:100%;height:100%;border:none;padding:0px\");\n    iframe.setAttribute(\"id\", iframeId);\n    iframe.setAttribute(\"src\", s.url + \".html\");\n    iframe.onload = function() {\n      let $body = $(\"body\", iframe.contentWindow.document);\n      $body.css(\"margin\", \"0\");\n    };\n    const sampleArea = document.getElementById(\"sample-area\");\n    sampleArea.appendChild(iframe);\n    $(\"#sample-dialog h5\").html(s.name);\n    $(\"#sample-dialog\").modal(\"show\");\n  });\n  $(\"#sample-list\").append($newElt);\n});\n$(\"#close-button\").button().on(\"click\", (e) => {\n  $(\"#sample-area\").empty();\n  $(\"#pre-code\").addClass(\"hide\");\n});\n$(\"#src-button\").button().on(\"click\", (e) => {\n  if ($(\"#sample-area\").is(\":hidden\")) {\n    $(\"#sample-area\").show();\n    $(\"#src-code\").hide();\n    $(\"#src-code\").empty();\n    $(\"#pre-code\").addClass(\"hide\");\n    $(\"#pre-code\").removeClass(\"show\");\n    return;\n  }\n  let url = \"js/\" + currentSample.url + \".js\";\n  if (currentSample.code) {\n    url = currentSample.code;\n  }\n  fetch(url).then((r) => r.text()).then((srcString) => {\n    $(\"#src-code\").empty();\n    let html = Prism.highlight(srcString, Prism.languages.javascript);\n    $(\"#sample-area\").hide();\n    $(\"#pre-code\").removeClass(\"hide\");\n    $(\"#pre-code\").addClass(\"show\");\n    $(\"#src-code\").append(html);\n    $(\"#src-code\").show();\n  });\n});\n$(\"#shared-button\").button().on(\"click\", (e) => {\n  let url = currentSample.url + \".html\";\n  const win = window.open(url, \"_blank\");\n  win.focus();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ })
/******/ ]);